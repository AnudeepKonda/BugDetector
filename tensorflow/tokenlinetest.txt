public void setOnHeartbeat ( OnHeartbeat onHeartbeat ) { </a> <a> public void addIntHeader ( String name , int value ) { </a> <a> public String onCompleted ( Response response ) throws Exception { </a> <a> public void setStatus ( int status , String statusMessage ) { </a> <a> public int getStatus ( ) { </a> <a> void configureBroadcasterFilter ( List < String > list ) { </a> <a> public String getStatusMessage ( ) { </a> <a> public Callable < String > publish ( final @ FormParam ( "message" ) String message ) { </a> <a> public int maxArity ( ) {
{ </a> <a> public Collection < String > getHeaders ( String name ) { </a> <a> private void disconnectSubscriber ( ) { </a> <a> public InputStream getJQuery ( @ PathParam ( "id" ) PathSegment ps ) { </a> <a> public InputStream getIndex ( ) { </a> <a> public void setCharacterEncoding ( String charSet ) { </a> <a> private </a> <a> public void flushBuffer ( ) throws IOException { </a> <a> public String getCharacterEncoding ( ) { </a> <a> protected void include ( String source ) { </a> <a> public boolean isDestroyable ( ) { </a> <a> public void init ( ServletConfig
ServletConfig sc ) throws ServletException { </a> <a> public ServletOutputStream getOutputStream ( ) throws IOException { </a> <a> public void write ( int i ) throws java . io . IOException { </a> <a> public void testBroadcastFilter ( ) { </a> <a> public void execute ( ) ; </a> <a> protected SignatureJSO ( ) { </a> <a> public void write ( byte [ ] bytes ) throws java . io . IOException { </a> <a> public void execute ( ) ; </a> <a> public BroadcastAction filter ( Object o , Object message ) { </a> <a> public ExporterBaseActual ( ) {
{ </a> <a> } </a> <a> public void execute ( ) ; </a> <a> public void onPSubscribe ( String pattern , int subscribedChannels ) { </a> <a> public void setWrapper ( Object instance , JavaScriptObject wrapper ) { </a> <a> public void close ( ) throws java . io . IOException { </a> <a> public static String decode ( String s , Type t ) { </a> <a> public Map < String , AtmosphereHandlerWrapper > getAtmosphereHandlers ( ) { </a> <a> char next ( ) ; </a> <a> } </a> <a> public int getTimeout ( ) { </a> <a> public String
String toString ( ) { </a> <a> public void write ( char [ ] chars , int offset , int lenght ) { </a> <a> public String toString ( ) { </a> <a> public List < String > getBroadcastFilterClasses ( ) { </a> <a> public void write ( char [ ] chars ) { </a> <a> public void run ( ) { </a> <a> public List < String > getAtmosphereInterceptorClasses ( ) { </a> <a> public String getHandlersPath ( ) { </a> <a> public void onComplete ( Continuation continuation ) { </a> <a> protected boolean hasSession ( ) { </a> <a>
<a> public ATMOSPHERE_RESOURCE_POLICY getLifeCyclePolicy ( ) { </a> <a> public static native JavaScriptObject deboxHostedMode ( </a> <a> public static JavaScriptObject wrap ( double [ ] type ) { </a> <a> public void onClose ( WebSocketEvent event ) { </a> <a> public static JavaScriptObject wrap ( int [ ] type ) { </a> <a> public static JavaScriptObject wrap ( long [ ] type ) { </a> <a> HttpServletResponse response , String responsePayload ) { </a> <a> } </a> <a> public String generate ( TreeLogger logger , GeneratorContext ctx , </a> <a> public void onSuspend ( AtmosphereResourceEvent event ) { </a> <a> public
public AtmosphereResponse ( AsyncIOWriter asyncIOWriter , AtmosphereRequest atmosphereRequest , boolean destroyable ) { </a> <a> public AsyncIOWriter write ( byte [ ] data , int offset , int length ) throws IOException { </a> <a> public EventsLogger ( ) { </a> <a> public static void exportAll ( ) { </a> <a> void startClose ( ) ; </a> <a> public int doComet ( GwtAtmosphereResource resource ) throws ServletException , IOException { </a> <a> String field ) { </a> <a> void sendHeartBeat ( ) ; </a> <a> void timeout ( ) ; </a> <a> public void onDestroyed ( AtmosphereRequest request , AtmosphereResponse response
response ) { </a> <a> public void onSuspend ( final AtmosphereResourceEvent event ) { </a> <a> public List < String > broadcasterFilters ( ) { </a> <a> public AtmosphereRequest request ( ) { </a> <a> public void close ( ) throws IOException { </a> <a> public AsyncIOWriter redirect ( String location ) throws IOException { </a> <a> public void onDisconnect ( AtmosphereResourceEvent event ) { </a> <a> public void cancel ( ) { </a> <a> public abstract Callable < Boolean > getCommand ( ) ; </a> <a> public AtmosphereResponse ( HttpServletResponse r , AsyncIOWriter asyncIOWriter , AtmosphereRequest atmosphereRequest , boolean destroyable
destroyable ) { </a> <a> void setTimeout ( long timeout ) ; </a> <a> long getHeartbeatInterval ( ) ; </a> <a> } </a> <a> protected Injector getInjector ( ) { </a> <a> private SerializationPolicy getCachedSerializationPolicy ( </a> <a> private void padding ( ) { </a> <a> public void setResponse ( ServletResponse response ) { </a> <a> public void destroy ( ) { </a> <a> public String encodeRedirectUrl ( String url ) { </a> <a> public boolean isInstantiable ( ) { </a> <a> public void setAuthor ( String author ) { </a> <a> public void setDateHeader ( String name , long date
date ) { </a> <a> public String getMessage ( ) { </a> <a> public void setMessage ( String msg ) { </a> <a> public AtmosphereFramework addInitParameter ( String name , String value ) { </a> <a> } </a> <a> } </a> <a> public Collection < String > getHeaderNames ( ) { </a> <a> public AtmosphereServlet ( ) { </a> <a> public void init ( final ServletConfig sc ) throws ServletException { </a> <a> public void configureCometSupport ( ) { </a> <a> void changeRoom ( final String newRoom ) { </a> <a> public void unsetAtmosphereHandler ( ) throws Exception { </a> <a>
<a> throws IOException , ServletException { </a> <a> public void execute ( ) { </a> <a> private void exportStructuralTypeConstructor ( String genName , </a> <a> throws IOException , ServletException { </a> <a> public void doGet ( HttpServletRequest req , HttpServletResponse res ) </a> <a> public void doPost ( HttpServletRequest req , HttpServletResponse res ) </a> <a> private void exportStructuralTypeFields ( JExportableClassType requestedType ) { </a> <a> public WebSocketException ( String s , AtmosphereResponse r ) { </a> <a> public WebSocketException ( Throwable throwable , AtmosphereResponse r ) { </a> <a> private void exportAll ( String genName ) { </a> <a> abstract
abstract public void incomingBroadcast ( ) ; </a> <a> public void onAfterRefresh ( ) { </a> <a> public Broadcastable filter ( @ FormParam ( "message" ) String message ) { </a> <a> public Broadcastable aggregate ( @ FormParam ( "message" ) String message ) { </a> <a> public static int getEnvVariable ( final String varName , int defaultValue ) { </a> <a> public void broadcast ( Serializable message , GwtAtmosphereResource resource ) { </a> <a> public Action service ( AtmosphereRequest req , AtmosphereResponse res ) </a> <a> void init ( ServletConfig sc ) throws ServletException ; </a> <a> BroadcastAction filter (
( Object originalMessage , Object message ) ; </a> <a> public void run ( ) { </a> <a> public void show ( ) { </a> <a> < T > Future < T > broadcast ( T o , AtmosphereResource resource ) ; </a> <a> < T > Future < T > broadcastOnResume ( T o ) ; </a> <a> void destroy ( ) ; </a> <a> void setScope ( SCOPE scope ) ; </a> <a> void resumeAll ( ) ; </a> <a> } </a> <a> } </a> <a> public SerializationPolicy getSerializationPolicy ( String moduleBaseURL , String serializationPolicyStrongName ) { </a> <a>
<a> void addToCache ( AtmosphereResource r , Object e ) ; </a> <a> void addToCache ( AtmosphereResource r , Object e ) ; </a> <a> List < Object > retrieveFromCache ( AtmosphereResource r ) ; </a> <a> private void debugJSPassedValues ( JExportableMethod method ) { </a> <a> List < Object > retrieveFromCache ( AtmosphereResource r ) ; </a> <a> boolean useArgumentsArray ) { </a> <a> public void doFilter ( ServletRequest request , ServletResponse response ) </a> <a> public int getHeartBeatInterval ( ) ; </a> <a> public int doComet ( GwtAtmosphereResource resource ) throws ServletException , IOException { </a> <a> public void
void cometTerminated ( GwtAtmosphereResource cometResponse , boolean serverInitiated ) { </a> <a> private void declareParameters ( JExportableMethod method , int arity , </a> <a> public void setServlet ( ServletConfig configImpl , Servlet servlet ) { </a> <a> public Servlet getServlet ( ) { </a> <a> public void destroy ( ) { </a> <a> public Thread newThread ( final Runnable runnable ) { </a> <a> public void onInitialize ( CometEvent ce ) throws IOException { </a> <a> public void onTerminate ( CometEvent ce ) throws IOException { </a> <a> public void onError ( Throwable exception , boolean connected ) { </a> <a>
<a> public static void post ( Window w , String socketName , String message ) { </a> <a> public boolean isResumed ( ) { </a> <a> public void post ( List < ? > messages , AsyncCallback < Void > callback ) { </a> <a> public void onMessage ( List < ? > messages ) { </a> <a> public BroadcasterConfig setExecutorService ( ExecutorService executorService ) { </a> <a> private static int getCodeLengths ( int [ ] tree , int idx , int depth , int [ ] blCount , int maxCodeLen ) { </a> <a> public Broadcaster get ( Class <
< ? extends Broadcaster > c , Object id ) { </a> <a> public BroadcasterConfig setAsyncWriteService ( ExecutorService asyncWriteService ) { </a> <a> public void onClick ( ClickEvent event ) { </a> <a> private void logDuplicateFilter ( BroadcastFilter e ) { </a> <a> public void onClick ( ClickEvent event ) { </a> <a> } </a> <a> private static String unableToDetectComet ( ) { </a> <a> } </a> <a> public void testResumeOnBroadcast ( ) throws Exception { </a> <a> public void close ( ) { </a> <a> public void removeValue ( String name ) { </a> <a> public boolean removeFilter ( BroadcastFilter
BroadcastFilter filter ) { </a> <a> public void onComplete ( Continuation continuation ) { </a> <a> public String getInitParameter ( String name ) { </a> <a> public boolean hasPerRequestFilters ( ) { </a> <a> protected SourceWriter getSourceWriter ( TreeLogger logger , </a> <a> public AtmosphereMappingException ( java . lang . Throwable throwable ) { </a> <a> public long getLastAccessedTime ( ) { </a> <a> protected BroadcastAction filter ( AtmosphereResource r , Object message , Object originalMessage ) { </a> <a> public BroadcasterConfig setScheduledExecutorService ( ScheduledExecutorService scheduler ) { </a> <a> public ScheduledExecutorService getScheduledExecutorService ( ) { </a> <a> private void refreshEnqueue
refreshEnqueue ( Object message ) { </a> <a> private void doOnError ( Throwable exception , boolean connected , CometClientTransportWrapper transport ) { </a> <a> public String getInitParameter ( String name ) { </a> <a> public void recycle ( ) { </a> <a> public List < Object > retrieveFromCache ( AtmosphereResource r ) { </a> <a> public void cometTerminated ( GwtAtmosphereResource cometResponse , boolean serverInitiated ) { </a> <a> public void doPost ( HttpServletRequest postRequest , HttpServletResponse postResponse , List < Serializable > messages , GwtAtmosphereResource cometResource ) { </a> <a> protected void push ( Entry entry ) { </a> <a> public
public void destroy ( ) { </a> <a> public void onClick ( ClickEvent event ) { </a> <a> public void unsetAtmosphereHandler ( ) { </a> <a> public BroadcasterConfig ( List < String > list , AtmosphereConfig config , boolean createExecutor ) { </a> <a> abstract public boolean add ( Broadcaster b , Object id ) ; </a> <a> abstract public Broadcaster lookup ( Class < ? extends Broadcaster > c , Object id ) ; </a> <a> abstract public Broadcaster lookup ( Class < ? extends Broadcaster > c , Object id , boolean createIfNull ) ; </a> <a> abstract public
