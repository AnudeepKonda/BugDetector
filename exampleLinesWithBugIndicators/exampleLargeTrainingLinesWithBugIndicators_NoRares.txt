<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . http . servlet . <RARE_TOKEN> ; </a> 1
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereHandler ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 1
<a> import org . atmosphere . cpr . FrameworkConfig ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 1
<a> import java . io . File ; </a> 1
<a> import java . net . <RARE_TOKEN> ; </a> 1
<a> import java . net . <RARE_TOKEN> ; </a> 1
<a> import java . net . URL ; </a> 1
<a> import java . net . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private String <RARE_TOKEN> = null ; </a> 1
<a> private final AtmosphereServlet <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> @ Override </a> 1
<a> public void start ( ) { </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> super . start ( ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> public void <RARE_TOKEN> ( String path , AtmosphereHandler <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( path , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> private static class <RARE_TOKEN> extends AtmosphereServlet { </a> 1
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> cometSupport = new <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) </a> 1
<a> throws <RARE_TOKEN> , <RARE_TOKEN> { </a> 1
<a> try { </a> 0
<a> Class . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> URL <RARE_TOKEN> = <RARE_TOKEN> . getResource ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) return ; </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> . getPath ( ) ; </a> 1
<a> } </a> 1
<a> File f = new File ( <RARE_TOKEN> ) ; </a> 1
<a> if ( ! f . <RARE_TOKEN> ( ) ) { </a> 1
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( System . getProperty ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( "/" , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> int index = <RARE_TOKEN> . indexOf ( <RARE_TOKEN> ) ; </a> 1
<a> if ( index < 1 ) { </a> 1
<a> index = <RARE_TOKEN> . length ( ) ; </a> 1
<a> } </a> 1
<a> String <RARE_TOKEN> = <RARE_TOKEN> . substring ( 0 , index ) ; </a> 1
<a> f = new File ( <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) + FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . name . Names ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . atmosphere . cpr . FrameworkConfig ; </a> 0
<a> import org . atmosphere . handler . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends AtmosphereServlet { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> protected static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ServletConfig sc ) throws ServletException { </a> 1
<a> super . <RARE_TOKEN> ( sc ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( sc ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ServletConfig sc ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) config . getServletContext ( ) . getAttribute ( <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( sc . getServletContext ( ) . getAttribute ( <RARE_TOKEN> ) == null ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( false ) ; </a> 0
<a> String mapping = sc . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 0
<a> if ( mapping == null ) { </a> 0
<a> mapping = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Map < String , String > <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( </a> 0
<a> <RARE_TOKEN> . get ( new <RARE_TOKEN> < Map < String , String > > ( ) { </a> 0
<a> } , Names . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> for ( String p : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( p , <RARE_TOKEN> . get ( p ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> logger . debug ( "failed to add <RARE_TOKEN> init parameters to <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( mapping , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . servlet . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . core . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . core . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . core . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . core . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . <RARE_TOKEN> . container . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . container . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . container . servlet . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . container . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import java . util . Map ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> config , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( config , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Map < <RARE_TOKEN> , <RARE_TOKEN> > <RARE_TOKEN> ( ) { </a> 0
<a> Map < <RARE_TOKEN> , <RARE_TOKEN> > m = super . <RARE_TOKEN> ( ) ; </a> 0
<a> m . put ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> return m ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( Map < String , Object > <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) throws ServletException { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> config , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( config , new <RARE_TOKEN> ( config , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void inject ( Object o ) { </a> 0
<a> com . google . inject . <RARE_TOKEN> <RARE_TOKEN> = ( com . google . inject . <RARE_TOKEN> ) </a> 0
<a> <RARE_TOKEN> . getServletContext ( ) . getAttribute ( com . google . inject . <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> in current <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( o ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( ServletConfig sc ) throws ServletException { </a> 1
<a> sc . getServletContext ( ) . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> super . <RARE_TOKEN> ( sc ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . AsyncHttpClient ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . Response ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . http . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . http . servlet . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . testng . <RARE_TOKEN> . Test ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import static org . testng . Assert . assertEquals ; </a> 0
<a> import static org . testng . Assert . assertNotNull ; </a> 0
<a> import static org . testng . Assert . assertTrue ; </a> 0
<a> import static org . testng . Assert . fail ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> protected static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> ws ; </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> protected AtmosphereServlet atmoServlet ; </a> 0
<a> public String urlTarget ; </a> 0
<a> public int port ; </a> 0
<a> public static class <RARE_TOKEN> { </a> 0
<a> public static int <RARE_TOKEN> ( final String <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> if ( null == <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = System . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( null != <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> return Integer . parseInt ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> port = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> urlTarget = <RARE_TOKEN> + port + <RARE_TOKEN> ; </a> 0
<a> atmoServlet = new <RARE_TOKEN> ( ) ; </a> 0
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , this . getClass ( ) . <RARE_TOKEN> ( ) . getName ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> if ( atmoServlet != null ) atmoServlet . destroy ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( 10 , TimeUnit . SECONDS ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> String resume = r . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( resume , <RARE_TOKEN> ) ; </a> 0
<a> long current = System . currentTimeMillis ( ) - <RARE_TOKEN> ; </a> 0
<a> assertTrue ( current > <RARE_TOKEN> && current < <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> atmoServlet . <RARE_TOKEN> ( new <RARE_TOKEN> ( atmoServlet . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ws = new <RARE_TOKEN> ( port ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> ws . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( atmoServlet ) ; </a> 0
<a> ws . <RARE_TOKEN> ( <RARE_TOKEN> , new String [ ] { <RARE_TOKEN> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> ws . start ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ws . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . name . Names ; </a> 0
<a> import com . google . inject . servlet . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . servlet . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> bind ( <RARE_TOKEN> . class ) ; </a> 0
<a> bind ( new <RARE_TOKEN> < Map < String , String > > ( ) { </a> 0
<a> } ) . <RARE_TOKEN> ( Names . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ) . <RARE_TOKEN> ( </a> 0
<a> Collections . < String , String > <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . GWT ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 1
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . logging . Level ; </a> 0
<a> import java . util . logging . Logger ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 1
<a> } </a> 0
<a> private String url ; </a> 0
<a> private final <RARE_TOKEN> serializer ; </a> 0
<a> private final <RARE_TOKEN> listener ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean running ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private List < Object > <RARE_TOKEN> ; </a> 0
<a> private static final Object <RARE_TOKEN> = new Object ( ) ; </a> 0
<a> private static final Object <RARE_TOKEN> = new Object ( ) ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> = 1000 ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> private Logger logger = Logger . getLogger ( getClass ( ) . getName ( ) ) ; </a> 0
<a> private <RARE_TOKEN> < Void > <RARE_TOKEN> = new <RARE_TOKEN> < Void > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Throwable <RARE_TOKEN> ) { </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , "Failed to post <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Void result ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public <RARE_TOKEN> ( String url , <RARE_TOKEN> listener ) { </a> 0
<a> this ( url , null , listener ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String url , <RARE_TOKEN> serializer , <RARE_TOKEN> listener ) { </a> 0
<a> this ( url , serializer , listener , false ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String url , <RARE_TOKEN> serializer , <RARE_TOKEN> listener , boolean <RARE_TOKEN> ) { </a> 0
<a> this . url = url ; </a> 0
<a> this . serializer = serializer ; </a> 0
<a> this . listener = listener ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return url ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String url ) { </a> 0
<a> this . url = url ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return serializer ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return listener ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return running ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void post ( Serializable message ) { </a> 0
<a> <RARE_TOKEN> . post ( message , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void post ( Serializable message , <RARE_TOKEN> < Void > callback ) { </a> 0
<a> <RARE_TOKEN> . post ( message , callback ) ; </a> 0
<a> } </a> 0
<a> public void post ( List < Serializable > messages ) { </a> 0
<a> <RARE_TOKEN> . post ( messages , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void post ( List < Serializable > messages , <RARE_TOKEN> < Void > callback ) { </a> 0
<a> <RARE_TOKEN> . post ( messages , callback ) ; </a> 0
<a> } </a> 0
<a> public void broadcast ( Serializable message ) { </a> 0
<a> <RARE_TOKEN> . broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> public void broadcast ( List < Serializable > messages ) { </a> 0
<a> <RARE_TOKEN> . broadcast ( messages ) ; </a> 0
<a> } </a> 0
<a> public void start ( ) { </a> 0
<a> <RARE_TOKEN> . get ( ) . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void execute ( ) { </a> 0
<a> if ( ! running ) { </a> 0
<a> running = true ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> handler = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( handler ) ; </a> 1
<a> final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( handler ) ; </a> 1
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> { </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! done ) { </a> 0
<a> done = true ; </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> client <RARE_TOKEN> of <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean done = false ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( running ) { </a> 0
<a> running = false ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . connect ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> . disconnect ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . disconnect ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> , <RARE_TOKEN> transport ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( transport == <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . disconnect ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> throw new IllegalStateException ( "Unexpected <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> throw new IllegalStateException ( "Unexpected connection from <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> listener . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> transport ) { </a> 0
<a> if ( <RARE_TOKEN> == null && transport == <RARE_TOKEN> ) { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> transport ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( transport == <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 1
<a> throw new IllegalStateException ( "Unexpected <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> GWT . log ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> transport <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( running ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> GWT . log ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> for ( Object object : <RARE_TOKEN> ) { </a> 0
<a> if ( object == <RARE_TOKEN> || object == <RARE_TOKEN> ) { </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ( List < ? extends Serializable > ) object , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( <RARE_TOKEN> . size ( ) > 0 ) { </a> 0
<a> GWT . log ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> for ( Object object : <RARE_TOKEN> ) { </a> 0
<a> if ( object == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else if ( object == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ( List < ? extends Serializable > ) object , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> transport ) { </a> 0
<a> if ( transport == <RARE_TOKEN> ) { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> transport ) { </a> 0
<a> if ( <RARE_TOKEN> == null && transport == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . connect ( ) ; </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( transport == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> throw new IllegalStateException ( "Unexpected <RARE_TOKEN> from <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Object message ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new ArrayList < Object > ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( message ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Throwable exception , boolean <RARE_TOKEN> , <RARE_TOKEN> transport ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> listener . onError ( exception , <RARE_TOKEN> ) ; </a> 0
<a> if ( running ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> . schedule ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> private void <RARE_TOKEN> ( List < ? extends Serializable > messages , <RARE_TOKEN> transport ) { </a> 1
<a> if ( transport == <RARE_TOKEN> ) { </a> 0
<a> listener . <RARE_TOKEN> ( messages ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( messages ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> transport ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private double <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> transport = new <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> transport = GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> } </a> 0
<a> GWT . log ( <RARE_TOKEN> <RARE_TOKEN> " + transport . getClass ( ) . getName ( ) ) ; </a> 1
<a> transport . <RARE_TOKEN> ( <RARE_TOKEN> . this , this ) ; </a> 0
<a> } </a> 0
<a> public void post ( Serializable message , <RARE_TOKEN> < Void > callback ) { </a> 0
<a> transport . post ( message , callback ) ; </a> 0
<a> } </a> 0
<a> public void post ( List < Serializable > messages , <RARE_TOKEN> < Void > callback ) { </a> 0
<a> transport . post ( messages , callback ) ; </a> 0
<a> } </a> 0
<a> public void broadcast ( Serializable message ) { </a> 0
<a> transport . broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> public void broadcast ( List < Serializable > messages ) { </a> 0
<a> transport . broadcast ( messages ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void connect ( ) { </a> 0
<a> <RARE_TOKEN> . schedule ( <RARE_TOKEN> ) ; </a> 0
<a> transport . connect ( ++ <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void disconnect ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> transport . disconnect ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . currentTimeMillis ( ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( transport instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> . schedule ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> if ( transport instanceof <RARE_TOKEN> && <RARE_TOKEN> == false ) { </a> 0
<a> transport = GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> transport . <RARE_TOKEN> ( <RARE_TOKEN> . this , this ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( this ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onError ( Throwable exception , boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> ( exception , <RARE_TOKEN> , this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . currentTimeMillis ( ) ; </a> 0
<a> <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . currentTimeMillis ( ) ; </a> 0
<a> <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( List < ? extends Serializable > messages ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . currentTimeMillis ( ) ; </a> 0
<a> <RARE_TOKEN> ( messages , this ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> . cancel ( ) ; </a> 1
<a> <RARE_TOKEN> . cancel ( ) ; </a> 1
<a> <RARE_TOKEN> . cancel ( ) ; </a> 1
<a> } </a> 1
<a> private <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( new <RARE_TOKEN> ( url , <RARE_TOKEN> ) , false , <RARE_TOKEN> . this ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> double currentTimeMillis = <RARE_TOKEN> . currentTimeMillis ( ) ; </a> 0
<a> double <RARE_TOKEN> = currentTimeMillis - <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> failed" ) , false , <RARE_TOKEN> . this ) ; </a> 0
<a> } else { </a> 0
<a> schedule ( <RARE_TOKEN> - ( int ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( running ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public native static <RARE_TOKEN> split ( String string , String <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client ; </a> 0
<a> public class <RARE_TOKEN> extends Exception { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client ; </a> 0
<a> import com . google . gwt . core . client . GWT ; </a> 0
<a> import com . google . gwt . rpc . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> public abstract class <RARE_TOKEN> { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> public < T extends Serializable > T <RARE_TOKEN> ( String message ) throws <RARE_TOKEN> { </a> 0
<a> if ( <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> serializer = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( serializer ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( message ) ; </a> 0
<a> return ( T ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw new <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( message ) ; </a> 0
<a> return ( T ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw new <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> return ( T ) message ; </a> 0
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> public < T extends Serializable > String <RARE_TOKEN> ( T message ) throws <RARE_TOKEN> { </a> 0
<a> if ( <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> serializer = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> writer = new <RARE_TOKEN> ( serializer , GWT . <RARE_TOKEN> ( ) , GWT . <RARE_TOKEN> ( ) ) ; </a> 0
<a> writer . <RARE_TOKEN> ( ) ; </a> 0
<a> writer . <RARE_TOKEN> ( message ) ; </a> 0
<a> return writer . toString ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw new <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> return message . toString ( ) ; </a> 0
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected abstract <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> public abstract <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> public abstract <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> public @ interface <RARE_TOKEN> { </a> 0
<a> Class < ? extends Serializable > [ ] value ( ) ; </a> 0
<a> <RARE_TOKEN> mode ( ) default <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) default <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( String url , int <RARE_TOKEN> ) { </a> 0
<a> super ( url + " timeout has <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 1
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 1
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> public static class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> private static <RARE_TOKEN> TYPE ; </a> 0
<a> public static <RARE_TOKEN> < <RARE_TOKEN> > getType ( ) { </a> 0
<a> return TYPE != null ? TYPE : ( TYPE = new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> ( ) { </a> 0
<a> return getType ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> handler ) { </a> 0
<a> handler . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> public static class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> private static <RARE_TOKEN> TYPE ; </a> 0
<a> public static <RARE_TOKEN> < <RARE_TOKEN> > getType ( ) { </a> 0
<a> return TYPE != null ? TYPE : ( TYPE = new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> ( ) { </a> 0
<a> return getType ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> handler ) { </a> 0
<a> handler . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) ; </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> handler ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getType ( ) , handler ) ; </a> 1
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> handler ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getType ( ) , handler ) ; </a> 1
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> . get ( ) . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static String <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( ) { </a> 1
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 1
<a> return <RARE_TOKEN> . indexOf ( <RARE_TOKEN> ) != - 1 && <RARE_TOKEN> . indexOf ( <RARE_TOKEN> ) == - 1 ; </a> 1
<a> } </a> 0
<a> ; </a> 1
<a> private static native String <RARE_TOKEN> ( ) ; </a> 0
<a> private static native <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> private static void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> < <RARE_TOKEN> > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < <RARE_TOKEN> > event ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private static native void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> private static <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private static boolean <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . JavaScriptObject ; </a> 0
<a> public final class <RARE_TOKEN> extends JavaScriptObject { </a> 0
<a> public static native <RARE_TOKEN> current ( ) ; </a> 0
<a> public <RARE_TOKEN> open ( String url , String name , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return open ( url , name , <RARE_TOKEN> . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> public native <RARE_TOKEN> open ( String url , String name , String <RARE_TOKEN> ) ; </a> 0
<a> public native void close ( ) ; </a> 0
<a> public native void set ( String name , boolean <RARE_TOKEN> ) ; </a> 0
<a> public native void set ( String name , int value ) ; </a> 0
<a> public native void set ( String name , String value ) ; </a> 0
<a> public native void set ( String name , Object value ) ; </a> 0
<a> public native boolean <RARE_TOKEN> ( String name ) ; </a> 0
<a> public native boolean <RARE_TOKEN> ( String name ) ; </a> 0
<a> public native int getInt ( String name ) throws <RARE_TOKEN> ; </a> 0
<a> public native String getString ( String name ) throws <RARE_TOKEN> ; </a> 0
<a> public native < <RARE_TOKEN> > <RARE_TOKEN> <RARE_TOKEN> ( String name ) throws <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private Map < String , Integer > <RARE_TOKEN> = new HashMap < String , Integer > ( ) ; </a> 0
<a> private Map < String , Boolean > <RARE_TOKEN> = new HashMap < String , Boolean > ( ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Integer <RARE_TOKEN> , Integer <RARE_TOKEN> , Integer <RARE_TOKEN> , Integer <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Boolean <RARE_TOKEN> , Boolean <RARE_TOKEN> , Boolean location , Boolean <RARE_TOKEN> , Boolean status ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( location ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( status ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> set ( String name , Integer value ) { </a> 0
<a> <RARE_TOKEN> . put ( name , value ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> set ( String name , Boolean option ) { </a> 0
<a> <RARE_TOKEN> . put ( name , option ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Boolean dialog ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , dialog ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Integer <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Integer <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Boolean location ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , location ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Boolean status ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , status ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Integer <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Integer <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public String toString ( ) { </a> 0
<a> <RARE_TOKEN> b = new <RARE_TOKEN> ( ) ; </a> 0
<a> for ( Map . Entry < String , Integer > e : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> b . add ( e . <RARE_TOKEN> ( ) , e . getValue ( ) ) ; </a> 0
<a> } </a> 0
<a> for ( Map . Entry < String , Boolean > e : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> b . add ( e . <RARE_TOKEN> ( ) , e . getValue ( ) ) ; </a> 0
<a> } </a> 0
<a> return b . toString ( ) ; </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> { </a> 0
<a> StringBuilder result = new StringBuilder ( ) ; </a> 0
<a> public <RARE_TOKEN> add ( String name , Boolean value ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> add ( name , value ? <RARE_TOKEN> : <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> add ( String name , Integer value ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> add ( name , value . toString ( ) ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> add ( String name , String value ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> if ( result . length ( ) > 0 ) { </a> 0
<a> result . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> result . append ( name ) . append ( <RARE_TOKEN> ) . append ( value ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public String toString ( ) { </a> 0
<a> return result . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . JavaScriptObject ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> public static class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> private static <RARE_TOKEN> TYPE ; </a> 0
<a> private String message ; </a> 0
<a> public static <RARE_TOKEN> getType ( ) { </a> 0
<a> return TYPE != null ? TYPE : ( TYPE = new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> this . message = message ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> ( ) { </a> 0
<a> return getType ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> handler ) { </a> 0
<a> handler . <RARE_TOKEN> ( message ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( String message ) ; </a> 0
<a> } </a> 0
<a> public static boolean <RARE_TOKEN> ( <RARE_TOKEN> w , String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( w , <RARE_TOKEN> ) != null ; </a> 0
<a> } </a> 0
<a> public static void post ( <RARE_TOKEN> w , String <RARE_TOKEN> , String message ) { </a> 0
<a> <RARE_TOKEN> s = <RARE_TOKEN> ( w , <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> s . post ( message ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void bind ( String name ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> w = <RARE_TOKEN> . current ( ) ; </a> 0
<a> socket = <RARE_TOKEN> ( w , name ) ; </a> 0
<a> if ( socket == null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = w . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . create ( ) ; </a> 0
<a> w . set ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> socket = <RARE_TOKEN> . create ( name ) ; </a> 0
<a> <RARE_TOKEN> . set ( socket , name ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( socket != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . current ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . remove ( socket ) ; </a> 0
<a> <RARE_TOKEN> . cancel ( ) ; </a> 0
<a> <RARE_TOKEN> . run ( ) ; </a> 0
<a> socket = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> handler ) { </a> 0
<a> return listeners . <RARE_TOKEN> ( <RARE_TOKEN> . getType ( ) , handler ) ; </a> 0
<a> } </a> 0
<a> private static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> w , String name ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = w . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . get ( name ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> socket ; </a> 0
<a> private <RARE_TOKEN> listeners = new <RARE_TOKEN> ( ) ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( socket != null ) { </a> 0
<a> String m ; </a> 0
<a> while ( ( m = socket . poll ( ) ) != null ) { </a> 0
<a> listeners . <RARE_TOKEN> ( new <RARE_TOKEN> ( m ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private final static class <RARE_TOKEN> extends JavaScriptObject { </a> 0
<a> private static native <RARE_TOKEN> create ( String <RARE_TOKEN> ) ; </a> 0
<a> public native void post ( String message ) ; </a> 0
<a> public native String poll ( ) ; </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final static class <RARE_TOKEN> extends JavaScriptObject { </a> 0
<a> public static native <RARE_TOKEN> create ( ) ; </a> 0
<a> public native <RARE_TOKEN> set ( <RARE_TOKEN> socket , String name ) ; </a> 0
<a> public native <RARE_TOKEN> get ( String name ) ; </a> 0
<a> public native void remove ( <RARE_TOKEN> socket ) ; </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . List ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> client , <RARE_TOKEN> listener ) ; </a> 0
<a> public void connect ( int <RARE_TOKEN> ) ; </a> 0
<a> public void disconnect ( ) ; </a> 0
<a> public void post ( Serializable message , <RARE_TOKEN> < Void > callback ) ; </a> 0
<a> public void post ( List < Serializable > messages , <RARE_TOKEN> < Void > callback ) ; </a> 0
<a> public void broadcast ( Serializable message ) ; </a> 0
<a> public void broadcast ( List < Serializable > messages ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . http . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> e ) { </a> 0
<a> if ( e . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getType ( ) . getName ( ) ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = e . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private final static int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null && read < <RARE_TOKEN> . <RARE_TOKEN> ( ) . length ( ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . getStatus ( ) , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void connect ( int <RARE_TOKEN> ) { </a> 0
<a> init ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . create ( ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . open ( <RARE_TOKEN> , <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> request ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> switch ( request . <RARE_TOKEN> ( ) ) { </a> 0
<a> case <RARE_TOKEN> . <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( request . getStatus ( ) , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> . <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( request . getStatus ( ) , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . cancel ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> request . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( request . <RARE_TOKEN> ( ) != <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> request . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( e . getMessage ( ) ) , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void disconnect ( ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> super . disconnect ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) >= <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) != <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } else { </a> 0
<a> new <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> r = <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> r . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( r . <RARE_TOKEN> ( ) != <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> && r . <RARE_TOKEN> ( ) != <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> r . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> r = null ; </a> 0
<a> } </a> 0
<a> } . schedule ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public native static String <RARE_TOKEN> ( ) ; </a> 0
<a> private void <RARE_TOKEN> ( int statusCode , String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> ( statusCode , <RARE_TOKEN> , false ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int statusCode , String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( statusCode , <RARE_TOKEN> , true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . JavaScriptObject ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private JavaScriptObject <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private static native <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> client , String <RARE_TOKEN> ) ; </a> 0
<a> private native void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> client , <RARE_TOKEN> listener ) { </a> 0
<a> super . <RARE_TOKEN> ( client , listener ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void connect ( int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ( ) , client . <RARE_TOKEN> ( ) ) ; </a> 0
<a> StringBuilder <RARE_TOKEN> = new StringBuilder ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . append ( <RARE_TOKEN> ) . append ( <RARE_TOKEN> ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . append ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> . toString ( ) ) ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> String url = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> url += <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( url ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void disconnect ( ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> super . disconnect ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( "" ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> private static native <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> client , String <RARE_TOKEN> ) ; </a> 0
<a> private native static String <RARE_TOKEN> ( ) ; </a> 0
<a> private native static String <RARE_TOKEN> ( String <RARE_TOKEN> , String url ) ; </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) > 1 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( 0 ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> int length = <RARE_TOKEN> . length ( ) ; </a> 0
<a> List < Serializable > messages = new ArrayList < Serializable > ( length ) ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> String message = <RARE_TOKEN> . get ( i ) ; </a> 0
<a> switch ( message . charAt ( 0 ) ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> messages . add ( message . substring ( 1 ) ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> try { </a> 0
<a> messages . add ( <RARE_TOKEN> ( message ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> listener . onError ( e , true ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( <RARE_TOKEN> message <RARE_TOKEN> " + message ) , true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> listener . <RARE_TOKEN> ( messages ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> listener . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( "Unexpected <RARE_TOKEN> ) , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private void onError ( int statusCode , String message ) { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( statusCode , message ) , false ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> disconnect ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> client , <RARE_TOKEN> listener ) { </a> 0
<a> super . <RARE_TOKEN> ( client , listener ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void connect ( int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void disconnect ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , "" ) ; </a> 0
<a> super . disconnect ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static native <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> client ) ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private void <RARE_TOKEN> ( String message ) { </a> 0
<a> listener . <RARE_TOKEN> ( Collections . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( message ) ) ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private void <RARE_TOKEN> ( String message ) { </a> 0
<a> try { </a> 0
<a> listener . <RARE_TOKEN> ( Collections . <RARE_TOKEN> ( <RARE_TOKEN> ( message ) ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> listener . onError ( e , true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private void <RARE_TOKEN> ( String message ) { </a> 0
<a> if ( message . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> String <RARE_TOKEN> = message . substring ( 1 ) ; </a> 0
<a> try { </a> 0
<a> String [ ] params = <RARE_TOKEN> . split ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = Integer . parseInt ( params [ 1 ] ) ; </a> 0
<a> listener . <RARE_TOKEN> ( Integer . parseInt ( params [ 0 ] ) , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( "Unexpected init <RARE_TOKEN> " + <RARE_TOKEN> ) , true ) ; </a> 0
<a> } </a> 0
<a> } else if ( message . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> disconnect ( ) ; </a> 0
<a> String status = message . substring ( 1 ) ; </a> 0
<a> try { </a> 0
<a> int statusCode ; </a> 0
<a> String <RARE_TOKEN> ; </a> 0
<a> int index = status . indexOf ( ' ' ) ; </a> 0
<a> if ( index == - 1 ) { </a> 0
<a> statusCode = Integer . parseInt ( status ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } else { </a> 0
<a> statusCode = Integer . parseInt ( status . substring ( 0 , index ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( status . substring ( index + 1 ) ) ; </a> 0
<a> } </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( statusCode , <RARE_TOKEN> ) , false ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( "Unexpected status <RARE_TOKEN> " + status ) , false ) ; </a> 0
<a> } </a> 0
<a> } else if ( message . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> disconnect ( ) ; </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( message . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( "Unexpected connection <RARE_TOKEN> " + message ) , true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . List ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> public void disconnect ( ) ; </a> 0
<a> public void post ( Serializable message , <RARE_TOKEN> < Void > callback ) ; </a> 0
<a> public void post ( List < Serializable > messages , <RARE_TOKEN> < Void > callback ) ; </a> 0
<a> public void broadcast ( Serializable message ) ; </a> 0
<a> public void broadcast ( List < Serializable > messages ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . logging . Level ; </a> 0
<a> import java . util . logging . Logger ; </a> 0
<a> abstract public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> abstract void <RARE_TOKEN> ( String message , <RARE_TOKEN> < Void > callback ) ; </a> 0
<a> abstract String <RARE_TOKEN> ( Serializable message ) throws <RARE_TOKEN> ; </a> 0
<a> private Logger logger = Logger . getLogger ( getClass ( ) . getName ( ) ) ; </a> 0
<a> private <RARE_TOKEN> < Void > <RARE_TOKEN> = new <RARE_TOKEN> < Void > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Throwable <RARE_TOKEN> ) { </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , "Failed <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Void result ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void disconnect ( ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void broadcast ( Serializable message ) { </a> 0
<a> if ( message instanceof String ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> + message + <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } else { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> + <RARE_TOKEN> ( message ) + <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , "Failed to <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void broadcast ( List < Serializable > messages ) { </a> 0
<a> StringBuilder <RARE_TOKEN> = new StringBuilder ( ) ; </a> 0
<a> for ( Serializable message : messages ) { </a> 0
<a> if ( message instanceof String ) { </a> 0
<a> <RARE_TOKEN> . append ( <RARE_TOKEN> ) . append ( message ) . append ( <RARE_TOKEN> ) ; </a> 1
<a> } else { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . append ( <RARE_TOKEN> ) . append ( <RARE_TOKEN> ( message ) ) . append ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , "Failed to <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . length ( ) > 0 ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void post ( Serializable message , <RARE_TOKEN> < Void > callback ) { </a> 0
<a> if ( message instanceof String ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> + message + <RARE_TOKEN> , callback ) ; </a> 1
<a> } else { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> + <RARE_TOKEN> ( message ) + <RARE_TOKEN> , callback ) ; </a> 1
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , "Failed to <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void post ( List < Serializable > messages , <RARE_TOKEN> < Void > callback ) { </a> 0
<a> StringBuilder <RARE_TOKEN> = new StringBuilder ( ) ; </a> 0
<a> for ( Serializable message : messages ) { </a> 0
<a> if ( message instanceof String ) { </a> 0
<a> <RARE_TOKEN> . append ( <RARE_TOKEN> ) . append ( message ) . append ( <RARE_TOKEN> ) ; </a> 1
<a> } else { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . append ( <RARE_TOKEN> ) . append ( <RARE_TOKEN> ( message ) ) . append ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , "Failed to <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . length ( ) > 0 ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . toString ( ) , callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . http . client . Response ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> abstract public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> protected boolean <RARE_TOKEN> ; </a> 0
<a> protected boolean <RARE_TOKEN> ; </a> 0
<a> protected int read ; </a> 0
<a> public void init ( ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> read = 0 ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( int statusCode , String <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> if ( statusCode != Response . <RARE_TOKEN> ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( statusCode , <RARE_TOKEN> ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> int index = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( index > read ) { </a> 0
<a> List < Serializable > messages = new ArrayList < Serializable > ( ) ; </a> 0
<a> <RARE_TOKEN> data = <RARE_TOKEN> . split ( <RARE_TOKEN> . substring ( read , index ) , <RARE_TOKEN> ) ; </a> 0
<a> int length = data . length ( ) ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( data . get ( i ) , messages ) ; </a> 0
<a> } </a> 0
<a> read = index + 1 ; </a> 0
<a> if ( ! messages . isEmpty ( ) ) { </a> 0
<a> listener . <RARE_TOKEN> ( messages ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( "Unexpected <RARE_TOKEN> ) , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String message , List < Serializable > messages ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + message ) , true ) ; </a> 0
<a> } else if ( message . isEmpty ( ) ) { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> message <RARE_TOKEN> ) , true ) ; </a> 0
<a> } else { </a> 0
<a> char c = message . charAt ( 0 ) ; </a> 0
<a> switch ( c ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> String <RARE_TOKEN> = message . substring ( 1 ) ; </a> 0
<a> try { </a> 0
<a> String [ ] params = <RARE_TOKEN> . split ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = Integer . parseInt ( params [ 1 ] ) ; </a> 0
<a> listener . <RARE_TOKEN> ( Integer . parseInt ( params [ 0 ] ) , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( "Unexpected init <RARE_TOKEN> " + <RARE_TOKEN> ) , true ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> messages . add ( message . substring ( 1 ) ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> messages . add ( <RARE_TOKEN> ( message . substring ( 1 ) ) ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> try { </a> 0
<a> messages . add ( <RARE_TOKEN> ( message ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> listener . onError ( e , true ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( <RARE_TOKEN> message <RARE_TOKEN> " + message ) , true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static String <RARE_TOKEN> ( String string ) { </a> 0
<a> return string . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . JavaScriptObject ; </a> 0
<a> public class WebSocket extends JavaScriptObject { </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> public static native WebSocket create ( String url ) ; </a> 0
<a> public static native WebSocket create ( String url , String <RARE_TOKEN> ) ; </a> 0
<a> protected WebSocket ( ) { </a> 0
<a> } </a> 0
<a> public final native <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> public final native int <RARE_TOKEN> ( ) ; </a> 0
<a> public final native void <RARE_TOKEN> ( String data ) ; </a> 0
<a> public final native void close ( ) ; </a> 0
<a> public final native void <RARE_TOKEN> ( <RARE_TOKEN> listener ) ; </a> 0
<a> public final native void <RARE_TOKEN> ( ) ; </a> 0
<a> public native static boolean <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void connect ( int <RARE_TOKEN> ) { </a> 0
<a> disconnect ( ) ; </a> 0
<a> String url = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> url = url . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> url = url . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> socket = WebSocket . create ( url ) ; </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void disconnect ( ) { </a> 0
<a> if ( socket != null ) { </a> 0
<a> super . disconnect ( ) ; </a> 0
<a> socket . close ( ) ; </a> 0
<a> } </a> 0
<a> socket = null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return super . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static boolean <RARE_TOKEN> ( ) { </a> 0
<a> return WebSocket . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 1
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private final void <RARE_TOKEN> ( String message ) { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( message ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String message ) { </a> 0
<a> if ( message . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> listener . <RARE_TOKEN> ( Collections . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( message . substring ( 2 ) ) ) ) ; </a> 0
<a> } else if ( message . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> try { </a> 0
<a> listener . <RARE_TOKEN> ( Collections . <RARE_TOKEN> ( <RARE_TOKEN> ( message . substring ( 2 ) ) ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> listener . onError ( e , true ) ; </a> 0
<a> } </a> 0
<a> } else if ( message . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( message . substring ( 2 ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String message ) { </a> 0
<a> if ( message . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 1
<a> String <RARE_TOKEN> = message . substring ( 1 ) ; </a> 0
<a> try { </a> 0
<a> String [ ] params = <RARE_TOKEN> . split ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = Integer . parseInt ( params [ 1 ] ) ; </a> 0
<a> listener . <RARE_TOKEN> ( Integer . parseInt ( params [ 0 ] ) , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( "Unexpected init <RARE_TOKEN> " + <RARE_TOKEN> ) , true ) ; </a> 0
<a> } </a> 0
<a> } else if ( message . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> disconnect ( ) ; </a> 0
<a> String status = message . substring ( 1 ) ; </a> 0
<a> try { </a> 0
<a> int statusCode ; </a> 0
<a> String <RARE_TOKEN> ; </a> 0
<a> int index = status . indexOf ( ' ' ) ; </a> 0
<a> if ( index == - 1 ) { </a> 0
<a> statusCode = Integer . parseInt ( status ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } else { </a> 0
<a> statusCode = Integer . parseInt ( status . substring ( 0 , index ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( status . substring ( index + 1 ) ) ; </a> 0
<a> } </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( statusCode , <RARE_TOKEN> ) , false ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( "Unexpected status <RARE_TOKEN> " + status ) , false ) ; </a> 0
<a> } </a> 0
<a> } else if ( message . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> disconnect ( ) ; </a> 0
<a> } else if ( message . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> listener . onError ( new <RARE_TOKEN> ( "Unexpected connection <RARE_TOKEN> " + message ) , true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private WebSocket socket ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( WebSocket socket ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( WebSocket socket ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 1
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onError ( WebSocket socket ) { </a> 1
<a> <RARE_TOKEN> = false ; </a> 1
<a> listener . onError ( new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) , false ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( WebSocket socket , String message ) { </a> 0
<a> <RARE_TOKEN> messages = <RARE_TOKEN> . split ( message , <RARE_TOKEN> ) ; </a> 0
<a> int len = messages . length ( ) ; </a> 0
<a> for ( int i = 0 ; i < len ; i ++ ) { </a> 0
<a> <RARE_TOKEN> ( messages . get ( i ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . JavaScriptObject ; </a> 0
<a> public class <RARE_TOKEN> extends JavaScriptObject { </a> 0
<a> public static native <RARE_TOKEN> create ( ) ; </a> 0
<a> public native static boolean <RARE_TOKEN> ( ) ; </a> 0
<a> public final native void <RARE_TOKEN> ( <RARE_TOKEN> listener ) ; </a> 0
<a> public final native void <RARE_TOKEN> ( ) ; </a> 0
<a> public final native String <RARE_TOKEN> ( ) ; </a> 0
<a> public final native String <RARE_TOKEN> ( ) ; </a> 0
<a> public final native void <RARE_TOKEN> ( int timeout ) ; </a> 0
<a> public final native int <RARE_TOKEN> ( ) ; </a> 0
<a> public final native void <RARE_TOKEN> ( ) ; </a> 0
<a> public final native void <RARE_TOKEN> ( String url ) ; </a> 0
<a> public final native void <RARE_TOKEN> ( String url ) ; </a> 0
<a> public final native void <RARE_TOKEN> ( ) ; </a> 0
<a> public final native void <RARE_TOKEN> ( String data ) ; </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . JClassType ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . <RARE_TOKEN> . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . <RARE_TOKEN> . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . <RARE_TOKEN> . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . <RARE_TOKEN> . rpc . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> logger , <RARE_TOKEN> context , String <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = context . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = context . <RARE_TOKEN> ( logger , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> try { </a> 0
<a> JClassType type = <RARE_TOKEN> . getType ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> annotation = type . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> if ( annotation == null ) { </a> 0
<a> logger . log ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> annotation <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( </a> 0
<a> logger , context . <RARE_TOKEN> ( ) , context ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( </a> 0
<a> logger , context . <RARE_TOKEN> ( ) , context ) ; </a> 0
<a> for ( Class < ? extends Serializable > <RARE_TOKEN> : annotation . value ( ) ) { </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> while ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = ( Class < ? extends Serializable > ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getType ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> while ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( logger , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( logger , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> OutputStream <RARE_TOKEN> = context . <RARE_TOKEN> ( logger , <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> writer = new <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> writer . write ( <RARE_TOKEN> ) ; </a> 0
<a> writer . write ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> from <RARE_TOKEN> ) ; </a> 0
<a> writer . write ( <RARE_TOKEN> ) ; </a> 0
<a> writer . flush ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( writer ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . build ( logger ) ; </a> 0
<a> writer . write ( <RARE_TOKEN> ) ; </a> 0
<a> writer . write ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> from <RARE_TOKEN> ) ; </a> 0
<a> writer . write ( <RARE_TOKEN> ) ; </a> 0
<a> writer . flush ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( writer ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . build ( logger ) ; </a> 0
<a> writer . close ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> context . <RARE_TOKEN> ( logger , <RARE_TOKEN> ) . <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> final String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( logger , <RARE_TOKEN> , <RARE_TOKEN> , context , <RARE_TOKEN> + <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( logger ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( context , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . print ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> = new " + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . print ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . print ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + annotation . mode ( ) . name ( ) + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . print ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + annotation . <RARE_TOKEN> ( ) . name ( ) + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( logger ) ; </a> 0
<a> if ( annotation . mode ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> data = new <RARE_TOKEN> ( type . getQualifiedSourceName ( ) ) ; </a> 0
<a> for ( <RARE_TOKEN> t : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( ! ( t instanceof JClassType ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( context . <RARE_TOKEN> ( ) , ( JClassType ) t ) ; </a> 0
<a> List < String > names = <RARE_TOKEN> . create ( ) ; </a> 0
<a> for ( int i = 0 , j = <RARE_TOKEN> . length ; i < j ; i ++ ) { </a> 0
<a> names = <RARE_TOKEN> . add ( names , <RARE_TOKEN> [ i ] . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> data . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( t ) , names ) ; </a> 0
<a> } </a> 0
<a> context . <RARE_TOKEN> ( logger , data ) ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> logger . log ( <RARE_TOKEN> . <RARE_TOKEN> , "" , e ) ; </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . GWT ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> ( GWT . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . get ( ) . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void execute ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( String source ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( source ) ; </a> 0
<a> <RARE_TOKEN> . get ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private native void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( value = String . class , mode = <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> abstract public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void execute ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void execute ( int <RARE_TOKEN> , int <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void execute ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void execute ( String error , boolean <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void execute ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . JavaScriptObject ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void execute ( JavaScriptObject message ) ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . poll ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . handler . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . isCancelled ( ) || event . getMessage ( ) == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> HttpServletRequest request = event . getResource ( ) . getRequest ( ) ; </a> 0
<a> if ( Boolean . <RARE_TOKEN> . equals ( request . getAttribute ( <RARE_TOKEN> . <RARE_TOKEN> ) ) </a> 0
<a> || request . getAttribute ( <RARE_TOKEN> . <RARE_TOKEN> ) == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( event . getResource ( ) , event . getMessage ( ) ) ; </a> 0
<a> success = true ; </a> 0
<a> } catch ( IllegalArgumentException ex ) { </a> 0
<a> } </a> 0
<a> if ( success && event . <RARE_TOKEN> ( ) ) { </a> 0
<a> request . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . poll ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 0
<a> import org . atmosphere . cpr . FrameworkConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> public final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private AtmosphereResource < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( AtmosphereResource <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Object message ) throws IOException { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , message ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> . getRequest ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . resume ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Broadcaster getBroadcaster ( ) { </a> 0
<a> return <RARE_TOKEN> . getBroadcaster ( ) ; </a> 0
<a> } </a> 0
<a> public Broadcaster <RARE_TOKEN> ( String ID ) { </a> 0
<a> try { </a> 0
<a> Broadcaster b = BroadcasterFactory . <RARE_TOKEN> ( ) . get ( <RARE_TOKEN> . class , ID ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( b ) ; </a> 0
<a> return b ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> suspend ( ) { </a> 0
<a> AtmosphereResource < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( "Failed to <RARE_TOKEN> <RARE_TOKEN> resource <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . getRequest ( ) . setAttribute ( <RARE_TOKEN> , true ) ; </a> 0
<a> <RARE_TOKEN> . suspend ( - 1 , false ) ; </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> suspend ( long timeout ) { </a> 0
<a> AtmosphereResource < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . getRequest ( ) . setAttribute ( <RARE_TOKEN> , true ) ; </a> 0
<a> <RARE_TOKEN> . suspend ( timeout , false ) ; </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> AtmosphereResource < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( "Failed to <RARE_TOKEN> <RARE_TOKEN> resource <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> Boolean <RARE_TOKEN> = ( Boolean ) <RARE_TOKEN> . getRequest ( ) . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> return Boolean . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > resource , Object message ) throws IOException { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) resource . getRequest ( ) . getAttribute ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> String response = <RARE_TOKEN> ( <RARE_TOKEN> , message ) ; </a> 0
<a> <RARE_TOKEN> ( resource . getRequest ( ) , resource . getResponse ( ) , </a> 0
<a> resource . <RARE_TOKEN> ( ) . getServletContext ( ) , </a> 0
<a> response ) ; </a> 0
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> try { </a> 0
<a> String error = <RARE_TOKEN> . <RARE_TOKEN> ( null , ex ) ; </a> 0
<a> <RARE_TOKEN> ( resource . getRequest ( ) , resource . getResponse ( ) , </a> 0
<a> resource . <RARE_TOKEN> ( ) . getServletContext ( ) , </a> 0
<a> error ) ; </a> 0
<a> } catch ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> throw new IOException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> throw new IOException ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static String <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , Object message ) throws <RARE_TOKEN> { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , message , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) . getRequest ( ) . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private AtmosphereResource < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> ( ) { </a> 0
<a> AtmosphereResource < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> = </a> 0
<a> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > ) </a> 0
<a> <RARE_TOKEN> ( ) . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( "Failed to <RARE_TOKEN> <RARE_TOKEN> resource <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( HttpServletRequest request , </a> 0
<a> HttpServletResponse response ) throws IOException , ServletException , </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( request ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( request , response , getServletContext ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected static boolean <RARE_TOKEN> ( HttpServletRequest request , </a> 0
<a> HttpServletResponse response , String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected static void <RARE_TOKEN> ( HttpServletRequest request , </a> 0
<a> HttpServletResponse response , <RARE_TOKEN> context , String <RARE_TOKEN> ) throws IOException { </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( request ) </a> 0
<a> && <RARE_TOKEN> ( request , response , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( context , response , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> servlet , </a> 0
<a> HttpServletRequest request , String <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = request . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = new URL ( <RARE_TOKEN> ) . getPath ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> servlet . log ( <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> serializationPolicy = null ; </a> 0
<a> if ( <RARE_TOKEN> == null || ! <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> String message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> path <RARE_TOKEN> " </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + ", is not in the <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> this <RARE_TOKEN> " </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> not be <RARE_TOKEN> <RARE_TOKEN> or <RARE_TOKEN> client <RARE_TOKEN> server code <RARE_TOKEN> out of <RARE_TOKEN> ; </a> 0
<a> servlet . log ( message , null ) ; </a> 0
<a> } else { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . substring ( <RARE_TOKEN> . length ( ) ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> ) ; </a> 0
<a> InputStream is = servlet . getServletContext ( ) . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> if ( is != null ) { </a> 0
<a> try { </a> 0
<a> serializationPolicy = <RARE_TOKEN> . <RARE_TOKEN> ( is , </a> 0
<a> null ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> servlet . log ( <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> the policy file <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> + <RARE_TOKEN> , e ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> servlet . log ( <RARE_TOKEN> <RARE_TOKEN> not read the policy file <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> + <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> String message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> policy file <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> in this <RARE_TOKEN> ; </a> 0
<a> servlet . log ( message ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> if ( is != null ) { </a> 0
<a> try { </a> 0
<a> is . close ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return serializationPolicy ; </a> 0
<a> } </a> 0
<a> private final Map < String , <RARE_TOKEN> > <RARE_TOKEN> = new HashMap < String , <RARE_TOKEN> > ( ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public final <RARE_TOKEN> <RARE_TOKEN> ( String <RARE_TOKEN> , </a> 0
<a> String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> serializationPolicy = <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( serializationPolicy != null ) { </a> 0
<a> return serializationPolicy ; </a> 0
<a> } </a> 0
<a> serializationPolicy = <RARE_TOKEN> ( <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( serializationPolicy == null ) { </a> 0
<a> log ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> to get the <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> for <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> policy <RARE_TOKEN> be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> , </a> 0
<a> null ) ; </a> 0
<a> serializationPolicy = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , serializationPolicy ) ; </a> 0
<a> return serializationPolicy ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( String <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , this . getClass ( ) , this ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this , <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> log ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> while <RARE_TOKEN> this <RARE_TOKEN> , </a> 0
<a> ex ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( null , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( </a> 0
<a> HttpServletRequest request , String <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( this , request , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( </a> 0
<a> String <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . get ( <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String <RARE_TOKEN> , </a> 0
<a> String <RARE_TOKEN> , <RARE_TOKEN> serializationPolicy ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> + <RARE_TOKEN> , </a> 0
<a> serializationPolicy ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 1
<a> import java . io . Serializable ; </a> 1
<a> import java . util . List ; </a> 1
<a> public interface <RARE_TOKEN> { </a> 0
<a> public Broadcaster getBroadcaster ( ) ; </a> 0
<a> public <RARE_TOKEN> getSession ( ) ; </a> 0
<a> public <RARE_TOKEN> getSession ( boolean create ) ; </a> 0
<a> public int <RARE_TOKEN> ( ) ; </a> 0
<a> @ Deprecated </a> 0
<a> public void broadcast ( Serializable message ) ; </a> 0
<a> public void post ( Serializable message ) ; </a> 0
<a> @ Deprecated </a> 0
<a> public void broadcast ( List < Serializable > messages ) ; </a> 0
<a> public void post ( List < Serializable > messages ) ; </a> 0
<a> public AtmosphereResource < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> ( ) ; </a> 0
<a> public HttpServletRequest getRequest ( ) ; </a> 0
<a> public HttpServletResponse getResponse ( ) ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) ; </a> 0
<a> public < T > void setAttribute ( String name , T value ) ; </a> 0
<a> public < T > T getAttribute ( String name ) ; </a> 0
<a> public int <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . List ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> public void write ( Serializable message ) throws IOException ; </a> 0
<a> public void write ( Serializable message , boolean flush ) throws IOException ; </a> 0
<a> public void write ( List < ? extends Serializable > messages ) throws IOException ; </a> 0
<a> public void write ( List < ? extends Serializable > messages , boolean flush ) throws IOException ; </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException ; </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) ; </a> 0
<a> public long <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( int statusCode ) throws IOException ; </a> 0
<a> public void <RARE_TOKEN> ( int statusCode , String message ) throws IOException ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> public interface <RARE_TOKEN> extends Serializable { </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> private int [ ] window ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private char [ ] <RARE_TOKEN> ; </a> 0
<a> private char [ ] <RARE_TOKEN> ; </a> 0
<a> private byte [ ] <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private int [ ] buffer ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private OutputStream out ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private byte [ ] <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> public static final int <RARE_TOKEN> = 1 ; </a> 0
<a> public static final int <RARE_TOKEN> = 2 ; </a> 0
<a> public static final int <RARE_TOKEN> = 3 ; </a> 0
<a> public static final int <RARE_TOKEN> = 4 ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( 0 , 15 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int level ) { </a> 0
<a> this ( level , 15 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int level , int windowBits ) { </a> 0
<a> if ( windowBits < 9 || windowBits > 15 ) </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> window <RARE_TOKEN> <RARE_TOKEN> " + windowBits ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = 1 < < windowBits ; </a> 0
<a> window = new int [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> = new char [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> = new char [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> if ( level == 0 ) </a> 0
<a> level = <RARE_TOKEN> ; </a> 0
<a> switch ( level ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = 16 ; </a> 0
<a> <RARE_TOKEN> = 8 ; </a> 0
<a> <RARE_TOKEN> = 8 ; </a> 0
<a> <RARE_TOKEN> = 4 ; </a> 0
<a> <RARE_TOKEN> = 4 ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 32 ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + level ) ; </a> 0
<a> } </a> 0
<a> buffer = new int [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> = new byte [ 4 * <RARE_TOKEN> + <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> } </a> 0
<a> public OutputStream <RARE_TOKEN> ( ) { </a> 0
<a> return out ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( OutputStream out ) { </a> 0
<a> this . out = out ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( int len , int dist ) { </a> 0
<a> int <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> if ( len <= 10 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + len ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } else if ( len == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } else { </a> 0
<a> int i ; </a> 0
<a> for ( i = 9 ; i < 29 ; i ++ ) </a> 0
<a> if ( <RARE_TOKEN> [ i ] > len ) </a> 0
<a> break ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + i ; </a> 0
<a> <RARE_TOKEN> = len - <RARE_TOKEN> [ i - 1 ] ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> if ( dist <= 4 ) { </a> 0
<a> <RARE_TOKEN> = dist - 1 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } else { </a> 0
<a> int i ; </a> 0
<a> for ( i = 5 ; i < <RARE_TOKEN> ; i ++ ) </a> 0
<a> if ( <RARE_TOKEN> [ i ] > dist ) </a> 0
<a> break ; </a> 0
<a> <RARE_TOKEN> = i - 1 ; </a> 0
<a> <RARE_TOKEN> = dist - <RARE_TOKEN> [ i - 1 ] ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> + ( <RARE_TOKEN> < < 9 ) + ( <RARE_TOKEN> < < 14 ) + ( <RARE_TOKEN> < < 19 ) ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( int [ ] <RARE_TOKEN> , int <RARE_TOKEN> , char [ ] <RARE_TOKEN> , int <RARE_TOKEN> , int dist , int len , int end , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> int n = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> loop : </a> 0
<a> while ( <RARE_TOKEN> -- > 0 ) { </a> 0
<a> int d = <RARE_TOKEN> [ n ] ; </a> 0
<a> if ( d == 0 ) </a> 0
<a> return 0 ; </a> 0
<a> dist += d ; </a> 0
<a> if ( dist > <RARE_TOKEN> ) </a> 0
<a> return 0 ; </a> 0
<a> n = ( n - d ) & <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = len ; </a> 0
<a> int j = <RARE_TOKEN> , k = n ; </a> 0
<a> if ( <RARE_TOKEN> >= 3 ) { </a> 0
<a> while ( <RARE_TOKEN> >= 3 ) { </a> 0
<a> if ( <RARE_TOKEN> [ j ] != <RARE_TOKEN> [ k ] ) </a> 0
<a> continue loop ; </a> 0
<a> <RARE_TOKEN> -= 3 ; </a> 0
<a> j = ( j + 3 ) & <RARE_TOKEN> ; </a> 0
<a> k = ( k + 3 ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case 1 : </a> 0
<a> j = ( j - 2 ) & <RARE_TOKEN> ; </a> 0
<a> k = ( k - 2 ) & <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> [ j ] != <RARE_TOKEN> [ k ] ) </a> 0
<a> continue loop ; </a> 0
<a> k = ( k + 3 ) & <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case 2 : </a> 0
<a> j = ( j - 1 ) & <RARE_TOKEN> ; </a> 0
<a> k = ( k - 1 ) & <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> [ j ] != <RARE_TOKEN> [ k ] ) </a> 0
<a> continue loop ; </a> 0
<a> k = ( k + 3 ) & <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> [ j ] != <RARE_TOKEN> [ k ] ) </a> 0
<a> continue loop ; </a> 0
<a> k = ( k + <RARE_TOKEN> ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> [ k ] == end ) </a> 0
<a> return dist ; </a> 0
<a> } </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( byte [ ] buf , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . length ; </a> 0
<a> int <RARE_TOKEN> = ( <RARE_TOKEN> > > > 1 ) ; </a> 0
<a> while ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> System . <RARE_TOKEN> ( buf , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> System . <RARE_TOKEN> ( buf , <RARE_TOKEN> + <RARE_TOKEN> , <RARE_TOKEN> , 0 , <RARE_TOKEN> - <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> System . <RARE_TOKEN> ( buf , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( byte [ ] buf , int off , int len ) throws IOException { </a> 0
<a> if ( len == 0 ) </a> 0
<a> return ; </a> 0
<a> int <RARE_TOKEN> = off ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> int [ ] sb = buffer ; </a> 0
<a> int sbPtr = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = sb . length ; </a> 0
<a> while ( len -- > 0 ) { </a> 0
<a> int <RARE_TOKEN> = buf [ off ++ ] & 0xFF ; </a> 0
<a> sb [ sbPtr ++ ] = <RARE_TOKEN> ; </a> 0
<a> if ( sbPtr == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> <RARE_TOKEN> = off ; </a> 0
<a> <RARE_TOKEN> ( false , sbPtr ) ; </a> 0
<a> sbPtr = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = sbPtr ; </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> < 2 ) { </a> 0
<a> int <RARE_TOKEN> = buf [ off ++ ] & 0xFF ; </a> 0
<a> len -- ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 1 ; </a> 0
<a> if ( len == 0 ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = buf [ off ++ ] & 0xFF ; </a> 0
<a> len -- ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> < < 8 ) | <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 2 ; </a> 0
<a> <RARE_TOKEN> = 2 ; </a> 0
<a> if ( len == 0 ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int [ ] <RARE_TOKEN> = window ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . length - 1 ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> char [ ] <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> char [ ] <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . length - 1 ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int [ ] sb = buffer ; </a> 0
<a> int sbPtr = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = sb . length ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> loop : </a> 0
<a> while ( len -- > 0 ) { </a> 0
<a> int <RARE_TOKEN> = buf [ off ++ ] & 0xFF ; </a> 0
<a> int <RARE_TOKEN> = ( <RARE_TOKEN> < < 8 ) | <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = <RARE_TOKEN> ; </a> 0
<a> int h = ( <RARE_TOKEN> + ( <RARE_TOKEN> > > > 4 ) + ( <RARE_TOKEN> > > > 8 ) + ( <RARE_TOKEN> > > > 9 ) - ( <RARE_TOKEN> > > > 16 ) ) & <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> [ h ] - 1 ; </a> 0
<a> int dist ; </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> dist = 0 ; </a> 0
<a> } else { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> int <RARE_TOKEN> = ( <RARE_TOKEN> + ( <RARE_TOKEN> > > > 4 ) + ( <RARE_TOKEN> > > > 8 ) + ( <RARE_TOKEN> > > > 9 ) - ( <RARE_TOKEN> > > > 16 ) ) & <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == h ) { </a> 0
<a> dist = ( <RARE_TOKEN> - <RARE_TOKEN> ) & <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> dist = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ h ] = ( char ) ( <RARE_TOKEN> + 1 ) ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = ( char ) dist ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> + 1 ) & <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> < 2 ) { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> continue loop ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 2 ) { </a> 0
<a> if ( dist == 0 ) { </a> 0
<a> sb [ sbPtr ++ ] = <RARE_TOKEN> > > > 16 ; </a> 0
<a> if ( sbPtr == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> <RARE_TOKEN> = off ; </a> 0
<a> <RARE_TOKEN> ( false , sbPtr ) ; </a> 0
<a> sbPtr = 0 ; </a> 0
<a> } </a> 0
<a> continue loop ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = dist ; </a> 0
<a> <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> int n = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> while ( <RARE_TOKEN> -- > 0 ) { </a> 0
<a> if ( <RARE_TOKEN> [ n ] == <RARE_TOKEN> ) </a> 0
<a> break <RARE_TOKEN> ; </a> 0
<a> int d = <RARE_TOKEN> [ n ] ; </a> 0
<a> if ( d == 0 ) </a> 0
<a> break ; </a> 0
<a> <RARE_TOKEN> += d ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) </a> 0
<a> break ; </a> 0
<a> n = ( n - d ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> while ( false ) ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> sb [ sbPtr ++ ] = <RARE_TOKEN> > > > 16 ; </a> 0
<a> if ( sbPtr == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> <RARE_TOKEN> = off ; </a> 0
<a> <RARE_TOKEN> ( false , sbPtr ) ; </a> 0
<a> sbPtr = 0 ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> - <RARE_TOKEN> ) & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 3 ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> sb [ sbPtr ++ ] = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( sbPtr == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> <RARE_TOKEN> = off ; </a> 0
<a> <RARE_TOKEN> ( false , sbPtr ) ; </a> 0
<a> sbPtr = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> continue loop ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> [ ( <RARE_TOKEN> - <RARE_TOKEN> ) & <RARE_TOKEN> ] == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> || <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> sb [ sbPtr ++ ] = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( sbPtr == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> <RARE_TOKEN> = off ; </a> 0
<a> <RARE_TOKEN> ( false , sbPtr ) ; </a> 0
<a> sbPtr = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> continue loop ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> - 2 , <RARE_TOKEN> , <RARE_TOKEN> > <RARE_TOKEN> ? ( <RARE_TOKEN> > > > 2 ) : <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> - ( <RARE_TOKEN> - 2 ) - <RARE_TOKEN> ) & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> || <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> sb [ sbPtr ++ ] = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( sbPtr == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> <RARE_TOKEN> = off ; </a> 0
<a> <RARE_TOKEN> ( false , sbPtr ) ; </a> 0
<a> sbPtr = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> continue loop ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = ( <RARE_TOKEN> - ( <RARE_TOKEN> - 2 ) + 1 ) & <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0 , <RARE_TOKEN> - 3 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> sb [ sbPtr ++ ] = <RARE_TOKEN> [ <RARE_TOKEN> ] > > > 16 ; </a> 0
<a> if ( sbPtr == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> <RARE_TOKEN> = off ; </a> 0
<a> <RARE_TOKEN> ( false , sbPtr ) ; </a> 0
<a> sbPtr = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> - <RARE_TOKEN> ) & <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> sb [ sbPtr ++ ] = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( sbPtr == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> <RARE_TOKEN> = off ; </a> 0
<a> <RARE_TOKEN> ( false , sbPtr ) ; </a> 0
<a> sbPtr = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> continue loop ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 3 && <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> for ( int k = 16 ; k >= 0 ; k -= 8 ) { </a> 0
<a> sb [ sbPtr ++ ] = ( <RARE_TOKEN> > > > k ) & 0xFF ; </a> 0
<a> if ( sbPtr == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> <RARE_TOKEN> = off ; </a> 0
<a> <RARE_TOKEN> ( false , sbPtr ) ; </a> 0
<a> sbPtr = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> sb [ sbPtr ++ ] = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( sbPtr == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> <RARE_TOKEN> = off ; </a> 0
<a> <RARE_TOKEN> ( false , sbPtr ) ; </a> 0
<a> sbPtr = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 1 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = sbPtr ; </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , off ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case 0 : </a> 0
<a> break ; </a> 0
<a> case 1 : </a> 0
<a> buffer [ <RARE_TOKEN> ++ ] = <RARE_TOKEN> & 0xFF ; </a> 0
<a> if ( <RARE_TOKEN> == buffer . length ) </a> 0
<a> <RARE_TOKEN> ( false , <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> case 2 : </a> 0
<a> buffer [ <RARE_TOKEN> ++ ] = ( <RARE_TOKEN> > > > 8 ) & 0xFF ; </a> 0
<a> if ( <RARE_TOKEN> == buffer . length ) </a> 0
<a> <RARE_TOKEN> ( false , <RARE_TOKEN> ) ; </a> 0
<a> buffer [ <RARE_TOKEN> ++ ] = <RARE_TOKEN> & 0xFF ; </a> 0
<a> if ( <RARE_TOKEN> == buffer . length ) </a> 0
<a> <RARE_TOKEN> ( false , <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> buffer [ <RARE_TOKEN> ++ ] = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == buffer . length ) </a> 0
<a> <RARE_TOKEN> ( false , <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( int [ ] val , int off , int len ) { </a> 0
<a> if ( len <= 1 ) </a> 0
<a> return ; </a> 0
<a> int <RARE_TOKEN> = off - 1 ; </a> 0
<a> for ( int i = 2 ; i <= len ; i ++ ) { </a> 0
<a> int j = i ; </a> 0
<a> int v = val [ <RARE_TOKEN> + j ] ; </a> 0
<a> while ( j > 1 ) { </a> 0
<a> int k = j > > > 1 ; </a> 0
<a> int f = val [ <RARE_TOKEN> + k ] ; </a> 0
<a> if ( f > v ) </a> 0
<a> break ; </a> 0
<a> val [ <RARE_TOKEN> + j ] = f ; </a> 0
<a> val [ <RARE_TOKEN> + k ] = v ; </a> 0
<a> j = k ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( int i = len ; i > 1 ; i -- ) { </a> 0
<a> int v = val [ <RARE_TOKEN> + i ] ; </a> 0
<a> val [ <RARE_TOKEN> + i ] = val [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> val [ <RARE_TOKEN> + 1 ] = v ; </a> 0
<a> int j = 1 ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> int <RARE_TOKEN> = j < < 1 ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> + 1 ; </a> 0
<a> if ( <RARE_TOKEN> >= i ) </a> 0
<a> break ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> >= i ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = val [ <RARE_TOKEN> + <RARE_TOKEN> ] ; </a> 0
<a> } else { </a> 0
<a> int <RARE_TOKEN> = val [ <RARE_TOKEN> + <RARE_TOKEN> ] ; </a> 0
<a> int <RARE_TOKEN> = val [ <RARE_TOKEN> + <RARE_TOKEN> ] ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( v > <RARE_TOKEN> ) </a> 0
<a> break ; </a> 0
<a> val [ <RARE_TOKEN> + j ] = <RARE_TOKEN> ; </a> 0
<a> val [ <RARE_TOKEN> + <RARE_TOKEN> ] = v ; </a> 0
<a> j = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static int [ ] <RARE_TOKEN> ( int [ ] <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . length ; </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ <RARE_TOKEN> ] ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) </a> 0
<a> <RARE_TOKEN> [ i ] = i + ( 1 < < 9 ) + ( <RARE_TOKEN> [ i ] < < 10 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , 0 , <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> while ( <RARE_TOKEN> < <RARE_TOKEN> && ( <RARE_TOKEN> [ <RARE_TOKEN> ] > > > 10 ) == 0 ) </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> return new int [ <RARE_TOKEN> ] ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == ( <RARE_TOKEN> - 1 ) ) { </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> [ <RARE_TOKEN> ] & <RARE_TOKEN> ] = 1 ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ <RARE_TOKEN> - 1 ] ; </a> 0
<a> int <RARE_TOKEN> = 0 , <RARE_TOKEN> = 0 ; </a> 0
<a> int [ ] tree = new int [ <RARE_TOKEN> - 1 ] ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> == ( <RARE_TOKEN> + 1 ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ] & <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ++ ] ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ++ ] ; </a> 0
<a> } else if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ++ ] ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ++ ] ; </a> 0
<a> } else { </a> 0
<a> int f = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> int q = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> if ( f < q ) { </a> 0
<a> <RARE_TOKEN> = f ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = q ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ++ ] ; </a> 0
<a> } else if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ++ ] ; </a> 0
<a> } else { </a> 0
<a> f = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> q = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> if ( f < q ) { </a> 0
<a> <RARE_TOKEN> = f ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = q ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = ( <RARE_TOKEN> & ~ <RARE_TOKEN> ) + ( <RARE_TOKEN> & ~ <RARE_TOKEN> ) + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = ( <RARE_TOKEN> & <RARE_TOKEN> ) + ( ( <RARE_TOKEN> & <RARE_TOKEN> ) < < 10 ) ; </a> 0
<a> tree [ <RARE_TOKEN> ++ ] = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( tree , <RARE_TOKEN> , 0 , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> while ( <RARE_TOKEN> -- > 0 ) { </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> while ( <RARE_TOKEN> [ <RARE_TOKEN> ] == 0 ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] -- ; </a> 0
<a> <RARE_TOKEN> [ ++ <RARE_TOKEN> ] += 2 ; </a> 0
<a> } </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ <RARE_TOKEN> ] ; </a> 0
<a> int p = 0 ; </a> 0
<a> while ( ( <RARE_TOKEN> [ p ] > > > 10 ) == 0 ) </a> 0
<a> p ++ ; </a> 0
<a> for ( int bits = <RARE_TOKEN> ; bits > 0 ; bits -- ) { </a> 0
<a> for ( int k = <RARE_TOKEN> [ bits ] ; k > 0 ; k -- ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> [ p ++ ] & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = bits ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( int [ ] tree , int <RARE_TOKEN> , int <RARE_TOKEN> , int [ ] <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> if ( ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ) { </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> return 1 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] ++ ; </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int s ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] ++ ; </a> 0
<a> s = - 1 ; </a> 0
<a> } else { </a> 0
<a> s = 0 ; </a> 0
<a> } </a> 0
<a> int n = tree [ <RARE_TOKEN> ] ; </a> 0
<a> int l = n & <RARE_TOKEN> ; </a> 0
<a> int r = ( n > > > 10 ) & <RARE_TOKEN> ; </a> 0
<a> s += <RARE_TOKEN> ( tree , l , <RARE_TOKEN> + 1 , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> s += <RARE_TOKEN> ( tree , r , <RARE_TOKEN> + 1 , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return s ; </a> 0
<a> } </a> 0
<a> private static final int [ ] <RARE_TOKEN> ; </a> 0
<a> static { </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ <RARE_TOKEN> ] ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) </a> 0
<a> <RARE_TOKEN> [ i ] = 8 ; </a> 0
<a> for ( int i = <RARE_TOKEN> ; i < <RARE_TOKEN> ; i ++ ) </a> 0
<a> <RARE_TOKEN> [ i ] = 9 ; </a> 0
<a> for ( int i = <RARE_TOKEN> ; i < <RARE_TOKEN> ; i ++ ) </a> 0
<a> <RARE_TOKEN> [ i ] = 7 ; </a> 0
<a> for ( int i = <RARE_TOKEN> ; i < <RARE_TOKEN> ; i ++ ) </a> 0
<a> <RARE_TOKEN> [ i ] = 8 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , 15 ) ; </a> 0
<a> } </a> 0
<a> private static final int [ ] <RARE_TOKEN> ; </a> 0
<a> static { </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ 32 ] ; </a> 0
<a> for ( int i = 0 ; i < 32 ; i ++ ) </a> 0
<a> <RARE_TOKEN> [ i ] = 5 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , 15 ) ; </a> 0
<a> } </a> 0
<a> private static int [ ] <RARE_TOKEN> ( int [ ] <RARE_TOKEN> , int <RARE_TOKEN> , int [ ] <RARE_TOKEN> , int <RARE_TOKEN> , int [ ] <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> int [ ] in = new int [ <RARE_TOKEN> ] ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , in , 0 , <RARE_TOKEN> ) ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , in , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ <RARE_TOKEN> ] ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> while ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> int v = in [ <RARE_TOKEN> ++ ] ; </a> 0
<a> if ( v == 0 ) { </a> 0
<a> int r = 1 ; </a> 0
<a> while ( r < <RARE_TOKEN> && <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> if ( in [ <RARE_TOKEN> ] != 0 ) </a> 0
<a> break ; </a> 0
<a> r ++ ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> switch ( r ) { </a> 0
<a> case 1 : </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = 0 ; </a> 0
<a> <RARE_TOKEN> [ 0 ] ++ ; </a> 0
<a> break ; </a> 0
<a> case 2 : </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = 0 ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = 0 ; </a> 0
<a> <RARE_TOKEN> [ 0 ] += 2 ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> if ( r <= 10 ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = 17 + ( ( r - 3 ) < < 5 ) ; </a> 0
<a> <RARE_TOKEN> [ 17 ] ++ ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = <RARE_TOKEN> + ( ( r - 11 ) < < 5 ) ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] ++ ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> int r = 0 ; </a> 0
<a> while ( r < 6 && <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> if ( in [ <RARE_TOKEN> ] != v ) </a> 0
<a> break ; </a> 0
<a> r ++ ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = v ; </a> 0
<a> <RARE_TOKEN> [ v ] ++ ; </a> 0
<a> switch ( r ) { </a> 0
<a> case 0 : </a> 0
<a> break ; </a> 0
<a> case 1 : </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = v ; </a> 0
<a> <RARE_TOKEN> [ v ] ++ ; </a> 0
<a> break ; </a> 0
<a> case 2 : </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = v ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = v ; </a> 0
<a> <RARE_TOKEN> [ v ] += 2 ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = 16 + ( ( r - 3 ) < < 5 ) ; </a> 0
<a> <RARE_TOKEN> [ 16 ] ++ ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int [ ] res = new int [ <RARE_TOKEN> ] ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , res , 0 , <RARE_TOKEN> ) ; </a> 0
<a> return res ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int val , int <RARE_TOKEN> ) throws IOException { </a> 0
<a> if ( <RARE_TOKEN> == 0 ) </a> 0
<a> return ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> int <RARE_TOKEN> = 8 - <RARE_TOKEN> ; </a> 0
<a> int v = <RARE_TOKEN> | ( val < < <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = v ; </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> return ; </a> 0
<a> } else if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = ( byte ) v ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> . length ) { </a> 0
<a> out . write ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = ( byte ) v ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> . length ) { </a> 0
<a> out . write ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> val <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> -= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> out . write ( <RARE_TOKEN> , 0 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( boolean <RARE_TOKEN> , int sbPtr ) throws IOException { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> int [ ] sb = buffer ; </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ <RARE_TOKEN> ] ; </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = 1 ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( int i = 0 ; i < sbPtr ; i ++ ) { </a> 0
<a> int val = sb [ i ] ; </a> 0
<a> int <RARE_TOKEN> = val & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] ++ ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> += 8 ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += 8 * ( <RARE_TOKEN> [ <RARE_TOKEN> - <RARE_TOKEN> ] + ( ( val > > > 9 ) & <RARE_TOKEN> ) ) ; </a> 0
<a> int dist = ( val > > > 14 ) & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ dist ] ++ ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( int t = 0 ; t < <RARE_TOKEN> ; t += <RARE_TOKEN> ) { </a> 0
<a> if ( t == 0 ) { </a> 0
<a> if ( <RARE_TOKEN> > 5 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = ( <RARE_TOKEN> > > > 3 ) ; </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= <RARE_TOKEN> && <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ? 1 : 0 , 3 ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) </a> 0
<a> <RARE_TOKEN> ( 0 , 8 - <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> | ( ~ <RARE_TOKEN> < < 16 ) , 32 ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> out . write ( <RARE_TOKEN> , 0 , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ? 3 : 2 , 3 ) ; </a> 0
<a> for ( int i = 0 ; i < sbPtr ; i ++ ) { </a> 0
<a> int val = buffer [ i ] ; </a> 0
<a> int <RARE_TOKEN> = val & <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> [ <RARE_TOKEN> ] , <RARE_TOKEN> < <RARE_TOKEN> ? 8 : 9 ) ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> [ <RARE_TOKEN> ] , <RARE_TOKEN> < <RARE_TOKEN> ? 7 : 8 ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> - <RARE_TOKEN> ] ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) </a> 0
<a> <RARE_TOKEN> ( ( val > > > 9 ) & <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> int dist = ( val > > > 14 ) & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> [ dist ] , 5 ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> [ dist ] ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) </a> 0
<a> <RARE_TOKEN> ( val > > > 19 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> [ <RARE_TOKEN> ] , 7 ) ; </a> 0
<a> } else { </a> 0
<a> int [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> int [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> int [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> int [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> int [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . length ; </a> 0
<a> int [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> int [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> int [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . length ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ? 5 : 4 , 3 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . length - <RARE_TOKEN> , 5 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . length - 1 , 5 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> - 4 , 4 ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> [ i ] , 3 ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> int v = <RARE_TOKEN> [ i ] ; </a> 0
<a> int s = v & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> [ s ] , <RARE_TOKEN> [ s ] ) ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> switch ( s ) { </a> 0
<a> case 16 : </a> 0
<a> <RARE_TOKEN> = 2 ; </a> 0
<a> break ; </a> 0
<a> case 17 : </a> 0
<a> <RARE_TOKEN> = 3 ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = 7 ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ( v > > > 5 ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < sbPtr ; i ++ ) { </a> 0
<a> int val = buffer [ i ] ; </a> 0
<a> int <RARE_TOKEN> = val & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> [ <RARE_TOKEN> ] , <RARE_TOKEN> [ <RARE_TOKEN> ] ) ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> ) </a> 0
<a> continue ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> - <RARE_TOKEN> ] ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) </a> 0
<a> <RARE_TOKEN> ( ( val > > > 9 ) & <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> int dist = ( val > > > 14 ) & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> [ dist ] , <RARE_TOKEN> [ dist ] ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> [ dist ] ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) </a> 0
<a> <RARE_TOKEN> ( val > > > 19 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> [ <RARE_TOKEN> ] , <RARE_TOKEN> [ <RARE_TOKEN> ] ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . length ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> while ( <RARE_TOKEN> < <RARE_TOKEN> ) </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) </a> 0
<a> throw new Error ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> - <RARE_TOKEN> , <RARE_TOKEN> , 0 , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> - <RARE_TOKEN> , <RARE_TOKEN> , 0 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> { </a> 0
<a> private int [ ] <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private int [ ] <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private int [ ] <RARE_TOKEN> ; </a> 0
<a> private int [ ] <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private int [ ] <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> ( int [ ] <RARE_TOKEN> , int [ ] <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = 17 ; </a> 0
<a> <RARE_TOKEN> = 3 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , 15 ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , 15 ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> int f = <RARE_TOKEN> [ i ] ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = ( i >= <RARE_TOKEN> ) ? <RARE_TOKEN> [ i - <RARE_TOKEN> ] : 0 ; </a> 0
<a> <RARE_TOKEN> += ( <RARE_TOKEN> [ i ] + <RARE_TOKEN> ) * f ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> if ( i < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = ( i < <RARE_TOKEN> ) ? 8 : 9 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = ( i < <RARE_TOKEN> ) ? 7 : 8 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += ( <RARE_TOKEN> + <RARE_TOKEN> ) * f ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> int f = <RARE_TOKEN> [ i ] ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> [ i ] ; </a> 0
<a> <RARE_TOKEN> += ( <RARE_TOKEN> [ i ] + <RARE_TOKEN> ) * f ; </a> 0
<a> <RARE_TOKEN> += ( 5 + <RARE_TOKEN> ) * f ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , 15 ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , 15 ) ; </a> 0
<a> if ( <RARE_TOKEN> . length == 0 ) </a> 0
<a> <RARE_TOKEN> = new int [ 1 ] ; </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ 19 ] ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . length , <RARE_TOKEN> , <RARE_TOKEN> . length , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , 7 ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , 7 ) ; </a> 0
<a> for ( int i = 0 ; i < 19 ; i ++ ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> [ i ] ; </a> 0
<a> switch ( i ) { </a> 0
<a> case 16 : </a> 0
<a> <RARE_TOKEN> += 2 ; </a> 0
<a> break ; </a> 0
<a> case 17 : </a> 0
<a> <RARE_TOKEN> += 3 ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> += 7 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> [ i ] * <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ 19 ] ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( int i = 0 ; i < 19 ; i ++ ) { </a> 0
<a> int len = <RARE_TOKEN> [ <RARE_TOKEN> [ i ] ] ; </a> 0
<a> if ( len > 0 ) </a> 0
<a> <RARE_TOKEN> = i + 1 ; </a> 0
<a> <RARE_TOKEN> [ i ] = len ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = new int [ <RARE_TOKEN> ] ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , <RARE_TOKEN> , 0 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> += 3 * <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ? 3 : 2 , 10 ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( boolean <RARE_TOKEN> , boolean <RARE_TOKEN> ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ? 1 : 0 , 3 ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) </a> 0
<a> <RARE_TOKEN> ( 0 , 8 - <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ) </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , 32 ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( true , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > 0 ) </a> 0
<a> <RARE_TOKEN> ( 0 , 8 - <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != 0 ) </a> 0
<a> <RARE_TOKEN> ( false , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( false , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> static final int [ ] <RARE_TOKEN> ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { </a> 0
<a> 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , </a> 0
<a> 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 0 </a> 0
<a> } ; </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> = new int [ 29 ] ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = 3 ; </a> 0
<a> int l = 3 ; </a> 0
<a> for ( int i = 1 ; i < 28 ; i ++ ) { </a> 0
<a> l += 1 < < <RARE_TOKEN> [ i - 1 ] ; </a> 0
<a> <RARE_TOKEN> [ i ] = l ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ 28 ] = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static final int [ ] <RARE_TOKEN> ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { </a> 0
<a> 0 , 0 , 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 , 6 , 6 , 7 , 7 , </a> 0
<a> 8 , 8 , 9 , 9 , 10 , 10 , 11 , 11 , 12 , 12 , 13 , 13 </a> 0
<a> } ; </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> = new int [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = 1 ; </a> 0
<a> int d = 1 ; </a> 0
<a> for ( int i = 1 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> d += 1 < < <RARE_TOKEN> [ i - 1 ] ; </a> 0
<a> <RARE_TOKEN> [ i ] = d ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static final int [ ] <RARE_TOKEN> = { </a> 0
<a> 16 , 17 , <RARE_TOKEN> , 0 , 8 , 7 , 9 , 6 , 10 , 5 , </a> 0
<a> 11 , 4 , 12 , 3 , 13 , 2 , 14 , 1 , 15 </a> 0
<a> } ; </a> 0
<a> static int [ ] <RARE_TOKEN> ( int [ ] <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . length ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> for ( int n = 0 ; n < <RARE_TOKEN> ; n ++ ) { </a> 0
<a> int len = <RARE_TOKEN> [ n ] ; </a> 0
<a> if ( len < 0 || len > <RARE_TOKEN> ) </a> 0
<a> return null ; </a> 0
<a> if ( len > 0 ) { </a> 0
<a> <RARE_TOKEN> = n + 1 ; </a> 0
<a> <RARE_TOKEN> [ len ] ++ ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( int bits = 1 ; bits <= <RARE_TOKEN> ; bits ++ ) { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> + <RARE_TOKEN> [ bits - 1 ] ) < < 1 ; </a> 0
<a> <RARE_TOKEN> [ bits ] = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int [ ] code = new int [ <RARE_TOKEN> ] ; </a> 0
<a> for ( int n = 0 ; n < <RARE_TOKEN> ; n ++ ) { </a> 0
<a> int len = <RARE_TOKEN> [ n ] ; </a> 0
<a> if ( len != 0 ) { </a> 0
<a> int w = <RARE_TOKEN> [ len ] ; </a> 0
<a> if ( w >= ( 1 < < len ) ) </a> 0
<a> return null ; </a> 0
<a> code [ n ] = <RARE_TOKEN> ( w , len ) ; </a> 0
<a> <RARE_TOKEN> [ len ] = w + 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return code ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( int <RARE_TOKEN> , int q ) { </a> 0
<a> int v = 0 ; </a> 0
<a> while ( q -- > 0 ) { </a> 0
<a> v <RARE_TOKEN> 1 ; </a> 0
<a> if ( ( <RARE_TOKEN> & 1 ) != 0 ) </a> 0
<a> v ++ ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> 1 ; </a> 0
<a> } </a> 0
<a> return v ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> public class <RARE_TOKEN> extends OutputStream { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( OutputStream out ) throws IOException { </a> 0
<a> this ( out , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( OutputStream out , int level ) throws IOException { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( level ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( out ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( int b ) throws IOException { </a> 0
<a> write ( new byte [ ] { ( byte ) b } , 0 , 1 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] buf ) throws IOException { </a> 0
<a> write ( buf , 0 , buf . length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] buf , int off , int len ) throws IOException { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( buf , off , len ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> public class <RARE_TOKEN> extends OutputStream { </a> 0
<a> private int count ; </a> 0
<a> private final OutputStream out ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( OutputStream out ) { </a> 0
<a> this . out = out ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return count ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( int b ) throws IOException { </a> 0
<a> out . write ( b ) ; </a> 0
<a> count ++ ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] b ) throws IOException { </a> 0
<a> out . write ( b ) ; </a> 0
<a> count += b . length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] b , int off , int len ) throws IOException { </a> 0
<a> out . write ( b , off , len ) ; </a> 0
<a> count += len ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ) throws IOException { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> out . flush ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 1
<a> import java . io . IOException ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . Collection ; </a> 1
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . ScheduledFuture ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > resource , </a> 0
<a> <RARE_TOKEN> servlet , int <RARE_TOKEN> ) throws IOException { </a> 0
<a> this . <RARE_TOKEN> = servlet ; </a> 0
<a> this . <RARE_TOKEN> = resource ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . writer = <RARE_TOKEN> ( ) ; </a> 0
<a> resource . getRequest ( ) . setAttribute ( <RARE_TOKEN> . class . getName ( ) , this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Broadcaster getBroadcaster ( ) { </a> 0
<a> return <RARE_TOKEN> . getBroadcaster ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> getSession ( ) { </a> 0
<a> return <RARE_TOKEN> . getRequest ( ) . getSession ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> getSession ( boolean create ) { </a> 0
<a> return <RARE_TOKEN> . getRequest ( ) . getSession ( create ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return writer ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void broadcast ( Serializable message ) { </a> 0
<a> getBroadcaster ( ) . broadcast ( message , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void broadcast ( List < Serializable > messages ) { </a> 0
<a> getBroadcaster ( ) . broadcast ( messages , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void post ( Serializable message ) { </a> 0
<a> getBroadcaster ( ) . broadcast ( message , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void post ( List < Serializable > messages ) { </a> 0
<a> getBroadcaster ( ) . broadcast ( messages , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public AtmosphereResource < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( writer . <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ( System . currentTimeMillis ( ) - <RARE_TOKEN> ) < <RARE_TOKEN> ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . getBroadcaster ( ) == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Collection < AtmosphereResource < ? , ? > > res = <RARE_TOKEN> . getBroadcaster ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( AtmosphereResource < ? , ? > <RARE_TOKEN> : res ) { </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return suspended ; </a> 0
<a> } </a> 0
<a> long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public HttpServletRequest getRequest ( ) { </a> 0
<a> return <RARE_TOKEN> . getRequest ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public HttpServletResponse getResponse ( ) { </a> 0
<a> return <RARE_TOKEN> . getResponse ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return writer . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void suspend ( ) throws IOException { </a> 0
<a> suspend ( - 1 ) ; </a> 0
<a> } </a> 0
<a> public void suspend ( int timeout ) throws IOException { </a> 0
<a> if ( ! suspended ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( serializer ) ; </a> 1
<a> if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> writer . suspend ( ) ; </a> 0
<a> <RARE_TOKEN> . suspend ( timeout , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void resume ( ) { </a> 0
<a> <RARE_TOKEN> . resume ( ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . resume ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > void setAttribute ( String name , T value ) { </a> 0
<a> <RARE_TOKEN> . getRequest ( ) . setAttribute ( name , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > T getAttribute ( String name ) { </a> 0
<a> return ( T ) <RARE_TOKEN> . getRequest ( ) . getAttribute ( name ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return writer ; </a> 0
<a> } </a> 0
<a> ScheduledFuture < ? > <RARE_TOKEN> ( ) { </a> 0
<a> return getBroadcaster ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) </a> 0
<a> . schedule ( <RARE_TOKEN> , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> s = <RARE_TOKEN> ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> if ( suspended ) { </a> 0
<a> <RARE_TOKEN> . resume ( ) ; </a> 0
<a> } </a> 0
<a> s . <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getRequest ( ) , <RARE_TOKEN> . getServletContext ( ) ) ; </a> 0
<a> <RARE_TOKEN> serializationPolicy = <RARE_TOKEN> == null ? <RARE_TOKEN> . <RARE_TOKEN> ( ) : null ; </a> 0
<a> String transport = <RARE_TOKEN> . getRequest ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( transport ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return new <RARE_TOKEN> ( this , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( transport ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return new <RARE_TOKEN> ( this , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( transport ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return new <RARE_TOKEN> ( this , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( transport ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return new <RARE_TOKEN> ( this , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( transport ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return new <RARE_TOKEN> ( this , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( transport ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> file <RARE_TOKEN> ) ; </a> 0
<a> return new <RARE_TOKEN> ( this , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> throw new IllegalStateException ( "Failed to <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final static long <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> private final <RARE_TOKEN> writer ; </a> 0
<a> private AtmosphereResource < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean suspended = false ; </a> 0
<a> private Logger logger = LoggerFactory . getLogger ( getClass ( ) ) ; </a> 0
<a> private Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> broadcast ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private final <RARE_TOKEN> serializer = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void write ( OutputStream out , Object o ) throws IOException { </a> 0
<a> if ( o instanceof Serializable ) { </a> 0
<a> try { </a> 0
<a> writer . write ( ( Serializable ) o ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> if ( writer . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> connection <RARE_TOKEN> + e . getMessage ( ) , e ) ; </a> 0
<a> } </a> 0
<a> throw e ; </a> 0
<a> } </a> 0
<a> } else if ( o instanceof List ) { </a> 0
<a> List < ? > list = ( List ) o ; </a> 0
<a> if ( list . size ( ) > 0 ) { </a> 0
<a> if ( ! ( list . get ( 0 ) instanceof Serializable ) ) { </a> 0
<a> throw new IOException ( "Failed to write a list of <RARE_TOKEN> that <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> writer . write ( ( List < Serializable > ) o ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> logger . warn ( "Failed to write an object that is not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private final AtmosphereResourceEventListener <RARE_TOKEN> = new AtmosphereResourceEventListener ( ) { </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> ) { </a> 0
<a> suspended = true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> suspended = false ; </a> 0
<a> writer . <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> suspended = false ; </a> 0
<a> writer . <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> } </a> 1
<a> } ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . gwt . server . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . slf4j . Logger ; </a> 1
<a> import org . slf4j . LoggerFactory ; </a> 1
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 1
<a> import java . io . IOException ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . ScheduledFuture ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public abstract class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> protected <RARE_TOKEN> writer ; </a> 0
<a> protected final <RARE_TOKEN> resource ; </a> 0
<a> protected final int <RARE_TOKEN> ; </a> 0
<a> protected final Logger logger = LoggerFactory . getLogger ( getClass ( ) ) ; </a> 0
<a> protected <RARE_TOKEN> ( <RARE_TOKEN> resource , <RARE_TOKEN> serializationPolicy , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . resource = resource ; </a> 0
<a> this . serializationPolicy = serializationPolicy ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> != null ; </a> 0
<a> } </a> 0
<a> public HttpServletRequest getRequest ( ) { </a> 0
<a> return resource . <RARE_TOKEN> ( ) . getRequest ( ) ; </a> 0
<a> } </a> 0
<a> public HttpServletResponse getResponse ( ) { </a> 0
<a> return resource . <RARE_TOKEN> ( ) . getResponse ( ) ; </a> 0
<a> } </a> 0
<a> synchronized void <RARE_TOKEN> ( ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . trace ( <RARE_TOKEN> <RARE_TOKEN> for <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> logger . trace ( <RARE_TOKEN> write for <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> " + new Date ( <RARE_TOKEN> ) . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . cancel ( false ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = resource . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int statusCode ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( statusCode , null ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized void <RARE_TOKEN> ( int statusCode , String message ) throws IOException { </a> 0
<a> try { </a> 0
<a> if ( writer == null ) { </a> 0
<a> getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> getResponse ( ) . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> getResponse ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> writer = new <RARE_TOKEN> ( getResponse ( ) . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( statusCode , message ) ; </a> 0
<a> } catch ( IllegalStateException e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> <RARE_TOKEN> response to <RARE_TOKEN> <RARE_TOKEN> " + e . getMessage ( ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> logger . debug ( "Failed to <RARE_TOKEN> error to <RARE_TOKEN> , e ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected OutputStream <RARE_TOKEN> ( OutputStream <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public synchronized void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> getResponse ( ) . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> getResponse ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> OutputStream <RARE_TOKEN> = getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = getRequest ( ) . getHeader ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> getResponse ( ) . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> writer = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . trace ( <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> getRequest ( ) . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void suspend ( ) throws IOException { </a> 0
<a> try { </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . trace ( <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> flush ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> throw e ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> flush ( ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( Serializable message ) throws IOException { </a> 0
<a> write ( Collections . <RARE_TOKEN> ( message ) , true ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( Serializable message , boolean flush ) throws IOException { </a> 0
<a> write ( Collections . <RARE_TOKEN> ( message ) , flush ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( List < ? extends Serializable > messages ) throws IOException { </a> 0
<a> write ( messages , true ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized void write ( List < ? extends Serializable > messages , boolean flush ) throws IOException { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> throw new IOException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> if ( messages . size ( ) == 1 && messages . get ( 0 ) instanceof String </a> 0
<a> && messages . get ( 0 ) . equals ( <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . trace ( <RARE_TOKEN> <RARE_TOKEN> + messages . size ( ) + " messages to <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( messages ) ; </a> 0
<a> if ( flush ) { </a> 0
<a> flush ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> resource . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> throw e ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> logger . trace ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> flush ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> logger . debug ( "Failed to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> throw e ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> synchronized void flush ( ) throws IOException { </a> 0
<a> writer . flush ( ) ; </a> 0
<a> } </a> 0
<a> synchronized void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . trace ( <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . cancel ( false ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> if ( writer != null ) { </a> 0
<a> writer . close ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> resource . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected abstract void <RARE_TOKEN> ( int statusCode , String message ) throws IOException ; </a> 0
<a> protected abstract void <RARE_TOKEN> ( ) throws IOException ; </a> 0
<a> protected abstract void <RARE_TOKEN> ( List < ? extends Serializable > messages ) throws IOException ; </a> 0
<a> protected abstract void <RARE_TOKEN> ( ) throws IOException ; </a> 0
<a> protected abstract void <RARE_TOKEN> ( ) throws IOException ; </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> session = resource . getSession ( false ) ; </a> 0
<a> return session != null ; </a> 0
<a> } </a> 0
<a> protected String <RARE_TOKEN> ( Serializable message ) throws <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( serializationPolicy ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( message ) ; </a> 0
<a> return <RARE_TOKEN> . toString ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> result = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , result , message ) ; </a> 0
<a> return new String ( result . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final <RARE_TOKEN> serializationPolicy ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private volatile long <RARE_TOKEN> ; </a> 0
<a> private ScheduledFuture < ? > <RARE_TOKEN> ; </a> 0
<a> private static AtomicInteger <RARE_TOKEN> = new AtomicInteger ( 1 ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> resource , <RARE_TOKEN> serializationPolicy , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( resource , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> resource , <RARE_TOKEN> serializationPolicy , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( resource , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> resource , <RARE_TOKEN> serializationPolicy , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( resource , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . List ; </a> 0
<a> abstract public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> protected Integer length ; </a> 0
<a> protected final boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> resource , <RARE_TOKEN> serializationPolicy , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( resource , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = resource . <RARE_TOKEN> ( ) . getRequest ( ) . getHeader ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> != null && <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected OutputStream <RARE_TOKEN> ( OutputStream <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = getRequest ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = Integer . parseInt ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = getRequest ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> length = Integer . parseInt ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> writer . flush ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> - <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> writer . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized void write ( List < ? extends Serializable > messages , boolean flush ) throws IOException { </a> 0
<a> super . write ( messages , flush ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> int count = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> count = 2 * count ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> && <RARE_TOKEN> ( count ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected abstract void <RARE_TOKEN> ( ) throws IOException ; </a> 0
<a> protected abstract int <RARE_TOKEN> ( ) ; </a> 0
<a> protected abstract <RARE_TOKEN> <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> protected abstract boolean <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> resource , <RARE_TOKEN> serializationPolicy , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( resource , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> getResponse ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> writer . append ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) </a> 0
<a> . append ( String . valueOf ( resource . <RARE_TOKEN> ( ) ) ) . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( String . valueOf ( <RARE_TOKEN> ) ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( int statusCode , String message ) throws IOException { </a> 0
<a> getResponse ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> writer . append ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) . append ( String . valueOf ( statusCode ) ) ; </a> 0
<a> if ( message != null ) { </a> 0
<a> writer . append ( ' ' ) . append ( <RARE_TOKEN> . <RARE_TOKEN> ( message ) ) ; </a> 0
<a> } </a> 0
<a> writer . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( List < ? extends Serializable > messages ) throws IOException { </a> 0
<a> for ( Serializable message : messages ) { </a> 0
<a> <RARE_TOKEN> string ; </a> 0
<a> char event ; </a> 0
<a> if ( message instanceof <RARE_TOKEN> ) { </a> 0
<a> string = <RARE_TOKEN> . <RARE_TOKEN> ( ( <RARE_TOKEN> ) message ) ; </a> 1
<a> event = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> string = <RARE_TOKEN> ( message ) ; </a> 0
<a> event = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> writer . append ( <RARE_TOKEN> " ) . append ( event ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> writer . append ( <RARE_TOKEN> " ) . append ( string ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> writer . append ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> writer . append ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import javax . servlet . <RARE_TOKEN> ; </a> 1
<a> import javax . servlet . http . HttpServletRequest ; </a> 1
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> protected static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> if ( policy != null ) { </a> 0
<a> return policy ; </a> 0
<a> } </a> 0
<a> policy = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( final Class < ? > clazz ) { </a> 0
<a> return Object . class != clazz ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( final Class < ? > clazz ) { </a> 0
<a> return Object . class != clazz ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final Class < ? > clazz ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final Class < ? > clazz ) { </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> return policy ; </a> 0
<a> } </a> 0
<a> protected static <RARE_TOKEN> <RARE_TOKEN> ( HttpServletRequest request , <RARE_TOKEN> context ) throws IOException { </a> 0
<a> String <RARE_TOKEN> = request . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . get ( <RARE_TOKEN> ) . get ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> String <RARE_TOKEN> = request . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = new URL ( <RARE_TOKEN> ) . getPath ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> request <RARE_TOKEN> GWT <RARE_TOKEN> path <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = context . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> request <RARE_TOKEN> <RARE_TOKEN> GWT <RARE_TOKEN> path <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . substring ( <RARE_TOKEN> . length ( ) ) ; </a> 0
<a> InputStream in = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , context ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( in ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , new <RARE_TOKEN> < <RARE_TOKEN> > ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static InputStream <RARE_TOKEN> ( String <RARE_TOKEN> , String <RARE_TOKEN> </a> 0
<a> , <RARE_TOKEN> context ) throws IOException { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> InputStream in = context . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( in == null ) { </a> 0
<a> throw new IOException ( <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> data for <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return in ; </a> 0
<a> } </a> 0
<a> private static final Map < String , <RARE_TOKEN> < <RARE_TOKEN> > > <RARE_TOKEN> = new HashMap < String , <RARE_TOKEN> < <RARE_TOKEN> > > ( ) ; </a> 0
<a> private static <RARE_TOKEN> policy ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . List ; </a> 0
<a> abstract public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> ; </a> 0
<a> static { </a> 0
<a> char [ ] <RARE_TOKEN> = new char [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length - 1 ; i ++ ) { </a> 0
<a> <RARE_TOKEN> [ i ] = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> . length - 1 ] = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = new String ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> resource , <RARE_TOKEN> serializationPolicy , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( resource , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> abstract String <RARE_TOKEN> ( ) ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> getResponse ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> String <RARE_TOKEN> = getRequest ( ) . getHeader ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( logger . isDebugEnabled ( ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> getResponse ( ) . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> writer . append ( <RARE_TOKEN> ) . append ( String . valueOf ( resource . <RARE_TOKEN> ( ) ) ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> writer . append ( String . valueOf ( <RARE_TOKEN> ) ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> string ) { </a> 0
<a> int length = ( string != null ) ? string . length ( ) : 0 ; </a> 0
<a> int i = 0 ; </a> 0
<a> loop : </a> 0
<a> while ( i < length ) { </a> 0
<a> char ch = string . charAt ( i ) ; </a> 0
<a> switch ( ch ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> break loop ; </a> 0
<a> } </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> if ( i == length ) </a> 0
<a> return string ; </a> 0
<a> StringBuilder <RARE_TOKEN> = new StringBuilder ( string . length ( ) * 2 ) ; </a> 0
<a> <RARE_TOKEN> . append ( string , 0 , i ) ; </a> 0
<a> while ( i < length ) { </a> 0
<a> char ch = string . charAt ( i ) ; </a> 0
<a> switch ( ch ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> . append ( <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> . append ( <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> <RARE_TOKEN> . append ( ch ) ; </a> 0
<a> } </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> . length ( ) - 1 ) { </a> 0
<a> StringBuilder result = new StringBuilder ( <RARE_TOKEN> ) ; </a> 0
<a> while ( <RARE_TOKEN> > 0 ) { </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> . length ( ) - 1 ) { </a> 0
<a> result . append ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> -= <RARE_TOKEN> . length ( ) - 1 ; </a> 0
<a> } else { </a> 0
<a> result . append ( <RARE_TOKEN> . substring ( <RARE_TOKEN> . length ( ) - 1 - <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return result . toString ( ) ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> . substring ( <RARE_TOKEN> . length ( ) - <RARE_TOKEN> - 1 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( int statusCode , String message ) throws IOException { </a> 0
<a> getResponse ( ) . <RARE_TOKEN> ( statusCode ) ; </a> 0
<a> if ( message != null ) { </a> 0
<a> writer . append ( message ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( List < ? extends Serializable > messages ) throws IOException { </a> 0
<a> for ( Serializable message : messages ) { </a> 0
<a> <RARE_TOKEN> string ; </a> 0
<a> if ( message instanceof <RARE_TOKEN> ) { </a> 0
<a> string = <RARE_TOKEN> ( ( <RARE_TOKEN> ) message ) ; </a> 1
<a> if ( string == message ) { </a> 0
<a> writer . append ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> writer . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> string = <RARE_TOKEN> ( message ) ; </a> 0
<a> } </a> 0
<a> writer . append ( string ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( length != null ) { </a> 0
<a> return <RARE_TOKEN> > length ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> > 5 * <RARE_TOKEN> * <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> writer . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> writer . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> writer . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . rpc . server . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . server . rpc . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> resource , <RARE_TOKEN> serializationPolicy , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( resource , serializationPolicy , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> writer . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( String . valueOf ( resource . <RARE_TOKEN> ( ) ) ) . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( String . valueOf ( <RARE_TOKEN> ) ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( int statusCode , String message ) throws IOException { </a> 0
<a> writer . append ( <RARE_TOKEN> ) . append ( String . valueOf ( statusCode ) ) ; </a> 0
<a> if ( message != null ) { </a> 0
<a> writer . append ( ' ' ) . append ( <RARE_TOKEN> . <RARE_TOKEN> ( message ) ) ; </a> 0
<a> } </a> 0
<a> writer . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( List < ? extends Serializable > messages ) throws IOException { </a> 0
<a> for ( Serializable message : messages ) { </a> 0
<a> <RARE_TOKEN> string ; </a> 0
<a> char event ; </a> 0
<a> if ( message instanceof <RARE_TOKEN> ) { </a> 0
<a> string = <RARE_TOKEN> . <RARE_TOKEN> ( ( <RARE_TOKEN> ) message ) ; </a> 0
<a> event = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> string = <RARE_TOKEN> ( message ) ; </a> 0
<a> event = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> writer . append ( event ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> writer . append ( string ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> writer . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> writer . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . client ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( </a> 0
<a> { <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . TYPE } ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> public @ interface <RARE_TOKEN> { </a> 0
<a> String value ( ) default "" ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . client ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . TYPE ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> public @ interface <RARE_TOKEN> { </a> 0
<a> String value ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . client ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . client ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> @ Deprecated </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . client ; </a> 0
<a> import com . google . gwt . core . client . GWT ; </a> 0
<a> import com . google . gwt . core . client . JavaScriptObject ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private native static JavaScriptObject <RARE_TOKEN> ( <RARE_TOKEN> type , </a> 0
<a> JavaScriptObject <RARE_TOKEN> , String <RARE_TOKEN> ) ; </a> 0
<a> private HashMap <RARE_TOKEN> = new HashMap ( ) ; </a> 0
<a> private HashMap < Class , JavaScriptObject > <RARE_TOKEN> </a> 0
<a> = new HashMap < Class , JavaScriptObject > ( ) ; </a> 0
<a> private HashMap < Class , JavaScriptObject > <RARE_TOKEN> </a> 0
<a> = new HashMap < Class , JavaScriptObject > ( ) ; </a> 0
<a> private <RARE_TOKEN> < Object , JavaScriptObject > <RARE_TOKEN> = null ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> < Object , JavaScriptObject > ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> type , </a> 0
<a> JavaScriptObject <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( type . getClass ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Class type , JavaScriptObject <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( type , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Object <RARE_TOKEN> , JavaScriptObject wrapper ) { </a> 0
<a> if ( GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , wrapper , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , wrapper ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public JavaScriptObject <RARE_TOKEN> ( <RARE_TOKEN> type ) { </a> 0
<a> return <RARE_TOKEN> ( type . getClass ( ) ) ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject <RARE_TOKEN> ( Class type ) { </a> 0
<a> Object o = <RARE_TOKEN> . get ( type ) ; </a> 0
<a> return ( JavaScriptObject ) o ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( <RARE_TOKEN> type ) { </a> 0
<a> if ( type == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( ! GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> JavaScriptObject wrapper = <RARE_TOKEN> . get ( type ) ; </a> 0
<a> if ( wrapper != null ) { </a> 0
<a> return wrapper ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> JavaScriptObject wrapper = <RARE_TOKEN> ( type , <RARE_TOKEN> ) ; </a> 0
<a> if ( wrapper != null ) { </a> 0
<a> return wrapper ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> JavaScriptObject wrapper = <RARE_TOKEN> ( type , <RARE_TOKEN> ( type ) , </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( type , wrapper ) ; </a> 0
<a> return wrapper ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( <RARE_TOKEN> [ ] type ) { </a> 0
<a> if ( type == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> JavaScriptObject wrapper = <RARE_TOKEN> ( type ) ; </a> 0
<a> <RARE_TOKEN> < JavaScriptObject > <RARE_TOKEN> = wrapper . cast ( ) ; </a> 0
<a> for ( int i = 0 ; i < type . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . set ( i , wrap ( type [ i ] ) ) ; </a> 0
<a> } </a> 0
<a> return wrapper ; </a> 0
<a> } </a> 0
<a> private JavaScriptObject <RARE_TOKEN> ( Object type ) { </a> 0
<a> JavaScriptObject wrapper = null ; </a> 0
<a> if ( ! GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> wrapper = <RARE_TOKEN> . get ( type ) ; </a> 0
<a> } else { </a> 0
<a> wrapper = <RARE_TOKEN> ( type , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( wrapper == null ) { </a> 0
<a> wrapper = JavaScriptObject . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( type , wrapper ) ; </a> 0
<a> } </a> 0
<a> return wrapper ; </a> 0
<a> } </a> 0
<a> private static native JavaScriptObject <RARE_TOKEN> ( Object <RARE_TOKEN> ) ; </a> 0
<a> @ Override </a> 0
<a> public JavaScriptObject wrap ( float [ ] type ) { </a> 0
<a> if ( ! GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( type == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> JavaScriptObject wrapper = <RARE_TOKEN> ( type ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = wrapper . cast ( ) ; </a> 0
<a> for ( int i = 0 ; i < type . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . set ( i , type [ i ] ) ; </a> 0
<a> } </a> 0
<a> return wrapper ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( type ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public JavaScriptObject wrap ( byte [ ] type ) { </a> 0
<a> if ( ! GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( type == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> JavaScriptObject wrapper = <RARE_TOKEN> ( type ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = wrapper . cast ( ) ; </a> 0
<a> for ( int i = 0 ; i < type . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . set ( i , type [ i ] ) ; </a> 0
<a> } </a> 0
<a> return wrapper ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( type ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public JavaScriptObject wrap ( char [ ] type ) { </a> 0
<a> if ( ! GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( type == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> JavaScriptObject wrapper = <RARE_TOKEN> ( type ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = wrapper . cast ( ) ; </a> 0
<a> for ( int i = 0 ; i < type . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . set ( i , type [ i ] ) ; </a> 0
<a> } </a> 0
<a> return wrapper ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( type ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public JavaScriptObject wrap ( int [ ] type ) { </a> 0
<a> if ( ! GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( type == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> JavaScriptObject wrapper = <RARE_TOKEN> ( type ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = wrapper . cast ( ) ; </a> 0
<a> for ( int i = 0 ; i < type . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . set ( i , type [ i ] ) ; </a> 0
<a> } </a> 0
<a> return wrapper ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( type ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public JavaScriptObject wrap ( long [ ] type ) { </a> 0
<a> if ( ! GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( type == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> JavaScriptObject wrapper = <RARE_TOKEN> ( type ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = wrapper . cast ( ) ; </a> 0
<a> for ( int i = 0 ; i < type . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . set ( i , type [ i ] ) ; </a> 0
<a> } </a> 0
<a> return wrapper ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( type ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public JavaScriptObject wrap ( short [ ] type ) { </a> 0
<a> if ( ! GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( type == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> JavaScriptObject wrapper = <RARE_TOKEN> ( type ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = wrapper . cast ( ) ; </a> 0
<a> for ( int i = 0 ; i < type . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . set ( i , type [ i ] ) ; </a> 0
<a> } </a> 0
<a> return wrapper ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( type ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( double [ ] type ) { </a> 0
<a> if ( ! GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( type == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> JavaScriptObject wrapper = <RARE_TOKEN> ( type ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = wrapper . cast ( ) ; </a> 0
<a> for ( int i = 0 ; i < type . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . set ( i , type [ i ] ) ; </a> 0
<a> } </a> 0
<a> return wrapper ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( type ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private native JavaScriptObject <RARE_TOKEN> ( Object type , String <RARE_TOKEN> ) ; </a> 0
<a> private void <RARE_TOKEN> ( Object <RARE_TOKEN> , JavaScriptObject wrapper ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , wrapper ) ; </a> 0
<a> } </a> 0
<a> private native void <RARE_TOKEN> ( Object <RARE_TOKEN> , JavaScriptObject wrapper , </a> 0
<a> String <RARE_TOKEN> ) ; </a> 0
<a> private native void <RARE_TOKEN> ( JavaScriptObject <RARE_TOKEN> , String <RARE_TOKEN> ) ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , </a> 0
<a> String <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> [ ] = <RARE_TOKEN> . split ( <RARE_TOKEN> ) ; </a> 0
<a> JavaScriptObject <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> if ( ! <RARE_TOKEN> [ i ] . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> [ i ] ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> [ i ] ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> [ ] = <RARE_TOKEN> . split ( <RARE_TOKEN> ) ; </a> 0
<a> for ( String <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) . equals ( "" ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static native JavaScriptObject <RARE_TOKEN> ( ) ; </a> 0
<a> private static native JavaScriptObject <RARE_TOKEN> ( JavaScriptObject <RARE_TOKEN> , </a> 0
<a> String key ) ; </a> 0
<a> @ Override </a> 0
<a> public JavaScriptObject <RARE_TOKEN> ( Class clazz , String <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> < JavaScriptObject > <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> Map < Class , JavaScriptObject > <RARE_TOKEN> = <RARE_TOKEN> ? <RARE_TOKEN> </a> 0
<a> : <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> . get ( clazz ) . cast ( ) , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . length ( ) ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ( ) ; i ++ ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( i ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> JavaScriptObject <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! GWT . <RARE_TOKEN> ( ) ) { </a> 0
<a> JavaScriptObject <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> != null ? <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) : <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> method for <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private native static JavaScriptObject <RARE_TOKEN> ( JavaScriptObject <RARE_TOKEN> , </a> 0
<a> JavaScriptObject <RARE_TOKEN> ) ; </a> 0
<a> private native <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> ( JavaScriptObject <RARE_TOKEN> , </a> 0
<a> String <RARE_TOKEN> , int <RARE_TOKEN> ) ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Class clazz , JavaScriptObject <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( clazz , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . put ( clazz , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> final public static class <RARE_TOKEN> extends JavaScriptObject { </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> < JavaScriptObject > <RARE_TOKEN> ) { </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ( ) ; i ++ ) { </a> 0
<a> Object <RARE_TOKEN> = <RARE_TOKEN> ( i + 2 ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , i ) ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> Object <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , i ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( ! <RARE_TOKEN> . getClass ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } else if ( ! <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } else if ( ! <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public native Object <RARE_TOKEN> ( JavaScriptObject args , int i ) ; </a> 0
<a> public native static String <RARE_TOKEN> ( JavaScriptObject args , int i ) ; </a> 0
<a> public native Object <RARE_TOKEN> ( int i ) ; </a> 0
<a> public native JavaScriptObject <RARE_TOKEN> ( ) ; </a> 0
<a> public native JavaScriptObject <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . client ; </a> 0
<a> import com . google . gwt . core . client . JavaScriptObject ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> type , </a> 0
<a> JavaScriptObject <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Class type , JavaScriptObject <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Object <RARE_TOKEN> , JavaScriptObject wrapper ) { </a> 0
<a> } </a> 0
<a> public JavaScriptObject <RARE_TOKEN> ( <RARE_TOKEN> type ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject <RARE_TOKEN> ( String type ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( <RARE_TOKEN> type ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( <RARE_TOKEN> [ ] type ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( double [ ] type ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( float [ ] type ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( int [ ] type ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( char [ ] type ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( byte [ ] type ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( long [ ] type ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public JavaScriptObject wrap ( short [ ] type ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> public JavaScriptObject <RARE_TOKEN> ( Class clazz , String <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> < JavaScriptObject > <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Class clazz , JavaScriptObject <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . client ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( </a> 0
<a> { <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> } ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> public @ interface <RARE_TOKEN> { </a> 0
<a> public abstract boolean value ( ) default false ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . client ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( </a> 0
<a> { <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> } ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> public @ interface <RARE_TOKEN> { </a> 0
<a> public abstract String value ( ) default "" ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . client ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . TYPE ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> public @ interface <RARE_TOKEN> { </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . JClassType ; </a> 0
<a> import com . google . gwt . user . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . HashSet ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> logger ; </a> 0
<a> private <RARE_TOKEN> ctx ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> sw ; </a> 0
<a> private ArrayList < JExportableClassType > <RARE_TOKEN> ; </a> 0
<a> private HashSet < String > <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> logger , <RARE_TOKEN> ctx ) { </a> 0
<a> this ( logger , ctx , new HashSet < String > ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> logger , <RARE_TOKEN> ctx , </a> 0
<a> HashSet < String > <RARE_TOKEN> ) { </a> 0
<a> this . logger = logger ; </a> 0
<a> this . ctx = ctx ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ctx . <RARE_TOKEN> ( ) , logger ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = new ArrayList < JExportableClassType > ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( JExportableClassType requestedType ) </a> 0
<a> throws <RARE_TOKEN> { </a> 0
<a> if ( requestedType == null ) { </a> 0
<a> logger . log ( <RARE_TOKEN> . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + requestedType . getQualifiedSourceName ( ) </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> , null ) ; </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = requestedType . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> " + <RARE_TOKEN> . <RARE_TOKEN> + " <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> " + <RARE_TOKEN> + <RARE_TOKEN> { <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> + " <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> = <RARE_TOKEN> ) ; </a> 0
<a> if ( requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> static " + <RARE_TOKEN> + " <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> . <RARE_TOKEN> + " <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> new " + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( ) ; </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> = requestedType . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . length != 1 ) { </a> 0
<a> logger . log ( <RARE_TOKEN> . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> " + requestedType . getQualifiedSourceName ( ) </a> 0
<a> + " has <RARE_TOKEN> <RARE_TOKEN> one " </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> for " </a> 0
<a> + <RARE_TOKEN> method <RARE_TOKEN> , null ) ; </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> method = <RARE_TOKEN> [ 0 ] ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = method . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> logger . log ( <RARE_TOKEN> . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> type of method " + method + " is not <RARE_TOKEN> , null ) ; </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) && ! <RARE_TOKEN> </a> 0
<a> . contains ( <RARE_TOKEN> . getQualifiedSourceName ( ) ) ) { </a> 0
<a> if ( <RARE_TOKEN> ( <RARE_TOKEN> . getQualifiedSourceName ( ) ) ) { </a> 0
<a> <RARE_TOKEN> . add ( ( JExportableClassType ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( method ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . getQualifiedSourceName ( ) . equals ( <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> = method . <RARE_TOKEN> ( ) . length == 0 ; </a> 0
<a> sw . print ( </a> 0
<a> <RARE_TOKEN> " + method . <RARE_TOKEN> ( ) . getQualifiedSourceName ( ) ) ; </a> 0
<a> sw . print ( " " + method . getName ( ) + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( method , - 1 , true ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . print ( ( <RARE_TOKEN> ? "" : <RARE_TOKEN> " ) + <RARE_TOKEN> + ( <RARE_TOKEN> ? "" : <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( method , false ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( ) ; </a> 0
<a> sw . print ( <RARE_TOKEN> native " + ( <RARE_TOKEN> ? <RARE_TOKEN> </a> 0
<a> : method . <RARE_TOKEN> ( ) . getQualifiedSourceName ( ) ) ) ; </a> 0
<a> sw . print ( " <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> + " <RARE_TOKEN> ) ; </a> 0
<a> if ( method . <RARE_TOKEN> ( ) . length > 0 ) { </a> 0
<a> sw . print ( ", " ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( method , - 1 , true ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . print ( ( ! <RARE_TOKEN> ? <RARE_TOKEN> <RARE_TOKEN> " : "" ) + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( method , true ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> instanceof <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) && ! <RARE_TOKEN> && ! <RARE_TOKEN> ) { </a> 0
<a> sw . println ( <RARE_TOKEN> != null && result != <RARE_TOKEN> " </a> 0
<a> + <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> <RARE_TOKEN> == <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> sw . println ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( String <RARE_TOKEN> , boolean <RARE_TOKEN> ) </a> 0
<a> throws <RARE_TOKEN> { </a> 0
<a> JExportableClassType requestedType = <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( requestedType == null ) { </a> 0
<a> logger . log ( <RARE_TOKEN> . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> , null ) ; </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( requestedType ) ; </a> 0
<a> <RARE_TOKEN> . add ( requestedType . getQualifiedSourceName ( ) ) ; </a> 0
<a> String <RARE_TOKEN> = requestedType . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = requestedType . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = requestedType . <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( requestedType . getType ( ) ) </a> 0
<a> ? <RARE_TOKEN> : null ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> sw = <RARE_TOKEN> ( logger , ctx , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , requestedType . getQualifiedSourceName ( ) ) ; </a> 0
<a> } else { </a> 0
<a> sw = <RARE_TOKEN> ( logger , ctx , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( sw == null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( requestedType ) ; </a> 0
<a> } else if ( requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , requestedType ) ; </a> 0
<a> } </a> 0
<a> if ( requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( requestedType ) ; </a> 0
<a> <RARE_TOKEN> ( requestedType ) ; </a> 0
<a> } </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> sw . println ( <RARE_TOKEN> " + <RARE_TOKEN> + <RARE_TOKEN> { <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . println ( <RARE_TOKEN> native void <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( requestedType ) ; </a> 0
<a> <RARE_TOKEN> ( requestedType ) ; </a> 0
<a> <RARE_TOKEN> ( requestedType ) ; </a> 0
<a> <RARE_TOKEN> ( requestedType ) ; </a> 0
<a> <RARE_TOKEN> ( requestedType ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( ) ; </a> 0
<a> if ( requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( requestedType ) ; </a> 0
<a> } </a> 0
<a> if ( requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( requestedType ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( requestedType , <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> void <RARE_TOKEN> {}" ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> sw . <RARE_TOKEN> ( logger ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( </a> 0
<a> JExportableClassType requestedType ) throws <RARE_TOKEN> { </a> 0
<a> sw . println ( <RARE_TOKEN> static native boolean <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . print ( <RARE_TOKEN> " ) ; </a> 0
<a> for ( <RARE_TOKEN> field : requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = field . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> logger . log ( <RARE_TOKEN> . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> type field " + field . <RARE_TOKEN> ( ) + " for class " </a> 0
<a> + requestedType . getQualifiedSourceName ( ) </a> 0
<a> + " is not <RARE_TOKEN> ) ; </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> instanceof JExportableClassType ) { </a> 0
<a> JExportableClassType <RARE_TOKEN> = ( JExportableClassType ) field </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) && <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . print ( <RARE_TOKEN> + field . getName ( ) + " && <RARE_TOKEN> </a> 0
<a> + ( ( JExportableClassType ) <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( ) </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + field . getName ( ) + <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . print ( <RARE_TOKEN> + field . getName ( ) + " && <RARE_TOKEN> + field . getName ( ) </a> 0
<a> + <RARE_TOKEN> && " ) ; </a> 0
<a> } else if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . print ( </a> 0
<a> <RARE_TOKEN> + field . getName ( ) + <RARE_TOKEN> == <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) </a> 0
<a> + <RARE_TOKEN> && " ) ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> sw . print ( </a> 0
<a> <RARE_TOKEN> + field . getName ( ) + <RARE_TOKEN> == <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) </a> 0
<a> + <RARE_TOKEN> && " ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( </a> 0
<a> JExportableClassType requestedType ) { </a> 0
<a> sw . println ( <RARE_TOKEN> void <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( <RARE_TOKEN> field : requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . println ( <RARE_TOKEN> + field . <RARE_TOKEN> ( ) + <RARE_TOKEN> + field . <RARE_TOKEN> ( ) </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + field . <RARE_TOKEN> ( ) + <RARE_TOKEN> <RARE_TOKEN> + field . getName ( ) </a> 0
<a> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String <RARE_TOKEN> , </a> 0
<a> JExportableClassType requestedType ) { </a> 0
<a> sw . println ( <RARE_TOKEN> " + <RARE_TOKEN> . <RARE_TOKEN> + " <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( ) ; </a> 0
<a> sw . println ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> + " <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> = <RARE_TOKEN> ) ; </a> 0
<a> if ( requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( JExportableClassType requestedType ) { </a> 0
<a> for ( <RARE_TOKEN> field : requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( field ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> field ) { </a> 0
<a> sw . println ( <RARE_TOKEN> " + field . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( field . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . println ( <RARE_TOKEN> + field . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( </a> 0
<a> <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> + field . getName ( ) + <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> sw . println ( field . <RARE_TOKEN> ( ) + " <RARE_TOKEN> = <RARE_TOKEN> + field . <RARE_TOKEN> ( ) </a> 0
<a> + <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( </a> 0
<a> <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> + field . getName ( ) + <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> sw . println ( <RARE_TOKEN> " + <RARE_TOKEN> + <RARE_TOKEN> { <RARE_TOKEN> } " ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> void <RARE_TOKEN> { " ) ; </a> 0
<a> for ( JClassType type : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> + type . getQualifiedSourceName ( ) + <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( JExportableClassType requestedType ) { </a> 0
<a> sw . print ( </a> 0
<a> <RARE_TOKEN> </a> 0
<a> + </a> 0
<a> <RARE_TOKEN> + requestedType . getQualifiedSourceName ( ) + <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> + requestedType . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( </a> 0
<a> JExportableClassType requestedType ) { </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> = requestedType </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( JExportableClassType requestedType ) </a> 0
<a> throws <RARE_TOKEN> { </a> 0
<a> HashMap < String , <RARE_TOKEN> > <RARE_TOKEN> = <RARE_TOKEN> ( </a> 0
<a> requestedType , false ) ; </a> 0
<a> HashMap < String , <RARE_TOKEN> > <RARE_TOKEN> = <RARE_TOKEN> ( </a> 0
<a> requestedType , true ) ; </a> 0
<a> HashSet < String > <RARE_TOKEN> = new HashSet < String > ( ) ; </a> 0
<a> HashSet < String > <RARE_TOKEN> = new HashSet < String > ( ) ; </a> 0
<a> for ( <RARE_TOKEN> method : requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( method . <RARE_TOKEN> ( ) ? ! <RARE_TOKEN> . contains ( method . getName ( ) ) </a> 0
<a> : ! <RARE_TOKEN> . contains ( method . getName ( ) ) ) { </a> 0
<a> <RARE_TOKEN> ( method , </a> 0
<a> method . <RARE_TOKEN> ( ) ? <RARE_TOKEN> : <RARE_TOKEN> ) ; </a> 0
<a> if ( method . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . add ( method . getName ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . add ( method . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( requestedType . getType ( ) . getQualifiedSourceName ( ) ) ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( requestedType , <RARE_TOKEN> , false ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( requestedType , <RARE_TOKEN> , true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( JExportableClassType requestedType , </a> 0
<a> HashMap < String , <RARE_TOKEN> > <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> sw . print ( <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + requestedType . getQualifiedSourceName ( ) + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) + ", " + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private HashMap < String , <RARE_TOKEN> > <RARE_TOKEN> ( </a> 0
<a> JExportableClassType requestedType , boolean <RARE_TOKEN> ) </a> 0
<a> throws <RARE_TOKEN> { </a> 0
<a> HashMap < String , <RARE_TOKEN> > <RARE_TOKEN> </a> 0
<a> = new HashMap < String , <RARE_TOKEN> > ( ) ; </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( <RARE_TOKEN> && ! <RARE_TOKEN> . <RARE_TOKEN> ( ) || ! <RARE_TOKEN> && <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> method <RARE_TOKEN> " + <RARE_TOKEN> . <RARE_TOKEN> ( ) </a> 0
<a> + " <RARE_TOKEN> <RARE_TOKEN> in <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( JExportableClassType requestedType ) </a> 0
<a> throws <RARE_TOKEN> { </a> 0
<a> sw . println ( <RARE_TOKEN> + requestedType . <RARE_TOKEN> ( ) + <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> + requestedType . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . print ( <RARE_TOKEN> + requestedType . <RARE_TOKEN> ( ) </a> 0
<a> + " = <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> == 1 && <RARE_TOKEN> != null && " </a> 0
<a> + <RARE_TOKEN> == " + <RARE_TOKEN> </a> 0
<a> + requestedType . getQualifiedSourceName ( ) + <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( " <RARE_TOKEN> = <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> = requestedType </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> HashMap < Integer , <RARE_TOKEN> > <RARE_TOKEN> </a> 0
<a> = new HashMap < Integer , <RARE_TOKEN> > ( ) ; </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . length ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> logger . log ( <RARE_TOKEN> . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> + " <RARE_TOKEN> " + <RARE_TOKEN> + " " </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> of " </a> 0
<a> + <RARE_TOKEN> , null ) ; </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> <RARE_TOKEN> == " + <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . print ( <RARE_TOKEN> = <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> JExportableClassType <RARE_TOKEN> = requestedType </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . <RARE_TOKEN> ( ) && ! <RARE_TOKEN> </a> 0
<a> . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( <RARE_TOKEN> ( <RARE_TOKEN> . getQualifiedSourceName ( ) ) ) { </a> 0
<a> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . print ( <RARE_TOKEN> <RARE_TOKEN> + requestedType . <RARE_TOKEN> ( ) </a> 0
<a> + <RARE_TOKEN> = " ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> == null ? <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> : <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( </a> 0
<a> <RARE_TOKEN> in <RARE_TOKEN> { <RARE_TOKEN> + requestedType . <RARE_TOKEN> ( ) </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> JExportableClassType <RARE_TOKEN> = ( JExportableClassType ) <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getQualifiedSourceName ( ) ; </a> 0
<a> sw . print ( <RARE_TOKEN> static " + <RARE_TOKEN> + " " </a> 0
<a> + <RARE_TOKEN> . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , - 1 ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . print ( <RARE_TOKEN> new " + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> method ) { </a> 0
<a> <RARE_TOKEN> params [ ] = method . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < params . length ; i ++ ) { </a> 0
<a> sw . print ( </a> 0
<a> <RARE_TOKEN> + params [ i ] . <RARE_TOKEN> ( <RARE_TOKEN> + i ) </a> 0
<a> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> method , </a> 0
<a> boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> params [ ] = method . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < params . length ; i ++ ) { </a> 0
<a> sw . print ( params [ i ] . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> ? <RARE_TOKEN> + i + <RARE_TOKEN> : <RARE_TOKEN> + i ) ) ; </a> 0
<a> if ( i < params . length - 1 ) { </a> 0
<a> sw . print ( ", " ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> method , boolean wrap ) { </a> 0
<a> <RARE_TOKEN> params [ ] = method . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < params . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = params [ i ] . <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> != null && <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> instanceof <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> && <RARE_TOKEN> ? ( <RARE_TOKEN> </a> 0
<a> + ( ( <RARE_TOKEN> ) <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ) : "" ; </a> 0
<a> if ( wrap && <RARE_TOKEN> ) { </a> 0
<a> sw . print ( <RARE_TOKEN> </a> 0
<a> + ( <RARE_TOKEN> ? <RARE_TOKEN> </a> 0
<a> : <RARE_TOKEN> ) + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . print ( <RARE_TOKEN> + i ) ; </a> 0
<a> if ( wrap && <RARE_TOKEN> ) { </a> 0
<a> sw . print ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( i < params . length - 1 ) { </a> 0
<a> sw . print ( ", " ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> method , int <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> params [ ] = method . <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> || <RARE_TOKEN> < 0 ? params . length : <RARE_TOKEN> ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; </a> 0
<a> i ++ ) { </a> 0
<a> sw . print ( </a> 0
<a> ( <RARE_TOKEN> ? params [ i ] . <RARE_TOKEN> ( ) : "" ) + " " + <RARE_TOKEN> + i ) ; </a> 0
<a> if ( i < <RARE_TOKEN> - 1 ) { </a> 0
<a> sw . print ( ", " ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> method , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( method , <RARE_TOKEN> , true ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> method , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( method , <RARE_TOKEN> , false ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( JExportableClassType requestedType ) </a> 0
<a> throws <RARE_TOKEN> { </a> 0
<a> for ( <RARE_TOKEN> field : requestedType . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . print ( <RARE_TOKEN> + field . <RARE_TOKEN> ( ) + " = " ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> + field . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> method , </a> 0
<a> HashMap < String , <RARE_TOKEN> > <RARE_TOKEN> ) </a> 0
<a> throws <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = method . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> logger . log ( <RARE_TOKEN> . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> type of method " + method . toString ( ) + " is not <RARE_TOKEN> , </a> 0
<a> null ) ; </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = method . <RARE_TOKEN> ( ) . length ; </a> 0
<a> String name = method . <RARE_TOKEN> ( ) ; </a> 0
<a> String key = name + <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . <RARE_TOKEN> ( ) && ! <RARE_TOKEN> </a> 0
<a> . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( <RARE_TOKEN> ( <RARE_TOKEN> . getQualifiedSourceName ( ) ) ) { </a> 0
<a> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( ( JExportableClassType ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( method ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> != null ? <RARE_TOKEN> . <RARE_TOKEN> ( ) </a> 0
<a> : null ; </a> 0
<a> if ( method . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . print ( <RARE_TOKEN> + method . <RARE_TOKEN> ( ) + " = " ) ; </a> 0
<a> } else { </a> 0
<a> sw . print ( <RARE_TOKEN> + method . <RARE_TOKEN> ( ) + <RARE_TOKEN> " ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> sw . print ( </a> 0
<a> <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . print ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( method . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( method , <RARE_TOKEN> . <RARE_TOKEN> ( ) ? <RARE_TOKEN> . <RARE_TOKEN> ( ) : - 1 ) ; </a> 0
<a> sw . print ( <RARE_TOKEN> { " ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . getQualifiedSourceName ( ) . equals ( <RARE_TOKEN> ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . print ( ( <RARE_TOKEN> ? "" : <RARE_TOKEN> <RARE_TOKEN> ) </a> 0
<a> + ( method . <RARE_TOKEN> ( ) ? <RARE_TOKEN> : <RARE_TOKEN> ) </a> 0
<a> + method . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( method , false ) ; </a> 0
<a> sw . print ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> sw . print ( ( <RARE_TOKEN> ? "" </a> 0
<a> : <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> + <RARE_TOKEN> + method </a> 0
<a> . <RARE_TOKEN> ( ) . getQualifiedSourceName ( ) ) + <RARE_TOKEN> </a> 0
<a> + method . <RARE_TOKEN> ( ) + <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> + method . <RARE_TOKEN> ( ) + <RARE_TOKEN> </a> 0
<a> + ( method . <RARE_TOKEN> ( ) ? <RARE_TOKEN> : <RARE_TOKEN> ) </a> 0
<a> + ", <RARE_TOKEN> ) ; </a> 0
<a> sw . print ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) || ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> sw . print ( <RARE_TOKEN> ? "" : <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> instanceof <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ? ( ( <RARE_TOKEN> ) <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( ) : "" ; </a> 0
<a> sw . print ( ( <RARE_TOKEN> ? "" : <RARE_TOKEN> " ) </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + ( <RARE_TOKEN> ? <RARE_TOKEN> </a> 0
<a> : <RARE_TOKEN> ) + <RARE_TOKEN> </a> 0
<a> ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . print ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> sw . print ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> method ) </a> 0
<a> throws <RARE_TOKEN> { </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : method . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . <RARE_TOKEN> ( ) && ! <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( <RARE_TOKEN> ( <RARE_TOKEN> . getQualifiedSourceName ( ) ) ) { </a> 0
<a> <RARE_TOKEN> . add ( ( JExportableClassType ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( String <RARE_TOKEN> ) </a> 0
<a> throws <RARE_TOKEN> { </a> 0
<a> if ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( ( <RARE_TOKEN> ) <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> . getQualifiedSourceName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> exporter = new <RARE_TOKEN> ( logger , ctx , <RARE_TOKEN> ) ; </a> 0
<a> exporter . <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( JExportableClassType <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> [ ] = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = "" ; </a> 0
<a> for ( String <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . length ( ) > 0 ? <RARE_TOKEN> </a> 0
<a> . substring ( 0 , <RARE_TOKEN> . length ( ) - 1 ) : <RARE_TOKEN> ; </a> 0
<a> sw . println ( </a> 0
<a> <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( JExportableClassType requestedType , </a> 0
<a> ArrayList < JExportableClassType > <RARE_TOKEN> ) { </a> 0
<a> sw . println ( <RARE_TOKEN> static boolean <RARE_TOKEN> ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> void <RARE_TOKEN> { " ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( JExportableClassType <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> if ( requestedType . getQualifiedSourceName ( ) </a> 0
<a> . equals ( <RARE_TOKEN> . getQualifiedSourceName ( ) ) </a> 0
<a> || <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getQualifiedSourceName ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ++ ; </a> 0
<a> sw . println ( <RARE_TOKEN> . <RARE_TOKEN> + " " + <RARE_TOKEN> + " = <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> . <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> sw . <RARE_TOKEN> ( ) ; </a> 0
<a> sw . println ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> logger , </a> 0
<a> <RARE_TOKEN> context , String <RARE_TOKEN> , String <RARE_TOKEN> , </a> 0
<a> String <RARE_TOKEN> , String ... <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = context . <RARE_TOKEN> ( logger , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> for ( String <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( context , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . JClassType ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> public static final String <RARE_TOKEN> </a> 0
<a> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> </a> 0
<a> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> </a> 0
<a> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private JClassType <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> field ) { </a> 0
<a> return field . <RARE_TOKEN> ( ) && field . <RARE_TOKEN> ( ) && field . <RARE_TOKEN> ( ) && ( </a> 0
<a> <RARE_TOKEN> ( field . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ) || ( </a> 0
<a> <RARE_TOKEN> ( field . <RARE_TOKEN> ( ) ) && ! <RARE_TOKEN> ( </a> 0
<a> field . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ) ) ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( JClassType type ) { </a> 0
<a> return <RARE_TOKEN> ( type . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ) || ( </a> 0
<a> type . <RARE_TOKEN> ( ) != null && <RARE_TOKEN> ( </a> 0
<a> type . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ) ) ; </a> 0
<a> } </a> 0
<a> public static boolean <RARE_TOKEN> ( <RARE_TOKEN> annotation ) { </a> 0
<a> return annotation != null ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> method ) { </a> 0
<a> if ( method instanceof <RARE_TOKEN> ) { </a> 0
<a> if ( method . <RARE_TOKEN> ( ) . length == 0 && method . <RARE_TOKEN> ( ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return ( <RARE_TOKEN> ( method . <RARE_TOKEN> ( ) ) && method . <RARE_TOKEN> ( ) </a> 0
<a> && ! <RARE_TOKEN> ( method . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ) ) </a> 0
<a> || ( <RARE_TOKEN> ( method . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ) ) ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( <RARE_TOKEN> annotation ) { </a> 0
<a> return annotation != null ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( <RARE_TOKEN> annotation ) { </a> 0
<a> return annotation != null ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> log ; </a> 0
<a> private JClassType <RARE_TOKEN> = null ; </a> 0
<a> private JClassType <RARE_TOKEN> = null ; </a> 0
<a> private JClassType <RARE_TOKEN> = null ; </a> 0
<a> private JClassType <RARE_TOKEN> ; </a> 0
<a> private Map < String , <RARE_TOKEN> > <RARE_TOKEN> </a> 0
<a> = new HashMap < String , <RARE_TOKEN> > ( ) ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> log ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . log = log ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assert <RARE_TOKEN> != null ; </a> 0
<a> assert <RARE_TOKEN> != null ; </a> 0
<a> assert <RARE_TOKEN> != null ; </a> 0
<a> assert <RARE_TOKEN> != null ; </a> 0
<a> for ( JClassType t : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( t . <RARE_TOKEN> ( <RARE_TOKEN> ) && ! t . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> JClassType <RARE_TOKEN> = <RARE_TOKEN> ( t ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . getQualifiedSourceName ( ) , </a> 0
<a> new <RARE_TOKEN> ( this , t ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public JExportableClassType <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> JClassType requestedType = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( requestedType != null ) { </a> 0
<a> if ( requestedType . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> return new <RARE_TOKEN> ( this , requestedType ) ; </a> 0
<a> } else if ( requestedType . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> return new JExportableClassType ( this , requestedType ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> type = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> JClassType <RARE_TOKEN> = type != null ? type . <RARE_TOKEN> ( ) : null ; </a> 0
<a> if ( type . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> return new <RARE_TOKEN> ( this , type . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else if ( type . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> return new <RARE_TOKEN> ( this , type . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> return new <RARE_TOKEN> ( this , type . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> != null && ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> || <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) || <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ) { </a> 0
<a> return new JExportableClassType ( this , type . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public JExportableClassType <RARE_TOKEN> ( </a> 0
<a> JClassType type ) { </a> 0
<a> if ( type == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> JExportableClassType <RARE_TOKEN> = <RARE_TOKEN> ( </a> 0
<a> type . getQualifiedSourceName ( ) ) ; </a> 0
<a> return <RARE_TOKEN> != null && <RARE_TOKEN> . <RARE_TOKEN> ( ) ? <RARE_TOKEN> </a> 0
<a> : <RARE_TOKEN> ( type . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public JClassType <RARE_TOKEN> ( JClassType requestedType ) { </a> 0
<a> JClassType [ ] <RARE_TOKEN> = requestedType . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( JClassType i : <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ( i ) ) { </a> 0
<a> return i . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) [ 0 ] ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( JExportableClassType <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . getType ( ) . <RARE_TOKEN> ( ) != null ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> type = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( type == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> JClassType <RARE_TOKEN> = type . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . length == 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( JClassType i ) { </a> 0
<a> return i . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( JExportableClassType type ) { </a> 0
<a> return type . getType ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( JExportableClassType type ) { </a> 0
<a> return type . getType ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> type ) { </a> 0
<a> return type . <RARE_TOKEN> ( ) != null && type . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> type ) { </a> 0
<a> return type . <RARE_TOKEN> ( ) != null && type . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public List < JClassType > <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < JClassType > <RARE_TOKEN> = new ArrayList < JClassType > ( ) ; </a> 0
<a> for ( JClassType t : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( t . equals ( <RARE_TOKEN> ) || t . equals ( <RARE_TOKEN> ) || t </a> 0
<a> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> if ( t . <RARE_TOKEN> ( <RARE_TOKEN> ) || t </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( t . <RARE_TOKEN> ( ) && t . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . add ( t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( JClassType type ) { </a> 0
<a> return false && type . <RARE_TOKEN> ( <RARE_TOKEN> . class ) != null ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( JClassType type ) { </a> 0
<a> if ( type . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else if ( type . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> + type . getQualifiedSourceName ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public String <RARE_TOKEN> ( <RARE_TOKEN> logger , <RARE_TOKEN> ctx , </a> 0
<a> String <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( logger , ctx ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public String <RARE_TOKEN> ( <RARE_TOKEN> logger , <RARE_TOKEN> ctx , </a> 0
<a> String <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( logger , ctx ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . JClassType ; </a> 0
<a> public class <RARE_TOKEN> extends JExportableClassType { </a> 0
<a> private JClassType <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> JClassType requestedType ) { </a> 0
<a> super ( <RARE_TOKEN> , requestedType ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( requestedType ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public JClassType getType ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends JExportableClassType </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> array ) { </a> 0
<a> super ( <RARE_TOKEN> , array ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . array = array ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> array ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public String getQualifiedSourceName ( ) { </a> 0
<a> return array . getQualifiedSourceName ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> type = array . <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> + <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> </a> 0
<a> + type . <RARE_TOKEN> ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( array . <RARE_TOKEN> ( ) . getQualifiedSourceName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . JClassType ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> public class JExportableClassType implements <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private JClassType type ; </a> 0
<a> public JExportableClassType ( <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> JClassType type ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . type = type ; </a> 0
<a> } </a> 0
<a> public boolean equals ( Object o ) { </a> 0
<a> if ( this == o ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( o == null || getClass ( ) != o . getClass ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> JExportableClassType that = ( JExportableClassType ) o ; </a> 0
<a> return getQualifiedSourceName ( ) . equals ( that . getQualifiedSourceName ( ) ) ; </a> 0
<a> } </a> 0
<a> public String [ ] <RARE_TOKEN> ( ) { </a> 0
<a> String [ ] <RARE_TOKEN> = type . getName ( ) . split ( <RARE_TOKEN> ) ; </a> 0
<a> String [ ] <RARE_TOKEN> = new String [ <RARE_TOKEN> . length - 1 ] ; </a> 0
<a> if ( <RARE_TOKEN> . length > 1 ) { </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , <RARE_TOKEN> , 0 , <RARE_TOKEN> . length ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < <RARE_TOKEN> > <RARE_TOKEN> </a> 0
<a> = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> JClassType <RARE_TOKEN> = type ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( type ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( type ) ; </a> 0
<a> } </a> 0
<a> for ( <RARE_TOKEN> method : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( method . <RARE_TOKEN> ( ) == null ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( method ) ) { </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> ( this , method ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> [ 0 ] ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < <RARE_TOKEN> > <RARE_TOKEN> </a> 0
<a> = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> for ( <RARE_TOKEN> field : type . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( field ) ) { </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> ( this , field ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> [ 0 ] ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < <RARE_TOKEN> > <RARE_TOKEN> </a> 0
<a> = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> for ( <RARE_TOKEN> method : type . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( method . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( method ) ) { </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> ( this , method ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> [ 0 ] ) ; </a> 0
<a> } </a> 0
<a> public JExportableClassType <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( type . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return type . <RARE_TOKEN> ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( getType ( ) ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) + <RARE_TOKEN> + type . getName ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = type . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . value ( ) ; </a> 0
<a> } else if ( type . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> JExportableClassType <RARE_TOKEN> = <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( </a> 0
<a> type . <RARE_TOKEN> ( ) . getQualifiedSourceName ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return type . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return type . <RARE_TOKEN> ( ) . getName ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = "" ; </a> 0
<a> boolean <RARE_TOKEN> = true ; </a> 0
<a> for ( String <RARE_TOKEN> : type . <RARE_TOKEN> ( ) . getName ( ) . split ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . substring ( 0 , <RARE_TOKEN> . length ( ) - 1 ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) + <RARE_TOKEN> + <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public String getQualifiedSourceName ( ) { </a> 0
<a> return getType ( ) . getQualifiedSourceName ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return new <RARE_TOKEN> [ 0 ] ; </a> 0
<a> } else { </a> 0
<a> ArrayList < <RARE_TOKEN> > fields </a> 0
<a> = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> for ( <RARE_TOKEN> method : type . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( method . getName ( ) . startsWith ( <RARE_TOKEN> ) </a> 0
<a> && <RARE_TOKEN> . <RARE_TOKEN> ( method . getName ( ) . charAt ( 3 ) ) </a> 0
<a> && method . <RARE_TOKEN> ( ) . length == 1 </a> 0
<a> || method . <RARE_TOKEN> ( <RARE_TOKEN> . class ) != null ) { </a> 0
<a> fields . add ( new <RARE_TOKEN> ( this , method ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return fields . <RARE_TOKEN> ( new <RARE_TOKEN> [ 0 ] ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public JClassType getType ( ) { </a> 0
<a> return type ; </a> 0
<a> } </a> 0
<a> public JClassType <RARE_TOKEN> ( ) { </a> 0
<a> return type ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> + <RARE_TOKEN> . class . getName ( ) </a> 0
<a> + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return getQualifiedSourceName ( ) . hashCode ( ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return type . <RARE_TOKEN> ( ) != null ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this . getType ( ) ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this ) </a> 0
<a> || <RARE_TOKEN> . <RARE_TOKEN> ( this ) || <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ! <RARE_TOKEN> ( ) && ! <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return type . <RARE_TOKEN> ( ) == null && ! type . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( JExportableClassType <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> method ) { </a> 0
<a> super ( <RARE_TOKEN> , method ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getQualifiedSourceName ( ) + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> ( ) + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ ] params = method . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < params . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> += params [ i ] . getType ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> ( ) + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ ] params = method . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < params . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> += params [ i ] . getType ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private JExportableClassType <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> field ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( JExportableClassType <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> field ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . field = field ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = field . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . value ( ) . length ( ) > 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . value ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = field . getName ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return field . <RARE_TOKEN> ( ) . getQualifiedSourceName ( ) + <RARE_TOKEN> + field </a> 0
<a> . getName ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> protected JExportableClassType <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> method ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( JExportableClassType <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> method ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . method = method ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = method . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . value ( ) . length ( ) > 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . value ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = method . getName ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = ( ( <RARE_TOKEN> ) method ) . <RARE_TOKEN> ( ) </a> 0
<a> . getQualifiedSourceName ( ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> [ ] params = method . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> = new <RARE_TOKEN> [ params . length ] ; </a> 0
<a> int i = 0 ; </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : params ) { </a> 0
<a> <RARE_TOKEN> [ i ++ ] = new <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public JExportableClassType <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getQualifiedSourceName ( ) + <RARE_TOKEN> </a> 0
<a> + method . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ ] params = method . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < params . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> += params [ i ] . getType ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( method instanceof <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } else { </a> 0
<a> return ( ( <RARE_TOKEN> ) method ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public String toString ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getQualifiedSourceName ( ) + <RARE_TOKEN> </a> 0
<a> + method . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ ] params = <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < params . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> += params [ i ] ; </a> 0
<a> if ( i < params . length - 1 ) { </a> 0
<a> <RARE_TOKEN> += ", " ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String getName ( ) { </a> 0
<a> return method . getName ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private JExportableClassType <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . getType ( ) . getQualifiedSourceName ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getType ( ) . getQualifiedSourceName ( ) ; </a> 0
<a> <RARE_TOKEN> type = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( type != null && type . <RARE_TOKEN> ( ) ) { </a> 0
<a> JExportableClassType <RARE_TOKEN> = ( JExportableClassType ) type ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( type . getQualifiedSourceName ( ) ) ) { </a> 0
<a> String value = <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> == <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> . <RARE_TOKEN> ( ) + " ? " + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> : " + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> ? " + <RARE_TOKEN> + " : <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> . <RARE_TOKEN> ( ) + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> return value ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object o ) { </a> 0
<a> if ( this == o ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( o == null || getClass ( ) != o . getClass ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> that = ( <RARE_TOKEN> ) o ; </a> 0
<a> return <RARE_TOKEN> ( ) . equals ( that . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> . getType ( ) . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> . getType ( ) . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getType ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> . getType ( ) ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> . getType ( ) ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> + <RARE_TOKEN> . getType ( ) . getQualifiedSourceName ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return <RARE_TOKEN> != null ? <RARE_TOKEN> ( ) . hashCode ( ) : 0 ; </a> 0
<a> } </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> . getType ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> public String getQualifiedSourceName ( ) { </a> 0
<a> return <RARE_TOKEN> . getQualifiedSourceName ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ? <RARE_TOKEN> </a> 0
<a> : <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> String getQualifiedSourceName ( ) ; </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . timepedia . exporter . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . ext . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . timepedia . exporter . client . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private JExportableClassType <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( JExportableClassType <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . getQualifiedSourceName ( ) + " " </a> 0
<a> + <RARE_TOKEN> . getName ( ) + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> . <RARE_TOKEN> ( ) [ 0 ] . getType ( ) . getQualifiedSourceName ( ) </a> 0
<a> + " <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . getName ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . getQualifiedSourceName ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) [ 0 ] . getType ( ) . <RARE_TOKEN> ( ) != null ? </a> 0
<a> <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) [ 0 ] . getType ( ) . <RARE_TOKEN> ( ) != null ? </a> 0
<a> <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String getName ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> . value ( ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> private String <RARE_TOKEN> ( String name ) { </a> 0
<a> String <RARE_TOKEN> = name . startsWith ( <RARE_TOKEN> ) ? name . substring ( 3 ) : name ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . charAt ( 0 ) ) + <RARE_TOKEN> . substring ( 1 ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> type = <RARE_TOKEN> . <RARE_TOKEN> ( ) [ 0 ] . getType ( ) </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> return type != null ? type . getQualifiedSourceName ( ) : <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) [ 0 ] . getType ( ) . getQualifiedSourceName ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . concurrent . CountDownLatch ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final CountDownLatch <RARE_TOKEN> = new CountDownLatch ( 1 ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> . class . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id ) { </a> 0
<a> super ( id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> support <RARE_TOKEN> group name {}" , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final <RARE_TOKEN> message ) { </a> 0
<a> final Object msg = message . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( msg != null && <RARE_TOKEN> . class . isAssignableFrom ( msg . getClass ( ) ) ) { </a> 0
<a> <RARE_TOKEN> b = <RARE_TOKEN> . class . cast ( msg ) ; </a> 0
<a> if ( b . <RARE_TOKEN> ( ) . equalsIgnoreCase ( <RARE_TOKEN> ( ) ) ) { </a> 0
<a> <RARE_TOKEN> ( b . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . connect ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( "failed to connect to <RARE_TOKEN> <RARE_TOKEN> , t ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Object message ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . await ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( null , null , new <RARE_TOKEN> ( <RARE_TOKEN> ( ) , message ) ) ) ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> logger . error ( "failed to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized void destroy ( ) { </a> 0
<a> super . destroy ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . isOpen ( ) ) return ; </a> 0
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> implements Serializable { </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private final Object message ; </a> 0
<a> public <RARE_TOKEN> ( String <RARE_TOKEN> , Object message ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . message = message ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Object getMessage ( ) { </a> 0
<a> return message ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 1
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . <RARE_TOKEN> . ChannelException ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 1
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> private Broadcaster bc ; </a> 0
<a> private final ConcurrentLinkedQueue < Object > <RARE_TOKEN> = new ConcurrentLinkedQueue < Object > ( ) ; </a> 1
<a> public <RARE_TOKEN> ( ) throws <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> this ( BroadcasterFactory . <RARE_TOKEN> ( ) . get ( <RARE_TOKEN> . class , <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( Broadcaster bc ) { </a> 1
<a> this . bc = bc ; </a> 1
<a> } </a> 0
<a> public void init ( ) { </a> 1
<a> try { </a> 1
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> support <RARE_TOKEN> group name {}" , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> <RARE_TOKEN> . connect ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 1
<a> logger . warn ( "failed to connect to <RARE_TOKEN> , t ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> public void destroy ( ) { </a> 0
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final <RARE_TOKEN> message ) { </a> 1
<a> final Object msg = message . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( message . <RARE_TOKEN> ( ) != <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 1
<a> if ( msg != null ) { </a> 1
<a> if ( msg != null && <RARE_TOKEN> . <RARE_TOKEN> . class . isAssignableFrom ( msg . getClass ( ) ) ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( msg ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> b = <RARE_TOKEN> . <RARE_TOKEN> . class . cast ( msg ) ; </a> 1
<a> if ( b . <RARE_TOKEN> ( ) . equalsIgnoreCase ( bc . <RARE_TOKEN> ( ) ) ) { </a> 1
<a> bc . broadcast ( b . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<a> public BroadcastAction filter ( Object <RARE_TOKEN> , Object message ) { </a> 0
<a> if ( ! <RARE_TOKEN> . remove ( message ) ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( null , null , new <RARE_TOKEN> . <RARE_TOKEN> ( bc . <RARE_TOKEN> ( ) , message ) ) ) ; </a> 1
<a> } catch ( ChannelException e ) { </a> 1
<a> logger . warn ( "failed to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> return new BroadcastAction ( message ) ; </a> 0
<a> } </a> 0
<a> public Broadcaster getBroadcaster ( ) { </a> 0
<a> return bc ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String name ) { </a> 1
<a> bc . <RARE_TOKEN> ( name ) ; </a> 1
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Broadcaster bc ) { </a> 1
<a> this . bc = bc ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . Session ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . Context ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private <RARE_TOKEN> connection ; </a> 0
<a> private Session session ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private Broadcaster bc = null ; </a> 0
<a> private final ConcurrentLinkedQueue < String > <RARE_TOKEN> = </a> 0
<a> new ConcurrentLinkedQueue < String > ( ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( null ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Broadcaster bc ) { </a> 0
<a> this ( bc , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Broadcaster bc , String <RARE_TOKEN> ) { </a> 0
<a> this . bc = bc ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void init ( ) { </a> 0
<a> try { </a> 0
<a> AtmosphereServlet . AtmosphereConfig config = bc . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( config != null ) { </a> 0
<a> if ( config . getInitParameter ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = config . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( config . getInitParameter ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = config . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( config . getInitParameter ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = config . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( config . getInitParameter ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = config . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> String id = bc . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( id . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> id = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> logger . info ( String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> Factory <RARE_TOKEN> , <RARE_TOKEN> + <RARE_TOKEN> ) ) ; </a> 0
<a> Context ctx = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) ctx . <RARE_TOKEN> ( <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> logger . info ( String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> topic = ( <RARE_TOKEN> ) ctx . <RARE_TOKEN> ( <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> connection = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> session = connection . <RARE_TOKEN> ( false , Session . <RARE_TOKEN> ) ; </a> 0
<a> logger . info ( String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , id ) ) ; </a> 0
<a> String <RARE_TOKEN> = String . format ( <RARE_TOKEN> = <RARE_TOKEN> , id ) ; </a> 0
<a> <RARE_TOKEN> = session . <RARE_TOKEN> ( topic , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> msg ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> String message = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( message != null && bc != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( message ) ; </a> 0
<a> bc . broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> logger . warn ( "" , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = session . <RARE_TOKEN> ( topic ) ; </a> 0
<a> connection . start ( ) ; </a> 0
<a> logger . info ( String . format ( <RARE_TOKEN> <RARE_TOKEN> for topic <RARE_TOKEN> <RARE_TOKEN> filter <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( Throwable ex ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void destroy ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public BroadcastAction filter ( Object <RARE_TOKEN> , Object o ) { </a> 0
<a> if ( o instanceof String ) { </a> 0
<a> String message = ( String ) o ; </a> 0
<a> if ( ! <RARE_TOKEN> . remove ( message ) ) { </a> 0
<a> try { </a> 0
<a> String id = bc . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( id . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> id = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = session . <RARE_TOKEN> ( message . toString ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , id ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> logger . warn ( "failed to <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return new BroadcastAction ( message ) ; </a> 0
<a> } else { </a> 0
<a> return new BroadcastAction ( o ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Broadcaster getBroadcaster ( ) { </a> 0
<a> return bc ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Broadcaster bc ) { </a> 0
<a> this . bc = bc ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . commons . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 1
<a> import java . net . URI ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private URI uri ; </a> 0
<a> private String <RARE_TOKEN> = null ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> . class . getSimpleName ( ) , URI . create ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id ) { </a> 0
<a> this ( id , URI . create ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( URI uri ) { </a> 0
<a> this ( <RARE_TOKEN> . class . getSimpleName ( ) , uri ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id , URI uri ) { </a> 0
<a> super ( id ) ; </a> 0
<a> this . uri = uri ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void start ( ) { </a> 0
<a> super . start ( ) ; </a> 0
<a> } </a> 0
<a> public synchronized void <RARE_TOKEN> ( ) { </a> 0
<a> if ( uri == null ) return ; </a> 0
<a> if ( config != null ) { </a> 0
<a> if ( config . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = config . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( config . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) != null ) { </a> 0
<a> uri = URI . create ( config . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( config . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = Boolean . <RARE_TOKEN> ( config . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> connection <RARE_TOKEN> {}" , getClass ( ) . getName ( ) , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> if ( config . <RARE_TOKEN> ( ) . get ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) config . <RARE_TOKEN> ( ) . get ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , uri . <RARE_TOKEN> ( ) , uri . <RARE_TOKEN> ( ) ) ; </a> 0
<a> config . <RARE_TOKEN> ( ) . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ? <RARE_TOKEN> . getResource ( ) : new <RARE_TOKEN> ( uri . <RARE_TOKEN> ( ) , uri . <RARE_TOKEN> ( ) ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . connect ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> logger . error ( "failed to connect <RARE_TOKEN> , e ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . disconnect ( ) ; </a> 0
<a> } catch ( IOException <RARE_TOKEN> ) { </a> 0
<a> logger . error ( "failed to disconnect <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ? <RARE_TOKEN> . getResource ( ) : new <RARE_TOKEN> ( uri . <RARE_TOKEN> ( ) , uri . <RARE_TOKEN> ( ) ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . connect ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> logger . error ( "failed to connect <RARE_TOKEN> , e ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . disconnect ( ) ; </a> 0
<a> } catch ( IOException <RARE_TOKEN> ) { </a> 0
<a> logger . error ( "failed to disconnect <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized void <RARE_TOKEN> ( String id ) { </a> 0
<a> super . <RARE_TOKEN> ( id ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void destroy ( ) { </a> 0
<a> super . destroy ( ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> error <RARE_TOKEN> <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> {}" , <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> public void <RARE_TOKEN> ( String channel , String message ) { </a> 0
<a> <RARE_TOKEN> ( message ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String channel , int <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> {}" , channel ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String channel , int <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> {}" , channel ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , String channel , String message ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> {}" , <RARE_TOKEN> + " " + channel + " " + message ) ; </a> 1
<a> } </a> 0
<a> } , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Object message ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , message . toString ( ) ) ; </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> , e ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ? <RARE_TOKEN> . getResource ( ) : new <RARE_TOKEN> ( uri . <RARE_TOKEN> ( ) , uri . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) return ; </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . disconnect ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> logger . error ( "failed to disconnect <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) return ; </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . disconnect ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> logger . error ( "failed to disconnect <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 1
<a> import java . net . URI ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private Broadcaster bc ; </a> 0
<a> private final <RARE_TOKEN> listener = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> private final ConcurrentLinkedQueue < String > <RARE_TOKEN> = new ConcurrentLinkedQueue < String > ( ) ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private URI uri ; </a> 0
<a> private String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> . class . getSimpleName ( ) , URI . create ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id ) { </a> 0
<a> this ( id , URI . create ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( URI uri ) { </a> 0
<a> this ( <RARE_TOKEN> . class . getSimpleName ( ) , uri ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id , URI uri ) { </a> 0
<a> this . uri = uri ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Broadcaster bc , String <RARE_TOKEN> ) { </a> 0
<a> this . bc = bc ; </a> 0
<a> uri = URI . create ( <RARE_TOKEN> ) ; </a> 0
<a> if ( uri == null ) return ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( uri . <RARE_TOKEN> ( ) , uri . <RARE_TOKEN> ( ) ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . connect ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> logger . error ( "failed to connect to <RARE_TOKEN> " + <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( uri . <RARE_TOKEN> ( ) , uri . <RARE_TOKEN> ( ) ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . connect ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> logger . error ( "failed to connect to <RARE_TOKEN> " + <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> uri = URI . create ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void init ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> final Broadcaster broadcaster = bc ; </a> 0
<a> listener . <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> public void <RARE_TOKEN> ( String channel , String message ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( message ) ; </a> 0
<a> broadcaster . broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String channel , int <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> {}" , channel ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String channel , int <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> {}" , channel ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , String channel , String message ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , </a> 0
<a> new Object [ ] { <RARE_TOKEN> , channel , message } ) ; </a> 0
<a> } </a> 0
<a> } , bc . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void destroy ( ) { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . disconnect ( ) ; </a> 0
<a> <RARE_TOKEN> . disconnect ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> logger . error ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> . BroadcastAction filter ( Object <RARE_TOKEN> , Object o ) { </a> 0
<a> if ( ! ( <RARE_TOKEN> . remove ( <RARE_TOKEN> . toString ( ) ) ) ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( bc . <RARE_TOKEN> ( ) , <RARE_TOKEN> . toString ( ) ) ; </a> 1
<a> } </a> 0
<a> return new <RARE_TOKEN> . BroadcastAction ( BroadcastAction . <RARE_TOKEN> . <RARE_TOKEN> , o ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public Broadcaster getBroadcaster ( ) { </a> 0
<a> return bc ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Broadcaster bc ) { </a> 0
<a> this . bc = bc ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import java . net . URI ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private URI uri ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> channel ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> , URI . create ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id ) { </a> 0
<a> this ( id , URI . create ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( URI uri ) { </a> 0
<a> this ( <RARE_TOKEN> . class . getSimpleName ( ) , uri ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id , URI uri ) { </a> 0
<a> super ( id ) ; </a> 0
<a> this . uri = uri ; </a> 0
<a> } </a> 0
<a> private synchronized void <RARE_TOKEN> ( ) { </a> 0
<a> if ( uri == null ) return ; </a> 0
<a> try { </a> 0
<a> if ( config != null ) { </a> 0
<a> if ( config . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = config . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> token <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( config . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) != null ) { </a> 0
<a> uri = URI . create ( config . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( config . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> config = null ; </a> 0
<a> int port = - 1 ; </a> 0
<a> try { </a> 0
<a> port = uri . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> ; </a> 0
<a> } </a> 0
<a> if ( port == - 1 ) { </a> 0
<a> config = new <RARE_TOKEN> ( uri . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> config = new <RARE_TOKEN> ( uri . <RARE_TOKEN> ( ) , port ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( config ) ; </a> 0
<a> <RARE_TOKEN> . connect ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , 0 ) ; </a> 0
<a> String [ ] <RARE_TOKEN> = <RARE_TOKEN> . split ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> [ 0 ] , <RARE_TOKEN> [ 1 ] , <RARE_TOKEN> ( ) ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ( ) ) ; </a> 0
<a> channel = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , new <RARE_TOKEN> ( ) { </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> message ) { </a> 0
<a> <RARE_TOKEN> ( message . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ( ) ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> throw new <RARE_TOKEN> ( t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String id ) { </a> 0
<a> super . <RARE_TOKEN> ( id ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void destroy ( ) { </a> 0
<a> super . destroy ( ) ; </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . disconnect ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Object message ) { </a> 0
<a> if ( message instanceof String ) { </a> 0
<a> try { </a> 0
<a> channel . <RARE_TOKEN> ( message . toString ( ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> logger . debug ( "failed to <RARE_TOKEN> message <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . annotation ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( { <RARE_TOKEN> . <RARE_TOKEN> } ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> public @ interface Broadcast { </a> 0
<a> public Class < ? extends <RARE_TOKEN> > [ ] value ( ) default { } ; </a> 0
<a> public boolean resumeOnBroadcast ( ) default false ; </a> 0
<a> public int delay ( ) default - 1 ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . annotation ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( { <RARE_TOKEN> . <RARE_TOKEN> } ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public @ interface <RARE_TOKEN> { </a> 0
<a> int value ( ) default 1 ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . annotation ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( { <RARE_TOKEN> . <RARE_TOKEN> } ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> public @ interface <RARE_TOKEN> { </a> 0
<a> public int period ( ) default <RARE_TOKEN> ; </a> 0
<a> public int <RARE_TOKEN> ( ) default 0 ; </a> 0
<a> public boolean resumeOnBroadcast ( ) default false ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . annotation ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( { <RARE_TOKEN> . <RARE_TOKEN> } ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public @ interface <RARE_TOKEN> { </a> 0
<a> String value ( ) ; </a> 0
<a> public Class < ? extends AtmosphereResourceEventListener > [ ] listeners ( ) default { } ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . annotation ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> @ <RARE_TOKEN> ( { <RARE_TOKEN> . <RARE_TOKEN> } ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public @ interface Suspend { </a> 0
<a> int period ( ) default - 1 ; </a> 0
<a> TimeUnit <RARE_TOKEN> ( ) default TimeUnit . MILLISECONDS ; </a> 0
<a> enum SCOPE { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> SCOPE scope ( ) default SCOPE . <RARE_TOKEN> ; </a> 0
<a> boolean outputComments ( ) default true ; </a> 0
<a> public boolean resumeOnBroadcast ( ) default false ; </a> 0
<a> public Class < ? extends AtmosphereResourceEventListener > [ ] listeners ( ) default { } ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . jboss . servlet . http ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void event ( <RARE_TOKEN> event ) </a> 0
<a> throws IOException , ServletException ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . <RARE_TOKEN> . jetty . websocket ; </a> 1
<a> import java . io . IOException ; </a> 1
<a> public interface WebSocket { </a> 1
<a> public final byte <RARE_TOKEN> = ( byte ) <RARE_TOKEN> ; </a> 1
<a> public final byte <RARE_TOKEN> = ( byte ) 0x00 ; </a> 1
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> void <RARE_TOKEN> ( byte frame , String data ) ; </a> 1
<a> void <RARE_TOKEN> ( byte frame , byte [ ] data , int offset , int length ) ; </a> 1
<a> void <RARE_TOKEN> ( boolean <RARE_TOKEN> , byte <RARE_TOKEN> , byte [ ] data , int offset , int length ) ; </a> 1
<a> void <RARE_TOKEN> ( ) ; </a> 1
<a> public interface <RARE_TOKEN> { </a> 1
<a> void <RARE_TOKEN> ( byte frame , String data ) throws IOException ; </a> 1
<a> void <RARE_TOKEN> ( byte frame , byte [ ] data ) throws IOException ; </a> 1
<a> void <RARE_TOKEN> ( byte frame , byte [ ] data , int offset , int length ) throws IOException ; </a> 1
<a> void disconnect ( ) ; </a> 1
<a> boolean isOpen ( ) ; </a> 1
<a> } </a> 1
<a> void <RARE_TOKEN> ( <RARE_TOKEN> connection ) ; </a> 1
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> , String message ) ; </a> 1
<a> interface <RARE_TOKEN> extends WebSocket { </a> 1
<a> void <RARE_TOKEN> ( String data ) ; </a> 1
<a> } </a> 1
<a> interface <RARE_TOKEN> extends WebSocket { </a> 1
<a> void <RARE_TOKEN> ( byte [ ] data , int offset , int length ) ; </a> 1
<a> } </a> 1
<a> interface <RARE_TOKEN> extends WebSocket { </a> 1
<a> boolean <RARE_TOKEN> ( byte <RARE_TOKEN> , byte [ ] data , int offset , int length ) ; </a> 1
<a> } </a> 1
<a> interface <RARE_TOKEN> extends WebSocket { </a> 1
<a> boolean <RARE_TOKEN> ( byte <RARE_TOKEN> , byte <RARE_TOKEN> , byte [ ] data , int offset , int length ) ; </a> 1
<a> void <RARE_TOKEN> ( <RARE_TOKEN> connection ) ; </a> 1
<a> } </a> 1
<a> public interface <RARE_TOKEN> { </a> 1
<a> String <RARE_TOKEN> ( ) ; </a> 1
<a> void <RARE_TOKEN> ( String data ) throws IOException ; </a> 1
<a> void <RARE_TOKEN> ( byte [ ] data , int offset , int length ) throws IOException ; </a> 1
<a> void disconnect ( ) ; </a> 1
<a> boolean isOpen ( ) ; </a> 1
<a> void <RARE_TOKEN> ( int size ) ; </a> 1
<a> void <RARE_TOKEN> ( int size ) ; </a> 1
<a> int <RARE_TOKEN> ( ) ; </a> 1
<a> int <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> boolean <RARE_TOKEN> ( byte <RARE_TOKEN> ) ; </a> 1
<a> void close ( int <RARE_TOKEN> , String message ) ; </a> 1
<a> byte <RARE_TOKEN> ( ) ; </a> 1
<a> byte <RARE_TOKEN> ( ) ; </a> 1
<a> byte <RARE_TOKEN> ( ) ; </a> 1
<a> byte <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> ( byte <RARE_TOKEN> ) ; </a> 1
<a> boolean <RARE_TOKEN> ( byte <RARE_TOKEN> ) ; </a> 1
<a> boolean <RARE_TOKEN> ( byte <RARE_TOKEN> ) ; </a> 1
<a> boolean <RARE_TOKEN> ( byte <RARE_TOKEN> ) ; </a> 1
<a> boolean <RARE_TOKEN> ( byte <RARE_TOKEN> ) ; </a> 1
<a> boolean <RARE_TOKEN> ( byte <RARE_TOKEN> ) ; </a> 1
<a> boolean <RARE_TOKEN> ( byte <RARE_TOKEN> ) ; </a> 1
<a> void <RARE_TOKEN> ( byte <RARE_TOKEN> , byte [ ] data , int offset , int length ) throws IOException ; </a> 1
<a> void <RARE_TOKEN> ( byte <RARE_TOKEN> , byte <RARE_TOKEN> , byte [ ] data , int offset , int length ) throws IOException ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . <RARE_TOKEN> . jetty . websocket ; </a> 1
<a> import org . <RARE_TOKEN> . jetty . util . log . Log ; </a> 1
<a> import org . <RARE_TOKEN> . jetty . util . log . Logger ; </a> 1
<a> import javax . servlet . http . HttpServletRequest ; </a> 1
<a> import javax . servlet . http . HttpServletResponse ; </a> 1
<a> import java . io . IOException ; </a> 1
<a> import java . util . HashMap ; </a> 1
<a> import java . util . List ; </a> 1
<a> import java . util . Map ; </a> 1
<a> public class <RARE_TOKEN> { </a> 1
<a> private static final Logger <RARE_TOKEN> = Log . getLogger ( <RARE_TOKEN> . class ) ; </a> 1
<a> public interface <RARE_TOKEN> { </a> 1
<a> WebSocket <RARE_TOKEN> ( HttpServletRequest request , String <RARE_TOKEN> ) ; </a> 1
<a> boolean <RARE_TOKEN> ( HttpServletRequest request , String <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> private final Map < String , Class < ? extends <RARE_TOKEN> > > <RARE_TOKEN> = new HashMap < String , Class < ? extends <RARE_TOKEN> > > ( ) ; </a> 1
<a> { </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 1
<a> } </a> 1
<a> public Map < String , Class < ? extends <RARE_TOKEN> > > <RARE_TOKEN> ( ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public long <RARE_TOKEN> ( ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( HttpServletRequest request , HttpServletResponse response , WebSocket websocket , String <RARE_TOKEN> ) </a> 1
<a> throws IOException { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> protected String [ ] <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( HttpServletRequest request , HttpServletResponse response ) </a> 1
<a> throws IOException { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public List < <RARE_TOKEN> > <RARE_TOKEN> ( List < String > <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> private <RARE_TOKEN> <RARE_TOKEN> ( String name ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> remove the <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . <RARE_TOKEN> . jetty . websocket ; </a> 1
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 1
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . apache . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 1
<a> import javax . servlet . http . HttpServletRequest ; </a> 1
<a> import javax . servlet . http . HttpServletResponse ; </a> 1
<a> import java . io . IOException ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> public HttpServletRequest <RARE_TOKEN> ( ) ; </a> 0
<a> public HttpServletResponse <RARE_TOKEN> ( ) ; </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> public void close ( ) throws IOException ; </a> 0
<a> public void <RARE_TOKEN> ( int timeout ) </a> 0
<a> throws IOException , ServletException , UnsupportedOperationException ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> public HttpServletRequest <RARE_TOKEN> ( ) ; </a> 0
<a> public HttpServletResponse <RARE_TOKEN> ( ) ; </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> public void close ( ) throws IOException ; </a> 0
<a> public void <RARE_TOKEN> ( int timeout ) </a> 0
<a> throws IOException , ServletException , UnsupportedOperationException ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void event ( <RARE_TOKEN> event ) </a> 0
<a> throws IOException , ServletException ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package <RARE_TOKEN> . servlet . http ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . websocket . <RARE_TOKEN> ; </a> 1
<a> import javax . servlet . ServletException ; </a> 1
<a> import java . io . IOException ; </a> 1
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> protected abstract boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) </a> 1
<a> throws IOException , ServletException ; </a> 1
<a> protected abstract void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , Object o ) </a> 1
<a> throws IOException , ServletException ; </a> 1
<a> protected abstract void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) </a> 1
<a> throws IOException , ServletException ; </a> 1
<a> public final static void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , Object context ) throws IOException { </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cache ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 1
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . slf4j . Logger ; </a> 1
<a> import org . slf4j . LoggerFactory ; </a> 1
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . Serializable ; </a> 1
<a> import java . util . ArrayList ; </a> 1
<a> import java . util . Iterator ; </a> 1
<a> import java . util . List ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . TimeUnit ; </a> 1
<a> public abstract class <RARE_TOKEN> implements <RARE_TOKEN> < HttpServletRequest , HttpServletResponse > { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 1
<a> protected final List < <RARE_TOKEN> > queue = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 1
<a> protected final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> protected int <RARE_TOKEN> = 1000 * 5 * <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> public final void start ( ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new Runnable ( ) { </a> 1
<a> public void run ( ) { </a> 1
<a> Iterator < <RARE_TOKEN> > i = queue . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> message ; </a> 1
<a> while ( i . <RARE_TOKEN> ( ) ) { </a> 1
<a> message = i . next ( ) ; </a> 1
<a> logger . debug ( <RARE_TOKEN> {}" , message . message ( ) ) ; </a> 0
<a> if ( System . currentTimeMillis ( ) - message . currentTime ( ) > <RARE_TOKEN> ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> {}" , message . message ( ) ) ; </a> 0
<a> queue . remove ( message ) ; </a> 1
<a> } else { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } , 0 , <RARE_TOKEN> , TimeUnit . SECONDS ) ; </a> 1
<a> } </a> 1
<a> public final void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 1
<a> } </a> 1
<a> public final synchronized void <RARE_TOKEN> ( </a> 1
<a> final AtmosphereResource < HttpServletRequest , HttpServletResponse > resource , final Object object ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> message for <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , resource , object ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( object , System . currentTimeMillis ( ) , null ) ; </a> 1
<a> <RARE_TOKEN> prev = null ; </a> 1
<a> if ( ! queue . isEmpty ( ) ) { </a> 1
<a> prev = queue . get ( queue . size ( ) - 1 ) ; </a> 1
<a> } </a> 1
<a> if ( prev != null ) { </a> 1
<a> prev . next ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( ! queue . contains ( <RARE_TOKEN> ) ) { </a> 1
<a> queue . add ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( prev == null ) { </a> 1
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( true ) ; </a> 1
<a> } </a> 1
<a> if ( resource != null ) { </a> 0
<a> cache ( resource , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> public abstract void cache ( final AtmosphereResource < HttpServletRequest , HttpServletResponse > r , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> public abstract <RARE_TOKEN> <RARE_TOKEN> ( final AtmosphereResource < HttpServletRequest , HttpServletResponse > r ) ; </a> 0
<a> public final synchronized List < Object > <RARE_TOKEN> ( final AtmosphereResource < HttpServletRequest , HttpServletResponse > r ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( r ) ; </a> 1
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> if ( <RARE_TOKEN> == null && r . getRequest ( ) . getAttribute ( AtmosphereResourceImpl . <RARE_TOKEN> ) != null ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> } </a> 1
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . <RARE_TOKEN> ) <RARE_TOKEN> = null ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> if ( ! queue . contains ( <RARE_TOKEN> ) && ! queue . isEmpty ( ) ) { </a> 1
<a> <RARE_TOKEN> = queue . get ( 0 ) ; </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> } </a> 1
<a> } else if ( <RARE_TOKEN> && ! queue . isEmpty ( ) ) { </a> 1
<a> <RARE_TOKEN> = queue . get ( 0 ) ; </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> } </a> 1
<a> final ArrayList < Object > l = new ArrayList < Object > ( ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> return l ; </a> 1
<a> } </a> 1
<a> if ( ! <RARE_TOKEN> ) </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> . next ( ) ; </a> 1
<a> <RARE_TOKEN> prev = <RARE_TOKEN> ; </a> 1
<a> while ( <RARE_TOKEN> != null ) { </a> 1
<a> l . add ( <RARE_TOKEN> . message ( ) ) ; </a> 1
<a> prev = <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> . next ( ) ; </a> 1
<a> } </a> 1
<a> if ( prev != null ) </a> 1
<a> cache ( r , prev ) ; </a> 1
<a> return l ; </a> 1
<a> } </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( final int <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> protected static class <RARE_TOKEN> implements Serializable { </a> 0
<a> public final Object message ; </a> 1
<a> public final long currentTime ; </a> 1
<a> public <RARE_TOKEN> next ; </a> 1
<a> public final boolean <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 1
<a> this . currentTime = <RARE_TOKEN> ; </a> 1
<a> this . message = null ; </a> 1
<a> this . next = null ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( Object message , long currentTime , <RARE_TOKEN> next ) { </a> 1
<a> this . currentTime = currentTime ; </a> 1
<a> this . message = message ; </a> 1
<a> this . next = next ; </a> 1
<a> this . <RARE_TOKEN> = false ; </a> 1
<a> } </a> 1
<a> public Object message ( ) { </a> 1
<a> return message ; </a> 1
<a> } </a> 1
<a> public long currentTime ( ) { </a> 1
<a> return currentTime ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> next ( ) { </a> 1
<a> return next ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> next ( <RARE_TOKEN> next ) { </a> 1
<a> this . next = next ; </a> 1
<a> return next ; </a> 1
<a> } </a> 1
<a> public String toString ( ) { </a> 1
<a> if ( message != null ) { </a> 1
<a> return message . toString ( ) ; </a> 1
<a> } else { </a> 1
<a> return "" ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cache ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public void cache ( final AtmosphereResource < HttpServletRequest , HttpServletResponse > r , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> r . getRequest ( ) . getSession ( true ) . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( final AtmosphereResource < HttpServletRequest , HttpServletResponse > r ) { </a> 0
<a> <RARE_TOKEN> session = r . getRequest ( ) . getSession ( false ) ; </a> 1
<a> if ( session == null ) { </a> 0
<a> session = r . getRequest ( ) . getSession ( true ) ; </a> 1
<a> } </a> 1
<a> return ( <RARE_TOKEN> ) session . getAttribute ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . client ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( ) ; </a> 0
<a> @ Override </a> 0
<a> public BroadcastAction filter ( Object <RARE_TOKEN> , Object message ) { </a> 0
<a> return new BroadcastAction ( BroadcastAction . <RARE_TOKEN> . <RARE_TOKEN> , message ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public BroadcastAction filter ( HttpServletRequest request , HttpServletResponse response , Object message ) { </a> 0
<a> String <RARE_TOKEN> = request . getHeader ( <RARE_TOKEN> ) == null ? "" : request . getHeader ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ; </a> 0
<a> String transport = request . getHeader ( <RARE_TOKEN> ) == null ? <RARE_TOKEN> : request . getHeader ( <RARE_TOKEN> ) . toString ( ) ; </a> 0
<a> if ( transport . equals ( <RARE_TOKEN> ) && <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> StringBuilder sb = new StringBuilder ( <RARE_TOKEN> <RARE_TOKEN> ) </a> 0
<a> . append ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) </a> 0
<a> . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( message . toString ( ) ) </a> 0
<a> . append ( <RARE_TOKEN> ) ; </a> 0
<a> message = sb . toString ( ) ; </a> 0
<a> return new BroadcastAction ( BroadcastAction . <RARE_TOKEN> . <RARE_TOKEN> , message ) ; </a> 0
<a> } </a> 0
<a> return new BroadcastAction ( BroadcastAction . <RARE_TOKEN> . <RARE_TOKEN> , message ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . container ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . Request ; </a> 1
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . AtmosphereConfig ; </a> 0
<a> import org . atmosphere . websocket . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . websocket . WebSocket ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 1
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> public <RARE_TOKEN> ( AtmosphereConfig config ) { </a> 0
<a> super ( config ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void init ( ServletConfig sc ) throws ServletException { </a> 0
<a> super . init ( sc ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( sc . getServletContext ( ) . <RARE_TOKEN> ( ) , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public Action service ( HttpServletRequest request , HttpServletResponse response ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> if ( request . getHeaders ( <RARE_TOKEN> ) != null && request . getHeaders ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> String [ ] e = request . getHeaders ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) . split ( <RARE_TOKEN> ) ; </a> 0
<a> for ( String <RARE_TOKEN> : e ) { </a> 0
<a> if ( <RARE_TOKEN> . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> return super . service ( request , response ) ; </a> 0
<a> } else { </a> 0
<a> Action action = suspended ( request , response ) ; </a> 1
<a> if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , response ) ; </a> 1
<a> } else if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , response ) ; </a> 1
<a> } </a> 1
<a> return action ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return config . <RARE_TOKEN> ( ) . getServletContext ( ) . <RARE_TOKEN> ( ) + " <RARE_TOKEN> WebSocket <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private <RARE_TOKEN> webSocketProcessor ; </a> 1
<a> public void <RARE_TOKEN> ( com . sun . <RARE_TOKEN> . <RARE_TOKEN> . WebSocket w ) { </a> 0
<a> if ( ! <RARE_TOKEN> . class . isAssignableFrom ( w . getClass ( ) ) ) { </a> 1
<a> throw new IllegalStateException ( ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . class . cast ( w ) ; </a> 1
<a> try { </a> 0
<a> webSocketProcessor = ( <RARE_TOKEN> ) <RARE_TOKEN> . class . <RARE_TOKEN> ( ) </a> 1
<a> . <RARE_TOKEN> ( config . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) </a> 0
<a> . <RARE_TOKEN> ( new Class [ ] { AtmosphereServlet . class , WebSocket . class } ) </a> 1
<a> . newInstance ( new Object [ ] { config . <RARE_TOKEN> ( ) , new <RARE_TOKEN> ( <RARE_TOKEN> ) } ) ; </a> 1
<a> webSocketProcessor . <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> . getRequest ( ) ) ) ; </a> 1
<a> } catch ( Exception e ) { </a> 1
<a> logger . warn ( "failed to connect to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( Request request ) { </a> 1
<a> return true ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( com . sun . <RARE_TOKEN> . <RARE_TOKEN> . WebSocket <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 1
<a> public void <RARE_TOKEN> ( com . sun . <RARE_TOKEN> . <RARE_TOKEN> . WebSocket <RARE_TOKEN> ) { </a> 1
<a> webSocketProcessor . close ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> implements WebSocket { </a> 0
<a> private final com . sun . <RARE_TOKEN> . <RARE_TOKEN> . WebSocket <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( com . sun . <RARE_TOKEN> . <RARE_TOKEN> . WebSocket <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int errorCode , String message ) throws IOException { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String location ) throws IOException { </a> 0
<a> } </a> 0
<a> public void write ( byte frame , String data ) throws IOException { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( data ) ; </a> 0
<a> } </a> 0
<a> public void write ( byte frame , byte [ ] data ) throws IOException { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new String ( data ) ) ; </a> 0
<a> } </a> 0
<a> public void write ( byte frame , byte [ ] data , int offset , int length ) throws IOException { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new String ( data , offset , length ) ) ; </a> 0
<a> } </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . container ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . AtmosphereConfig ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> = "" ; </a> 0
<a> public <RARE_TOKEN> ( AtmosphereConfig config ) { </a> 0
<a> super ( config ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void init ( ServletConfig sc ) throws ServletException { </a> 0
<a> super . init ( sc ) ; </a> 0
<a> <RARE_TOKEN> = sc . getServletContext ( ) . <RARE_TOKEN> ( ) + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> context = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> context . <RARE_TOKEN> ( - 1 ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> for atmosphere <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public Action service ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> ctx = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Action action = suspended ( req , res ) ; </a> 0
<a> if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> suspend ( ctx , action , req , res ) ; </a> 0
<a> } else if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> resume ( req , ctx ) ; </a> 0
<a> } </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> private void suspend ( <RARE_TOKEN> ctx , Action action , HttpServletRequest req , </a> 0
<a> HttpServletResponse res ) { </a> 0
<a> <RARE_TOKEN> c = new <RARE_TOKEN> ( req , res ) ; </a> 0
<a> ctx . <RARE_TOKEN> ( action . timeout ) ; </a> 0
<a> ctx . <RARE_TOKEN> ( c ) ; </a> 0
<a> ctx . <RARE_TOKEN> ( <RARE_TOKEN> , System . currentTimeMillis ( ) ) ; </a> 0
<a> req . setAttribute ( <RARE_TOKEN> , c . hashCode ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> req . getSession ( ) . setAttribute ( <RARE_TOKEN> , c . hashCode ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> private void resume ( HttpServletRequest req , <RARE_TOKEN> ctx ) { </a> 0
<a> if ( req . getAttribute ( <RARE_TOKEN> ) == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> handler = ctx . <RARE_TOKEN> ( ( Integer ) req . getAttribute ( <RARE_TOKEN> ) ) ; </a> 0
<a> req . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( handler == null && <RARE_TOKEN> ( ) && req . getSession ( false ) != null ) { </a> 1
<a> handler = ctx . <RARE_TOKEN> ( ( Integer ) req . getSession ( false ) . getAttribute ( <RARE_TOKEN> ) ) ; </a> 1
<a> req . getSession ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( handler != null && ( config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) == null </a> 0
<a> || config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) ) { </a> 0
<a> ctx . <RARE_TOKEN> ( handler ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void action ( AtmosphereResourceImpl <RARE_TOKEN> ) { </a> 1
<a> super . action ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> . action ( ) . type == Action . TYPE . <RARE_TOKEN> && <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ctx = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> resume ( <RARE_TOKEN> . getRequest ( ) , ctx ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public Action <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> Action action = super . <RARE_TOKEN> ( req , res ) ; </a> 0
<a> if ( req . getAttribute ( <RARE_TOKEN> ) != null && Long . class . cast ( req . getAttribute ( <RARE_TOKEN> ) ) == - 1 ) { </a> 0
<a> resume ( req , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final HttpServletRequest req ; </a> 0
<a> private final HttpServletResponse res ; </a> 0
<a> private <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) { </a> 0
<a> this . req = req ; </a> 0
<a> this . res = res ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Object o ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 0
<a> } </a> 0
<a> public synchronized void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 0
<a> long <RARE_TOKEN> = ( Long ) <RARE_TOKEN> . <RARE_TOKEN> ( ) . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) > 0 </a> 0
<a> && ( System . currentTimeMillis ( ) - <RARE_TOKEN> ) >= <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 0
<a> } catch ( ServletException ex ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . container ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . AtmosphereConfig ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> = "" ; </a> 0
<a> public <RARE_TOKEN> ( AtmosphereConfig config ) { </a> 0
<a> super ( config ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void init ( ServletConfig sc ) throws ServletException { </a> 0
<a> super . init ( sc ) ; </a> 0
<a> <RARE_TOKEN> = sc . getServletContext ( ) . <RARE_TOKEN> ( ) + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> context = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> context . <RARE_TOKEN> ( - 1 ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> for atmosphere <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public Action service ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> ctx = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Action action = suspended ( req , res ) ; </a> 0
<a> if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> suspend ( ctx , action , req , res ) ; </a> 0
<a> } else if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> resume ( req , ctx ) ; </a> 0
<a> } </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> private void suspend ( <RARE_TOKEN> ctx , Action action , HttpServletRequest req , </a> 0
<a> HttpServletResponse res ) { </a> 0
<a> <RARE_TOKEN> c = new <RARE_TOKEN> ( req , res ) ; </a> 0
<a> ctx . <RARE_TOKEN> ( action . timeout ) ; </a> 0
<a> ctx . <RARE_TOKEN> ( c ) ; </a> 0
<a> req . setAttribute ( <RARE_TOKEN> , c . hashCode ( ) ) ; </a> 0
<a> ctx . <RARE_TOKEN> ( <RARE_TOKEN> , System . currentTimeMillis ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> req . getSession ( ) . setAttribute ( <RARE_TOKEN> , c . hashCode ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void resume ( HttpServletRequest req , <RARE_TOKEN> ctx ) { </a> 0
<a> if ( req . getAttribute ( <RARE_TOKEN> ) == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> handler = ctx . <RARE_TOKEN> ( ( Integer ) req . getAttribute ( <RARE_TOKEN> ) ) ; </a> 0
<a> req . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( handler == null && <RARE_TOKEN> ( ) && req . getSession ( false ) != null ) { </a> 0
<a> handler = ctx . <RARE_TOKEN> ( ( Integer ) req . getSession ( false ) . getAttribute ( <RARE_TOKEN> ) ) ; </a> 0
<a> req . getSession ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( handler != null && ( config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) == null </a> 0
<a> || config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) ) { </a> 0
<a> ctx . <RARE_TOKEN> ( handler ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void action ( AtmosphereResourceImpl r ) { </a> 0
<a> super . action ( r ) ; </a> 0
<a> if ( r . action ( ) . type == Action . TYPE . <RARE_TOKEN> && r . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ctx = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> resume ( r . getRequest ( ) , ctx ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public Action <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> Action action = super . <RARE_TOKEN> ( req , res ) ; </a> 0
<a> if ( req . getAttribute ( <RARE_TOKEN> ) != null && Long . class . cast ( req . getAttribute ( <RARE_TOKEN> ) ) == - 1 ) { </a> 0
<a> resume ( req , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> HttpServletRequest req ; </a> 0
<a> HttpServletResponse res ; </a> 0
<a> public <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) { </a> 0
<a> this . req = req ; </a> 0
<a> this . res = res ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Object o ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 0
<a> } </a> 0
<a> public synchronized void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 0
<a> long <RARE_TOKEN> = ( Long ) <RARE_TOKEN> . <RARE_TOKEN> ( ) . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) > 0 </a> 0
<a> && ( System . currentTimeMillis ( ) - <RARE_TOKEN> ) >= <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 0
<a> } catch ( ServletException ex ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . container ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . AtmosphereConfig ; </a> 0
<a> import org . jboss . servlet . http . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final IllegalStateException <RARE_TOKEN> = new IllegalStateException ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> private final ConcurrentLinkedQueue < <RARE_TOKEN> > <RARE_TOKEN> = new ConcurrentLinkedQueue < <RARE_TOKEN> > ( ) ; </a> 1
<a> public <RARE_TOKEN> ( AtmosphereConfig config ) { </a> 0
<a> super ( config ) ; </a> 0
<a> } </a> 0
<a> public Action service ( HttpServletRequest req , HttpServletResponse res ) throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> event = ( <RARE_TOKEN> ) req . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> if ( event == null ) { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> Action action = null ; </a> 0
<a> if ( event . getType ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> action = suspended ( req , res ) ; </a> 0
<a> if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> try { </a> 0
<a> if ( action . timeout != - 1 ) { </a> 0
<a> event . <RARE_TOKEN> ( ( int ) action . timeout ) ; </a> 0
<a> } else { </a> 0
<a> event . <RARE_TOKEN> ( Integer . MAX_VALUE ) ; </a> 0
<a> } </a> 0
<a> } catch ( UnsupportedOperationException ex ) { </a> 0
<a> } </a> 0
<a> } else if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> event . close ( ) ; </a> 1
<a> } else { </a> 0
<a> event . close ( ) ; </a> 1
<a> } </a> 0
<a> } else if ( event . getType ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> } else if ( event . getType ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> closed <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> if ( ! <RARE_TOKEN> . remove ( event ) ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> closed <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> action = <RARE_TOKEN> ( req , res ) ; </a> 1
<a> } else { </a> 1
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> } </a> 0
<a> event . close ( ) ; </a> 1
<a> } else if ( event . getType ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 1
<a> event . close ( ) ; </a> 1
<a> } else if ( event . getType ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 1
<a> if ( ! <RARE_TOKEN> . remove ( event ) ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> closed connection response: {}" , res ) ; </a> 1
<a> action = <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } else { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> } </a> 0
<a> event . close ( ) ; </a> 1
<a> } else if ( event . getType ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> out {}" , res ) ; </a> 1
<a> action = <RARE_TOKEN> ( req , res ) ; </a> 0
<a> event . close ( ) ; </a> 0
<a> } </a> 0
<a> return action ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public Action <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) throws IOException , ServletException { </a> 0
<a> Action action = super . <RARE_TOKEN> ( req , res ) ; </a> 0
<a> if ( req . getAttribute ( <RARE_TOKEN> ) != null && Long . class . cast ( req . getAttribute ( <RARE_TOKEN> ) ) == - 1 ) { </a> 0
<a> <RARE_TOKEN> event = ( <RARE_TOKEN> ) req . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> if ( event == null ) { </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( event ) ; </a> 1
<a> event . close ( ) ; </a> 1
<a> } </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void action ( AtmosphereResourceImpl <RARE_TOKEN> ) { </a> 1
<a> super . action ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> . action ( ) . type == Action . TYPE . <RARE_TOKEN> && <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> try { </a> 1
<a> <RARE_TOKEN> event = ( <RARE_TOKEN> ) <RARE_TOKEN> . getRequest ( ) . getAttribute ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( event ) ; </a> 1
<a> if ( config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) == null || </a> 0
<a> config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> event . close ( ) ; </a> 1
<a> } </a> 0
<a> } catch ( IOException ex ) { </a> 1
<a> logger . debug ( "" , ex ) ; </a> 1
<a> } </a> 0
<a> } </a> 1
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( ) { </a> 0
<a> StringBuilder sb = new StringBuilder ( ) ; </a> 0
<a> sb . append ( <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> this is a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> is not <RARE_TOKEN> " ) ; </a> 0
<a> sb . append ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> is not <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " ) ; </a> 0
<a> sb . append ( <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return sb . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . container ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereHandler ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . AtmosphereConfig ; </a> 0
<a> import org . atmosphere . cpr . FrameworkConfig ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> protected final ConcurrentLinkedQueue < <RARE_TOKEN> > <RARE_TOKEN> = new ConcurrentLinkedQueue < <RARE_TOKEN> > ( ) ; </a> 0
<a> public <RARE_TOKEN> ( AtmosphereConfig config ) { </a> 0
<a> super ( config ) ; </a> 0
<a> } </a> 0
<a> public Action service ( HttpServletRequest req , HttpServletResponse res ) throws IOException , ServletException { </a> 1
<a> Action action = null ; </a> 0
<a> <RARE_TOKEN> c = <RARE_TOKEN> . <RARE_TOKEN> ( req ) ; </a> 0
<a> if ( c . <RARE_TOKEN> ( ) ) { </a> 0
<a> action = suspended ( req , res ) ; </a> 0
<a> if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> {}" , res ) ; </a> 1
<a> if ( action . timeout != - 1 ) { </a> 0
<a> c . <RARE_TOKEN> ( action . timeout ) ; </a> 0
<a> } else { </a> 0
<a> c . <RARE_TOKEN> ( Integer . MAX_VALUE ) ; </a> 0
<a> } </a> 0
<a> c . suspend ( ) ; </a> 1
<a> } else if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> Boolean resumeOnBroadcast = ( Boolean ) req . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 0
<a> if ( resumeOnBroadcast != null && resumeOnBroadcast ) { </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> logger . debug ( <RARE_TOKEN> {}" , res ) ; </a> 1
<a> if ( ! <RARE_TOKEN> . remove ( c ) ) { </a> 0
<a> try { </a> 0
<a> c . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IllegalStateException ex ) { </a> 0
<a> logger . trace ( <RARE_TOKEN> , ex ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else if ( ! c . <RARE_TOKEN> ( ) && c . <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> ( req , res ) ; </a> 1
<a> } </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public Action <RARE_TOKEN> ( HttpServletRequest request , HttpServletResponse response ) </a> 0
<a> throws IOException , ServletException { </a> 1
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , request , response ) ; </a> 1
<a> AtmosphereResourceImpl r = </a> 1
<a> ( AtmosphereResourceImpl ) request . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> AtmosphereHandler < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> = </a> 0
<a> ( AtmosphereHandler < HttpServletRequest , HttpServletResponse > ) </a> 0
<a> request . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( r . <RARE_TOKEN> ( ) ) ; </a> 1
<a> return new Action ( Action . TYPE . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public void action ( AtmosphereResourceImpl <RARE_TOKEN> ) { </a> 1
<a> super . action ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) && <RARE_TOKEN> . action ( ) . type == Action . TYPE . <RARE_TOKEN> && </a> 1
<a> ( config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) == null || </a> 1
<a> config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) ) { </a> 1
<a> <RARE_TOKEN> c = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getRequest ( ) ) ; </a> 1
<a> if ( c != null ) { </a> 0
<a> try { </a> 0
<a> c . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IllegalStateException ex ) { </a> 0
<a> logger . trace ( <RARE_TOKEN> failed" , ex ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } else { </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . container ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . AtmosphereConfig ; </a> 0
<a> import org . <RARE_TOKEN> . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final ConcurrentLinkedQueue < <RARE_TOKEN> > <RARE_TOKEN> = new ConcurrentLinkedQueue < <RARE_TOKEN> > ( ) ; </a> 0
<a> public <RARE_TOKEN> ( AtmosphereConfig config ) { </a> 0
<a> super ( config ) ; </a> 0
<a> } </a> 0
<a> public Action service ( HttpServletRequest req , HttpServletResponse response ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> c = <RARE_TOKEN> . <RARE_TOKEN> ( req , null ) ; </a> 0
<a> Action action = null ; </a> 0
<a> if ( ! c . <RARE_TOKEN> ( ) && ! c . <RARE_TOKEN> ( ) ) { </a> 1
<a> action = suspended ( req , response ) ; </a> 0
<a> if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , response ) ; </a> 1
<a> if ( action . timeout != - 1 ) { </a> 0
<a> c . suspend ( action . timeout ) ; </a> 0
<a> } else { </a> 0
<a> c . suspend ( 0 ) ; </a> 0
<a> } </a> 0
<a> } else if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , response ) ; </a> 1
<a> if ( ! <RARE_TOKEN> . remove ( c ) ) { </a> 0
<a> c . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( req . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) == null ) { </a> 0
<a> <RARE_TOKEN> ( req , response ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( req , response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , response ) ; </a> 1
<a> if ( ! <RARE_TOKEN> . remove ( c ) ) { </a> 1
<a> c . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( req . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) == null ) { </a> 0
<a> <RARE_TOKEN> ( req , response ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( req , response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void action ( AtmosphereResourceImpl r ) { </a> 0
<a> super . action ( r ) ; </a> 0
<a> if ( r . action ( ) . type == Action . TYPE . <RARE_TOKEN> && r . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> c = <RARE_TOKEN> . <RARE_TOKEN> ( r . getRequest ( ) , null ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( c ) ; </a> 0
<a> if ( config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) == null </a> 0
<a> || config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> c . resume ( ) ; </a> 0
<a> } else { </a> 0
<a> try { </a> 1
<a> r . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } catch ( IOException e ) { </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Action <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> Action action = super . <RARE_TOKEN> ( req , res ) ; </a> 0
<a> if ( req . getAttribute ( <RARE_TOKEN> ) != null && Long . class . cast ( req . getAttribute ( <RARE_TOKEN> ) ) == - 1 ) { </a> 0
<a> <RARE_TOKEN> c = <RARE_TOKEN> . <RARE_TOKEN> ( req , null ) ; </a> 0
<a> if ( c != null ) { </a> 0
<a> c . resume ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . container ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . atmosphere . websocket . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . websocket . WebSocket ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . websocket . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> public final static AtmosphereServlet . Action <RARE_TOKEN> ( <RARE_TOKEN> cometSupport , </a> 0
<a> HttpServletRequest req , </a> 0
<a> HttpServletResponse res , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) throws IOException , ServletException { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> if ( req . getHeaders ( <RARE_TOKEN> ) != null && req . getHeaders ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> String [ ] e = req . getHeaders ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) . split ( <RARE_TOKEN> ) ; </a> 1
<a> for ( String <RARE_TOKEN> : e ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Boolean b = ( Boolean ) req . getAttribute ( WebSocket . <RARE_TOKEN> ) ; </a> 0
<a> if ( b == null ) b = Boolean . <RARE_TOKEN> ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 1
<a> return null ; </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> != null && ! b ) { </a> 0
<a> req . setAttribute ( WebSocket . <RARE_TOKEN> , true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( req , res ) ; </a> 0
<a> return new AtmosphereServlet . Action ( ) ; </a> 0
<a> } </a> 0
<a> AtmosphereServlet . Action action = cometSupport . suspended ( req , res ) ; </a> 0
<a> if ( action . type == AtmosphereServlet . Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> } else if ( action . type == AtmosphereServlet . Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> req . setAttribute ( WebSocket . <RARE_TOKEN> , true ) ; </a> 0
<a> } </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final static <RARE_TOKEN> <RARE_TOKEN> ( final AtmosphereServlet . AtmosphereConfig config ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> public boolean <RARE_TOKEN> ( HttpServletRequest request , String <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> request <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , request . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public org . <RARE_TOKEN> . jetty . websocket . WebSocket <RARE_TOKEN> ( HttpServletRequest request , String <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> request <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , request . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> return new <RARE_TOKEN> ( request , config . <RARE_TOKEN> ( ) , config . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = Integer . valueOf ( config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int timeOut = 5 * <RARE_TOKEN> ; </a> 0
<a> if ( config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) != null ) { </a> 0
<a> timeOut = Integer . valueOf ( config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> timeout {}" , timeOut ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( timeOut ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . container ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . AtmosphereConfig ; </a> 0
<a> import org . atmosphere . websocket . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . websocket . WebSocket ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . websocket . <RARE_TOKEN> ; </a> 1
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . ServletException ; </a> 1
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 1
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( final AtmosphereConfig config ) { </a> 1
<a> super ( config ) ; </a> 1
<a> boolean <RARE_TOKEN> = config . getServletContext ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . startsWith ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( config ) ; </a> 1
<a> } else { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public Action service ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 1
<a> Action action = <RARE_TOKEN> . <RARE_TOKEN> ( this , req , res , <RARE_TOKEN> ) ; </a> 1
<a> return action == null ? super . service ( req , res ) : action ; </a> 1
<a> } </a> 1
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return config . <RARE_TOKEN> ( ) . getServletContext ( ) . <RARE_TOKEN> ( ) + " <RARE_TOKEN> WebSocket <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return true ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . container ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . AtmosphereConfig ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final IllegalStateException <RARE_TOKEN> </a> 0
<a> = new IllegalStateException ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> private final ConcurrentLinkedQueue < <RARE_TOKEN> > <RARE_TOKEN> </a> 0
<a> = new ConcurrentLinkedQueue < <RARE_TOKEN> > ( ) ; </a> 0
<a> public <RARE_TOKEN> ( AtmosphereConfig config ) { </a> 0
<a> super ( config ) ; </a> 0
<a> } </a> 0
<a> public Action service ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> event = ( <RARE_TOKEN> ) req . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> if ( event == null ) { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> Action action = null ; </a> 0
<a> if ( event . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> action = suspended ( req , res ) ; </a> 0
<a> if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> try { </a> 0
<a> if ( action . timeout != - 1 ) { </a> 0
<a> event . <RARE_TOKEN> ( ( int ) action . timeout ) ; </a> 0
<a> } else { </a> 0
<a> event . <RARE_TOKEN> ( Integer . MAX_VALUE ) ; </a> 0
<a> } </a> 0
<a> } catch ( UnsupportedOperationException ex ) { </a> 0
<a> } </a> 0
<a> } else if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> event . close ( ) ; </a> 1
<a> } else { </a> 0
<a> event . close ( ) ; </a> 1
<a> } </a> 0
<a> } else if ( event . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> } else if ( event . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> closed <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> if ( ! <RARE_TOKEN> . remove ( event ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> closed <RARE_TOKEN> response: {}" , res ) ; </a> 0
<a> action = <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } else { </a> 1
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> } </a> 0
<a> event . close ( ) ; </a> 1
<a> } else if ( event . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> out response: {}" , res ) ; </a> 1
<a> action = <RARE_TOKEN> ( req , res ) ; </a> 0
<a> event . close ( ) ; </a> 1
<a> } else if ( event . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> event . close ( ) ; </a> 1
<a> } else if ( event . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> if ( ! <RARE_TOKEN> . remove ( event ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> closed <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> action = <RARE_TOKEN> ( req , res ) ; </a> 1
<a> } else { </a> 0
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> } </a> 0
<a> event . close ( ) ; </a> 0
<a> } </a> 0
<a> return action ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void action ( AtmosphereResourceImpl resource ) { </a> 1
<a> super . action ( resource ) ; </a> 1
<a> if ( resource . action ( ) . type == Action . TYPE . <RARE_TOKEN> && resource . <RARE_TOKEN> ( ) ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> event = ( <RARE_TOKEN> ) resource . getRequest ( ) . getAttribute ( <RARE_TOKEN> ) ; </a> 1
<a> if ( event == null ) return ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( event ) ; </a> 0
<a> if ( config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) == null </a> 0
<a> || config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> event . close ( ) ; </a> 1
<a> } </a> 0
<a> } catch ( IOException ex ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> failed" , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public Action <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 1
<a> throws IOException , ServletException { </a> 1
<a> Action action = super . <RARE_TOKEN> ( req , res ) ; </a> 0
<a> if ( req . getAttribute ( <RARE_TOKEN> ) != null && Long . class . cast ( req . getAttribute ( <RARE_TOKEN> ) ) == - 1 ) { </a> 0
<a> <RARE_TOKEN> event = ( <RARE_TOKEN> ) req . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> if ( event == null ) return action ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( event ) ; </a> 0
<a> event . close ( ) ; </a> 1
<a> } </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( ) { </a> 0
<a> StringBuilder sb = new StringBuilder ( ) ; </a> 0
<a> sb . append ( <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> this is a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " ) ; </a> 0
<a> sb . append ( <RARE_TOKEN> <RARE_TOKEN> or the <RARE_TOKEN> <RARE_TOKEN> is not <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( <RARE_TOKEN> <RARE_TOKEN> not the <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> remove <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> return sb . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . container ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 1
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . AtmosphereConfig ; </a> 0
<a> import org . slf4j . Logger ; </a> 1
<a> import org . slf4j . LoggerFactory ; </a> 1
<a> import <RARE_TOKEN> . servlet . http . <RARE_TOKEN> ; </a> 1
<a> import <RARE_TOKEN> . servlet . http . <RARE_TOKEN> ; </a> 1
<a> import javax . servlet . ServletException ; </a> 1
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 1
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( AtmosphereConfig config ) { </a> 1
<a> super ( config ) ; </a> 1
<a> } </a> 1
<a> public Action service ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 1
<a> Action action = suspended ( req , res ) ; </a> 1
<a> if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> } else if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> Action <RARE_TOKEN> = <RARE_TOKEN> ( req , res ) ; </a> 1
<a> if ( <RARE_TOKEN> . type == Action . TYPE . <RARE_TOKEN> ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> response: {}" , res ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> return action ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void action ( AtmosphereResourceImpl <RARE_TOKEN> ) { </a> 1
<a> super . action ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) && <RARE_TOKEN> . action ( ) . type == Action . TYPE . <RARE_TOKEN> && </a> 1
<a> ( config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) == null </a> 1
<a> || config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) ) { </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . getRequest ( ) . getSession ( ) . getAttribute ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , null ) ; </a> 1
<a> } catch ( IOException ex ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> failed" , ex ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import org . atmosphere . websocket . <RARE_TOKEN> ; </a> 0
<a> public interface ApplicationConfig { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = ApplicationConfig . class . <RARE_TOKEN> ( ) . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> String <RARE_TOKEN> = ApplicationConfig . class . <RARE_TOKEN> ( ) . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> String <RARE_TOKEN> = ApplicationConfig . class . <RARE_TOKEN> ( ) . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> String <RARE_TOKEN> = ApplicationConfig . class . <RARE_TOKEN> ( ) . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> String <RARE_TOKEN> = ApplicationConfig . class . <RARE_TOKEN> ( ) . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = ApplicationConfig . class . <RARE_TOKEN> ( ) . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> String <RARE_TOKEN> = ApplicationConfig . class . <RARE_TOKEN> ( ) . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> String <RARE_TOKEN> = ApplicationConfig . class . <RARE_TOKEN> ( ) . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = AtmosphereResource . class . getName ( ) ; </a> 1
<a> String <RARE_TOKEN> = ApplicationConfig . class . <RARE_TOKEN> ( ) . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> String <RARE_TOKEN> = AtmosphereServlet . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = AtmosphereServlet . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> String <RARE_TOKEN> = ApplicationConfig . class . <RARE_TOKEN> ( ) . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> String <RARE_TOKEN> = ApplicationConfig . class . <RARE_TOKEN> ( ) . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . AtmosphereConfig ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> import java . util . HashMap ; </a> 1
<a> import java . util . Map ; </a> 1
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . TimeUnit ; </a> 1
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 1
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> public abstract class <RARE_TOKEN> implements <RARE_TOKEN> < AtmosphereResourceImpl > { </a> 1
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> protected static final Action <RARE_TOKEN> = new Action ( Action . TYPE . <RARE_TOKEN> ) ; </a> 0
<a> protected static final Action <RARE_TOKEN> = new Action ( Action . TYPE . <RARE_TOKEN> ) ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> protected final AtmosphereConfig config ; </a> 0
<a> protected final ConcurrentHashMap < HttpServletRequest , AtmosphereResource < HttpServletRequest , HttpServletResponse > > </a> 0
<a> <RARE_TOKEN> = new ConcurrentHashMap < HttpServletRequest , AtmosphereResource < HttpServletRequest , HttpServletResponse > > ( ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 1 ) ; </a> 1
<a> public <RARE_TOKEN> ( AtmosphereConfig config ) { </a> 0
<a> this . config = config ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void init ( ServletConfig sc ) throws ServletException { </a> 0
<a> String <RARE_TOKEN> = sc . getInitParameter ( <RARE_TOKEN> ) != null ? sc . getInitParameter ( <RARE_TOKEN> ) : </a> 1
<a> config . getInitParameter ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> final long <RARE_TOKEN> = Long . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> <= 0 ) return ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new Runnable ( ) { </a> 1
<a> public void run ( ) { </a> 1
<a> for ( HttpServletRequest req : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> long l = ( Long ) req . getAttribute ( <RARE_TOKEN> ) ; </a> 1
<a> if ( l > 0 && System . currentTimeMillis ( ) - l > <RARE_TOKEN> ) { </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> ( req , <RARE_TOKEN> . get ( req ) . getResponse ( ) ) ; </a> 0
<a> req . setAttribute ( <RARE_TOKEN> , ( long ) - 1 ) ; </a> 1
<a> } catch ( IOException e ) { </a> 1
<a> } catch ( ServletException e ) { </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } , 0 , 1 , TimeUnit . SECONDS ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return config . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return config . <RARE_TOKEN> ( ) . getServletContext ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public Action suspended ( HttpServletRequest request , HttpServletResponse response ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> return action ( request , response ) ; </a> 0
<a> } </a> 0
<a> Action action ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> if ( req . getHeaders ( <RARE_TOKEN> ) != null && req . getHeaders ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> String [ ] e = req . getHeaders ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) . split ( <RARE_TOKEN> ) ; </a> 1
<a> for ( String <RARE_TOKEN> : e ) { </a> 0
<a> if ( <RARE_TOKEN> . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> && ! <RARE_TOKEN> ( ) ) { </a> 0
<a> res . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> res . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) ; </a> 1
<a> return new Action ( ) ; </a> 1
<a> } </a> 1
<a> if ( config . <RARE_TOKEN> ( ) . isEmpty ( ) ) { </a> 0
<a> logger . error ( <RARE_TOKEN> AtmosphereHandler <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> throw new ServletException ( <RARE_TOKEN> AtmosphereHandler <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> session = req . getSession ( true ) ; </a> 0
<a> if ( session . <RARE_TOKEN> ( ) == <RARE_TOKEN> ) { </a> 0
<a> session . <RARE_TOKEN> ( - 1 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> req . setAttribute ( FrameworkConfig . <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = map ( req ) ; </a> 0
<a> AtmosphereResourceImpl resource = new AtmosphereResourceImpl ( config , <RARE_TOKEN> . broadcaster , req , res , this , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . broadcaster . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( config ) ; </a> 0
<a> req . setAttribute ( FrameworkConfig . <RARE_TOKEN> , resource ) ; </a> 0
<a> req . setAttribute ( FrameworkConfig . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ( resource ) ; </a> 0
<a> } catch ( IOException t ) { </a> 0
<a> resource . <RARE_TOKEN> ( t ) ; </a> 0
<a> throw t ; </a> 0
<a> } </a> 0
<a> if ( resource . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 1
<a> req . setAttribute ( <RARE_TOKEN> , System . currentTimeMillis ( ) ) ; </a> 1
<a> <RARE_TOKEN> . put ( req , resource ) ; </a> 1
<a> } </a> 1
<a> return resource . action ( ) ; </a> 0
<a> } </a> 0
<a> public void action ( AtmosphereResourceImpl r ) { </a> 1
<a> <RARE_TOKEN> . remove ( r . getRequest ( ) ) ; </a> 1
<a> } </a> 1
<a> protected <RARE_TOKEN> map ( HttpServletRequest req ) throws ServletException { </a> 0
<a> String path = req . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( path == null || path . length ( ) == 0 ) { </a> 0
<a> path = "/" ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = config . <RARE_TOKEN> ( ) . get ( path ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> if ( ! path . <RARE_TOKEN> ( "/" ) ) { </a> 1
<a> path += <RARE_TOKEN> ; </a> 1
<a> } else { </a> 1
<a> path += <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = config . <RARE_TOKEN> ( ) . get ( path ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> <RARE_TOKEN> = config . <RARE_TOKEN> ( ) . get ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> if ( req . <RARE_TOKEN> ( ) != null ) { </a> 1
<a> path = req . <RARE_TOKEN> ( ) + req . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = config . <RARE_TOKEN> ( ) . get ( path ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> if ( ! path . <RARE_TOKEN> ( "/" ) ) { </a> 1
<a> path += <RARE_TOKEN> ; </a> 1
<a> } else { </a> 1
<a> path += <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = config . <RARE_TOKEN> ( ) . get ( path ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> logger . warn ( <RARE_TOKEN> AtmosphereHandler <RARE_TOKEN> request for {}" , path ) ; </a> 1
<a> for ( String m : config . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 1
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> {}" , m ) ; </a> 1
<a> } </a> 1
<a> throw new ServletException ( <RARE_TOKEN> AtmosphereHandler <RARE_TOKEN> request for " + path ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> config . <RARE_TOKEN> ( ) . add ( <RARE_TOKEN> . broadcaster , </a> 1
<a> <RARE_TOKEN> . broadcaster . <RARE_TOKEN> ( ) ) ; </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public Action <RARE_TOKEN> ( HttpServletRequest request , HttpServletResponse response ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , request , response ) ; </a> 1
<a> return action ( request , response ) ; </a> 1
<a> } </a> 0
<a> public Action <RARE_TOKEN> ( HttpServletRequest request , HttpServletResponse response ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> AtmosphereResourceImpl <RARE_TOKEN> ; </a> 1
<a> long l = ( Long ) request . getAttribute ( <RARE_TOKEN> ) ; </a> 1
<a> if ( l == - 1 ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> request . setAttribute ( <RARE_TOKEN> , ( long ) - 1 ) ; </a> 1
<a> if ( request == null || response == null ) { </a> 1
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , request , response ) ; </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = ( AtmosphereResourceImpl ) request . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( true ) ; </a> 1
<a> Broadcaster b = <RARE_TOKEN> . getBroadcaster ( ) ; </a> 1
<a> if ( b instanceof <RARE_TOKEN> ) { </a> 0
<a> ( ( <RARE_TOKEN> ) b ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> if ( <RARE_TOKEN> . getRequest ( ) . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) != null ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( </a> 1
<a> ( Boolean ) <RARE_TOKEN> . getRequest ( ) . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> void <RARE_TOKEN> ( AtmosphereResourceImpl r ) throws IOException { </a> 1
<a> HttpServletRequest req = r . getRequest ( ) ; </a> 1
<a> HttpServletResponse response = r . getResponse ( ) ; </a> 1
<a> String <RARE_TOKEN> = r . <RARE_TOKEN> ( ) . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> if ( ! r . getResponse ( ) . equals ( response ) ) { </a> 1
<a> logger . warn ( <RARE_TOKEN> response: {}" , response ) ; </a> 1
<a> } else if ( <RARE_TOKEN> == null || ! <RARE_TOKEN> . equals ( String . valueOf ( true ) ) ) { </a> 1
<a> AtmosphereHandler < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> = </a> 0
<a> ( AtmosphereHandler < HttpServletRequest , HttpServletResponse > ) </a> 0
<a> req . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( r . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 1
<a> r . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } catch ( IOException ex ) { </a> 0
<a> try { </a> 0
<a> r . <RARE_TOKEN> ( ex ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( "failed <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> . remove ( req ) ; </a> 1
<a> r . <RARE_TOKEN> ( ) ; </a> 1
<a> } finally { </a> 1
<a> <RARE_TOKEN> ( r ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( AtmosphereResourceImpl r ) { </a> 1
<a> r . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> r . getBroadcaster ( ) . <RARE_TOKEN> ( r ) ; </a> 1
<a> } catch ( IllegalStateException ex ) { </a> 1
<a> logger . trace ( ex . getMessage ( ) , ex ) ; </a> 1
<a> } </a> 1
<a> if ( BroadcasterFactory . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( r ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Action <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> AtmosphereResourceImpl <RARE_TOKEN> = null ; </a> 1
<a> long l = ( Long ) req . getAttribute ( <RARE_TOKEN> ) ; </a> 1
<a> if ( l == - 1 ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> req . setAttribute ( <RARE_TOKEN> , ( long ) - 1 ) ; </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> = ( AtmosphereResourceImpl ) req . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( true ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 1
<a> } </a> 1
<a> } catch ( Throwable ex ) { </a> 1
<a> logger . debug ( "failed to cancel <RARE_TOKEN> " + <RARE_TOKEN> , ex ) ; </a> 1
<a> } finally { </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> . remove ( req ) ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } finally { </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void shutdown ( ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( AtmosphereResource < HttpServletRequest , HttpServletResponse > resource : <RARE_TOKEN> . values ( ) ) { </a> 0
<a> try { </a> 1
<a> resource . resume ( ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> logger . debug ( "failed <RARE_TOKEN> <RARE_TOKEN> " + resource , t ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEventListener e ) ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEventListener e ) ; </a> 0
<a> public void <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent e ) ; </a> 0
<a> public void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . Filter ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements Filter { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final AtmosphereServlet <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = new AtmosphereServlet ( true ) ; </a> 1
<a> } </a> 0
<a> public void init ( final <RARE_TOKEN> <RARE_TOKEN> ) throws ServletException { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> a <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . init ( new ServletConfig ( ) { </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> getServletContext ( ) { </a> 0
<a> return <RARE_TOKEN> . getServletContext ( ) ; </a> 0
<a> } </a> 0
<a> public String getInitParameter ( String name ) { </a> 0
<a> return <RARE_TOKEN> . getInitParameter ( name ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> < String > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> request , <RARE_TOKEN> response , <RARE_TOKEN> <RARE_TOKEN> ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> Action a = <RARE_TOKEN> . <RARE_TOKEN> ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; </a> 0
<a> if ( a == null || a . type != Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request , response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void destroy ( ) { </a> 0
<a> <RARE_TOKEN> . destroy ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> public interface AtmosphereHandler < <RARE_TOKEN> , <RARE_TOKEN> > { </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResource < <RARE_TOKEN> , <RARE_TOKEN> > resource ) throws IOException ; </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResourceEvent < <RARE_TOKEN> , <RARE_TOKEN> > event ) throws IOException ; </a> 0
<a> void destroy ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 1
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 1
<a> import java . io . IOException ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 1
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 1
<a> import java . util . Collections ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private final Map < String , String > headers ; </a> 1
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private final String contentType ; </a> 1
<a> private final HttpServletRequest request ; </a> 1
<a> private <RARE_TOKEN> ( Builder b ) { </a> 1
<a> super ( b . request ) ; </a> 0
<a> <RARE_TOKEN> = b . <RARE_TOKEN> == null ? b . request . <RARE_TOKEN> ( ) : b . <RARE_TOKEN> ; </a> 1
<a> request = b . request ; </a> 0
<a> headers = b . headers ; </a> 0
<a> if ( b . <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( b . <RARE_TOKEN> , b . offset , b . length ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( new <RARE_TOKEN> ( new String ( b . <RARE_TOKEN> , b . offset , b . length , b . <RARE_TOKEN> ) ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> throw new <RARE_TOKEN> ( e ) ; </a> 1
<a> } </a> 1
<a> } else if ( b . data != null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( b . data . getBytes ( ) , 0 , b . data . getBytes ( ) . length ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( new <RARE_TOKEN> ( b . data ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 1
<a> <RARE_TOKEN> = b . <RARE_TOKEN> == null ? b . request . <RARE_TOKEN> ( ) : b . <RARE_TOKEN> ; </a> 0
<a> contentType = b . contentType == null ? b . request . <RARE_TOKEN> ( ) : b . contentType ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return contentType ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public <RARE_TOKEN> getHeaders ( String name ) { </a> 1
<a> ArrayList list = Collections . list ( super . getHeaders ( name ) ) ; </a> 1
<a> if ( name . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 1
<a> list . add ( contentType ) ; </a> 1
<a> } </a> 1
<a> if ( headers . get ( name ) != null ) { </a> 1
<a> list . add ( headers . get ( name ) ) ; </a> 1
<a> } </a> 1
<a> if ( list . size ( ) == 0 && name . startsWith ( <RARE_TOKEN> ) ) { </a> 1
<a> if ( request . getAttribute ( name ) != null ) { </a> 0
<a> list . add ( request . getAttribute ( name ) ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> return Collections . <RARE_TOKEN> ( list ) ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> < String > <RARE_TOKEN> ( ) { </a> 1
<a> ArrayList list = Collections . list ( super . <RARE_TOKEN> ( ) ) ; </a> 1
<a> list . add ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> e = request . <RARE_TOKEN> ( ) ; </a> 0
<a> while ( e . <RARE_TOKEN> ( ) ) { </a> 1
<a> String name = e . <RARE_TOKEN> ( ) . toString ( ) ; </a> 1
<a> if ( name . startsWith ( <RARE_TOKEN> ) ) { </a> 1
<a> list . add ( name ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> for ( String s : headers . <RARE_TOKEN> ( ) ) { </a> 0
<a> list . add ( s ) ; </a> 0
<a> } </a> 1
<a> return Collections . <RARE_TOKEN> ( list ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public String getHeader ( String s ) { </a> 1
<a> if ( s . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } else if ( <RARE_TOKEN> . equalsIgnoreCase ( s ) ) { </a> 1
<a> return contentType ; </a> 1
<a> } else { </a> 1
<a> String name = super . getHeader ( s ) ; </a> 1
<a> if ( name == null ) { </a> 1
<a> if ( headers . get ( s ) != null ) { </a> 1
<a> return headers . get ( s ) ; </a> 1
<a> } </a> 1
<a> if ( s . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> return ( String ) request . getAttribute ( s ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> return name ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) throws IOException { </a> 1
<a> return <RARE_TOKEN> == null ? request . <RARE_TOKEN> ( ) : <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) throws IOException { </a> 1
<a> return <RARE_TOKEN> == null ? request . <RARE_TOKEN> ( ) : <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> private static class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( byte [ ] data , int offset , int length ) { </a> 1
<a> this . <RARE_TOKEN> = new <RARE_TOKEN> ( data , offset , length ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int read ( ) throws IOException { </a> 1
<a> return <RARE_TOKEN> . read ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public final static class Builder { </a> 1
<a> public HttpServletRequest request ; </a> 0
<a> public String <RARE_TOKEN> ; </a> 0
<a> public byte [ ] <RARE_TOKEN> ; </a> 0
<a> public int offset ; </a> 0
<a> public int length ; </a> 0
<a> public String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public String <RARE_TOKEN> ; </a> 0
<a> public String contentType ; </a> 0
<a> public String data ; </a> 0
<a> public Map < String , String > headers ; </a> 0
<a> public Builder ( ) { </a> 1
<a> } </a> 1
<a> public Builder headers ( Map < String , String > headers ) { </a> 1
<a> this . headers = headers ; </a> 0
<a> return this ; </a> 1
<a> } </a> 1
<a> public Builder request ( HttpServletRequest request ) { </a> 1
<a> this . request = request ; </a> 1
<a> return this ; </a> 1
<a> } </a> 1
<a> public Builder <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> return this ; </a> 1
<a> } </a> 1
<a> public Builder <RARE_TOKEN> ( byte [ ] <RARE_TOKEN> , int offset , int length ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> this . offset = offset ; </a> 1
<a> this . length = length ; </a> 1
<a> return this ; </a> 1
<a> } </a> 1
<a> public Builder <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> return this ; </a> 1
<a> } </a> 1
<a> public Builder method ( String <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> return this ; </a> 1
<a> } </a> 1
<a> public Builder contentType ( String contentType ) { </a> 1
<a> this . contentType = contentType ; </a> 1
<a> return this ; </a> 1
<a> } </a> 1
<a> public Builder <RARE_TOKEN> ( String data ) { </a> 1
<a> this . data = data ; </a> 1
<a> return this ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> build ( ) { </a> 1
<a> return new <RARE_TOKEN> ( this ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> public interface AtmosphereResourceEvent < E , <RARE_TOKEN> > { </a> 0
<a> public Object getMessage ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( Object o ) ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) ; </a> 0
<a> public boolean isCancelled ( ) ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) ; </a> 0
<a> public AtmosphereResource < E , <RARE_TOKEN> > getResource ( ) ; </a> 0
<a> public void write ( OutputStream os , Object o ) throws IOException ; </a> 0
<a> public Throwable throwable ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> public class <RARE_TOKEN> implements AtmosphereResourceEvent < HttpServletRequest , </a> 0
<a> HttpServletResponse > { </a> 0
<a> private final AtomicBoolean isCancelled = new AtomicBoolean ( false ) ; </a> 0
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 0
<a> private Throwable throwable ; </a> 0
<a> protected Object message ; </a> 0
<a> protected final AtmosphereResourceImpl resource ; </a> 1
<a> public <RARE_TOKEN> ( AtmosphereResourceImpl resource ) { </a> 0
<a> this . resource = resource ; </a> 0
<a> this . throwable = null ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( AtmosphereResourceImpl resource , boolean isCancelled , </a> 0
<a> boolean <RARE_TOKEN> ) { </a> 0
<a> this . isCancelled . set ( isCancelled ) ; </a> 0
<a> this . <RARE_TOKEN> . set ( <RARE_TOKEN> ) ; </a> 0
<a> this . resource = resource ; </a> 0
<a> this . throwable = null ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( AtmosphereResourceImpl resource , boolean isCancelled , </a> 0
<a> boolean <RARE_TOKEN> , </a> 0
<a> Throwable throwable ) { </a> 0
<a> this . isCancelled . set ( isCancelled ) ; </a> 0
<a> this . <RARE_TOKEN> . set ( <RARE_TOKEN> ) ; </a> 0
<a> this . resource = resource ; </a> 0
<a> this . throwable = throwable ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return resource . action ( ) . type == AtmosphereServlet . Action . TYPE . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return resource . action ( ) . type == AtmosphereServlet . Action . TYPE . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Object getMessage ( ) { </a> 0
<a> return message ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Object message ) { </a> 0
<a> this . message = message ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . get ( ) ; </a> 0
<a> } </a> 0
<a> public boolean isCancelled ( ) { </a> 0
<a> return isCancelled . get ( ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( boolean isCancelled ) { </a> 0
<a> this . isCancelled . set ( isCancelled ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> . set ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public Throwable throwable ( ) { </a> 0
<a> return throwable ; </a> 0
<a> } </a> 0
<a> public AtmosphereResource < HttpServletRequest , HttpServletResponse > getResource ( ) { </a> 0
<a> return resource ; </a> 0
<a> } </a> 0
<a> public void write ( OutputStream os , Object o ) throws IOException { </a> 0
<a> resource . write ( os , o ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Throwable t ) { </a> 0
<a> this . throwable = throwable ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ( ) + " <RARE_TOKEN> + isCancelled + ", <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + ", <RARE_TOKEN> + message + ", <RARE_TOKEN> + resource + ", <RARE_TOKEN> + throwable + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> public interface AtmosphereResourceEventListener { </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) ; </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) ; </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) ; </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) ; </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet . AtmosphereConfig ; </a> 0
<a> import org . slf4j . Logger ; </a> 1
<a> import org . slf4j . LoggerFactory ; </a> 1
<a> import javax . servlet . http . HttpServletRequest ; </a> 1
<a> import javax . servlet . http . HttpServletResponse ; </a> 1
<a> import java . io . IOException ; </a> 1
<a> import java . io . OutputStream ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 1
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 1
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 1
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> public class AtmosphereResourceImpl implements </a> 0
<a> AtmosphereResource < HttpServletRequest , HttpServletResponse > , <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( AtmosphereResourceImpl . class ) ; </a> 0
<a> public static final String <RARE_TOKEN> = AtmosphereResourceImpl . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> private final HttpServletRequest req ; </a> 0
<a> private final HttpServletResponse response ; </a> 0
<a> protected final AtmosphereServlet . Action action = new AtmosphereServlet . Action ( ) ; </a> 0
<a> protected Broadcaster broadcaster ; </a> 1
<a> private final AtmosphereConfig config ; </a> 0
<a> protected final <RARE_TOKEN> cometSupport ; </a> 1
<a> private <RARE_TOKEN> serializer ; </a> 0
<a> private boolean <RARE_TOKEN> = true ; </a> 0
<a> private final <RARE_TOKEN> event ; </a> 0
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> private boolean <RARE_TOKEN> = true ; </a> 0
<a> private final ConcurrentLinkedQueue < AtmosphereResourceEventListener > listeners = </a> 0
<a> new ConcurrentLinkedQueue < AtmosphereResourceEventListener > ( ) ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 0
<a> private final AtmosphereHandler <RARE_TOKEN> ; </a> 1
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public AtmosphereResourceImpl ( AtmosphereConfig config , Broadcaster broadcaster , </a> 0
<a> HttpServletRequest req , HttpServletResponse response , </a> 0
<a> <RARE_TOKEN> cometSupport , AtmosphereHandler <RARE_TOKEN> ) { </a> 1
<a> this . req = req ; </a> 0
<a> this . response = response ; </a> 0
<a> this . broadcaster = broadcaster ; </a> 1
<a> this . config = config ; </a> 0
<a> this . cometSupport = cometSupport ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . event = new <RARE_TOKEN> ( this ) ; </a> 0
<a> String <RARE_TOKEN> = config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> != null ? false : true ; </a> 1
<a> String <RARE_TOKEN> = config . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> != null ? ! Boolean . <RARE_TOKEN> ( <RARE_TOKEN> ) : true ; </a> 0
<a> String <RARE_TOKEN> = config . getInitParameter ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> != null ? Boolean . <RARE_TOKEN> ( <RARE_TOKEN> ) : true ; </a> 0
<a> req . setAttribute ( ApplicationConfig . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> req . setAttribute ( ApplicationConfig . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return event ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public AtmosphereHandler <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void resume ( ) { </a> 0
<a> if ( ! event . <RARE_TOKEN> ( ) && ! event . <RARE_TOKEN> ( ) && event . <RARE_TOKEN> ( ) && <RARE_TOKEN> ) { </a> 1
<a> action . type = AtmosphereServlet . Action . TYPE . <RARE_TOKEN> ; </a> 0
<a> Broadcaster b = getBroadcaster ( ) ; </a> 0
<a> if ( b instanceof <RARE_TOKEN> ) { </a> 0
<a> ( ( <RARE_TOKEN> ) b ) . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> listeners . clear ( ) ; </a> 0
<a> try { </a> 1
<a> broadcaster . <RARE_TOKEN> ( this ) ; </a> 1
<a> } catch ( IllegalStateException ex ) { </a> 1
<a> logger . warn ( <RARE_TOKEN> to <RARE_TOKEN> , this ) ; </a> 1
<a> logger . debug ( ex . getMessage ( ) , ex ) ; </a> 1
<a> } </a> 0
<a> if ( BroadcasterFactory . <RARE_TOKEN> ( ) != null ) { </a> 1
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( this ) ; </a> 1
<a> } </a> 0
<a> try { </a> 0
<a> req . setAttribute ( ApplicationConfig . <RARE_TOKEN> , Boolean . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> resume an <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> if ( req . getAttribute ( <RARE_TOKEN> ) == null ) { </a> 0
<a> cometSupport . action ( this ) ; </a> 1
<a> } </a> 0
<a> } else { </a> 0
<a> logger . debug ( <RARE_TOKEN> resume an <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void suspend ( ) { </a> 1
<a> suspend ( - 1 ) ; </a> 1
<a> } </a> 0
<a> public void suspend ( long timeout ) { </a> 1
<a> suspend ( timeout , true ) ; </a> 1
<a> } </a> 0
<a> public void suspend ( long timeout , TimeUnit <RARE_TOKEN> ) { </a> 1
<a> suspend ( timeout , <RARE_TOKEN> , true ) ; </a> 1
<a> } </a> 0
<a> public void suspend ( long timeout , TimeUnit <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 1
<a> long <RARE_TOKEN> = - 1 ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = TimeUnit . MILLISECONDS . <RARE_TOKEN> ( timeout , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> suspend ( <RARE_TOKEN> , true ) ; </a> 1
<a> } </a> 0
<a> public void suspend ( long timeout , boolean <RARE_TOKEN> ) { </a> 1
<a> if ( req . getSession ( false ) != null && req . getSession ( ) . <RARE_TOKEN> ( ) != - 1 && req . getSession ( ) . <RARE_TOKEN> ( ) * 1000 < timeout ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> suspend a " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the session <RARE_TOKEN> <RARE_TOKEN> the value of <RARE_TOKEN> in <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( req . getAttribute ( <RARE_TOKEN> . <RARE_TOKEN> ) != null ) { </a> 1
<a> req . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> if ( ! event . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( req . getHeaders ( <RARE_TOKEN> ) != null && req . getHeaders ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> String [ ] e = req . getHeaders ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) . split ( <RARE_TOKEN> ) ; </a> 1
<a> for ( String <RARE_TOKEN> : e ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( <RARE_TOKEN> && ! cometSupport . <RARE_TOKEN> ( ) ) { </a> 1
<a> response . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> ) { </a> 1
<a> response . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> response . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> response . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> ) { </a> 0
<a> response . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> response . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> write ( ) ; </a> 1
<a> } </a> 0
<a> req . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> action . type = AtmosphereServlet . Action . TYPE . <RARE_TOKEN> ; </a> 0
<a> action . timeout = timeout ; </a> 0
<a> if ( broadcaster . <RARE_TOKEN> ( ) == Broadcaster . SCOPE . <RARE_TOKEN> ) { </a> 0
<a> String id = broadcaster . <RARE_TOKEN> ( ) ; </a> 1
<a> Class < ? extends Broadcaster > clazz = broadcaster . getClass ( ) ; </a> 1
<a> broadcaster = BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( clazz , id , false ) ; </a> 1
<a> if ( broadcaster == null || broadcaster . <RARE_TOKEN> ( ) . size ( ) > 0 ) { </a> 0
<a> broadcaster = BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( clazz , id + "/" + <RARE_TOKEN> . <RARE_TOKEN> ( ) , true ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> broadcaster . <RARE_TOKEN> ( this ) ; </a> 0
<a> req . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void write ( ) { </a> 1
<a> try { </a> 0
<a> if ( <RARE_TOKEN> && ! ( ( Boolean ) req . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) ) ) { </a> 0
<a> try { </a> 0
<a> response . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IllegalStateException e ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> response . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> ) ; </a> 1
<a> response . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } else { </a> 0
<a> try { </a> 0
<a> response . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IllegalStateException e ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> response . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> . getBytes ( ) ) ; </a> 1
<a> response . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable ex ) { </a> 0
<a> logger . warn ( "failed to write to <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public HttpServletRequest getRequest ( ) { </a> 1
<a> if ( ! <RARE_TOKEN> ) { </a> 1
<a> throw new IllegalStateException ( <RARE_TOKEN> object <RARE_TOKEN> <RARE_TOKEN> + " <RARE_TOKEN> <RARE_TOKEN> object has <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return req ; </a> 0
<a> } </a> 0
<a> public HttpServletResponse getResponse ( ) { </a> 1
<a> if ( ! <RARE_TOKEN> ) { </a> 1
<a> throw new IllegalStateException ( <RARE_TOKEN> object <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> object has <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return response ; </a> 0
<a> } </a> 0
<a> public Broadcaster getBroadcaster ( ) { </a> 0
<a> if ( broadcaster == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> Broadcaster <RARE_TOKEN> <RARE_TOKEN> this <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return broadcaster ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Broadcaster broadcaster ) { </a> 1
<a> this . broadcaster = broadcaster ; </a> 1
<a> if ( broadcaster != null ) { </a> 0
<a> broadcaster . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( config ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public AtmosphereConfig <RARE_TOKEN> ( ) { </a> 0
<a> return config ; </a> 0
<a> } </a> 0
<a> public Action action ( ) { </a> 0
<a> return action ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> s ) { </a> 1
<a> serializer = s ; </a> 0
<a> } </a> 0
<a> public void write ( OutputStream os , Object o ) throws IOException { </a> 1
<a> if ( o == null ) throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> if ( serializer != null ) { </a> 0
<a> serializer . write ( os , o ) ; </a> 0
<a> } else { </a> 0
<a> response . <RARE_TOKEN> ( ) . write ( o . toString ( ) . getBytes ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return serializer ; </a> 0
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( ) { </a> 0
<a> StringBuilder s = new StringBuilder ( ) ; </a> 0
<a> s . append ( <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> s . append ( <RARE_TOKEN> <RARE_TOKEN> to the <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> must output <RARE_TOKEN> + </a> 0
<a> " data to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> for ( int i = 0 ; i < 10 ; i ++ ) { </a> 0
<a> s . append ( <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> s . append ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return s . toString ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEventListener e ) { </a> 0
<a> if ( listeners . contains ( e ) ) return ; </a> 0
<a> listeners . add ( e ) ; </a> 0
<a> } </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEventListener e ) { </a> 0
<a> listeners . remove ( e ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> listeners . clear ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( event ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent event ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> listener <RARE_TOKEN> {}" , event ) ; </a> 0
<a> if ( event . <RARE_TOKEN> ( ) || event . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( event ) ; </a> 0
<a> } else if ( event . isCancelled ( ) ) { </a> 0
<a> <RARE_TOKEN> ( event ) ; </a> 0
<a> } else if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( true ) && event . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( event ) ; </a> 0
<a> } else if ( event . throwable ( ) != null ) { </a> 0
<a> <RARE_TOKEN> ( event ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( event ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Throwable t ) { </a> 0
<a> <RARE_TOKEN> ( new <RARE_TOKEN> ( this , false , false , t ) ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResourceEvent e ) { </a> 0
<a> AtmosphereHandler < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> = </a> 0
<a> ( AtmosphereHandler < HttpServletRequest , HttpServletResponse > ) </a> 0
<a> req . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 1
<a> for ( AtmosphereResourceEventListener r : listeners ) { </a> 0
<a> r . <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > e ) { </a> 0
<a> for ( AtmosphereResourceEventListener r : listeners ) { </a> 0
<a> r . <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > e ) { </a> 0
<a> for ( AtmosphereResourceEventListener r : listeners ) { </a> 0
<a> r . <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > e ) { </a> 0
<a> for ( AtmosphereResourceEventListener r : listeners ) { </a> 0
<a> r . <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > e ) { </a> 0
<a> for ( AtmosphereResourceEventListener r : listeners ) { </a> 0
<a> r . <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public ConcurrentLinkedQueue < AtmosphereResourceEventListener > <RARE_TOKEN> ( ) { </a> 0
<a> return listeners ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public String toString ( ) { </a> 1
<a> return <RARE_TOKEN> + </a> 0
<a> ", <RARE_TOKEN> + action + </a> 0
<a> ", <RARE_TOKEN> + broadcaster . getClass ( ) . getName ( ) + </a> 0
<a> ", <RARE_TOKEN> + cometSupport + </a> 0
<a> ", <RARE_TOKEN> + serializer + </a> 0
<a> ", <RARE_TOKEN> + <RARE_TOKEN> + </a> 0
<a> ", <RARE_TOKEN> + <RARE_TOKEN> + </a> 0
<a> ", <RARE_TOKEN> + listeners + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 1
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . handler . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . websocket . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . websocket . WebSocket ; </a> 0
<a> import org . atmosphere . websocket . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . servlet . http . <RARE_TOKEN> ; </a> 1
<a> import org . jboss . servlet . http . <RARE_TOKEN> ; </a> 1
<a> import org . slf4j . Logger ; </a> 1
<a> import org . slf4j . LoggerFactory ; </a> 1
<a> import <RARE_TOKEN> . servlet . http . <RARE_TOKEN> ; </a> 0
<a> import <RARE_TOKEN> . servlet . http . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . File ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 1
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 1
<a> import static org . atmosphere . cpr . FrameworkConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . FrameworkConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . FrameworkConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . FrameworkConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . FrameworkConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . FrameworkConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . FrameworkConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . FrameworkConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . FrameworkConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> public class AtmosphereServlet extends <RARE_TOKEN> implements <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> { </a> 1
<a> private static final Logger logger = LoggerFactory . getLogger ( AtmosphereServlet . class ) ; </a> 0
<a> private final ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> private final HashMap < String , String > <RARE_TOKEN> = new HashMap < String , String > ( ) ; </a> 0
<a> protected final AtmosphereConfig config = new AtmosphereConfig ( ) ; </a> 0
<a> protected final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 0
<a> protected final boolean <RARE_TOKEN> ; </a> 0
<a> public static String [ ] <RARE_TOKEN> = new String [ 0 ] ; </a> 0
<a> protected final Map < String , <RARE_TOKEN> > <RARE_TOKEN> = </a> 0
<a> new ConcurrentHashMap < String , <RARE_TOKEN> > ( ) ; </a> 0
<a> private final ConcurrentLinkedQueue < String > <RARE_TOKEN> = new ConcurrentLinkedQueue < String > ( ) ; </a> 0
<a> protected boolean <RARE_TOKEN> = false ; </a> 0
<a> protected boolean <RARE_TOKEN> = false ; </a> 0
<a> protected boolean <RARE_TOKEN> = false ; </a> 0
<a> protected <RARE_TOKEN> cometSupport ; </a> 0
<a> protected static String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) ; </a> 0
<a> protected boolean <RARE_TOKEN> = false ; </a> 0
<a> protected boolean <RARE_TOKEN> = false ; </a> 0
<a> protected boolean <RARE_TOKEN> = false ; </a> 0
<a> private BroadcasterFactory <RARE_TOKEN> ; </a> 0
<a> protected String <RARE_TOKEN> ; </a> 0
<a> protected static String <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 1
<a> private String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) ; </a> 0
<a> public static final class <RARE_TOKEN> { </a> 0
<a> public final AtmosphereHandler <RARE_TOKEN> ; </a> 0
<a> public Broadcaster broadcaster ; </a> 0
<a> public <RARE_TOKEN> ( AtmosphereHandler <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> broadcaster = BroadcasterFactory . <RARE_TOKEN> ( ) . get ( ) ; </a> 0
<a> } catch ( Exception t ) { </a> 0
<a> throw new <RARE_TOKEN> ( t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( AtmosphereHandler <RARE_TOKEN> , Broadcaster broadcaster ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . broadcaster = broadcaster ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + ", <RARE_TOKEN> + </a> 0
<a> broadcaster + " <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public AtmosphereConfig <RARE_TOKEN> ( ) { </a> 1
<a> return config ; </a> 1
<a> } </a> 1
<a> public class AtmosphereConfig { </a> 0
<a> private boolean <RARE_TOKEN> = true ; </a> 0
<a> private BroadcasterFactory <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private Map < String , Object > <RARE_TOKEN> = new HashMap < String , Object > ( ) ; </a> 0
<a> protected Map < String , <RARE_TOKEN> > <RARE_TOKEN> ( ) { </a> 0
<a> return AtmosphereServlet . this . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> getServletContext ( ) { </a> 0
<a> return AtmosphereServlet . this . getServletContext ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String getInitParameter ( String name ) { </a> 0
<a> String s = <RARE_TOKEN> . get ( name ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> return s ; </a> 0
<a> } </a> 0
<a> return AtmosphereServlet . this . getInitParameter ( name ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return AtmosphereServlet . this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public ServletConfig <RARE_TOKEN> ( ) { </a> 0
<a> return AtmosphereServlet . this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return AtmosphereServlet . this . cometSupport . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public BroadcasterFactory <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public AtmosphereServlet <RARE_TOKEN> ( ) { </a> 0
<a> return AtmosphereServlet . this ; </a> 0
<a> } </a> 0
<a> public Map < String , Object > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class Action { </a> 0
<a> public enum TYPE { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> public long timeout = - <RARE_TOKEN> ; </a> 0
<a> public TYPE type ; </a> 0
<a> public Action ( ) { </a> 0
<a> type = TYPE . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Action ( TYPE type ) { </a> 0
<a> this . type = type ; </a> 0
<a> } </a> 0
<a> public Action ( TYPE type , long timeout ) { </a> 0
<a> this . timeout = timeout ; </a> 0
<a> this . type = type ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public AtmosphereServlet ( ) { </a> 0
<a> this ( false ) ; </a> 0
<a> } </a> 0
<a> public AtmosphereServlet ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 1
<a> Class < ? extends Broadcaster > b = null ; </a> 1
<a> String <RARE_TOKEN> = AtmosphereServlet . <RARE_TOKEN> ( ) ; </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> b = ( Class < ? extends Broadcaster > ) <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> logger . error ( "failed to <RARE_TOKEN> default broadcaster class <RARE_TOKEN> " + <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 1
<a> Class bc = ( b == null ? <RARE_TOKEN> . class : b ) ; </a> 1
<a> BroadcasterFactory . <RARE_TOKEN> ( new <RARE_TOKEN> ( bc , <RARE_TOKEN> ) , config ) ; </a> 0
<a> } </a> 1
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String mapping , AtmosphereHandler h ) { </a> 0
<a> if ( ! mapping . startsWith ( "/" ) ) { </a> 0
<a> mapping = "/" + mapping ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> w = new <RARE_TOKEN> ( h ) ; </a> 0
<a> <RARE_TOKEN> . put ( mapping , w ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> AtmosphereHandler <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> {}" , h . getClass ( ) . getName ( ) , mapping ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String mapping , AtmosphereHandler h , String <RARE_TOKEN> ) { </a> 0
<a> if ( ! mapping . startsWith ( "/" ) ) { </a> 0
<a> mapping = "/" + mapping ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> w = new <RARE_TOKEN> ( h ) ; </a> 0
<a> w . broadcaster . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( mapping , w ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> AtmosphereHandler <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> {}" , h . getClass ( ) . getName ( ) , mapping ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String mapping , AtmosphereHandler < HttpServletRequest , HttpServletResponse > h , Broadcaster broadcaster ) { </a> 0
<a> if ( ! mapping . startsWith ( "/" ) ) { </a> 0
<a> mapping = "/" + mapping ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> w = new <RARE_TOKEN> ( h , broadcaster ) ; </a> 0
<a> <RARE_TOKEN> . put ( mapping , w ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> AtmosphereHandler <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> {}" , h . getClass ( ) . getName ( ) , mapping ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( String mapping ) { </a> 0
<a> return <RARE_TOKEN> . remove ( mapping ) == null ? false : true ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String name , String value ) { </a> 0
<a> <RARE_TOKEN> . put ( name , value ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> if ( System . getProperty ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = Boolean </a> 0
<a> . <RARE_TOKEN> ( System . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> if ( System . getProperty ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = Boolean </a> 0
<a> . <RARE_TOKEN> ( System . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> if ( System . getProperty ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , System . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void init ( final ServletConfig sc ) throws ServletException { </a> 0
<a> try { </a> 0
<a> super . init ( sc ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> ServletConfig <RARE_TOKEN> = new ServletConfig ( ) { </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return sc . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> getServletContext ( ) { </a> 0
<a> return sc . getServletContext ( ) ; </a> 0
<a> } </a> 0
<a> public String getInitParameter ( String name ) { </a> 0
<a> String <RARE_TOKEN> = sc . getInitParameter ( name ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return <RARE_TOKEN> . get ( name ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> < String > <RARE_TOKEN> ( ) { </a> 0
<a> return sc . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( sc . getServletContext ( ) ) ; </a> 1
<a> <RARE_TOKEN> ( sc ) ; </a> 0
<a> cometSupport . init ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> broadcaster <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . error ( "failed to <RARE_TOKEN> atmosphere <RARE_TOKEN> , t ) ; </a> 0
<a> if ( t instanceof ServletException ) { </a> 0
<a> throw ( ServletException ) t ; </a> 0
<a> } </a> 0
<a> throw new ServletException ( t . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ServletConfig sc ) { </a> 0
<a> String s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , ( AtmosphereHandler < ? , ? > ) <RARE_TOKEN> . <RARE_TOKEN> ( s ) . newInstance ( ) ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> sc ) throws <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> logger . info ( <RARE_TOKEN> BroadcasterFactory <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> = ( BroadcasterFactory ) Thread . currentThread ( ) . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) . newInstance ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> Class < ? extends Broadcaster > bc = </a> 0
<a> ( Class < ? extends Broadcaster > ) Thread . currentThread ( ) . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( bc , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sc . setAttribute ( BroadcasterFactory . class . getName ( ) , <RARE_TOKEN> ) ; </a> 1
<a> config . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> BroadcasterFactory . <RARE_TOKEN> ( <RARE_TOKEN> , config ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . inject ( <RARE_TOKEN> ) ; </a> 0
<a> Iterator < Entry < String , <RARE_TOKEN> > > i = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> w ; </a> 0
<a> Entry < String , <RARE_TOKEN> > e ; </a> 0
<a> while ( i . <RARE_TOKEN> ( ) ) { </a> 0
<a> e = i . next ( ) ; </a> 0
<a> w = e . getValue ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , config ) ; </a> 0
<a> if ( w . broadcaster == null ) { </a> 0
<a> w . broadcaster = <RARE_TOKEN> . get ( ) ; </a> 1
<a> } else { </a> 0
<a> w . broadcaster . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> cache = ( <RARE_TOKEN> ) Thread . currentThread ( ) . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) . newInstance ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . inject ( cache ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( cache ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> w . broadcaster . <RARE_TOKEN> ( e . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ServletConfig sc ) { </a> 0
<a> String s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> = s ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ServletConfig sc ) { </a> 0
<a> String s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> = Boolean . <RARE_TOKEN> ( s ) ; </a> 0
<a> if ( <RARE_TOKEN> ) <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> = Boolean . <RARE_TOKEN> ( s ) ; </a> 0
<a> if ( <RARE_TOKEN> ) <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> = Boolean . <RARE_TOKEN> ( s ) ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> cometSupport = new <RARE_TOKEN> ( config ) . <RARE_TOKEN> ( s ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> = s ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> = s ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> config . <RARE_TOKEN> = Boolean . valueOf ( s ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , s ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , s ) ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> = s . split ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> = s ; </a> 0
<a> } </a> 0
<a> s = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> <RARE_TOKEN> = s ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ServletConfig sc ) throws ServletException { </a> 0
<a> try { </a> 0
<a> URL url = sc . getServletContext ( ) . getResource ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( new URL [ ] { url } , </a> 0
<a> Thread . currentThread ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( sc . getServletContext ( ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . size ( ) == 0 ) { </a> 0
<a> <RARE_TOKEN> ( sc . getServletContext ( ) , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . size ( ) == 0 ) { </a> 0
<a> <RARE_TOKEN> ( sc ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> throw new ServletException ( t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected boolean <RARE_TOKEN> ( ServletConfig sc ) throws <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String mapping = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( mapping == null ) { </a> 0
<a> mapping = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> Class < ? extends Broadcaster > bc = ( Class < ? extends Broadcaster > ) <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Broadcaster b = BroadcasterFactory . <RARE_TOKEN> ( ) . get ( bc , mapping ) ; </a> 0
<a> <RARE_TOKEN> ( mapping , <RARE_TOKEN> , b ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> protected String <RARE_TOKEN> ( ) { </a> 0
<a> for ( String b : <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> Class . <RARE_TOKEN> ( b ) ; </a> 0
<a> return b ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> config . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ServletConfig sc ) throws ServletException { </a> 0
<a> AtmosphereHandler a ; </a> 0
<a> for ( Entry < String , <RARE_TOKEN> > h : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> a = h . getValue ( ) . <RARE_TOKEN> ; </a> 1
<a> if ( a instanceof <RARE_TOKEN> ) { </a> 0
<a> ( ( <RARE_TOKEN> ) a ) . init ( sc ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void destroy ( ) { </a> 0
<a> if ( cometSupport != null && <RARE_TOKEN> . class . isAssignableFrom ( cometSupport . getClass ( ) ) ) { </a> 0
<a> ( ( <RARE_TOKEN> ) cometSupport ) . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> for ( Entry < String , <RARE_TOKEN> > entry : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = entry . getValue ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> . destroy ( ) ; </a> 0
<a> Broadcaster broadcaster = <RARE_TOKEN> . broadcaster ; </a> 0
<a> if ( broadcaster != null ) { </a> 0
<a> broadcaster . destroy ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> BroadcasterFactory factory = BroadcasterFactory . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( factory != null ) { </a> 0
<a> factory . destroy ( ) ; </a> 0
<a> BroadcasterFactory . factory = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( InputStream stream , <RARE_TOKEN> c ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> if ( stream == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( stream ) ; </a> 0
<a> Map < String , String > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Set < Entry < String , String > > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( Entry < String , String > entry : <RARE_TOKEN> ) { </a> 0
<a> AtmosphereHandler handler ; </a> 0
<a> String <RARE_TOKEN> = entry . getValue ( ) ; </a> 0
<a> String <RARE_TOKEN> = entry . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> if ( ! <RARE_TOKEN> . equals ( <RARE_TOKEN> . class . getName ( ) ) ) { </a> 0
<a> handler = ( AtmosphereHandler ) c . <RARE_TOKEN> ( <RARE_TOKEN> ) . newInstance ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . inject ( handler ) ; </a> 0
<a> } else { </a> 0
<a> handler = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> logger . info ( <RARE_TOKEN> AtmosphereHandler <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> {}" , handler , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> wrapper = new <RARE_TOKEN> ( handler ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , wrapper ) ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> for ( <RARE_TOKEN> p : <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( p . value != null && p . value . indexOf ( <RARE_TOKEN> ) != - 1 ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . setProperty ( handler , p . name , p . value ) ; </a> 0
<a> } </a> 0
<a> config . <RARE_TOKEN> = ! <RARE_TOKEN> ; </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) . equals ( "" ) ) { </a> 0
<a> <RARE_TOKEN> ( Boolean . valueOf ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> for ( <RARE_TOKEN> p : <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( handler , p . name , p . value ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> Class < ? extends Broadcaster > bc = ( Class < ? extends Broadcaster > ) <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> wrapper . broadcaster = BroadcasterFactory . <RARE_TOKEN> ( ) . get ( bc , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> String bc = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( bc != null ) { </a> 0
<a> <RARE_TOKEN> = bc ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> cometSupport = ( <RARE_TOKEN> ) c . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) </a> 0
<a> . <RARE_TOKEN> ( new Class [ ] { AtmosphereConfig . class } ) </a> 0
<a> . newInstance ( new Object [ ] { config } ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> to <RARE_TOKEN> AtmosphereHandler <RARE_TOKEN> " + <RARE_TOKEN> , t ) ; </a> 0
<a> throw new ServletException ( t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> cometSupport ) { </a> 0
<a> this . cometSupport = cometSupport ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return cometSupport ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( config ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) == null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> logger . info ( <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> {}" , </a> 0
<a> <RARE_TOKEN> ( ) . getClass ( ) . getName ( ) , cometSupport . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) </a> 0
<a> throws <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> atmosphere <RARE_TOKEN> in <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> URL <RARE_TOKEN> = <RARE_TOKEN> . getResource ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) return ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . getPath ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> File file = new File ( <RARE_TOKEN> ) ; </a> 0
<a> if ( file . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( file ) ; </a> 0
<a> for ( String <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) . <RARE_TOKEN> ( "/" , <RARE_TOKEN> ) ; </a> 0
<a> Class < ? > clazz = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( AtmosphereHandler . class . isAssignableFrom ( clazz ) ) { </a> 0
<a> AtmosphereHandler handler = ( AtmosphereHandler ) clazz . newInstance ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . inject ( handler ) ; </a> 0
<a> <RARE_TOKEN> . put ( "/" + handler . getClass ( ) . getSimpleName ( ) , </a> 0
<a> new <RARE_TOKEN> ( handler , null ) ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> AtmosphereHandler <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> {}" , handler , handler . getClass ( ) . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . trace ( "failed to <RARE_TOKEN> class <RARE_TOKEN> an <RARE_TOKEN> " + <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( File f ) { </a> 0
<a> File [ ] <RARE_TOKEN> = f . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( File test : <RARE_TOKEN> ) { </a> 0
<a> if ( test . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( test ) ; </a> 0
<a> } else { </a> 0
<a> String clazz = test . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( clazz . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . add ( clazz ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 0
<a> public Action <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> req . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> req . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> req . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> req . setAttribute ( <RARE_TOKEN> , config . getInitParameter ( <RARE_TOKEN> ) ) ; </a> 1
<a> try { </a> 0
<a> if ( config . getInitParameter ( <RARE_TOKEN> ) != null </a> 0
<a> && <RARE_TOKEN> ( req ) </a> 1
<a> && req . getAttribute ( WebSocket . <RARE_TOKEN> ) == null ) { </a> 0
<a> Map < String , String > headers = <RARE_TOKEN> ( req ) ; </a> 0
<a> String <RARE_TOKEN> = headers . remove ( <RARE_TOKEN> ) ; </a> 0
<a> return cometSupport . service ( new <RARE_TOKEN> . Builder ( ) </a> 1
<a> . headers ( headers ) </a> 0
<a> . method ( <RARE_TOKEN> != null ? <RARE_TOKEN> : <RARE_TOKEN> ) </a> 1
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . request ( req ) . build ( ) , res ) ; </a> 1
<a> } else { </a> 0
<a> return cometSupport . service ( req , res ) ; </a> 0
<a> } </a> 0
<a> } catch ( IllegalStateException ex ) { </a> 0
<a> logger . warn ( ex . getMessage ( ) , ex ) ; </a> 0
<a> if ( ex . getMessage ( ) != null && ex . getMessage ( ) . startsWith ( <RARE_TOKEN> failed" ) ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> logger . warn ( "Failed <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , cometSupport . getClass ( ) . getName ( ) , </a> 0
<a> ex . getMessage ( ) ) ; </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> cometSupport = new <RARE_TOKEN> ( config ) ; </a> 0
<a> service ( req , res ) ; </a> 0
<a> } else { </a> 0
<a> logger . error ( <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> throw ex ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public void event ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException , ServletException { </a> 1
<a> HttpServletRequest req = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> HttpServletResponse res = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> req . setAttribute ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> if ( ! <RARE_TOKEN> && ! <RARE_TOKEN> . <RARE_TOKEN> ( true ) ) { </a> 0
<a> synchronized ( cometSupport ) { </a> 0
<a> if ( ! cometSupport . getClass ( ) . equals ( <RARE_TOKEN> . class ) ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> ) ; </a> 1
<a> cometSupport = new <RARE_TOKEN> ( config ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 1
<a> public void event ( org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> ) throws IOException , ServletException { </a> 1
<a> HttpServletRequest req = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> HttpServletResponse res = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> req . setAttribute ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> if ( ! <RARE_TOKEN> && ! <RARE_TOKEN> . <RARE_TOKEN> ( true ) ) { </a> 0
<a> synchronized ( cometSupport ) { </a> 0
<a> if ( ! cometSupport . getClass ( ) . equals ( <RARE_TOKEN> . class ) ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> ) ; </a> 1
<a> cometSupport = new <RARE_TOKEN> ( config ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 1
<a> public void event ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException , ServletException { </a> 1
<a> HttpServletRequest req = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> HttpServletResponse res = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> req . setAttribute ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> if ( ! <RARE_TOKEN> && ! <RARE_TOKEN> . <RARE_TOKEN> ( true ) ) { </a> 0
<a> synchronized ( cometSupport ) { </a> 0
<a> if ( ! cometSupport . getClass ( ) . equals ( <RARE_TOKEN> . class ) ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> ) ; </a> 1
<a> cometSupport = new <RARE_TOKEN> ( config ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 1
<a> protected boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException , ServletException { </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> . getRequest ( ) . getSession ( ) . setAttribute ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> Action action = <RARE_TOKEN> ( <RARE_TOKEN> . getRequest ( ) , <RARE_TOKEN> . getResponse ( ) ) ; </a> 0
<a> if ( action . type == Action . TYPE . <RARE_TOKEN> ) { </a> 0
<a> if ( action . timeout == - 1 ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( Integer . MAX_VALUE ) ; </a> 1
<a> } else { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ( int ) action . timeout ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> return action . type == Action . TYPE . <RARE_TOKEN> ; </a> 0
<a> } catch ( IllegalStateException ex ) { </a> 1
<a> logger . error ( <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 1
<a> throw ex ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , Object context ) </a> 1
<a> throws IOException , ServletException { </a> 1
<a> <RARE_TOKEN> . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException , ServletException { </a> 1
<a> ( ( <RARE_TOKEN> ) cometSupport ) . <RARE_TOKEN> ( <RARE_TOKEN> . getRequest ( ) , <RARE_TOKEN> . getResponse ( ) ) ; </a> 0
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public BroadcasterFactory <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public AtmosphereServlet <RARE_TOKEN> ( final BroadcasterFactory <RARE_TOKEN> ) throws <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( config . getServletContext ( ) ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) throws <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( config . getServletContext ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected Map < String , String > <RARE_TOKEN> ( HttpServletRequest request ) { </a> 0
<a> Map < String , String > headers = new HashMap < String , String > ( ) ; </a> 0
<a> <RARE_TOKEN> < String > e = request . <RARE_TOKEN> ( ) ; </a> 0
<a> String s ; </a> 0
<a> while ( e . <RARE_TOKEN> ( ) ) { </a> 0
<a> s = e . <RARE_TOKEN> ( ) ; </a> 0
<a> headers . put ( s , request . <RARE_TOKEN> ( s ) ) ; </a> 0
<a> } </a> 0
<a> return headers ; </a> 0
<a> } </a> 0
<a> protected boolean <RARE_TOKEN> ( HttpServletRequest request ) { </a> 0
<a> String <RARE_TOKEN> = request . getHeader ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) return false ; </a> 1
<a> if ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) || <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) { </a> 1
<a> String transport = request . getHeader ( HeaderConfig . <RARE_TOKEN> ) ; </a> 1
<a> if ( transport != null ) { </a> 1
<a> return false ; </a> 1
<a> } else { </a> 1
<a> return true ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> public org . <RARE_TOKEN> . jetty . websocket . WebSocket <RARE_TOKEN> ( final HttpServletRequest request , final String <RARE_TOKEN> ) { </a> 1
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> request . setAttribute ( WebSocket . <RARE_TOKEN> , true ) ; </a> 1
<a> return new <RARE_TOKEN> ( request , this , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> public interface <RARE_TOKEN> extends </a> 1
<a> AtmosphereHandler < HttpServletRequest , HttpServletResponse > { </a> 0
<a> void init ( ServletConfig sc ) throws ServletException ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> public class BroadcastAction { </a> 0
<a> private final <RARE_TOKEN> a ; </a> 0
<a> private final Object o ; </a> 0
<a> private Object <RARE_TOKEN> ; </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> </a> 1
<a> } </a> 0
<a> public BroadcastAction ( <RARE_TOKEN> a , Object o ) { </a> 0
<a> this . a = a ; </a> 0
<a> this . o = o ; </a> 0
<a> } </a> 0
<a> public BroadcastAction ( Object o ) { </a> 0
<a> this . a = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> this . o = o ; </a> 0
<a> } </a> 0
<a> public Object message ( ) { </a> 0
<a> return o ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> action ( ) { </a> 0
<a> return a ; </a> 0
<a> } </a> 0
<a> public Object <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Object <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> BroadcastAction filter ( Object <RARE_TOKEN> , Object message ) ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . Future ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public interface Broadcaster extends <RARE_TOKEN> { </a> 1
<a> enum SCOPE { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( long <RARE_TOKEN> , <RARE_TOKEN> policy ) ; </a> 0
<a> < T > Future < T > broadcast ( T o ) ; </a> 1
<a> < T > Future < T > <RARE_TOKEN> ( T o ) ; </a> 1
<a> < T > Future < T > <RARE_TOKEN> ( T o , long delay , TimeUnit t ) ; </a> 1
<a> < T > Future < T > <RARE_TOKEN> ( T o , long period , TimeUnit t ) ; </a> 1
<a> < T > Future < T > <RARE_TOKEN> ( T o , long <RARE_TOKEN> , long period , TimeUnit t ) ; </a> 1
<a> < T > Future < T > broadcast ( T o , AtmosphereResource < ? , ? > resource ) ; </a> 0
<a> < T > Future < T > <RARE_TOKEN> ( T o ) ; </a> 1
<a> < T > Future < T > broadcast ( T o , Set < AtmosphereResource < ? , ? > > <RARE_TOKEN> ) ; </a> 0
<a> AtmosphereResource < ? , ? > <RARE_TOKEN> ( AtmosphereResource < ? , ? > resource ) ; </a> 0
<a> AtmosphereResource < ? , ? > <RARE_TOKEN> ( AtmosphereResource < ? , ? > resource ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> bc ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> void destroy ( ) ; </a> 0
<a> Collection < AtmosphereResource < ? , ? > > <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( SCOPE scope ) ; </a> 0
<a> SCOPE <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( String name ) ; </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> policy ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> b ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> b ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public abstract class BroadcasterFactory { </a> 1
<a> protected static BroadcasterFactory factory ; </a> 1
<a> protected static AtmosphereServlet . AtmosphereConfig config ; </a> 0
<a> abstract public Broadcaster get ( ) throws <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> abstract public Broadcaster get ( Class < ? extends Broadcaster > c , Object id ) throws <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> abstract public void destroy ( ) ; </a> 1
<a> abstract public boolean add ( Broadcaster b , Object id ) ; </a> 1
<a> abstract public boolean remove ( Broadcaster b , Object id ) ; </a> 1
<a> abstract public Broadcaster <RARE_TOKEN> ( Class < ? extends Broadcaster > c , Object id ) ; </a> 0
<a> abstract public Broadcaster <RARE_TOKEN> ( Class < ? extends Broadcaster > c , Object id , boolean <RARE_TOKEN> ) ; </a> 0
<a> abstract public void <RARE_TOKEN> ( AtmosphereResource < ? , ? > r ) ; </a> 0
<a> abstract public Collection < Broadcaster > <RARE_TOKEN> ( ) ; </a> 1
<a> public synchronized static BroadcasterFactory <RARE_TOKEN> ( ) { </a> 1
<a> return factory ; </a> 1
<a> } </a> 1
<a> static void <RARE_TOKEN> ( BroadcasterFactory f , AtmosphereServlet . AtmosphereConfig c ) { </a> 0
<a> factory = f ; </a> 1
<a> config = c ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import java . util . concurrent . CountDownLatch ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . Future ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> < E > implements Future { </a> 0
<a> private final CountDownLatch latch ; </a> 0
<a> private boolean isCancelled = false ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> private final E msg ; </a> 0
<a> private final Future < ? > <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( E msg ) { </a> 1
<a> this ( null , msg ) ; </a> 1
<a> } </a> 0
<a> public <RARE_TOKEN> ( Future < ? > <RARE_TOKEN> , E msg ) { </a> 1
<a> this . msg = msg ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> latch = new CountDownLatch ( 1 ) ; </a> 1
<a> } else { </a> 0
<a> latch = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean cancel ( boolean b ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> . cancel ( b ) ; </a> 0
<a> } </a> 0
<a> if ( latch . <RARE_TOKEN> ( ) == 1 ) { </a> 1
<a> latch . countDown ( ) ; </a> 0
<a> isCancelled = true ; </a> 1
<a> } </a> 0
<a> return isCancelled ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isCancelled ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> . isCancelled ( ) ; </a> 0
<a> } </a> 0
<a> return isCancelled ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void done ( ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 0
<a> if ( latch != null ) { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public E get ( ) throws InterruptedException , <RARE_TOKEN> { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return ( E ) <RARE_TOKEN> . get ( ) ; </a> 0
<a> } </a> 0
<a> latch . await ( ) ; </a> 0
<a> return msg ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public E get ( long l , TimeUnit <RARE_TOKEN> ) throws InterruptedException , <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return ( E ) <RARE_TOKEN> . get ( ) ; </a> 0
<a> } </a> 0
<a> latch . await ( l , <RARE_TOKEN> ) ; </a> 0
<a> return msg ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> private final <RARE_TOKEN> policy ; </a> 0
<a> private final int time ; </a> 0
<a> private final TimeUnit <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> ( <RARE_TOKEN> policy , int time , TimeUnit <RARE_TOKEN> ) { </a> 0
<a> this . policy = policy ; </a> 0
<a> this . time = time ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( <RARE_TOKEN> policy ) { </a> 0
<a> this . policy = policy ; </a> 0
<a> this . time = - 1 ; </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return policy ; </a> 0
<a> } </a> 0
<a> public TimeUnit <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return time ; </a> 0
<a> } </a> 0
<a> public static final class Builder { </a> 0
<a> private <RARE_TOKEN> policy ; </a> 0
<a> private int time ; </a> 0
<a> private TimeUnit <RARE_TOKEN> ; </a> 0
<a> public Builder policy ( <RARE_TOKEN> policy ) { </a> 0
<a> this . policy = policy ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( int time ) { </a> 0
<a> <RARE_TOKEN> = TimeUnit . MILLISECONDS ; </a> 0
<a> this . time = time ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( int time , TimeUnit <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . time = time ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> build ( ) { </a> 0
<a> return new <RARE_TOKEN> ( policy , time , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 1
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereServlet . Action ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 1
<a> import javax . servlet . ServletException ; </a> 1
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . <RARE_TOKEN> . event . <RARE_TOKEN> ; </a> 1
<a> import java . io . IOException ; </a> 1
<a> public interface <RARE_TOKEN> < E extends AtmosphereResource > { </a> 1
<a> public String <RARE_TOKEN> ( ) ; </a> 1
<a> public void init ( ServletConfig sc ) throws ServletException ; </a> 1
<a> public Action service ( HttpServletRequest req , HttpServletResponse res ) </a> 0
<a> throws IOException , ServletException ; </a> 1
<a> public void action ( E <RARE_TOKEN> ) ; </a> 1
<a> public boolean <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 1
<a> public interface <RARE_TOKEN> { </a> 1
<a> public <RARE_TOKEN> <RARE_TOKEN> ( final boolean <RARE_TOKEN> , final boolean <RARE_TOKEN> , </a> 1
<a> final boolean <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> . BroadcastAction ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> import java . util . concurrent . Future ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> import java . util . concurrent . atomic . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 1
<a> import static org . atmosphere . cpr . ApplicationConfig . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements Broadcaster { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 1
<a> protected final ConcurrentLinkedQueue < AtmosphereResource < ? , ? > > <RARE_TOKEN> = </a> 0
<a> new ConcurrentLinkedQueue < AtmosphereResource < ? , ? > > ( ) ; </a> 0
<a> protected <RARE_TOKEN> bc ; </a> 0
<a> protected final <RARE_TOKEN> < Entry > messages = new <RARE_TOKEN> < Entry > ( ) ; </a> 1
<a> protected final <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 1
<a> protected final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 0
<a> protected final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 0
<a> protected SCOPE scope = SCOPE . <RARE_TOKEN> ; </a> 0
<a> protected String name = <RARE_TOKEN> . class . getSimpleName ( ) ; </a> 0
<a> protected final ConcurrentLinkedQueue < Entry > <RARE_TOKEN> = new ConcurrentLinkedQueue < Entry > ( ) ; </a> 1
<a> protected final ConcurrentLinkedQueue < Entry > <RARE_TOKEN> = new ConcurrentLinkedQueue < Entry > ( ) ; </a> 1
<a> protected final ConcurrentLinkedQueue < <RARE_TOKEN> > <RARE_TOKEN> = new ConcurrentLinkedQueue < <RARE_TOKEN> > ( ) ; </a> 0
<a> protected Future < ? > <RARE_TOKEN> ; </a> 1
<a> protected Future < ? > <RARE_TOKEN> ; </a> 1
<a> protected <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> policy = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( - 1 ) ; </a> 1
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> . Builder ( ) </a> 0
<a> . policy ( <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) . build ( ) ; </a> 0
<a> private Future < ? > <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> . class . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String name ) { </a> 0
<a> this . name = name ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> bc = new <RARE_TOKEN> ( AtmosphereServlet . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( name ) ; </a> 0
<a> } </a> 0
<a> public synchronized void destroy ( ) { </a> 0
<a> if ( <RARE_TOKEN> . get ( ) ) return ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> . cancel ( true ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . set ( false ) ; </a> 0
<a> <RARE_TOKEN> . set ( true ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> . cancel ( true ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> . cancel ( true ) ; </a> 0
<a> } </a> 1
<a> if ( bc != null ) { </a> 0
<a> bc . destroy ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> messages . clear ( ) ; </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 1
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> if ( BroadcasterFactory . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . remove ( this , name ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Collection < AtmosphereResource < ? , ? > > <RARE_TOKEN> ( ) { </a> 0
<a> return Collections . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( SCOPE scope ) { </a> 0
<a> this . scope = scope ; </a> 0
<a> if ( scope != SCOPE . <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> for ( AtmosphereResource < ? , ? > resource : <RARE_TOKEN> ) { </a> 0
<a> Broadcaster b = BroadcasterFactory . <RARE_TOKEN> ( ) </a> 1
<a> . get ( getClass ( ) , getClass ( ) . getSimpleName ( ) + "/" + <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> if ( <RARE_TOKEN> . class . isAssignableFrom ( this . getClass ( ) ) ) { </a> 0
<a> <RARE_TOKEN> cache = bc . <RARE_TOKEN> ( ) . getClass ( ) . newInstance ( ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . inject ( cache ) ; </a> 1
<a> <RARE_TOKEN> . class . cast ( b ) . <RARE_TOKEN> = cache ; </a> 0
<a> } </a> 1
<a> resource . <RARE_TOKEN> ( b ) ; </a> 0
<a> if ( resource . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> b . <RARE_TOKEN> ( resource ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> destroy ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( "failed to set request scope for current <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public SCOPE <RARE_TOKEN> ( ) { </a> 0
<a> return scope ; </a> 0
<a> } </a> 0
<a> public synchronized void <RARE_TOKEN> ( String id ) { </a> 0
<a> if ( id == null ) { </a> 0
<a> id = getClass ( ) . getSimpleName ( ) + "/" + <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> Broadcaster b = BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( this . getClass ( ) , id ) ; </a> 1
<a> if ( b != null && b . <RARE_TOKEN> ( ) == SCOPE . <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> ID <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . remove ( this , name ) ; </a> 1
<a> this . name = id ; </a> 0
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . add ( this , name ) ; </a> 1
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return name ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> for ( AtmosphereResource < ? , ? > r : <RARE_TOKEN> ) { </a> 0
<a> r . resume ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> . cancel ( false ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> || <RARE_TOKEN> . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> int time = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( time == - 1 ) { </a> 1
<a> throw new IllegalStateException ( <RARE_TOKEN> time is not <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> final AtomicReference < Future < ? > > <RARE_TOKEN> = new AtomicReference < Future < ? > > ( ) ; </a> 1
<a> <RARE_TOKEN> = bc . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( new Runnable ( ) { </a> 1
<a> @ Override </a> 0
<a> public void run ( ) { </a> 1
<a> try { </a> 1
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> destroy ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . get ( ) != null ) { </a> 1
<a> <RARE_TOKEN> . cancel ( true ) ; </a> 1
<a> } </a> 1
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , t ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } , time , time , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> b ) { </a> 0
<a> <RARE_TOKEN> . add ( b ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> b ) { </a> 0
<a> <RARE_TOKEN> . remove ( b ) ; </a> 0
<a> } </a> 0
<a> public class Entry { </a> 0
<a> public Object message ; </a> 0
<a> public Object <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> < ? > future ; </a> 1
<a> public boolean <RARE_TOKEN> ; </a> 1
<a> public Object <RARE_TOKEN> ; </a> 1
<a> public Entry ( Object message , Object <RARE_TOKEN> , <RARE_TOKEN> < ? > future , Object <RARE_TOKEN> ) { </a> 0
<a> this . message = message ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . future = future ; </a> 1
<a> this . <RARE_TOKEN> = true ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> public Entry ( Object message , Object <RARE_TOKEN> , <RARE_TOKEN> < ? > future , boolean <RARE_TOKEN> ) { </a> 0
<a> this . message = message ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . future = future ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String toString ( ) { </a> 1
<a> return <RARE_TOKEN> + </a> 1
<a> <RARE_TOKEN> + message + </a> 1
<a> ", <RARE_TOKEN> + <RARE_TOKEN> + </a> 0
<a> ", <RARE_TOKEN> + future + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected Runnable <RARE_TOKEN> ( ) { </a> 0
<a> return new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> Entry msg ; </a> 0
<a> while ( <RARE_TOKEN> . get ( ) ) { </a> 1
<a> try { </a> 0
<a> msg = messages . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> ( msg ) ; </a> 1
<a> } catch ( Throwable ex ) { </a> 0
<a> if ( ! <RARE_TOKEN> . get ( ) ) { </a> 0
<a> logger . trace ( "failed to <RARE_TOKEN> broadcast handler <RARE_TOKEN> to broadcast executor service <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } else { </a> 0
<a> logger . debug ( "failed to <RARE_TOKEN> broadcast handler <RARE_TOKEN> to broadcast executor <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } ; </a> 0
<a> } </a> 0
<a> protected void start ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( true ) ) { </a> 0
<a> <RARE_TOKEN> = bc . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> . start ( ) ; </a> 1
<a> <RARE_TOKEN> = bc . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> <RARE_TOKEN> = bc . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 1
<a> protected void <RARE_TOKEN> ( Entry entry ) { </a> 1
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = entry . message . toString ( ) ; </a> 1
<a> if ( ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 1
<a> Iterator < Entry > i = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> StringBuilder b = new StringBuilder ( ) ; </a> 0
<a> while ( i . <RARE_TOKEN> ( ) ) { </a> 1
<a> Entry e = i . next ( ) ; </a> 1
<a> e . future . cancel ( true ) ; </a> 0
<a> try { </a> 0
<a> if ( e . message instanceof String </a> 0
<a> && entry . message instanceof String ) { </a> 1
<a> b . append ( e . message ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( e ) ; </a> 1
<a> } </a> 0
<a> } finally { </a> 0
<a> i . remove ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( b . length ( ) > 0 ) { </a> 0
<a> entry . message = b . append ( entry . message ) . toString ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 1
<a> <RARE_TOKEN> ( null , entry . message ) ; </a> 1
<a> if ( entry . future != null ) { </a> 1
<a> entry . future . done ( ) ; </a> 1
<a> } </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> Object <RARE_TOKEN> = <RARE_TOKEN> ( entry . message ) ; </a> 1
<a> entry . message = <RARE_TOKEN> ; </a> 1
<a> try { </a> 0
<a> if ( entry . <RARE_TOKEN> == null ) { </a> 0
<a> for ( AtmosphereResource < ? , ? > r : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( r , entry ) ; </a> 0
<a> if ( entry . <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( r , <RARE_TOKEN> , entry ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } else if ( entry . <RARE_TOKEN> instanceof AtmosphereResource < ? , ? > ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ( AtmosphereResource < ? , ? > ) entry . <RARE_TOKEN> , entry ) ; </a> 0
<a> if ( entry . <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( AtmosphereResource < ? , ? > ) entry . <RARE_TOKEN> , <RARE_TOKEN> , entry ) ; </a> 0
<a> } </a> 0
<a> } else if ( entry . <RARE_TOKEN> instanceof Set ) { </a> 0
<a> Set < AtmosphereResource < ? , ? > > <RARE_TOKEN> = ( Set < AtmosphereResource < ? , ? > > ) entry . <RARE_TOKEN> ; </a> 0
<a> for ( AtmosphereResource < ? , ? > r : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( r , entry ) ; </a> 0
<a> if ( entry . <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( r , <RARE_TOKEN> , entry ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> entry . message = <RARE_TOKEN> ; </a> 1
<a> } catch ( InterruptedException ex ) { </a> 0
<a> logger . debug ( ex . getMessage ( ) , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( AtmosphereResource < ? , ? > r , Object <RARE_TOKEN> , Entry entry ) throws InterruptedException { </a> 0
<a> <RARE_TOKEN> . put ( new <RARE_TOKEN> ( r , <RARE_TOKEN> , entry . future ) ) ; </a> 1
<a> } </a> 0
<a> protected Object <RARE_TOKEN> ( AtmosphereResource < ? , ? > r , Entry msg ) { </a> 0
<a> Object <RARE_TOKEN> = msg . message ; </a> 1
<a> if ( AtmosphereResourceImpl . class . isAssignableFrom ( r . getClass ( ) ) ) { </a> 0
<a> if ( AtmosphereResourceImpl . class . cast ( r ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( r . getRequest ( ) instanceof HttpServletRequest && bc . <RARE_TOKEN> ( ) ) { </a> 0
<a> Object message = msg . <RARE_TOKEN> ; </a> 1
<a> BroadcastAction a = bc . filter ( ( HttpServletRequest ) r . getRequest ( ) , ( HttpServletResponse ) r . getResponse ( ) , message ) ; </a> 1
<a> if ( a . action ( ) == BroadcastAction . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> || a . message ( ) != msg . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = a . message ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( r , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( r ) ; </a> 1
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( r ) ; </a> 1
<a> } </a> 0
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> private Object <RARE_TOKEN> ( Object msg ) { </a> 1
<a> if ( <RARE_TOKEN> . class . isAssignableFrom ( msg . getClass ( ) ) ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> . class . cast ( msg ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( "failed to cast <RARE_TOKEN> " + msg , e ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> return msg ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( final AtmosphereResource < ? , ? > resource , final Object msg , final <RARE_TOKEN> future ) { </a> 1
<a> boolean <RARE_TOKEN> = true ; </a> 0
<a> try { </a> 0
<a> final <RARE_TOKEN> event = ( <RARE_TOKEN> ) resource . <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> = event . isCancelled ( ) || event . <RARE_TOKEN> ( ) || event . <RARE_TOKEN> ( ) || ! event . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , event ) ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> event . <RARE_TOKEN> ( msg ) ; </a> 1
<a> try { </a> 1
<a> if ( resource . <RARE_TOKEN> ( ) != null </a> 0
<a> && ! resource . <RARE_TOKEN> ( ) . isCancelled ( ) </a> 0
<a> && HttpServletRequest . class . isAssignableFrom ( resource . getRequest ( ) . getClass ( ) ) ) { </a> 0
<a> HttpServletRequest . class . cast ( resource . getRequest ( ) ) </a> 1
<a> . setAttribute ( <RARE_TOKEN> , System . currentTimeMillis ( ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( Exception t ) { </a> 1
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> , t ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> of a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + resource , event ) ; </a> 1
<a> <RARE_TOKEN> ( resource ) ; </a> 1
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( resource ) ; </a> 1
<a> event . <RARE_TOKEN> ( true ) ; </a> 0
<a> event . <RARE_TOKEN> ( t ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> broadcast ( resource , event ) ; </a> 1
<a> } finally { </a> 0
<a> if ( <RARE_TOKEN> && resource instanceof <RARE_TOKEN> ) { </a> 0
<a> ( ( <RARE_TOKEN> ) resource ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( future != null ) { </a> 1
<a> future . done ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected Runnable <RARE_TOKEN> ( ) { </a> 1
<a> return new Runnable ( ) { </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> token ; </a> 0
<a> try { </a> 1
<a> token = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> bc . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( this ) ; </a> 1
<a> synchronized ( token . resource ) { </a> 0
<a> if ( AtmosphereResourceImpl . class . cast ( token . resource ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( token . resource , token . msg , token . future ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } catch ( Throwable ex ) { </a> 1
<a> if ( ! <RARE_TOKEN> . get ( ) ) { </a> 0
<a> logger . trace ( "failed to <RARE_TOKEN> <RARE_TOKEN> write task <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 0
<a> } else { </a> 1
<a> logger . debug ( "failed to <RARE_TOKEN> <RARE_TOKEN> write <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> } </a> 1
<a> protected void <RARE_TOKEN> ( final AtmosphereResource < ? , ? > r , final AtmosphereResourceEvent e ) { </a> 0
<a> <RARE_TOKEN> ( r , e ) ; </a> 1
<a> if ( e . getMessage ( ) instanceof List && ! ( ( List ) e . getMessage ( ) ) . isEmpty ( ) ) { </a> 1
<a> HttpServletRequest . class . cast ( r . getRequest ( ) ) . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> broadcast ( r , e ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> protected boolean <RARE_TOKEN> ( final AtmosphereResource < ? , ? > r , final AtmosphereResourceEvent e ) { </a> 0
<a> List < ? > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( r ) ; </a> 1
<a> if ( ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> e . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( final AtmosphereResource < ? , ? > r , Object msg ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( r , msg ) ; </a> 1
<a> } </a> 1
<a> protected void broadcast ( final AtmosphereResource < ? , ? > r , final AtmosphereResourceEvent e ) { </a> 0
<a> try { </a> 1
<a> r . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( e ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> <RARE_TOKEN> ( t , r ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( Throwable t , final AtmosphereResource < ? , ? > r ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> , t ) ; </a> 1
<a> <RARE_TOKEN> ( r ) ; </a> 0
<a> final <RARE_TOKEN> event = ( <RARE_TOKEN> ) r . <RARE_TOKEN> ( ) ; </a> 0
<a> event . <RARE_TOKEN> ( t ) ; </a> 0
<a> if ( r instanceof <RARE_TOKEN> ) { </a> 0
<a> ( ( <RARE_TOKEN> ) r ) </a> 0
<a> . <RARE_TOKEN> ( event ) ; </a> 0
<a> ( ( <RARE_TOKEN> ) r ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> bc . <RARE_TOKEN> ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 0
<a> r . resume ( ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> to resume a <RARE_TOKEN> AtmosphereResource {}" , r ) ; </a> 1
<a> logger . warn ( <RARE_TOKEN> , t ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( long <RARE_TOKEN> , <RARE_TOKEN> policy ) { </a> 0
<a> this . <RARE_TOKEN> . set ( <RARE_TOKEN> ) ; </a> 0
<a> this . policy = policy ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > Future < T > broadcast ( T msg ) { </a> 1
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> logger . error ( <RARE_TOKEN> Broadcaster has <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> start ( ) ; </a> 0
<a> Object newMsg = filter ( msg ) ; </a> 0
<a> if ( newMsg == null ) return null ; </a> 1
<a> <RARE_TOKEN> < Object > f = new <RARE_TOKEN> < Object > ( newMsg ) ; </a> 1
<a> messages . <RARE_TOKEN> ( new Entry ( newMsg , null , f , msg ) ) ; </a> 1
<a> return f ; </a> 0
<a> } </a> 0
<a> protected Object filter ( Object msg ) { </a> 0
<a> BroadcastAction a = bc . filter ( msg ) ; </a> 0
<a> if ( a . action ( ) == BroadcastAction . <RARE_TOKEN> . <RARE_TOKEN> || msg == null ) </a> 0
<a> return null ; </a> 0
<a> else </a> 0
<a> return a . message ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > Future < T > broadcast ( T msg , AtmosphereResource < ? , ? > r ) { </a> 0
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> logger . error ( <RARE_TOKEN> Broadcaster has <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> start ( ) ; </a> 0
<a> Object newMsg = filter ( msg ) ; </a> 0
<a> if ( newMsg == null ) return null ; </a> 1
<a> <RARE_TOKEN> < Object > f = new <RARE_TOKEN> < Object > ( newMsg ) ; </a> 1
<a> messages . <RARE_TOKEN> ( new Entry ( newMsg , r , f , msg ) ) ; </a> 1
<a> return f ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > Future < T > <RARE_TOKEN> ( T msg ) { </a> 1
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> logger . error ( <RARE_TOKEN> Broadcaster has <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> start ( ) ; </a> 0
<a> Object newMsg = filter ( msg ) ; </a> 0
<a> if ( newMsg == null ) return null ; </a> 1
<a> <RARE_TOKEN> < Object > f = new <RARE_TOKEN> < Object > ( newMsg ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new Entry ( newMsg , null , f , msg ) ) ; </a> 0
<a> return f ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( AtmosphereResource < ? , ? > r ) { </a> 0
<a> Iterator < Entry > i = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> while ( i . <RARE_TOKEN> ( ) ) { </a> 1
<a> Entry e = i . next ( ) ; </a> 1
<a> e . <RARE_TOKEN> = r ; </a> 0
<a> <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > Future < T > broadcast ( T msg , Set < AtmosphereResource < ? , ? > > <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> logger . error ( <RARE_TOKEN> Broadcaster has <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> start ( ) ; </a> 0
<a> Object newMsg = filter ( msg ) ; </a> 0
<a> if ( newMsg == null ) return null ; </a> 1
<a> <RARE_TOKEN> < Object > f = new <RARE_TOKEN> < Object > ( newMsg ) ; </a> 1
<a> messages . <RARE_TOKEN> ( new Entry ( newMsg , <RARE_TOKEN> , f , msg ) ) ; </a> 1
<a> return f ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public AtmosphereResource < ? , ? > <RARE_TOKEN> ( AtmosphereResource < ? , ? > r ) { </a> 0
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> logger . error ( <RARE_TOKEN> Broadcaster has <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> return r ; </a> 1
<a> } </a> 0
<a> if ( scope == SCOPE . <RARE_TOKEN> && <RARE_TOKEN> . <RARE_TOKEN> ( true ) ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> " + this </a> 0
<a> + " <RARE_TOKEN> be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> scope is set to <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . get ( ) > 0 && <RARE_TOKEN> . size ( ) >= <RARE_TOKEN> . get ( ) ) { </a> 0
<a> if ( policy == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> AtmosphereResource < ? , ? > resource = <RARE_TOKEN> . poll ( ) ; </a> 0
<a> try { </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> resume of <RARE_TOKEN> " , resource ) ; </a> 0
<a> resource . resume ( ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( "failed to resume resource <RARE_TOKEN> " , resource , t ) ; </a> 0
<a> } </a> 0
<a> } else if ( policy == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( <RARE_TOKEN> suspended <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . contains ( r ) ) { </a> 1
<a> return r ; </a> 1
<a> } </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 1
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . add ( this , name ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . add ( r ) ; </a> 0
<a> <RARE_TOKEN> ( r , r . <RARE_TOKEN> ( ) ) ; </a> 1
<a> return r ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public AtmosphereResource < ? , ? > <RARE_TOKEN> ( AtmosphereResource r ) { </a> 0
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> logger . error ( <RARE_TOKEN> Broadcaster has <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> return r ; </a> 1
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . contains ( r ) ) { </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> . remove ( r ) ; </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> if ( scope != SCOPE . <RARE_TOKEN> && <RARE_TOKEN> . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . remove ( this , name ) ; </a> 1
<a> destroy ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 1
<a> return r ; </a> 1
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> for ( <RARE_TOKEN> b : <RARE_TOKEN> ) { </a> 1
<a> b . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> for ( <RARE_TOKEN> b : <RARE_TOKEN> ) { </a> 1
<a> b . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> for ( <RARE_TOKEN> b : <RARE_TOKEN> ) { </a> 1
<a> b . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> bc ) { </a> 0
<a> this . bc = bc ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return bc ; </a> 0
<a> } </a> 0
<a> public < T > Future < T > <RARE_TOKEN> ( T o ) { </a> 1
<a> return <RARE_TOKEN> ( o , 0 , null ) ; </a> 0
<a> } </a> 0
<a> public < T > Future < T > <RARE_TOKEN> ( final T o , long delay , TimeUnit t ) { </a> 1
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> logger . error ( <RARE_TOKEN> Broadcaster has <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> start ( ) ; </a> 0
<a> final Object msg = filter ( o ) ; </a> 0
<a> if ( msg == null ) return null ; </a> 0
<a> final <RARE_TOKEN> < Object > future = new <RARE_TOKEN> < Object > ( msg ) ; </a> 1
<a> final Entry e = new Entry ( msg , null , future , o ) ; </a> 0
<a> Future < T > f ; </a> 1
<a> if ( delay > 0 ) { </a> 0
<a> f = bc . <RARE_TOKEN> ( ) . schedule ( new <RARE_TOKEN> < T > ( ) { </a> 1
<a> public T <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> <RARE_TOKEN> . remove ( e ) ; </a> 0
<a> if ( <RARE_TOKEN> . class . isAssignableFrom ( o . getClass ( ) ) ) { </a> 0
<a> try { </a> 0
<a> Object r = <RARE_TOKEN> . class . cast ( o ) . <RARE_TOKEN> ( ) ; </a> 0
<a> final Object msg = filter ( r ) ; </a> 0
<a> if ( msg != null ) { </a> 0
<a> Entry entry = new Entry ( msg , null , null , r ) ; </a> 1
<a> <RARE_TOKEN> ( entry ) ; </a> 1
<a> } </a> 0
<a> return ( T ) msg ; </a> 1
<a> } catch ( Exception <RARE_TOKEN> ) { </a> 0
<a> logger . error ( "" , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> final Object msg = filter ( o ) ; </a> 0
<a> final Entry e = new Entry ( msg , null , null , o ) ; </a> 1
<a> <RARE_TOKEN> ( e ) ; </a> 0
<a> return ( T ) msg ; </a> 1
<a> } </a> 0
<a> } , delay , t ) ; </a> 0
<a> e . future = new <RARE_TOKEN> < Object > ( f , msg ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( e ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> public Future < ? > <RARE_TOKEN> ( final Object o , long period , TimeUnit t ) { </a> 1
<a> return <RARE_TOKEN> ( o , 0 , period , t ) ; </a> 0
<a> } </a> 0
<a> public Future < ? > <RARE_TOKEN> ( final Object o , long <RARE_TOKEN> , long period , TimeUnit t ) { </a> 1
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> logger . error ( <RARE_TOKEN> Broadcaster has <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> start ( ) ; </a> 0
<a> if ( period == 0 || t == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> start ( ) ; </a> 0
<a> final Object msg = filter ( o ) ; </a> 0
<a> if ( msg == null ) return null ; </a> 0
<a> return bc . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( new Runnable ( ) { </a> 1
<a> public void run ( ) { </a> 0
<a> if ( <RARE_TOKEN> . class . isAssignableFrom ( o . getClass ( ) ) ) { </a> 0
<a> try { </a> 0
<a> Object r = <RARE_TOKEN> . class . cast ( o ) . <RARE_TOKEN> ( ) ; </a> 0
<a> final Object msg = filter ( r ) ; </a> 0
<a> if ( msg != null ) { </a> 0
<a> Entry entry = new Entry ( msg , null , null , r ) ; </a> 1
<a> <RARE_TOKEN> ( entry ) ; </a> 1
<a> } </a> 0
<a> return ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( "" , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> final Object msg = filter ( o ) ; </a> 0
<a> final Entry e = new Entry ( msg , null , null , o ) ; </a> 1
<a> <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> } , <RARE_TOKEN> , period , t ) ; </a> 0
<a> } </a> 0
<a> public String toString ( ) { </a> 0
<a> return new StringBuilder ( this . getClass ( ) . getName ( ) ) . append ( <RARE_TOKEN> ) . append ( this . hashCode ( ) ) . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( <RARE_TOKEN> " ) . append ( name ) . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( <RARE_TOKEN> " ) . append ( scope ) . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( <RARE_TOKEN> " ) . append ( <RARE_TOKEN> ) . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( <RARE_TOKEN> " ) . append ( <RARE_TOKEN> . size ( ) ) . append ( <RARE_TOKEN> ) </a> 0
<a> . toString ( ) ; </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> { </a> 0
<a> final AtmosphereResource < ? , ? > resource ; </a> 1
<a> final Object msg ; </a> 1
<a> final <RARE_TOKEN> future ; </a> 1
<a> public <RARE_TOKEN> ( AtmosphereResource < ? , ? > resource , Object msg , <RARE_TOKEN> future ) { </a> 1
<a> this . resource = resource ; </a> 0
<a> this . msg = msg ; </a> 0
<a> this . future = future ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 1
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 0
<a> import static org . atmosphere . cpr . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import static org . atmosphere . cpr . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import static org . atmosphere . cpr . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import static org . atmosphere . cpr . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import static org . atmosphere . cpr . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends BroadcasterFactory { </a> 1
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final ConcurrentHashMap < Object , Broadcaster > <RARE_TOKEN> </a> 1
<a> = new ConcurrentHashMap < Object , Broadcaster > ( ) ; </a> 1
<a> private final Class < ? extends Broadcaster > clazz ; </a> 1
<a> private <RARE_TOKEN> policy = </a> 0
<a> new <RARE_TOKEN> . Builder ( ) . policy ( <RARE_TOKEN> ) . build ( ) ; </a> 0
<a> protected <RARE_TOKEN> ( Class < ? extends Broadcaster > clazz , String <RARE_TOKEN> ) { </a> 0
<a> this . clazz = clazz ; </a> 0
<a> if ( factory == null ) { </a> 0
<a> this . factory = this ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . name ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> policy = new <RARE_TOKEN> . Builder ( ) . policy ( <RARE_TOKEN> ) . build ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . name ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> policy = new <RARE_TOKEN> . Builder ( ) . policy ( <RARE_TOKEN> ) . build ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . name ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> policy = new <RARE_TOKEN> . Builder ( ) . policy ( <RARE_TOKEN> ) . <RARE_TOKEN> ( 5 * <RARE_TOKEN> * <RARE_TOKEN> ) . build ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . name ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> policy = new <RARE_TOKEN> . Builder ( ) . policy ( <RARE_TOKEN> ) . <RARE_TOKEN> ( 5 * <RARE_TOKEN> * <RARE_TOKEN> ) . build ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . name ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> policy = new <RARE_TOKEN> . Builder ( ) . policy ( <RARE_TOKEN> ) . build ( ) ; </a> 0
<a> } else { </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> policy {}" , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public synchronized final Broadcaster get ( ) throws <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> Broadcaster b = clazz . newInstance ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . inject ( b ) ; </a> 0
<a> if ( <RARE_TOKEN> . class . isAssignableFrom ( b . getClass ( ) ) ) { </a> 0
<a> <RARE_TOKEN> . class . cast ( b ) . <RARE_TOKEN> ( config ) ; </a> 0
<a> } </a> 0
<a> b . <RARE_TOKEN> ( new <RARE_TOKEN> ( AtmosphereServlet . <RARE_TOKEN> , config ) ) ; </a> 0
<a> b . <RARE_TOKEN> ( clazz . getSimpleName ( ) + <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> b . <RARE_TOKEN> ( policy ) ; </a> 0
<a> <RARE_TOKEN> . put ( b . <RARE_TOKEN> ( ) , b ) ; </a> 0
<a> return b ; </a> 0
<a> } </a> 0
<a> public synchronized final Broadcaster get ( Class < ? extends Broadcaster > c , Object id ) throws <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> if ( id == null ) throw new NullPointerException ( <RARE_TOKEN> is <RARE_TOKEN> ) ; </a> 1
<a> if ( c == null ) throw new NullPointerException ( <RARE_TOKEN> is <RARE_TOKEN> ) ; </a> 1
<a> if ( getBroadcaster ( id ) != null ) </a> 1
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> Broadcaster b = c . newInstance ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . inject ( b ) ; </a> 0
<a> if ( <RARE_TOKEN> . class . isAssignableFrom ( b . getClass ( ) ) ) { </a> 0
<a> <RARE_TOKEN> . class . cast ( b ) . <RARE_TOKEN> ( config ) ; </a> 0
<a> } </a> 1
<a> b . <RARE_TOKEN> ( new <RARE_TOKEN> ( AtmosphereServlet . <RARE_TOKEN> , config ) ) ; </a> 0
<a> b . <RARE_TOKEN> ( id . toString ( ) ) ; </a> 0
<a> b . <RARE_TOKEN> ( policy ) ; </a> 0
<a> <RARE_TOKEN> . put ( id , b ) ; </a> 1
<a> return b ; </a> 0
<a> } </a> 0
<a> private Broadcaster getBroadcaster ( Object name ) { </a> 1
<a> return <RARE_TOKEN> . get ( name ) ; </a> 1
<a> } </a> 0
<a> public boolean add ( Broadcaster b , Object id ) { </a> 0
<a> return ( <RARE_TOKEN> . put ( id , b ) == null ) ; </a> 0
<a> } </a> 0
<a> public boolean remove ( Broadcaster b , Object id ) { </a> 0
<a> return ( <RARE_TOKEN> . remove ( id ) != null ) ; </a> 0
<a> } </a> 0
<a> public final Broadcaster <RARE_TOKEN> ( Class < ? extends Broadcaster > c , Object id ) { </a> 0
<a> return <RARE_TOKEN> ( c , id , false ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Broadcaster <RARE_TOKEN> ( Class < ? extends Broadcaster > c , Object id , boolean <RARE_TOKEN> ) { </a> 0
<a> Broadcaster b = getBroadcaster ( id ) ; </a> 1
<a> if ( b != null && ! c . isAssignableFrom ( b . getClass ( ) ) ) { </a> 0
<a> String msg = <RARE_TOKEN> <RARE_TOKEN> class " + c . getName ( ) + <RARE_TOKEN> <RARE_TOKEN> class <RARE_TOKEN> " + b . getClass ( ) . getName ( ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> , msg ) ; </a> 1
<a> throw new IllegalStateException ( msg ) ; </a> 0
<a> } </a> 0
<a> if ( b == null && <RARE_TOKEN> ) { </a> 1
<a> try { </a> 0
<a> b = get ( c , id ) ; </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw new IllegalStateException ( e ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw new IllegalStateException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return b ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < ? , ? > r ) { </a> 0
<a> try { </a> 0
<a> synchronized ( r ) { </a> 0
<a> if ( <RARE_TOKEN> . size ( ) > 0 ) { </a> 0
<a> for ( Broadcaster b : <RARE_TOKEN> ( ) ) { </a> 0
<a> try { </a> 0
<a> b . <RARE_TOKEN> ( r ) ; </a> 0
<a> } catch ( IllegalStateException ex ) { </a> 0
<a> logger . trace ( ex . getMessage ( ) , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> logger . warn ( ex . getMessage ( ) , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Collection < Broadcaster > <RARE_TOKEN> ( ) { </a> 0
<a> return Collections . <RARE_TOKEN> ( <RARE_TOKEN> . values ( ) ) ; </a> 0
<a> } </a> 0
<a> public synchronized void destroy ( ) { </a> 0
<a> <RARE_TOKEN> < Broadcaster > e = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> while ( e . <RARE_TOKEN> ( ) ) { </a> 0
<a> e . <RARE_TOKEN> ( ) . destroy ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> factory = null ; </a> 1
<a> } </a> 0
<a> public static BroadcasterFactory <RARE_TOKEN> ( Class < ? extends Broadcaster > clazz , AtmosphereServlet . AtmosphereConfig c ) </a> 0
<a> throws <RARE_TOKEN> , <RARE_TOKEN> { </a> 1
<a> factory = new <RARE_TOKEN> ( clazz , <RARE_TOKEN> ) ; </a> 0
<a> config = c ; </a> 0
<a> return factory ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> public interface FrameworkConfig { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = AtmosphereServlet . class . getName ( ) ; </a> 0
<a> String <RARE_TOKEN> = AtmosphereResource . class . getName ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = AtmosphereHandler . class . getName ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = AtmosphereResource . class . getName ( ) + <RARE_TOKEN> + <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> public interface HeaderConfig { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import org . atmosphere . handler . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> public class <RARE_TOKEN> extends AtmosphereServlet { </a> 0
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ServletConfig sc ) throws ServletException { </a> 0
<a> String <RARE_TOKEN> = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> String mapping = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> r = new <RARE_TOKEN> ( ) ; </a> 0
<a> r . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> r . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> r . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( mapping == null ) { </a> 0
<a> mapping = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( mapping , r ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public void destroy ( ) { </a> 0
<a> super . destroy ( ) ; </a> 0
<a> <RARE_TOKEN> . destroy ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> BroadcastAction filter ( HttpServletRequest request , HttpServletResponse response , Object message ) ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . cpr ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 1
<a> void inject ( Object o ) ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> public final class <RARE_TOKEN> { </a> 1
<a> private <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> private static final class <RARE_TOKEN> { </a> 1
<a> private static final <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> static { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . <RARE_TOKEN> ( ) . next ( ) ; </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> public void inject ( Object o ) { </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 1
<a> public interface <RARE_TOKEN> { </a> 1
<a> <RARE_TOKEN> getServletContext ( ) ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . handler ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereHandler ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . FrameworkConfig ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . Filter ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 1
<a> import java . net . URL ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private final ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> private final <RARE_TOKEN> wrapper = new <RARE_TOKEN> ( ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private <RARE_TOKEN> servlet ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ServletConfig sc ) throws <RARE_TOKEN> , </a> 1
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> { </a> 1
<a> URL url = sc . getServletContext ( ) . getResource ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( new URL [ ] { url } , </a> 0
<a> Thread . currentThread ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) != null && servlet == null ) { </a> 0
<a> try { </a> 0
<a> servlet = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) . newInstance ( ) ; </a> 0
<a> } catch ( NullPointerException ex ) { </a> 0
<a> servlet = ( <RARE_TOKEN> ) Thread . currentThread ( ) . <RARE_TOKEN> ( ) </a> 1
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) . newInstance ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( sc , servlet ) ; </a> 1
<a> Filter f ; </a> 0
<a> for ( String <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> try { </a> 1
<a> f = ( Filter ) <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) . newInstance ( ) ; </a> 1
<a> } catch ( NullPointerException ex ) { </a> 1
<a> f = ( Filter ) Thread . currentThread ( ) . <RARE_TOKEN> ( ) </a> 1
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) . newInstance ( ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( sc ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( f ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> if ( sc . getInitParameter ( <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = sc . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = f . getClass ( ) . getSimpleName ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> Filter {}" , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > r ) </a> 0
<a> throws IOException { </a> 0
<a> r . getRequest ( ) . setAttribute ( FrameworkConfig . <RARE_TOKEN> , r ) ; </a> 0
<a> r . getRequest ( ) . setAttribute ( FrameworkConfig . <RARE_TOKEN> , this ) ; </a> 0
<a> try { </a> 0
<a> wrapper . service ( r . getRequest ( ) , r . getResponse ( ) ) ; </a> 0
<a> } catch ( Throwable ex ) { </a> 0
<a> logger . error ( <RARE_TOKEN> , ex ) ; </a> 0
<a> throw new <RARE_TOKEN> ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void init ( ServletConfig sc ) throws ServletException { </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> ( sc ) ; </a> 1
<a> } catch ( Exception ex ) { </a> 0
<a> throw new ServletException ( ex ) ; </a> 0
<a> } </a> 0
<a> wrapper . init ( sc ) ; </a> 1
<a> } </a> 0
<a> public void destroy ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . destroy ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) return ; </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return servlet ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> servlet ) { </a> 0
<a> this . servlet = servlet ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void destroy ( ) { </a> 0
<a> <RARE_TOKEN> . destroy ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String getInitParameter ( String name ) { </a> 0
<a> return <RARE_TOKEN> ( ) . getInitParameter ( name ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ServletConfig <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> getServletContext ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) . getServletContext ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void init ( ServletConfig sc ) throws ServletException { </a> 0
<a> <RARE_TOKEN> . init ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void init ( ) throws ServletException { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void log ( String msg ) { </a> 0
<a> getServletContext ( ) . log ( <RARE_TOKEN> ( ) + <RARE_TOKEN> " + msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void log ( String message , Throwable t ) { </a> 0
<a> getServletContext ( ) . log ( <RARE_TOKEN> ( ) + <RARE_TOKEN> " + message , t ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void service ( <RARE_TOKEN> req , <RARE_TOKEN> res ) </a> 0
<a> throws ServletException , IOException { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( req , res ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . handler ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereHandler ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . websocket . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > r ) throws IOException { </a> 0
<a> if ( ! r . getResponse ( ) . getClass ( ) . isAssignableFrom ( <RARE_TOKEN> . class ) ) { </a> 0
<a> try { </a> 0
<a> r . <RARE_TOKEN> ( ) . getServletContext ( ) </a> 0
<a> . <RARE_TOKEN> ( r . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) </a> 0
<a> . <RARE_TOKEN> ( r . getRequest ( ) , r . getResponse ( ) ) ; </a> 0
<a> } catch ( ServletException e ) { </a> 0
<a> IOException <RARE_TOKEN> = new IOException ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( e ) ; </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( r ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > resource ) throws IOException { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> {}" , resource . getRequest ( ) ) ; </a> 0
<a> resource . suspend ( - 1 , false ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void destroy ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . util ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . FrameworkConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . concurrent . Future ; </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> protected AtmosphereServlet . AtmosphereConfig config ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> . class . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id ) { </a> 0
<a> super ( id ) ; </a> 0
<a> start ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereServlet . AtmosphereConfig config ) { </a> 0
<a> this . config = config ; </a> 0
<a> } </a> 0
<a> abstract public void <RARE_TOKEN> ( ) ; </a> 0
<a> abstract public void <RARE_TOKEN> ( Object message ) ; </a> 0
<a> @ Override </a> 0
<a> protected Runnable <RARE_TOKEN> ( ) { </a> 0
<a> return new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . cancel ( true ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = bc . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void broadcast ( final AtmosphereResource < ? , ? > r , final AtmosphereResourceEvent e ) { </a> 0
<a> if ( r . getRequest ( ) instanceof HttpServletRequest ) { </a> 0
<a> if ( ( ( HttpServletRequest ) r . getRequest ( ) ) . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) != null ) { </a> 1
<a> try { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> Class <RARE_TOKEN> = Class . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , new Class [ ] { AtmosphereResource . class , AtmosphereResourceEvent . class } ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null , new Object [ ] { r , e } ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 0
<a> super . broadcast ( r , e ) ; </a> 1
<a> } </a> 0
<a> } else { </a> 0
<a> super . broadcast ( r , e ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( Object message ) { </a> 0
<a> try { </a> 0
<a> Object newMsg = filter ( message ) ; </a> 0
<a> <RARE_TOKEN> ( new Entry ( newMsg , null , new <RARE_TOKEN> < Object > ( newMsg ) , message ) ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 0
<a> logger . error ( "failed to <RARE_TOKEN> <RARE_TOKEN> " + message , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > Future < T > broadcast ( T msg ) { </a> 1
<a> Object newMsg = filter ( msg ) ; </a> 1
<a> if ( newMsg == null ) return null ; </a> 1
<a> <RARE_TOKEN> < Object > f = new <RARE_TOKEN> < Object > ( newMsg ) ; </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> ( msg ) ; </a> 0
<a> <RARE_TOKEN> ( new Entry ( newMsg , null , f , false ) ) ; </a> 0
<a> } finally { </a> 0
<a> f . done ( ) ; </a> 1
<a> } </a> 0
<a> return f ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > Future < T > broadcast ( T msg , AtmosphereResource < ? , ? > r ) { </a> 0
<a> Object newMsg = filter ( msg ) ; </a> 1
<a> if ( newMsg == null ) return null ; </a> 1
<a> <RARE_TOKEN> < Object > f = new <RARE_TOKEN> < Object > ( newMsg ) ; </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> ( msg ) ; </a> 0
<a> <RARE_TOKEN> ( new Entry ( newMsg , r , f , false ) ) ; </a> 1
<a> } finally { </a> 0
<a> f . done ( ) ; </a> 1
<a> } </a> 0
<a> return f ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > Future < T > broadcast ( T msg , Set < AtmosphereResource < ? , ? > > <RARE_TOKEN> ) { </a> 0
<a> Object newMsg = filter ( msg ) ; </a> 1
<a> if ( newMsg == null ) return null ; </a> 1
<a> <RARE_TOKEN> < Object > f = new <RARE_TOKEN> < Object > ( newMsg ) ; </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> ( msg ) ; </a> 0
<a> <RARE_TOKEN> ( new Entry ( newMsg , <RARE_TOKEN> , f , false ) ) ; </a> 1
<a> } finally { </a> 0
<a> f . done ( ) ; </a> 1
<a> } </a> 0
<a> return f ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . util ; </a> 0
<a> import javax . servlet . Filter ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> public static final int <RARE_TOKEN> = 20 ; </a> 0
<a> private <RARE_TOKEN> [ ] <RARE_TOKEN> = new <RARE_TOKEN> [ 20 ] ; </a> 0
<a> private int n = 0 ; </a> 0
<a> private <RARE_TOKEN> servlet = null ; </a> 0
<a> private ServletConfig <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public void init ( ) throws ServletException { </a> 0
<a> for ( <RARE_TOKEN> f : <RARE_TOKEN> ) { </a> 0
<a> if ( f != null ) { </a> 0
<a> f . <RARE_TOKEN> ( ) . init ( f ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( servlet != null ) { </a> 0
<a> servlet . init ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> request , <RARE_TOKEN> response ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> request . setAttribute ( <RARE_TOKEN> , new AtomicInteger ( 0 ) ) ; </a> 0
<a> <RARE_TOKEN> ( request , response ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> request , <RARE_TOKEN> response ) </a> 0
<a> throws IOException , ServletException { </a> 0
<a> AtomicInteger pos = ( ( AtomicInteger ) request . getAttribute ( <RARE_TOKEN> ) ) ; </a> 0
<a> if ( pos . get ( ) < n ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> [ pos . <RARE_TOKEN> ( ) ] ; </a> 0
<a> Filter filter = null ; </a> 0
<a> try { </a> 0
<a> filter = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> filter . <RARE_TOKEN> ( request , response , this ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw e ; </a> 0
<a> } catch ( ServletException e ) { </a> 0
<a> throw e ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw e ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> throw new ServletException ( <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> if ( servlet != null ) { </a> 0
<a> servlet . service ( request , response ) ; </a> 0
<a> } </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw e ; </a> 0
<a> } catch ( ServletException e ) { </a> 0
<a> throw e ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw e ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> throw new ServletException ( <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> is <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( n == <RARE_TOKEN> . length ) { </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> [ n + <RARE_TOKEN> ] ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , <RARE_TOKEN> , 0 , n ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ n ++ ] = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ServletConfig <RARE_TOKEN> , <RARE_TOKEN> servlet ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . servlet = servlet ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( int i ) { </a> 0
<a> return <RARE_TOKEN> [ i ] ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return servlet ; </a> 0
<a> } </a> 0
<a> public ServletConfig <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void destroy ( ) { </a> 0
<a> if ( n > 0 && <RARE_TOKEN> != null ) { </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> if ( <RARE_TOKEN> [ i ] != null ) { </a> 0
<a> <RARE_TOKEN> [ i ] . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> if ( servlet != null ) { </a> 0
<a> servlet . destroy ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . util ; </a> 0
<a> import javax . servlet . Filter ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final ServletConfig sc ; </a> 0
<a> private Filter filter = null ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ServletConfig sc ) { </a> 0
<a> this . sc = sc ; </a> 0
<a> } </a> 0
<a> public String getInitParameter ( String name ) { </a> 0
<a> return sc . getInitParameter ( name ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return sc . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> getServletContext ( ) { </a> 0
<a> return sc . getServletContext ( ) ; </a> 0
<a> } </a> 0
<a> public Filter <RARE_TOKEN> ( ) { </a> 0
<a> return filter ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( this . filter != null ) { </a> 0
<a> filter . destroy ( ) ; </a> 0
<a> } </a> 0
<a> this . filter = null ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Filter filter ) { </a> 0
<a> this . filter = filter ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . util ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . concurrent . Future ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> . class . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id ) { </a> 0
<a> super ( id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> bc ) { </a> 0
<a> this . bc = bc ; </a> 0
<a> bc . <RARE_TOKEN> ( null , false ) . <RARE_TOKEN> ( null , false ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > Future < T > broadcast ( T msg ) { </a> 1
<a> Object newMsg = filter ( msg ) ; </a> 0
<a> if ( newMsg == null ) return null ; </a> 0
<a> <RARE_TOKEN> < Object > f = new <RARE_TOKEN> < Object > ( newMsg ) ; </a> 1
<a> f . done ( ) ; </a> 1
<a> <RARE_TOKEN> ( new Entry ( newMsg , null , f , msg ) ) ; </a> 0
<a> return f ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > Future < T > broadcast ( T msg , AtmosphereResource < ? , ? > r ) { </a> 0
<a> Object newMsg = filter ( msg ) ; </a> 0
<a> if ( newMsg == null ) return null ; </a> 0
<a> <RARE_TOKEN> < Object > f = new <RARE_TOKEN> < Object > ( newMsg ) ; </a> 1
<a> f . done ( ) ; </a> 1
<a> <RARE_TOKEN> ( new Entry ( newMsg , r , f , msg ) ) ; </a> 1
<a> return f ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > Future < T > broadcast ( T msg , Set < AtmosphereResource < ? , ? > > <RARE_TOKEN> ) { </a> 0
<a> Object newMsg = filter ( msg ) ; </a> 0
<a> if ( newMsg == null ) return null ; </a> 0
<a> <RARE_TOKEN> < Object > f = new <RARE_TOKEN> < Object > ( newMsg ) ; </a> 1
<a> f . done ( ) ; </a> 1
<a> <RARE_TOKEN> ( new Entry ( newMsg , <RARE_TOKEN> , f , msg ) ) ; </a> 1
<a> return f ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( AtmosphereResource < ? , ? > r , Object <RARE_TOKEN> , Entry entry ) throws InterruptedException { </a> 0
<a> synchronized ( r ) { </a> 1
<a> <RARE_TOKEN> ( r , <RARE_TOKEN> , entry . future ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . util ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> . BroadcastAction . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final AtomicReference < StringBuilder > <RARE_TOKEN> = new AtomicReference < StringBuilder > ( new StringBuilder ( ) ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public BroadcastAction filter ( Object <RARE_TOKEN> , Object message ) { </a> 1
<a> if ( message instanceof String ) { </a> 0
<a> <RARE_TOKEN> . get ( ) . append ( message ) ; </a> 0
<a> if ( <RARE_TOKEN> . get ( ) . length ( ) < <RARE_TOKEN> ) { </a> 0
<a> return new BroadcastAction ( <RARE_TOKEN> . <RARE_TOKEN> , message ) ; </a> 0
<a> } else { </a> 0
<a> message = <RARE_TOKEN> . toString ( ) ; </a> 0
<a> <RARE_TOKEN> . get ( ) . <RARE_TOKEN> ( 0 , <RARE_TOKEN> . get ( ) . length ( ) ) ; </a> 0
<a> return new BroadcastAction ( <RARE_TOKEN> . <RARE_TOKEN> , message ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> return new BroadcastAction ( message ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . util ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> private static final String <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> ; </a> 0
<a> private static final String version ; </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) { </a> 0
<a> System . out . println ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> InputStream s = null ; </a> 0
<a> try { </a> 0
<a> s = <RARE_TOKEN> . class . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( s ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } finally { </a> 0
<a> if ( s != null ) { </a> 0
<a> try { </a> 0
<a> s . close ( ) ; </a> 0
<a> } catch ( IOException ex ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> version = <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( version ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . group ( 1 ) ; </a> 0
<a> <RARE_TOKEN> = Integer . parseInt ( <RARE_TOKEN> . group ( 2 ) ) ; </a> 0
<a> <RARE_TOKEN> = Integer . parseInt ( <RARE_TOKEN> . group ( 3 ) ) ; </a> 0
<a> <RARE_TOKEN> = Integer . parseInt ( <RARE_TOKEN> . group ( 4 ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = - 1 ; </a> 0
<a> <RARE_TOKEN> = - 1 ; </a> 0
<a> <RARE_TOKEN> = - 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( ) { </a> 0
<a> return version ; </a> 0
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static boolean <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . util ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 1
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final String <RARE_TOKEN> = AtmosphereServlet . class . getName ( ) ; </a> 0
<a> private final ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> public <RARE_TOKEN> ( InputStream stream ) { </a> 0
<a> <RARE_TOKEN> factory = <RARE_TOKEN> . newInstance ( ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( factory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( stream ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> logger . error ( e . getMessage ( ) , e ) ; </a> 0
<a> throw new <RARE_TOKEN> ( e ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> logger . error ( e . getMessage ( ) , e ) ; </a> 0
<a> throw new <RARE_TOKEN> ( e ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> logger . error ( e . getMessage ( ) , e ) ; </a> 0
<a> throw new <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . <RARE_TOKEN> ( ) ; i ++ ) { </a> 0
<a> <RARE_TOKEN> m = <RARE_TOKEN> . <RARE_TOKEN> ( i ) ; </a> 0
<a> <RARE_TOKEN> list = m . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int j = 0 ; j < list . <RARE_TOKEN> ( ) ; j ++ ) { </a> 0
<a> <RARE_TOKEN> n = list . <RARE_TOKEN> ( j ) ; </a> 0
<a> if ( n . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = n . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( n . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( n . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . <RARE_TOKEN> ( ) ; i ++ ) { </a> 0
<a> <RARE_TOKEN> m = <RARE_TOKEN> . <RARE_TOKEN> ( i ) ; </a> 0
<a> <RARE_TOKEN> list = m . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> for ( int j = 0 ; j < list . <RARE_TOKEN> ( ) ; j ++ ) { </a> 0
<a> <RARE_TOKEN> n = list . <RARE_TOKEN> ( j ) ; </a> 0
<a> if ( n . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = n . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( n . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = n . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public ArrayList < String > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . websocket ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . atmosphere . cpr . FrameworkConfig ; </a> 0
<a> import org . atmosphere . websocket . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . websocket . container . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . websocket . <RARE_TOKEN> . <RARE_TOKEN> . TYPE . * ; </a> 1
<a> public class <RARE_TOKEN> implements org . <RARE_TOKEN> . jetty . websocket . WebSocket , org . <RARE_TOKEN> . jetty . websocket . WebSocket . <RARE_TOKEN> , org . <RARE_TOKEN> . jetty . websocket . WebSocket . <RARE_TOKEN> , org . <RARE_TOKEN> . jetty . websocket . WebSocket . <RARE_TOKEN> , org . <RARE_TOKEN> . jetty . websocket . WebSocket . <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private <RARE_TOKEN> webSocketProcessor ; </a> 0
<a> private final HttpServletRequest request ; </a> 1
<a> private final AtmosphereServlet <RARE_TOKEN> ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( HttpServletRequest request , AtmosphereServlet <RARE_TOKEN> , final String <RARE_TOKEN> ) { </a> 0
<a> this . request = new <RARE_TOKEN> ( request , request . <RARE_TOKEN> ( ) , request . <RARE_TOKEN> ( ) , request . <RARE_TOKEN> ( ) , request . <RARE_TOKEN> ( ) ) ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( org . <RARE_TOKEN> . jetty . websocket . WebSocket . <RARE_TOKEN> <RARE_TOKEN> ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> try { </a> 1
<a> webSocketProcessor = ( <RARE_TOKEN> ) <RARE_TOKEN> . class . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( new Class [ ] { AtmosphereServlet . class , WebSocket . class } ) </a> 0
<a> . newInstance ( new Object [ ] { <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) } ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( request ) ; </a> 0
<a> } catch ( Exception e ) { </a> 1
<a> logger . warn ( "failed to connect to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( byte frame , String data ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( data ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( data , <RARE_TOKEN> , webSocketProcessor . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( byte frame , byte [ ] data , int offset , int length ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( new String ( data , offset , length ) ) ; </a> 0
<a> try { </a> 1
<a> webSocketProcessor . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( new String ( data , offset , length , <RARE_TOKEN> ) , <RARE_TOKEN> , webSocketProcessor . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> logger . warn ( <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> , byte <RARE_TOKEN> , byte [ ] data , int offset , int length ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( new String ( data , offset , length ) ) ; </a> 0
<a> try { </a> 1
<a> webSocketProcessor . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( new String ( data , offset , length , <RARE_TOKEN> ) , <RARE_TOKEN> , webSocketProcessor . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> logger . warn ( <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> webSocketProcessor . close ( ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( "" , <RARE_TOKEN> , webSocketProcessor . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( byte [ ] data , int offset , int length ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( data , offset , length ) ; </a> 0
<a> try { </a> 1
<a> webSocketProcessor . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( new String ( data , offset , length , <RARE_TOKEN> ) , <RARE_TOKEN> , webSocketProcessor . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> logger . warn ( <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( byte <RARE_TOKEN> , byte [ ] data , int offset , int length ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( data , offset , length ) ; </a> 0
<a> try { </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( new String ( data , offset , length , <RARE_TOKEN> ) , <RARE_TOKEN> , webSocketProcessor . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( byte <RARE_TOKEN> , byte <RARE_TOKEN> , byte [ ] data , int offset , int length ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( org . <RARE_TOKEN> . jetty . websocket . WebSocket . <RARE_TOKEN> connection ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> webSocketProcessor = ( <RARE_TOKEN> ) <RARE_TOKEN> . class . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( new Class [ ] { AtmosphereServlet . class , WebSocket . class } ) </a> 0
<a> . newInstance ( new Object [ ] { <RARE_TOKEN> , new <RARE_TOKEN> ( connection ) } ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . warn ( "failed to connect to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( "" , <RARE_TOKEN> , webSocketProcessor . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String data ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( data ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( data , <RARE_TOKEN> , webSocketProcessor . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( org . <RARE_TOKEN> . jetty . websocket . WebSocket . <RARE_TOKEN> connection ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> webSocketProcessor = ( <RARE_TOKEN> ) <RARE_TOKEN> . class . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( new Class [ ] { AtmosphereServlet . class , WebSocket . class } ) </a> 0
<a> . newInstance ( new Object [ ] { <RARE_TOKEN> , new <RARE_TOKEN> ( connection ) } ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( request ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( "" , <RARE_TOKEN> , webSocketProcessor . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . warn ( "failed to connect to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> , String message ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> webSocketProcessor . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( "" , <RARE_TOKEN> , webSocketProcessor . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> AtmosphereResource < ? , ? > r = ( AtmosphereResource < ? , ? > ) request . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> if ( r != null ) { </a> 0
<a> r . getBroadcaster ( ) . <RARE_TOKEN> ( r ) ; </a> 0
<a> } </a> 0
<a> webSocketProcessor . close ( ) ; </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private final String <RARE_TOKEN> ; </a> 1
<a> private final String <RARE_TOKEN> ; </a> 1
<a> private final String <RARE_TOKEN> ; </a> 1
<a> private final String <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( HttpServletRequest request , String <RARE_TOKEN> , String <RARE_TOKEN> , String <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 1
<a> super ( request ) ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> @ Override </a> 1
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . websocket ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 1
<a> public interface WebSocket { </a> 0
<a> public final static String <RARE_TOKEN> = WebSocket . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> public final static String <RARE_TOKEN> = WebSocket . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> public final static String <RARE_TOKEN> = WebSocket . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> void <RARE_TOKEN> ( int errorCode , String message ) throws IOException ; </a> 0
<a> void <RARE_TOKEN> ( String location ) throws IOException ; </a> 0
<a> void write ( byte frame , String data ) throws IOException ; </a> 0
<a> void write ( byte frame , byte [ ] data ) throws IOException ; </a> 0
<a> void write ( byte frame , byte [ ] data , int offset , int length ) throws IOException ; </a> 0
<a> void close ( ) throws IOException ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . websocket ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> public interface <RARE_TOKEN> extends AtmosphereResourceEventListener { </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> event ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> event ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> event ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> event ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> event ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> event ) ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> public enum TYPE { <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> } </a> 1
<a> private final String message ; </a> 1
<a> private final TYPE type ; </a> 0
<a> private final WebSocket <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( String message , TYPE type , WebSocket <RARE_TOKEN> ) { </a> 1
<a> this . message = message ; </a> 0
<a> this . type = type ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String message ( ) { </a> 1
<a> return message ; </a> 0
<a> } </a> 0
<a> public WebSocket <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public TYPE type ( ) { </a> 0
<a> return type ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + message + <RARE_TOKEN> + </a> 0
<a> ", <RARE_TOKEN> + type + </a> 0
<a> ", <RARE_TOKEN> + <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . websocket ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final static Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . trace ( "" , event ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . trace ( "" , event ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . trace ( "" , event ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . trace ( "" , event ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . trace ( "" , event ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . trace ( "" , event ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . trace ( "" , event ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . trace ( "" , event ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . trace ( "" , event ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . trace ( "" , event ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . trace ( "" , event ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . websocket ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . Cookie ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 1
<a> import java . io . IOException ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 1
<a> import java . util . Collection ; </a> 0
<a> import java . util . Collections ; </a> 1
<a> import java . util . HashMap ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> < <RARE_TOKEN> extends WebSocket > extends <RARE_TOKEN> { </a> 0
<a> private final ArrayList < Cookie > <RARE_TOKEN> = new ArrayList < Cookie > ( ) ; </a> 0
<a> private final HashMap < String , String > headers = new HashMap < String , String > ( ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private int status = 200 ; </a> 1
<a> private String <RARE_TOKEN> = "" ; </a> 0
<a> private String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private byte frame ; </a> 0
<a> private long <RARE_TOKEN> = - 1 ; </a> 1
<a> private String contentType = <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 1
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( new HttpServletResponse ( ) { </a> 0
<a> public void <RARE_TOKEN> ( Cookie cookie ) { </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( String name ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( String url ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( String url ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( String url ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( String url ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int sc , String msg ) throws IOException { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int sc ) throws IOException { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String location ) throws IOException { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String name , long <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String name , long <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> public void setHeader ( String name , String value ) { </a> 0
<a> } </a> 0
<a> public void addHeader ( String name , String value ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String name , int value ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String name , int value ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int sc ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int sc , String <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> public int getStatus ( ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> public String getHeader ( String name ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public Collection < String > getHeaders ( String name ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public Collection < String > <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String charset ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int len ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String type ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int size ) { </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> } </a> 1
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> public void <RARE_TOKEN> ( Cookie cookie ) { </a> 1
<a> <RARE_TOKEN> . add ( cookie ) ; </a> 1
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( String name ) { </a> 1
<a> return headers . get ( name ) == null ? false : true ; </a> 0
<a> } </a> 1
<a> public String <RARE_TOKEN> ( String url ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> public String <RARE_TOKEN> ( String url ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> public String <RARE_TOKEN> ( String url ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> public String <RARE_TOKEN> ( String url ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( int sc , String msg ) throws IOException { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( sc , msg ) ; </a> 0
<a> } </a> 1
<a> public void <RARE_TOKEN> ( int sc ) throws IOException { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( sc , "" ) ; </a> 0
<a> } </a> 1
<a> public void <RARE_TOKEN> ( String location ) throws IOException { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( location ) ; </a> 0
<a> } </a> 1
<a> public void <RARE_TOKEN> ( String name , long <RARE_TOKEN> ) { </a> 1
<a> headers . put ( name , String . valueOf ( <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( String name , long <RARE_TOKEN> ) { </a> 1
<a> headers . put ( name , String . valueOf ( <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 1
<a> public void setHeader ( String name , String value ) { </a> 1
<a> headers . put ( name , value ) ; </a> 1
<a> } </a> 1
<a> public void addHeader ( String name , String value ) { </a> 1
<a> headers . put ( name , value ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( String name , int value ) { </a> 1
<a> headers . put ( name , String . valueOf ( value ) ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( String name , int value ) { </a> 1
<a> headers . put ( name , String . valueOf ( value ) ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( int status ) { </a> 1
<a> this . status = status ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( int status , String <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> this . status = status ; </a> 1
<a> } </a> 1
<a> public int getStatus ( ) { </a> 1
<a> return status ; </a> 1
<a> } </a> 1
<a> public String getHeader ( String name ) { </a> 1
<a> return headers . get ( name ) ; </a> 1
<a> } </a> 1
<a> public Collection < String > getHeaders ( String name ) { </a> 1
<a> ArrayList < String > s = new ArrayList < String > ( ) ; </a> 1
<a> s . add ( headers . get ( name ) ) ; </a> 1
<a> return Collections . <RARE_TOKEN> ( s ) ; </a> 1
<a> } </a> 1
<a> public Collection < String > <RARE_TOKEN> ( ) { </a> 1
<a> return Collections . <RARE_TOKEN> ( headers . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( String charset ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) throws IOException { </a> 1
<a> return new <RARE_TOKEN> ( ) { </a> 1
<a> public void write ( int i ) throws java . io . IOException { </a> 1
<a> <RARE_TOKEN> . write ( frame , new byte [ ] { ( byte ) i } ) ; </a> 0
<a> } </a> 1
<a> public void write ( byte [ ] bytes ) throws java . io . IOException { </a> 1
<a> <RARE_TOKEN> . write ( frame , bytes ) ; </a> 0
<a> } </a> 1
<a> public void write ( byte [ ] bytes , int start , int offset ) throws java . io . IOException { </a> 1
<a> <RARE_TOKEN> . write ( frame , bytes , start , offset ) ; </a> 0
<a> } </a> 1
<a> } ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) throws IOException { </a> 1
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) { </a> 1
<a> public void write ( char [ ] <RARE_TOKEN> , int offset , int <RARE_TOKEN> ) { </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> . write ( frame , new String ( <RARE_TOKEN> , offset , <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> throw new <RARE_TOKEN> ( e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public void write ( char [ ] <RARE_TOKEN> ) { </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> . write ( frame , new String ( <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> throw new <RARE_TOKEN> ( e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public void write ( String s , int offset , int <RARE_TOKEN> ) { </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> . write ( frame , new String ( s . substring ( offset , <RARE_TOKEN> ) ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> throw new <RARE_TOKEN> ( e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public void write ( java . lang . String s ) { </a> 0
<a> try { </a> 1
<a> <RARE_TOKEN> . write ( frame , new String ( s ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> throw new <RARE_TOKEN> ( e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( int len ) { </a> 1
<a> <RARE_TOKEN> = len ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( String contentType ) { </a> 1
<a> this . contentType = contentType ; </a> 1
<a> } </a> 1
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return contentType ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( int size ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 1
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( Class <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . websocket ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereHandler ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 1
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . atmosphere . cpr . FrameworkConfig ; </a> 1
<a> import org . atmosphere . cpr . HeaderConfig ; </a> 1
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 1
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . Serializable ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 1
<a> public abstract class <RARE_TOKEN> implements Serializable { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 1
<a> private final AtmosphereServlet <RARE_TOKEN> ; </a> 0
<a> private final WebSocket <RARE_TOKEN> ; </a> 1
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 1
<a> private AtmosphereResource < HttpServletRequest , HttpServletResponse > resource ; </a> 0
<a> private AtmosphereHandler handler ; </a> 1
<a> public <RARE_TOKEN> ( AtmosphereServlet <RARE_TOKEN> , WebSocket <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> public final void <RARE_TOKEN> ( final HttpServletRequest request ) throws IOException { </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( true ) ) { </a> 1
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , <RARE_TOKEN> . getClass ( ) . getName ( ) ) ; </a> 0
<a> } </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> < WebSocket > ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> r = new <RARE_TOKEN> . Builder ( ) </a> 0
<a> . request ( request ) </a> 0
<a> . headers ( <RARE_TOKEN> ( request ) ) </a> 0
<a> . build ( ) ; </a> 0
<a> request . setAttribute ( WebSocket . <RARE_TOKEN> , true ) ; </a> 1
<a> <RARE_TOKEN> ( r , <RARE_TOKEN> ) ; </a> 0
<a> resource = ( AtmosphereResource ) request . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 1
<a> handler = ( AtmosphereHandler ) request . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 1
<a> if ( resource == null || ! resource . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . error ( <RARE_TOKEN> AtmosphereResource has <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> WebSocket <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> protected final void <RARE_TOKEN> ( final HttpServletRequest request , final HttpServletResponse response ) { </a> 0
<a> try { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request , response ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> logger . info ( "failed <RARE_TOKEN> atmosphere servlet <RARE_TOKEN> , e ) ; </a> 0
<a> } catch ( ServletException e ) { </a> 0
<a> logger . info ( "failed <RARE_TOKEN> atmosphere servlet <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public AtmosphereResource resource ( ) { </a> 1
<a> return resource ; </a> 0
<a> } </a> 1
<a> public HttpServletRequest request ( ) { </a> 0
<a> return resource . getRequest ( ) ; </a> 1
<a> } </a> 1
<a> public WebSocket <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> abstract public void <RARE_TOKEN> ( String data ) ; </a> 0
<a> abstract public void <RARE_TOKEN> ( byte [ ] data , int offset , int length ) ; </a> 0
<a> public void close ( ) { </a> 0
<a> try { </a> 1
<a> if ( handler != null && resource != null ) { </a> 1
<a> handler . <RARE_TOKEN> ( new <RARE_TOKEN> ( ( AtmosphereResourceImpl ) resource , false , true ) ) ; </a> 1
<a> } </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> if ( AtmosphereResourceImpl . class . isAssignableFrom ( resource . getClass ( ) ) ) { </a> 0
<a> AtmosphereResourceImpl . class . cast ( resource ) . <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> logger . info ( "Failed <RARE_TOKEN> atmosphere handler <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> if ( resource != null ) { </a> 1
<a> resource . getBroadcaster ( ) . <RARE_TOKEN> ( resource ) ; </a> 1
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public String toString ( ) { </a> 1
<a> return <RARE_TOKEN> <RARE_TOKEN> + handler + ", <RARE_TOKEN> + resource + ", <RARE_TOKEN> + </a> 1
<a> <RARE_TOKEN> + " <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> event ) { </a> 1
<a> if ( resource == null ) return ; </a> 1
<a> AtmosphereResourceImpl r = AtmosphereResourceImpl . class . cast ( resource ) ; </a> 1
<a> for ( AtmosphereResourceEventListener l : r . <RARE_TOKEN> ( ) ) { </a> 1
<a> if ( <RARE_TOKEN> . class . isAssignableFrom ( l . getClass ( ) ) ) { </a> 1
<a> switch ( event . type ( ) ) { </a> 1
<a> case <RARE_TOKEN> : </a> 1
<a> <RARE_TOKEN> . class . cast ( l ) . <RARE_TOKEN> ( event ) ; </a> 1
<a> break ; </a> 1
<a> case <RARE_TOKEN> : </a> 1
<a> <RARE_TOKEN> . class . cast ( l ) . <RARE_TOKEN> ( event ) ; </a> 1
<a> break ; </a> 1
<a> case <RARE_TOKEN> : </a> 1
<a> <RARE_TOKEN> . class . cast ( l ) . <RARE_TOKEN> ( event ) ; </a> 1
<a> break ; </a> 1
<a> case <RARE_TOKEN> : </a> 1
<a> <RARE_TOKEN> . class . cast ( l ) . <RARE_TOKEN> ( event ) ; </a> 1
<a> break ; </a> 1
<a> case <RARE_TOKEN> : </a> 1
<a> <RARE_TOKEN> . class . cast ( l ) . <RARE_TOKEN> ( event ) ; </a> 1
<a> break ; </a> 1
<a> case <RARE_TOKEN> : </a> 1
<a> <RARE_TOKEN> . class . cast ( l ) . <RARE_TOKEN> ( event ) ; </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> protected Map < String , String > <RARE_TOKEN> ( HttpServletRequest request ) { </a> 0
<a> Map < String , String > headers = new HashMap < String , String > ( ) ; </a> 0
<a> <RARE_TOKEN> < String > e = request . <RARE_TOKEN> ( ) ; </a> 1
<a> String s ; </a> 1
<a> while ( e . <RARE_TOKEN> ( ) ) { </a> 1
<a> s = e . <RARE_TOKEN> ( ) ; </a> 1
<a> headers . put ( s , request . <RARE_TOKEN> ( s ) ) ; </a> 0
<a> } </a> 0
<a> headers . put ( HeaderConfig . <RARE_TOKEN> , HeaderConfig . <RARE_TOKEN> ) ; </a> 0
<a> return headers ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . websocket . container ; </a> 0
<a> import org . atmosphere . websocket . WebSocket ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . websocket . WebSocket . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 1
<a> import org . slf4j . LoggerFactory ; </a> 1
<a> import java . io . IOException ; </a> 0
<a> public class <RARE_TOKEN> implements WebSocket { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 1
<a> private final <RARE_TOKEN> connection ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> connection ) { </a> 1
<a> this . connection = connection ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int errorCode , String message ) throws IOException { </a> 1
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String location ) throws IOException { </a> 1
<a> } </a> 0
<a> public void write ( byte frame , String data ) throws IOException { </a> 0
<a> if ( ! connection . isOpen ( ) ) throw new IOException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> connection . <RARE_TOKEN> ( data ) ; </a> 1
<a> } </a> 1
<a> public void write ( byte frame , byte [ ] data ) throws IOException { </a> 0
<a> if ( ! connection . isOpen ( ) ) throw new IOException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> connection . <RARE_TOKEN> ( data , 0 , data . length ) ; </a> 1
<a> } </a> 1
<a> public void write ( byte frame , byte [ ] data , int offset , int length ) throws IOException { </a> 0
<a> if ( ! connection . isOpen ( ) ) throw new IOException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> connection . <RARE_TOKEN> ( new String ( data , offset , length , <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 1
<a> public void close ( ) throws IOException { </a> 1
<a> logger . debug ( <RARE_TOKEN> ) ; </a> 0
<a> connection . disconnect ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . websocket . container ; </a> 0
<a> import org . atmosphere . websocket . WebSocket ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . websocket . WebSocket . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> public class <RARE_TOKEN> implements WebSocket { </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int errorCode , String message ) throws IOException { </a> 1
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String location ) throws IOException { </a> 1
<a> } </a> 0
<a> public void write ( byte frame , String data ) throws IOException { </a> 0
<a> if ( ! <RARE_TOKEN> . isOpen ( ) ) throw new IOException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( frame , data ) ; </a> 1
<a> } </a> 1
<a> public void write ( byte frame , byte [ ] data ) throws IOException { </a> 0
<a> if ( ! <RARE_TOKEN> . isOpen ( ) ) throw new IOException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( frame , data , 0 , data . length ) ; </a> 1
<a> } </a> 0
<a> public void write ( byte frame , byte [ ] data , int offset , int length ) throws IOException { </a> 0
<a> if ( ! <RARE_TOKEN> . isOpen ( ) ) throw new IOException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( frame , data , offset , length ) ; </a> 1
<a> } </a> 1
<a> public void close ( ) throws IOException { </a> 1
<a> <RARE_TOKEN> . disconnect ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . websocket . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . atmosphere . websocket . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . websocket . WebSocket ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( AtmosphereServlet . class ) ; </a> 0
<a> public <RARE_TOKEN> ( AtmosphereServlet <RARE_TOKEN> , WebSocket <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String data ) { </a> 0
<a> logger . trace ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> resource ( ) . getBroadcaster ( ) . broadcast ( data ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( byte [ ] data , int offset , int length ) { </a> 0
<a> logger . trace ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> byte [ ] b = new byte [ length ] ; </a> 0
<a> System . <RARE_TOKEN> ( data , offset , b , 0 , length ) ; </a> 0
<a> resource ( ) . getBroadcaster ( ) . broadcast ( b ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . websocket . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . atmosphere . websocket . WebSocket ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . websocket . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . websocket . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements Serializable { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( AtmosphereServlet . class ) ; </a> 0
<a> private final String contentType ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( AtmosphereServlet <RARE_TOKEN> , WebSocket <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String contentType = <RARE_TOKEN> . <RARE_TOKEN> ( ) . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 0
<a> if ( contentType == null ) { </a> 0
<a> contentType = <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> this . contentType = contentType ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . getInitParameter ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String d ) { </a> 0
<a> String <RARE_TOKEN> = request ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( d . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> String [ ] token = d . split ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> = token [ 1 ] ; </a> 1
<a> d = token [ 2 ] ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> r = new <RARE_TOKEN> . Builder ( ) </a> 0
<a> . request ( request ( ) ) </a> 0
<a> . method ( <RARE_TOKEN> ) </a> 1
<a> . contentType ( contentType ) </a> 1
<a> . <RARE_TOKEN> ( d ) </a> 1
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 1
<a> . headers ( <RARE_TOKEN> ( request ( ) ) ) </a> 0
<a> . build ( ) ; </a> 1
<a> <RARE_TOKEN> ( r , new <RARE_TOKEN> < WebSocket > ( <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( byte [ ] d , final int offset , final int length ) { </a> 0
<a> try { </a> 0
<a> String <RARE_TOKEN> = request ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( d [ 0 ] == ( byte ) <RARE_TOKEN> . charAt ( 0 ) && d [ 1 ] == ( byte ) <RARE_TOKEN> . charAt ( 0 ) ) { </a> 0
<a> final String s = new String ( d , offset , length , <RARE_TOKEN> ) ; </a> 0
<a> String [ ] token = s . split ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = token [ 1 ] ; </a> 0
<a> d = token [ 2 ] . getBytes ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> r = new <RARE_TOKEN> . Builder ( ) </a> 0
<a> . request ( request ( ) ) </a> 0
<a> . method ( <RARE_TOKEN> ) </a> 0
<a> . contentType ( contentType ) </a> 0
<a> . <RARE_TOKEN> ( d , offset , length ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . headers ( <RARE_TOKEN> ( request ( ) ) ) </a> 0
<a> . build ( ) ; </a> 0
<a> <RARE_TOKEN> ( r , new <RARE_TOKEN> < WebSocket > ( <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> logger . warn ( e . getMessage ( ) , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereHandler ; </a> 1
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> public abstract class <RARE_TOKEN> implements AtmosphereHandler < HttpServletRequest , HttpServletResponse > { </a> 0
<a> @ Override </a> 1
<a> public void destroy ( ) { </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . AsyncHttpClient ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . Response ; </a> 0
<a> import org . atmosphere . cache . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 1
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . Broadcaster ; </a> 1
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 1
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . HeaderConfig ; </a> 1
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 1
<a> import org . slf4j . Logger ; </a> 1
<a> import org . slf4j . LoggerFactory ; </a> 1
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . testng . <RARE_TOKEN> . Test ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 1
<a> import java . io . <RARE_TOKEN> ; </a> 1
<a> import java . net . <RARE_TOKEN> ; </a> 1
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . CountDownLatch ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . Future ; </a> 1
<a> import java . util . concurrent . TimeUnit ; </a> 1
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 1
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 1
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 1
<a> import static org . testng . Assert . assertEquals ; </a> 0
<a> import static org . testng . Assert . assertFalse ; </a> 0
<a> import static org . testng . Assert . assertNotNull ; </a> 0
<a> import static org . testng . Assert . assertTrue ; </a> 0
<a> import static org . testng . Assert . fail ; </a> 0
<a> public abstract class <RARE_TOKEN> { </a> 1
<a> protected static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 1
<a> protected AtmosphereServlet atmoServlet ; </a> 1
<a> protected final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> protected String urlTarget ; </a> 1
<a> public static class <RARE_TOKEN> { </a> 0
<a> public static int <RARE_TOKEN> ( final String <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> if ( null == <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = System . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( null != <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> return Integer . parseInt ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected int <RARE_TOKEN> ( ) throws IOException { </a> 1
<a> <RARE_TOKEN> socket = null ; </a> 1
<a> try { </a> 1
<a> socket = new <RARE_TOKEN> ( 0 ) ; </a> 1
<a> return socket . <RARE_TOKEN> ( ) ; </a> 1
<a> } finally { </a> 1
<a> if ( socket != null ) { </a> 1
<a> socket . close ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 1
<a> abstract public void <RARE_TOKEN> ( ) throws Exception ; </a> 1
<a> abstract public void <RARE_TOKEN> ( ) ; </a> 1
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 1
<a> abstract public void <RARE_TOKEN> ( ) throws Exception ; </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> private long currentTime ; </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> currentTime = System . currentTimeMillis ( ) ; </a> 0
<a> event . suspend ( <RARE_TOKEN> , false ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> try { </a> 0
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> . getBytes ( ) ) ; </a> 0
<a> assertTrue ( event . <RARE_TOKEN> ( ) ) ; </a> 0
<a> long time = System . currentTimeMillis ( ) - currentTime ; </a> 0
<a> if ( time > <RARE_TOKEN> && time < <RARE_TOKEN> ) { </a> 0
<a> assertTrue ( true ) ; </a> 0
<a> } else { </a> 0
<a> assertFalse ( false ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> String resume = r . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( resume , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 1
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> private long currentTime ; </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> currentTime = System . currentTimeMillis ( ) ; </a> 0
<a> event . suspend ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> try { </a> 0
<a> assertTrue ( event . <RARE_TOKEN> ( ) ) ; </a> 0
<a> long time = System . currentTimeMillis ( ) - currentTime ; </a> 0
<a> if ( time > <RARE_TOKEN> && time < <RARE_TOKEN> ) { </a> 0
<a> assertTrue ( true ) ; </a> 0
<a> } else { </a> 0
<a> assertFalse ( false ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> String resume = r . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( resume , AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } catch ( Exception e ) { </a> 1
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = false ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> private long currentTime ; </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> currentTime = System . currentTimeMillis ( ) ; </a> 1
<a> event . suspend ( ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> try { </a> 0
<a> assertTrue ( event . isCancelled ( ) ) ; </a> 0
<a> long time = System . currentTimeMillis ( ) - currentTime ; </a> 0
<a> if ( time > <RARE_TOKEN> && time < <RARE_TOKEN> ) { </a> 0
<a> assertTrue ( true ) ; </a> 0
<a> } else { </a> 0
<a> assertFalse ( false ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> if ( latch . <RARE_TOKEN> ( ) != 0 ) { </a> 0
<a> fail ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 2 ) ; </a> 1
<a> final CountDownLatch suspended = new CountDownLatch ( 1 ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> AtomicBoolean b = new AtomicBoolean ( false ) ; </a> 1
<a> AtmosphereResource < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( ! b . <RARE_TOKEN> ( true ) ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = event ; </a> 0
<a> event . suspend ( ) ; </a> 0
<a> } finally { </a> 1
<a> suspended . countDown ( ) ; </a> 1
<a> } </a> 1
<a> } else { </a> 0
<a> <RARE_TOKEN> . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . resume ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> try { </a> 0
<a> assertTrue ( event . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> @ Override </a> 0
<a> public String onCompleted ( Response response ) throws Exception { </a> 0
<a> try { </a> 1
<a> assertEquals ( response . <RARE_TOKEN> ( ) , </a> 1
<a> AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } finally { </a> 1
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 1
<a> return null ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> suspended . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 2 ) ; </a> 1
<a> final CountDownLatch suspended = new CountDownLatch ( 1 ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> AtomicBoolean b = new AtomicBoolean ( false ) ; </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( ! b . <RARE_TOKEN> ( true ) ) { </a> 0
<a> try { </a> 0
<a> event . suspend ( ) ; </a> 0
<a> } finally { </a> 0
<a> suspended . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> event . getBroadcaster ( ) . broadcast ( "foo" ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> try { </a> 1
<a> assertFalse ( event . isCancelled ( ) ) ; </a> 0
<a> assertNotNull ( event . getMessage ( ) ) ; </a> 0
<a> assertEquals ( event . getMessage ( ) , "foo" ) ; </a> 0
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> @ Override </a> 0
<a> public String onCompleted ( Response response ) throws Exception { </a> 0
<a> try { </a> 1
<a> assertEquals ( response . <RARE_TOKEN> ( ) , </a> 1
<a> AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } finally { </a> 1
<a> latch . countDown ( ) ; </a> 1
<a> } </a> 1
<a> return null ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> suspended . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 2 ) ; </a> 0
<a> final CountDownLatch suspended = new CountDownLatch ( 1 ) ; </a> 0
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> AtomicBoolean b = new AtomicBoolean ( false ) ; </a> 0
<a> private long currentTime ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( ! b . <RARE_TOKEN> ( true ) ) { </a> 0
<a> try { </a> 0
<a> event . suspend ( ) ; </a> 0
<a> } finally { </a> 0
<a> suspended . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> currentTime = System . currentTimeMillis ( ) ; </a> 0
<a> event . getBroadcaster ( ) . <RARE_TOKEN> ( "foo" , 5 , TimeUnit . SECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> try { </a> 0
<a> long time = System . currentTimeMillis ( ) - currentTime ; </a> 0
<a> if ( time > <RARE_TOKEN> && time < <RARE_TOKEN> ) { </a> 0
<a> assertTrue ( true ) ; </a> 0
<a> } else { </a> 0
<a> assertFalse ( false ) ; </a> 0
<a> } </a> 0
<a> assertFalse ( event . isCancelled ( ) ) ; </a> 0
<a> assertNotNull ( event . getMessage ( ) ) ; </a> 0
<a> assertEquals ( event . getMessage ( ) , "foo" ) ; </a> 0
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> @ Override </a> 0
<a> public String onCompleted ( Response response ) throws Exception { </a> 0
<a> try { </a> 1
<a> assertEquals ( response . <RARE_TOKEN> ( ) , </a> 1
<a> AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } finally { </a> 1
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 1
<a> return null ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> suspended . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 1
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 1
<a> } catch ( Exception e ) { </a> 1
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 2 ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> AtomicBoolean b = new AtomicBoolean ( false ) ; </a> 1
<a> AtomicInteger count = new AtomicInteger ( 0 ) ; </a> 1
<a> private long currentTime ; </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( ! b . <RARE_TOKEN> ( true ) ) { </a> 1
<a> event . suspend ( - 1 , false ) ; </a> 1
<a> } else { </a> 1
<a> currentTime = System . currentTimeMillis ( ) ; </a> 1
<a> if ( count . get ( ) < 4 ) { </a> 1
<a> event . getBroadcaster ( ) . <RARE_TOKEN> ( <RARE_TOKEN> + count . <RARE_TOKEN> ( ) + " " ) ; </a> 1
<a> } else { </a> 1
<a> event . getBroadcaster ( ) . broadcast ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> try { </a> 1
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) . write ( ( String ) event . getMessage ( ) ) ; </a> 1
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> event . getResource ( ) . resume ( ) ; </a> 1
<a> } catch ( Exception ex ) { </a> 1
<a> logger . error ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 1
<a> } finally { </a> 1
<a> latch . countDown ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 1
<a> try { </a> 1
<a> Future < Response > f = c . prepareGet ( urlTarget ) . execute ( ) ; </a> 1
<a> latch . await ( 5 , TimeUnit . SECONDS ) ; </a> 1
<a> c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 1
<a> c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 1
<a> c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 1
<a> c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 1
<a> Response r = f . get ( 10 , TimeUnit . SECONDS ) ; </a> 1
<a> assertNotNull ( r ) ; </a> 1
<a> assertEquals ( r . <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 1
<a> } catch ( Exception e ) { </a> 1
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 2 ) ; </a> 0
<a> final CountDownLatch suspended = new CountDownLatch ( 1 ) ; </a> 0
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> AtomicBoolean b = new AtomicBoolean ( false ) ; </a> 0
<a> private long currentTime ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( ! b . <RARE_TOKEN> ( true ) ) { </a> 0
<a> try { </a> 0
<a> event . suspend ( ) ; </a> 0
<a> } finally { </a> 0
<a> suspended . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> currentTime = System . currentTimeMillis ( ) ; </a> 0
<a> event . getBroadcaster ( ) . <RARE_TOKEN> ( "foo" , 0 , 5 , TimeUnit . SECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> long time = System . currentTimeMillis ( ) - currentTime ; </a> 0
<a> if ( time > <RARE_TOKEN> && time < <RARE_TOKEN> ) { </a> 0
<a> assertTrue ( true ) ; </a> 0
<a> } else { </a> 0
<a> assertFalse ( false ) ; </a> 0
<a> } </a> 0
<a> assertFalse ( event . isCancelled ( ) ) ; </a> 0
<a> assertNotNull ( event . getMessage ( ) ) ; </a> 0
<a> assertEquals ( event . getMessage ( ) , "foo" ) ; </a> 0
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> @ Override </a> 0
<a> public String onCompleted ( Response response ) throws Exception { </a> 0
<a> try { </a> 1
<a> assertEquals ( response . <RARE_TOKEN> ( ) , </a> 1
<a> AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } finally { </a> 1
<a> latch . countDown ( ) ; </a> 1
<a> } </a> 1
<a> return null ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> suspended . await ( 20 , TimeUnit . SECONDS ) ; </a> 1
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 1
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> } catch ( Exception e ) { </a> 1
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 2 ) ; </a> 0
<a> final CountDownLatch suspended = new CountDownLatch ( 1 ) ; </a> 0
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> AtomicBoolean b = new AtomicBoolean ( false ) ; </a> 0
<a> private long currentTime ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( ! b . <RARE_TOKEN> ( true ) ) { </a> 0
<a> try { </a> 0
<a> event . suspend ( ) ; </a> 0
<a> } finally { </a> 0
<a> suspended . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> currentTime = System . currentTimeMillis ( ) ; </a> 0
<a> event . getBroadcaster ( ) . <RARE_TOKEN> ( "foo" , 10 , 5 , TimeUnit . SECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> long time = System . currentTimeMillis ( ) - currentTime ; </a> 0
<a> if ( time > <RARE_TOKEN> && time < <RARE_TOKEN> ) { </a> 0
<a> assertTrue ( true ) ; </a> 0
<a> } else { </a> 0
<a> assertFalse ( false ) ; </a> 0
<a> } </a> 0
<a> assertFalse ( event . isCancelled ( ) ) ; </a> 0
<a> assertNotNull ( event . getMessage ( ) ) ; </a> 0
<a> assertEquals ( event . getMessage ( ) , "foo" ) ; </a> 0
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 1
<a> try { </a> 1
<a> c . prepareGet ( urlTarget ) . execute ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> @ Override </a> 0
<a> public String onCompleted ( Response response ) throws Exception { </a> 0
<a> try { </a> 1
<a> assertEquals ( response . <RARE_TOKEN> ( ) , </a> 1
<a> AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } finally { </a> 1
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 1
<a> return null ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> suspended . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 1
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 1
<a> } catch ( Exception e ) { </a> 1
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 2 ) ; </a> 0
<a> final CountDownLatch suspended = new CountDownLatch ( 1 ) ; </a> 0
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> AtomicBoolean b = new AtomicBoolean ( false ) ; </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( ! b . <RARE_TOKEN> ( true ) ) { </a> 0
<a> try { </a> 0
<a> event . suspend ( ) ; </a> 0
<a> } finally { </a> 0
<a> suspended . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> event . getBroadcaster ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> public BroadcastAction filter ( Object o , Object message ) { </a> 1
<a> return new BroadcastAction ( BroadcastAction . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> + message ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> event . getBroadcaster ( ) . broadcast ( "foo" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> assertFalse ( event . isCancelled ( ) ) ; </a> 0
<a> assertNotNull ( event . getMessage ( ) ) ; </a> 0
<a> assertEquals ( event . getMessage ( ) , <RARE_TOKEN> ) ; </a> 0
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> @ Override </a> 0
<a> public String onCompleted ( Response response ) throws Exception { </a> 0
<a> try { </a> 1
<a> assertEquals ( response . <RARE_TOKEN> ( ) , </a> 1
<a> AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } finally { </a> 1
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 1
<a> return null ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> suspended . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 2 ) ; </a> 0
<a> final CountDownLatch suspended = new CountDownLatch ( 1 ) ; </a> 0
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> AtomicBoolean b = new AtomicBoolean ( false ) ; </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( ! b . <RARE_TOKEN> ( true ) ) { </a> 0
<a> <RARE_TOKEN> a = new <RARE_TOKEN> ( 25 ) ; </a> 0
<a> event . getBroadcaster ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( a ) ; </a> 0
<a> try { </a> 0
<a> event . suspend ( ) ; </a> 0
<a> } finally { </a> 1
<a> suspended . countDown ( ) ; </a> 1
<a> } </a> 1
<a> } else { </a> 1
<a> event . getBroadcaster ( ) . broadcast ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> assertFalse ( event . isCancelled ( ) ) ; </a> 0
<a> assertNotNull ( event . getMessage ( ) ) ; </a> 0
<a> assertEquals ( event . getMessage ( ) , <RARE_TOKEN> ) ; </a> 0
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> latch . countDown ( ) ; </a> 1
<a> } </a> 1
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> @ Override </a> 0
<a> public String onCompleted ( Response response ) throws Exception { </a> 0
<a> try { </a> 1
<a> assertEquals ( response . <RARE_TOKEN> ( ) , </a> 1
<a> AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } finally { </a> 1
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 1
<a> return null ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> suspended . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 1
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 1
<a> } catch ( Exception e ) { </a> 1
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) throws <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> try { </a> 1
<a> if ( event . getRequest ( ) . getHeader ( HeaderConfig . <RARE_TOKEN> ) != null ) { </a> 1
<a> event . suspend ( - 1 , false ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> event . getBroadcaster ( ) . broadcast ( <RARE_TOKEN> ) . get ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> logger . error ( "" , e ) ; </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> logger . error ( "" , e ) ; </a> 1
<a> } </a> 1
<a> event . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> assertFalse ( event . isCancelled ( ) ) ; </a> 0
<a> assertNotNull ( event . getMessage ( ) ) ; </a> 0
<a> if ( List . class . isAssignableFrom ( event . getMessage ( ) . getClass ( ) ) ) { </a> 0
<a> for ( String m : ( List < String > ) event . getMessage ( ) ) { </a> 0
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) . write ( m . getBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . addHeader ( HeaderConfig . <RARE_TOKEN> , String . valueOf ( <RARE_TOKEN> ) ) . execute ( new <RARE_TOKEN> < Response > ( ) { </a> 1
<a> @ Override </a> 0
<a> public Response onCompleted ( Response r ) throws Exception { </a> 0
<a> try { </a> 0
<a> return r ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> private long currentTime ; </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> currentTime = System . currentTimeMillis ( ) ; </a> 1
<a> event . getBroadcaster ( ) . <RARE_TOKEN> ( 1 , Broadcaster . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> event . suspend ( <RARE_TOKEN> , false ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> try { </a> 0
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> . getBytes ( ) ) ; </a> 0
<a> assertTrue ( event . <RARE_TOKEN> ( ) ) ; </a> 0
<a> long time = System . currentTimeMillis ( ) - currentTime ; </a> 0
<a> if ( time > <RARE_TOKEN> && time < <RARE_TOKEN> ) { </a> 0
<a> assertTrue ( true ) ; </a> 0
<a> } else { </a> 0
<a> assertFalse ( false ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> String resume = r . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( resume , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 2 ) ; </a> 1
<a> final CountDownLatch suspended = new CountDownLatch ( 1 ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> AtomicBoolean b = new AtomicBoolean ( false ) ; </a> 0
<a> private long currentTime ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( ! b . <RARE_TOKEN> ( true ) ) { </a> 1
<a> try { </a> 1
<a> event . suspend ( ) ; </a> 1
<a> event . getBroadcaster ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } finally { </a> 0
<a> suspended . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 1
<a> assertFalse ( event . isCancelled ( ) ) ; </a> 1
<a> assertNotNull ( event . getMessage ( ) ) ; </a> 1
<a> assertEquals ( event . getMessage ( ) , <RARE_TOKEN> ) ; </a> 1
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> try { </a> 1
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> @ Override </a> 0
<a> public String onCompleted ( Response response ) throws Exception { </a> 0
<a> try { </a> 1
<a> assertEquals ( response . <RARE_TOKEN> ( ) , </a> 1
<a> AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } finally { </a> 1
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 1
<a> return null ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> suspended . await ( 20 , TimeUnit . SECONDS ) ; </a> 1
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 1
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 2 ) ; </a> 1
<a> final CountDownLatch suspended = new CountDownLatch ( 1 ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> AtomicBoolean b = new AtomicBoolean ( false ) ; </a> 0
<a> private long currentTime ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( ! b . <RARE_TOKEN> ( true ) ) { </a> 1
<a> try { </a> 1
<a> event . suspend ( ) ; </a> 1
<a> event . getBroadcaster ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } finally { </a> 0
<a> suspended . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> event . resume ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 1
<a> assertNotNull ( event . getMessage ( ) ) ; </a> 1
<a> assertEquals ( event . getMessage ( ) , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> c . prepareGet ( urlTarget ) . execute ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> @ Override </a> 0
<a> public String onCompleted ( Response response ) throws Exception { </a> 0
<a> try { </a> 1
<a> assertEquals ( response . <RARE_TOKEN> ( ) , </a> 1
<a> AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } finally { </a> 1
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 1
<a> return null ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> suspended . await ( 10 , TimeUnit . SECONDS ) ; </a> 1
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( ) ; </a> 1
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 2 ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> private long currentTime ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> currentTime = System . currentTimeMillis ( ) ; </a> 1
<a> event . suspend ( <RARE_TOKEN> , false ) ; </a> 1
<a> try { </a> 1
<a> Broadcaster b = BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . class , <RARE_TOKEN> , true ) ; </a> 1
<a> b . <RARE_TOKEN> ( event ) ; </a> 1
<a> b . broadcast ( <RARE_TOKEN> <RARE_TOKEN> ) . get ( ) ; </a> 1
<a> event . getBroadcaster ( ) . broadcast ( <RARE_TOKEN> <RARE_TOKEN> ) . get ( ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 1
<a> e . printStackTrace ( ) ; </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> e . printStackTrace ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 1
<a> event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) . write ( event . getMessage ( ) . toString ( ) ) ; </a> 1
<a> } finally { </a> 1
<a> latch . countDown ( ) ; </a> 1
<a> if ( latch . <RARE_TOKEN> ( ) == 0 ) { </a> 1
<a> event . getResource ( ) . resume ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> Future < Response > f = c . prepareGet ( urlTarget ) . execute ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> Response r = f . get ( ) ; </a> 1
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> String resume = r . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( resume , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( 0 ) ; </a> 1
<a> final AtomicReference < Response > response = new AtomicReference < Response > ( ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 1
<a> final CountDownLatch <RARE_TOKEN> = new CountDownLatch ( 1 ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . getRequest ( ) . getHeader ( <RARE_TOKEN> ) != null ) { </a> 1
<a> try { </a> 1
<a> event . suspend ( - 1 , false ) ; </a> 1
<a> <RARE_TOKEN> . countDown ( ) ; </a> 1
<a> } finally { </a> 1
<a> } </a> 1
<a> } else { </a> 1
<a> event . getBroadcaster ( ) . broadcast ( <RARE_TOKEN> " ) ; </a> 1
<a> event . getBroadcaster ( ) . broadcast ( <RARE_TOKEN> " ) ; </a> 1
<a> event . getBroadcaster ( ) . broadcast ( <RARE_TOKEN> " ) ; </a> 1
<a> event . getBroadcaster ( ) . broadcast ( <RARE_TOKEN> ) ; </a> 1
<a> logger . info ( event . getResponse ( ) . toString ( ) ) ; </a> 1
<a> event . getResponse ( ) . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> . getBytes ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> writer = event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> writer . write ( event . getMessage ( ) . toString ( ) ) ; </a> 1
<a> writer . flush ( ) ; </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> } finally { </a> 1
<a> if ( <RARE_TOKEN> . get ( ) == 4 ) { </a> 1
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> c . prepareGet ( urlTarget ) . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) . execute ( new <RARE_TOKEN> < Object > ( ) { </a> 1
<a> @ Override </a> 1
<a> public Object onCompleted ( Response r ) throws Exception { </a> 1
<a> response . set ( r ) ; </a> 1
<a> latch . countDown ( ) ; </a> 1
<a> return null ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> <RARE_TOKEN> . await ( 10 , TimeUnit . SECONDS ) ; </a> 1
<a> c . prepareGet ( urlTarget ) . execute ( ) ; </a> 1
<a> latch . await ( 10 , TimeUnit . SECONDS ) ; </a> 1
<a> assertNotNull ( response . get ( ) ) ; </a> 1
<a> assertEquals ( response . get ( ) . <RARE_TOKEN> ( ) , 200 ) ; </a> 1
<a> assertEquals ( response . get ( ) . <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } finally { </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . <RARE_TOKEN> ; </a> 1
<a> import com . <RARE_TOKEN> . http . client . AsyncHttpClient ; </a> 1
<a> import com . <RARE_TOKEN> . http . client . Response ; </a> 1
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 1
<a> import org . atmosphere . cpr . Broadcaster ; </a> 1
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 1
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . <RARE_TOKEN> . jetty . <RARE_TOKEN> ; </a> 1
<a> import org . <RARE_TOKEN> . jetty . servlet . Context ; </a> 1
<a> import org . <RARE_TOKEN> . jetty . servlet . <RARE_TOKEN> ; </a> 1
<a> import org . slf4j . Logger ; </a> 1
<a> import org . slf4j . LoggerFactory ; </a> 1
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . testng . <RARE_TOKEN> . Test ; </a> 1
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 1
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . CountDownLatch ; </a> 1
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 1
<a> import static org . testng . Assert . assertEquals ; </a> 1
<a> import static org . testng . Assert . assertFalse ; </a> 1
<a> import static org . testng . Assert . assertNotNull ; </a> 1
<a> import static org . testng . Assert . assertTrue ; </a> 1
<a> import static org . testng . Assert . fail ; </a> 1
<a> public class <RARE_TOKEN> { </a> 1
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 1
<a> protected <RARE_TOKEN> atmoServlet ; </a> 1
<a> protected final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> protected String urlTarget ; </a> 1
<a> protected <RARE_TOKEN> server ; </a> 1
<a> protected Context <RARE_TOKEN> ; </a> 1
<a> private static CountDownLatch <RARE_TOKEN> ; </a> 1
<a> private static final AtomicReference < String > <RARE_TOKEN> = new AtomicReference < String > ( ) ; </a> 1
<a> public static class <RARE_TOKEN> { </a> 1
<a> public static int <RARE_TOKEN> ( final String <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 1
<a> if ( null == <RARE_TOKEN> ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> String <RARE_TOKEN> = System . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> if ( null != <RARE_TOKEN> ) { </a> 1
<a> try { </a> 1
<a> return Integer . parseInt ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> } </a> 1
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> protected int <RARE_TOKEN> ( ) throws IOException { </a> 1
<a> <RARE_TOKEN> socket = null ; </a> 1
<a> try { </a> 1
<a> socket = new <RARE_TOKEN> ( 0 ) ; </a> 1
<a> return socket . <RARE_TOKEN> ( ) ; </a> 1
<a> } finally { </a> 1
<a> if ( socket != null ) { </a> 1
<a> socket . close ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public static class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) throws IOException { </a> 1
<a> final <RARE_TOKEN> m = <RARE_TOKEN> . build ( req ) ; </a> 1
<a> m . getBroadcaster ( ) . <RARE_TOKEN> ( Broadcaster . SCOPE . <RARE_TOKEN> ) ; </a> 1
<a> req . getSession ( ) . setAttribute ( <RARE_TOKEN> , m ) ; </a> 1
<a> m . suspend ( <RARE_TOKEN> , false ) ; </a> 1
<a> <RARE_TOKEN> . set ( m . getBroadcaster ( ) . <RARE_TOKEN> ( ) ) ; </a> 1
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> . getBytes ( ) ) ; </a> 1
<a> m . addListener ( new AtmosphereResourceEventListener ( ) { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( final AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> event . getResource ( ) . getRequest ( ) . setAttribute ( ApplicationConfig . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> } </a> 1
<a> } ) ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> . countDown ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> int port = <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 1
<a> urlTarget = <RARE_TOKEN> + port + <RARE_TOKEN> ; </a> 1
<a> server = new <RARE_TOKEN> ( port ) ; </a> 1
<a> <RARE_TOKEN> = new Context ( server , "/" , Context . <RARE_TOKEN> ) ; </a> 1
<a> atmoServlet = new <RARE_TOKEN> ( ) ; </a> 1
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( atmoServlet ) , <RARE_TOKEN> ) ; </a> 1
<a> server . start ( ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> atmoServlet . <RARE_TOKEN> ( new <RARE_TOKEN> ( atmoServlet . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 1
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> atmoServlet . destroy ( ) ; </a> 0
<a> server . <RARE_TOKEN> ( ) ; </a> 1
<a> server = null ; </a> 1
<a> } </a> 1
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 1
<a> final CountDownLatch <RARE_TOKEN> = new CountDownLatch ( 1 ) ; </a> 1
<a> <RARE_TOKEN> = new CountDownLatch ( 1 ) ; </a> 1
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 1
<a> Broadcaster b = null ; </a> 1
<a> try { </a> 1
<a> long currentTime = System . currentTimeMillis ( ) ; </a> 1
<a> final AtomicReference < Response > r = new AtomicReference ( ) ; </a> 1
<a> c . prepareGet ( urlTarget ) . execute ( new <RARE_TOKEN> < Response > ( ) { </a> 1
<a> @ Override </a> 1
<a> public Response onCompleted ( Response response ) throws Exception { </a> 1
<a> r . set ( response ) ; </a> 1
<a> latch . countDown ( ) ; </a> 1
<a> return response ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> <RARE_TOKEN> . await ( ) ; </a> 1
<a> String id = <RARE_TOKEN> . get ( ) ; </a> 1
<a> b = BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . class , id ) ; </a> 1
<a> assertNotNull ( b ) ; </a> 1
<a> b . broadcast ( <RARE_TOKEN> ) . get ( ) ; </a> 1
<a> try { </a> 1
<a> latch . await ( ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> long time = System . currentTimeMillis ( ) - currentTime ; </a> 1
<a> if ( time < <RARE_TOKEN> ) { </a> 1
<a> assertTrue ( true ) ; </a> 1
<a> } else { </a> 1
<a> assertFalse ( false ) ; </a> 1
<a> } </a> 1
<a> assertNotNull ( r . get ( ) ) ; </a> 1
<a> assertEquals ( r . get ( ) . <RARE_TOKEN> ( ) , 200 ) ; </a> 1
<a> String resume = r . get ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> assertEquals ( resume , <RARE_TOKEN> ) ; </a> 1
<a> c . prepareGet ( urlTarget ) . execute ( new <RARE_TOKEN> < Response > ( ) { </a> 1
<a> @ Override </a> 1
<a> public Response onCompleted ( Response response ) throws Exception { </a> 1
<a> r . set ( response ) ; </a> 1
<a> <RARE_TOKEN> . countDown ( ) ; </a> 1
<a> return response ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> . await ( ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> assertFalse ( id . equals ( <RARE_TOKEN> . get ( ) ) ) ; </a> 1
<a> } catch ( Exception e ) { </a> 1
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 1
<a> fail ( e . getMessage ( ) ) ; </a> 1
<a> } finally { </a> 1
<a> if ( b != null ) b . destroy ( ) ; </a> 1
<a> } </a> 1
<a> c . close ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import com . sun . <RARE_TOKEN> . http . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import com . sun . <RARE_TOKEN> . http . servlet . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> protected <RARE_TOKEN> ws ; </a> 1
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> int port = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 1
<a> urlTarget = <RARE_TOKEN> + port + <RARE_TOKEN> ; </a> 0
<a> ws = new <RARE_TOKEN> ( port ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> . setProperty ( <RARE_TOKEN> , 0 ) ; </a> 1
<a> ws . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> atmoServlet = new AtmosphereServlet ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( atmoServlet ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> ws . <RARE_TOKEN> ( <RARE_TOKEN> , new String [ ] { <RARE_TOKEN> } ) ; </a> 1
<a> ws . start ( ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> atmoServlet . <RARE_TOKEN> ( new <RARE_TOKEN> ( atmoServlet . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> atmoServlet . destroy ( ) ; </a> 0
<a> ws . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 1
<a> import org . <RARE_TOKEN> . jetty . server . <RARE_TOKEN> ; </a> 1
<a> import org . <RARE_TOKEN> . jetty . servlet . <RARE_TOKEN> ; </a> 1
<a> import org . <RARE_TOKEN> . jetty . servlet . <RARE_TOKEN> ; </a> 1
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> protected <RARE_TOKEN> server ; </a> 1
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> int port = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 1
<a> urlTarget = <RARE_TOKEN> + port + <RARE_TOKEN> ; </a> 0
<a> server = new <RARE_TOKEN> ( port ) ; </a> 0
<a> <RARE_TOKEN> context = new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> context . <RARE_TOKEN> ( "/" ) ; </a> 1
<a> server . <RARE_TOKEN> ( context ) ; </a> 1
<a> atmoServlet = new AtmosphereServlet ( ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> context . <RARE_TOKEN> ( new <RARE_TOKEN> ( atmoServlet ) , "/" ) ; </a> 1
<a> server . start ( ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> atmoServlet . <RARE_TOKEN> ( new <RARE_TOKEN> ( atmoServlet . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> atmoServlet . destroy ( ) ; </a> 0
<a> server . <RARE_TOKEN> ( ) ; </a> 1
<a> server = null ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String name ) { </a> 0
<a> super ( name ) ; </a> 0
<a> } </a> 0
<a> public void destroy ( ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( Broadcaster . SCOPE . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . Context ; </a> 1
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 1
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import javax . servlet . ServletConfig ; </a> 1
<a> import javax . servlet . ServletException ; </a> 1
<a> import java . io . File ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> protected <RARE_TOKEN> embedded ; </a> 1
<a> public static class <RARE_TOKEN> extends AtmosphereServlet { </a> 1
<a> public void init ( final ServletConfig sc ) throws ServletException { </a> 1
<a> cometSupport = new <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> super . init ( sc ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> System . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> int port = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 1
<a> urlTarget = <RARE_TOKEN> + port + <RARE_TOKEN> ; </a> 1
<a> embedded = new <RARE_TOKEN> ( ) ; </a> 1
<a> String path = new File ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ; </a> 1
<a> embedded . <RARE_TOKEN> ( path ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = embedded . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> host = embedded . <RARE_TOKEN> ( <RARE_TOKEN> , path ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( host ) ; </a> 1
<a> Context c = embedded . <RARE_TOKEN> ( "/" , path ) ; </a> 1
<a> c . <RARE_TOKEN> ( false ) ; </a> 1
<a> <RARE_TOKEN> w = c . <RARE_TOKEN> ( ) ; </a> 1
<a> w . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> w . <RARE_TOKEN> ( <RARE_TOKEN> . class . getName ( ) ) ; </a> 1
<a> w . <RARE_TOKEN> ( 0 ) ; </a> 1
<a> c . <RARE_TOKEN> ( w ) ; </a> 1
<a> host . <RARE_TOKEN> ( c ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = embedded . <RARE_TOKEN> ( <RARE_TOKEN> , port , <RARE_TOKEN> . class . getName ( ) ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( host ) ; </a> 1
<a> embedded . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> embedded . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> embedded . start ( ) ; </a> 1
<a> atmoServlet = ( AtmosphereServlet ) w . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 1
<a> embedded . <RARE_TOKEN> ( ) ; </a> 1
<a> } catch ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 1
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> failed" , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . model . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . container . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . container . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . container . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . container . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . container . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Suspend ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . FrameworkConfig ; </a> 0
<a> import org . atmosphere . cpr . HeaderConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . websocket . WebSocket ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . core . Context ; </a> 0
<a> import javax . ws . rs . core . HttpHeaders ; </a> 0
<a> import javax . ws . rs . core . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . core . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . Future ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> public final static String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> public final static String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> public final static String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> public final static String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> public final static String <RARE_TOKEN> = <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> public final static String <RARE_TOKEN> = FrameworkConfig . <RARE_TOKEN> ; </a> 0
<a> enum Action { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 1
<a> } </a> 0
<a> private @ Context HttpServletRequest <RARE_TOKEN> ; </a> 0
<a> private </a> 0
<a> @ Context </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final ConcurrentHashMap < String , AtmosphereResource < HttpServletRequest , HttpServletResponse > > <RARE_TOKEN> = </a> 0
<a> new ConcurrentHashMap < String , AtmosphereResource < HttpServletRequest , HttpServletResponse > > ( ) ; </a> 0
<a> private class Filter implements <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> private final Action action ; </a> 0
<a> private final long timeout ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final Suspend . SCOPE scope ; </a> 0
<a> private final Class < <RARE_TOKEN> > [ ] <RARE_TOKEN> ; </a> 0
<a> private Class < ? extends AtmosphereResourceEventListener > [ ] listeners = null ; </a> 0
<a> private final boolean outputComments ; </a> 0
<a> private final ArrayList < <RARE_TOKEN> > <RARE_TOKEN> </a> 0
<a> = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> private final String topic ; </a> 0
<a> protected Filter ( Action action ) { </a> 0
<a> this ( action , - 1 ) ; </a> 0
<a> } </a> 0
<a> protected Filter ( Action action , long timeout ) { </a> 0
<a> this ( action , timeout , 0 ) ; </a> 0
<a> } </a> 0
<a> protected Filter ( Action action , long timeout , int <RARE_TOKEN> ) { </a> 0
<a> this ( action , timeout , <RARE_TOKEN> , Suspend . SCOPE . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected Filter ( Action action , long timeout , int <RARE_TOKEN> , Suspend . SCOPE scope ) { </a> 0
<a> this ( action , timeout , <RARE_TOKEN> , scope , true ) ; </a> 0
<a> } </a> 0
<a> protected Filter ( Action action , long timeout , int <RARE_TOKEN> , Suspend . SCOPE scope , boolean outputComments ) { </a> 0
<a> this ( action , timeout , <RARE_TOKEN> , scope , outputComments , null , null ) ; </a> 0
<a> } </a> 0
<a> protected Filter ( Action action , long timeout , int <RARE_TOKEN> , Suspend . SCOPE scope , boolean outputComments , Class < <RARE_TOKEN> > [ ] <RARE_TOKEN> , String topic ) { </a> 0
<a> this . action = action ; </a> 0
<a> this . timeout = timeout ; </a> 0
<a> this . scope = scope ; </a> 0
<a> this . outputComments = outputComments ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . topic = topic ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> boolean resumeOnBroadcast ( <RARE_TOKEN> request , boolean resumeOnBroadcast ) { </a> 1
<a> String transport = request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> if ( transport != null && transport . equals ( <RARE_TOKEN> ) ) { </a> 1
<a> return true ; </a> 0
<a> } </a> 0
<a> return resumeOnBroadcast ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( <RARE_TOKEN> request , boolean <RARE_TOKEN> ) { </a> 1
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> if ( <RARE_TOKEN> . getHeaders ( <RARE_TOKEN> ) != null && <RARE_TOKEN> . getHeaders ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> String [ ] e = ( ( <RARE_TOKEN> < String > ) <RARE_TOKEN> . getHeaders ( <RARE_TOKEN> ) ) . <RARE_TOKEN> ( ) . split ( <RARE_TOKEN> ) ; </a> 0
<a> for ( String <RARE_TOKEN> : e ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> String transport = request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 1
<a> } else if ( transport != null && transport . equals ( <RARE_TOKEN> ) ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> filter ( <RARE_TOKEN> request , <RARE_TOKEN> response ) { </a> 1
<a> if ( response . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> return response ; </a> 0
<a> } </a> 0
<a> AtmosphereResource < HttpServletRequest , HttpServletResponse > r = </a> 0
<a> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > ) <RARE_TOKEN> </a> 0
<a> . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> = ( Boolean ) <RARE_TOKEN> . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 1
<a> switch ( action ) { </a> 1
<a> case <RARE_TOKEN> : </a> 0
<a> SuspendResponse < ? > s = SuspendResponse . class . cast ( <RARE_TOKEN> . class . cast ( response . getResponse ( ) ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> ( request , s . outputComments ( ) ) ; </a> 1
<a> boolean resumeOnBroadcast = resumeOnBroadcast ( request , s . resumeOnBroadcast ( ) ) ; </a> 1
<a> for ( AtmosphereResourceEventListener <RARE_TOKEN> : s . listeners ( ) ) { </a> 0
<a> if ( r instanceof <RARE_TOKEN> ) { </a> 1
<a> ( ( <RARE_TOKEN> ) r ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> Broadcaster bc = s . broadcaster ( ) ; </a> 0
<a> if ( bc == null && s . scope ( ) != Suspend . SCOPE . <RARE_TOKEN> ) { </a> 0
<a> bc = ( Broadcaster ) <RARE_TOKEN> . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) != null ; </a> 1
<a> boolean <RARE_TOKEN> = response . <RARE_TOKEN> ( ) != null ? <RARE_TOKEN> . class . isAssignableFrom ( response . <RARE_TOKEN> ( ) . getClass ( ) ) : <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> < ? extends <RARE_TOKEN> > <RARE_TOKEN> = null ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> ( request , response ) ; </a> 1
<a> } </a> 1
<a> suspend ( <RARE_TOKEN> , resumeOnBroadcast , <RARE_TOKEN> , </a> 1
<a> <RARE_TOKEN> ( s . period ( ) . value ( ) , s . period ( ) . <RARE_TOKEN> ( ) ) , request , response , bc , r , s . scope ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> , r ) ; </a> 1
<a> } </a> 1
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( request , outputComments ) ; </a> 1
<a> resumeOnBroadcast = resumeOnBroadcast ( request , ( action == Action . <RARE_TOKEN> ) ) ; </a> 1
<a> for ( Class < ? extends AtmosphereResourceEventListener > listener : listeners ) { </a> 0
<a> try { </a> 0
<a> AtmosphereResourceEventListener <RARE_TOKEN> = listener . newInstance ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . inject ( <RARE_TOKEN> ) ; </a> 1
<a> if ( r instanceof <RARE_TOKEN> ) { </a> 1
<a> ( ( <RARE_TOKEN> ) r ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } catch ( Throwable t ) { </a> 0
<a> throw new <RARE_TOKEN> ( </a> 0
<a> new IllegalStateException ( <RARE_TOKEN> AtmosphereResourceEventListener " + listener , t ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Broadcaster broadcaster = ( Broadcaster ) <RARE_TOKEN> . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> if ( action == Action . <RARE_TOKEN> ) { </a> 0
<a> Class < Broadcaster > c = null ; </a> 0
<a> try { </a> 0
<a> c = ( Class < Broadcaster > ) Class . <RARE_TOKEN> ( ( String ) <RARE_TOKEN> . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) ) ; </a> 1
<a> } catch ( Throwable e ) { </a> 1
<a> throw new IllegalStateException ( e . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> broadcaster = BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( c , topic , true ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) != null ; </a> 1
<a> <RARE_TOKEN> = response . <RARE_TOKEN> ( ) != null ? <RARE_TOKEN> . class . isAssignableFrom ( response . <RARE_TOKEN> ( ) . getClass ( ) ) : <RARE_TOKEN> ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> ( request , response ) ; </a> 1
<a> } else { </a> 1
<a> <RARE_TOKEN> = null ; </a> 1
<a> } </a> 1
<a> suspend ( <RARE_TOKEN> , resumeOnBroadcast , <RARE_TOKEN> , timeout , request , response , </a> 1
<a> broadcaster , r , scope ) ; </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> , r ) ; </a> 1
<a> } </a> 1
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( response . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> try { </a> 0
<a> response . write ( ) ; </a> 0
<a> } catch ( IOException ex ) { </a> 0
<a> throw new <RARE_TOKEN> ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> r = ( AtmosphereResource ) <RARE_TOKEN> . getSession ( ) . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> String path = response . <RARE_TOKEN> ( ) . getPath ( ) ; </a> 0
<a> r = <RARE_TOKEN> . remove ( path . substring ( path . <RARE_TOKEN> ( "/" ) + 1 ) ) ; </a> 0
<a> } </a> 0
<a> if ( r != null ) { </a> 0
<a> resume ( r ) ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( </a> 0
<a> new IllegalStateException ( <RARE_TOKEN> to <RARE_TOKEN> suspended <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> is not enabled in <RARE_TOKEN> or <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> to resume is <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> AtmosphereResource <RARE_TOKEN> = ( AtmosphereResource ) <RARE_TOKEN> . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> r = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( action == Action . <RARE_TOKEN> ) { </a> 0
<a> Class < Broadcaster > c = null ; </a> 0
<a> try { </a> 0
<a> c = ( Class < Broadcaster > ) Class . <RARE_TOKEN> ( ( String ) <RARE_TOKEN> . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) ) ; </a> 1
<a> } catch ( Throwable e ) { </a> 0
<a> throw new IllegalStateException ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> r . <RARE_TOKEN> ( BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( c , topic , true ) ) ; </a> 1
<a> } </a> 0
<a> broadcast ( response , r , timeout ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> Object o = response . <RARE_TOKEN> ( ) ; </a> 0
<a> Broadcaster b = r . getBroadcaster ( ) ; </a> 0
<a> if ( response . <RARE_TOKEN> ( ) instanceof Broadcastable ) { </a> 0
<a> b = ( ( Broadcastable ) response . <RARE_TOKEN> ( ) ) . getBroadcaster ( ) ; </a> 0
<a> o = ( ( Broadcastable ) response . <RARE_TOKEN> ( ) ) . getMessage ( ) ; </a> 0
<a> response . <RARE_TOKEN> ( ( ( Broadcastable ) response . <RARE_TOKEN> ( ) ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( response . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> try { </a> 0
<a> response . write ( ) ; </a> 0
<a> } catch ( IOException ex ) { </a> 0
<a> throw new <RARE_TOKEN> ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( action == Action . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( b ) ; </a> 0
<a> } </a> 0
<a> b . <RARE_TOKEN> ( o , <RARE_TOKEN> , timeout , TimeUnit . SECONDS ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> return response ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> request , <RARE_TOKEN> response ) { </a> 1
<a> <RARE_TOKEN> < ? extends <RARE_TOKEN> > <RARE_TOKEN> = <RARE_TOKEN> . class . cast ( response . <RARE_TOKEN> ( ) ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> <RARE_TOKEN> = new <RARE_TOKEN> < AtmosphereResource > ( AtmosphereResource . class , <RARE_TOKEN> . getHeader ( <RARE_TOKEN> ) , "" ) ; </a> 1
<a> } else { </a> 1
<a> response . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> String <RARE_TOKEN> = request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null && <RARE_TOKEN> . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . toString ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , AtmosphereResource r ) { </a> 1
<a> boolean <RARE_TOKEN> = AtmosphereResource . class . isAssignableFrom ( <RARE_TOKEN> . type ( ) ) ? true : false ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ? r : r . getBroadcaster ( ) ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> response ) throws IOException { </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . getAttribute ( WebSocket . <RARE_TOKEN> ) != null ; </a> 0
<a> if ( <RARE_TOKEN> . getHeaders ( <RARE_TOKEN> ) != null && <RARE_TOKEN> . getHeaders ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> String [ ] e = ( ( <RARE_TOKEN> < String > ) <RARE_TOKEN> . getHeaders ( <RARE_TOKEN> ) ) . <RARE_TOKEN> ( ) . split ( <RARE_TOKEN> ) ; </a> 0
<a> for ( String <RARE_TOKEN> : e ) { </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = ( Boolean ) <RARE_TOKEN> . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 1
<a> boolean <RARE_TOKEN> = ( Boolean ) <RARE_TOKEN> . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Broadcaster b ) { </a> 0
<a> Iterator < AtmosphereResource < ? , ? > > i = b . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> while ( i . <RARE_TOKEN> ( ) ) { </a> 0
<a> HttpServletRequest r = ( HttpServletRequest ) i . next ( ) . getRequest ( ) ; </a> 0
<a> r . setAttribute ( ApplicationConfig . <RARE_TOKEN> , true ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Broadcaster bc ) { </a> 0
<a> if ( bc == null ) throw new <RARE_TOKEN> ( new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> c = bc . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( c . <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( bc ) ; </a> 0
<a> c . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> f = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> for ( Class < <RARE_TOKEN> > filter : <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> f = filter . newInstance ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . inject ( f ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> " + filter , t ) ; </a> 0
<a> } </a> 0
<a> c . <RARE_TOKEN> ( f ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Class < ? extends AtmosphereResourceEventListener > [ ] listeners ) { </a> 0
<a> this . listeners = listeners ; </a> 0
<a> } </a> 0
<a> void broadcast ( <RARE_TOKEN> r , AtmosphereResource <RARE_TOKEN> , long delay ) { </a> 0
<a> Object o = r . <RARE_TOKEN> ( ) ; </a> 0
<a> Broadcaster b = <RARE_TOKEN> . getBroadcaster ( ) ; </a> 0
<a> Object msg = o ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> if ( o instanceof Broadcastable ) { </a> 0
<a> if ( ( ( Broadcastable ) o ) . getBroadcaster ( ) != null ) { </a> 0
<a> b = ( ( Broadcastable ) o ) . getBroadcaster ( ) ; </a> 0
<a> } </a> 0
<a> msg = ( ( Broadcastable ) o ) . getMessage ( ) ; </a> 0
<a> <RARE_TOKEN> = ( ( Broadcastable ) o ) . <RARE_TOKEN> ( ) . toString ( ) ; </a> 0
<a> } </a> 0
<a> if ( action == Action . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( b ) ; </a> 0
<a> } </a> 0
<a> if ( o != null ) { </a> 0
<a> <RARE_TOKEN> ( b ) ; </a> 0
<a> try { </a> 1
<a> r . <RARE_TOKEN> ( msg ) ; </a> 0
<a> if ( msg == null ) return ; </a> 0
<a> if ( delay == - 1 ) { </a> 0
<a> Future < Object > f = b . broadcast ( msg ) ; </a> 1
<a> if ( f == null ) return ; </a> 1
<a> Object t = f . get ( ) ; </a> 1
<a> if ( o instanceof Broadcastable ) { </a> 0
<a> r . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else if ( delay == 0 ) { </a> 0
<a> b . <RARE_TOKEN> ( msg ) ; </a> 0
<a> } else { </a> 0
<a> b . <RARE_TOKEN> ( msg , delay , TimeUnit . SECONDS ) ; </a> 0
<a> } </a> 0
<a> } catch ( InterruptedException ex ) { </a> 1
<a> logger . error ( <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 1
<a> } catch ( <RARE_TOKEN> ex ) { </a> 1
<a> logger . error ( <RARE_TOKEN> exception <RARE_TOKEN> <RARE_TOKEN> , ex ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Broadcaster bc ) { </a> 0
<a> <RARE_TOKEN> ( bc ) ; </a> 0
<a> } </a> 0
<a> void resume ( AtmosphereResource resource ) { </a> 0
<a> resource . resume ( ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> f ) { </a> 0
<a> <RARE_TOKEN> . add ( f ) ; </a> 0
<a> } </a> 0
<a> void suspend ( boolean <RARE_TOKEN> , </a> 1
<a> boolean resumeOnBroadcast , </a> 1
<a> boolean <RARE_TOKEN> , </a> 0
<a> long timeout , </a> 0
<a> <RARE_TOKEN> request , </a> 0
<a> <RARE_TOKEN> response , </a> 0
<a> Broadcaster bc , </a> 0
<a> AtmosphereResource < HttpServletRequest , HttpServletResponse > r , </a> 0
<a> Suspend . SCOPE <RARE_TOKEN> ) { </a> 0
<a> if ( response . getStatus ( ) == <RARE_TOKEN> ) { </a> 0
<a> response . <RARE_TOKEN> ( 200 ) ; </a> 0
<a> } </a> 0
<a> BroadcasterFactory <RARE_TOKEN> = ( BroadcasterFactory ) <RARE_TOKEN> </a> 1
<a> . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 1
<a> if ( ! <RARE_TOKEN> && ! resumeOnBroadcast && response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) == null ) { </a> 1
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . toString ( ) ; </a> 0
<a> response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( </a> 0
<a> HttpHeaders . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . path ( <RARE_TOKEN> ) . build ( "" ) ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , r ) ; </a> 0
<a> <RARE_TOKEN> . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setAttribute ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( bc == null && <RARE_TOKEN> != Suspend . SCOPE . <RARE_TOKEN> ) { </a> 0
<a> bc = r . getBroadcaster ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> != Suspend . SCOPE . <RARE_TOKEN> && <RARE_TOKEN> . getSession ( ) . getAttribute ( <RARE_TOKEN> ) != null ) { </a> 0
<a> AtmosphereResource < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> = </a> 0
<a> ( AtmosphereResource ) <RARE_TOKEN> . getSession ( ) . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> bc = <RARE_TOKEN> . getBroadcaster ( ) ; </a> 0
<a> try { </a> 0
<a> bc . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IllegalStateException ex ) { </a> 0
<a> logger . trace ( ex . getMessage ( ) , ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( response . <RARE_TOKEN> ( ) instanceof Broadcastable ) { </a> 1
<a> Broadcastable b = ( Broadcastable ) response . <RARE_TOKEN> ( ) ; </a> 0
<a> bc = b . getBroadcaster ( ) ; </a> 0
<a> response . <RARE_TOKEN> ( b . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( ( <RARE_TOKEN> == Suspend . SCOPE . <RARE_TOKEN> ) && bc == null ) { </a> 0
<a> if ( bc == null ) { </a> 0
<a> try { </a> 0
<a> String id = <RARE_TOKEN> . <RARE_TOKEN> ( ) . toString ( ) ; </a> 0
<a> Class < Broadcaster > c = null ; </a> 0
<a> try { </a> 0
<a> c = ( Class < Broadcaster > ) Class . <RARE_TOKEN> ( ( String ) <RARE_TOKEN> . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> throw new IllegalStateException ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> bc = <RARE_TOKEN> . get ( c , id ) ; </a> 0
<a> bc . <RARE_TOKEN> ( Broadcaster . SCOPE . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> logger . error ( "failed to <RARE_TOKEN> broadcaster <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> , ex ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> bc . <RARE_TOKEN> ( Broadcaster . SCOPE . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( bc ) ; </a> 1
<a> r . <RARE_TOKEN> ( bc ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . getSession ( ) . setAttribute ( <RARE_TOKEN> , r ) ; </a> 0
<a> <RARE_TOKEN> . getSession ( ) . setAttribute ( FrameworkConfig . <RARE_TOKEN> , response ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . setAttribute ( <RARE_TOKEN> , r ) ; </a> 0
<a> <RARE_TOKEN> . setAttribute ( FrameworkConfig . <RARE_TOKEN> , response ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> HttpServletRequest <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , <RARE_TOKEN> , response ) ; </a> 0
<a> if ( resumeOnBroadcast ) { </a> 1
<a> <RARE_TOKEN> . setAttribute ( ApplicationConfig . <RARE_TOKEN> , new Boolean ( true ) ) ; </a> 1
<a> } </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> contentType = response . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( contentType == null && response . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> > l = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 0
<a> l . add ( request . <RARE_TOKEN> ( new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ) ) ; </a> 0
<a> contentType = response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( </a> 0
<a> response . <RARE_TOKEN> ( ) . getClass ( ) , </a> 0
<a> response . <RARE_TOKEN> ( ) , </a> 0
<a> response . <RARE_TOKEN> ( ) , </a> 0
<a> l ) ; </a> 0
<a> if ( contentType == null || </a> 0
<a> contentType . <RARE_TOKEN> ( ) || contentType . <RARE_TOKEN> ( ) ) </a> 0
<a> contentType = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> Object <RARE_TOKEN> = response . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> r . getResponse ( ) . <RARE_TOKEN> ( contentType != null ? </a> 0
<a> contentType . toString ( ) : <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> ( response ) ; </a> 0
<a> if ( <RARE_TOKEN> && ! resumeOnBroadcast ) { </a> 0
<a> response . <RARE_TOKEN> ( AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> response . write ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> response . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> response . write ( ) ; </a> 1
<a> } </a> 0
<a> r . suspend ( timeout , false ) ; </a> 0
<a> } catch ( IOException ex ) { </a> 0
<a> throw new <RARE_TOKEN> ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public List < <RARE_TOKEN> > create ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> > list = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 0
<a> Filter f ; </a> 0
<a> if ( logger . isDebugEnabled ( ) ) { </a> 0
<a> for ( <RARE_TOKEN> annotation : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , annotation ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( SuspendResponse . class . isAssignableFrom ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> list . addLast ( new Filter ( Action . <RARE_TOKEN> ) ) ; </a> 0
<a> return list ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( Broadcast . class ) ) { </a> 0
<a> int delay = <RARE_TOKEN> . <RARE_TOKEN> ( Broadcast . class ) . delay ( ) ; </a> 0
<a> Class [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( Broadcast . class ) . value ( ) ; </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( Broadcast . class ) . resumeOnBroadcast ( ) ) { </a> 0
<a> f = new Filter ( Action . <RARE_TOKEN> , delay , 0 , Suspend . SCOPE . <RARE_TOKEN> , true , <RARE_TOKEN> , null ) ; </a> 1
<a> } else { </a> 0
<a> f = new Filter ( Action . <RARE_TOKEN> , delay , 0 , Suspend . SCOPE . <RARE_TOKEN> , true , <RARE_TOKEN> , null ) ; </a> 1
<a> } </a> 0
<a> list . addLast ( f ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . value ( ) ; </a> 1
<a> for ( Class < <RARE_TOKEN> > c : <RARE_TOKEN> ) { </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = c . newInstance ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . inject ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . name ( ) ) ; </a> 0
<a> f . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( Suspend . class ) ) { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( Suspend . class ) . period ( ) ; </a> 0
<a> TimeUnit <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( Suspend . class ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Suspend . SCOPE scope = <RARE_TOKEN> . <RARE_TOKEN> ( Suspend . class ) . scope ( ) ; </a> 0
<a> boolean outputComments = <RARE_TOKEN> . <RARE_TOKEN> ( Suspend . class ) . outputComments ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> if ( <RARE_TOKEN> . class . isAssignableFrom ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( Suspend . class ) . resumeOnBroadcast ( ) ) { </a> 0
<a> f = new Filter ( <RARE_TOKEN> ? Action . <RARE_TOKEN> : Action . <RARE_TOKEN> , <RARE_TOKEN> , 0 , scope , outputComments ) ; </a> 1
<a> } else { </a> 0
<a> f = new Filter ( <RARE_TOKEN> ? Action . <RARE_TOKEN> : Action . <RARE_TOKEN> , <RARE_TOKEN> , 0 , scope , outputComments ) ; </a> 1
<a> } </a> 0
<a> f . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( Suspend . class ) . listeners ( ) ) ; </a> 0
<a> list . <RARE_TOKEN> ( f ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ) { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> if ( <RARE_TOKEN> . class . isAssignableFrom ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> f = new Filter ( <RARE_TOKEN> ? Action . <RARE_TOKEN> : Action . <RARE_TOKEN> , <RARE_TOKEN> , - 1 , Suspend . SCOPE . <RARE_TOKEN> , </a> 1
<a> false , null , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . value ( ) ) ; </a> 0
<a> f . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . listeners ( ) ) ; </a> 0
<a> list . <RARE_TOKEN> ( f ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ) { </a> 0
<a> f = new Filter ( Action . <RARE_TOKEN> , - 1 , - 1 , Suspend . SCOPE . <RARE_TOKEN> , </a> 0
<a> false , null , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . value ( ) ) ; </a> 0
<a> list . <RARE_TOKEN> ( f ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . value ( ) ; </a> 0
<a> list . <RARE_TOKEN> ( new Filter ( Action . <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ) { </a> 0
<a> int period = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . period ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . resumeOnBroadcast ( ) ) { </a> 0
<a> list . <RARE_TOKEN> ( new Filter ( Action . <RARE_TOKEN> , period , <RARE_TOKEN> ) ) ; </a> 0
<a> } else { </a> 0
<a> list . <RARE_TOKEN> ( new Filter ( Action . <RARE_TOKEN> , period , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return list . size ( ) > 0 ? list : null ; </a> 1
<a> } </a> 0
<a> private long <RARE_TOKEN> ( long period , TimeUnit <RARE_TOKEN> ) { </a> 0
<a> if ( period == - 1 ) return period ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case SECONDS : </a> 0
<a> return TimeUnit . MILLISECONDS . <RARE_TOKEN> ( period , TimeUnit . SECONDS ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return TimeUnit . MILLISECONDS . <RARE_TOKEN> ( period , TimeUnit . <RARE_TOKEN> ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return TimeUnit . MILLISECONDS . <RARE_TOKEN> ( period , TimeUnit . <RARE_TOKEN> ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return TimeUnit . MILLISECONDS . <RARE_TOKEN> ( period , TimeUnit . <RARE_TOKEN> ) ; </a> 0
<a> case MILLISECONDS : </a> 0
<a> return period ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return TimeUnit . MILLISECONDS . <RARE_TOKEN> ( period , TimeUnit . <RARE_TOKEN> ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return TimeUnit . MILLISECONDS . <RARE_TOKEN> ( period , TimeUnit . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return period ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 1
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 0
<a> import org . atmosphere . cpr . FrameworkConfig ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . core . Context ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . FrameworkConfig . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> { </a> 0
<a> public static class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Context </a> 0
<a> HttpServletRequest req ; </a> 0
<a> @ Override </a> 1
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Class type , <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> [ ] <RARE_TOKEN> ) { </a> 1
<a> if ( Broadcaster . class . isAssignableFrom ( type ) ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 1
<a> @ <RARE_TOKEN> . <RARE_TOKEN> ( false ) </a> 1
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( String topic ) { </a> 0
<a> Broadcaster broadcaster ; </a> 0
<a> try { </a> 0
<a> AtmosphereResource < HttpServletRequest , HttpServletResponse > r = </a> 0
<a> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > ) </a> 0
<a> req . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 0
<a> BroadcasterFactory <RARE_TOKEN> = ( BroadcasterFactory ) </a> 1
<a> req . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 1
<a> broadcaster = <RARE_TOKEN> . <RARE_TOKEN> ( r . getBroadcaster ( ) . getClass ( ) , topic , true ) ; </a> 1
<a> } catch ( Throwable ex ) { </a> 1
<a> throw new <RARE_TOKEN> ( ex ) ; </a> 1
<a> } </a> 1
<a> req . setAttribute ( <RARE_TOKEN> . <RARE_TOKEN> , broadcaster ) ; </a> 0
<a> return broadcaster ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> @ Context </a> 1
<a> HttpServletRequest req ; </a> 1
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( Class type , <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> [ ] <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . class . isAssignableFrom ( type ) ) { </a> 1
<a> return new <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> return null ; </a> 1
<a> } </a> 0
<a> @ <RARE_TOKEN> . <RARE_TOKEN> ( false ) </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public Object <RARE_TOKEN> ( String topic ) { </a> 1
<a> <RARE_TOKEN> < AtmosphereResourceImpl > <RARE_TOKEN> = null ; </a> 1
<a> try { </a> 1
<a> String <RARE_TOKEN> = req . getHeader ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> <RARE_TOKEN> = ( String ) req . getAttribute ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> = ( <RARE_TOKEN> < AtmosphereResourceImpl > ) <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> if ( req . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) != null ) { </a> 1
<a> AtmosphereResource < ? , ? > r = ( AtmosphereResource < ? , ? > ) req . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null && r != null && r . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> < AtmosphereResourceImpl > ( AtmosphereResourceImpl . class , <RARE_TOKEN> , "" ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( r ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> req . setAttribute ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } catch ( Throwable ex ) { </a> 0
<a> throw new <RARE_TOKEN> ( ex ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> public class Broadcastable { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( Broadcastable . class ) ; </a> 0
<a> private final Object message ; </a> 0
<a> private final Broadcaster b ; </a> 0
<a> private final Object <RARE_TOKEN> ; </a> 0
<a> public Broadcastable ( Broadcaster b ) { </a> 0
<a> this . b = b ; </a> 0
<a> message = "" ; </a> 0
<a> <RARE_TOKEN> = "" ; </a> 0
<a> } </a> 0
<a> public Broadcastable ( Object message , Broadcaster b ) { </a> 0
<a> this . b = b ; </a> 0
<a> this . message = message ; </a> 0
<a> <RARE_TOKEN> = message ; </a> 0
<a> } </a> 0
<a> public Broadcastable ( Object message , Object <RARE_TOKEN> , Broadcaster b ) { </a> 0
<a> this . b = b ; </a> 0
<a> this . message = message ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Object broadcast ( ) { </a> 0
<a> try { </a> 0
<a> return b . broadcast ( message ) . get ( ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> logger . error ( "failed to broadcast <RARE_TOKEN> " + message , ex ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public Object getMessage ( ) { </a> 0
<a> return message ; </a> 0
<a> } </a> 0
<a> public Broadcaster getBroadcaster ( ) { </a> 0
<a> return b ; </a> 0
<a> } </a> 0
<a> public Object <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey ; </a> 0
<a> import com . sun . jersey . core . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . core . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . inject . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import javax . ws . rs . core . Context ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> boolean <RARE_TOKEN> ( <RARE_TOKEN> t ) { </a> 0
<a> return ( t instanceof Class ) && Broadcaster . class . isAssignableFrom ( ( Class ) t ) ; </a> 0
<a> } </a> 0
<a> public static final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , Context a , <RARE_TOKEN> t ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( t ) ) </a> 0
<a> return null ; </a> 0
<a> return new <RARE_TOKEN> < Broadcaster > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Broadcaster getValue ( ) { </a> 0
<a> return <RARE_TOKEN> ( Broadcaster . class , true ) . getBroadcaster ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , Context a , <RARE_TOKEN> t ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( t ) ) </a> 0
<a> return null ; </a> 0
<a> return new <RARE_TOKEN> < Broadcaster > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Broadcaster getValue ( ) { </a> 0
<a> return ( Broadcaster ) <RARE_TOKEN> . <RARE_TOKEN> ( this . getClass ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> new Class [ ] { Broadcaster . class } , </a> 0
<a> new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( Object <RARE_TOKEN> , <RARE_TOKEN> method , Object [ ] args ) throws Throwable { </a> 0
<a> return method . <RARE_TOKEN> ( <RARE_TOKEN> ( Broadcaster . class , true ) . getBroadcaster ( ) , </a> 0
<a> args ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . jersey . util . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . class . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id ) { </a> 0
<a> super ( id ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> protected void broadcast ( final AtmosphereResource < ? , ? > r , final AtmosphereResourceEvent e ) { </a> 0
<a> <RARE_TOKEN> . broadcast ( r , e ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Suspend ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public class SuspendResponse < E > extends <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final Suspend . SCOPE scope ; </a> 0
<a> private final boolean outputComments ; </a> 0
<a> private final boolean resumeOnBroadcast ; </a> 0
<a> private final Collection < AtmosphereResourceEventListener > listeners ; </a> 0
<a> private final Broadcaster broadcaster ; </a> 0
<a> protected SuspendResponse ( <RARE_TOKEN> < E > b ) { </a> 0
<a> super ( b ) ; </a> 0
<a> this . <RARE_TOKEN> = b . <RARE_TOKEN> ; </a> 0
<a> this . scope = b . scope ; </a> 0
<a> this . outputComments = b . outputComments ; </a> 0
<a> this . resumeOnBroadcast = b . resumeOnBroadcast ; </a> 0
<a> this . listeners = b . listeners ; </a> 0
<a> this . broadcaster = b . broadcaster ; </a> 0
<a> } </a> 0
<a> public Suspend . SCOPE scope ( ) { </a> 0
<a> return scope ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> period ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean outputComments ( ) { </a> 0
<a> return outputComments ; </a> 0
<a> } </a> 0
<a> public boolean resumeOnBroadcast ( ) { </a> 0
<a> return resumeOnBroadcast ; </a> 0
<a> } </a> 0
<a> public Broadcaster broadcaster ( ) { </a> 0
<a> return broadcaster ; </a> 0
<a> } </a> 0
<a> public Collection < AtmosphereResourceEventListener > listeners ( ) { </a> 0
<a> return Collections . <RARE_TOKEN> ( listeners ) ; </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> < E > extends <RARE_TOKEN> < E , <RARE_TOKEN> < E > > { </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( - 1 , TimeUnit . MILLISECONDS ) ; </a> 0
<a> protected Suspend . SCOPE scope = Suspend . SCOPE . <RARE_TOKEN> ; </a> 0
<a> protected boolean outputComments = true ; </a> 0
<a> protected boolean resumeOnBroadcast = false ; </a> 0
<a> protected final Collection < AtmosphereResourceEventListener > listeners </a> 0
<a> = new ArrayList < AtmosphereResourceEventListener > ( ) ; </a> 0
<a> private Broadcaster broadcaster ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> < E > that ) { </a> 0
<a> super ( that ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> < E > scope ( Suspend . SCOPE scope ) { </a> 0
<a> this . scope = scope ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> < E > period ( int <RARE_TOKEN> , TimeUnit <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> < E > outputComments ( boolean outputComments ) { </a> 0
<a> this . outputComments = outputComments ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> < E > resumeOnBroadcast ( boolean resumeOnBroadcast ) { </a> 0
<a> this . resumeOnBroadcast = resumeOnBroadcast ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> < E > broadcaster ( Broadcaster broadcaster ) { </a> 0
<a> this . broadcaster = broadcaster ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> < E > addListener ( AtmosphereResourceEventListener e ) { </a> 0
<a> listeners . add ( e ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public SuspendResponse < E > build ( ) { </a> 0
<a> SuspendResponse < E > r = new SuspendResponse < E > ( this ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> { </a> 0
<a> private final TimeUnit <RARE_TOKEN> ; </a> 0
<a> private final int period ; </a> 0
<a> public <RARE_TOKEN> ( int period , TimeUnit <RARE_TOKEN> ) { </a> 0
<a> this . period = period ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int value ( ) { </a> 0
<a> return period ; </a> 0
<a> } </a> 0
<a> public TimeUnit <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . slf4j . Logger ; </a> 1
<a> import org . slf4j . LoggerFactory ; </a> 1
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 1
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> import java . util . concurrent . CountDownLatch ; </a> 1
<a> import java . util . concurrent . TimeUnit ; </a> 1
<a> public class <RARE_TOKEN> { </a> 1
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 1
<a> private final static <RARE_TOKEN> factory = new <RARE_TOKEN> ( ) ; </a> 1
<a> private final ConcurrentHashMap < String , <RARE_TOKEN> > <RARE_TOKEN> = new ConcurrentHashMap < String , <RARE_TOKEN> > ( ) ; </a> 1
<a> private final ConcurrentHashMap < String , CountDownLatch > <RARE_TOKEN> = new ConcurrentHashMap < String , CountDownLatch > ( ) ; </a> 1
<a> private <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 1
<a> return factory ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < ? extends <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> {}" , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 1
<a> CountDownLatch latch = <RARE_TOKEN> . remove ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> if ( latch != null ) { </a> 1
<a> latch . countDown ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> < ? extends <RARE_TOKEN> > <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 1
<a> return <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> < ? extends <RARE_TOKEN> > <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 1
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> < ? extends <RARE_TOKEN> > r = <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 1
<a> if ( r == null ) { </a> 1
<a> CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 1
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , latch ) ; </a> 1
<a> try { </a> 1
<a> if ( ! latch . await ( 5 , TimeUnit . SECONDS ) ) { </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . remove ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 1
<a> logger . trace ( "" , e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> return <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> package org . atmosphere . jersey . util ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 1
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 0
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 1
<a> import org . atmosphere . cpr . FrameworkConfig ; </a> 0
<a> import org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . ws . rs . core . HttpHeaders ; </a> 0
<a> import javax . ws . rs . core . <RARE_TOKEN> ; </a> 1
<a> import javax . ws . rs . core . Response ; </a> 0
<a> import java . io . IOException ; </a> 1
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> public final static void broadcast ( final AtmosphereResource < ? , ? > r , final AtmosphereResourceEvent e ) { </a> 1
<a> HttpServletRequest request = ( HttpServletRequest ) r . getRequest ( ) ; </a> 0
<a> try { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) request . getAttribute ( FrameworkConfig . <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> HttpServletRequest <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , request , <RARE_TOKEN> ) ; </a> 0
<a> logger . error ( "Unexpected <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> <RARE_TOKEN> connection <RARE_TOKEN> <RARE_TOKEN> suspended <RARE_TOKEN> ) ; </a> 0
<a> r . getBroadcaster ( ) . <RARE_TOKEN> ( r ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> m = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( HttpHeaders . <RARE_TOKEN> ) ; </a> 0
<a> if ( e . getMessage ( ) instanceof Response ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ( Response ) e . getMessage ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . add ( HttpHeaders . <RARE_TOKEN> , m ) ; </a> 0
<a> <RARE_TOKEN> . write ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } else if ( e . getMessage ( ) instanceof List ) { </a> 0
<a> for ( Object msg : ( List < Object > ) e . getMessage ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( Response . <RARE_TOKEN> ( msg ) . build ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . add ( HttpHeaders . <RARE_TOKEN> , m ) ; </a> 0
<a> <RARE_TOKEN> . write ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( Response . <RARE_TOKEN> ( e . getMessage ( ) ) . build ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . add ( HttpHeaders . <RARE_TOKEN> , m ) ; </a> 0
<a> <RARE_TOKEN> . write ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> <RARE_TOKEN> ( t , r ) ; </a> 0
<a> } finally { </a> 0
<a> Boolean resumeOnBroadcast = ( Boolean ) request . getAttribute ( ApplicationConfig . <RARE_TOKEN> ) ; </a> 0
<a> if ( resumeOnBroadcast != null && resumeOnBroadcast ) { </a> 1
<a> String <RARE_TOKEN> = ( String ) request . getAttribute ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( request . getAttribute ( <RARE_TOKEN> . <RARE_TOKEN> ) != null ) { </a> 0
<a> ( ( ConcurrentHashMap < String , AtmosphereResource < ? , ? > > ) request . getAttribute ( <RARE_TOKEN> . <RARE_TOKEN> ) ) . remove ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> r . resume ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } </a> 0
<a> final static void <RARE_TOKEN> ( Throwable t , AtmosphereResource < ? , ? > r ) { </a> 0
<a> try { </a> 0
<a> logger . debug ( <RARE_TOKEN> , t ) ; </a> 0
<a> if ( t instanceof IOException && r instanceof <RARE_TOKEN> ) { </a> 0
<a> ( ( <RARE_TOKEN> ) r ) . <RARE_TOKEN> ( new <RARE_TOKEN> ( ( AtmosphereResourceImpl ) r , true , false ) ) ; </a> 0
<a> ( ( <RARE_TOKEN> ) r ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> try { </a> 0
<a> r . getBroadcaster ( ) . <RARE_TOKEN> ( r ) ; </a> 0
<a> } catch ( IllegalStateException ex ) { </a> 0
<a> logger . trace ( ex . getMessage ( ) , ex ) ; </a> 0
<a> } </a> 0
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( r ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . util ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . class . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id ) { </a> 0
<a> super ( id ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> protected void broadcast ( final AtmosphereResource < ? , ? > r , final AtmosphereResourceEvent e ) { </a> 0
<a> <RARE_TOKEN> . broadcast ( r , e ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . http . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . http . servlet . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected <RARE_TOKEN> ws ; </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> atmoServlet . <RARE_TOKEN> ( new <RARE_TOKEN> ( atmoServlet . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ws = new <RARE_TOKEN> ( port ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> ws . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( atmoServlet ) ; </a> 0
<a> ws . <RARE_TOKEN> ( <RARE_TOKEN> , new String [ ] { <RARE_TOKEN> } ) ; </a> 0
<a> ws . start ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ws . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . AsyncHttpClient ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . HttpResponseStatus ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . Response ; </a> 0
<a> import org . atmosphere . cache . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceImpl ; </a> 0
<a> import org . atmosphere . cpr . HeaderConfig ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import org . testng . <RARE_TOKEN> . Test ; </a> 0
<a> import java . util . concurrent . CountDownLatch ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 0
<a> import static org . testng . Assert . assertEquals ; </a> 0
<a> import static org . testng . Assert . assertNotNull ; </a> 0
<a> import static org . testng . Assert . assertTrue ; </a> 0
<a> import static org . testng . Assert . fail ; </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> String <RARE_TOKEN> ( int port ) { </a> 0
<a> return <RARE_TOKEN> + port + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( 10 , TimeUnit . SECONDS ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> String resume = r . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( resume , <RARE_TOKEN> ) ; </a> 0
<a> long current = System . currentTimeMillis ( ) - <RARE_TOKEN> ; </a> 0
<a> assertTrue ( current > <RARE_TOKEN> && current < <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> Response r = c . prepareGet ( urlTarget + <RARE_TOKEN> ) . execute ( ) . get ( 10 , TimeUnit . SECONDS ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> String resume = r . <RARE_TOKEN> ( ) ; </a> 0
<a> String [ ] <RARE_TOKEN> = r . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . split ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> [ 0 ] . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> [ 1 ] . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 1
<a> assertEquals ( resume , AtmosphereResourceImpl . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = false ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> try { </a> 0
<a> Response r = c . prepareGet ( urlTarget + <RARE_TOKEN> ) . execute ( ) . get ( <RARE_TOKEN> , TimeUnit . SECONDS ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> long current = System . currentTimeMillis ( ) - <RARE_TOKEN> ; </a> 0
<a> assertTrue ( current > <RARE_TOKEN> && current < <RARE_TOKEN> ) ; </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> final AtomicReference < String > location = new AtomicReference < String > ( ) ; </a> 0
<a> final AtomicReference < String > response = new AtomicReference < String > ( "" ) ; </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> final CountDownLatch <RARE_TOKEN> = new CountDownLatch ( 1 ) ; </a> 0
<a> try { </a> 0
<a> c . prepareGet ( urlTarget + <RARE_TOKEN> ) . execute ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> public void <RARE_TOKEN> ( Throwable throwable ) { </a> 0
<a> fail ( <RARE_TOKEN> , throwable ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws Exception { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> byte <RARE_TOKEN> {}" , new String ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> response . set ( response . get ( ) + new String ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> <RARE_TOKEN> . countDown ( ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( HttpResponseStatus <RARE_TOKEN> ) throws Exception { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws Exception { </a> 0
<a> location . set ( <RARE_TOKEN> . getHeaders ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String onCompleted ( ) throws Exception { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . await ( 5 , TimeUnit . SECONDS ) ; </a> 0
<a> Response r = c . prepareGet ( location . get ( ) ) . execute ( ) . get ( 10 , TimeUnit . SECONDS ) ; </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> assertEquals ( response . get ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> try { </a> 0
<a> Response r = c . prepareGet ( urlTarget + <RARE_TOKEN> ) . execute ( ) . get ( ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> long current = System . currentTimeMillis ( ) - <RARE_TOKEN> ; </a> 0
<a> assertTrue ( current > <RARE_TOKEN> && current < <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> final AtomicReference < Response > response = new AtomicReference < Response > ( ) ; </a> 0
<a> c . prepareGet ( urlTarget + <RARE_TOKEN> ) . execute ( new <RARE_TOKEN> < Response > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Response onCompleted ( Response r ) throws Exception { </a> 0
<a> try { </a> 0
<a> response . set ( r ) ; </a> 0
<a> return r ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> c . <RARE_TOKEN> ( urlTarget + <RARE_TOKEN> ) . <RARE_TOKEN> ( "message" , "foo" ) . execute ( ) . get ( ) ; </a> 0
<a> c . <RARE_TOKEN> ( urlTarget + <RARE_TOKEN> ) . <RARE_TOKEN> ( "message" , <RARE_TOKEN> ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> Response r = response . get ( ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , AtmosphereResourceImpl . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> final AtomicReference < Response > response = new AtomicReference < Response > ( ) ; </a> 0
<a> c . prepareGet ( urlTarget + <RARE_TOKEN> ) . execute ( new <RARE_TOKEN> < Response > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Response onCompleted ( Response r ) throws Exception { </a> 0
<a> try { </a> 0
<a> response . set ( r ) ; </a> 0
<a> return r ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> c . <RARE_TOKEN> ( urlTarget + <RARE_TOKEN> ) . <RARE_TOKEN> ( "message" , "foo" ) . execute ( ) . get ( ) ; </a> 0
<a> c . <RARE_TOKEN> ( urlTarget + <RARE_TOKEN> ) . <RARE_TOKEN> ( "message" , <RARE_TOKEN> ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> Response r = response . get ( ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , AtmosphereResourceImpl . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> long current = System . currentTimeMillis ( ) - <RARE_TOKEN> ; </a> 0
<a> assertTrue ( current > <RARE_TOKEN> && current < <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> final AtomicReference < Response > response = new AtomicReference < Response > ( ) ; </a> 0
<a> c . prepareGet ( urlTarget + <RARE_TOKEN> ) . execute ( new <RARE_TOKEN> < Response > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Response onCompleted ( Response r ) throws Exception { </a> 0
<a> try { </a> 0
<a> response . set ( r ) ; </a> 0
<a> return r ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> c . <RARE_TOKEN> ( urlTarget + <RARE_TOKEN> ) . <RARE_TOKEN> ( "message" , "foo" ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> Response r = response . get ( ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> long current = System . currentTimeMillis ( ) - <RARE_TOKEN> ; </a> 0
<a> assertTrue ( current > <RARE_TOKEN> && current < <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> final AtomicReference < Response > response = new AtomicReference < Response > ( ) ; </a> 0
<a> c . prepareGet ( urlTarget + <RARE_TOKEN> ) . execute ( new <RARE_TOKEN> < Response > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Response onCompleted ( Response r ) throws Exception { </a> 0
<a> try { </a> 0
<a> response . set ( r ) ; </a> 0
<a> return r ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> c . <RARE_TOKEN> ( urlTarget + <RARE_TOKEN> ) . <RARE_TOKEN> ( "message" , <RARE_TOKEN> ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> Response r = response . get ( ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> final AtomicReference < Response > response = new AtomicReference < Response > ( ) ; </a> 0
<a> c . prepareGet ( urlTarget + <RARE_TOKEN> ) . execute ( new <RARE_TOKEN> < Response > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Response onCompleted ( Response r ) throws Exception { </a> 0
<a> try { </a> 0
<a> response . set ( r ) ; </a> 0
<a> return r ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> for ( int i = 0 ; i < 10 ; i ++ ) { </a> 0
<a> c . <RARE_TOKEN> ( urlTarget + <RARE_TOKEN> ) . <RARE_TOKEN> ( "message" , </a> 0
<a> <RARE_TOKEN> ) . execute ( ) . get ( 5 , TimeUnit . SECONDS ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> Response r = response . get ( ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> c . <RARE_TOKEN> ( urlTarget ) . <RARE_TOKEN> ( "message" , <RARE_TOKEN> ) . execute ( ) . get ( ) ; </a> 0
<a> c . <RARE_TOKEN> ( urlTarget ) . <RARE_TOKEN> ( "message" , <RARE_TOKEN> ) . execute ( ) . get ( ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget + <RARE_TOKEN> ) . addHeader ( HeaderConfig . <RARE_TOKEN> , String . valueOf ( <RARE_TOKEN> ) ) . execute ( new <RARE_TOKEN> < Response > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Response onCompleted ( Response r ) throws Exception { </a> 0
<a> try { </a> 0
<a> return r ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> final AtomicReference < Response > response = new AtomicReference < Response > ( ) ; </a> 0
<a> c . prepareGet ( urlTarget + <RARE_TOKEN> ) . execute ( new <RARE_TOKEN> < Response > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Response onCompleted ( Response r ) throws Exception { </a> 0
<a> try { </a> 0
<a> response . set ( r ) ; </a> 0
<a> return r ; </a> 0
<a> } finally { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> c . <RARE_TOKEN> ( urlTarget + <RARE_TOKEN> ) . <RARE_TOKEN> ( "message" , "foo" ) . execute ( ) . get ( ) ; </a> 0
<a> c . <RARE_TOKEN> ( urlTarget + <RARE_TOKEN> ) . <RARE_TOKEN> ( "message" , <RARE_TOKEN> ) . execute ( ) . get ( ) ; </a> 0
<a> try { </a> 0
<a> latch . await ( 20 , TimeUnit . SECONDS ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> Response r = response . get ( ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , AtmosphereResourceImpl . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> public abstract class <RARE_TOKEN> { </a> 0
<a> protected static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> protected static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> protected AtmosphereServlet atmoServlet ; </a> 0
<a> public String urlTarget ; </a> 0
<a> public int port ; </a> 0
<a> abstract public void <RARE_TOKEN> ( ) ; </a> 0
<a> abstract public void <RARE_TOKEN> ( ) throws Exception ; </a> 0
<a> abstract public void <RARE_TOKEN> ( ) throws Exception ; </a> 0
<a> public static class <RARE_TOKEN> { </a> 0
<a> public static int <RARE_TOKEN> ( final String <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> if ( null == <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = System . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( null != <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> return Integer . parseInt ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> socket = null ; </a> 0
<a> try { </a> 0
<a> socket = new <RARE_TOKEN> ( 0 ) ; </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } finally { </a> 0
<a> if ( socket != null ) { </a> 0
<a> socket . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> port = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> urlTarget = <RARE_TOKEN> ( port ) ; </a> 0
<a> atmoServlet = new AtmosphereServlet ( ) ; </a> 0
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , this . getClass ( ) . <RARE_TOKEN> ( ) . getName ( ) ) ; </a> 0
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> abstract String <RARE_TOKEN> ( int port ) ; </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> if ( atmoServlet != null ) atmoServlet . destroy ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Suspend ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 0
<a> import org . atmosphere . jersey . Broadcastable ; </a> 0
<a> import org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . jersey . SuspendResponse ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . FormParam ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> Broadcaster broadcaster ; </a> 0
<a> @ GET </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( ) { </a> 0
<a> SuspendResponse < String > r = new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . broadcaster ( broadcaster ) </a> 0
<a> . outputComments ( false ) </a> 0
<a> . resumeOnBroadcast ( true ) </a> 0
<a> . period ( 5 , TimeUnit . SECONDS ) </a> 0
<a> . build ( ) ; </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( @ <RARE_TOKEN> ( <RARE_TOKEN> ) Broadcaster b ) throws <RARE_TOKEN> , InterruptedException { </a> 0
<a> SuspendResponse < String > r = new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . broadcaster ( broadcaster ) </a> 0
<a> . scope ( Suspend . SCOPE . <RARE_TOKEN> ) </a> 0
<a> . outputComments ( false ) </a> 0
<a> . resumeOnBroadcast ( true ) </a> 0
<a> . period ( 5 , TimeUnit . SECONDS ) </a> 0
<a> . build ( ) ; </a> 0
<a> b . broadcast ( "foo" ) . get ( ) ; </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( ) { </a> 0
<a> SuspendResponse < String > r = new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . broadcaster ( broadcaster ) </a> 0
<a> . outputComments ( true ) </a> 0
<a> . period ( 5 , TimeUnit . SECONDS ) </a> 0
<a> . build ( ) ; </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( ) { </a> 0
<a> SuspendResponse < String > r = new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . broadcaster ( broadcaster ) </a> 0
<a> . outputComments ( true ) </a> 0
<a> . <RARE_TOKEN> ( "" ) </a> 0
<a> . build ( ) ; </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( ) { </a> 0
<a> SuspendResponse < String > r = new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . broadcaster ( broadcaster ) </a> 0
<a> . outputComments ( false ) </a> 0
<a> . <RARE_TOKEN> ( "" ) </a> 0
<a> . build ( ) ; </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( final @ <RARE_TOKEN> ( <RARE_TOKEN> ) String topic ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . class , topic ) . broadcast ( <RARE_TOKEN> " + topic ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> SuspendResponse < String > r = new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . broadcaster ( broadcaster ) </a> 0
<a> . resumeOnBroadcast ( true ) </a> 0
<a> . <RARE_TOKEN> ( "foo" ) </a> 0
<a> . build ( ) ; </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Suspend ( outputComments = false ) </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( ) { </a> 0
<a> SuspendResponse < String > r = new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . outputComments ( false ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . build ( ) ; </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( ) { </a> 0
<a> SuspendResponse < String > r = new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . outputComments ( false ) </a> 0
<a> . resumeOnBroadcast ( true ) </a> 0
<a> . build ( ) ; </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public String resume ( ) throws <RARE_TOKEN> , InterruptedException { </a> 0
<a> broadcaster . broadcast ( <RARE_TOKEN> ) . get ( ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Broadcast </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Broadcast ( resumeOnBroadcast = true ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Broadcast ( resumeOnBroadcast = true , value = { <RARE_TOKEN> . class } ) </a> 1
<a> public Broadcastable filter ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Broadcast ( resumeOnBroadcast = true , value = { <RARE_TOKEN> . class } ) </a> 1
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( period = 5 , resumeOnBroadcast = true , <RARE_TOKEN> = 5 ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( period = 10 , <RARE_TOKEN> = 5 ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( period = 5 ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable schedule ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ Broadcast ( delay = 0 ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ Broadcast ( delay = 5 , resumeOnBroadcast = true ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public String <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> broadcaster . <RARE_TOKEN> ( message ) ; </a> 0
<a> return message ; </a> 0
<a> } </a> 0
<a> Broadcastable broadcast ( String m ) { </a> 0
<a> return new Broadcastable ( m + <RARE_TOKEN> , broadcaster ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( ) { </a> 0
<a> SuspendResponse < String > r = new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . broadcaster ( broadcaster ) </a> 0
<a> . outputComments ( false ) </a> 0
<a> . resumeOnBroadcast ( true ) </a> 0
<a> . period ( 5 , TimeUnit . SECONDS ) </a> 0
<a> . build ( ) ; </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . AsyncHttpClient ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . Response ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . testng . <RARE_TOKEN> . Test ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import static org . testng . Assert . assertEquals ; </a> 0
<a> import static org . testng . Assert . assertNotNull ; </a> 0
<a> import static org . testng . Assert . assertTrue ; </a> 0
<a> import static org . testng . Assert . fail ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> atmoServlet . <RARE_TOKEN> ( new <RARE_TOKEN> ( atmoServlet . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> port = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> urlTarget = <RARE_TOKEN> + port + <RARE_TOKEN> ; </a> 0
<a> atmoServlet = new AtmosphereServlet ( ) ; </a> 0
<a> atmoServlet . <RARE_TOKEN> ( <RARE_TOKEN> , this . getClass ( ) . <RARE_TOKEN> ( ) . getName ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> urlTarget = <RARE_TOKEN> + port + <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( 10 , TimeUnit . SECONDS ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> String resume = r . <RARE_TOKEN> ( ) ; </a> 0
<a> long current = System . currentTimeMillis ( ) - <RARE_TOKEN> ; </a> 0
<a> assertTrue ( current > <RARE_TOKEN> && current < <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . AsyncHttpClient ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . Response ; </a> 0
<a> import com . sun . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . http . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . <RARE_TOKEN> . http . servlet . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cache . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> import org . testng . <RARE_TOKEN> . Test ; </a> 0
<a> import java . util . concurrent . CountDownLatch ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import static org . testng . Assert . assertEquals ; </a> 0
<a> import static org . testng . Assert . assertNotNull ; </a> 0
<a> import static org . testng . Assert . fail ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected <RARE_TOKEN> ws ; </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> atmoServlet . <RARE_TOKEN> ( new <RARE_TOKEN> ( atmoServlet . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ws = new <RARE_TOKEN> ( port ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> ws . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( atmoServlet ) ; </a> 0
<a> ws . <RARE_TOKEN> ( <RARE_TOKEN> , new String [ ] { <RARE_TOKEN> } ) ; </a> 0
<a> ws . start ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ws . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = false ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . nio . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . servlet . Context ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . servlet . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> server = new <RARE_TOKEN> ( port ) ; </a> 0
<a> <RARE_TOKEN> = new Context ( server , "/" , Context . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( atmoServlet ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> listener = new <RARE_TOKEN> ( ) ; </a> 0
<a> listener . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> listener . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> server . <RARE_TOKEN> ( listener ) ; </a> 0
<a> server . start ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> atmoServlet . <RARE_TOKEN> ( new <RARE_TOKEN> ( atmoServlet . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 0
<a> import org . atmosphere . annotation . Suspend ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import javax . ws . rs . FormParam ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import javax . ws . rs . core . Context ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> @ Context </a> 0
<a> Broadcaster broadcaster ; </a> 0
<a> @ Context </a> 0
<a> BroadcasterFactory <RARE_TOKEN> ; </a> 0
<a> @ Context </a> 0
<a> AtmosphereResource < HttpServletRequest , HttpServletResponse > resource ; </a> 0
<a> @ GET </a> 0
<a> @ Suspend ( period = <RARE_TOKEN> , outputComments = false ) </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , broadcaster ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , <RARE_TOKEN> ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , resource ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Broadcast </a> 0
<a> public String <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return message ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . AsyncHttpClient ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . Response ; </a> 0
<a> import org . testng . <RARE_TOKEN> . Test ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import static org . testng . Assert . assertEquals ; </a> 0
<a> import static org . testng . Assert . assertNotNull ; </a> 0
<a> import static org . testng . Assert . assertTrue ; </a> 0
<a> import static org . testng . Assert . fail ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> String <RARE_TOKEN> ( int port ) { </a> 0
<a> return <RARE_TOKEN> + port + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( 10 , TimeUnit . SECONDS ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> String resume = r . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( resume , <RARE_TOKEN> ) ; </a> 0
<a> long current = System . currentTimeMillis ( ) - <RARE_TOKEN> ; </a> 0
<a> assertTrue ( current > <RARE_TOKEN> && current < <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Suspend ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 0
<a> import org . atmosphere . jersey . Broadcastable ; </a> 0
<a> import org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . FormParam ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> Broadcaster broadcaster ; </a> 0
<a> private final static int count = 0 ; </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Suspend ( period = <RARE_TOKEN> , outputComments = false , scope = Suspend . SCOPE . <RARE_TOKEN> , resumeOnBroadcast = true ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ <RARE_TOKEN> ( <RARE_TOKEN> ) Broadcaster b ) throws <RARE_TOKEN> , InterruptedException { </a> 0
<a> b . broadcast ( "foo" ) . get ( ) ; </a> 0
<a> return new Broadcastable ( <RARE_TOKEN> , b ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Suspend ( period = <RARE_TOKEN> , outputComments = false ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( ) { </a> 0
<a> return new Broadcastable ( <RARE_TOKEN> , broadcaster ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Suspend ( period = <RARE_TOKEN> , outputComments = true ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( ) { </a> 0
<a> return new Broadcastable ( broadcaster ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Suspend ( outputComments = true ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( ) { </a> 0
<a> return new Broadcastable ( broadcaster ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Suspend ( outputComments = false ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( ) { </a> 0
<a> return new Broadcastable ( broadcaster ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Suspend ( resumeOnBroadcast = true ) </a> 0
<a> public String <RARE_TOKEN> ( final @ <RARE_TOKEN> ( <RARE_TOKEN> ) String topic ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . class , topic ) . broadcast ( <RARE_TOKEN> " + topic ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> return "foo" ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Suspend ( outputComments = false ) </a> 0
<a> public String suspend ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Suspend ( resumeOnBroadcast = true , outputComments = false ) </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( ) { </a> 0
<a> return new Broadcastable ( broadcaster ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public String resume ( ) throws <RARE_TOKEN> , InterruptedException { </a> 0
<a> broadcaster . broadcast ( <RARE_TOKEN> ) . get ( ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Broadcast </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Broadcast ( resumeOnBroadcast = true ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Broadcast ( resumeOnBroadcast = true , value = { <RARE_TOKEN> . class } ) </a> 0
<a> public Broadcastable filter ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Broadcast ( resumeOnBroadcast = true , value = { <RARE_TOKEN> . class } ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( period = 5 , resumeOnBroadcast = true , <RARE_TOKEN> = 5 ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( period = 10 , <RARE_TOKEN> = 5 ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( period = 5 ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable schedule ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ Broadcast ( delay = 0 ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ Broadcast ( delay = 5 , resumeOnBroadcast = true ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public String <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> broadcaster . <RARE_TOKEN> ( message ) ; </a> 0
<a> return message ; </a> 0
<a> } </a> 0
<a> Broadcastable broadcast ( String m ) { </a> 0
<a> return new Broadcastable ( m + <RARE_TOKEN> , broadcaster ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String name ) { </a> 0
<a> super ( name ) ; </a> 0
<a> } </a> 1
<a> public void destroy ( ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> ( SCOPE . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . AsyncHttpClient ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . Response ; </a> 0
<a> import org . testng . <RARE_TOKEN> . Test ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import static org . testng . Assert . assertEquals ; </a> 0
<a> import static org . testng . Assert . assertNotNull ; </a> 0
<a> import static org . testng . Assert . assertTrue ; </a> 0
<a> import static org . testng . Assert . fail ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> String <RARE_TOKEN> ( int port ) { </a> 0
<a> return <RARE_TOKEN> + port + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Test ( timeOut = <RARE_TOKEN> , enabled = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> running <RARE_TOKEN> <RARE_TOKEN> , getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> AsyncHttpClient c = new AsyncHttpClient ( ) ; </a> 0
<a> try { </a> 0
<a> long <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> Response r = c . prepareGet ( urlTarget ) . execute ( ) . get ( 10 , TimeUnit . SECONDS ) ; </a> 0
<a> assertNotNull ( r ) ; </a> 0
<a> assertEquals ( r . <RARE_TOKEN> ( ) , 200 ) ; </a> 0
<a> String resume = r . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( resume , <RARE_TOKEN> ) ; </a> 0
<a> long current = System . currentTimeMillis ( ) - <RARE_TOKEN> ; </a> 0
<a> assertTrue ( current > <RARE_TOKEN> && current < <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . error ( <RARE_TOKEN> failed" , e ) ; </a> 0
<a> fail ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> c . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . Context ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . container . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . ApplicationConfig ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . testng . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import java . io . File ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected <RARE_TOKEN> embedded ; </a> 0
<a> public static class <RARE_TOKEN> extends AtmosphereServlet { </a> 0
<a> public void init ( final ServletConfig sc ) throws ServletException { </a> 0
<a> <RARE_TOKEN> ( ApplicationConfig . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , this . getClass ( ) . <RARE_TOKEN> ( ) . getName ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> cometSupport = new <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> super . init ( sc ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> = true ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> System . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> port = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> urlTarget = <RARE_TOKEN> + port + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> embedded = new <RARE_TOKEN> ( ) ; </a> 0
<a> String path = new File ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ; </a> 0
<a> embedded . <RARE_TOKEN> ( path ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = embedded . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> host = embedded . <RARE_TOKEN> ( <RARE_TOKEN> , path ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( host ) ; </a> 0
<a> Context c = embedded . <RARE_TOKEN> ( "/" , path ) ; </a> 0
<a> c . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> w = c . <RARE_TOKEN> ( ) ; </a> 0
<a> w . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> w . <RARE_TOKEN> ( <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> w . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> c . <RARE_TOKEN> ( w ) ; </a> 0
<a> host . <RARE_TOKEN> ( c ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = embedded . <RARE_TOKEN> ( <RARE_TOKEN> , port , <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( host ) ; </a> 0
<a> embedded . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> embedded . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> embedded . start ( ) ; </a> 0
<a> atmoServlet = ( AtmosphereServlet ) w . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> if ( atmoServlet != null ) atmoServlet . destroy ( ) ; </a> 0
<a> embedded . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . jersey . <RARE_TOKEN> . samples . <RARE_TOKEN> . atmosphere ; </a> 0
<a> import org . atmosphere . annotation . Suspend ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 0
<a> import org . atmosphere . jersey . Broadcastable ; </a> 0
<a> import org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . annotation . <RARE_TOKEN> ; </a> 0
<a> import javax . annotation . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . core . Context ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private </a> 0
<a> @ Context </a> 0
<a> BroadcasterFactory <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 1 ) ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 1 ) ; </a> 0
<a> private Broadcaster <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> t ; </a> 0
<a> private </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private Broadcaster <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class , <RARE_TOKEN> , true ) ; </a> 0
<a> } </a> 0
<a> @ Suspend </a> 0
<a> @ GET </a> 0
<a> public Broadcastable get ( ) { </a> 0
<a> return new Broadcastable ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ POST </a> 0
<a> public void start ( ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> t = <RARE_TOKEN> . <RARE_TOKEN> ( 1000 , 1000 , new <RARE_TOKEN> ( <RARE_TOKEN> , false ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public void timeout ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , getClass ( ) . getName ( ) , new Date ( ) ) ; </a> 0
<a> <RARE_TOKEN> . broadcast ( new Date ( ) . toString ( ) + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ POST </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> t . cancel ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> t = null ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ POST </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . FormParam ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> @ Path ( "/" ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ GET </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> public String <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return message ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . commons . jersey ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . annotation . Suspend ; </a> 1
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 1
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . core . <RARE_TOKEN> ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 1
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Suspend </a> 0
<a> @ GET </a> 0
<a> public String suspend ( ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> @ Broadcast ( { <RARE_TOKEN> . class , <RARE_TOKEN> . class } ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> @ POST </a> 0
<a> public String <RARE_TOKEN> ( <RARE_TOKEN> < String , String > <RARE_TOKEN> ) { </a> 0
<a> String action = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String name = <RARE_TOKEN> . <RARE_TOKEN> ( "name" ) ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> return ( <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + name + " has <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> return name + <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( "message" ) ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( period = <RARE_TOKEN> ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . servlet . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereHandler ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 1
<a> import org . atmosphere . cpr . AtmosphereServlet ; </a> 1
<a> import org . atmosphere . cpr . Broadcaster ; </a> 1
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . Future ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> public class <RARE_TOKEN> implements AtmosphereHandler < HttpServletRequest , HttpServletResponse > { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final static long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , </a> 0
<a> HttpServletResponse > event ) throws IOException { </a> 0
<a> HttpServletRequest req = event . getRequest ( ) ; </a> 0
<a> HttpServletResponse res = event . getResponse ( ) ; </a> 0
<a> res . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( req . <RARE_TOKEN> ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 1
<a> event . suspend ( ) ; </a> 0
<a> Broadcaster bc = event . getBroadcaster ( ) ; </a> 0
<a> String <RARE_TOKEN> = event . <RARE_TOKEN> ( ) . getInitParameter ( <RARE_TOKEN> ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( true ) && <RARE_TOKEN> != null ) { </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> event . <RARE_TOKEN> ( ) . getServletContext ( ) . log ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> bc . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( </a> 0
<a> new <RARE_TOKEN> ( bc ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> bc . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> Future < String > f = bc . broadcast ( event . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) </a> 0
<a> + <RARE_TOKEN> suspended a connection from " </a> 0
<a> + req . <RARE_TOKEN> ( ) ) ; </a> 0
<a> try { </a> 0
<a> f . get ( ) ; </a> 0
<a> } catch ( InterruptedException ex ) { </a> 0
<a> logger . error ( "" , ex ) ; </a> 0
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> logger . error ( "" , ex ) ; </a> 0
<a> } </a> 1
<a> bc . <RARE_TOKEN> ( req . <RARE_TOKEN> ( ) + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , TimeUnit . SECONDS ) ; </a> 0
<a> bc . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } else if ( req . <RARE_TOKEN> ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> String action = req . <RARE_TOKEN> ( <RARE_TOKEN> ) [ 0 ] ; </a> 0
<a> String name = req . <RARE_TOKEN> ( "name" ) [ 0 ] ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> req . getSession ( ) . setAttribute ( "name" , name ) ; </a> 0
<a> event . getBroadcaster ( ) . broadcast ( <RARE_TOKEN> <RARE_TOKEN> from " </a> 0
<a> + event . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) + <RARE_TOKEN> + name + " has <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> String message = req . <RARE_TOKEN> ( "message" ) [ 0 ] ; </a> 0
<a> event . getBroadcaster ( ) . broadcast ( name + <RARE_TOKEN> + message ) ; </a> 0
<a> } else { </a> 0
<a> res . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . flush ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , </a> 0
<a> HttpServletResponse > event ) throws IOException { </a> 0
<a> HttpServletRequest req = event . getResource ( ) . getRequest ( ) ; </a> 0
<a> HttpServletResponse res = event . getResource ( ) . getResponse ( ) ; </a> 0
<a> if ( event . getMessage ( ) == null ) return ; </a> 0
<a> String e = event . getMessage ( ) . toString ( ) ; </a> 0
<a> String name = e ; </a> 0
<a> String message = "" ; </a> 0
<a> if ( e . indexOf ( <RARE_TOKEN> ) > 0 ) { </a> 0
<a> name = e . substring ( 0 , e . indexOf ( <RARE_TOKEN> ) ) ; </a> 0
<a> message = e . substring ( e . indexOf ( <RARE_TOKEN> ) + 2 ) ; </a> 0
<a> } </a> 0
<a> String msg = <RARE_TOKEN> + <RARE_TOKEN> ( name , message ) + <RARE_TOKEN> ; </a> 0
<a> if ( event . isCancelled ( ) ) { </a> 0
<a> event . getResource ( ) . getBroadcaster ( ) </a> 0
<a> . broadcast ( req . getSession ( ) . getAttribute ( "name" ) + " has <RARE_TOKEN> ) ; </a> 0
<a> } else if ( event . <RARE_TOKEN> ( ) || event . <RARE_TOKEN> ( ) ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( msg ) ; </a> 0
<a> } </a> 0
<a> res . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } </a> 0
<a> private String <RARE_TOKEN> ( String name , String message ) { </a> 0
<a> return <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + name + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> + message + <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void destroy ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . commons . jersey ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public BroadcastAction filter ( Object <RARE_TOKEN> , Object o ) { </a> 0
<a> if ( o instanceof String ) { </a> 0
<a> String m = ( String ) o ; </a> 0
<a> String name = m ; </a> 0
<a> String message = "" ; </a> 0
<a> if ( m . indexOf ( <RARE_TOKEN> ) > 0 ) { </a> 0
<a> name = m . substring ( 0 , m . indexOf ( <RARE_TOKEN> ) ) ; </a> 0
<a> message = m . substring ( m . indexOf ( <RARE_TOKEN> ) + 2 ) ; </a> 0
<a> } </a> 0
<a> return new BroadcastAction ( <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> + name + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + message + <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> return new BroadcastAction ( o ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereHandler ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public class <RARE_TOKEN> implements AtmosphereHandler < HttpServletRequest , HttpServletResponse > { </a> 0
<a> private final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( 0 ) ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > resource ) throws IOException { </a> 0
<a> HttpServletRequest req = resource . getRequest ( ) ; </a> 0
<a> if ( req . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> resource . suspend ( - 1 , false ) ; </a> 0
<a> } else { </a> 0
<a> if ( req . <RARE_TOKEN> ( <RARE_TOKEN> ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> resource . getBroadcaster ( ) . broadcast ( "" ) ; </a> 0
<a> } else if ( req . <RARE_TOKEN> ( <RARE_TOKEN> ) != null ) { </a> 0
<a> Integer i = Integer . valueOf ( req . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> if ( i > <RARE_TOKEN> . get ( ) ) { </a> 0
<a> <RARE_TOKEN> . set ( i ) ; </a> 0
<a> } </a> 0
<a> resource . getBroadcaster ( ) . broadcast ( i > <RARE_TOKEN> . get ( ) ? i : <RARE_TOKEN> . get ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> writer = resource . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> writer . write ( <RARE_TOKEN> ) ; </a> 0
<a> writer . flush ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , </a> 0
<a> HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . isCancelled ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> int count = 0 ; </a> 0
<a> if ( event . getMessage ( ) instanceof Integer ) { </a> 0
<a> count = ( ( Integer ) event . getMessage ( ) ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> event . getResource ( ) . getResponse ( ) . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> + count + " <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> writer = event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> writer . write ( <RARE_TOKEN> ) ; </a> 0
<a> writer . flush ( ) ; </a> 0
<a> } finally { </a> 0
<a> if ( ! event . <RARE_TOKEN> ( ) ) { </a> 0
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void destroy ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . inject . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> public class <RARE_TOKEN> implements AtmosphereResourceEventListener { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> private <RARE_TOKEN> service ; </a> 0
<a> public void <RARE_TOKEN> ( final AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> if ( service == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> new Object [ ] { Thread . currentThread ( ) . getName ( ) , event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> if ( service == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> new Object [ ] { Thread . currentThread ( ) . getName ( ) , event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> if ( service == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> new Object [ ] { Thread . currentThread ( ) . getName ( ) , event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> if ( service == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> new Object [ ] { Thread . currentThread ( ) . getName ( ) , event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> if ( service == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> " + event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) + <RARE_TOKEN> + </a> 0
<a> event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) , event . throwable ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package start ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . server . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . server . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . server . handler . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . server . handler . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . server . handler . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . server . nio . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 0
<a> <RARE_TOKEN> server = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 1000 * <RARE_TOKEN> * <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( - 1 ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> server . <RARE_TOKEN> ( new <RARE_TOKEN> [ ] { <RARE_TOKEN> } ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , "/" ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> server . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> server . start ( ) ; </a> 0
<a> System . in . read ( ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> server . <RARE_TOKEN> ( ) ; </a> 0
<a> server . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereHandler ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> public class <RARE_TOKEN> implements AtmosphereHandler < HttpServletRequest , HttpServletResponse > { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , </a> 0
<a> HttpServletResponse > event ) throws IOException { </a> 0
<a> HttpServletRequest req = event . getRequest ( ) ; </a> 0
<a> HttpServletResponse res = event . getResponse ( ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , req . <RARE_TOKEN> ( ) ) ; </a> 0
<a> String [ ] <RARE_TOKEN> = req . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> [ 0 ] != null ) { </a> 0
<a> String action = req . <RARE_TOKEN> ( <RARE_TOKEN> ) [ 0 ] ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> String message = req . <RARE_TOKEN> ( "message" ) [ 0 ] ; </a> 0
<a> String callback = req . <RARE_TOKEN> ( <RARE_TOKEN> ) [ 0 ] ; </a> 0
<a> if ( callback == null ) { </a> 0
<a> callback = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> event . getBroadcaster ( ) . broadcast ( <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> ++ + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + callback + <RARE_TOKEN> + message + <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> res . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> res . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> res . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String callback = req . <RARE_TOKEN> ( <RARE_TOKEN> ) [ 0 ] ; </a> 0
<a> if ( callback == null ) { </a> 0
<a> callback = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> event . suspend ( ) ; </a> 0
<a> String message = <RARE_TOKEN> message : <RARE_TOKEN> ; </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> ++ + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + callback + <RARE_TOKEN> + message + <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , </a> 0
<a> HttpServletResponse > event ) throws IOException { </a> 0
<a> HttpServletResponse res = event . getResource ( ) . getResponse ( ) ; </a> 0
<a> if ( event . <RARE_TOKEN> ( ) ) { </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( event . getMessage ( ) . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> res . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } </a> 0
<a> public void destroy ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . client ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> public class <RARE_TOKEN> implements Serializable { </a> 0
<a> private long code ; </a> 0
<a> private String data ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( long code , String data ) { </a> 0
<a> this . code = code ; </a> 0
<a> this . data = data ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return code ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( long code ) { </a> 0
<a> this . code = code ; </a> 0
<a> } </a> 0
<a> public String getData ( ) { </a> 0
<a> return data ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String data ) { </a> 0
<a> this . data = data ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) + <RARE_TOKEN> " + getData ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . client ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( value = { <RARE_TOKEN> . class } ) </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . client ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . core . client . GWT ; </a> 0
<a> import com . google . gwt . core . client . <RARE_TOKEN> ; </a> 1
<a> import com . google . gwt . core . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 1
<a> import com . google . gwt . event . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . event . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> . Button ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 1
<a> import java . util . List ; </a> 0
<a> import java . util . logging . Level ; </a> 0
<a> import java . util . logging . Logger ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> client ; </a> 0
<a> Logger logger = Logger . getLogger ( getClass ( ) . getName ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Button button = new Button ( <RARE_TOKEN> ) ; </a> 0
<a> button . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( <RARE_TOKEN> event ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Button post = new Button ( <RARE_TOKEN> ) ; </a> 0
<a> post . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( <RARE_TOKEN> event ) { </a> 0
<a> client . post ( new <RARE_TOKEN> ( count ++ , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the post <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Button <RARE_TOKEN> = new Button ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( <RARE_TOKEN> event ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> < <RARE_TOKEN> > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Throwable <RARE_TOKEN> ) { </a> 0
<a> GWT . log ( "Failed to <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> result ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> message <RARE_TOKEN> " + result . <RARE_TOKEN> ( ) , result . getData ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Button <RARE_TOKEN> = new Button ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( <RARE_TOKEN> event ) { </a> 0
<a> <RARE_TOKEN> . get ( ) . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void execute ( ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . current ( ) . open ( <RARE_TOKEN> . get ( ) . <RARE_TOKEN> ( ) , <RARE_TOKEN> , new <RARE_TOKEN> ( ) . <RARE_TOKEN> ( true ) . <RARE_TOKEN> ( true ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Button <RARE_TOKEN> = new Button ( <RARE_TOKEN> to <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( <RARE_TOKEN> event ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . post ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> socket = new <RARE_TOKEN> ( ) ; </a> 0
<a> socket . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String message ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> window <RARE_TOKEN> , message ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> socket . bind ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . get ( <RARE_TOKEN> ) . add ( button ) ; </a> 0
<a> <RARE_TOKEN> . get ( <RARE_TOKEN> ) . add ( post ) ; </a> 0
<a> <RARE_TOKEN> . get ( <RARE_TOKEN> ) . add ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . get ( <RARE_TOKEN> ) . add ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . get ( <RARE_TOKEN> ) . add ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> Button <RARE_TOKEN> = new Button ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( <RARE_TOKEN> event ) { </a> 0
<a> client . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . get ( <RARE_TOKEN> ) . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> GWT . log ( <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + ", " + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GWT . log ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onError ( Throwable exception , boolean <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = - 1 ; </a> 0
<a> if ( exception instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = ( ( <RARE_TOKEN> ) exception ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> GWT . log ( <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> , exception ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GWT . log ( <RARE_TOKEN> <RARE_TOKEN> + client . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GWT . log ( <RARE_TOKEN> <RARE_TOKEN> + client . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( List < ? extends Serializable > messages ) { </a> 0
<a> StringBuilder result = new StringBuilder ( ) ; </a> 0
<a> for ( Serializable obj : messages ) { </a> 0
<a> result . append ( obj . toString ( ) ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> + client . <RARE_TOKEN> ( ) + <RARE_TOKEN> " + result . toString ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> + client . <RARE_TOKEN> ( ) + <RARE_TOKEN> <RARE_TOKEN> " + messages . size ( ) + " <RARE_TOKEN> , result . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> ; </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> serializer = GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> client = new <RARE_TOKEN> ( GWT . <RARE_TOKEN> ( ) + <RARE_TOKEN> , serializer , <RARE_TOKEN> ) ; </a> 0
<a> client . start ( ) ; </a> 0
<a> } </a> 0
<a> static int count = 0 ; </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> client . broadcast ( new <RARE_TOKEN> ( count ++ , <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . client ; </a> 0
<a> import com . google . gwt . core . client . GWT ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . <RARE_TOKEN> . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public static void <RARE_TOKEN> ( String <RARE_TOKEN> , String message ) { </a> 0
<a> final <RARE_TOKEN> info = new <RARE_TOKEN> ( <RARE_TOKEN> , message ) ; </a> 0
<a> info . show ( ) ; </a> 0
<a> <RARE_TOKEN> t = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> info . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> t . schedule ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void show ( ) { </a> 0
<a> super . show ( ) ; </a> 0
<a> <RARE_TOKEN> . add ( level , this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . set ( level , null ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> ( String <RARE_TOKEN> , String message ) { </a> 0
<a> add ( new <RARE_TOKEN> ( <RARE_TOKEN> , message ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> level = <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> - 80 - ( level * <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static ArrayList < <RARE_TOKEN> > <RARE_TOKEN> = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> private int level ; </a> 0
<a> private static int <RARE_TOKEN> ( ) { </a> 0
<a> int size = <RARE_TOKEN> . size ( ) ; </a> 0
<a> for ( int i = 0 ; i < size ; i ++ ) { </a> 0
<a> if ( <RARE_TOKEN> . get ( i ) == null ) { </a> 0
<a> return i ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return size ; </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GWT . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> interface <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> , <RARE_TOKEN> > { </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> message ; </a> 1
<a> private <RARE_TOKEN> ( String <RARE_TOKEN> , String message ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( this ) ) ; </a> 0
<a> this . <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> this . message . setText ( message ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . client ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . client ; </a> 0
<a> import com . google . gwt . user . client . rpc . <RARE_TOKEN> ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> , <RARE_TOKEN> < <RARE_TOKEN> > callback ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . server ; </a> 0
<a> import org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . gwt . server . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . ServletConfig ; </a> 0
<a> import javax . servlet . ServletException ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . logging . Level ; </a> 0
<a> import java . util . logging . Logger ; </a> 0
<a> public class AtmosphereHandler extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void init ( ServletConfig <RARE_TOKEN> ) throws ServletException { </a> 0
<a> super . init ( <RARE_TOKEN> ) ; </a> 0
<a> Logger . getLogger ( "" ) . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ; </a> 0
<a> Logger . getLogger ( <RARE_TOKEN> ) . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ; </a> 1
<a> Logger . getLogger ( "" ) . <RARE_TOKEN> ( ) [ 0 ] . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ; </a> 0
<a> logger . trace ( <RARE_TOKEN> logging <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( <RARE_TOKEN> resource ) throws ServletException , IOException { </a> 0
<a> resource . getBroadcaster ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> session = resource . <RARE_TOKEN> ( ) . getRequest ( ) . getSession ( false ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> session <RARE_TOKEN> <RARE_TOKEN> " + session . getId ( ) ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> " + session . getAttribute ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else { </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( logger . isDebugEnabled ( ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> " + resource . <RARE_TOKEN> ( ) . getRequest ( ) . <RARE_TOKEN> ( ) </a> 0
<a> + <RARE_TOKEN> + resource . <RARE_TOKEN> ( ) . getRequest ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> public class <RARE_TOKEN> implements AtmosphereResourceEventListener { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( final AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> , event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> , event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> , event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , event . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> {}" , event ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import javax . ws . rs . core . Context ; </a> 0
<a> import javax . ws . rs . core . <RARE_TOKEN> ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> @ Path ( "/" ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private </a> 0
<a> @ Context </a> 0
<a> <RARE_TOKEN> sc ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ GET </a> 0
<a> public InputStream <RARE_TOKEN> ( @ <RARE_TOKEN> ( <RARE_TOKEN> ) <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return sc . <RARE_TOKEN> ( <RARE_TOKEN> + <RARE_TOKEN> . getPath ( ) ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> public InputStream <RARE_TOKEN> ( ) { </a> 0
<a> return sc . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 0
<a> import org . atmosphere . jersey . Broadcastable ; </a> 0
<a> import org . atmosphere . jersey . SuspendResponse ; </a> 0
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . FormParam ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> <RARE_TOKEN> topic ; </a> 0
<a> @ GET </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( ) { </a> 0
<a> return new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . broadcaster ( topic ) </a> 0
<a> . outputComments ( true ) </a> 0
<a> . addListener ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . build ( ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Broadcast </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return new Broadcastable ( message , "" , topic ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import javax . ws . rs . core . Context ; </a> 0
<a> import javax . ws . rs . core . <RARE_TOKEN> ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> @ Path ( "/" ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private </a> 0
<a> @ Context </a> 0
<a> <RARE_TOKEN> sc ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ GET </a> 0
<a> public InputStream <RARE_TOKEN> ( @ <RARE_TOKEN> ( <RARE_TOKEN> ) <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return sc . <RARE_TOKEN> ( <RARE_TOKEN> + <RARE_TOKEN> . getPath ( ) ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> public InputStream <RARE_TOKEN> ( ) { </a> 0
<a> return sc . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 0
<a> import org . atmosphere . jersey . Broadcastable ; </a> 0
<a> import org . atmosphere . jersey . SuspendResponse ; </a> 0
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . FormParam ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> <RARE_TOKEN> topic ; </a> 0
<a> @ GET </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( ) { </a> 0
<a> return new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . broadcaster ( topic ) </a> 0
<a> . outputComments ( true ) </a> 0
<a> . addListener ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . build ( ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Broadcast </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return new Broadcastable ( message , "" , topic ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> import org . atmosphere . websocket . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( final AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> , event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> , event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> , event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> event . getResource ( ) . getRequest ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , event . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> {}" , event ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , event ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , event ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , event ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , event ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , event ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , event ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import javax . ws . rs . core . Context ; </a> 0
<a> import javax . ws . rs . core . <RARE_TOKEN> ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> @ Path ( "/" ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private </a> 0
<a> @ Context </a> 0
<a> <RARE_TOKEN> sc ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ GET </a> 0
<a> public InputStream <RARE_TOKEN> ( @ <RARE_TOKEN> ( <RARE_TOKEN> ) <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return sc . <RARE_TOKEN> ( <RARE_TOKEN> + <RARE_TOKEN> . getPath ( ) ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> public InputStream <RARE_TOKEN> ( ) { </a> 0
<a> return sc . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . jersey . Broadcastable ; </a> 0
<a> import org . atmosphere . jersey . SuspendResponse ; </a> 0
<a> import javax . ws . rs . FormParam ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> Broadcaster topic ; </a> 0
<a> @ GET </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( ) { </a> 0
<a> return new SuspendResponse . <RARE_TOKEN> < String > ( ) </a> 0
<a> . broadcaster ( topic ) </a> 0
<a> . outputComments ( true ) </a> 0
<a> . addListener ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . build ( ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Broadcast </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return new Broadcastable ( message , "" , topic ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . commons . jersey . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . commons . util . <RARE_TOKEN> ; </a> 1
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final static long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> private final List < <RARE_TOKEN> > list ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> list = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 0
<a> list . add ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> list . add ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) throws IOException { </a> 0
<a> <RARE_TOKEN> m = <RARE_TOKEN> . build ( req , list , null ) ; </a> 0
<a> m . addListener ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> req . getSession ( ) . setAttribute ( <RARE_TOKEN> , m ) ; </a> 0
<a> res . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> m . suspend ( - 1 ) ; </a> 0
<a> m . broadcast ( req . <RARE_TOKEN> ( ) + <RARE_TOKEN> suspended a connection from " + req . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( HttpServletRequest req , HttpServletResponse res ) throws IOException { </a> 0
<a> <RARE_TOKEN> m = ( <RARE_TOKEN> ) req . getSession ( ) . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String action = req . <RARE_TOKEN> ( <RARE_TOKEN> ) [ 0 ] ; </a> 0
<a> String name = req . <RARE_TOKEN> ( "name" ) [ 0 ] ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> req . getSession ( ) . setAttribute ( "name" , name ) ; </a> 0
<a> m . broadcast ( <RARE_TOKEN> <RARE_TOKEN> from " + req . <RARE_TOKEN> ( ) + <RARE_TOKEN> + name + " has <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> String message = req . <RARE_TOKEN> ( "message" ) [ 0 ] ; </a> 0
<a> m . broadcast ( name + <RARE_TOKEN> + message ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } else { </a> 0
<a> res . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> public class <RARE_TOKEN> implements AtmosphereResourceEventListener { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( final AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> System . out . println ( <RARE_TOKEN> " + event ) ; </a> 1
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> System . out . println ( <RARE_TOKEN> " + event ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> System . out . println ( <RARE_TOKEN> " + event ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> System . out . println ( <RARE_TOKEN> " + event ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> event . throwable ( ) . printStackTrace ( System . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Suspend ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . BroadcasterFactory ; </a> 0
<a> import org . atmosphere . jersey . Broadcastable ; </a> 0
<a> import org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . annotation . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . FormParam ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public void destroy ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> the <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> Broadcaster topic ; </a> 0
<a> @ GET </a> 0
<a> @ Suspend ( listeners = { <RARE_TOKEN> . class } ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( ) { </a> 0
<a> return new Broadcastable ( topic ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Suspend ( resumeOnBroadcast = true , listeners = { <RARE_TOKEN> . class } ) </a> 0
<a> public String <RARE_TOKEN> ( final @ <RARE_TOKEN> ( <RARE_TOKEN> ) String topic ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> BroadcasterFactory . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . class , topic ) . broadcast ( <RARE_TOKEN> " + topic ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> return "foo" ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Suspend ( resumeOnBroadcast = true , listeners = { <RARE_TOKEN> . class } ) </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( ) { </a> 0
<a> return new Broadcastable ( topic ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> @ Broadcast </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return new Broadcastable ( new <RARE_TOKEN> ( message ) , topic ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Broadcast </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Broadcast ( value = { <RARE_TOKEN> . class } ) </a> 1
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( period = 5 , resumeOnBroadcast = true ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( period = 10 , <RARE_TOKEN> = 5 ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( period = 5 ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable schedule ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ Broadcast ( delay = 5 ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ Broadcast ( delay = 5 , resumeOnBroadcast = true ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public Broadcastable <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ POST </a> 0
<a> @ Broadcast ( delay = 0 ) </a> 0
<a> public Broadcastable buffer ( @ FormParam ( "message" ) String message ) { </a> 0
<a> return broadcast ( message ) ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public String <RARE_TOKEN> ( @ FormParam ( "message" ) String message ) { </a> 0
<a> topic . <RARE_TOKEN> ( message , 10 , TimeUnit . SECONDS ) ; </a> 0
<a> return message ; </a> 0
<a> } </a> 0
<a> Broadcastable broadcast ( String m ) { </a> 0
<a> return new Broadcastable ( m + <RARE_TOKEN> , topic ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String id ) { </a> 0
<a> super ( id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void broadcast ( final AtmosphereResource r , final AtmosphereResourceEvent e ) { </a> 1
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( true ) ) { </a> 0
<a> logger . info ( <RARE_TOKEN> is <RARE_TOKEN> an example that <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> a Broadcaster <RARE_TOKEN> be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> or <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> super . broadcast ( r , e ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . commons . jersey ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 1
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Suspend ; </a> 1
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . core . <RARE_TOKEN> ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Suspend </a> 0
<a> @ GET </a> 0
<a> public String suspend ( ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> @ Broadcast ( { <RARE_TOKEN> . class , <RARE_TOKEN> . class } ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> @ POST </a> 0
<a> public String <RARE_TOKEN> ( <RARE_TOKEN> < String , String > <RARE_TOKEN> ) { </a> 0
<a> String action = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String name = <RARE_TOKEN> . <RARE_TOKEN> ( "name" ) ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> return ( <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + name + " has <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> return name + <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( "message" ) ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( period = <RARE_TOKEN> ) </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Suspend ; </a> 0
<a> import org . atmosphere . commons . jersey . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . util . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . core . <RARE_TOKEN> ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Suspend </a> 0
<a> @ GET </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public String suspend ( ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> @ Broadcast ( { <RARE_TOKEN> . class , <RARE_TOKEN> . class } ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> @ POST </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> ( </a> 0
<a> name = <RARE_TOKEN> , </a> 0
<a> value = <RARE_TOKEN> . class </a> 0
<a> ) </a> 0
<a> public String <RARE_TOKEN> ( <RARE_TOKEN> < String , String > <RARE_TOKEN> ) { </a> 0
<a> String action = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String name = <RARE_TOKEN> . <RARE_TOKEN> ( "name" ) ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> return ( <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + name + " has <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( action ) ) { </a> 0
<a> return name + <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( "message" ) ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . resource . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Broadcast ; </a> 0
<a> import org . atmosphere . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . annotation . Suspend ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereHandler ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( ) ; </a> 0
<a> @ Suspend </a> 0
<a> @ GET </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public String suspend ( ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> @ POST </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Broadcast ( resumeOnBroadcast = true ) </a> 0
<a> public String <RARE_TOKEN> ( @ <RARE_TOKEN> ( <RARE_TOKEN> ) String count ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> {}" , count ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public String resume ( ) { </a> 0
<a> logger . info ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . jersey . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> private AtmosphereResourceEvent event ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent event ) { </a> 0
<a> this . event = event ; </a> 0
<a> } </a> 0
<a> public AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > <RARE_TOKEN> ( ) { </a> 0
<a> return event ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public AtmosphereResource < ? , ? > <RARE_TOKEN> ( AtmosphereResource < ? , ? > r ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) . size ( ) == 0 ) { </a> 0
<a> event = r . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return super . <RARE_TOKEN> ( r ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . samples . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . FormParam ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . POST ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . core . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private String user ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , String name , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . user = name ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> public String get ( ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . remove ( user ) ; </a> 0
<a> } </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ POST </a> 0
<a> public void post ( String message ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , message ) ; </a> 0
<a> } </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ POST </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> public void <RARE_TOKEN> ( @ FormParam ( <RARE_TOKEN> ) String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . bc . <RARE_TOKEN> ( <RARE_TOKEN> . get ( user ) . bc . <RARE_TOKEN> ( ) . getResource ( ) ) ; </a> 0
<a> <RARE_TOKEN> . bc . broadcast ( user + " is <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " , </a> 0
<a> <RARE_TOKEN> . bc . <RARE_TOKEN> ( ) . getResource ( ) ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> is <RARE_TOKEN> {}" , user , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private Map < String , <RARE_TOKEN> > map = new HashMap < String , <RARE_TOKEN> > ( ) ; </a> 0
<a> public static class <RARE_TOKEN> { </a> 0
<a> public final <RARE_TOKEN> bc ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> bc ) { </a> 0
<a> this . bc = bc ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public synchronized <RARE_TOKEN> get ( String name ) { </a> 0
<a> return map . get ( name ) ; </a> 0
<a> } </a> 0
<a> public synchronized <RARE_TOKEN> create ( String user , <RARE_TOKEN> bc ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = get ( user ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) </a> 0
<a> return null ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( bc ) ; </a> 0
<a> map . put ( user , <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public synchronized boolean remove ( String user ) { </a> 0
<a> return map . remove ( user ) != null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package app ; </a> 0
<a> import org . apache . <RARE_TOKEN> . Logger ; </a> 0
<a> import org . apache . <RARE_TOKEN> . action . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . action . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . action . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public static final Logger logger = Logger . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final List < <RARE_TOKEN> > list ; </a> 0
<a> private final Broadcaster b = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> list = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> mapping , <RARE_TOKEN> <RARE_TOKEN> , HttpServletRequest req , HttpServletResponse res ) throws Exception { </a> 0
<a> logger . error ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return mapping . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> mapping , <RARE_TOKEN> <RARE_TOKEN> , HttpServletRequest req , HttpServletResponse res ) throws Exception { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> String value = req . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . print ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + value + <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> mapping , <RARE_TOKEN> <RARE_TOKEN> , HttpServletRequest req , HttpServletResponse res ) throws Exception { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> m = <RARE_TOKEN> . build ( req , list , null ) ; </a> 0
<a> m . <RARE_TOKEN> ( b ) ; </a> 0
<a> req . getSession ( ) . setAttribute ( <RARE_TOKEN> , m ) ; </a> 0
<a> m . suspend ( - 1 ) ; </a> 0
<a> m . broadcast ( req . <RARE_TOKEN> ( ) </a> 0
<a> + <RARE_TOKEN> suspended a connection from " + req . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> mapping , <RARE_TOKEN> <RARE_TOKEN> , HttpServletRequest req , HttpServletResponse res ) throws Exception { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> m = ( <RARE_TOKEN> ) req . getSession ( ) . getAttribute ( <RARE_TOKEN> ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> " + m ) ; </a> 0
<a> res . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String value = req . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> " + value ) ; </a> 0
<a> m . broadcast ( <RARE_TOKEN> " + value + <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . write ( <RARE_TOKEN> ) ; </a> 0
<a> res . <RARE_TOKEN> ( ) . flush ( ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereHandler ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResource ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements AtmosphereHandler < HttpServletRequest , HttpServletResponse > { </a> 0
<a> private static <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResource < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> HttpServletRequest req = event . getRequest ( ) ; </a> 0
<a> HttpServletResponse res = event . getResponse ( ) ; </a> 0
<a> res . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> res . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> res . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( req . <RARE_TOKEN> ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> event . suspend ( ) ; </a> 0
<a> } else if ( req . <RARE_TOKEN> ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = - 1 ; </a> 0
<a> String <RARE_TOKEN> = req . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> writer = res . <RARE_TOKEN> ( ) ; </a> 0
<a> writer . println ( <RARE_TOKEN> is <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> writer . println ( <RARE_TOKEN> - <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = Integer . parseInt ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> writer . println ( <RARE_TOKEN> - <RARE_TOKEN> not an <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> writer . println ( <RARE_TOKEN> - <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> writer . println ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Broadcaster bc = event . getBroadcaster ( ) ; </a> 0
<a> String response = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> bc . broadcast ( response ) ; </a> 0
<a> writer . flush ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) != - 1 ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) throws IOException { </a> 0
<a> if ( event . isCancelled ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( ! event . <RARE_TOKEN> ( ) ) { </a> 0
<a> String response = ( String ) event . getMessage ( ) ; </a> 0
<a> response = <RARE_TOKEN> <RARE_TOKEN> + response + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> writer = event . getResource ( ) . getResponse ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> writer . write ( response ) ; </a> 0
<a> writer . flush ( ) ; </a> 0
<a> event . getResource ( ) . resume ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void destroy ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import javax . servlet . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import javax . ws . rs . core . Context ; </a> 0
<a> import javax . ws . rs . core . <RARE_TOKEN> ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> @ Path ( "/" ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private </a> 0
<a> @ Context </a> 0
<a> <RARE_TOKEN> sc ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ GET </a> 0
<a> public InputStream <RARE_TOKEN> ( @ <RARE_TOKEN> ( <RARE_TOKEN> ) <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return sc . <RARE_TOKEN> ( <RARE_TOKEN> + <RARE_TOKEN> . getPath ( ) ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> public InputStream <RARE_TOKEN> ( ) { </a> 0
<a> return sc . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . <RARE_TOKEN> ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . AsyncHttpClient ; </a> 0
<a> import com . <RARE_TOKEN> . http . client . Response ; </a> 0
<a> import com . sun . jersey . <RARE_TOKEN> . resource . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . Broadcaster ; </a> 0
<a> import org . atmosphere . jersey . SuspendResponse ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . json . JSONObject ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import javax . ws . rs . GET ; </a> 0
<a> import javax . ws . rs . Path ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import javax . ws . rs . Produces ; </a> 0
<a> import javax . ws . rs . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 0
<a> import java . util . concurrent . CountDownLatch ; </a> 0
<a> import java . util . concurrent . Future ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> @ Produces ( <RARE_TOKEN> ) </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final AsyncHttpClient <RARE_TOKEN> = new AsyncHttpClient ( ) ; </a> 0
<a> private final ConcurrentHashMap < String , Future < ? > > futures = new ConcurrentHashMap < String , Future < ? > > ( ) ; </a> 0
<a> private final CountDownLatch <RARE_TOKEN> = new CountDownLatch ( 1 ) ; </a> 0
<a> @ GET </a> 0
<a> public SuspendResponse < String > <RARE_TOKEN> ( final @ <RARE_TOKEN> ( <RARE_TOKEN> ) Broadcaster <RARE_TOKEN> , </a> 0
<a> final @ <RARE_TOKEN> ( <RARE_TOKEN> ) String <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . size ( ) == 0 ) { </a> 0
<a> final Future < ? > future = <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> private final AtomicReference < String > <RARE_TOKEN> = new AtomicReference < String > ( "" ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> if ( ! <RARE_TOKEN> . get ( ) . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . get ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . await ( ) ; </a> 0
<a> <RARE_TOKEN> . prepareGet ( <RARE_TOKEN> + <RARE_TOKEN> ) . execute ( </a> 0
<a> new <RARE_TOKEN> < Object > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Object onCompleted ( Response response ) throws Exception { </a> 0
<a> String s = response . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( response . <RARE_TOKEN> ( ) != 200 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . destroy ( ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , s ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> JSONObject json = new JSONObject ( s ) ; </a> 0
<a> <RARE_TOKEN> . set ( json . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> if ( json . <RARE_TOKEN> ( <RARE_TOKEN> ) . length ( ) > 1 ) { </a> 0
<a> <RARE_TOKEN> . broadcast ( s ) . get ( ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } , 1 , TimeUnit . SECONDS ) ; </a> 1
<a> futures . put ( <RARE_TOKEN> , future ) ; </a> 0
<a> } </a> 0
<a> return new SuspendResponse . <RARE_TOKEN> < String > ( ) . broadcaster ( <RARE_TOKEN> ) . outputComments ( true ) </a> 0
<a> . addListener ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> final AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> super . <RARE_TOKEN> ( event ) ; </a> 0
<a> <RARE_TOKEN> . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } ) . build ( ) ; </a> 0
<a> } </a> 0
<a> @ GET </a> 0
<a> @ Path ( <RARE_TOKEN> ) </a> 0
<a> public String <RARE_TOKEN> ( final @ <RARE_TOKEN> ( <RARE_TOKEN> ) Broadcaster <RARE_TOKEN> , </a> 0
<a> final @ <RARE_TOKEN> ( <RARE_TOKEN> ) String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> futures . get ( <RARE_TOKEN> ) . cancel ( true ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> time <RARE_TOKEN> for {}" , <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . model . <RARE_TOKEN> ; </a> 0
<a> import java . util . Date ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( String id ) { </a> 0
<a> super ( id ) ; </a> 0
<a> add ( new <RARE_TOKEN> < <RARE_TOKEN> > ( <RARE_TOKEN> , <RARE_TOKEN> . class ) ) ; </a> 0
<a> add ( new <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> < String > ( ) { </a> 0
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return new Date ( ) . toString ( ) ; </a> 0
<a> } </a> 0
<a> } ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( final <RARE_TOKEN> parameters ) { </a> 0
<a> add ( new <RARE_TOKEN> ( "message" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the time <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> add ( new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package org . atmosphere . samples . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEvent ; </a> 0
<a> import org . atmosphere . cpr . AtmosphereResourceEventListener ; </a> 0
<a> import org . atmosphere . cpr . <RARE_TOKEN> ; </a> 0
<a> import org . slf4j . Logger ; </a> 0
<a> import org . slf4j . LoggerFactory ; </a> 0
<a> import javax . servlet . http . HttpServletRequest ; </a> 0
<a> import javax . servlet . http . HttpServletResponse ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> import static org . atmosphere . cpr . HeaderConfig . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements AtmosphereResourceEventListener { </a> 0
<a> private static final Logger logger = LoggerFactory . getLogger ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> HttpServletRequest req = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . build ( req ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( true ) ) { </a> 0
<a> <RARE_TOKEN> . schedule ( new <RARE_TOKEN> < String > ( ) { </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> String s = new Date ( ) . toString ( ) ; </a> 0
<a> return s ; </a> 0
<a> } </a> 0
<a> } , 1 ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . addListener ( this ) ; </a> 0
<a> String transport = req . getHeader ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . suspend ( - 1 , ! ( transport != null && transport . equalsIgnoreCase ( <RARE_TOKEN> ) ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> {}" , event . getMessage ( ) ) ; </a> 0
<a> String transport = event . getResource ( ) . getRequest ( ) . getHeader ( <RARE_TOKEN> ) ; </a> 0
<a> if ( transport != null && transport . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( event . getResource ( ) . getRequest ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> <RARE_TOKEN> . resume ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> String transport = event . getResource ( ) . getRequest ( ) . getHeader ( <RARE_TOKEN> ) ; </a> 0
<a> HttpServletRequest req = event . getResource ( ) . getRequest ( ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> the <RARE_TOKEN> response from <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> new Object [ ] { transport == null ? <RARE_TOKEN> : transport , req . <RARE_TOKEN> ( ) , req . <RARE_TOKEN> ( ) } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> String transport = event . getResource ( ) . getRequest ( ) . getHeader ( <RARE_TOKEN> ) ; </a> 0
<a> HttpServletRequest req = event . getResource ( ) . getRequest ( ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> the <RARE_TOKEN> response from <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> new Object [ ] { transport == null ? <RARE_TOKEN> : transport , req . <RARE_TOKEN> ( ) , req . <RARE_TOKEN> ( ) } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> String transport = event . getResource ( ) . getRequest ( ) . getHeader ( <RARE_TOKEN> ) ; </a> 0
<a> HttpServletRequest req = event . getResource ( ) . getRequest ( ) ; </a> 0
<a> logger . info ( <RARE_TOKEN> connection <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> new Object [ ] { transport == null ? <RARE_TOKEN> : transport , req . <RARE_TOKEN> ( ) , req . <RARE_TOKEN> ( ) } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AtmosphereResourceEvent < HttpServletRequest , HttpServletResponse > event ) { </a> 0
<a> logger . info ( <RARE_TOKEN> , event . throwable ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . atmosphere . samples . test ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . jetty . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 0
<a> <RARE_TOKEN> server = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 1000 * <RARE_TOKEN> * <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( - 1 ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> server . <RARE_TOKEN> ( new <RARE_TOKEN> [ ] { <RARE_TOKEN> } ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( server ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( "/" ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> server . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> server . start ( ) ; </a> 0
<a> System . in . read ( ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> server . <RARE_TOKEN> ( ) ; </a> 0
<a> server . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> package org . atmosphere . samples . test ; </a> 0
<a> import junit . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . apache . <RARE_TOKEN> . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . samples . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . atmosphere . samples . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( "message" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the time <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . <RARE_TOKEN> ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> public class <RARE_TOKEN> extends Activity </a> 0
<a> { </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) </a> 0
<a> { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . annotation . <RARE_TOKEN> ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public final class AccessToken implements Serializable { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final Date <RARE_TOKEN> = new Date ( Long . <RARE_TOKEN> ) ; </a> 0
<a> private static final Date <RARE_TOKEN> = new Date ( Long . MAX_VALUE ) ; </a> 0
<a> private static final Date <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final Date <RARE_TOKEN> = new Date ( ) ; </a> 0
<a> private static final AccessTokenSource <RARE_TOKEN> = AccessTokenSource . <RARE_TOKEN> ; </a> 0
<a> private static final Date <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final Date <RARE_TOKEN> ; </a> 0
<a> private final List < String > permissions ; </a> 0
<a> private final String token ; </a> 0
<a> private final AccessTokenSource source ; </a> 0
<a> private final Date <RARE_TOKEN> ; </a> 0
<a> AccessToken ( String token , Date <RARE_TOKEN> , List < String > permissions , AccessTokenSource source , Date <RARE_TOKEN> ) { </a> 0
<a> if ( permissions == null ) { </a> 0
<a> permissions = Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . permissions = Collections . <RARE_TOKEN> ( permissions ) ; </a> 0
<a> this . token = token ; </a> 0
<a> this . source = source ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String getToken ( ) { </a> 0
<a> return this . token ; </a> 0
<a> } </a> 0
<a> public Date <RARE_TOKEN> ( ) { </a> 0
<a> return this . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public List < String > getPermissions ( ) { </a> 0
<a> return this . permissions ; </a> 0
<a> } </a> 0
<a> public AccessTokenSource <RARE_TOKEN> ( ) { </a> 0
<a> return source ; </a> 0
<a> } </a> 0
<a> public Date <RARE_TOKEN> ( ) { </a> 0
<a> return this . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static AccessToken <RARE_TOKEN> ( String accessToken , Date <RARE_TOKEN> , </a> 0
<a> Date <RARE_TOKEN> , AccessTokenSource <RARE_TOKEN> , List < String > permissions ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return new AccessToken ( accessToken , <RARE_TOKEN> , permissions , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static AccessToken <RARE_TOKEN> ( Intent intent ) { </a> 0
<a> Validate . <RARE_TOKEN> ( intent , <RARE_TOKEN> ) ; </a> 0
<a> if ( intent . <RARE_TOKEN> ( ) == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( null , intent . <RARE_TOKEN> ( ) , AccessTokenSource . <RARE_TOKEN> , new Date ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> StringBuilder builder = new StringBuilder ( ) ; </a> 0
<a> builder . append ( <RARE_TOKEN> ) ; </a> 0
<a> builder . append ( " <RARE_TOKEN> ) . append ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( builder ) ; </a> 0
<a> builder . append ( <RARE_TOKEN> ) ; </a> 0
<a> return builder . toString ( ) ; </a> 0
<a> } </a> 0
<a> static AccessToken <RARE_TOKEN> ( List < String > permissions ) { </a> 0
<a> return new AccessToken ( "" , <RARE_TOKEN> , permissions , AccessTokenSource . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> static AccessToken <RARE_TOKEN> ( String token , List < String > permissions , AccessTokenSource source ) { </a> 0
<a> return new AccessToken ( token , <RARE_TOKEN> , permissions , source , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> static AccessToken <RARE_TOKEN> ( Bundle bundle , AccessTokenSource source ) { </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> ( </a> 0
<a> bundle , NativeProtocol . <RARE_TOKEN> , new Date ( 0 ) ) ; </a> 0
<a> ArrayList < String > permissions = bundle . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> ) ; </a> 0
<a> String token = bundle . getString ( NativeProtocol . <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ( permissions , token , <RARE_TOKEN> , source ) ; </a> 0
<a> } </a> 0
<a> static AccessToken <RARE_TOKEN> ( List < String > <RARE_TOKEN> , Bundle bundle , AccessTokenSource source ) { </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> ( bundle , <RARE_TOKEN> , new Date ( ) ) ; </a> 0
<a> String token = bundle . getString ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , token , <RARE_TOKEN> , source ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> static AccessToken <RARE_TOKEN> ( AccessToken current , Bundle bundle ) { </a> 0
<a> assert ( current . source == AccessTokenSource . <RARE_TOKEN> || </a> 0
<a> current . source == AccessTokenSource . <RARE_TOKEN> || </a> 0
<a> current . source == AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> ( bundle , <RARE_TOKEN> , new Date ( 0 ) ) ; </a> 0
<a> String token = bundle . getString ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ( current . getPermissions ( ) , token , <RARE_TOKEN> , current . source ) ; </a> 0
<a> } </a> 0
<a> static AccessToken <RARE_TOKEN> ( AccessToken token , List < String > permissions ) { </a> 0
<a> return new AccessToken ( token . token , token . <RARE_TOKEN> , permissions , token . source , token . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static AccessToken <RARE_TOKEN> ( </a> 0
<a> List < String > <RARE_TOKEN> , String accessToken , Date <RARE_TOKEN> , AccessTokenSource source ) { </a> 0
<a> if ( Utility . <RARE_TOKEN> ( accessToken ) || ( <RARE_TOKEN> == null ) ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> return new AccessToken ( accessToken , <RARE_TOKEN> , <RARE_TOKEN> , source , new Date ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static AccessToken <RARE_TOKEN> ( Bundle bundle ) { </a> 0
<a> List < String > <RARE_TOKEN> = bundle . <RARE_TOKEN> ( TokenCachingStrategy . <RARE_TOKEN> ) ; </a> 0
<a> List < String > permissions ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> permissions = Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> permissions = Collections . <RARE_TOKEN> ( new ArrayList < String > ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> return new AccessToken ( bundle . getString ( TokenCachingStrategy . <RARE_TOKEN> ) , TokenCachingStrategy . <RARE_TOKEN> ( bundle , </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ) , permissions , TokenCachingStrategy . <RARE_TOKEN> ( bundle ) , </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , TokenCachingStrategy . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> Bundle <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( TokenCachingStrategy . <RARE_TOKEN> , this . token ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , TokenCachingStrategy . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( TokenCachingStrategy . <RARE_TOKEN> , new ArrayList < String > ( permissions ) ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( TokenCachingStrategy . <RARE_TOKEN> , source ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , TokenCachingStrategy . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return bundle ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return Utility . <RARE_TOKEN> ( this . token ) || new Date ( ) . <RARE_TOKEN> ( this . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static AccessToken <RARE_TOKEN> ( List < String > <RARE_TOKEN> , Bundle bundle , </a> 0
<a> AccessTokenSource source , </a> 0
<a> Date <RARE_TOKEN> ) { </a> 0
<a> String token = bundle . getString ( <RARE_TOKEN> ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> ( bundle , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( Utility . <RARE_TOKEN> ( token ) || ( <RARE_TOKEN> == null ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return new AccessToken ( token , <RARE_TOKEN> , <RARE_TOKEN> , source , new Date ( ) ) ; </a> 0
<a> } </a> 0
<a> private String <RARE_TOKEN> ( ) { </a> 0
<a> if ( this . token == null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> ( LoggingBehavior . <RARE_TOKEN> ) ) { </a> 0
<a> return this . token ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( StringBuilder builder ) { </a> 0
<a> builder . append ( " <RARE_TOKEN> ) ; </a> 0
<a> if ( this . permissions == null ) { </a> 0
<a> builder . append ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> builder . append ( <RARE_TOKEN> ) ; </a> 0
<a> builder . append ( <RARE_TOKEN> . <RARE_TOKEN> ( ", " , permissions ) ) ; </a> 0
<a> builder . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> implements Serializable { </a> 0
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> private final Date <RARE_TOKEN> ; </a> 0
<a> private final List < String > permissions ; </a> 0
<a> private final String token ; </a> 0
<a> private final AccessTokenSource source ; </a> 0
<a> private final Date <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> ( String token , Date <RARE_TOKEN> , </a> 0
<a> List < String > permissions , AccessTokenSource source , Date <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . permissions = permissions ; </a> 0
<a> this . token = token ; </a> 0
<a> this . source = source ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private Object <RARE_TOKEN> ( ) { </a> 0
<a> return new AccessToken ( token , <RARE_TOKEN> , permissions , source , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private Object <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( token , <RARE_TOKEN> , permissions , source , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> stream ) throws <RARE_TOKEN> { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static Date <RARE_TOKEN> ( Bundle bundle , String key , Date <RARE_TOKEN> ) { </a> 0
<a> if ( bundle == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> long <RARE_TOKEN> = Long . <RARE_TOKEN> ; </a> 0
<a> Object <RARE_TOKEN> = bundle . get ( key ) ; </a> 0
<a> if ( <RARE_TOKEN> instanceof Long ) { </a> 0
<a> <RARE_TOKEN> = ( Long ) <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> instanceof String ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = Long . <RARE_TOKEN> ( ( String ) <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> return new Date ( Long . MAX_VALUE ) ; </a> 0
<a> } else { </a> 0
<a> return new Date ( <RARE_TOKEN> . getTime ( ) + ( <RARE_TOKEN> * <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public enum AccessTokenSource { </a> 0
<a> <RARE_TOKEN> ( false ) , </a> 0
<a> <RARE_TOKEN> ( true ) , </a> 0
<a> <RARE_TOKEN> ( true ) , </a> 0
<a> <RARE_TOKEN> ( true ) , </a> 0
<a> <RARE_TOKEN> ( false ) , </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> AccessTokenSource ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . <RARE_TOKEN> ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . model . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphObjectList ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . widget . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> class AuthorizationClient implements Serializable { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> List < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> Context context ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> boolean <RARE_TOKEN> ; </a> 0
<a> AuthorizationRequest pendingRequest ; </a> 0
<a> interface <RARE_TOKEN> { </a> 0
<a> void onCompleted ( Result result ) ; </a> 0
<a> } </a> 0
<a> interface <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> interface <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( Intent intent , int requestCode ) ; </a> 0
<a> public Activity <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( final Context context ) { </a> 0
<a> this . context = context ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( final Activity activity ) { </a> 0
<a> this . context = activity ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Intent intent , int requestCode ) { </a> 0
<a> activity . <RARE_TOKEN> ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity <RARE_TOKEN> ( ) { </a> 0
<a> return activity ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AuthorizationRequest request ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( request ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AuthorizationRequest request ) { </a> 0
<a> if ( request == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> to <RARE_TOKEN> while a request is <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( request . <RARE_TOKEN> ( ) && ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> pendingRequest = request ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( request ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> if ( pendingRequest == null || <RARE_TOKEN> == null ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> to continue <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . cancel ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return pendingRequest != null && <RARE_TOKEN> != null ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . cancel ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> if ( requestCode == pendingRequest . <RARE_TOKEN> ( ) ) { </a> 0
<a> return <RARE_TOKEN> . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private List < <RARE_TOKEN> > <RARE_TOKEN> ( AuthorizationRequest request ) { </a> 0
<a> ArrayList < <RARE_TOKEN> > <RARE_TOKEN> = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> final SessionLoginBehavior <RARE_TOKEN> = request . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( ! request . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = context . getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = context . getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( Result . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> while ( <RARE_TOKEN> != null && ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . remove ( 0 ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( Result . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , null ) ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) && ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( pendingRequest ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Result <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . token != null && pendingRequest . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Result <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> pendingRequest = null ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else if ( pendingRequest != null ) { </a> 0
<a> return new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Intent intent , int requestCode ) { </a> 0
<a> pendingRequest . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity <RARE_TOKEN> ( ) { </a> 0
<a> return pendingRequest . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> return context . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Result <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . token == null ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> RequestBatch batch = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> batch . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> RequestBatch <RARE_TOKEN> ( final Result <RARE_TOKEN> ) { </a> 0
<a> final ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> final ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> final String <RARE_TOKEN> = <RARE_TOKEN> . token . getToken ( ) ; </a> 0
<a> Request . Callback <RARE_TOKEN> = new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> try { </a> 0
<a> GraphUser user = response . <RARE_TOKEN> ( GraphUser . class ) ; </a> 0
<a> if ( user != null ) { </a> 0
<a> <RARE_TOKEN> . add ( user . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> String <RARE_TOKEN> = pendingRequest . <RARE_TOKEN> ( ) ; </a> 0
<a> Request <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setCallback ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setCallback ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setCallback ( new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> result = response . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> if ( result != null ) { </a> 0
<a> GraphObjectList < GraphObject > data = result . getData ( ) ; </a> 0
<a> if ( data != null && data . size ( ) == 1 ) { </a> 0
<a> GraphObject permissions = data . get ( 0 ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> RequestBatch batch = new RequestBatch ( <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> batch . <RARE_TOKEN> ( pendingRequest . <RARE_TOKEN> ( ) ) ; </a> 0
<a> batch . <RARE_TOKEN> ( new RequestBatch . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( RequestBatch batch ) { </a> 0
<a> try { </a> 0
<a> Result result = null ; </a> 0
<a> if ( <RARE_TOKEN> . size ( ) == 2 && <RARE_TOKEN> . get ( 0 ) != null && <RARE_TOKEN> . get ( 1 ) != null && </a> 0
<a> <RARE_TOKEN> . get ( 0 ) . equals ( <RARE_TOKEN> . get ( 1 ) ) ) { </a> 0
<a> AccessToken <RARE_TOKEN> = AccessToken </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> . token , </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> result = Result . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> result = Result </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> in <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( result ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> <RARE_TOKEN> ( Result . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , ex . getMessage ( ) ) ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> return batch ; </a> 0
<a> } </a> 0
<a> Request <RARE_TOKEN> ( String accessToken ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , accessToken ) ; </a> 0
<a> return new Request ( null , <RARE_TOKEN> , parameters , HttpMethod . GET , null ) ; </a> 0
<a> } </a> 0
<a> Request <RARE_TOKEN> ( String accessToken ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , accessToken ) ; </a> 0
<a> return new Request ( null , <RARE_TOKEN> , parameters , HttpMethod . GET , null ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Result <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . onCompleted ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> abstract class <RARE_TOKEN> implements Serializable { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> abstract boolean <RARE_TOKEN> ( AuthorizationRequest request ) ; </a> 0
<a> boolean onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> void cancel ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void cancel ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . dismiss ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( final AuthorizationRequest request ) { </a> 0
<a> String applicationId = request . <RARE_TOKEN> ( ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> if ( ! Utility . <RARE_TOKEN> ( request . getPermissions ( ) ) ) { </a> 0
<a> parameters . putString ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , request . getPermissions ( ) ) ) ; </a> 0
<a> } </a> 0
<a> Utility . <RARE_TOKEN> ( context ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> listener = new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle values , FacebookException error ) { </a> 0
<a> <RARE_TOKEN> ( request , values , error ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> . Builder builder = </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) , applicationId , parameters ) </a> 0
<a> . <RARE_TOKEN> ( listener ) ; </a> 0
<a> <RARE_TOKEN> = builder . build ( ) ; </a> 0
<a> <RARE_TOKEN> . show ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AuthorizationRequest request , Bundle values , </a> 0
<a> FacebookException error ) { </a> 0
<a> Result <RARE_TOKEN> ; </a> 0
<a> if ( values != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( context ) ; </a> 0
<a> <RARE_TOKEN> . sync ( ) ; </a> 0
<a> AccessToken token = AccessToken </a> 1
<a> . <RARE_TOKEN> ( request . getPermissions ( ) , values , AccessTokenSource . <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> = Result . <RARE_TOKEN> ( token ) ; </a> 1
<a> } else { </a> 0
<a> if ( error instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = Result . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> log <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = Result . <RARE_TOKEN> ( error . getMessage ( ) , null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> void cancel ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . cancel ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( final AuthorizationRequest request ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( context , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . start ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> callback = new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle result ) { </a> 0
<a> <RARE_TOKEN> ( request , result ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( callback ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AuthorizationRequest request , Bundle result ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( result != null ) { </a> 0
<a> ArrayList < String > <RARE_TOKEN> = result . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> ) ; </a> 0
<a> List < String > permissions = request . getPermissions ( ) ; </a> 0
<a> if ( ( <RARE_TOKEN> != null ) && </a> 0
<a> ( ( permissions == null ) || <RARE_TOKEN> . <RARE_TOKEN> ( permissions ) ) ) { </a> 0
<a> AccessToken token = AccessToken </a> 0
<a> . <RARE_TOKEN> ( result , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> Result <RARE_TOKEN> = Result . <RARE_TOKEN> ( token ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> for ( String <RARE_TOKEN> : permissions ) { </a> 0
<a> if ( ! <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> protected boolean <RARE_TOKEN> ( Intent intent , int requestCode ) { </a> 0
<a> if ( intent == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( intent , requestCode ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( AuthorizationRequest request ) { </a> 0
<a> Intent intent = NativeProtocol . <RARE_TOKEN> ( context , request . <RARE_TOKEN> ( ) , </a> 0
<a> new ArrayList < String > ( request . getPermissions ( ) ) , </a> 0
<a> request . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return <RARE_TOKEN> ( intent , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> if ( NativeProtocol . <RARE_TOKEN> ( data ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } else { </a> 1
<a> Result <RARE_TOKEN> = null ; </a> 1
<a> if ( resultCode == Activity . <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = Result . <RARE_TOKEN> ( </a> 0
<a> data . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( resultCode != Activity . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = Result </a> 1
<a> . <RARE_TOKEN> ( "Unexpected resultCode from <RARE_TOKEN> , null ) ; </a> 1
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( data ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> return true ; </a> 0
<a> } </a> 0
<a> private Result <RARE_TOKEN> ( Intent data ) { </a> 0
<a> Bundle extras = data . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = extras . getString ( NativeProtocol . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return Result . <RARE_TOKEN> ( </a> 0
<a> AccessToken . <RARE_TOKEN> ( extras , AccessTokenSource . <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( NativeProtocol . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return null ; </a> 0
<a> } else if ( NativeProtocol . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return Result . <RARE_TOKEN> ( null ) ; </a> 0
<a> } else { </a> 0
<a> return Result . <RARE_TOKEN> ( <RARE_TOKEN> , extras . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( AuthorizationRequest request ) { </a> 0
<a> Intent intent = NativeProtocol . <RARE_TOKEN> ( context , </a> 0
<a> request . <RARE_TOKEN> ( ) , request . getPermissions ( ) ) ; </a> 0
<a> return <RARE_TOKEN> ( intent , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> Result <RARE_TOKEN> = null ; </a> 1
<a> if ( resultCode == Activity . <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = Result . <RARE_TOKEN> ( data . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( resultCode != Activity . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = Result . <RARE_TOKEN> ( "Unexpected resultCode from <RARE_TOKEN> , null ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( data ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> private Result <RARE_TOKEN> ( Intent data ) { </a> 0
<a> Bundle extras = data . <RARE_TOKEN> ( ) ; </a> 0
<a> String error = extras . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( error == null ) { </a> 0
<a> error = extras . getString ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( error == null ) { </a> 0
<a> AccessToken token = AccessToken . <RARE_TOKEN> ( pendingRequest . getPermissions ( ) , extras , </a> 0
<a> AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> return Result . <RARE_TOKEN> ( token ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . contains ( error ) ) { </a> 0
<a> return null ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . contains ( error ) ) { </a> 0
<a> return Result . <RARE_TOKEN> ( null ) ; </a> 0
<a> } else { </a> 0
<a> return Result . <RARE_TOKEN> ( error , extras . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static class <RARE_TOKEN> extends <RARE_TOKEN> . Builder { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Context context , String applicationId , Bundle parameters ) { </a> 0
<a> super ( context , applicationId , <RARE_TOKEN> , parameters ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> build ( ) { </a> 0
<a> Bundle parameters = <RARE_TOKEN> ( ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> return new <RARE_TOKEN> ( getContext ( ) , <RARE_TOKEN> , parameters , <RARE_TOKEN> ( ) , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static class AuthorizationRequest implements Serializable { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private SessionLoginBehavior loginBehavior ; </a> 0
<a> private int requestCode ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> private List < String > permissions ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private String applicationId ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> AuthorizationRequest ( SessionLoginBehavior loginBehavior , int requestCode , boolean <RARE_TOKEN> , </a> 0
<a> List < String > permissions , <RARE_TOKEN> <RARE_TOKEN> , String applicationId , </a> 0
<a> String <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . loginBehavior = loginBehavior ; </a> 0
<a> this . requestCode = requestCode ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . permissions = permissions ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> List < String > getPermissions ( ) { </a> 0
<a> return permissions ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( List < String > permissions ) { </a> 0
<a> this . permissions = permissions ; </a> 0
<a> } </a> 0
<a> SessionLoginBehavior <RARE_TOKEN> ( ) { </a> 0
<a> return loginBehavior ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ) { </a> 0
<a> return requestCode ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ( ) { </a> 0
<a> return applicationId ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> != null && ! <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static class Result implements Serializable { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> final <RARE_TOKEN> code ; </a> 0
<a> final AccessToken token ; </a> 0
<a> final String errorMessage ; </a> 0
<a> private Result ( <RARE_TOKEN> code , AccessToken token , String errorMessage ) { </a> 0
<a> this . token = token ; </a> 0
<a> this . errorMessage = errorMessage ; </a> 0
<a> this . code = code ; </a> 0
<a> } </a> 0
<a> static Result <RARE_TOKEN> ( AccessToken token ) { </a> 0
<a> return new Result ( <RARE_TOKEN> . <RARE_TOKEN> , token , null ) ; </a> 0
<a> } </a> 0
<a> static Result <RARE_TOKEN> ( String message ) { </a> 0
<a> return new Result ( <RARE_TOKEN> . <RARE_TOKEN> , null , message ) ; </a> 0
<a> } </a> 0
<a> static Result <RARE_TOKEN> ( String <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> String message = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> message += <RARE_TOKEN> " + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return new Result ( <RARE_TOKEN> . <RARE_TOKEN> , null , message ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public class <RARE_TOKEN> extends FacebookException { </a> 0
<a> static final long serialVersionUID = 1 ; </a> 0
<a> private int errorCode ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( String message , int errorCode , String <RARE_TOKEN> ) { </a> 0
<a> super ( message ) ; </a> 0
<a> this . errorCode = errorCode ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return errorCode ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public class FacebookException extends <RARE_TOKEN> { </a> 0
<a> static final long serialVersionUID = 1 ; </a> 0
<a> public FacebookException ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> } </a> 0
<a> public FacebookException ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public FacebookException ( String message , Throwable throwable ) { </a> 0
<a> super ( message , throwable ) ; </a> 0
<a> } </a> 0
<a> public FacebookException ( Throwable throwable ) { </a> 0
<a> super ( throwable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public class <RARE_TOKEN> extends FacebookException { </a> 0
<a> static final long serialVersionUID = 1 ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable throwable ) { </a> 0
<a> super ( message , throwable ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable throwable ) { </a> 0
<a> super ( throwable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public class <RARE_TOKEN> extends FacebookException { </a> 0
<a> static final long serialVersionUID = 1 ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable throwable ) { </a> 0
<a> super ( message , throwable ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable throwable ) { </a> 0
<a> super ( throwable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> public final class FacebookRequestError { </a> 0
<a> public static final int <RARE_TOKEN> = - 1 ; </a> 0
<a> public static final int <RARE_TOKEN> = - 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = "message" ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static class <RARE_TOKEN> { </a> 0
<a> private final int start , end ; </a> 0
<a> private <RARE_TOKEN> ( int start , int end ) { </a> 0
<a> this . start = start ; </a> 0
<a> this . end = end ; </a> 0
<a> } </a> 0
<a> boolean contains ( int value ) { </a> 0
<a> return start <= value && value <= end ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private static final int <RARE_TOKEN> = 4 ; </a> 0
<a> private static final int <RARE_TOKEN> = 17 ; </a> 0
<a> private static final int <RARE_TOKEN> = 10 ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 200 , <RARE_TOKEN> ) ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 200 , <RARE_TOKEN> ) ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final int errorCode ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private final String errorMessage ; </a> 0
<a> private final JSONObject <RARE_TOKEN> ; </a> 0
<a> private final JSONObject <RARE_TOKEN> ; </a> 0
<a> private final Object <RARE_TOKEN> ; </a> 0
<a> private final HttpURLConnection connection ; </a> 0
<a> private final FacebookException exception ; </a> 0
<a> private FacebookRequestError ( int <RARE_TOKEN> , int errorCode , </a> 0
<a> int <RARE_TOKEN> , String <RARE_TOKEN> , String errorMessage , JSONObject <RARE_TOKEN> , </a> 0
<a> JSONObject <RARE_TOKEN> , Object <RARE_TOKEN> , HttpURLConnection connection , </a> 0
<a> FacebookException exception ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . errorCode = errorCode ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . errorMessage = errorMessage ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . connection = connection ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> if ( exception != null ) { </a> 0
<a> this . exception = exception ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } else { </a> 0
<a> this . exception = new <RARE_TOKEN> ( this , errorMessage ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> if ( errorCode == <RARE_TOKEN> || errorCode == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } else if ( errorCode == <RARE_TOKEN> || errorCode == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } else if ( errorCode == <RARE_TOKEN> || <RARE_TOKEN> . contains ( errorCode ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = R . string . <RARE_TOKEN> ; </a> 0
<a> } else if ( errorCode == <RARE_TOKEN> || errorCode == <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> || <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = R . string . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = R . string . <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = R . string . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = R . string . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> if ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private FacebookRequestError ( int <RARE_TOKEN> , int errorCode , </a> 0
<a> int <RARE_TOKEN> , String <RARE_TOKEN> , String errorMessage , JSONObject <RARE_TOKEN> , </a> 0
<a> JSONObject <RARE_TOKEN> , Object <RARE_TOKEN> , HttpURLConnection connection ) { </a> 0
<a> this ( <RARE_TOKEN> , errorCode , <RARE_TOKEN> , <RARE_TOKEN> , errorMessage , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , connection , null ) ; </a> 0
<a> } </a> 0
<a> FacebookRequestError ( HttpURLConnection connection , Exception exception ) { </a> 0
<a> this ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> null , null , null , null , null , connection , </a> 0
<a> ( exception instanceof FacebookException ) ? </a> 0
<a> ( FacebookException ) exception : new FacebookException ( exception ) ) ; </a> 0
<a> } </a> 0
<a> public FacebookRequestError ( int errorCode , String <RARE_TOKEN> , String errorMessage ) { </a> 0
<a> this ( <RARE_TOKEN> , errorCode , <RARE_TOKEN> , <RARE_TOKEN> , errorMessage , </a> 0
<a> null , null , null , null , null ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return errorCode ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> if ( errorMessage != null ) { </a> 0
<a> return errorMessage ; </a> 0
<a> } else { </a> 0
<a> return exception . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public JSONObject <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public JSONObject <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Object <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public HttpURLConnection <RARE_TOKEN> ( ) { </a> 0
<a> return connection ; </a> 0
<a> } </a> 0
<a> public FacebookException <RARE_TOKEN> ( ) { </a> 0
<a> return exception ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return new StringBuilder ( <RARE_TOKEN> " ) </a> 0
<a> . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( ", <RARE_TOKEN> " ) </a> 0
<a> . append ( errorCode ) </a> 0
<a> . append ( ", <RARE_TOKEN> " ) </a> 0
<a> . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( ", <RARE_TOKEN> " ) </a> 0
<a> . append ( errorMessage ) </a> 0
<a> . append ( <RARE_TOKEN> ) </a> 0
<a> . toString ( ) ; </a> 0
<a> } </a> 0
<a> static FacebookRequestError <RARE_TOKEN> ( JSONObject <RARE_TOKEN> , </a> 0
<a> Object <RARE_TOKEN> , HttpURLConnection connection ) { </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> . has ( <RARE_TOKEN> ) ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . getInt ( <RARE_TOKEN> ) ; </a> 0
<a> Object <RARE_TOKEN> = Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> Response . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> instanceof JSONObject ) { </a> 0
<a> JSONObject <RARE_TOKEN> = ( JSONObject ) <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> String errorMessage = null ; </a> 0
<a> int errorCode = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> if ( <RARE_TOKEN> . has ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONObject error = ( JSONObject ) Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> = error . <RARE_TOKEN> ( <RARE_TOKEN> , null ) ; </a> 0
<a> errorMessage = error . <RARE_TOKEN> ( <RARE_TOKEN> , null ) ; </a> 0
<a> errorCode = error . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = error . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } else if ( <RARE_TOKEN> . has ( <RARE_TOKEN> ) || <RARE_TOKEN> . has ( <RARE_TOKEN> ) </a> 0
<a> || <RARE_TOKEN> . has ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , null ) ; </a> 0
<a> errorMessage = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , null ) ; </a> 0
<a> errorCode = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return new FacebookRequestError ( <RARE_TOKEN> , errorCode , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , errorMessage , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , connection ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> return new FacebookRequestError ( <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , null , null , </a> 0
<a> <RARE_TOKEN> . has ( <RARE_TOKEN> ) ? </a> 0
<a> ( JSONObject ) Utility . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , Response . <RARE_TOKEN> ) : null , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , connection ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . os . * ; </a> 0
<a> final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> final Context context ; </a> 0
<a> final String applicationId ; </a> 0
<a> final Handler handler ; </a> 0
<a> <RARE_TOKEN> listener ; </a> 0
<a> boolean running ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( Context context , String applicationId ) { </a> 0
<a> Context <RARE_TOKEN> = context . <RARE_TOKEN> ( ) ; </a> 0
<a> this . context = ( <RARE_TOKEN> != null ) ? <RARE_TOKEN> : context ; </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> handler = new Handler ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> message ) { </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( message ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> this . listener = listener ; </a> 0
<a> } </a> 0
<a> boolean start ( ) { </a> 0
<a> Intent intent = new Intent ( NativeProtocol . <RARE_TOKEN> ) ; </a> 0
<a> intent . <RARE_TOKEN> ( Intent . <RARE_TOKEN> ) ; </a> 0
<a> intent = NativeProtocol . <RARE_TOKEN> ( context , intent ) ; </a> 0
<a> if ( intent == null ) { </a> 0
<a> callback ( null ) ; </a> 0
<a> return false ; </a> 0
<a> } else { </a> 0
<a> running = true ; </a> 0
<a> context . <RARE_TOKEN> ( intent , this , Context . <RARE_TOKEN> ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void cancel ( ) { </a> 0
<a> running = false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> name , <RARE_TOKEN> service ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( service ) ; </a> 0
<a> getToken ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> name ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> context . <RARE_TOKEN> ( this ) ; </a> 0
<a> callback ( null ) ; </a> 0
<a> } </a> 0
<a> private void getToken ( ) { </a> 0
<a> Bundle data = new Bundle ( ) ; </a> 0
<a> data . putString ( NativeProtocol . <RARE_TOKEN> , applicationId ) ; </a> 0
<a> <RARE_TOKEN> request = <RARE_TOKEN> . <RARE_TOKEN> ( null , NativeProtocol . <RARE_TOKEN> ) ; </a> 0
<a> request . <RARE_TOKEN> = NativeProtocol . <RARE_TOKEN> ; </a> 0
<a> request . <RARE_TOKEN> ( data ) ; </a> 0
<a> request . <RARE_TOKEN> = new <RARE_TOKEN> ( handler ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> callback ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> message ) { </a> 0
<a> if ( message . <RARE_TOKEN> == NativeProtocol . <RARE_TOKEN> ) { </a> 0
<a> Bundle extras = message . getData ( ) ; </a> 0
<a> String <RARE_TOKEN> = extras . getString ( NativeProtocol . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> callback ( null ) ; </a> 0
<a> } else { </a> 0
<a> callback ( extras ) ; </a> 0
<a> } </a> 0
<a> context . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void callback ( Bundle result ) { </a> 0
<a> if ( ! running ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> running = false ; </a> 0
<a> <RARE_TOKEN> callback = listener ; </a> 0
<a> if ( callback != null ) { </a> 0
<a> callback . <RARE_TOKEN> ( result ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> interface <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( Bundle result ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public enum HttpMethod { </a> 0
<a> GET , </a> 0
<a> POST , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( Session session , Bundle bundle ) { </a> 0
<a> session . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public enum LoggingBehavior { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> public class <RARE_TOKEN> extends Activity { </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> a null <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> if the <RARE_TOKEN> of the <RARE_TOKEN> is <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private AuthorizationClient <RARE_TOKEN> ; </a> 0
<a> private AuthorizationClient . AuthorizationRequest request ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> <RARE_TOKEN> = savedInstanceState . getString ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( AuthorizationClient ) savedInstanceState . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = new AuthorizationClient ( ) ; </a> 0
<a> request = ( AuthorizationClient . AuthorizationRequest ) <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new AuthorizationClient . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( AuthorizationClient . Result <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new AuthorizationClient . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> findViewById ( R . id . <RARE_TOKEN> ) . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> findViewById ( R . id . <RARE_TOKEN> ) . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( AuthorizationClient . Result <RARE_TOKEN> ) { </a> 0
<a> request = null ; </a> 0
<a> int resultCode = ( <RARE_TOKEN> . code == AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> ) ? </a> 0
<a> <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Intent <RARE_TOKEN> = new Intent ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> ( resultCode , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> findViewById ( R . id . <RARE_TOKEN> ) . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> <RARE_TOKEN> . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> static Bundle <RARE_TOKEN> ( AuthorizationClient . AuthorizationRequest request ) { </a> 0
<a> Bundle extras = new Bundle ( ) ; </a> 0
<a> extras . <RARE_TOKEN> ( <RARE_TOKEN> , request ) ; </a> 0
<a> return extras ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> final class NativeProtocol { </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final boolean <RARE_TOKEN> ( Context context , String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = context . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> . <RARE_TOKEN> e ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> static Intent <RARE_TOKEN> ( Context context , Intent intent ) { </a> 0
<a> if ( intent == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = context . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( intent , 0 ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( context , <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return intent ; </a> 0
<a> } </a> 0
<a> static Intent <RARE_TOKEN> ( Context context , Intent intent ) { </a> 0
<a> if ( intent == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = context . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( intent , 0 ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( context , <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return intent ; </a> 0
<a> } </a> 0
<a> static Intent <RARE_TOKEN> ( Context context , String applicationId , List < String > permissions ) { </a> 0
<a> Intent intent = new Intent ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> , applicationId ) ; </a> 0
<a> if ( ! Utility . <RARE_TOKEN> ( permissions ) ) { </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , permissions ) ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( context , intent ) ; </a> 0
<a> } </a> 0
<a> static Intent <RARE_TOKEN> ( Context context ) { </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ( context , intent ) ; </a> 0
<a> } </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static Intent <RARE_TOKEN> ( Context context , String applicationId , ArrayList < String > permissions , </a> 0
<a> String <RARE_TOKEN> ) { </a> 0
<a> Intent intent = new Intent ( ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( Intent . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> , applicationId ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( permissions ) ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> return <RARE_TOKEN> ( context , intent ) ; </a> 0
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> if ( Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static ArrayList < String > <RARE_TOKEN> ( ArrayList < String > permissions ) { </a> 0
<a> ArrayList < String > <RARE_TOKEN> ; </a> 0
<a> if ( Utility . <RARE_TOKEN> ( permissions ) ) { </a> 0
<a> <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> } else { </a> 0
<a> for ( String <RARE_TOKEN> : permissions ) { </a> 0
<a> if ( Session . <RARE_TOKEN> ( <RARE_TOKEN> ) || <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return permissions ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = new ArrayList < String > ( permissions ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static boolean <RARE_TOKEN> ( Intent data ) { </a> 0
<a> int <RARE_TOKEN> = data . <RARE_TOKEN> ( <RARE_TOKEN> , 0 ) ; </a> 0
<a> String <RARE_TOKEN> = data . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return ( ( <RARE_TOKEN> == <RARE_TOKEN> ) && <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> static AccessTokenSource <RARE_TOKEN> ( Bundle extras ) { </a> 0
<a> long expected = <RARE_TOKEN> ; </a> 0
<a> long <RARE_TOKEN> = extras . getInt ( <RARE_TOKEN> , 0 ) ; </a> 0
<a> if ( expected == <RARE_TOKEN> ) { </a> 0
<a> return AccessTokenSource . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return AccessTokenSource . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> public class <RARE_TOKEN> extends TokenCachingStrategy { </a> 0
<a> @ Override </a> 0
<a> public Bundle <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle bundle ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . net . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . util . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . model . * ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . util . * ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> public class Request { </a> 0
<a> public static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = "name" ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static String <RARE_TOKEN> ; </a> 0
<a> private Session session ; </a> 0
<a> private HttpMethod <RARE_TOKEN> ; </a> 0
<a> private String graphPath ; </a> 0
<a> private GraphObject graphObject ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> = true ; </a> 0
<a> private Bundle parameters ; </a> 0
<a> private Callback callback ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> public Request ( ) { </a> 0
<a> this ( null , null , null , null , null ) ; </a> 0
<a> } </a> 0
<a> public Request ( Session session , String graphPath ) { </a> 0
<a> this ( session , graphPath , null , null , null ) ; </a> 0
<a> } </a> 0
<a> public Request ( Session session , String graphPath , Bundle parameters , HttpMethod <RARE_TOKEN> ) { </a> 0
<a> this ( session , graphPath , parameters , <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> public Request ( Session session , String graphPath , Bundle parameters , HttpMethod <RARE_TOKEN> , Callback callback ) { </a> 0
<a> this . session = session ; </a> 0
<a> this . graphPath = graphPath ; </a> 0
<a> this . callback = callback ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( parameters != null ) { </a> 0
<a> this . parameters = new Bundle ( parameters ) ; </a> 0
<a> } else { </a> 0
<a> this . parameters = new Bundle ( ) ; </a> 0
<a> } </a> 0
<a> if ( ! this . parameters . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> this . parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Request ( Session session , URL <RARE_TOKEN> ) { </a> 0
<a> this . session = session ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> . toString ( ) ; </a> 0
<a> <RARE_TOKEN> ( HttpMethod . GET ) ; </a> 0
<a> this . parameters = new Bundle ( ) ; </a> 0
<a> } </a> 0
<a> public static Request <RARE_TOKEN> ( Session session , String graphPath , GraphObject graphObject , Callback callback ) { </a> 0
<a> Request request = new Request ( session , graphPath , null , HttpMethod . POST , callback ) ; </a> 0
<a> request . <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> public static Request <RARE_TOKEN> ( Session session , String <RARE_TOKEN> , Bundle parameters , HttpMethod <RARE_TOKEN> ) { </a> 0
<a> Request request = new Request ( session , null , parameters , <RARE_TOKEN> ) ; </a> 0
<a> request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> public static Request <RARE_TOKEN> ( Session session , final <RARE_TOKEN> callback ) { </a> 0
<a> Callback wrapper = new Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> if ( callback != null ) { </a> 0
<a> callback . onCompleted ( response . <RARE_TOKEN> ( GraphUser . class ) , response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> return new Request ( session , <RARE_TOKEN> , null , null , wrapper ) ; </a> 0
<a> } </a> 0
<a> public static Request <RARE_TOKEN> ( Session session , final <RARE_TOKEN> callback ) { </a> 0
<a> Callback wrapper = new Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> if ( callback != null ) { </a> 0
<a> callback . onCompleted ( <RARE_TOKEN> ( response , GraphUser . class ) , response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> return new Request ( session , <RARE_TOKEN> , null , null , wrapper ) ; </a> 0
<a> } </a> 0
<a> public static Request <RARE_TOKEN> ( Session session , Bitmap <RARE_TOKEN> , Callback callback ) { </a> 0
<a> Bundle parameters = new Bundle ( 1 ) ; </a> 0
<a> parameters . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return new Request ( session , <RARE_TOKEN> , parameters , HttpMethod . POST , callback ) ; </a> 0
<a> } </a> 0
<a> public static Request <RARE_TOKEN> ( Session session , File file , </a> 0
<a> Callback callback ) throws <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . open ( file , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> Bundle parameters = new Bundle ( 1 ) ; </a> 0
<a> parameters . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return new Request ( session , <RARE_TOKEN> , parameters , HttpMethod . POST , callback ) ; </a> 0
<a> } </a> 0
<a> public static Request <RARE_TOKEN> ( Session session , File file , </a> 0
<a> Callback callback ) throws <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . open ( file , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> Bundle parameters = new Bundle ( 1 ) ; </a> 0
<a> parameters . <RARE_TOKEN> ( file . getName ( ) , <RARE_TOKEN> ) ; </a> 0
<a> return new Request ( session , <RARE_TOKEN> , parameters , HttpMethod . POST , callback ) ; </a> 0
<a> } </a> 0
<a> public static Request <RARE_TOKEN> ( Session session , String graphPath , Callback callback ) { </a> 0
<a> return new Request ( session , graphPath , null , null , callback ) ; </a> 0
<a> } </a> 0
<a> public static Request <RARE_TOKEN> ( Session session , Location location , int <RARE_TOKEN> , </a> 0
<a> int <RARE_TOKEN> , String <RARE_TOKEN> , final <RARE_TOKEN> callback ) { </a> 0
<a> if ( location == null && Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> location or <RARE_TOKEN> must be <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Bundle parameters = new Bundle ( 5 ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> parameters . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( location != null ) { </a> 0
<a> parameters . putString ( <RARE_TOKEN> , </a> 0
<a> String . format ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> , location . <RARE_TOKEN> ( ) , location . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> parameters . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Callback wrapper = new Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> if ( callback != null ) { </a> 0
<a> callback . onCompleted ( <RARE_TOKEN> ( response , GraphPlace . class ) , response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> return new Request ( session , <RARE_TOKEN> , parameters , HttpMethod . GET , wrapper ) ; </a> 0
<a> } </a> 0
<a> public static Request <RARE_TOKEN> ( Session session , String message , Callback callback ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "message" , message ) ; </a> 0
<a> return new Request ( session , <RARE_TOKEN> , parameters , HttpMethod . POST , callback ) ; </a> 0
<a> } </a> 0
<a> public final GraphObject <RARE_TOKEN> ( ) { </a> 0
<a> return this . graphObject ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( GraphObject graphObject ) { </a> 0
<a> this . graphObject = graphObject ; </a> 0
<a> } </a> 0
<a> public final String <RARE_TOKEN> ( ) { </a> 0
<a> return this . graphPath ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( String graphPath ) { </a> 0
<a> this . graphPath = graphPath ; </a> 0
<a> } </a> 0
<a> public final HttpMethod <RARE_TOKEN> ( ) { </a> 0
<a> return this . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( HttpMethod <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> != HttpMethod . GET ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> method <RARE_TOKEN> request <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = ( <RARE_TOKEN> != null ) ? <RARE_TOKEN> : HttpMethod . GET ; </a> 0
<a> } </a> 0
<a> public final Bundle <RARE_TOKEN> ( ) { </a> 0
<a> return this . parameters ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( Bundle parameters ) { </a> 0
<a> this . parameters = parameters ; </a> 0
<a> } </a> 0
<a> public final String <RARE_TOKEN> ( ) { </a> 0
<a> return this . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final Session getSession ( ) { </a> 0
<a> return this . session ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( Session session ) { </a> 0
<a> this . session = session ; </a> 0
<a> } </a> 0
<a> public final String <RARE_TOKEN> ( ) { </a> 0
<a> return this . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final String <RARE_TOKEN> ( ) { </a> 0
<a> return this . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> return this . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final String <RARE_TOKEN> ( ) { </a> 0
<a> return Request . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final void <RARE_TOKEN> ( String applicationId ) { </a> 0
<a> Request . <RARE_TOKEN> = applicationId ; </a> 0
<a> } </a> 0
<a> public final Callback <RARE_TOKEN> ( ) { </a> 0
<a> return callback ; </a> 0
<a> } </a> 0
<a> public final void setCallback ( Callback callback ) { </a> 0
<a> this . callback = callback ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Session session , String graphPath , GraphObject graphObject , </a> 0
<a> Callback callback ) { </a> 0
<a> return <RARE_TOKEN> ( session , graphPath , graphObject , callback ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Session session , String <RARE_TOKEN> , Bundle parameters , </a> 0
<a> HttpMethod <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( session , <RARE_TOKEN> , parameters , <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Session session , <RARE_TOKEN> callback ) { </a> 0
<a> return <RARE_TOKEN> ( session , callback ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Session session , <RARE_TOKEN> callback ) { </a> 0
<a> return <RARE_TOKEN> ( session , callback ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Session session , Bitmap <RARE_TOKEN> , Callback callback ) { </a> 0
<a> return <RARE_TOKEN> ( session , <RARE_TOKEN> , callback ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Session session , File file , </a> 0
<a> Callback callback ) throws <RARE_TOKEN> { </a> 0
<a> return <RARE_TOKEN> ( session , file , callback ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Session session , String graphPath , Callback callback ) { </a> 0
<a> return <RARE_TOKEN> ( session , graphPath , callback ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Session session , Location location , int <RARE_TOKEN> , </a> 0
<a> int <RARE_TOKEN> , String <RARE_TOKEN> , <RARE_TOKEN> callback ) { </a> 0
<a> return <RARE_TOKEN> ( session , location , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , callback ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Session session , String message , Callback callback ) { </a> 0
<a> return <RARE_TOKEN> ( session , message , callback ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public final Response <RARE_TOKEN> ( ) { </a> 0
<a> return Request . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> public final <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return Request . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> public static HttpURLConnection <RARE_TOKEN> ( Request ... requests ) { </a> 0
<a> return <RARE_TOKEN> ( Arrays . asList ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static HttpURLConnection <RARE_TOKEN> ( Collection < Request > requests ) { </a> 0
<a> Validate . <RARE_TOKEN> ( requests , <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ( new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static HttpURLConnection <RARE_TOKEN> ( RequestBatch requests ) { </a> 0
<a> for ( Request request : requests ) { </a> 0
<a> request . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> URL url = null ; </a> 0
<a> try { </a> 0
<a> if ( requests . size ( ) == 1 ) { </a> 0
<a> Request request = requests . get ( 0 ) ; </a> 0
<a> url = new URL ( request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> url = new URL ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> not <RARE_TOKEN> URL for <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> HttpURLConnection connection ; </a> 0
<a> try { </a> 0
<a> connection = <RARE_TOKEN> ( url ) ; </a> 0
<a> <RARE_TOKEN> ( requests , connection ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> not <RARE_TOKEN> request <RARE_TOKEN> , e ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> not <RARE_TOKEN> request <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> return connection ; </a> 0
<a> } </a> 0
<a> public static Response <RARE_TOKEN> ( Request request ) { </a> 0
<a> List < Response > responses = <RARE_TOKEN> ( request ) ; </a> 0
<a> if ( responses == null || responses . size ( ) != 1 ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> expected a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return responses . get ( 0 ) ; </a> 0
<a> } </a> 0
<a> public static List < Response > <RARE_TOKEN> ( Request ... requests ) { </a> 0
<a> Validate . <RARE_TOKEN> ( requests , <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ( Arrays . asList ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static List < Response > <RARE_TOKEN> ( Collection < Request > requests ) { </a> 0
<a> return <RARE_TOKEN> ( new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static List < Response > <RARE_TOKEN> ( RequestBatch requests ) { </a> 0
<a> Validate . <RARE_TOKEN> ( requests , <RARE_TOKEN> ) ; </a> 0
<a> HttpURLConnection connection = null ; </a> 0
<a> try { </a> 0
<a> connection = <RARE_TOKEN> ( requests ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> List < Response > responses = Response . <RARE_TOKEN> ( requests . <RARE_TOKEN> ( ) , null , new FacebookException ( ex ) ) ; </a> 0
<a> <RARE_TOKEN> ( requests , responses ) ; </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> List < Response > responses = <RARE_TOKEN> ( connection , requests ) ; </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Request ... requests ) { </a> 0
<a> Validate . <RARE_TOKEN> ( requests , <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ( Arrays . asList ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Collection < Request > requests ) { </a> 0
<a> return <RARE_TOKEN> ( new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( RequestBatch requests ) { </a> 0
<a> Validate . <RARE_TOKEN> ( requests , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( requests ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static List < Response > <RARE_TOKEN> ( HttpURLConnection connection , Collection < Request > requests ) { </a> 0
<a> return <RARE_TOKEN> ( connection , new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static List < Response > <RARE_TOKEN> ( HttpURLConnection connection , RequestBatch requests ) { </a> 0
<a> List < Response > responses = Response . <RARE_TOKEN> ( connection , requests ) ; </a> 0
<a> Utility . <RARE_TOKEN> ( connection ) ; </a> 0
<a> int <RARE_TOKEN> = requests . size ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != responses . size ( ) ) { </a> 0
<a> throw new FacebookException ( String . format ( <RARE_TOKEN> <RARE_TOKEN> responses while <RARE_TOKEN> <RARE_TOKEN> , responses . size ( ) , </a> 0
<a> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( requests , responses ) ; </a> 0
<a> HashSet < Session > <RARE_TOKEN> = new HashSet < Session > ( ) ; </a> 0
<a> for ( Request request : requests ) { </a> 0
<a> if ( request . session != null ) { </a> 0
<a> <RARE_TOKEN> . add ( request . session ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( Session session : <RARE_TOKEN> ) { </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( HttpURLConnection connection , RequestBatch requests ) { </a> 0
<a> return <RARE_TOKEN> ( null , connection , requests ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Handler <RARE_TOKEN> , HttpURLConnection connection , </a> 0
<a> RequestBatch requests ) { </a> 0
<a> Validate . <RARE_TOKEN> ( connection , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( connection , requests ) ; </a> 0
<a> requests . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return new StringBuilder ( ) . append ( <RARE_TOKEN> " ) . append ( " <RARE_TOKEN> " ) . append ( session ) . append ( ", <RARE_TOKEN> " ) </a> 0
<a> . append ( graphPath ) . append ( ", <RARE_TOKEN> " ) . append ( graphObject ) . append ( ", <RARE_TOKEN> " ) </a> 0
<a> . append ( <RARE_TOKEN> ) . append ( ", <RARE_TOKEN> " ) . append ( <RARE_TOKEN> ) . append ( ", <RARE_TOKEN> " ) </a> 0
<a> . append ( parameters ) . append ( <RARE_TOKEN> ) . toString ( ) ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( final RequestBatch requests , List < Response > responses ) { </a> 0
<a> int <RARE_TOKEN> = requests . size ( ) ; </a> 0
<a> final ArrayList < <RARE_TOKEN> < Callback , Response > > <RARE_TOKEN> = new ArrayList < <RARE_TOKEN> < Callback , Response > > ( ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; ++ i ) { </a> 0
<a> Request request = requests . get ( i ) ; </a> 0
<a> if ( request . callback != null ) { </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> < Callback , Response > ( request . callback , responses . get ( i ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . size ( ) > 0 ) { </a> 0
<a> Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> for ( <RARE_TOKEN> < Callback , Response > <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> . onCompleted ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> List < RequestBatch . Callback > <RARE_TOKEN> = requests . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( RequestBatch . Callback <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( requests ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Handler <RARE_TOKEN> = requests . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> . run ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . post ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static HttpURLConnection <RARE_TOKEN> ( URL url ) throws IOException { </a> 0
<a> HttpURLConnection connection ; </a> 0
<a> connection = ( HttpURLConnection ) url . <RARE_TOKEN> ( ) ; </a> 0
<a> connection . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> connection . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> connection . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> return connection ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( this . session != null ) { </a> 0
<a> if ( ! this . session . isOpened ( ) ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> to a Request in <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } else if ( ! this . parameters . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> String accessToken = this . session . <RARE_TOKEN> ( ) ; </a> 0
<a> Logger . <RARE_TOKEN> ( accessToken ) ; </a> 0
<a> this . parameters . putString ( <RARE_TOKEN> , accessToken ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> this . parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> this . parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private String <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . Builder <RARE_TOKEN> = new <RARE_TOKEN> . Builder ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Set < String > keys = this . parameters . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( String key : keys ) { </a> 0
<a> Object value = this . parameters . get ( key ) ; </a> 0
<a> if ( value == null ) { </a> 0
<a> value = "" ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( value ) ) { </a> 0
<a> value = <RARE_TOKEN> ( value ) ; </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> == HttpMethod . GET ) { </a> 0
<a> throw new IllegalArgumentException ( String . format ( <RARE_TOKEN> <RARE_TOKEN> type for GET <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> value . getClass ( ) . getSimpleName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( key , value . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . toString ( ) ; </a> 0
<a> } </a> 0
<a> final String <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> URL for a batch <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ; </a> 0
<a> if ( this . <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> + this . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = this . graphPath ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> final String <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> . toString ( ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ; </a> 0
<a> if ( this . <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> + this . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> + this . graphPath ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( JSONArray batch , Bundle <RARE_TOKEN> ) throws JSONException , IOException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> if ( this . <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , this . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , this . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( this . <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , this . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( this . session != null ) { </a> 0
<a> String accessToken = this . session . <RARE_TOKEN> ( ) ; </a> 0
<a> Logger . <RARE_TOKEN> ( accessToken ) ; </a> 0
<a> } </a> 0
<a> ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> Set < String > keys = this . parameters . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( String key : keys ) { </a> 0
<a> Object value = this . parameters . get ( key ) ; </a> 0
<a> if ( <RARE_TOKEN> ( value ) ) { </a> 0
<a> String name = String . format ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> <RARE_TOKEN> . add ( name ) ; </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> , name , value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( this . graphObject != null ) { </a> 0
<a> final ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> <RARE_TOKEN> ( this . graphObject , <RARE_TOKEN> , new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String key , String value ) throws IOException { </a> 0
<a> <RARE_TOKEN> . add ( String . format ( <RARE_TOKEN> , key , <RARE_TOKEN> . encode ( value , <RARE_TOKEN> ) ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> batch . put ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( graphPath != null && <RARE_TOKEN> != null ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> one of a <RARE_TOKEN> path or <RARE_TOKEN> method <RARE_TOKEN> be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> final static void <RARE_TOKEN> ( RequestBatch requests , HttpURLConnection connection ) </a> 0
<a> throws IOException , JSONException { </a> 0
<a> Logger logger = new Logger ( LoggingBehavior . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = requests . size ( ) ; </a> 0
<a> HttpMethod <RARE_TOKEN> = ( <RARE_TOKEN> == 1 ) ? requests . get ( 0 ) . <RARE_TOKEN> : HttpMethod . POST ; </a> 0
<a> connection . <RARE_TOKEN> ( <RARE_TOKEN> . name ( ) ) ; </a> 0
<a> URL url = connection . <RARE_TOKEN> ( ) ; </a> 0
<a> logger . append ( <RARE_TOKEN> ) ; </a> 0
<a> logger . <RARE_TOKEN> ( <RARE_TOKEN> , requests . getId ( ) ) ; </a> 0
<a> logger . <RARE_TOKEN> ( <RARE_TOKEN> , url ) ; </a> 0
<a> logger . <RARE_TOKEN> ( <RARE_TOKEN> , connection . <RARE_TOKEN> ( ) ) ; </a> 0
<a> logger . <RARE_TOKEN> ( <RARE_TOKEN> , connection . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> logger . <RARE_TOKEN> ( <RARE_TOKEN> , connection . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> connection . <RARE_TOKEN> ( requests . <RARE_TOKEN> ( ) ) ; </a> 0
<a> connection . <RARE_TOKEN> ( requests . <RARE_TOKEN> ( ) ) ; </a> 0
<a> boolean <RARE_TOKEN> = ( <RARE_TOKEN> == HttpMethod . POST ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> logger . log ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> connection . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( connection . <RARE_TOKEN> ( ) ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> serializer = new <RARE_TOKEN> ( <RARE_TOKEN> , logger ) ; </a> 0
<a> if ( <RARE_TOKEN> == 1 ) { </a> 0
<a> Request request = requests . get ( 0 ) ; </a> 0
<a> logger . append ( " <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( request . parameters , serializer ) ; </a> 0
<a> logger . append ( " <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( request . parameters , serializer ) ; </a> 0
<a> if ( request . graphObject != null ) { </a> 0
<a> <RARE_TOKEN> ( request . graphObject , url . getPath ( ) , serializer ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( requests ) ; </a> 0
<a> if ( Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> one request in a batch must <RARE_TOKEN> an open <RARE_TOKEN> or a " </a> 0
<a> + <RARE_TOKEN> app ID must be <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> serializer . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Bundle <RARE_TOKEN> = new Bundle ( ) ; </a> 0
<a> <RARE_TOKEN> ( serializer , requests , <RARE_TOKEN> ) ; </a> 0
<a> logger . append ( " <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , serializer ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> logger . log ( ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( GraphObject graphObject , String path , <RARE_TOKEN> serializer ) </a> 0
<a> throws IOException { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> if ( path . startsWith ( <RARE_TOKEN> ) || path . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> int <RARE_TOKEN> = path . indexOf ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = path . indexOf ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> > 3 && ( <RARE_TOKEN> == - 1 || <RARE_TOKEN> < <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Set < Entry < String , Object > > <RARE_TOKEN> = graphObject . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( Entry < String , Object > entry : <RARE_TOKEN> ) { </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> && entry . <RARE_TOKEN> ( ) . equalsIgnoreCase ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( entry . <RARE_TOKEN> ( ) , entry . getValue ( ) , serializer , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Object value , <RARE_TOKEN> serializer , </a> 0
<a> boolean <RARE_TOKEN> ) throws IOException { </a> 0
<a> Class < ? > <RARE_TOKEN> = value . getClass ( ) ; </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> value = ( ( GraphObject ) value ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = value . getClass ( ) ; </a> 0
<a> } else if ( GraphObjectList . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> value = ( ( GraphObjectList < ? > ) value ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = value . getClass ( ) ; </a> 0
<a> } </a> 0
<a> if ( JSONObject . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONObject jsonObject = ( JSONObject ) value ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = jsonObject . keys ( ) ; </a> 0
<a> while ( keys . <RARE_TOKEN> ( ) ) { </a> 0
<a> String <RARE_TOKEN> = keys . next ( ) ; </a> 0
<a> String <RARE_TOKEN> = String . format ( <RARE_TOKEN> , key , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , jsonObject . <RARE_TOKEN> ( <RARE_TOKEN> ) , serializer , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( jsonObject . has ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( key , jsonObject . <RARE_TOKEN> ( <RARE_TOKEN> ) , serializer , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( jsonObject . has ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( key , jsonObject . <RARE_TOKEN> ( <RARE_TOKEN> ) , serializer , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else if ( JSONArray . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONArray jsonArray = ( JSONArray ) value ; </a> 0
<a> int length = jsonArray . length ( ) ; </a> 0
<a> for ( int i = 0 ; i < length ; ++ i ) { </a> 0
<a> String <RARE_TOKEN> = String . format ( <RARE_TOKEN> , key , i ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , jsonArray . <RARE_TOKEN> ( i ) , serializer , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else if ( String . class . isAssignableFrom ( <RARE_TOKEN> ) || </a> 0
<a> <RARE_TOKEN> . class . isAssignableFrom ( <RARE_TOKEN> ) || </a> 0
<a> Boolean . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> serializer . <RARE_TOKEN> ( key , value . toString ( ) ) ; </a> 0
<a> } else if ( Date . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> Date <RARE_TOKEN> = ( Date ) value ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> serializer . <RARE_TOKEN> ( key , <RARE_TOKEN> . format ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( Bundle bundle , <RARE_TOKEN> serializer ) throws IOException { </a> 0
<a> Set < String > keys = bundle . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( String key : keys ) { </a> 0
<a> Object value = bundle . get ( key ) ; </a> 0
<a> if ( <RARE_TOKEN> ( value ) ) { </a> 0
<a> serializer . <RARE_TOKEN> ( key , value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( Bundle bundle , <RARE_TOKEN> serializer ) throws IOException { </a> 0
<a> Set < String > keys = bundle . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( String key : keys ) { </a> 0
<a> Object value = bundle . get ( key ) ; </a> 0
<a> if ( <RARE_TOKEN> ( value ) ) { </a> 0
<a> serializer . <RARE_TOKEN> ( key , value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( <RARE_TOKEN> serializer , Collection < Request > requests , Bundle <RARE_TOKEN> ) </a> 0
<a> throws JSONException , IOException { </a> 0
<a> JSONArray batch = new JSONArray ( ) ; </a> 0
<a> for ( Request request : requests ) { </a> 0
<a> request . <RARE_TOKEN> ( batch , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = batch . toString ( ) ; </a> 0
<a> serializer . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( ) { </a> 0
<a> return String . format ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static volatile String <RARE_TOKEN> ; </a> 0
<a> private static String <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = String . format ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( RequestBatch batch ) { </a> 0
<a> if ( ! Utility . <RARE_TOKEN> ( batch . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> return batch . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> for ( Request request : batch ) { </a> 0
<a> Session session = request . session ; </a> 0
<a> if ( session != null ) { </a> 0
<a> return session . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return Request . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static < T extends GraphObject > List < T > <RARE_TOKEN> ( Response response , Class < T > clazz ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = response . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> GraphObjectList < GraphObject > data = <RARE_TOKEN> . getData ( ) ; </a> 0
<a> if ( data == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return data . <RARE_TOKEN> ( clazz ) ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( Object value ) { </a> 0
<a> return value instanceof Bitmap || value instanceof byte [ ] || value instanceof <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( Object value ) { </a> 0
<a> return value instanceof String || value instanceof Boolean || value instanceof <RARE_TOKEN> || </a> 0
<a> value instanceof Date ; </a> 0
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( Object value ) { </a> 0
<a> if ( value instanceof String ) { </a> 0
<a> return ( String ) value ; </a> 0
<a> } else if ( value instanceof Boolean || value instanceof <RARE_TOKEN> ) { </a> 0
<a> return value . toString ( ) ; </a> 0
<a> } else if ( value instanceof Date ) { </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> . format ( value ) ; </a> 0
<a> } </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( String key , String value ) throws IOException ; </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final Logger logger ; </a> 0
<a> private boolean <RARE_TOKEN> = true ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , Logger logger ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . logger = logger ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String key , Object value ) throws IOException { </a> 0
<a> if ( <RARE_TOKEN> ( value ) ) { </a> 0
<a> <RARE_TOKEN> ( key , <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } else if ( value instanceof Bitmap ) { </a> 0
<a> <RARE_TOKEN> ( key , ( Bitmap ) value ) ; </a> 0
<a> } else if ( value instanceof byte [ ] ) { </a> 0
<a> writeBytes ( key , ( byte [ ] ) value ) ; </a> 0
<a> } else if ( value instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( key , ( <RARE_TOKEN> ) value ) ; </a> 0
<a> } else { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> is not a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String key , String value ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( key , null , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , value ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( logger != null ) { </a> 0
<a> logger . <RARE_TOKEN> ( " " + key , value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String key , Bitmap <RARE_TOKEN> ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( key , key , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( Bitmap . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( "" ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> logger . <RARE_TOKEN> ( " " + key , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void writeBytes ( String key , byte [ ] bytes ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( key , key , <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> . write ( bytes ) ; </a> 0
<a> <RARE_TOKEN> ( "" ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> logger . <RARE_TOKEN> ( " " + key , String . format ( <RARE_TOKEN> <RARE_TOKEN> , bytes . length ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String key , <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( key , key , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> byte [ ] buffer = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> while ( ( <RARE_TOKEN> = <RARE_TOKEN> . read ( buffer ) ) != - 1 ) { </a> 0
<a> this . <RARE_TOKEN> . write ( buffer , 0 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( "" ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> logger . <RARE_TOKEN> ( " " + key , String . format ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String name , String <RARE_TOKEN> , String contentType ) throws IOException { </a> 0
<a> write ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , name ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> write ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( "" ) ; </a> 0
<a> if ( contentType != null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , contentType ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( "" ) ; </a> 0
<a> } </a> 0
<a> public void write ( String format , Object ... args ) throws IOException { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> . write ( <RARE_TOKEN> . getBytes ( ) ) ; </a> 0
<a> this . <RARE_TOKEN> . write ( <RARE_TOKEN> . getBytes ( ) ) ; </a> 0
<a> this . <RARE_TOKEN> . write ( <RARE_TOKEN> . getBytes ( ) ) ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> . write ( String . format ( format , args ) . getBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String format , Object ... args ) throws IOException { </a> 0
<a> write ( format , args ) ; </a> 0
<a> write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface Callback { </a> 0
<a> void onCompleted ( Response response ) ; </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void onCompleted ( GraphUser user , Response response ) ; </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void onCompleted ( List < GraphUser > <RARE_TOKEN> , Response response ) ; </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void onCompleted ( List < GraphPlace > <RARE_TOKEN> , Response response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . annotation . <RARE_TOKEN> ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( 3 ) </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Void , Void , List < Response > > { </a> 0
<a> private static final String TAG = <RARE_TOKEN> . class . <RARE_TOKEN> ( ) ; </a> 0
<a> private static <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final HttpURLConnection connection ; </a> 0
<a> private final RequestBatch requests ; </a> 0
<a> private Exception exception ; </a> 0
<a> static { </a> 0
<a> for ( <RARE_TOKEN> method : <RARE_TOKEN> . class . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( <RARE_TOKEN> . equals ( method . getName ( ) ) ) { </a> 0
<a> Class < ? > [ ] parameters = method . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ( parameters . length == 2 ) && ( parameters [ 0 ] == <RARE_TOKEN> . class ) && parameters [ 1 ] . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = method ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Request ... requests ) { </a> 0
<a> this ( null , new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Collection < Request > requests ) { </a> 0
<a> this ( null , new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( RequestBatch requests ) { </a> 0
<a> this ( null , requests ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( HttpURLConnection connection , Request ... requests ) { </a> 0
<a> this ( connection , new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( HttpURLConnection connection , Collection < Request > requests ) { </a> 0
<a> this ( connection , new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( HttpURLConnection connection , RequestBatch requests ) { </a> 0
<a> this . requests = requests ; </a> 0
<a> this . connection = connection ; </a> 0
<a> } </a> 0
<a> protected final Exception <RARE_TOKEN> ( ) { </a> 0
<a> return exception ; </a> 0
<a> } </a> 0
<a> protected final RequestBatch <RARE_TOKEN> ( ) { </a> 0
<a> return requests ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return new StringBuilder ( ) . append ( <RARE_TOKEN> " ) . append ( " <RARE_TOKEN> " ) . append ( connection ) </a> 0
<a> . append ( ", <RARE_TOKEN> " ) . append ( requests ) . append ( <RARE_TOKEN> ) . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( requests . <RARE_TOKEN> ( ) == null ) { </a> 0
<a> requests . <RARE_TOKEN> ( new Handler ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( List < Response > result ) { </a> 0
<a> super . <RARE_TOKEN> ( result ) ; </a> 0
<a> if ( exception != null ) { </a> 0
<a> Log . d ( TAG , String . format ( <RARE_TOKEN> exception <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , exception . getMessage ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected List < Response > <RARE_TOKEN> ( Void ... params ) { </a> 0
<a> try { </a> 0
<a> if ( connection == null ) { </a> 0
<a> return requests . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> return Request . <RARE_TOKEN> ( connection , requests ) ; </a> 0
<a> } </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> exception = e ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this , <RARE_TOKEN> . <RARE_TOKEN> ( ) , null ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> this . execute ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import java . util . * ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public class RequestBatch extends <RARE_TOKEN> < Request > { </a> 0
<a> private static AtomicInteger <RARE_TOKEN> = new AtomicInteger ( ) ; </a> 0
<a> private Handler <RARE_TOKEN> ; </a> 0
<a> private List < Request > requests = new ArrayList < Request > ( ) ; </a> 0
<a> private int <RARE_TOKEN> = 0 ; </a> 0
<a> private final String id = Integer . valueOf ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) . toString ( ) ; </a> 0
<a> private List < Callback > <RARE_TOKEN> = new ArrayList < Callback > ( ) ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> public RequestBatch ( ) { </a> 0
<a> this . requests = new ArrayList < Request > ( ) ; </a> 0
<a> } </a> 0
<a> public RequestBatch ( Collection < Request > requests ) { </a> 0
<a> this . requests = new ArrayList < Request > ( requests ) ; </a> 0
<a> } </a> 0
<a> public RequestBatch ( Request ... requests ) { </a> 0
<a> this . requests = Arrays . asList ( requests ) ; </a> 0
<a> } </a> 0
<a> public RequestBatch ( RequestBatch requests ) { </a> 0
<a> this . requests = new ArrayList < Request > ( requests ) ; </a> 0
<a> this . <RARE_TOKEN> = requests . <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = requests . <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = new ArrayList < Callback > ( requests . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> must be >= <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Callback callback ) { </a> 0
<a> if ( ! <RARE_TOKEN> . contains ( callback ) ) { </a> 0
<a> <RARE_TOKEN> . add ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Callback callback ) { </a> 0
<a> <RARE_TOKEN> . remove ( callback ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final boolean add ( Request request ) { </a> 0
<a> return requests . add ( request ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void add ( int location , Request request ) { </a> 0
<a> requests . add ( location , request ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void clear ( ) { </a> 0
<a> requests . clear ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final Request get ( int i ) { </a> 0
<a> return requests . get ( i ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final Request remove ( int location ) { </a> 0
<a> return requests . remove ( location ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final Request set ( int location , Request request ) { </a> 0
<a> return requests . set ( location , request ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final int size ( ) { </a> 0
<a> return requests . size ( ) ; </a> 0
<a> } </a> 0
<a> final String getId ( ) { </a> 0
<a> return id ; </a> 0
<a> } </a> 0
<a> final Handler <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> final void <RARE_TOKEN> ( Handler <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> final List < Request > <RARE_TOKEN> ( ) { </a> 0
<a> return requests ; </a> 0
<a> } </a> 0
<a> final List < Callback > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> final String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> final void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final List < Response > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public final <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public interface Callback { </a> 0
<a> void <RARE_TOKEN> ( RequestBatch batch ) ; </a> 0
<a> } </a> 0
<a> List < Response > <RARE_TOKEN> ( ) { </a> 0
<a> return Request . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return Request . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import com . facebook . internal . * ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphObjectList ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import org . json . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class Response { </a> 0
<a> private final HttpURLConnection connection ; </a> 0
<a> private final GraphObject graphObject ; </a> 0
<a> private final GraphObjectList < GraphObject > <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final FacebookRequestError error ; </a> 0
<a> private final Request request ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static FileLruCache <RARE_TOKEN> ; </a> 0
<a> Response ( Request request , HttpURLConnection connection , GraphObject graphObject , boolean <RARE_TOKEN> ) { </a> 0
<a> this . request = request ; </a> 0
<a> this . connection = connection ; </a> 0
<a> this . graphObject = graphObject ; </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . error = null ; </a> 0
<a> } </a> 0
<a> Response ( Request request , HttpURLConnection connection , GraphObjectList < GraphObject > <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> ) { </a> 0
<a> this . request = request ; </a> 0
<a> this . connection = connection ; </a> 0
<a> this . graphObject = null ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . error = null ; </a> 0
<a> } </a> 0
<a> Response ( Request request , HttpURLConnection connection , FacebookRequestError error ) { </a> 0
<a> this . request = request ; </a> 0
<a> this . connection = connection ; </a> 0
<a> this . graphObject = null ; </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> this . <RARE_TOKEN> = false ; </a> 0
<a> this . error = error ; </a> 0
<a> } </a> 0
<a> public final FacebookRequestError getError ( ) { </a> 0
<a> return error ; </a> 0
<a> } </a> 0
<a> public final GraphObject <RARE_TOKEN> ( ) { </a> 0
<a> return graphObject ; </a> 0
<a> } </a> 0
<a> public final < T extends GraphObject > T <RARE_TOKEN> ( Class < T > graphObjectClass ) { </a> 0
<a> if ( graphObject == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( graphObjectClass == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> <RARE_TOKEN> in a <RARE_TOKEN> interface that extends <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return graphObject . cast ( graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> public final GraphObjectList < GraphObject > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final < T extends GraphObject > GraphObjectList < T > <RARE_TOKEN> ( Class < T > graphObjectClass ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> public final HttpURLConnection <RARE_TOKEN> ( ) { </a> 0
<a> return connection ; </a> 0
<a> } </a> 0
<a> public Request getRequest ( ) { </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> public Request <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> if ( graphObject != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = graphObject . cast ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . equals ( request . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> Request <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = new Request ( request . getSession ( ) , new URL ( <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> String <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = String . format ( <RARE_TOKEN> , ( connection != null ) ? connection . <RARE_TOKEN> ( ) : 200 ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return new StringBuilder ( ) . append ( <RARE_TOKEN> " ) . append ( " <RARE_TOKEN> " ) . append ( <RARE_TOKEN> ) </a> 0
<a> . append ( ", <RARE_TOKEN> " ) . append ( graphObject ) . append ( ", <RARE_TOKEN> " ) . append ( error ) </a> 0
<a> . append ( ", <RARE_TOKEN> ) . append ( <RARE_TOKEN> ) . append ( <RARE_TOKEN> ) </a> 0
<a> . toString ( ) ; </a> 0
<a> } </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static FileLruCache <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> Context <RARE_TOKEN> = Session . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = new FileLruCache ( <RARE_TOKEN> , <RARE_TOKEN> , new FileLruCache . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> static List < Response > <RARE_TOKEN> ( HttpURLConnection connection , RequestBatch requests ) { </a> 0
<a> InputStream stream = null ; </a> 0
<a> FileLruCache cache = null ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> if ( requests instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) requests ; </a> 0
<a> cache = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( requests . size ( ) == 1 ) { </a> 0
<a> <RARE_TOKEN> = requests . get ( 0 ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> cache for <RARE_TOKEN> request <RARE_TOKEN> <RARE_TOKEN> key <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) && cache != null && ! Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> try { </a> 0
<a> stream = cache . get ( <RARE_TOKEN> ) ; </a> 0
<a> if ( stream != null ) { </a> 0
<a> return <RARE_TOKEN> ( stream , null , requests , true ) ; </a> 0
<a> } </a> 0
<a> } catch ( FacebookException exception ) { </a> 0
<a> } catch ( JSONException exception ) { </a> 0
<a> } catch ( IOException exception ) { </a> 0
<a> } finally { </a> 0
<a> Utility . <RARE_TOKEN> ( stream ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> if ( connection . <RARE_TOKEN> ( ) >= <RARE_TOKEN> ) { </a> 0
<a> stream = connection . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> stream = connection . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ( cache != null ) && ( <RARE_TOKEN> != null ) && ( stream != null ) ) { </a> 0
<a> InputStream <RARE_TOKEN> = cache . <RARE_TOKEN> ( <RARE_TOKEN> , stream ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> stream = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( stream , connection , requests , false ) ; </a> 0
<a> } catch ( FacebookException <RARE_TOKEN> ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ( requests , connection , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( JSONException exception ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , exception ) ; </a> 0
<a> return <RARE_TOKEN> ( requests , connection , new FacebookException ( exception ) ) ; </a> 0
<a> } catch ( IOException exception ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , exception ) ; </a> 0
<a> return <RARE_TOKEN> ( requests , connection , new FacebookException ( exception ) ) ; </a> 0
<a> } finally { </a> 0
<a> Utility . <RARE_TOKEN> ( stream ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static List < Response > <RARE_TOKEN> ( InputStream stream , HttpURLConnection connection , </a> 0
<a> RequestBatch requests , boolean <RARE_TOKEN> ) throws FacebookException , JSONException , IOException { </a> 0
<a> String <RARE_TOKEN> = Utility . <RARE_TOKEN> ( stream ) ; </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> . length ( ) , </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Object <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> List < Response > responses = <RARE_TOKEN> ( connection , requests , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> requests . getId ( ) , <RARE_TOKEN> . length ( ) , responses ) ; </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> private static List < Response > <RARE_TOKEN> ( HttpURLConnection connection , List < Request > requests , </a> 0
<a> Object object , boolean <RARE_TOKEN> ) throws FacebookException , JSONException { </a> 0
<a> assert ( connection != null ) || <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = requests . size ( ) ; </a> 0
<a> List < Response > responses = new ArrayList < Response > ( <RARE_TOKEN> ) ; </a> 0
<a> Object <RARE_TOKEN> = object ; </a> 0
<a> if ( <RARE_TOKEN> == 1 ) { </a> 0
<a> Request request = requests . get ( 0 ) ; </a> 0
<a> try { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , object ) ; </a> 0
<a> int <RARE_TOKEN> = ( connection != null ) ? connection . <RARE_TOKEN> ( ) : 200 ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> jsonArray . put ( jsonObject ) ; </a> 0
<a> object = jsonArray ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> responses . add ( new Response ( request , connection , new FacebookRequestError ( connection , e ) ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> responses . add ( new Response ( request , connection , new FacebookRequestError ( connection , e ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! ( object instanceof JSONArray ) || ( ( JSONArray ) object ) . length ( ) != <RARE_TOKEN> ) { </a> 0
<a> FacebookException exception = new FacebookException ( "Unexpected <RARE_TOKEN> of <RARE_TOKEN> ) ; </a> 0
<a> throw exception ; </a> 0
<a> } </a> 0
<a> JSONArray jsonArray = ( JSONArray ) object ; </a> 0
<a> for ( int i = 0 ; i < jsonArray . length ( ) ; ++ i ) { </a> 0
<a> Request request = requests . get ( i ) ; </a> 0
<a> try { </a> 0
<a> Object obj = jsonArray . get ( i ) ; </a> 0
<a> responses . add ( <RARE_TOKEN> ( request , connection , obj , <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> responses . add ( new Response ( request , connection , new FacebookRequestError ( connection , e ) ) ) ; </a> 0
<a> } catch ( FacebookException e ) { </a> 0
<a> responses . add ( new Response ( request , connection , new FacebookRequestError ( connection , e ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> private static Response <RARE_TOKEN> ( Request request , HttpURLConnection connection , Object object , </a> 0
<a> boolean <RARE_TOKEN> , Object <RARE_TOKEN> ) throws JSONException { </a> 0
<a> if ( object instanceof JSONObject ) { </a> 0
<a> JSONObject jsonObject = ( JSONObject ) object ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . <RARE_TOKEN> ( jsonObject , <RARE_TOKEN> , connection ) ; </a> 0
<a> if ( error != null ) { </a> 0
<a> if ( error . <RARE_TOKEN> ( ) == <RARE_TOKEN> ) { </a> 0
<a> Session session = request . getSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return new Response ( request , connection , error ) ; </a> 0
<a> } </a> 0
<a> Object <RARE_TOKEN> = Utility . <RARE_TOKEN> ( jsonObject , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> instanceof JSONObject ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ( JSONObject ) <RARE_TOKEN> ) ; </a> 0
<a> return new Response ( request , connection , graphObject , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> instanceof JSONArray ) { </a> 0
<a> GraphObjectList < GraphObject > <RARE_TOKEN> = GraphObject . Factory . <RARE_TOKEN> ( </a> 0
<a> ( JSONArray ) <RARE_TOKEN> , GraphObject . class ) ; </a> 0
<a> return new Response ( request , connection , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> object = JSONObject . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( object == JSONObject . <RARE_TOKEN> ) { </a> 0
<a> return new Response ( request , connection , ( GraphObject ) null , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> object type in <RARE_TOKEN> <RARE_TOKEN> " </a> 0
<a> + object . getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static List < Response > <RARE_TOKEN> ( List < Request > requests , HttpURLConnection connection , </a> 0
<a> FacebookException error ) { </a> 0
<a> int count = requests . size ( ) ; </a> 0
<a> List < Response > responses = new ArrayList < Response > ( count ) ; </a> 0
<a> for ( int i = 0 ; i < count ; ++ i ) { </a> 0
<a> Response response = new Response ( requests . get ( i ) , connection , new FacebookRequestError ( connection , error ) ) ; </a> 0
<a> responses . add ( response ) ; </a> 0
<a> } </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> GraphObjectList < GraphObject > getData ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . * ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . * ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . content . <RARE_TOKEN> ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . * ; </a> 0
<a> public class Session implements Serializable { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public static final String TAG = Session . class . <RARE_TOKEN> ( ) ; </a> 0
<a> public static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final Object <RARE_TOKEN> = new Object ( ) ; </a> 0
<a> private static Session <RARE_TOKEN> ; </a> 0
<a> private static volatile Context <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = 24 * <RARE_TOKEN> * <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> * <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private static final Set < String > <RARE_TOKEN> = new HashSet < String > ( ) { { </a> 0
<a> add ( <RARE_TOKEN> ) ; </a> 0
<a> add ( <RARE_TOKEN> ) ; </a> 0
<a> add ( <RARE_TOKEN> ) ; </a> 0
<a> } } ; </a> 0
<a> private String applicationId ; </a> 0
<a> private SessionState state ; </a> 0
<a> private AccessToken <RARE_TOKEN> ; </a> 0
<a> private Date <RARE_TOKEN> = new Date ( 0 ) ; </a> 0
<a> private AuthorizationRequest pendingRequest ; </a> 0
<a> private AuthorizationClient <RARE_TOKEN> ; </a> 0
<a> private volatile Bundle <RARE_TOKEN> ; </a> 0
<a> private final List < StatusCallback > <RARE_TOKEN> ; </a> 0
<a> private Handler handler ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final Object lock = new Object ( ) ; </a> 0
<a> private TokenCachingStrategy <RARE_TOKEN> ; </a> 0
<a> private volatile <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private static class <RARE_TOKEN> implements Serializable { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> private final String applicationId ; </a> 0
<a> private final SessionState state ; </a> 0
<a> private final AccessToken <RARE_TOKEN> ; </a> 0
<a> private final Date <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final AuthorizationRequest pendingRequest ; </a> 0
<a> <RARE_TOKEN> ( String applicationId , SessionState state , </a> 0
<a> AccessToken <RARE_TOKEN> , Date <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> , AuthorizationRequest pendingRequest ) { </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . state = state ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . pendingRequest = pendingRequest ; </a> 0
<a> } </a> 0
<a> private Object <RARE_TOKEN> ( ) { </a> 0
<a> return new Session ( applicationId , state , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , pendingRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private Session ( String applicationId , SessionState state , </a> 0
<a> AccessToken <RARE_TOKEN> , Date <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> , AuthorizationRequest pendingRequest ) { </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . state = state ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . pendingRequest = pendingRequest ; </a> 0
<a> handler = new Handler ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = new ArrayList < StatusCallback > ( ) ; </a> 0
<a> } </a> 0
<a> public Session ( Context <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> , null , null , true ) ; </a> 0
<a> } </a> 0
<a> Session ( Context context , String applicationId , TokenCachingStrategy <RARE_TOKEN> ) { </a> 0
<a> this ( context , applicationId , <RARE_TOKEN> , true ) ; </a> 0
<a> } </a> 0
<a> Session ( Context context , String applicationId , TokenCachingStrategy <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> ) { </a> 0
<a> if ( ( context != null ) && ( applicationId == null ) ) { </a> 0
<a> applicationId = Utility . <RARE_TOKEN> ( context ) ; </a> 0
<a> } </a> 0
<a> Validate . <RARE_TOKEN> ( applicationId , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( context ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . state = SessionState . <RARE_TOKEN> ; </a> 0
<a> this . pendingRequest = null ; </a> 0
<a> this . <RARE_TOKEN> = new ArrayList < StatusCallback > ( ) ; </a> 0
<a> this . handler = new Handler ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Bundle <RARE_TOKEN> = <RARE_TOKEN> ? <RARE_TOKEN> . <RARE_TOKEN> ( ) : null ; </a> 0
<a> if ( TokenCachingStrategy . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> Date <RARE_TOKEN> = TokenCachingStrategy </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> , TokenCachingStrategy . <RARE_TOKEN> ) ; </a> 0
<a> Date <RARE_TOKEN> = new Date ( ) ; </a> 0
<a> if ( ( <RARE_TOKEN> == null ) || <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> this . <RARE_TOKEN> = AccessToken . <RARE_TOKEN> ( Collections . < String > <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> this . <RARE_TOKEN> = AccessToken . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> this . state = SessionState . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> this . <RARE_TOKEN> = AccessToken . <RARE_TOKEN> ( Collections . < String > <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final Bundle <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return this . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final boolean isOpened ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return this . state . isOpened ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return this . state . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final SessionState <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return this . state ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final String <RARE_TOKEN> ( ) { </a> 0
<a> return this . applicationId ; </a> 0
<a> } </a> 0
<a> public final String <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return ( this . <RARE_TOKEN> == null ) ? null : this . <RARE_TOKEN> . getToken ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final Date <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return ( this . <RARE_TOKEN> == null ) ? null : this . <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final List < String > getPermissions ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return ( this . <RARE_TOKEN> == null ) ? null : this . <RARE_TOKEN> . getPermissions ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( OpenRequest openRequest ) { </a> 0
<a> open ( openRequest , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( OpenRequest openRequest ) { </a> 0
<a> open ( openRequest , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public final void open ( AccessToken accessToken , StatusCallback callback ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to open a session that has a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( state != SessionState . <RARE_TOKEN> && state != SessionState . <RARE_TOKEN> ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to open an <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( callback != null ) { </a> 0
<a> <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = accessToken ; </a> 0
<a> if ( this . <RARE_TOKEN> != null ) { </a> 0
<a> this . <RARE_TOKEN> . <RARE_TOKEN> ( accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> final SessionState <RARE_TOKEN> = state ; </a> 0
<a> state = SessionState . <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> ( <RARE_TOKEN> , state , null ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public final boolean onActivityResult ( Activity <RARE_TOKEN> , int requestCode , int resultCode , Intent data ) { </a> 0
<a> Validate . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> synchronized ( lock ) { </a> 0
<a> if ( pendingRequest == null || ( requestCode != pendingRequest . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> AccessToken <RARE_TOKEN> = null ; </a> 0
<a> Exception exception = null ; </a> 0
<a> if ( data != null ) { </a> 0
<a> AuthorizationClient . Result result = ( AuthorizationClient . Result ) data . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> if ( result != null ) { </a> 0
<a> <RARE_TOKEN> ( resultCode , result ) ; </a> 0
<a> return true ; </a> 0
<a> } else if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } else if ( resultCode == Activity . <RARE_TOKEN> ) { </a> 0
<a> exception = new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , exception ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public final void close ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> final SessionState <RARE_TOKEN> = this . state ; </a> 0
<a> switch ( this . state ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> this . state = SessionState . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , this . state , new FacebookException ( </a> 0
<a> <RARE_TOKEN> in <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> this . state = SessionState . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , this . state , null ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( ) { </a> 0
<a> if ( this . <RARE_TOKEN> != null ) { </a> 0
<a> this . <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> close ( ) ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( StatusCallback callback ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> if ( callback != null && ! <RARE_TOKEN> . contains ( callback ) ) { </a> 0
<a> <RARE_TOKEN> . add ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( StatusCallback callback ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . remove ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return new StringBuilder ( ) . append ( <RARE_TOKEN> ) . append ( " <RARE_TOKEN> ) . append ( this . state ) . append ( ", <RARE_TOKEN> ) </a> 0
<a> . append ( ( this . <RARE_TOKEN> == null ) ? <RARE_TOKEN> : this . <RARE_TOKEN> ) . append ( ", <RARE_TOKEN> ) </a> 0
<a> . append ( ( this . applicationId == null ) ? <RARE_TOKEN> : this . applicationId ) . append ( <RARE_TOKEN> ) . toString ( ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Bundle bundle ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> final SessionState <RARE_TOKEN> = this . state ; </a> 0
<a> switch ( this . state ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> this . state = SessionState . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , this . state , null ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> Log . d ( TAG , <RARE_TOKEN> <RARE_TOKEN> in state " + this . state ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = AccessToken . <RARE_TOKEN> ( this . <RARE_TOKEN> , bundle ) ; </a> 0
<a> if ( this . <RARE_TOKEN> != null ) { </a> 0
<a> this . <RARE_TOKEN> . <RARE_TOKEN> ( this . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private Object <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( applicationId , state , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , false , pendingRequest ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> stream ) throws <RARE_TOKEN> { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static final void <RARE_TOKEN> ( Session session , Bundle bundle ) { </a> 0
<a> if ( bundle != null && session != null && ! bundle . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ) . <RARE_TOKEN> ( session ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> , session . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final Session <RARE_TOKEN> ( </a> 0
<a> Context context , TokenCachingStrategy <RARE_TOKEN> , StatusCallback callback , Bundle bundle ) { </a> 0
<a> if ( bundle == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> byte [ ] data = bundle . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( data != null ) { </a> 0
<a> <RARE_TOKEN> is = new <RARE_TOKEN> ( data ) ; </a> 0
<a> try { </a> 0
<a> Session session = ( Session ) ( new <RARE_TOKEN> ( is ) ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( context ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> session . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> session . <RARE_TOKEN> = new <RARE_TOKEN> ( context ) ; </a> 0
<a> } </a> 0
<a> if ( callback != null ) { </a> 0
<a> session . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> session . <RARE_TOKEN> = bundle . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return session ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> Log . w ( TAG , <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> Log . w ( TAG , <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public static final Session getActiveSession ( ) { </a> 0
<a> synchronized ( Session . <RARE_TOKEN> ) { </a> 0
<a> return Session . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final void <RARE_TOKEN> ( Session session ) { </a> 0
<a> synchronized ( Session . <RARE_TOKEN> ) { </a> 0
<a> if ( session != Session . <RARE_TOKEN> ) { </a> 0
<a> Session <RARE_TOKEN> = Session . <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> Session . <RARE_TOKEN> = session ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( session != null ) { </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> if ( session . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static Session <RARE_TOKEN> ( Context context ) { </a> 0
<a> return <RARE_TOKEN> ( context , false , null ) ; </a> 0
<a> } </a> 0
<a> public static Session <RARE_TOKEN> ( Activity activity , boolean <RARE_TOKEN> , </a> 0
<a> StatusCallback callback ) { </a> 0
<a> return <RARE_TOKEN> ( activity , <RARE_TOKEN> , new OpenRequest ( activity ) . setCallback ( callback ) ) ; </a> 0
<a> } </a> 0
<a> public static Session <RARE_TOKEN> ( Context context , <RARE_TOKEN> fragment , </a> 0
<a> boolean <RARE_TOKEN> , StatusCallback callback ) { </a> 0
<a> return <RARE_TOKEN> ( context , <RARE_TOKEN> , new OpenRequest ( fragment ) . setCallback ( callback ) ) ; </a> 0
<a> } </a> 0
<a> public static Session <RARE_TOKEN> ( Context context , AccessToken accessToken , </a> 0
<a> StatusCallback callback ) { </a> 0
<a> Session session = new Session ( context , null , null , false ) ; </a> 0
<a> <RARE_TOKEN> ( session ) ; </a> 0
<a> session . open ( accessToken , callback ) ; </a> 0
<a> return session ; </a> 0
<a> } </a> 0
<a> private static Session <RARE_TOKEN> ( Context context , boolean <RARE_TOKEN> , OpenRequest openRequest ) { </a> 0
<a> Session session = new Builder ( context ) . build ( ) ; </a> 0
<a> if ( SessionState . <RARE_TOKEN> . equals ( session . <RARE_TOKEN> ( ) ) || <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( session ) ; </a> 0
<a> session . <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> return session ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> static Context <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( Context <RARE_TOKEN> ) { </a> 0
<a> if ( ( <RARE_TOKEN> != null ) && ( <RARE_TOKEN> == null ) ) { </a> 0
<a> Context <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> != null ) ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AuthorizationRequest request ) { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> request . <RARE_TOKEN> ( applicationId ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( request ) ; </a> 0
<a> if ( ! <RARE_TOKEN> && request . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( request ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> final SessionState <RARE_TOKEN> = this . state ; </a> 0
<a> switch ( this . state ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return ; </a> 0
<a> default : </a> 0
<a> this . state = SessionState . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , this . state , new FacebookException ( <RARE_TOKEN> in <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void open ( OpenRequest openRequest , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( openRequest , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> SessionState <RARE_TOKEN> ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> <RARE_TOKEN> ( state , state , new UnsupportedOperationException ( </a> 0
<a> <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to open a session that has a <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> final SessionState <RARE_TOKEN> = this . state ; </a> 0
<a> switch ( this . state ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> this . state = <RARE_TOKEN> = SessionState . <RARE_TOKEN> ; </a> 0
<a> if ( openRequest == null ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> be null <RARE_TOKEN> <RARE_TOKEN> a new <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> pendingRequest = openRequest ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( openRequest != null && ! Utility . <RARE_TOKEN> ( openRequest . getPermissions ( ) ) ) { </a> 0
<a> if ( ! Utility . <RARE_TOKEN> ( openRequest . getPermissions ( ) , getPermissions ( ) ) ) { </a> 0
<a> pendingRequest = openRequest ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( pendingRequest == null ) { </a> 0
<a> this . state = <RARE_TOKEN> = SessionState . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> this . state = <RARE_TOKEN> = SessionState . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to open an <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( openRequest != null ) { </a> 0
<a> <RARE_TOKEN> ( openRequest . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == SessionState . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to request new permissions for a session that has a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> switch ( this . state ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> pendingRequest = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to request new permissions for a session that is not <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( AuthorizationRequest request ) { </a> 0
<a> if ( request != null && ! request . <RARE_TOKEN> ) { </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> . class ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( intent ) ) { </a> 0
<a> throw new FacebookException ( String . format ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> SessionLoginBehavior <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> is not <RARE_TOKEN> <RARE_TOKEN> an activity in <RARE_TOKEN> , </a> 0
<a> request . <RARE_TOKEN> ( ) , <RARE_TOKEN> . class . getName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( AuthorizationRequest request , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( request == null || Utility . <RARE_TOKEN> ( request . getPermissions ( ) ) ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> request <RARE_TOKEN> or <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> for ( String <RARE_TOKEN> : request . getPermissions ( ) ) { </a> 0
<a> if ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new FacebookException ( </a> 0
<a> String . format ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> or <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to a request for read <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> Log . w ( TAG , </a> 0
<a> String . format ( </a> 0
<a> <RARE_TOKEN> not <RARE_TOKEN> a read <RARE_TOKEN> <RARE_TOKEN> to a request for <RARE_TOKEN> or <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static boolean <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> != null && </a> 0
<a> ( <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) || </a> 0
<a> <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) || </a> 0
<a> <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int resultCode , AuthorizationClient . Result result ) { </a> 0
<a> AccessToken <RARE_TOKEN> = null ; </a> 0
<a> Exception exception = null ; </a> 0
<a> if ( resultCode == Activity . <RARE_TOKEN> ) { </a> 0
<a> if ( result . code == AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = result . token ; </a> 0
<a> } else { </a> 0
<a> exception = new <RARE_TOKEN> ( result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> } else if ( resultCode == Activity . <RARE_TOKEN> ) { </a> 0
<a> exception = new <RARE_TOKEN> ( result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , exception ) ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( AuthorizationRequest request ) { </a> 0
<a> Intent intent = <RARE_TOKEN> ( request ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( intent ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> request . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( intent , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( Intent intent ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( intent , 0 ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> private Intent <RARE_TOKEN> ( AuthorizationRequest request ) { </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> . class ) ; </a> 0
<a> intent . <RARE_TOKEN> ( request . <RARE_TOKEN> ( ) . toString ( ) ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest <RARE_TOKEN> = request . <RARE_TOKEN> ( ) ; </a> 0
<a> Bundle extras = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> intent . <RARE_TOKEN> ( extras ) ; </a> 0
<a> return intent ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( final AuthorizationRequest request ) { </a> 0
<a> <RARE_TOKEN> = new AuthorizationClient ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new AuthorizationClient . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( AuthorizationClient . Result result ) { </a> 0
<a> <RARE_TOKEN> ( Activity . <RARE_TOKEN> , result ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> void <RARE_TOKEN> ( AccessToken <RARE_TOKEN> , Exception exception ) { </a> 0
<a> if ( ( <RARE_TOKEN> != null ) && <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> exception = new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> switch ( this . state ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , exception ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , exception ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( AccessToken <RARE_TOKEN> , Exception exception ) { </a> 0
<a> final SessionState <RARE_TOKEN> = state ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> state = SessionState . <RARE_TOKEN> ; </a> 0
<a> } else if ( exception != null ) { </a> 0
<a> state = SessionState . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> pendingRequest = null ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , state , exception ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( final AccessToken <RARE_TOKEN> , Exception exception ) { </a> 0
<a> final SessionState <RARE_TOKEN> = state ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> state = SessionState . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> pendingRequest = null ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , state , exception ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( AccessToken <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( final SessionState <RARE_TOKEN> , final SessionState <RARE_TOKEN> , final Exception exception ) { </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> && exception == null ) { </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> this . <RARE_TOKEN> = AccessToken . <RARE_TOKEN> ( Collections . < String > <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> for ( final StatusCallback callback : <RARE_TOKEN> ) { </a> 0
<a> Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> callback . <RARE_TOKEN> ( Session . this , <RARE_TOKEN> , exception ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> ( handler , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> ( handler , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( this == Session . <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . isOpened ( ) != <RARE_TOKEN> . isOpened ( ) ) { </a> 0
<a> if ( <RARE_TOKEN> . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( String action ) { </a> 0
<a> final Intent intent = new Intent ( action ) ; </a> 0
<a> <RARE_TOKEN> . getInstance ( <RARE_TOKEN> ( ) ) . <RARE_TOKEN> ( intent ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( Handler handler , Runnable <RARE_TOKEN> ) { </a> 0
<a> if ( handler != null ) { </a> 0
<a> handler . post ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . execute ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . bind ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> boolean result = false ; </a> 0
<a> Date <RARE_TOKEN> = new Date ( ) ; </a> 0
<a> if ( state . isOpened ( ) && <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) </a> 0
<a> && <RARE_TOKEN> . getTime ( ) - <RARE_TOKEN> . getTime ( ) > <RARE_TOKEN> * 1000 </a> 0
<a> && <RARE_TOKEN> . getTime ( ) - <RARE_TOKEN> . <RARE_TOKEN> ( ) . getTime ( ) > <RARE_TOKEN> * 1000 ) { </a> 0
<a> result = true ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> AccessToken <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AccessToken <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> Date <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Date <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> request ) { </a> 0
<a> this . <RARE_TOKEN> = request ; </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( </a> 0
<a> new <RARE_TOKEN> ( Session . this , this ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> public void bind ( ) { </a> 0
<a> Intent intent = NativeProtocol . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( intent != null </a> 0
<a> && <RARE_TOKEN> . <RARE_TOKEN> ( intent , new <RARE_TOKEN> ( ) , Context . <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( new Date ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> service ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( service ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . this ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == this ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle <RARE_TOKEN> = new Bundle ( ) ; </a> 0
<a> <RARE_TOKEN> . putString ( AccessToken . <RARE_TOKEN> , <RARE_TOKEN> ( ) . getToken ( ) ) ; </a> 0
<a> <RARE_TOKEN> request = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> request . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static class <RARE_TOKEN> extends Handler { </a> 0
<a> private <RARE_TOKEN> < Session > <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( Session session , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> < Session > ( session ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> < <RARE_TOKEN> > ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> msg ) { </a> 0
<a> String token = msg . getData ( ) . getString ( AccessToken . <RARE_TOKEN> ) ; </a> 0
<a> Session session = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( session != null && token != null ) { </a> 0
<a> session . <RARE_TOKEN> ( msg . getData ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> request = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( request != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request ) ; </a> 0
<a> request . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface StatusCallback { </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object <RARE_TOKEN> ) { </a> 0
<a> if ( ! ( <RARE_TOKEN> instanceof Session ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Session other = ( Session ) <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ( other . applicationId , applicationId ) && </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> , <RARE_TOKEN> ) && </a> 0
<a> <RARE_TOKEN> ( other . state , state ) && </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( Object a , Object b ) { </a> 0
<a> if ( a == null ) { </a> 0
<a> return b == null ; </a> 0
<a> } else { </a> 0
<a> return a . equals ( b ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final class Builder { </a> 0
<a> private final Context context ; </a> 0
<a> private String applicationId ; </a> 0
<a> private TokenCachingStrategy <RARE_TOKEN> ; </a> 0
<a> public Builder ( Context context ) { </a> 0
<a> this . context = context ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( final String applicationId ) { </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( final TokenCachingStrategy <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Session build ( ) { </a> 0
<a> return new Session ( context , applicationId , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> interface <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( Intent intent , int requestCode ) ; </a> 0
<a> public Activity <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( <RARE_TOKEN> == null && <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> String applicationId = Session . this . applicationId ; </a> 0
<a> if ( applicationId != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> = new <RARE_TOKEN> ( applicationId , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . execute ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> < Void , Void , Void > { </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private final Context <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( String applicationId , Context context ) { </a> 0
<a> <RARE_TOKEN> = applicationId ; </a> 0
<a> <RARE_TOKEN> = context . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected Void <RARE_TOKEN> ( Void ... <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> , e . getMessage ( ) ) ; </a> 1
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( Void result ) { </a> 0
<a> synchronized ( Session . this ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class AuthorizationRequest implements Serializable { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private SessionLoginBehavior loginBehavior = SessionLoginBehavior . <RARE_TOKEN> ; </a> 0
<a> private int requestCode = <RARE_TOKEN> ; </a> 0
<a> private StatusCallback <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> private List < String > permissions = Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> private String applicationId ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> AuthorizationRequest ( final Activity activity ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Intent intent , int requestCode ) { </a> 0
<a> activity . <RARE_TOKEN> ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity <RARE_TOKEN> ( ) { </a> 0
<a> return activity ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest ( final <RARE_TOKEN> fragment ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Intent intent , int requestCode ) { </a> 0
<a> fragment . <RARE_TOKEN> ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity <RARE_TOKEN> ( ) { </a> 0
<a> return fragment . getActivity ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> private AuthorizationRequest ( SessionLoginBehavior loginBehavior , int requestCode , </a> 0
<a> List < String > permissions , String <RARE_TOKEN> , boolean <RARE_TOKEN> , String applicationId , </a> 0
<a> String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Intent intent , int requestCode ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> <RARE_TOKEN> create an AuthorizationRequest <RARE_TOKEN> a <RARE_TOKEN> Activity or <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity <RARE_TOKEN> ( ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> <RARE_TOKEN> create an AuthorizationRequest <RARE_TOKEN> a <RARE_TOKEN> Activity or <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> this . loginBehavior = loginBehavior ; </a> 0
<a> this . requestCode = requestCode ; </a> 0
<a> this . permissions = permissions ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> . valueOf ( <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest setCallback ( StatusCallback <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> StatusCallback <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest <RARE_TOKEN> ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> if ( loginBehavior != null ) { </a> 0
<a> this . loginBehavior = loginBehavior ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> SessionLoginBehavior <RARE_TOKEN> ( ) { </a> 0
<a> return loginBehavior ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest <RARE_TOKEN> ( int requestCode ) { </a> 0
<a> if ( requestCode >= 0 ) { </a> 0
<a> this . requestCode = requestCode ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ) { </a> 0
<a> return requestCode ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest <RARE_TOKEN> ( List < String > permissions ) { </a> 0
<a> if ( permissions != null ) { </a> 0
<a> this . permissions = permissions ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> List < String > getPermissions ( ) { </a> 0
<a> return permissions ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ( ) { </a> 0
<a> return applicationId ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( String applicationId ) { </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> AuthorizationClient . AuthorizationRequest <RARE_TOKEN> ( ) { </a> 0
<a> AuthorizationClient . <RARE_TOKEN> <RARE_TOKEN> = new AuthorizationClient . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Intent intent , int requestCode ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> return new AuthorizationClient . AuthorizationRequest ( loginBehavior , requestCode , <RARE_TOKEN> , </a> 0
<a> permissions , <RARE_TOKEN> , applicationId , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Object <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> loginBehavior , requestCode , permissions , <RARE_TOKEN> . name ( ) , <RARE_TOKEN> , applicationId , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> stream ) throws <RARE_TOKEN> { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> implements Serializable { </a> 0
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> private final SessionLoginBehavior loginBehavior ; </a> 0
<a> private final int requestCode ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private final List < String > permissions ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private final String applicationId ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> ( SessionLoginBehavior loginBehavior , </a> 0
<a> int requestCode , List < String > permissions , String <RARE_TOKEN> , boolean <RARE_TOKEN> , </a> 0
<a> String applicationId , String <RARE_TOKEN> ) { </a> 0
<a> this . loginBehavior = loginBehavior ; </a> 0
<a> this . requestCode = requestCode ; </a> 0
<a> this . permissions = permissions ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private Object <RARE_TOKEN> ( ) { </a> 0
<a> return new AuthorizationRequest ( loginBehavior , requestCode , permissions , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> applicationId , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final class OpenRequest extends AuthorizationRequest { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public OpenRequest ( Activity activity ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> } </a> 0
<a> public OpenRequest ( <RARE_TOKEN> fragment ) { </a> 0
<a> super ( fragment ) ; </a> 0
<a> } </a> 0
<a> public final OpenRequest setCallback ( StatusCallback <RARE_TOKEN> ) { </a> 0
<a> super . setCallback ( <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final OpenRequest <RARE_TOKEN> ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> super . <RARE_TOKEN> ( loginBehavior ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final OpenRequest <RARE_TOKEN> ( int requestCode ) { </a> 0
<a> super . <RARE_TOKEN> ( requestCode ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final OpenRequest <RARE_TOKEN> ( List < String > permissions ) { </a> 0
<a> super . <RARE_TOKEN> ( permissions ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final OpenRequest <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final class <RARE_TOKEN> extends AuthorizationRequest { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Activity activity , List < String > permissions ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> <RARE_TOKEN> ( permissions ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> fragment , List < String > permissions ) { </a> 0
<a> super ( fragment ) ; </a> 0
<a> <RARE_TOKEN> ( permissions ) ; </a> 0
<a> } </a> 0
<a> public final <RARE_TOKEN> setCallback ( StatusCallback <RARE_TOKEN> ) { </a> 0
<a> super . setCallback ( <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final <RARE_TOKEN> <RARE_TOKEN> ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> super . <RARE_TOKEN> ( loginBehavior ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final <RARE_TOKEN> <RARE_TOKEN> ( int requestCode ) { </a> 0
<a> super . <RARE_TOKEN> ( requestCode ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public enum SessionLoginBehavior { </a> 0
<a> <RARE_TOKEN> ( true , true ) , </a> 0
<a> <RARE_TOKEN> ( true , false ) , </a> 0
<a> <RARE_TOKEN> ( false , true ) ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private SessionLoginBehavior ( boolean <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public enum SessionState { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> SessionState ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean isOpened ( ) { </a> 0
<a> return this . <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return this . <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . net . <RARE_TOKEN> ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 1
<a> import com . facebook . android . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . HashSet ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . concurrent . * ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> private static final HashSet < LoggingBehavior > <RARE_TOKEN> = new HashSet < LoggingBehavior > ( ) ; </a> 1
<a> private static volatile <RARE_TOKEN> executor ; </a> 0
<a> private static volatile boolean <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = 5 ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final Object <RARE_TOKEN> = new Object ( ) ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private static final <RARE_TOKEN> < Runnable > <RARE_TOKEN> = new <RARE_TOKEN> < Runnable > ( 10 ) ; </a> 0
<a> private static final ThreadFactory <RARE_TOKEN> = new ThreadFactory ( ) { </a> 0
<a> private final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( 0 ) ; </a> 0
<a> public Thread <RARE_TOKEN> ( Runnable <RARE_TOKEN> ) { </a> 0
<a> return new Thread ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public static final Set < LoggingBehavior > <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> return Collections . <RARE_TOKEN> ( new HashSet < LoggingBehavior > ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final void <RARE_TOKEN> ( LoggingBehavior <RARE_TOKEN> ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final void <RARE_TOKEN> ( LoggingBehavior <RARE_TOKEN> ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . remove ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final void <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final boolean <RARE_TOKEN> ( LoggingBehavior <RARE_TOKEN> ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> && <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . executor == null ) { </a> 0
<a> <RARE_TOKEN> executor = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( executor == null ) { </a> 0
<a> executor = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , TimeUnit . SECONDS , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . executor = executor ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . executor ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( <RARE_TOKEN> executor ) { </a> 0
<a> Validate . <RARE_TOKEN> ( executor , <RARE_TOKEN> ) ; </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . executor = executor ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . class . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> Object <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . get ( null ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( ! ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return ( <RARE_TOKEN> ) <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( final Context context , final String applicationId ) { </a> 0
<a> final Context <RARE_TOKEN> = context . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , applicationId ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static boolean <RARE_TOKEN> ( final Context context , final String applicationId ) { </a> 0
<a> try { </a> 0
<a> if ( applicationId == null ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( context . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = context . <RARE_TOKEN> ( <RARE_TOKEN> , Context . <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = applicationId + <RARE_TOKEN> ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> . getLong ( <RARE_TOKEN> , 0 ) ; </a> 0
<a> if ( <RARE_TOKEN> == 0 && <RARE_TOKEN> != null ) { </a> 0
<a> Bundle <RARE_TOKEN> = new Bundle ( ) ; </a> 0
<a> <RARE_TOKEN> . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( null , applicationId , null ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> GraphObject <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> Object <RARE_TOKEN> = <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ; </a> 1
<a> if ( ! ( <RARE_TOKEN> instanceof Boolean ) ) { </a> 0
<a> throw new JSONException ( String . format ( </a> 0
<a> <RARE_TOKEN> contains <RARE_TOKEN> <RARE_TOKEN> of a <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( ( Boolean ) <RARE_TOKEN> ) { </a> 1
<a> GraphObject <RARE_TOKEN> = GraphObject . Factory . create ( ) ; </a> 0
<a> <RARE_TOKEN> . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> String <RARE_TOKEN> = String . format ( <RARE_TOKEN> , applicationId ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( null , <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> return <RARE_TOKEN> != 0 ; </a> 1
<a> } catch ( Exception e ) { </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> , e . getMessage ( ) ) ; </a> 1
<a> } </a> 0
<a> return false ; </a> 1
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> String [ ] <RARE_TOKEN> = { <RARE_TOKEN> } ; </a> 0
<a> <RARE_TOKEN> c = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null , null , null ) ; </a> 1
<a> if ( c == null || ! c . <RARE_TOKEN> ( ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = c . getString ( c . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> c . close ( ) ; </a> 1
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends TokenCachingStrategy { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String TAG = <RARE_TOKEN> . class . getSimpleName ( ) ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> cache ; </a> 0
<a> public <RARE_TOKEN> ( Context context ) { </a> 0
<a> this ( context , null ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , String <RARE_TOKEN> ) { </a> 0
<a> Validate . <RARE_TOKEN> ( context , <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> Context <RARE_TOKEN> = context . <RARE_TOKEN> ( ) ; </a> 0
<a> context = <RARE_TOKEN> != null ? <RARE_TOKEN> : context ; </a> 0
<a> this . cache = context . <RARE_TOKEN> ( </a> 0
<a> this . <RARE_TOKEN> , </a> 0
<a> Context . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public Bundle <RARE_TOKEN> ( ) { </a> 0
<a> Bundle <RARE_TOKEN> = new Bundle ( ) ; </a> 0
<a> Map < String , ? > <RARE_TOKEN> = cache . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( String key : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( key , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , Log . <RARE_TOKEN> , TAG , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> value for <RARE_TOKEN> <RARE_TOKEN> + key + <RARE_TOKEN> -- " + e ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Bundle bundle ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> = cache . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( String key : bundle . <RARE_TOKEN> ( ) ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( key , bundle , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , Log . <RARE_TOKEN> , TAG , <RARE_TOKEN> <RARE_TOKEN> value for <RARE_TOKEN> <RARE_TOKEN> + key + <RARE_TOKEN> -- " + e ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , Log . <RARE_TOKEN> , TAG , <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void clear ( ) { </a> 0
<a> cache . <RARE_TOKEN> ( ) . clear ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String key , Bundle bundle , <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> ) </a> 0
<a> throws JSONException { </a> 0
<a> Object value = bundle . get ( key ) ; </a> 0
<a> if ( value == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> JSONArray jsonArray = null ; </a> 0
<a> JSONObject json = new JSONObject ( ) ; </a> 0
<a> if ( value instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> json . put ( <RARE_TOKEN> , ( ( <RARE_TOKEN> ) value ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else if ( value instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> json . put ( <RARE_TOKEN> , ( ( <RARE_TOKEN> ) value ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else if ( value instanceof Integer ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> json . put ( <RARE_TOKEN> , ( ( Integer ) value ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else if ( value instanceof Long ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> json . put ( <RARE_TOKEN> , ( ( Long ) value ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else if ( value instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> json . put ( <RARE_TOKEN> , ( ( <RARE_TOKEN> ) value ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else if ( value instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> json . put ( <RARE_TOKEN> , ( ( <RARE_TOKEN> ) value ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else if ( value instanceof Boolean ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> json . put ( <RARE_TOKEN> , ( ( Boolean ) value ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else if ( value instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> json . put ( <RARE_TOKEN> , value . toString ( ) ) ; </a> 0
<a> } else if ( value instanceof String ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> json . put ( <RARE_TOKEN> , ( String ) value ) ; </a> 0
<a> } else if ( value instanceof <RARE_TOKEN> < ? > ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> json . put ( <RARE_TOKEN> , value . toString ( ) ) ; </a> 0
<a> json . put ( <RARE_TOKEN> , value . getClass ( ) . getName ( ) ) ; </a> 0
<a> } else { </a> 0
<a> jsonArray = new JSONArray ( ) ; </a> 0
<a> if ( value instanceof byte [ ] ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( byte v : ( byte [ ] ) value ) { </a> 0
<a> jsonArray . put ( ( int ) v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof short [ ] ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( short v : ( short [ ] ) value ) { </a> 0
<a> jsonArray . put ( ( int ) v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof int [ ] ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( int v : ( int [ ] ) value ) { </a> 0
<a> jsonArray . put ( v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof long [ ] ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( long v : ( long [ ] ) value ) { </a> 0
<a> jsonArray . put ( v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof float [ ] ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( float v : ( float [ ] ) value ) { </a> 0
<a> jsonArray . put ( ( double ) v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof double [ ] ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( double v : ( double [ ] ) value ) { </a> 0
<a> jsonArray . put ( v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof boolean [ ] ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( boolean v : ( boolean [ ] ) value ) { </a> 0
<a> jsonArray . put ( v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof char [ ] ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( char v : ( char [ ] ) value ) { </a> 0
<a> jsonArray . put ( String . valueOf ( v ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof List < ? > ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> List < String > <RARE_TOKEN> = ( List < String > ) value ; </a> 0
<a> for ( String v : <RARE_TOKEN> ) { </a> 0
<a> jsonArray . put ( ( v == null ) ? JSONObject . <RARE_TOKEN> : v ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> jsonArray = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> json . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( jsonArray != null ) { </a> 0
<a> json . <RARE_TOKEN> ( <RARE_TOKEN> , jsonArray ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = json . toString ( ) ; </a> 0
<a> <RARE_TOKEN> . putString ( key , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String key , Bundle bundle ) </a> 0
<a> throws JSONException { </a> 0
<a> String <RARE_TOKEN> = cache . getString ( key , <RARE_TOKEN> ) ; </a> 0
<a> JSONObject json = new JSONObject ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = json . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , json . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONArray jsonArray = json . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> boolean [ ] array = new boolean [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = jsonArray . <RARE_TOKEN> ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , ( byte ) json . getInt ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONArray jsonArray = json . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> byte [ ] array = new byte [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = ( byte ) jsonArray . getInt ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , ( short ) json . getInt ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONArray jsonArray = json . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> short [ ] array = new short [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = ( short ) jsonArray . getInt ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , json . getInt ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONArray jsonArray = json . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int [ ] array = new int [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = jsonArray . getInt ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , json . getLong ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONArray jsonArray = json . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> long [ ] array = new long [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = jsonArray . getLong ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , ( float ) json . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONArray jsonArray = json . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> float [ ] array = new float [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = ( float ) jsonArray . <RARE_TOKEN> ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , json . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONArray jsonArray = json . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> double [ ] array = new double [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = jsonArray . <RARE_TOKEN> ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> String <RARE_TOKEN> = json . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . length ( ) == 1 ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , <RARE_TOKEN> . charAt ( 0 ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONArray jsonArray = json . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> char [ ] array = new char [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> String <RARE_TOKEN> = jsonArray . getString ( i ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . length ( ) == 1 ) { </a> 0
<a> array [ i ] = <RARE_TOKEN> . charAt ( 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> bundle . putString ( key , json . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONArray jsonArray = json . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = jsonArray . length ( ) ; </a> 0
<a> ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( <RARE_TOKEN> ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> Object <RARE_TOKEN> = jsonArray . get ( i ) ; </a> 0
<a> <RARE_TOKEN> . add ( i , <RARE_TOKEN> == JSONObject . <RARE_TOKEN> ? null : ( String ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> try { </a> 0
<a> String <RARE_TOKEN> = json . getString ( <RARE_TOKEN> ) ; </a> 0
<a> @ SuppressWarnings ( { "unchecked" , <RARE_TOKEN> } ) </a> 0
<a> Class < ? extends <RARE_TOKEN> > <RARE_TOKEN> = ( Class < ? extends <RARE_TOKEN> > ) Class . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> <RARE_TOKEN> < ? > <RARE_TOKEN> = <RARE_TOKEN> . valueOf ( <RARE_TOKEN> , json . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( key , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } catch ( IllegalArgumentException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public abstract class TokenCachingStrategy { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final long <RARE_TOKEN> = Long . <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public abstract Bundle <RARE_TOKEN> ( ) ; </a> 0
<a> public abstract void <RARE_TOKEN> ( Bundle bundle ) ; </a> 0
<a> public abstract void clear ( ) ; </a> 0
<a> public static boolean <RARE_TOKEN> ( Bundle bundle ) { </a> 0
<a> if ( bundle == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> String token = bundle . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( ( token == null ) || ( token . length ( ) == 0 ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> long <RARE_TOKEN> = bundle . getLong ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public static String getToken ( Bundle bundle ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> return bundle . getString ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( Bundle bundle , String value ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> Validate . <RARE_TOKEN> ( value , <RARE_TOKEN> ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> , value ) ; </a> 0
<a> } </a> 0
<a> public static Date <RARE_TOKEN> ( Bundle bundle ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( Bundle bundle , Date value ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> Validate . <RARE_TOKEN> ( value , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( bundle , <RARE_TOKEN> , value ) ; </a> 0
<a> } </a> 0
<a> public static long <RARE_TOKEN> ( Bundle bundle ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> return bundle . getLong ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( Bundle bundle , long value ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> , value ) ; </a> 0
<a> } </a> 0
<a> public static List < String > getPermissions ( Bundle bundle ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> return bundle . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( Bundle bundle , List < String > value ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> Validate . <RARE_TOKEN> ( value , <RARE_TOKEN> ) ; </a> 0
<a> ArrayList < String > <RARE_TOKEN> ; </a> 0
<a> if ( value instanceof ArrayList < ? > ) { </a> 0
<a> <RARE_TOKEN> = ( ArrayList < String > ) value ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = new ArrayList < String > ( value ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static AccessTokenSource <RARE_TOKEN> ( Bundle bundle ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> if ( bundle . containsKey ( TokenCachingStrategy . <RARE_TOKEN> ) ) { </a> 0
<a> return ( AccessTokenSource ) bundle . <RARE_TOKEN> ( TokenCachingStrategy . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> boolean <RARE_TOKEN> = bundle . <RARE_TOKEN> ( TokenCachingStrategy . <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ? AccessTokenSource . <RARE_TOKEN> : AccessTokenSource . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( Bundle bundle , AccessTokenSource value ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> , value ) ; </a> 0
<a> } </a> 0
<a> public static Date <RARE_TOKEN> ( Bundle bundle ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( Bundle bundle , Date value ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> Validate . <RARE_TOKEN> ( value , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( bundle , <RARE_TOKEN> , value ) ; </a> 0
<a> } </a> 0
<a> public static long <RARE_TOKEN> ( Bundle bundle ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> return bundle . getLong ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( Bundle bundle , long value ) { </a> 0
<a> Validate . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> , value ) ; </a> 0
<a> } </a> 0
<a> static Date <RARE_TOKEN> ( Bundle bundle , String key ) { </a> 0
<a> if ( bundle == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> long n = bundle . getLong ( key , <RARE_TOKEN> ) ; </a> 0
<a> if ( n == <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return new Date ( n ) ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( Bundle bundle , String key , Date <RARE_TOKEN> ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , <RARE_TOKEN> . getTime ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . content . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ; </a> 0
<a> private final Activity activity ; </a> 0
<a> private final Session . StatusCallback callback ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Activity activity , Session . StatusCallback callback ) { </a> 0
<a> if ( activity == null ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . activity = activity ; </a> 0
<a> this . callback = callback ; </a> 0
<a> this . <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( activity ) ; </a> 0
<a> } </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session == null ) { </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> session = Session . <RARE_TOKEN> ( activity , null , callback , savedInstanceState ) ; </a> 0
<a> } </a> 0
<a> if ( session == null ) { </a> 0
<a> session = new Session ( activity ) ; </a> 0
<a> } </a> 0
<a> Session . <RARE_TOKEN> ( session ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> filter = new <RARE_TOKEN> ( ) ; </a> 1
<a> filter . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 1
<a> filter . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , filter ) ; </a> 1
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> if ( callback != null ) { </a> 0
<a> session . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> if ( SessionState . <RARE_TOKEN> . equals ( session . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> session . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> session . onActivityResult ( activity , requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> Session . <RARE_TOKEN> ( Session . getActiveSession ( ) , outState ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( callback != null ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> session . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Context context , Intent intent ) { </a> 0
<a> if ( Session . <RARE_TOKEN> . equals ( intent . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && callback != null ) { </a> 0
<a> session . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> } else if ( Session . <RARE_TOKEN> . equals ( intent . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && callback != null ) { </a> 0
<a> session . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> public class <RARE_TOKEN> extends Throwable { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> public <RARE_TOKEN> ( String message , int errorCode , String <RARE_TOKEN> ) { </a> 0
<a> super ( message ) ; </a> 0
<a> <RARE_TOKEN> = errorCode ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . <RARE_TOKEN> ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . * ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . net . <RARE_TOKEN> ; </a> 0
<a> import android . os . * ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . Session . StatusCallback ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Deprecated </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final int <RARE_TOKEN> = - 1 ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> protected static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> protected static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> protected static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final Object lock = new Object ( ) ; </a> 0
<a> private String accessToken = null ; </a> 0
<a> private long <RARE_TOKEN> = 0 ; </a> 0
<a> private long <RARE_TOKEN> = 0 ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private Activity <RARE_TOKEN> ; </a> 0
<a> private String [ ] <RARE_TOKEN> ; </a> 0
<a> private Session <RARE_TOKEN> ; </a> 0
<a> private volatile Session session ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private volatile Session <RARE_TOKEN> ; </a> 0
<a> final private long <RARE_TOKEN> = <RARE_TOKEN> * <RARE_TOKEN> * <RARE_TOKEN> * <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> public <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> must <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ID <RARE_TOKEN> <RARE_TOKEN> " </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> for <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void <RARE_TOKEN> ( Activity activity , final <RARE_TOKEN> listener ) { </a> 0
<a> <RARE_TOKEN> ( activity , new String [ ] { } , <RARE_TOKEN> , SessionLoginBehavior . <RARE_TOKEN> , </a> 0
<a> listener ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void <RARE_TOKEN> ( Activity activity , String [ ] permissions , final <RARE_TOKEN> listener ) { </a> 0
<a> <RARE_TOKEN> ( activity , permissions , <RARE_TOKEN> , SessionLoginBehavior . <RARE_TOKEN> , listener ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void <RARE_TOKEN> ( Activity activity , String [ ] permissions , int <RARE_TOKEN> , final <RARE_TOKEN> listener ) { </a> 0
<a> SessionLoginBehavior <RARE_TOKEN> = ( <RARE_TOKEN> >= 0 ) ? SessionLoginBehavior . <RARE_TOKEN> </a> 0
<a> : SessionLoginBehavior . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( activity , permissions , <RARE_TOKEN> , <RARE_TOKEN> , listener ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Activity activity , String [ ] permissions , int <RARE_TOKEN> , </a> 0
<a> SessionLoginBehavior <RARE_TOKEN> , final <RARE_TOKEN> listener ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new Session . Builder ( activity ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) . </a> 0
<a> build ( ) ; </a> 0
<a> <RARE_TOKEN> = activity ; </a> 0
<a> <RARE_TOKEN> = ( permissions != null ) ? permissions : new String [ 0 ] ; </a> 0
<a> StatusCallback callback = new StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session <RARE_TOKEN> , SessionState state , Exception exception ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , state , exception , listener ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Session . OpenRequest openRequest = new Session . OpenRequest ( activity ) . </a> 0
<a> setCallback ( callback ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) . </a> 0
<a> <RARE_TOKEN> ( Arrays . asList ( permissions ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , openRequest , <RARE_TOKEN> . length > 0 ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Session session , Session . OpenRequest openRequest , boolean <RARE_TOKEN> ) { </a> 0
<a> openRequest . <RARE_TOKEN> ( true ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> session . <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> } else { </a> 0
<a> session . <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private void <RARE_TOKEN> ( Session <RARE_TOKEN> , SessionState state , Exception exception , </a> 0
<a> <RARE_TOKEN> listener ) { </a> 0
<a> Bundle extras = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( state == SessionState . <RARE_TOKEN> ) { </a> 0
<a> Session <RARE_TOKEN> = null ; </a> 0
<a> synchronized ( <RARE_TOKEN> . this . lock ) { </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> . this . session ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . this . session ; </a> 0
<a> <RARE_TOKEN> . this . session = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> listener . <RARE_TOKEN> ( extras ) ; </a> 0
<a> } else if ( exception != null ) { </a> 0
<a> if ( exception instanceof <RARE_TOKEN> ) { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( ( exception instanceof <RARE_TOKEN> ) && ( extras != null ) </a> 0
<a> && extras . containsKey ( Session . <RARE_TOKEN> ) </a> 0
<a> && extras . containsKey ( Session . <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> error = new <RARE_TOKEN> ( exception . getMessage ( ) , </a> 0
<a> extras . getInt ( Session . <RARE_TOKEN> ) , </a> 0
<a> extras . getString ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> listener . onError ( error ) ; </a> 0
<a> } else { </a> 0
<a> FacebookError error = new FacebookError ( exception . getMessage ( ) ) ; </a> 0
<a> listener . <RARE_TOKEN> ( error ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( Context context , Intent intent ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = context . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( intent , 0 ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( context , <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( Context context , String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = context . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void <RARE_TOKEN> ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Session <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( <RARE_TOKEN> . onActivityResult ( this . <RARE_TOKEN> , requestCode , resultCode , data ) ) { </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean <RARE_TOKEN> ( Context context , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( context , intent ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return context . <RARE_TOKEN> ( intent , new <RARE_TOKEN> ( context , <RARE_TOKEN> ) , </a> 0
<a> Context . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean <RARE_TOKEN> ( Context context , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> return <RARE_TOKEN> ( context , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ( ) </a> 0
<a> && ( System . currentTimeMillis ( ) - <RARE_TOKEN> >= <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . this , this ) ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> final Context <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> public <RARE_TOKEN> ( Context <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> service ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( service ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . onError ( new Error ( <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . this ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle <RARE_TOKEN> = new Bundle ( ) ; </a> 0
<a> <RARE_TOKEN> . putString ( <RARE_TOKEN> , accessToken ) ; </a> 0
<a> <RARE_TOKEN> request = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> request . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> <RARE_TOKEN> . onError ( new Error ( <RARE_TOKEN> connection <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> extends Handler { </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> facebook , <RARE_TOKEN> connection ) { </a> 0
<a> super ( ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> < <RARE_TOKEN> > ( facebook ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> < <RARE_TOKEN> > ( connection ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> msg ) { </a> 0
<a> <RARE_TOKEN> facebook = <RARE_TOKEN> . get ( ) ; </a> 0
<a> <RARE_TOKEN> connection = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( facebook == null || connection == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String token = msg . getData ( ) . getString ( <RARE_TOKEN> ) ; </a> 0
<a> long <RARE_TOKEN> = msg . getData ( ) . getLong ( <RARE_TOKEN> ) * <RARE_TOKEN> ; </a> 0
<a> if ( token != null ) { </a> 0
<a> facebook . <RARE_TOKEN> ( token ) ; </a> 0
<a> facebook . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Session <RARE_TOKEN> = facebook . session ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , msg . getData ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( connection . <RARE_TOKEN> != null ) { </a> 0
<a> Bundle <RARE_TOKEN> = ( Bundle ) msg . getData ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> connection . <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else if ( connection . <RARE_TOKEN> != null ) { </a> 0
<a> String error = msg . getData ( ) . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( msg . getData ( ) . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> int errorCode = msg . getData ( ) . getInt ( <RARE_TOKEN> ) ; </a> 0
<a> connection . <RARE_TOKEN> . <RARE_TOKEN> ( new FacebookError ( error , null , errorCode ) ) ; </a> 0
<a> } else { </a> 0
<a> connection . <RARE_TOKEN> . onError ( new Error ( error != null ? error : <RARE_TOKEN> service <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( connection != null ) { </a> 0
<a> connection . <RARE_TOKEN> . <RARE_TOKEN> ( connection ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String <RARE_TOKEN> ( Context context ) throws <RARE_TOKEN> , IOException { </a> 0
<a> return <RARE_TOKEN> ( context ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ( Context context ) throws <RARE_TOKEN> , IOException { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Bundle b = new Bundle ( ) ; </a> 0
<a> b . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String response = request ( b ) ; </a> 0
<a> long currentTimeMillis = System . currentTimeMillis ( ) ; </a> 0
<a> Session <RARE_TOKEN> = null ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> <RARE_TOKEN> = session ; </a> 0
<a> session = null ; </a> 0
<a> accessToken = null ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = currentTimeMillis ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return response ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String request ( Bundle parameters ) throws <RARE_TOKEN> , IOException { </a> 0
<a> if ( ! parameters . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> method must be <RARE_TOKEN> " </a> 0
<a> + <RARE_TOKEN> must <RARE_TOKEN> key <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> + " <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( null , parameters , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String request ( String graphPath ) throws <RARE_TOKEN> , IOException { </a> 0
<a> return <RARE_TOKEN> ( graphPath , new Bundle ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String request ( String graphPath , Bundle parameters ) throws <RARE_TOKEN> , IOException { </a> 0
<a> return <RARE_TOKEN> ( graphPath , parameters , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String request ( String graphPath , Bundle params , String <RARE_TOKEN> ) throws <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , IOException { </a> 0
<a> return <RARE_TOKEN> ( graphPath , params , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> String <RARE_TOKEN> ( String graphPath , Bundle params , String <RARE_TOKEN> ) throws <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , IOException { </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> String url = ( graphPath != null ) ? <RARE_TOKEN> + graphPath : <RARE_TOKEN> ; </a> 0
<a> return Util . <RARE_TOKEN> ( url , <RARE_TOKEN> , params ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void dialog ( Context context , String action , <RARE_TOKEN> listener ) { </a> 0
<a> dialog ( context , action , new Bundle ( ) , listener ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void dialog ( Context context , String action , Bundle parameters , final <RARE_TOKEN> listener ) { </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( action . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( context . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) != <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> Util . <RARE_TOKEN> ( context , <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> the <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> new <RARE_TOKEN> ( context , action , parameters , listener ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( <RARE_TOKEN> ( ) != null ) </a> 0
<a> && ( ( <RARE_TOKEN> ( ) == 0 ) || ( System . currentTimeMillis ( ) < <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void <RARE_TOKEN> ( Session session ) { </a> 0
<a> if ( session == null ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> this . <RARE_TOKEN> = session ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public final Session getSession ( ) { </a> 0
<a> while ( true ) { </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> Session <RARE_TOKEN> = null ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( ( session != null ) || ! <RARE_TOKEN> ) { </a> 0
<a> return session ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = accessToken ; </a> 0
<a> <RARE_TOKEN> = session ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> List < String > permissions ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> permissions = <RARE_TOKEN> . getPermissions ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> != null ) { </a> 0
<a> permissions = Arrays . asList ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> permissions = Collections . < String > <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> Session <RARE_TOKEN> = new Session . Builder ( <RARE_TOKEN> ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) . </a> 0
<a> build ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) != SessionState . <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> Session . OpenRequest openRequest = </a> 0
<a> new Session . OpenRequest ( <RARE_TOKEN> ) . <RARE_TOKEN> ( permissions ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , openRequest , ! permissions . isEmpty ( ) ) ; </a> 0
<a> Session <RARE_TOKEN> = null ; </a> 0
<a> Session <RARE_TOKEN> = null ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( <RARE_TOKEN> || ( session == null ) ) { </a> 0
<a> <RARE_TOKEN> = session ; </a> 0
<a> <RARE_TOKEN> = session = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> Session s = getSession ( ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> return s . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> Session s = getSession ( ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> return s . <RARE_TOKEN> ( ) . getTime ( ) ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void <RARE_TOKEN> ( String accessToken , long <RARE_TOKEN> , long <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> this . accessToken = accessToken ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void <RARE_TOKEN> ( String token ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> accessToken = token ; </a> 0
<a> <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void <RARE_TOKEN> ( long <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ? 0 : System . currentTimeMillis ( ) </a> 0
<a> + Long . <RARE_TOKEN> ( <RARE_TOKEN> ) * <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private TokenCachingStrategy <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> private static String [ ] <RARE_TOKEN> ( List < String > list ) { </a> 1
<a> String [ ] array = new String [ list . size ( ) ] ; </a> 1
<a> if ( list != null ) { </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = list . get ( i ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return array ; </a> 0
<a> } </a> 0
<a> private static List < String > <RARE_TOKEN> ( String [ ] array ) { </a> 0
<a> if ( array != null ) { </a> 0
<a> return Arrays . asList ( array ) ; </a> 0
<a> } else { </a> 0
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends TokenCachingStrategy { </a> 0
<a> @ Override </a> 0
<a> public Bundle <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> if ( accessToken != null ) { </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , accessToken ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return bundle ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle bundle ) { </a> 0
<a> accessToken = TokenCachingStrategy . getToken ( bundle ) ; </a> 0
<a> <RARE_TOKEN> = TokenCachingStrategy . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( TokenCachingStrategy . getPermissions ( bundle ) ) ; </a> 0
<a> <RARE_TOKEN> = TokenCachingStrategy . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> accessToken = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static String <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void <RARE_TOKEN> ( boolean value ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( value ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean <RARE_TOKEN> ( final Context context ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( context , <RARE_TOKEN> ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> public static interface <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( Bundle values ) ; </a> 0
<a> public void <RARE_TOKEN> ( FacebookError e ) ; </a> 0
<a> public void onError ( <RARE_TOKEN> e ) ; </a> 0
<a> public void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static interface <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( Bundle values ) ; </a> 0
<a> public void <RARE_TOKEN> ( FacebookError e ) ; </a> 0
<a> public void onError ( Error e ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> </a> 0
<a> + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> public class FacebookError extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> = 0 ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> public FacebookError ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public FacebookError ( String message , String type , int code ) { </a> 0
<a> super ( message ) ; </a> 0
<a> <RARE_TOKEN> = type ; </a> 0
<a> <RARE_TOKEN> = code ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . widget . <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Context context , String url , <RARE_TOKEN> listener ) { </a> 0
<a> this ( context , url , listener , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , String url , <RARE_TOKEN> listener , int <RARE_TOKEN> ) { </a> 0
<a> super ( context , url , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( listener ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , String action , Bundle parameters , <RARE_TOKEN> listener ) { </a> 0
<a> super ( context , action , parameters , <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( listener ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , String action , Bundle parameters , <RARE_TOKEN> listener , </a> 0
<a> int <RARE_TOKEN> ) { </a> 0
<a> super ( context , action , parameters , <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( listener ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> this . <RARE_TOKEN> = listener ; </a> 0
<a> <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle values , FacebookException error ) { </a> 0
<a> <RARE_TOKEN> ( values , error ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Bundle values , FacebookException error ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( values != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( values ) ; </a> 0
<a> } else { </a> 0
<a> if ( error instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) error ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> . getMessage ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . onError ( <RARE_TOKEN> ) ; </a> 0
<a> } else if ( error instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> FacebookError <RARE_TOKEN> = new FacebookError ( error . getMessage ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . <RARE_TOKEN> . Builder ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . net . * ; </a> 0
<a> public final class Util { </a> 0
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ Deprecated </a> 0
<a> public static String <RARE_TOKEN> ( Bundle parameters , String <RARE_TOKEN> ) { </a> 0
<a> if ( parameters == null ) return "" ; </a> 0
<a> StringBuilder sb = new StringBuilder ( ) ; </a> 0
<a> for ( String key : parameters . <RARE_TOKEN> ( ) ) { </a> 0
<a> Object <RARE_TOKEN> = parameters . get ( key ) ; </a> 0
<a> if ( ! ( <RARE_TOKEN> instanceof String ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> sb . append ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + key + </a> 0
<a> <RARE_TOKEN> + ( String ) <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return sb . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static String <RARE_TOKEN> ( Bundle parameters ) { </a> 0
<a> if ( parameters == null ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> StringBuilder sb = new StringBuilder ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = true ; </a> 0
<a> for ( String key : parameters . <RARE_TOKEN> ( ) ) { </a> 0
<a> Object <RARE_TOKEN> = parameters . get ( key ) ; </a> 0
<a> if ( ! ( <RARE_TOKEN> instanceof String ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) <RARE_TOKEN> = false ; else sb . append ( <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( <RARE_TOKEN> . encode ( key ) + <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> . encode ( parameters . getString ( key ) ) ) ; </a> 0
<a> } </a> 0
<a> return sb . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static Bundle <RARE_TOKEN> ( String s ) { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> String array [ ] = s . split ( <RARE_TOKEN> ) ; </a> 0
<a> for ( String <RARE_TOKEN> : array ) { </a> 0
<a> String v [ ] = <RARE_TOKEN> . split ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> if ( v . length == 2 ) { </a> 0
<a> params . putString ( <RARE_TOKEN> . decode ( v [ 0 ] , <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> . decode ( v [ 1 ] , <RARE_TOKEN> ) ) ; </a> 0
<a> } else if ( v . length == 1 ) { </a> 0
<a> params . putString ( <RARE_TOKEN> . decode ( v [ 0 ] , <RARE_TOKEN> ) , "" ) ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return params ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static Bundle <RARE_TOKEN> ( String url ) { </a> 0
<a> url = url . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> URL <RARE_TOKEN> = new URL ( url ) ; </a> 0
<a> Bundle b = <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> b . <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> return b ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> return new Bundle ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static String <RARE_TOKEN> ( String url , String method , Bundle params ) </a> 0
<a> throws <RARE_TOKEN> , IOException { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> OutputStream os ; </a> 0
<a> if ( method . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> url = url + <RARE_TOKEN> + <RARE_TOKEN> ( params ) ; </a> 0
<a> } </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> , method + " <RARE_TOKEN> " + url ) ; </a> 0
<a> HttpURLConnection <RARE_TOKEN> = </a> 0
<a> ( HttpURLConnection ) new URL ( url ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , System . <RARE_TOKEN> ( ) . </a> 0
<a> getProperty ( <RARE_TOKEN> ) + " <RARE_TOKEN> ) ; </a> 0
<a> if ( ! method . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> Bundle <RARE_TOKEN> = new Bundle ( ) ; </a> 0
<a> for ( String key : params . <RARE_TOKEN> ( ) ) { </a> 0
<a> Object <RARE_TOKEN> = params . get ( key ) ; </a> 0
<a> if ( <RARE_TOKEN> instanceof byte [ ] ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( key , ( byte [ ] ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! params . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> params . putString ( <RARE_TOKEN> , method ) ; </a> 0
<a> } </a> 0
<a> if ( params . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . decode ( params . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . connect ( ) ; </a> 0
<a> os = new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> os . write ( ( <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) . getBytes ( ) ) ; </a> 0
<a> os . write ( ( <RARE_TOKEN> ( params , <RARE_TOKEN> ) ) . getBytes ( ) ) ; </a> 0
<a> os . write ( ( <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) . getBytes ( ) ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> for ( String key : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> os . write ( ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + key + <RARE_TOKEN> + <RARE_TOKEN> ) . getBytes ( ) ) ; </a> 0
<a> os . write ( ( <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) . getBytes ( ) ) ; </a> 0
<a> os . write ( <RARE_TOKEN> . <RARE_TOKEN> ( key ) ) ; </a> 0
<a> os . write ( ( <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) . getBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> os . flush ( ) ; </a> 0
<a> } </a> 0
<a> String response = "" ; </a> 0
<a> try { </a> 0
<a> response = read ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> response = read ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> return response ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> private static String read ( InputStream in ) throws IOException { </a> 0
<a> StringBuilder sb = new StringBuilder ( ) ; </a> 0
<a> <RARE_TOKEN> r = new <RARE_TOKEN> ( new <RARE_TOKEN> ( in ) , 1000 ) ; </a> 0
<a> for ( String <RARE_TOKEN> = r . <RARE_TOKEN> ( ) ; <RARE_TOKEN> != null ; <RARE_TOKEN> = r . <RARE_TOKEN> ( ) ) { </a> 0
<a> sb . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> in . close ( ) ; </a> 0
<a> return sb . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static JSONObject <RARE_TOKEN> ( String response ) </a> 0
<a> throws JSONException , FacebookError { </a> 0
<a> if ( response . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new FacebookError ( <RARE_TOKEN> failed" ) ; </a> 0
<a> } </a> 0
<a> if ( response . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> response = <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> JSONObject json = new JSONObject ( response ) ; </a> 0
<a> if ( json . has ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONObject error = json . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> throw new FacebookError ( </a> 0
<a> error . getString ( "message" ) , error . getString ( <RARE_TOKEN> ) , 0 ) ; </a> 0
<a> } </a> 0
<a> if ( json . has ( <RARE_TOKEN> ) && json . has ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new FacebookError ( json . getString ( <RARE_TOKEN> ) , "" , </a> 0
<a> Integer . parseInt ( json . getString ( <RARE_TOKEN> ) ) ) ; </a> 0
<a> } </a> 0
<a> if ( json . has ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new FacebookError ( <RARE_TOKEN> failed" , "" , </a> 0
<a> Integer . parseInt ( json . getString ( <RARE_TOKEN> ) ) ) ; </a> 0
<a> } </a> 0
<a> if ( json . has ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new FacebookError ( json . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( json . has ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new FacebookError ( json . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> return json ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( Context context , String <RARE_TOKEN> , String text ) { </a> 0
<a> Builder <RARE_TOKEN> = new Builder ( context ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( text ) ; </a> 0
<a> <RARE_TOKEN> . create ( ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import com . facebook . Request ; </a> 0
<a> import com . facebook . RequestBatch ; </a> 0
<a> public class <RARE_TOKEN> extends RequestBatch { </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Request ... requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> public final String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . LoggingBehavior ; </a> 0
<a> import com . facebook . <RARE_TOKEN> ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import org . json . <RARE_TOKEN> ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . atomic . <RARE_TOKEN> ; </a> 0
<a> public final class FileLruCache { </a> 0
<a> static final String TAG = FileLruCache . class . getSimpleName ( ) ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final File <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private final Object lock ; </a> 0
<a> public FileLruCache ( Context context , String <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = new File ( context . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> this . lock = new Object ( ) ; </a> 0
<a> this . <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> for ( File file : this . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> file . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> long <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( lock ) { </a> 0
<a> while ( <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> lock . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> File [ ] <RARE_TOKEN> = this . <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> long <RARE_TOKEN> = 0 ; </a> 0
<a> for ( File file : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> += file . length ( ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public InputStream get ( String key ) throws IOException { </a> 0
<a> return get ( key , null ) ; </a> 0
<a> } </a> 0
<a> public InputStream get ( String key , String <RARE_TOKEN> ) throws IOException { </a> 0
<a> File file = new File ( this . <RARE_TOKEN> , Utility . <RARE_TOKEN> ( key ) ) ; </a> 0
<a> <RARE_TOKEN> input = null ; </a> 0
<a> try { </a> 0
<a> input = new <RARE_TOKEN> ( file ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( input , Utility . <RARE_TOKEN> ) ; </a> 0
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> JSONObject header = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( header == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = header . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( ( <RARE_TOKEN> == null ) || ! <RARE_TOKEN> . equals ( key ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = header . <RARE_TOKEN> ( <RARE_TOKEN> , null ) ; </a> 0
<a> if ( ( <RARE_TOKEN> == null && <RARE_TOKEN> != null ) || </a> 0
<a> ( <RARE_TOKEN> != null && ! <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> long <RARE_TOKEN> = new Date ( ) . getTime ( ) ; </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , TAG , <RARE_TOKEN> <RARE_TOKEN> to " + Long . valueOf ( <RARE_TOKEN> ) + " for " </a> 0
<a> + file . getName ( ) ) ; </a> 0
<a> file . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> success = true ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } finally { </a> 0
<a> if ( ! success ) { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> OutputStream <RARE_TOKEN> ( final String key ) throws IOException { </a> 0
<a> return <RARE_TOKEN> ( key , null ) ; </a> 0
<a> } </a> 0
<a> public OutputStream <RARE_TOKEN> ( final String key , String <RARE_TOKEN> ) throws IOException { </a> 0
<a> final File buffer = <RARE_TOKEN> . <RARE_TOKEN> ( this . <RARE_TOKEN> ) ; </a> 0
<a> buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! buffer . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new IOException ( <RARE_TOKEN> not create file <RARE_TOKEN> " + buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> file = null ; </a> 0
<a> try { </a> 0
<a> file = new <RARE_TOKEN> ( buffer ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , Log . <RARE_TOKEN> , TAG , <RARE_TOKEN> <RARE_TOKEN> buffer output <RARE_TOKEN> " + e ) ; </a> 0
<a> throw new IOException ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( key , buffer ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( file , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , Utility . <RARE_TOKEN> ) ; </a> 0
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> JSONObject header = new JSONObject ( ) ; </a> 0
<a> header . put ( <RARE_TOKEN> , key ) ; </a> 0
<a> if ( ! Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> header . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , header ) ; </a> 0
<a> success = true ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , Log . <RARE_TOKEN> , TAG , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> header for cache <RARE_TOKEN> " + e ) ; </a> 0
<a> throw new IOException ( e . getMessage ( ) ) ; </a> 0
<a> } finally { </a> 0
<a> if ( ! success ) { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String key , File buffer ) { </a> 0
<a> final File <RARE_TOKEN> = new File ( <RARE_TOKEN> , Utility . <RARE_TOKEN> ( key ) ) ; </a> 0
<a> if ( ! buffer . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public InputStream <RARE_TOKEN> ( String key , InputStream input ) throws IOException { </a> 0
<a> OutputStream output = <RARE_TOKEN> ( key ) ; </a> 0
<a> return new <RARE_TOKEN> ( input , output ) ; </a> 0
<a> } </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> + " <RARE_TOKEN> + this . <RARE_TOKEN> + " <RARE_TOKEN> + this . <RARE_TOKEN> . getName ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( lock ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , TAG , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 0
<a> long size = 0 ; </a> 0
<a> long count = 0 ; </a> 0
<a> for ( File file : this . <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( file ) ; </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , TAG , " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + Long . valueOf ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) </a> 0
<a> + " <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) . getName ( ) ) ; </a> 0
<a> size += file . length ( ) ; </a> 0
<a> count ++ ; </a> 0
<a> } </a> 0
<a> while ( ( size > <RARE_TOKEN> . <RARE_TOKEN> ( ) ) || ( count > <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> File file = <RARE_TOKEN> . remove ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , TAG , " <RARE_TOKEN> <RARE_TOKEN> " + file . getName ( ) ) ; </a> 0
<a> size -= file . length ( ) ; </a> 0
<a> count -- ; </a> 0
<a> file . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> synchronized ( lock ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> lock . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( File <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> return ! <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( File <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> static void <RARE_TOKEN> ( final File <RARE_TOKEN> ) { </a> 0
<a> for ( File file : <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ) { </a> 0
<a> file . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static File <RARE_TOKEN> ( final File <RARE_TOKEN> ) { </a> 0
<a> String name = <RARE_TOKEN> + Long . valueOf ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) . toString ( ) ; </a> 0
<a> return new File ( <RARE_TOKEN> , name ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static final class <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> static void <RARE_TOKEN> ( OutputStream stream , JSONObject header ) throws IOException { </a> 0
<a> String <RARE_TOKEN> = header . toString ( ) ; </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . getBytes ( ) ; </a> 0
<a> stream . write ( <RARE_TOKEN> ) ; </a> 0
<a> stream . write ( ( <RARE_TOKEN> . length > > 16 ) & 0xff ) ; </a> 0
<a> stream . write ( ( <RARE_TOKEN> . length > > 8 ) & 0xff ) ; </a> 0
<a> stream . write ( ( <RARE_TOKEN> . length > > 0 ) & 0xff ) ; </a> 0
<a> stream . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> static JSONObject <RARE_TOKEN> ( InputStream stream ) throws IOException { </a> 0
<a> int version = stream . read ( ) ; </a> 0
<a> if ( version != <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( int i = 0 ; i < 3 ; i ++ ) { </a> 0
<a> int b = stream . read ( ) ; </a> 0
<a> if ( b == - 1 ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , TAG , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> while <RARE_TOKEN> header <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> 8 ; </a> 0
<a> <RARE_TOKEN> += b & 0xff ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> int count = 0 ; </a> 0
<a> while ( count < <RARE_TOKEN> . length ) { </a> 0
<a> int <RARE_TOKEN> = stream . read ( <RARE_TOKEN> , count , <RARE_TOKEN> . length - count ) ; </a> 0
<a> if ( <RARE_TOKEN> < 1 ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , TAG , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + Integer . valueOf ( count ) + " <RARE_TOKEN> expected " </a> 0
<a> + <RARE_TOKEN> . length ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> count += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = new String ( <RARE_TOKEN> ) ; </a> 0
<a> JSONObject header = null ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Object <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! ( <RARE_TOKEN> instanceof JSONObject ) ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , TAG , <RARE_TOKEN> expected <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> . getClass ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> header = ( JSONObject ) <RARE_TOKEN> ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> throw new IOException ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> return header ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> extends OutputStream { </a> 0
<a> final OutputStream <RARE_TOKEN> ; </a> 0
<a> final <RARE_TOKEN> callback ; </a> 0
<a> <RARE_TOKEN> ( OutputStream <RARE_TOKEN> , <RARE_TOKEN> callback ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . callback = callback ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> try { </a> 0
<a> this . <RARE_TOKEN> . close ( ) ; </a> 0
<a> } finally { </a> 0
<a> this . callback . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ) throws IOException { </a> 0
<a> this . <RARE_TOKEN> . flush ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] buffer , int offset , int count ) throws IOException { </a> 0
<a> this . <RARE_TOKEN> . write ( buffer , offset , count ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] buffer ) throws IOException { </a> 0
<a> this . <RARE_TOKEN> . write ( buffer ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( int <RARE_TOKEN> ) throws IOException { </a> 0
<a> this . <RARE_TOKEN> . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static final class <RARE_TOKEN> extends InputStream { </a> 0
<a> final InputStream input ; </a> 0
<a> final OutputStream output ; </a> 0
<a> <RARE_TOKEN> ( final InputStream input , final OutputStream output ) { </a> 0
<a> this . input = input ; </a> 0
<a> this . output = output ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return input . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> try { </a> 0
<a> this . input . close ( ) ; </a> 0
<a> } finally { </a> 0
<a> this . output . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( byte [ ] buffer ) throws IOException { </a> 0
<a> int count = input . read ( buffer ) ; </a> 0
<a> if ( count > 0 ) { </a> 0
<a> output . write ( buffer , 0 , count ) ; </a> 0
<a> } </a> 0
<a> return count ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( ) throws IOException { </a> 0
<a> int b = input . read ( ) ; </a> 0
<a> if ( b >= 0 ) { </a> 0
<a> output . write ( b ) ; </a> 0
<a> } </a> 0
<a> return b ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( byte [ ] buffer , int offset , int length ) throws IOException { </a> 0
<a> int count = input . read ( buffer , offset , length ) ; </a> 0
<a> if ( count > 0 ) { </a> 0
<a> output . write ( buffer , offset , count ) ; </a> 0
<a> } </a> 0
<a> return count ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized void <RARE_TOKEN> ( ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( long <RARE_TOKEN> ) throws IOException { </a> 0
<a> byte [ ] buffer = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> long <RARE_TOKEN> = 0 ; </a> 0
<a> while ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> int count = read ( buffer , 0 , ( int ) Math . min ( <RARE_TOKEN> - <RARE_TOKEN> , buffer . length ) ) ; </a> 0
<a> if ( count < 0 ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += count ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final class <RARE_TOKEN> { </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> * <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( int n ) { </a> 0
<a> if ( n < 0 ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> limit must be >= <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = n ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( int n ) { </a> 0
<a> if ( n < 0 ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> file count limit must be >= <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = n ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final static class <RARE_TOKEN> implements <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> private final File file ; </a> 0
<a> private final long <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( File file ) { </a> 0
<a> this . file = file ; </a> 0
<a> this . <RARE_TOKEN> = file . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> File <RARE_TOKEN> ( ) { </a> 0
<a> return file ; </a> 0
<a> } </a> 0
<a> long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) < <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> return - 1 ; </a> 0
<a> } else if ( <RARE_TOKEN> ( ) > <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> return 1 ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object <RARE_TOKEN> ) { </a> 0
<a> return </a> 0
<a> ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) && </a> 0
<a> ( <RARE_TOKEN> ( ( <RARE_TOKEN> ) <RARE_TOKEN> ) == 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> + "/" ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final Collection < String > <RARE_TOKEN> = </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> public static final Collection < String > <RARE_TOKEN> = </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . content . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private Session session ; </a> 0
<a> private final Session . StatusCallback callback ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> public <RARE_TOKEN> ( Context context , Session . StatusCallback callback ) { </a> 0
<a> this ( context , callback , null ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( Context context , Session . StatusCallback callback , Session session ) { </a> 0
<a> this ( context , callback , session , true ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , Session . StatusCallback callback , Session session , boolean <RARE_TOKEN> ) { </a> 0
<a> this . callback = new <RARE_TOKEN> ( callback ) ; </a> 0
<a> this . session = session ; </a> 0
<a> this . <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( context ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Session getSession ( ) { </a> 0
<a> return ( session == null ) ? Session . getActiveSession ( ) : session ; </a> 0
<a> } </a> 0
<a> public Session <RARE_TOKEN> ( ) { </a> 0
<a> Session <RARE_TOKEN> = getSession ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . isOpened ( ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Session <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> if ( session != null ) { </a> 0
<a> session . <RARE_TOKEN> ( callback ) ; </a> 0
<a> session = null ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( getSession ( ) != null ) { </a> 0
<a> getSession ( ) . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( session == null ) { </a> 0
<a> Session <RARE_TOKEN> = Session . getActiveSession ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> session . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> session = <RARE_TOKEN> ; </a> 0
<a> session . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( this . session == null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( getSession ( ) != null ) { </a> 0
<a> getSession ( ) . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> Session session = getSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> session . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return session == null ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> filter = new <RARE_TOKEN> ( ) ; </a> 0
<a> filter . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> filter . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , filter ) ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Context context , Intent intent ) { </a> 0
<a> if ( Session . <RARE_TOKEN> . equals ( intent . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> . this . callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements Session . StatusCallback { </a> 0
<a> private final Session . StatusCallback <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Session . StatusCallback <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> if ( session == <RARE_TOKEN> . this . session && state . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public final class Validate { </a> 0
<a> public static void <RARE_TOKEN> ( Object <RARE_TOKEN> , String name ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> " + name + " <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> public static < T > void <RARE_TOKEN> ( Collection < T > container , String name ) { </a> 0
<a> if ( container . isEmpty ( ) ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> + name + <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static < T > void <RARE_TOKEN> ( Collection < T > container , String name ) { </a> 0
<a> Validate . <RARE_TOKEN> ( container , name ) ; </a> 0
<a> for ( T <RARE_TOKEN> : container ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> <RARE_TOKEN> + name + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> null <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static < T > void <RARE_TOKEN> ( Collection < T > container , String name ) { </a> 0
<a> Validate . <RARE_TOKEN> ( container , name ) ; </a> 0
<a> Validate . <RARE_TOKEN> ( container , name ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String <RARE_TOKEN> , String name ) { </a> 0
<a> if ( Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + name + " <RARE_TOKEN> be null or <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( Object <RARE_TOKEN> , String name , Object ... values ) { </a> 0
<a> for ( Object value : values ) { </a> 0
<a> if ( value != null ) { </a> 0
<a> if ( value . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + name + " <RARE_TOKEN> not one of the <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> public interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String state ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public double <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( double <RARE_TOKEN> ) ; </a> 0
<a> public double <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( double <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> public interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> public GraphObjectList < GraphObject > getData ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import com . facebook . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . lang . <RARE_TOKEN> . * ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . util . * ; </a> 0
<a> public interface GraphObject { </a> 0
<a> public < T extends GraphObject > T cast ( Class < T > graphObjectClass ) ; </a> 0
<a> public Map < String , Object > <RARE_TOKEN> ( ) ; </a> 0
<a> public JSONObject <RARE_TOKEN> ( ) ; </a> 0
<a> public Object getProperty ( String <RARE_TOKEN> ) ; </a> 0
<a> public void setProperty ( String <RARE_TOKEN> , Object <RARE_TOKEN> ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> final class Factory { </a> 0
<a> private static final HashSet < Class < ? > > <RARE_TOKEN> = new HashSet < Class < ? > > ( ) ; </a> 0
<a> private static final <RARE_TOKEN> [ ] <RARE_TOKEN> = new <RARE_TOKEN> [ ] { </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) , new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) , } ; </a> 0
<a> private Factory ( ) { </a> 0
<a> } </a> 0
<a> public static GraphObject create ( JSONObject json ) { </a> 0
<a> return create ( json , GraphObject . class ) ; </a> 0
<a> } </a> 0
<a> public static < T extends GraphObject > T create ( JSONObject json , Class < T > graphObjectClass ) { </a> 0
<a> return <RARE_TOKEN> ( graphObjectClass , json ) ; </a> 0
<a> } </a> 0
<a> public static GraphObject create ( ) { </a> 0
<a> return create ( GraphObject . class ) ; </a> 0
<a> } </a> 0
<a> public static < T extends GraphObject > T create ( Class < T > graphObjectClass ) { </a> 0
<a> return <RARE_TOKEN> ( graphObjectClass , new JSONObject ( ) ) ; </a> 0
<a> } </a> 0
<a> public static boolean <RARE_TOKEN> ( GraphObject a , GraphObject b ) { </a> 0
<a> if ( a == null || b == null || ! a . <RARE_TOKEN> ( ) . containsKey ( <RARE_TOKEN> ) || ! b . <RARE_TOKEN> ( ) . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( a . equals ( b ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> Object <RARE_TOKEN> = a . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> Object <RARE_TOKEN> = b . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null || <RARE_TOKEN> == null || ! ( <RARE_TOKEN> instanceof String ) || ! ( <RARE_TOKEN> instanceof String ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static < T > GraphObjectList < T > <RARE_TOKEN> ( JSONArray array , Class < T > graphObjectClass ) { </a> 0
<a> return new <RARE_TOKEN> < T > ( array , graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> public static < T > GraphObjectList < T > <RARE_TOKEN> ( Class < T > graphObjectClass ) { </a> 0
<a> return <RARE_TOKEN> ( new JSONArray ( ) , graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> private static < T extends GraphObject > T <RARE_TOKEN> ( Class < T > graphObjectClass , JSONObject state ) { </a> 0
<a> <RARE_TOKEN> ( graphObjectClass ) ; </a> 0
<a> Class < ? > [ ] <RARE_TOKEN> = new Class [ ] { graphObjectClass } ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( state , graphObjectClass ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> T graphObject = ( T ) <RARE_TOKEN> . <RARE_TOKEN> ( GraphObject . class . <RARE_TOKEN> ( ) , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return graphObject ; </a> 0
<a> } </a> 0
<a> private static Map < String , Object > <RARE_TOKEN> ( JSONObject state ) { </a> 0
<a> Class < ? > [ ] <RARE_TOKEN> = new Class [ ] { Map . class } ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( state , Map . class ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Map < String , Object > graphObject = ( Map < String , Object > ) <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( GraphObject . class . <RARE_TOKEN> ( ) , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return graphObject ; </a> 0
<a> } </a> 0
<a> private static synchronized < T extends GraphObject > boolean <RARE_TOKEN> ( Class < T > graphObjectClass ) { </a> 0
<a> return <RARE_TOKEN> . contains ( graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> private static synchronized < T extends GraphObject > void <RARE_TOKEN> ( Class < T > graphObjectClass ) { </a> 0
<a> <RARE_TOKEN> . add ( graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> private static < T extends GraphObject > void <RARE_TOKEN> ( Class < T > graphObjectClass ) { </a> 0
<a> if ( <RARE_TOKEN> ( graphObjectClass ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( ! graphObjectClass . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> wrap <RARE_TOKEN> not <RARE_TOKEN> " </a> 0
<a> + graphObjectClass . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> = graphObjectClass . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( <RARE_TOKEN> method : <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = method . getName ( ) ; </a> 0
<a> int <RARE_TOKEN> = method . <RARE_TOKEN> ( ) . length ; </a> 0
<a> Class < ? > <RARE_TOKEN> = method . <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = method . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> if ( method . <RARE_TOKEN> ( ) . isAssignableFrom ( GraphObject . class ) ) { </a> 0
<a> continue ; </a> 0
<a> } else if ( <RARE_TOKEN> == 1 && <RARE_TOKEN> == Void . TYPE ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> if ( ! Utility . <RARE_TOKEN> ( method . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . value ( ) ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) && <RARE_TOKEN> . length ( ) > 3 ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> == 0 && <RARE_TOKEN> != Void . TYPE ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> if ( ! Utility . <RARE_TOKEN> ( method . <RARE_TOKEN> ( <RARE_TOKEN> . class ) . value ( ) ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) && <RARE_TOKEN> . length ( ) > 3 ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + method . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> static < U > U <RARE_TOKEN> ( Object value , Class < U > <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> Class < ? > <RARE_TOKEN> = value . getClass ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) value ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) value ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Class < ? extends GraphObject > graphObjectClass = ( Class < ? extends GraphObject > ) <RARE_TOKEN> ; </a> 0
<a> if ( JSONObject . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) <RARE_TOKEN> ( graphObjectClass , ( JSONObject ) value ) ; </a> 0
<a> return result ; </a> 0
<a> } else if ( GraphObject . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) ( ( GraphObject ) value ) . cast ( graphObjectClass ) ; </a> 0
<a> return result ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> create GraphObject from " + <RARE_TOKEN> . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> . class . equals ( <RARE_TOKEN> ) || Collection . class . equals ( <RARE_TOKEN> ) </a> 0
<a> || List . class . equals ( <RARE_TOKEN> ) || GraphObjectList . class . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> type <RARE_TOKEN> " + <RARE_TOKEN> . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null || <RARE_TOKEN> . length != 1 </a> 0
<a> || ! ( <RARE_TOKEN> [ 0 ] instanceof Class < ? > ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> collection <RARE_TOKEN> to be of a type <RARE_TOKEN> <RARE_TOKEN> one <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Class < ? > <RARE_TOKEN> = ( Class < ? > ) <RARE_TOKEN> [ 0 ] ; </a> 0
<a> if ( JSONArray . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> JSONArray jsonArray = ( JSONArray ) value ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) <RARE_TOKEN> ( jsonArray , <RARE_TOKEN> ) ; </a> 0
<a> return result ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> create Collection from " + <RARE_TOKEN> . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( String . class . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( <RARE_TOKEN> . class . isAssignableFrom ( <RARE_TOKEN> ) || </a> 0
<a> <RARE_TOKEN> . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) String . format ( <RARE_TOKEN> , value ) ; </a> 0
<a> return result ; </a> 0
<a> } else if ( <RARE_TOKEN> . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) String . format ( <RARE_TOKEN> , value ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> } else if ( Date . class . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( String . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> for ( <RARE_TOKEN> format : <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> Date <RARE_TOKEN> = format . <RARE_TOKEN> ( ( String ) value ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) <RARE_TOKEN> ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> . getName ( ) + " to " </a> 0
<a> + <RARE_TOKEN> . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> static String <RARE_TOKEN> ( String string ) { </a> 0
<a> string = string . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return string . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static Object <RARE_TOKEN> ( Object obj ) { </a> 0
<a> Class < ? > <RARE_TOKEN> = obj . getClass ( ) ; </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> GraphObject graphObject = ( GraphObject ) obj ; </a> 0
<a> return graphObject . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( GraphObjectList . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> GraphObjectList < ? > <RARE_TOKEN> = ( GraphObjectList < ? > ) obj ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return obj ; </a> 0
<a> } </a> 0
<a> private abstract static class <RARE_TOKEN> < <RARE_TOKEN> > implements <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> protected final <RARE_TOKEN> state ; </a> 0
<a> protected <RARE_TOKEN> ( <RARE_TOKEN> state ) { </a> 0
<a> this . state = state ; </a> 0
<a> } </a> 0
<a> protected final Object <RARE_TOKEN> ( <RARE_TOKEN> method ) { </a> 0
<a> throw new <RARE_TOKEN> ( getClass ( ) . getName ( ) + " <RARE_TOKEN> an <RARE_TOKEN> method <RARE_TOKEN> " </a> 0
<a> + method . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> protected final Object <RARE_TOKEN> ( Object <RARE_TOKEN> , <RARE_TOKEN> method , Object [ ] args ) throws Throwable { </a> 0
<a> String <RARE_TOKEN> = method . getName ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> Object other = args [ 0 ] ; </a> 0
<a> if ( other == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> handler = <RARE_TOKEN> . <RARE_TOKEN> ( other ) ; </a> 0
<a> if ( ! ( handler instanceof <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) handler ; </a> 0
<a> return this . state . equals ( <RARE_TOKEN> . state ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return toString ( ) ; </a> 0
<a> } </a> 0
<a> return method . <RARE_TOKEN> ( this . state , args ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final static class <RARE_TOKEN> extends <RARE_TOKEN> < JSONObject > { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final Class < ? > graphObjectClass ; </a> 0
<a> public <RARE_TOKEN> ( JSONObject state , Class < ? > graphObjectClass ) { </a> 0
<a> super ( state ) ; </a> 0
<a> this . graphObjectClass = graphObjectClass ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return String . format ( <RARE_TOKEN> <RARE_TOKEN> , graphObjectClass . getSimpleName ( ) , state ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final Object <RARE_TOKEN> ( Object <RARE_TOKEN> , <RARE_TOKEN> method , Object [ ] args ) throws Throwable { </a> 0
<a> Class < ? > <RARE_TOKEN> = method . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == Object . class ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , method , args ) ; </a> 0
<a> } else if ( <RARE_TOKEN> == Map . class ) { </a> 0
<a> return <RARE_TOKEN> ( method , args ) ; </a> 0
<a> } else if ( <RARE_TOKEN> == GraphObject . class ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , method , args ) ; </a> 0
<a> } else if ( GraphObject . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> ( method , args ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( method ) ; </a> 0
<a> } </a> 0
<a> private final Object <RARE_TOKEN> ( <RARE_TOKEN> method , Object [ ] args ) { </a> 0
<a> String <RARE_TOKEN> = method . getName ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this . state ) ; </a> 0
<a> return null ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return this . state . has ( ( String ) args [ 0 ] ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this . state , args [ 0 ] ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this . state ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return this . state . <RARE_TOKEN> ( ( String ) args [ 0 ] ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return this . state . length ( ) == 0 ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this . state ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> ( args ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> Map < String , Object > map = null ; </a> 0
<a> if ( args [ 0 ] instanceof Map < ? , ? > ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Map < String , Object > <RARE_TOKEN> = ( Map < String , Object > ) args [ 0 ] ; </a> 0
<a> map = <RARE_TOKEN> ; </a> 0
<a> } else if ( args [ 0 ] instanceof GraphObject ) { </a> 0
<a> map = ( ( GraphObject ) args [ 0 ] ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this . state , map ) ; </a> 0
<a> return null ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> this . state . remove ( ( String ) args [ 0 ] ) ; </a> 0
<a> return null ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return this . state . length ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this . state ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( method ) ; </a> 0
<a> } </a> 0
<a> private final Object <RARE_TOKEN> ( Object <RARE_TOKEN> , <RARE_TOKEN> method , Object [ ] args ) { </a> 0
<a> String <RARE_TOKEN> = method . getName ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Class < ? extends GraphObject > graphObjectClass = ( Class < ? extends GraphObject > ) args [ 0 ] ; </a> 0
<a> if ( graphObjectClass != null && </a> 0
<a> graphObjectClass . isAssignableFrom ( this . graphObjectClass ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return Factory . <RARE_TOKEN> ( graphObjectClass , this . state ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> handler = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) handler ; </a> 0
<a> return <RARE_TOKEN> . state ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return Factory . <RARE_TOKEN> ( this . state ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return state . <RARE_TOKEN> ( ( String ) args [ 0 ] ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> ( args ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> this . state . remove ( ( String ) args [ 0 ] ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( method ) ; </a> 0
<a> } </a> 0
<a> private final Object <RARE_TOKEN> ( <RARE_TOKEN> method , Object [ ] args ) throws JSONException { </a> 0
<a> String <RARE_TOKEN> = method . getName ( ) ; </a> 0
<a> int <RARE_TOKEN> = method . <RARE_TOKEN> ( ) . length ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = method . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> String key = <RARE_TOKEN> != null ? <RARE_TOKEN> . value ( ) : </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . substring ( 3 ) ) ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> Object value = this . state . <RARE_TOKEN> ( key ) ; </a> 0
<a> Class < ? > <RARE_TOKEN> = method . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = method . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> value = <RARE_TOKEN> ( value , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return value ; </a> 0
<a> } else if ( <RARE_TOKEN> == 1 ) { </a> 0
<a> Object value = args [ 0 ] ; </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( value . getClass ( ) ) ) { </a> 0
<a> value = ( ( GraphObject ) value ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( GraphObjectList . class . isAssignableFrom ( value . getClass ( ) ) ) { </a> 0
<a> value = ( ( GraphObjectList < ? > ) value ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . class . isAssignableFrom ( value . getClass ( ) ) ) { </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> <RARE_TOKEN> < ? > <RARE_TOKEN> = ( <RARE_TOKEN> < ? > ) value ; </a> 0
<a> for ( Object o : <RARE_TOKEN> ) { </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( o . getClass ( ) ) ) { </a> 0
<a> jsonArray . put ( ( ( GraphObject ) o ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> jsonArray . put ( o ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> value = jsonArray ; </a> 0
<a> } </a> 0
<a> this . state . <RARE_TOKEN> ( key , value ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( method ) ; </a> 0
<a> } </a> 0
<a> private Object <RARE_TOKEN> ( Object [ ] args ) { </a> 0
<a> String name = ( String ) args [ 0 ] ; </a> 0
<a> Object <RARE_TOKEN> = args [ 1 ] ; </a> 0
<a> Object value = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> state . <RARE_TOKEN> ( name , value ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> throw new IllegalArgumentException ( e ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final static class <RARE_TOKEN> < T > extends <RARE_TOKEN> < T > implements GraphObjectList < T > { </a> 0
<a> private final JSONArray state ; </a> 0
<a> private final Class < ? > <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( JSONArray state , Class < ? > <RARE_TOKEN> ) { </a> 0
<a> Validate . <RARE_TOKEN> ( state , <RARE_TOKEN> ) ; </a> 0
<a> Validate . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> this . state = state ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return String . format ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> . getSimpleName ( ) , state ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void add ( int location , T object ) { </a> 0
<a> if ( location < 0 ) { </a> 0
<a> throw new IndexOutOfBoundsException ( ) ; </a> 0
<a> } else if ( location < size ( ) ) { </a> 0
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the end of the list is <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> put ( location , object ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public T set ( int location , T object ) { </a> 0
<a> checkIndex ( location ) ; </a> 0
<a> T result = get ( location ) ; </a> 0
<a> put ( location , object ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return state . hashCode ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object obj ) { </a> 0
<a> if ( this == obj ) </a> 0
<a> return true ; </a> 0
<a> if ( getClass ( ) != obj . getClass ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> <RARE_TOKEN> < T > other = ( <RARE_TOKEN> < T > ) obj ; </a> 0
<a> return state . equals ( other . state ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> @ Override </a> 0
<a> public T get ( int location ) { </a> 0
<a> checkIndex ( location ) ; </a> 0
<a> Object value = state . <RARE_TOKEN> ( location ) ; </a> 0
<a> T result = ( T ) <RARE_TOKEN> ( value , <RARE_TOKEN> , null ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int size ( ) { </a> 0
<a> return state . length ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final < U extends GraphObject > GraphObjectList < U > <RARE_TOKEN> ( Class < U > graphObjectClass ) { </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( graphObjectClass . isAssignableFrom ( <RARE_TOKEN> ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> GraphObjectList < U > result = ( GraphObjectList < U > ) this ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( state , graphObjectClass ) ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> cast <RARE_TOKEN> of <RARE_TOKEN> type " </a> 0
<a> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final JSONArray <RARE_TOKEN> ( ) { </a> 0
<a> return state ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean remove ( Object o ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Collection < ? > c ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Collection < ? > c ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> private void checkIndex ( int index ) { </a> 0
<a> if ( index < 0 || index >= state . length ( ) ) { </a> 0
<a> throw new IndexOutOfBoundsException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void put ( int index , T obj ) { </a> 0
<a> Object <RARE_TOKEN> = <RARE_TOKEN> ( obj ) ; </a> 0
<a> try { </a> 0
<a> state . put ( index , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> throw new IllegalArgumentException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import java . util . List ; </a> 0
<a> public interface GraphObjectList < T > extends List < T > { </a> 0
<a> public < U extends GraphObject > GraphObjectList < U > <RARE_TOKEN> ( Class < U > graphObjectClass ) ; </a> 0
<a> public JSONArray <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> public interface GraphPlace extends GraphObject { </a> 0
<a> public String getId ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String id ) ; </a> 0
<a> public String getName ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String name ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> location ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> public interface GraphUser extends GraphObject { </a> 0
<a> public String getId ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String id ) ; </a> 0
<a> public String getName ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String name ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> location ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import android . annotation . <RARE_TOKEN> ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . * ; </a> 0
<a> class <RARE_TOKEN> { </a> 0
<a> static void <RARE_TOKEN> ( JSONObject jsonObject ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = ( Iterator < String > ) jsonObject . keys ( ) ; </a> 0
<a> while ( keys . <RARE_TOKEN> ( ) ) { </a> 0
<a> keys . next ( ) ; </a> 0
<a> keys . remove ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static boolean <RARE_TOKEN> ( JSONObject jsonObject , Object value ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = ( Iterator < String > ) jsonObject . keys ( ) ; </a> 0
<a> while ( keys . <RARE_TOKEN> ( ) ) { </a> 0
<a> Object <RARE_TOKEN> = jsonObject . <RARE_TOKEN> ( keys . next ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . equals ( value ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private final static class <RARE_TOKEN> implements Map . Entry < String , Object > { </a> 0
<a> private final String key ; </a> 0
<a> private final Object value ; </a> 0
<a> <RARE_TOKEN> ( String key , Object value ) { </a> 0
<a> this . key = key ; </a> 0
<a> this . value = value ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return this . key ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object getValue ( ) { </a> 0
<a> return this . value ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( Object object ) { </a> 0
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> is <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static Set < Map . Entry < String , Object > > <RARE_TOKEN> ( JSONObject jsonObject ) { </a> 0
<a> HashSet < Map . Entry < String , Object > > result = new HashSet < Map . Entry < String , Object > > ( ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = ( Iterator < String > ) jsonObject . keys ( ) ; </a> 0
<a> while ( keys . <RARE_TOKEN> ( ) ) { </a> 0
<a> String key = keys . next ( ) ; </a> 0
<a> Object value = jsonObject . <RARE_TOKEN> ( key ) ; </a> 0
<a> result . add ( new <RARE_TOKEN> ( key , value ) ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> static Set < String > <RARE_TOKEN> ( JSONObject jsonObject ) { </a> 0
<a> HashSet < String > result = new HashSet < String > ( ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = ( Iterator < String > ) jsonObject . keys ( ) ; </a> 0
<a> while ( keys . <RARE_TOKEN> ( ) ) { </a> 0
<a> result . add ( keys . next ( ) ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( JSONObject jsonObject , Map < String , Object > map ) { </a> 0
<a> Set < Map . Entry < String , Object > > <RARE_TOKEN> = map . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( Map . Entry < String , Object > entry : <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> jsonObject . <RARE_TOKEN> ( entry . <RARE_TOKEN> ( ) , entry . getValue ( ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> throw new IllegalArgumentException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static Collection < Object > <RARE_TOKEN> ( JSONObject jsonObject ) { </a> 0
<a> ArrayList < Object > result = new ArrayList < Object > ( ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = ( Iterator < String > ) jsonObject . keys ( ) ; </a> 0
<a> while ( keys . <RARE_TOKEN> ( ) ) { </a> 0
<a> result . add ( jsonObject . <RARE_TOKEN> ( keys . next ( ) ) ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> public String getId ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String id ) ; </a> 0
<a> public Date <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( Date <RARE_TOKEN> ) ; </a> 0
<a> public Date <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( Date <RARE_TOKEN> ) ; </a> 0
<a> public Date <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( Date <RARE_TOKEN> ) ; </a> 0
<a> public Date <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( Date <RARE_TOKEN> ) ; </a> 0
<a> public Date <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( Date <RARE_TOKEN> ) ; </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) ; </a> 0
<a> public String getMessage ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String message ) ; </a> 0
<a> public GraphPlace <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( GraphPlace <RARE_TOKEN> ) ; </a> 0
<a> public List < GraphObject > <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( List < ? extends GraphObject > <RARE_TOKEN> ) ; </a> 0
<a> public List < JSONObject > <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( List < JSONObject > <RARE_TOKEN> ) ; </a> 0
<a> public GraphUser <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( GraphUser from ) ; </a> 0
<a> public JSONObject <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( JSONObject <RARE_TOKEN> ) ; </a> 0
<a> public GraphObject <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( GraphObject <RARE_TOKEN> ) ; </a> 0
<a> public JSONObject <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( JSONObject <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> public @ interface <RARE_TOKEN> { </a> 0
<a> String value ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionLoginBehavior ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> sessionTracker ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle savedInstanceState ) { </a> 0
<a> super . <RARE_TOKEN> ( savedInstanceState ) ; </a> 0
<a> sessionTracker = new <RARE_TOKEN> ( getActivity ( ) , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> sessionTracker . getSession ( ) . onActivityResult ( this . getActivity ( ) , requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> sessionTracker . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Session <RARE_TOKEN> ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> sessionTracker . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( SessionState state , Exception exception ) { </a> 0
<a> } </a> 0
<a> protected final Session getSession ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> return sessionTracker . getSession ( ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected final boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> return sessionTracker . <RARE_TOKEN> ( ) != null ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> protected final SessionState <RARE_TOKEN> ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . getSession ( ) ; </a> 0
<a> return ( currentSession != null ) ? currentSession . <RARE_TOKEN> ( ) : null ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected final String <RARE_TOKEN> ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . <RARE_TOKEN> ( ) ; </a> 0
<a> return ( currentSession != null ) ? currentSession . <RARE_TOKEN> ( ) : null ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected final Date <RARE_TOKEN> ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . <RARE_TOKEN> ( ) ; </a> 0
<a> return ( currentSession != null ) ? currentSession . <RARE_TOKEN> ( ) : null ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected final void <RARE_TOKEN> ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected final void <RARE_TOKEN> ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected final List < String > <RARE_TOKEN> ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . getSession ( ) ; </a> 0
<a> return ( currentSession != null ) ? currentSession . getPermissions ( ) : null ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected final void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( null , null ) ; </a> 0
<a> } </a> 0
<a> protected final void <RARE_TOKEN> ( String applicationId , List < String > permissions ) { </a> 0
<a> <RARE_TOKEN> ( applicationId , permissions , SessionLoginBehavior . <RARE_TOKEN> , </a> 0
<a> Session . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected final void <RARE_TOKEN> ( String applicationId , List < String > permissions , </a> 0
<a> SessionLoginBehavior <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( applicationId , permissions , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected final void <RARE_TOKEN> ( String applicationId , List < String > permissions ) { </a> 0
<a> <RARE_TOKEN> ( applicationId , permissions , SessionLoginBehavior . <RARE_TOKEN> , </a> 0
<a> Session . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected final void <RARE_TOKEN> ( String applicationId , List < String > permissions , </a> 0
<a> SessionLoginBehavior <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( applicationId , permissions , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String applicationId , List < String > permissions , </a> 0
<a> SessionLoginBehavior <RARE_TOKEN> , int <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . getSession ( ) ; </a> 0
<a> if ( currentSession == null || currentSession . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> Session session = new Session . Builder ( getActivity ( ) ) . <RARE_TOKEN> ( applicationId ) . build ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( session ) ; </a> 0
<a> currentSession = session ; </a> 0
<a> } </a> 0
<a> if ( ! currentSession . isOpened ( ) ) { </a> 0
<a> Session . OpenRequest openRequest = new Session . OpenRequest ( this ) . </a> 0
<a> <RARE_TOKEN> ( permissions ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> currentSession . <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> } else { </a> 0
<a> currentSession . <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements Session . StatusCallback { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , </a> 0
<a> SessionState state , </a> 0
<a> Exception exception ) { </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( state , exception ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . annotation . <RARE_TOKEN> ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . res . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . util . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . * ; </a> 1
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import java . util . Arrays ; </a> 1
<a> import java . util . HashSet ; </a> 1
<a> import java . util . List ; </a> 1
<a> import java . util . Set ; </a> 1
<a> public class <RARE_TOKEN> extends PickerFragment < GraphUser > { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String ID = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = "name" ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> = true ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( null ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> public <RARE_TOKEN> ( Bundle args ) { </a> 0
<a> super ( GraphUser . class , R . layout . <RARE_TOKEN> , args ) ; </a> 0
<a> <RARE_TOKEN> ( args ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> if ( this . <RARE_TOKEN> != <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public List < GraphUser > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Activity activity , <RARE_TOKEN> <RARE_TOKEN> , Bundle savedInstanceState ) { </a> 0
<a> super . <RARE_TOKEN> ( activity , <RARE_TOKEN> , savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> a = activity . <RARE_TOKEN> ( <RARE_TOKEN> , R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( a . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> a . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Bundle <RARE_TOKEN> ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Bundle outState ) { </a> 0
<a> super . <RARE_TOKEN> ( outState ) ; </a> 0
<a> outState . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> <RARE_TOKEN> < GraphUser > <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> < GraphUser > adapter = new <RARE_TOKEN> < GraphUser > ( </a> 0
<a> this . getActivity ( ) ) { </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( GraphUser graphObject ) { </a> 0
<a> return R . layout . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( ) { </a> 0
<a> return R . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> adapter . <RARE_TOKEN> ( true ) ; </a> 0
<a> adapter . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> adapter . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> } ) ) ; </a> 0
<a> adapter . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return adapter ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ? new <RARE_TOKEN> ( ) : new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> Request <RARE_TOKEN> ( Session session ) { </a> 0
<a> if ( adapter == null ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> requests <RARE_TOKEN> <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = ( <RARE_TOKEN> != null ) ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , session ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> String <RARE_TOKEN> ( ) { </a> 0
<a> return getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private Request <RARE_TOKEN> ( String <RARE_TOKEN> , Set < String > <RARE_TOKEN> , Session session ) { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> + <RARE_TOKEN> , null ) ; </a> 0
<a> Set < String > fields = new HashSet < String > ( <RARE_TOKEN> ) ; </a> 0
<a> String [ ] <RARE_TOKEN> = new String [ ] { </a> 0
<a> ID , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } ; </a> 0
<a> fields . <RARE_TOKEN> ( Arrays . asList ( <RARE_TOKEN> ) ) ; </a> 0
<a> String <RARE_TOKEN> = adapter . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> fields . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Bundle parameters = request . <RARE_TOKEN> ( ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , fields ) ) ; </a> 0
<a> request . <RARE_TOKEN> ( parameters ) ; </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Bundle <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( <RARE_TOKEN> . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> < GraphUser > loader , </a> 0
<a> <RARE_TOKEN> < GraphUser > data ) { </a> 0
<a> super . <RARE_TOKEN> ( loader , data ) ; </a> 0
<a> if ( data == null || loader . <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( data . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( data . <RARE_TOKEN> ( ) ) { </a> 0
<a> loader . <RARE_TOKEN> ( data . <RARE_TOKEN> ( ) == 0 ? <RARE_TOKEN> : 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> loader . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . util . * ; </a> 0
<a> class <RARE_TOKEN> < T extends GraphObject > extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private static final int <RARE_TOKEN> = 20 ; </a> 0
<a> private static final String ID = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = "name" ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final Map < String , <RARE_TOKEN> > <RARE_TOKEN> = new HashMap < String , <RARE_TOKEN> > ( ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private List < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> private Map < String , ArrayList < T > > <RARE_TOKEN> = new HashMap < String , ArrayList < T > > ( ) ; </a> 0
<a> private Map < String , T > <RARE_TOKEN> = new HashMap < String , T > ( ) ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private List < String > <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private Filter < T > filter ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> < T > cursor ; </a> 0
<a> private Context context ; </a> 0
<a> private Map < String , <RARE_TOKEN> > <RARE_TOKEN> = new HashMap < String , <RARE_TOKEN> > ( ) ; </a> 0
<a> private ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> < T extends GraphObject > { </a> 0
<a> public String <RARE_TOKEN> ; </a> 0
<a> public T graphObject ; </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String <RARE_TOKEN> , T graphObject ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . graphObject = graphObject ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> getType ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } else if ( graphObject == null ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> interface Filter < T > { </a> 0
<a> boolean <RARE_TOKEN> ( T graphObject ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context ) { </a> 0
<a> this . context = context ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> . from ( context ) ; </a> 0
<a> } </a> 0
<a> public List < String > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( List < String > <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> < T > <RARE_TOKEN> ( ) { </a> 0
<a> return cursor ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> < T > cursor ) { </a> 0
<a> if ( this . cursor == cursor ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( this . cursor != null ) { </a> 0
<a> this . cursor . close ( ) ; </a> 0
<a> } </a> 0
<a> this . cursor = cursor ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> for ( int i = <RARE_TOKEN> ; i >= 0 ; i -- ) { </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = <RARE_TOKEN> ( i ) ; </a> 0
<a> if ( <RARE_TOKEN> . graphObject != null ) { </a> 0
<a> String id = <RARE_TOKEN> ( <RARE_TOKEN> . graphObject ) ; </a> 0
<a> <RARE_TOKEN> request = <RARE_TOKEN> . get ( id ) ; </a> 0
<a> if ( request != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int start = Math . <RARE_TOKEN> ( 0 , <RARE_TOKEN> - <RARE_TOKEN> ) ; </a> 0
<a> int end = Math . min ( <RARE_TOKEN> + <RARE_TOKEN> , <RARE_TOKEN> ( ) - 1 ) ; </a> 0
<a> ArrayList < T > <RARE_TOKEN> = new ArrayList < T > ( ) ; </a> 0
<a> for ( int i = start ; i < <RARE_TOKEN> ; ++ i ) { </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = <RARE_TOKEN> ( i ) ; </a> 0
<a> if ( <RARE_TOKEN> . graphObject != null ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> . graphObject ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( int i = <RARE_TOKEN> + 1 ; i <= end ; ++ i ) { </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = <RARE_TOKEN> ( i ) ; </a> 0
<a> if ( <RARE_TOKEN> . graphObject != null ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> . graphObject ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( T graphObject : <RARE_TOKEN> ) { </a> 0
<a> URL url = <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> final String id = <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . remove ( id ) ; </a> 0
<a> <RARE_TOKEN> . add ( id ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( id , url , null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected String <RARE_TOKEN> ( T graphObject ) { </a> 0
<a> String result = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> result = ( String ) graphObject . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> if ( result != null && result . length ( ) > 0 ) { </a> 0
<a> result = result . substring ( 0 , 1 ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return ( result != null ) ? result : "" ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( T graphObject ) { </a> 0
<a> return ( String ) graphObject . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( T graphObject ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected URL <RARE_TOKEN> ( T graphObject ) { </a> 0
<a> String url = null ; </a> 0
<a> Object o = graphObject . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> if ( o instanceof String ) { </a> 0
<a> url = ( String ) o ; </a> 0
<a> } else if ( o instanceof JSONObject ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GraphObject . Factory . create ( ( JSONObject ) o ) . cast ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> data = <RARE_TOKEN> . getData ( ) ; </a> 0
<a> if ( data != null ) { </a> 0
<a> url = data . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( url != null ) { </a> 0
<a> try { </a> 0
<a> return new URL ( url ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected View <RARE_TOKEN> ( String <RARE_TOKEN> , View <RARE_TOKEN> , ViewGroup parent ) { </a> 0
<a> TextView result = ( TextView ) <RARE_TOKEN> ; </a> 0
<a> if ( result == null ) { </a> 0
<a> result = ( TextView ) <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> result . setText ( <RARE_TOKEN> ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> protected View <RARE_TOKEN> ( T graphObject , View <RARE_TOKEN> , ViewGroup parent ) { </a> 0
<a> View result = <RARE_TOKEN> ; </a> 0
<a> if ( result == null ) { </a> 0
<a> result = <RARE_TOKEN> ( graphObject , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( result , graphObject ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> private View <RARE_TOKEN> ( View <RARE_TOKEN> , ViewGroup parent ) { </a> 0
<a> View result = <RARE_TOKEN> ; </a> 0
<a> if ( result == null ) { </a> 0
<a> result = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) result . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> protected int <RARE_TOKEN> ( T graphObject ) { </a> 0
<a> return R . layout . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected int <RARE_TOKEN> ( ) { </a> 0
<a> return R . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected View <RARE_TOKEN> ( T graphObject , View <RARE_TOKEN> ) { </a> 0
<a> View result = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( graphObject ) , null ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) result . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) result . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( View view , T graphObject ) { </a> 0
<a> String id = <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> view . <RARE_TOKEN> ( id ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> TextView <RARE_TOKEN> = ( TextView ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> , TextView . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> TextView <RARE_TOKEN> = ( TextView ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> , TextView . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( id ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> URL <RARE_TOKEN> = <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . containsKey ( id ) ) { </a> 0
<a> <RARE_TOKEN> response = <RARE_TOKEN> . get ( id ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( response . getRequest ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( id , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ( T graphObject ) { </a> 0
<a> if ( graphObject . <RARE_TOKEN> ( ) . containsKey ( ID ) ) { </a> 0
<a> Object obj = graphObject . getProperty ( ID ) ; </a> 0
<a> if ( obj instanceof String ) { </a> 0
<a> return ( String ) obj ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> an object <RARE_TOKEN> an <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( T graphObject ) { </a> 0
<a> return filter == null || filter . <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> } </a> 0
<a> Filter < T > <RARE_TOKEN> ( ) { </a> 0
<a> return filter ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Filter < T > filter ) { </a> 0
<a> this . filter = filter ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ( ) { </a> 0
<a> View view = <RARE_TOKEN> ( null , null ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> ViewGroup . LayoutParams <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return String . format ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( cursor != null ) && cursor . <RARE_TOKEN> ( ) && ( <RARE_TOKEN> != null ) && ! isEmpty ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> <RARE_TOKEN> = new HashMap < String , ArrayList < T > > ( ) ; </a> 0
<a> <RARE_TOKEN> = new HashMap < String , T > ( ) ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> if ( cursor == null || cursor . <RARE_TOKEN> ( ) == 0 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> cursor . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> T graphObject = cursor . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( graphObject ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , new ArrayList < T > ( ) ) ; </a> 0
<a> } </a> 0
<a> List < T > <RARE_TOKEN> = <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . add ( graphObject ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> ( graphObject ) , graphObject ) ; </a> 0
<a> } while ( cursor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( ) ; </a> 0
<a> for ( List < T > <RARE_TOKEN> : <RARE_TOKEN> . values ( ) ) { </a> 0
<a> Collections . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> < GraphObject > ( ) { </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( GraphObject a , GraphObject b ) { </a> 0
<a> return <RARE_TOKEN> ( a , b , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Collections . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . getInstance ( ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . size ( ) > 1 && <RARE_TOKEN> > <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> ( int position ) { </a> 0
<a> if ( <RARE_TOKEN> . size ( ) == 0 ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> T graphObject = null ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . get ( 0 ) ; </a> 0
<a> List < T > <RARE_TOKEN> = <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 0
<a> if ( position >= 0 && position < <RARE_TOKEN> . size ( ) ) { </a> 0
<a> graphObject = <RARE_TOKEN> . get ( <RARE_TOKEN> ) . get ( position ) ; </a> 0
<a> } else { </a> 0
<a> assert <RARE_TOKEN> != null && cursor . <RARE_TOKEN> ( ) ; </a> 0
<a> return new <RARE_TOKEN> < T > ( null , null ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> for ( String key : <RARE_TOKEN> ) { </a> 0
<a> if ( position -- == 0 ) { </a> 0
<a> <RARE_TOKEN> = key ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> List < T > <RARE_TOKEN> = <RARE_TOKEN> . get ( key ) ; </a> 0
<a> if ( position < <RARE_TOKEN> . size ( ) ) { </a> 0
<a> <RARE_TOKEN> = key ; </a> 0
<a> graphObject = <RARE_TOKEN> . get ( position ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> position -= <RARE_TOKEN> . size ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return new <RARE_TOKEN> < T > ( <RARE_TOKEN> , graphObject ) ; </a> 0
<a> } else { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( String <RARE_TOKEN> , T graphObject ) { </a> 0
<a> int position = 0 ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> for ( String key : <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> position ++ ; </a> 0
<a> } </a> 0
<a> if ( key . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> break ; </a> 0
<a> } else { </a> 0
<a> position += <RARE_TOKEN> . get ( key ) . size ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> return - 1 ; </a> 0
<a> } else if ( graphObject == null ) { </a> 0
<a> return position - ( <RARE_TOKEN> ? 1 : 0 ) ; </a> 0
<a> } </a> 0
<a> for ( T t : <RARE_TOKEN> . get ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( GraphObject . Factory . <RARE_TOKEN> ( t , graphObject ) ) { </a> 0
<a> return position ; </a> 0
<a> } </a> 0
<a> position ++ ; </a> 0
<a> } </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isEmpty ( ) { </a> 0
<a> return <RARE_TOKEN> . size ( ) == 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> . size ( ) == 0 ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> int count = ( <RARE_TOKEN> ) ? <RARE_TOKEN> . size ( ) : 0 ; </a> 0
<a> for ( List < T > <RARE_TOKEN> : <RARE_TOKEN> . values ( ) ) { </a> 0
<a> count += <RARE_TOKEN> . size ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> ++ count ; </a> 0
<a> } </a> 0
<a> return count ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( int position ) { </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = <RARE_TOKEN> ( position ) ; </a> 0
<a> return <RARE_TOKEN> . getType ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( int position ) { </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = <RARE_TOKEN> ( position ) ; </a> 0
<a> return ( <RARE_TOKEN> . getType ( ) == <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) ? <RARE_TOKEN> . graphObject : null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( int position ) { </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = <RARE_TOKEN> ( position ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . graphObject != null ) { </a> 0
<a> String id = <RARE_TOKEN> ( <RARE_TOKEN> . graphObject ) ; </a> 0
<a> if ( id != null ) { </a> 0
<a> return Long . <RARE_TOKEN> ( id ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return 3 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int position ) { </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = <RARE_TOKEN> ( position ) ; </a> 0
<a> switch ( <RARE_TOKEN> . getType ( ) ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> default : </a> 0
<a> throw new FacebookException ( "Unexpected type of <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( int position , View <RARE_TOKEN> , ViewGroup parent ) { </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = <RARE_TOKEN> ( position ) ; </a> 0
<a> switch ( <RARE_TOKEN> . getType ( ) ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> , parent ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> . graphObject , <RARE_TOKEN> , parent ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> assert cursor . <RARE_TOKEN> ( ) && ( <RARE_TOKEN> != null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , parent ) ; </a> 0
<a> default : </a> 0
<a> throw new FacebookException ( "Unexpected type of <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object [ ] <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> return new Object [ 0 ] ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = Math . <RARE_TOKEN> ( 0 , Math . min ( <RARE_TOKEN> , <RARE_TOKEN> . size ( ) - 1 ) ) ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> . size ( ) ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> . get ( <RARE_TOKEN> ) , null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int position ) { </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = <RARE_TOKEN> ( position ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && </a> 0
<a> <RARE_TOKEN> . getType ( ) != <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> return Math . <RARE_TOKEN> ( 0 , Math . min ( <RARE_TOKEN> . indexOf ( <RARE_TOKEN> . <RARE_TOKEN> ) , <RARE_TOKEN> . size ( ) - 1 ) ) ; </a> 0
<a> } </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> public List < T > <RARE_TOKEN> ( Collection < String > <RARE_TOKEN> ) { </a> 0
<a> Set < String > <RARE_TOKEN> = new HashSet < String > ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> ArrayList < T > result = new ArrayList < T > ( <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> for ( String id : <RARE_TOKEN> ) { </a> 0
<a> T graphObject = <RARE_TOKEN> . get ( id ) ; </a> 0
<a> if ( graphObject != null ) { </a> 0
<a> result . add ( graphObject ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( final String <RARE_TOKEN> , URL <RARE_TOKEN> , final <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> == null ; </a> 0
<a> if ( <RARE_TOKEN> || ! <RARE_TOKEN> . equals ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . Builder builder = new <RARE_TOKEN> . Builder ( context . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( this ) </a> 0
<a> . setCallback ( </a> 0
<a> new <RARE_TOKEN> . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( <RARE_TOKEN> response ) { </a> 0
<a> <RARE_TOKEN> ( response , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = builder . build ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> response , String <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . remove ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> if ( response . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> if ( <RARE_TOKEN> . size ( ) >= <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . remove ( 0 ) ; </a> 0
<a> <RARE_TOKEN> . remove ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , response ) ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> != null && <RARE_TOKEN> . equals ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> Exception error = response . getError ( ) ; </a> 0
<a> Bitmap <RARE_TOKEN> = response . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( error == null && <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( response . getRequest ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( GraphObject a , GraphObject b , Collection < String > <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> for ( String <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = ( String ) a . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> String sb = ( String ) b . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && sb != null ) { </a> 0
<a> int result = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , sb ) ; </a> 0
<a> if ( result != 0 ) { </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> } else if ( ! ( <RARE_TOKEN> == null && sb == null ) ) { </a> 0
<a> return ( <RARE_TOKEN> == null ) ? - 1 : 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> <RARE_TOKEN> getData ( ) ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> interface <RARE_TOKEN> < T extends GraphObject > { </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( int offset ) ; </a> 0
<a> boolean <RARE_TOKEN> ( int position ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean isLast ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> T <RARE_TOKEN> ( ) ; </a> 0
<a> void close ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . support . v4 . content . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphObjectList ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> class <RARE_TOKEN> < T extends GraphObject > extends <RARE_TOKEN> < <RARE_TOKEN> < T > > { </a> 0
<a> private final Class < T > graphObjectClass ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private Request <RARE_TOKEN> ; </a> 0
<a> private Request <RARE_TOKEN> ; </a> 0
<a> private Request <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> < T > cursor ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> public void onError ( FacebookException error , <RARE_TOKEN> < ? > loader ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , Class < T > graphObjectClass ) { </a> 0
<a> super ( context ) ; </a> 0
<a> this . graphObjectClass = graphObjectClass ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> this . <RARE_TOKEN> = listener ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> < T > <RARE_TOKEN> ( ) { </a> 0
<a> return cursor ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Request request , boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = request ; </a> 0
<a> <RARE_TOKEN> ( request , <RARE_TOKEN> , 0 ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( long <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new FacebookException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> not be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , false , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . setCallback ( new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> <RARE_TOKEN> ( response ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> batch = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Request . <RARE_TOKEN> ( batch ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < T > cursor ) { </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = this . cursor ; </a> 0
<a> this . cursor = cursor ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> super . <RARE_TOKEN> ( cursor ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> != cursor && ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( cursor != null ) { </a> 0
<a> <RARE_TOKEN> ( cursor ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Request request , boolean <RARE_TOKEN> , long <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = request ; </a> 0
<a> <RARE_TOKEN> . setCallback ( new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> <RARE_TOKEN> ( response ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> final RequestBatch batch = <RARE_TOKEN> ( request , <RARE_TOKEN> ) ; </a> 0
<a> Runnable r = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Request . <RARE_TOKEN> ( batch ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> r . run ( ) ; </a> 0
<a> } else { </a> 0
<a> Handler handler = new Handler ( ) ; </a> 0
<a> handler . <RARE_TOKEN> ( r , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( Request request , boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> batch = new <RARE_TOKEN> ( request ) ; </a> 0
<a> batch . <RARE_TOKEN> ( ! <RARE_TOKEN> ) ; </a> 0
<a> return batch ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Response response ) { </a> 0
<a> Request request = response . getRequest ( ) ; </a> 0
<a> if ( request != <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> FacebookRequestError <RARE_TOKEN> = response . getError ( ) ; </a> 0
<a> FacebookException exception = ( <RARE_TOKEN> == null ) ? null : <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( response . <RARE_TOKEN> ( ) == null && exception == null ) { </a> 0
<a> exception = new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> a result <RARE_TOKEN> an <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( exception != null ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . onError ( exception , this ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Response response ) { </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = ( cursor == null || ! <RARE_TOKEN> ) ? new <RARE_TOKEN> < T > ( ) : </a> 0
<a> new <RARE_TOKEN> < T > ( cursor ) ; </a> 0
<a> <RARE_TOKEN> result = response . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> boolean <RARE_TOKEN> = response . <RARE_TOKEN> ( ) ; </a> 0
<a> GraphObjectList < T > data = result . getData ( ) . <RARE_TOKEN> ( graphObjectClass ) ; </a> 0
<a> boolean <RARE_TOKEN> = data . size ( ) > 0 ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = response . <RARE_TOKEN> ( Response . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( data , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> GraphObjectList < GraphObject > getData ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> class <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> request ; </a> 0
<a> private Exception error ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private Bitmap <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> request , Exception error , boolean <RARE_TOKEN> , Bitmap <RARE_TOKEN> ) { </a> 0
<a> this . request = request ; </a> 0
<a> this . error = error ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> getRequest ( ) { </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> Exception getError ( ) { </a> 0
<a> return error ; </a> 0
<a> } </a> 0
<a> Bitmap <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . LoggingBehavior ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . FileLruCache ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . URL ; </a> 0
<a> class <RARE_TOKEN> { </a> 0
<a> static final String TAG = <RARE_TOKEN> . class . getSimpleName ( ) ; </a> 0
<a> private volatile static FileLruCache <RARE_TOKEN> ; </a> 0
<a> synchronized static FileLruCache <RARE_TOKEN> ( Context context ) throws IOException { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new FileLruCache ( context . <RARE_TOKEN> ( ) , TAG , new FileLruCache . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static InputStream <RARE_TOKEN> ( URL url , Context context ) { </a> 0
<a> InputStream <RARE_TOKEN> = null ; </a> 0
<a> if ( url != null ) { </a> 0
<a> if ( <RARE_TOKEN> ( url ) ) { </a> 0
<a> try { </a> 0
<a> FileLruCache cache = <RARE_TOKEN> ( context ) ; </a> 0
<a> <RARE_TOKEN> = cache . get ( url . toString ( ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , Log . <RARE_TOKEN> , TAG , e . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static InputStream <RARE_TOKEN> ( Context context , HttpURLConnection connection ) throws IOException { </a> 0
<a> InputStream stream = null ; </a> 0
<a> if ( connection . <RARE_TOKEN> ( ) == HttpURLConnection . <RARE_TOKEN> ) { </a> 0
<a> URL url = connection . <RARE_TOKEN> ( ) ; </a> 0
<a> stream = connection . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ( url ) ) { </a> 0
<a> try { </a> 0
<a> FileLruCache cache = <RARE_TOKEN> ( context ) ; </a> 0
<a> stream = cache . <RARE_TOKEN> ( </a> 0
<a> url . toString ( ) , </a> 0
<a> new <RARE_TOKEN> ( stream , connection ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return stream ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( URL url ) { </a> 0
<a> if ( url != null ) { </a> 0
<a> String <RARE_TOKEN> = url . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) && <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> HttpURLConnection connection ; </a> 0
<a> <RARE_TOKEN> ( InputStream stream , HttpURLConnection connection ) { </a> 0
<a> super ( stream , Utility . <RARE_TOKEN> ) ; </a> 0
<a> this . connection = connection ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> super . close ( ) ; </a> 0
<a> Utility . <RARE_TOKEN> ( connection ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . res . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . util . <RARE_TOKEN> ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import android . util . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class LoginButton extends Button { </a> 0
<a> private static final String TAG = LoginButton . class . getName ( ) ; </a> 0
<a> private String applicationId = null ; </a> 0
<a> private <RARE_TOKEN> sessionTracker ; </a> 0
<a> private GraphUser user = null ; </a> 0
<a> private Session <RARE_TOKEN> = null ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> static class <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> private List < String > permissions = Collections . < String > <RARE_TOKEN> ( ) ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private SessionLoginBehavior loginBehavior = SessionLoginBehavior . <RARE_TOKEN> ; </a> 0
<a> private Session . StatusCallback <RARE_TOKEN> ; </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( List < String > permissions , Session session ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( permissions , <RARE_TOKEN> . <RARE_TOKEN> , session ) ) { </a> 0
<a> this . permissions = permissions ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( List < String > permissions , Session session ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( permissions , <RARE_TOKEN> . <RARE_TOKEN> , session ) ) { </a> 0
<a> this . permissions = permissions ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( List < String > permissions , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> , Session currentSession ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> if ( Utility . <RARE_TOKEN> ( permissions ) ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> for <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be null or <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( currentSession != null && currentSession . isOpened ( ) ) { </a> 0
<a> if ( ! Utility . <RARE_TOKEN> ( permissions , currentSession . getPermissions ( ) ) ) { </a> 0
<a> Log . e ( TAG , <RARE_TOKEN> set <RARE_TOKEN> permissions <RARE_TOKEN> session is <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> List < String > getPermissions ( ) { </a> 0
<a> return permissions ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> permissions = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> this . loginBehavior = loginBehavior ; </a> 0
<a> } </a> 0
<a> public SessionLoginBehavior <RARE_TOKEN> ( ) { </a> 0
<a> return loginBehavior ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Session . StatusCallback callback ) { </a> 0
<a> this . <RARE_TOKEN> = callback ; </a> 0
<a> } </a> 0
<a> public Session . StatusCallback <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( GraphUser user ) ; </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void onError ( FacebookException error ) ; </a> 0
<a> } </a> 0
<a> public LoginButton ( Context context ) { </a> 0
<a> super ( context ) ; </a> 0
<a> <RARE_TOKEN> ( context ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public LoginButton ( Context context , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( context , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == 0 ) { </a> 0
<a> this . <RARE_TOKEN> ( getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> this . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , </a> 0
<a> getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> this . <RARE_TOKEN> ( getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> this . <RARE_TOKEN> ( getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> this . <RARE_TOKEN> ( getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> this . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> this . <RARE_TOKEN> ( getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> this . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( context ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<a> public LoginButton ( Context context , <RARE_TOKEN> <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super ( context , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( context ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( List < String > permissions ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , sessionTracker . getSession ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( List < String > permissions ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , sessionTracker . getSession ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( loginBehavior ) ; </a> 0
<a> } </a> 0
<a> public SessionLoginBehavior <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String applicationId ) { </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Session . StatusCallback callback ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( callback ) ; </a> 0
<a> } </a> 0
<a> public Session . StatusCallback <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public boolean onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> Session session = sessionTracker . getSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> return session . onActivityResult ( ( Activity ) getContext ( ) , requestCode , </a> 0
<a> resultCode , data ) ; </a> 0
<a> } else { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Session <RARE_TOKEN> ) { </a> 0
<a> sessionTracker . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> setOnClickListener ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> sessionTracker = new <RARE_TOKEN> ( getContext ( ) , new <RARE_TOKEN> ( ) , null , false ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> fragment ) { </a> 0
<a> <RARE_TOKEN> = fragment ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( sessionTracker != null && ! sessionTracker . <RARE_TOKEN> ( ) ) { </a> 0
<a> sessionTracker . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> sessionTracker . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> List < String > getPermissions ( ) { </a> 0
<a> return <RARE_TOKEN> . getPermissions ( ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> a = getContext ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = a . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> , true ) ; </a> 0
<a> <RARE_TOKEN> = a . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> , true ) ; </a> 0
<a> <RARE_TOKEN> = a . getString ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = a . getString ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> a . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( sessionTracker != null && sessionTracker . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> setText ( ( <RARE_TOKEN> != null ) ? <RARE_TOKEN> : </a> 0
<a> getResources ( ) . getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> } else { </a> 0
<a> setText ( ( <RARE_TOKEN> != null ) ? <RARE_TOKEN> : </a> 0
<a> getResources ( ) . getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( Context context ) { </a> 0
<a> if ( context == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> return session . isOpened ( ) ; </a> 0
<a> } </a> 0
<a> String applicationId = Utility . <RARE_TOKEN> ( context ) ; </a> 0
<a> if ( applicationId == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return Session . <RARE_TOKEN> ( context ) != null ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> final Session currentSession = sessionTracker . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> if ( currentSession != <RARE_TOKEN> ) { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( currentSession , new Request . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( GraphUser <RARE_TOKEN> , Response response ) { </a> 0
<a> if ( currentSession == sessionTracker . <RARE_TOKEN> ( ) ) { </a> 0
<a> user = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( user ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( response . getError ( ) != null ) { </a> 0
<a> <RARE_TOKEN> ( response . getError ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Request . <RARE_TOKEN> ( request ) ; </a> 0
<a> <RARE_TOKEN> = currentSession ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> user = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( user ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements OnClickListener { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Context context = getContext ( ) ; </a> 0
<a> final Session <RARE_TOKEN> = sessionTracker . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = getResources ( ) . getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> String cancel = getResources ( ) . getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> String message ; </a> 0
<a> if ( user != null && user . getName ( ) != null ) { </a> 0
<a> message = String . format ( getResources ( ) . getString ( R . string . <RARE_TOKEN> ) , user . getName ( ) ) ; </a> 0
<a> } else { </a> 0
<a> message = getResources ( ) . getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . Builder builder = new <RARE_TOKEN> . Builder ( context ) ; </a> 0
<a> builder . <RARE_TOKEN> ( message ) </a> 0
<a> . <RARE_TOKEN> ( true ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> , new DialogInterface . OnClickListener ( ) { </a> 0
<a> public void onClick ( DialogInterface dialog , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . <RARE_TOKEN> ( cancel , null ) ; </a> 0
<a> builder . create ( ) . show ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> Session currentSession = sessionTracker . getSession ( ) ; </a> 0
<a> if ( currentSession == null || currentSession . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> sessionTracker . <RARE_TOKEN> ( null ) ; </a> 0
<a> Session session = new Session . Builder ( context ) . <RARE_TOKEN> ( applicationId ) . build ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( session ) ; </a> 0
<a> currentSession = session ; </a> 0
<a> } </a> 0
<a> if ( ! currentSession . isOpened ( ) ) { </a> 0
<a> Session . OpenRequest openRequest = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> openRequest = new Session . OpenRequest ( <RARE_TOKEN> ) ; </a> 0
<a> } else if ( context instanceof Activity ) { </a> 0
<a> openRequest = new Session . OpenRequest ( ( Activity ) context ) ; </a> 0
<a> } </a> 0
<a> if ( openRequest != null ) { </a> 0
<a> openRequest . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> openRequest . <RARE_TOKEN> ( <RARE_TOKEN> . permissions ) ; </a> 0
<a> openRequest . <RARE_TOKEN> ( <RARE_TOKEN> . loginBehavior ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> . equals ( <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> currentSession . <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> } else { </a> 0
<a> currentSession . <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements Session . StatusCallback { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , </a> 0
<a> Exception exception ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( exception != null ) { </a> 0
<a> <RARE_TOKEN> ( exception ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> void <RARE_TOKEN> ( Exception exception ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> != null ) { </a> 0
<a> if ( exception instanceof FacebookException ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> . onError ( ( FacebookException ) exception ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> . onError ( new FacebookException ( exception ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . res . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . content . <RARE_TOKEN> ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . util . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> import java . util . * ; </a> 0
<a> public abstract class PickerFragment < T extends GraphObject > extends <RARE_TOKEN> { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = 5 ; </a> 0
<a> private final int layout ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> < T > filter ; </a> 0
<a> private boolean <RARE_TOKEN> = true ; </a> 0
<a> private boolean <RARE_TOKEN> = true ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> HashSet < String > <RARE_TOKEN> = new HashSet < String > ( ) ; </a> 0
<a> <RARE_TOKEN> < T > adapter ; </a> 0
<a> private final Class < T > graphObjectClass ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> sessionTracker ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> PickerFragment ( Class < T > graphObjectClass , int layout , Bundle args ) { </a> 0
<a> this . graphObjectClass = graphObjectClass ; </a> 0
<a> this . layout = layout ; </a> 0
<a> <RARE_TOKEN> ( args ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> adapter = <RARE_TOKEN> ( ) ; </a> 0
<a> adapter . <RARE_TOKEN> ( new <RARE_TOKEN> . Filter < T > ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( T graphObject ) { </a> 0
<a> return <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Activity activity , <RARE_TOKEN> <RARE_TOKEN> , Bundle savedInstanceState ) { </a> 0
<a> super . <RARE_TOKEN> ( activity , <RARE_TOKEN> , savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> a = activity . <RARE_TOKEN> ( <RARE_TOKEN> , R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( a . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> String <RARE_TOKEN> = a . getString ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> String [ ] <RARE_TOKEN> = <RARE_TOKEN> . split ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( Arrays . asList ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = a . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = a . getString ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = a . getString ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = a . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = a . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> a . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , ViewGroup container , Bundle savedInstanceState ) { </a> 0
<a> ViewGroup view = ( ViewGroup ) <RARE_TOKEN> . <RARE_TOKEN> ( layout , container , false ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < ? > parent , View v , int position , long id ) { </a> 0
<a> <RARE_TOKEN> ( ( <RARE_TOKEN> ) parent , v , position ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new View . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( View v ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( adapter ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final Bundle savedInstanceState ) { </a> 0
<a> super . <RARE_TOKEN> ( savedInstanceState ) ; </a> 0
<a> sessionTracker = new <RARE_TOKEN> ( getActivity ( ) , new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( ! session . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( adapter ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( savedInstanceState , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( ViewGroup ) <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null && savedInstanceState != null ) { </a> 0
<a> boolean <RARE_TOKEN> = savedInstanceState . <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> sessionTracker . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> <RARE_TOKEN> ( outState ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( outState , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) == View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle args ) { </a> 0
<a> super . <RARE_TOKEN> ( args ) ; </a> 0
<a> <RARE_TOKEN> ( args ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> < T > <RARE_TOKEN> ( ) { </a> 0
<a> return filter ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < T > filter ) { </a> 0
<a> this . filter = filter ; </a> 0
<a> } </a> 0
<a> public Session getSession ( ) { </a> 0
<a> return sessionTracker . getSession ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Session session ) { </a> 0
<a> sessionTracker . <RARE_TOKEN> ( session ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Set < String > <RARE_TOKEN> ( ) { </a> 0
<a> return new HashSet < String > ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Collection < String > fields ) { </a> 0
<a> <RARE_TOKEN> = new HashSet < String > ( ) ; </a> 0
<a> if ( fields != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( fields ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> if ( ! <RARE_TOKEN> && <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Bundle <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( T graphObject ) { </a> 0
<a> if ( filter != null ) { </a> 0
<a> return filter . <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> List < T > <RARE_TOKEN> ( ) { </a> 0
<a> return adapter . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Bundle outState ) { </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> outState . putString ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> outState . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> outState . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> abstract Request <RARE_TOKEN> ( Session session ) ; </a> 0
<a> abstract <RARE_TOKEN> < T > <RARE_TOKEN> ( ) ; </a> 0
<a> abstract <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> abstract <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ( ) { </a> 0
<a> return getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> float <RARE_TOKEN> = ( ! adapter . isEmpty ( ) ) ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != this . <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( adapter != null ) { </a> 0
<a> adapter . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( View view , float <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> view . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Bundle <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> String [ ] <RARE_TOKEN> = <RARE_TOKEN> . split ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( Arrays . asList ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ViewGroup view ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> View <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> . LayoutParams <RARE_TOKEN> = new <RARE_TOKEN> . LayoutParams ( </a> 0
<a> <RARE_TOKEN> . LayoutParams . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . LayoutParams . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = ( Button ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( PickerFragment . this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) != null ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = ( TextView ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) != null ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , View v , int position ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> T graphObject = ( T ) <RARE_TOKEN> . <RARE_TOKEN> ( position ) ; </a> 0
<a> String id = adapter . <RARE_TOKEN> ( graphObject ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( id ) ; </a> 0
<a> adapter . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( PickerFragment . this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> Request request = <RARE_TOKEN> ( getSession ( ) ) ; </a> 0
<a> if ( request != null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( adapter != null ) { </a> 0
<a> boolean <RARE_TOKEN> = ! <RARE_TOKEN> . isEmpty ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = ! adapter . isEmpty ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> adapter . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( PickerFragment . this ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( PickerFragment . this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> < T > data ) { </a> 0
<a> if ( adapter != null ) { </a> 0
<a> View view = <RARE_TOKEN> . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> < T > <RARE_TOKEN> = adapter . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> final int <RARE_TOKEN> = ( view != null && </a> 0
<a> <RARE_TOKEN> . getType ( ) != <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) ? </a> 0
<a> view . <RARE_TOKEN> ( ) : 0 ; </a> 0
<a> boolean <RARE_TOKEN> = adapter . <RARE_TOKEN> ( data ) ; </a> 0
<a> if ( view != null && <RARE_TOKEN> != null ) { </a> 0
<a> final int <RARE_TOKEN> = adapter . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . graphObject ) ; </a> 0
<a> if ( <RARE_TOKEN> != - 1 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( PickerFragment . this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> >= 0 ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> adapter . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> view , int <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> view , int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void onError ( PickerFragment < ? > fragment , FacebookException error ) ; </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( PickerFragment < ? > fragment ) ; </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( PickerFragment < ? > fragment ) ; </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( PickerFragment < ? > fragment ) ; </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> < T > { </a> 0
<a> boolean <RARE_TOKEN> ( T graphObject ) ; </a> 0
<a> } </a> 0
<a> abstract class <RARE_TOKEN> { </a> 0
<a> protected final static int <RARE_TOKEN> = 2 * 1000 ; </a> 0
<a> protected <RARE_TOKEN> < T > loader ; </a> 0
<a> protected <RARE_TOKEN> < T > adapter ; </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < T > adapter ) { </a> 0
<a> loader = ( <RARE_TOKEN> < T > ) <RARE_TOKEN> ( ) . <RARE_TOKEN> ( 0 , null , </a> 0
<a> new <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> < T > > ( ) { </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> < <RARE_TOKEN> < T > > <RARE_TOKEN> ( int id , Bundle args ) { </a> 0
<a> return <RARE_TOKEN> . this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < <RARE_TOKEN> < T > > loader , </a> 0
<a> <RARE_TOKEN> < T > data ) { </a> 0
<a> if ( loader != <RARE_TOKEN> . this . loader ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> callback for <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( ( <RARE_TOKEN> < T > ) loader , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < <RARE_TOKEN> < T > > loader ) { </a> 0
<a> if ( loader != <RARE_TOKEN> . this . loader ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> callback for <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( ( <RARE_TOKEN> < T > ) loader ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> loader . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( FacebookException error , <RARE_TOKEN> < ? > loader ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . onError ( PickerFragment . this , error ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> this . adapter = adapter ; </a> 0
<a> this . adapter . <RARE_TOKEN> ( loader . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> adapter . <RARE_TOKEN> ( null ) ; </a> 0
<a> loader . <RARE_TOKEN> ( null ) ; </a> 0
<a> loader = null ; </a> 0
<a> adapter = null ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( loader != null ) { </a> 0
<a> loader . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Request request ) { </a> 0
<a> if ( loader != null ) { </a> 0
<a> loader . <RARE_TOKEN> ( request , true ) ; </a> 0
<a> <RARE_TOKEN> ( loader , request ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ! adapter . isEmpty ( ) || loader . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> < T > <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> < T > ( getActivity ( ) , graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> < T > loader , Request request ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> < T > loader ) { </a> 0
<a> adapter . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> < T > loader , <RARE_TOKEN> < T > data ) { </a> 0
<a> <RARE_TOKEN> ( data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> abstract class <RARE_TOKEN> { </a> 0
<a> abstract boolean <RARE_TOKEN> ( String id ) ; </a> 0
<a> abstract void <RARE_TOKEN> ( String id ) ; </a> 0
<a> abstract Collection < String > <RARE_TOKEN> ( ) ; </a> 0
<a> abstract void clear ( ) ; </a> 0
<a> abstract boolean isEmpty ( ) ; </a> 0
<a> abstract boolean <RARE_TOKEN> ( ) ; </a> 0
<a> abstract void <RARE_TOKEN> ( Bundle <RARE_TOKEN> , String key ) ; </a> 0
<a> abstract void <RARE_TOKEN> ( Bundle <RARE_TOKEN> , String key ) ; </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> public Collection < String > <RARE_TOKEN> ( ) { </a> 0
<a> return Arrays . asList ( new String [ ] { <RARE_TOKEN> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( String id ) { </a> 0
<a> return <RARE_TOKEN> != null && id != null && <RARE_TOKEN> . equals ( id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( String id ) { </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . equals ( id ) ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = id ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( Bundle <RARE_TOKEN> , String key ) { </a> 0
<a> if ( ! <RARE_TOKEN> . isEmpty ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . putString ( key , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( Bundle <RARE_TOKEN> , String key ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . getString ( key ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean isEmpty ( ) { </a> 0
<a> return <RARE_TOKEN> == null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private Set < String > <RARE_TOKEN> = new HashSet < String > ( ) ; </a> 0
<a> public Collection < String > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( String id ) { </a> 0
<a> return id != null && <RARE_TOKEN> . contains ( id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( String id ) { </a> 0
<a> if ( id != null ) { </a> 0
<a> if ( <RARE_TOKEN> . contains ( id ) ) { </a> 0
<a> <RARE_TOKEN> . remove ( id ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . add ( id ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( Bundle <RARE_TOKEN> , String key ) { </a> 0
<a> if ( ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . putString ( key , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( Bundle <RARE_TOKEN> , String key ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getString ( key ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> String [ ] <RARE_TOKEN> = <RARE_TOKEN> . split ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> Collections . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean isEmpty ( ) { </a> 0
<a> return <RARE_TOKEN> . isEmpty ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> abstract class <RARE_TOKEN> < U extends GraphObject > extends <RARE_TOKEN> < T > { </a> 0
<a> public <RARE_TOKEN> ( Context context ) { </a> 0
<a> super ( context ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = ( <RARE_TOKEN> || <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( ) ) ? View . <RARE_TOKEN> : View . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . res . <RARE_TOKEN> ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . util . <RARE_TOKEN> ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . util . * ; </a> 0
<a> public class <RARE_TOKEN> extends PickerFragment < GraphPlace > { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final int <RARE_TOKEN> = 1000 ; </a> 0
<a> public static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 * 1000 ; </a> 0
<a> private static final String ID = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = "name" ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String TAG = <RARE_TOKEN> ; </a> 0
<a> private Location location ; </a> 0
<a> private int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> = true ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( null ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Bundle args ) { </a> 0
<a> super ( GraphPlace . class , R . layout . <RARE_TOKEN> , args ) ; </a> 0
<a> <RARE_TOKEN> ( args ) ; </a> 0
<a> } </a> 0
<a> public Location <RARE_TOKEN> ( ) { </a> 0
<a> return location ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Location location ) { </a> 0
<a> this . location = location ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( this . <RARE_TOKEN> != null ) { </a> 0
<a> this . <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> if ( ! <RARE_TOKEN> && Utility . <RARE_TOKEN> ( this . <RARE_TOKEN> , <RARE_TOKEN> ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public GraphPlace <RARE_TOKEN> ( ) { </a> 0
<a> Collection < GraphPlace > <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> return ( <RARE_TOKEN> != null && <RARE_TOKEN> . size ( ) > 0 ) ? <RARE_TOKEN> . <RARE_TOKEN> ( ) . next ( ) : null ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Bundle <RARE_TOKEN> ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Activity activity , <RARE_TOKEN> <RARE_TOKEN> , Bundle savedInstanceState ) { </a> 0
<a> super . <RARE_TOKEN> ( activity , <RARE_TOKEN> , savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> a = activity . <RARE_TOKEN> ( <RARE_TOKEN> , R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( a . getInt ( R . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( a . getInt ( R . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> if ( a . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( a . getString ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = a . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> a . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final Bundle savedInstanceState ) { </a> 0
<a> super . <RARE_TOKEN> ( savedInstanceState ) ; </a> 0
<a> ViewGroup view = ( ViewGroup ) <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . LayoutParams <RARE_TOKEN> = new <RARE_TOKEN> . LayoutParams ( </a> 0
<a> <RARE_TOKEN> . LayoutParams . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . LayoutParams . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( view . findViewById ( R . id . <RARE_TOKEN> ) != null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> . LayoutParams ( </a> 0
<a> <RARE_TOKEN> . LayoutParams . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . LayoutParams . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . isEmpty ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Activity activity ) { </a> 0
<a> super . <RARE_TOKEN> ( activity ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) getActivity ( ) . <RARE_TOKEN> ( Context . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) getActivity ( ) . <RARE_TOKEN> ( Context . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Bundle outState ) { </a> 0
<a> super . <RARE_TOKEN> ( outState ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> outState . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , location ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> Request <RARE_TOKEN> ( Session session ) { </a> 0
<a> return <RARE_TOKEN> ( location , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , session ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> String <RARE_TOKEN> ( ) { </a> 0
<a> return getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> <RARE_TOKEN> < GraphPlace > <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> < GraphPlace > adapter = new <RARE_TOKEN> < GraphPlace > ( </a> 0
<a> this . getActivity ( ) ) { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( GraphPlace graphObject ) { </a> 0
<a> String <RARE_TOKEN> = graphObject . <RARE_TOKEN> ( ) ; </a> 0
<a> Integer <RARE_TOKEN> = ( Integer ) graphObject . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> String result = null ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> != null ) { </a> 0
<a> result = getString ( R . string . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> == null && <RARE_TOKEN> != null ) { </a> 0
<a> result = getString ( R . string . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> != null && <RARE_TOKEN> == null ) { </a> 0
<a> result = getString ( R . string . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( GraphPlace graphObject ) { </a> 0
<a> return R . layout . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( ) { </a> 0
<a> return R . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> adapter . <RARE_TOKEN> ( false ) ; </a> 0
<a> adapter . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> return adapter ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private Request <RARE_TOKEN> ( Location location , int <RARE_TOKEN> , int <RARE_TOKEN> , String <RARE_TOKEN> , </a> 0
<a> Set < String > <RARE_TOKEN> , </a> 0
<a> Session session ) { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , location , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> null ) ; </a> 0
<a> Set < String > fields = new HashSet < String > ( <RARE_TOKEN> ) ; </a> 0
<a> String [ ] <RARE_TOKEN> = new String [ ] { </a> 0
<a> ID , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } ; </a> 0
<a> fields . <RARE_TOKEN> ( Arrays . asList ( <RARE_TOKEN> ) ) ; </a> 0
<a> String <RARE_TOKEN> = adapter . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> fields . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Bundle parameters = request . <RARE_TOKEN> ( ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , fields ) ) ; </a> 0
<a> request . <RARE_TOKEN> ( parameters ) ; </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Bundle <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . getInt ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . getInt ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> if ( <RARE_TOKEN> . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> Location location = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( location ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . schedule ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } , 0 , <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> Handler handler = new Handler ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> handler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> FacebookException error = null ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> } catch ( FacebookException <RARE_TOKEN> ) { </a> 0
<a> error = <RARE_TOKEN> ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> error = new FacebookException ( e ) ; </a> 0
<a> } finally { </a> 0
<a> if ( error != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . onError ( <RARE_TOKEN> . this , error ) ; </a> 0
<a> } else { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , TAG , <RARE_TOKEN> <RARE_TOKEN> data : <RARE_TOKEN> , error ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . cancel ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < GraphPlace > adapter ) { </a> 0
<a> super . <RARE_TOKEN> ( adapter ) ; </a> 0
<a> this . adapter . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! loader . <RARE_TOKEN> ( ) ) { </a> 0
<a> loader . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> < GraphPlace > loader , </a> 0
<a> <RARE_TOKEN> < GraphPlace > data ) { </a> 0
<a> super . <RARE_TOKEN> ( loader , data ) ; </a> 0
<a> if ( data == null || loader . <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( data . <RARE_TOKEN> ( ) ) { </a> 0
<a> loader . <RARE_TOKEN> ( data . <RARE_TOKEN> ( ) ? <RARE_TOKEN> : 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> s , int start , int count , int <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> s , int start , int <RARE_TOKEN> , int count ) { </a> 0
<a> <RARE_TOKEN> ( s . toString ( ) , false ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> s ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . res . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . util . <RARE_TOKEN> ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . FacebookException ; </a> 0
<a> import com . facebook . LoggingBehavior ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> public class ProfilePictureView extends <RARE_TOKEN> { </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void onError ( FacebookException error ) ; </a> 0
<a> } </a> 0
<a> public static final String TAG = ProfilePictureView . class . getSimpleName ( ) ; </a> 0
<a> public static final int <RARE_TOKEN> = - 1 ; </a> 0
<a> public static final int <RARE_TOKEN> = - 2 ; </a> 0
<a> public static final int <RARE_TOKEN> = - 3 ; </a> 0
<a> public static final int <RARE_TOKEN> = - 4 ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final boolean <RARE_TOKEN> = true ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private Bitmap <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public ProfilePictureView ( Context context ) { </a> 0
<a> super ( context ) ; </a> 0
<a> <RARE_TOKEN> ( context ) ; </a> 0
<a> } </a> 0
<a> public ProfilePictureView ( Context context , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( context , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( context ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public ProfilePictureView ( Context context , <RARE_TOKEN> <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super ( context , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( context ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public final int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> public final String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> if ( Utility . <RARE_TOKEN> ( this . <RARE_TOKEN> ) || ! this . <RARE_TOKEN> . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public final <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> ViewGroup . LayoutParams params = <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) != <RARE_TOKEN> . <RARE_TOKEN> && </a> 0
<a> params . <RARE_TOKEN> == ViewGroup . LayoutParams . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) != <RARE_TOKEN> . <RARE_TOKEN> && </a> 0
<a> params . <RARE_TOKEN> == ViewGroup . LayoutParams . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( boolean <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> onSaveInstanceState ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = super . onSaveInstanceState ( ) ; </a> 0
<a> Bundle <RARE_TOKEN> = new Bundle ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> != null ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> state ) { </a> 0
<a> if ( state . getClass ( ) != Bundle . class ) { </a> 0
<a> super . <RARE_TOKEN> ( state ) ; </a> 0
<a> } else { </a> 0
<a> Bundle <RARE_TOKEN> = ( Bundle ) state ; </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . getInt ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . getInt ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . getInt ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ( Bitmap ) <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Context context ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( context ) ; </a> 0
<a> LayoutParams <RARE_TOKEN> = new LayoutParams ( </a> 0
<a> LayoutParams . <RARE_TOKEN> , </a> 0
<a> LayoutParams . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> a = getContext ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( a . getInt ( R . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = a . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> a . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null || <RARE_TOKEN> . length ( ) == 0 || </a> 0
<a> ( ( <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ) && </a> 0
<a> ( <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ) ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( <RARE_TOKEN> || <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ? </a> 0
<a> R . <RARE_TOKEN> . <RARE_TOKEN> : </a> 0
<a> R . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( getResources ( ) , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Bitmap <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . Builder <RARE_TOKEN> = new <RARE_TOKEN> . Builder ( </a> 0
<a> getContext ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> request = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( this ) </a> 0
<a> . setCallback ( </a> 0
<a> new <RARE_TOKEN> . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( <RARE_TOKEN> response ) { </a> 0
<a> <RARE_TOKEN> ( response ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . build ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = request ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , Log . <RARE_TOKEN> , TAG , e . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> response ) { </a> 0
<a> if ( response . getRequest ( ) == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> Bitmap <RARE_TOKEN> = response . <RARE_TOKEN> ( ) ; </a> 0
<a> Exception error = response . getError ( ) ; </a> 0
<a> if ( error != null ) { </a> 0
<a> <RARE_TOKEN> listener = <RARE_TOKEN> ; </a> 0
<a> if ( listener != null ) { </a> 0
<a> listener . onError ( new FacebookException ( </a> 0
<a> <RARE_TOKEN> in <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> for <RARE_TOKEN> " + <RARE_TOKEN> ( ) , error ) ) ; </a> 0
<a> } else { </a> 0
<a> Logger . log ( LoggingBehavior . <RARE_TOKEN> , Log . <RARE_TOKEN> , TAG , error . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( response . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> || <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( false ) ; </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ? <RARE_TOKEN> : <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ? <RARE_TOKEN> : <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = ( <RARE_TOKEN> != <RARE_TOKEN> ) || ( <RARE_TOKEN> != <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = R . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = R . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = R . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = R . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> default : </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return getResources ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> class <RARE_TOKEN> < T extends GraphObject > implements <RARE_TOKEN> < T > { </a> 0
<a> private int pos = - 1 ; </a> 0
<a> private boolean closed = false ; </a> 0
<a> private ArrayList < T > <RARE_TOKEN> = new ArrayList < T > ( ) ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> < T > other ) { </a> 0
<a> pos = other . pos ; </a> 0
<a> closed = other . closed ; </a> 0
<a> <RARE_TOKEN> = new ArrayList < T > ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( other . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = other . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Collection < T > <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> |= <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . size ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return pos ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( int offset ) { </a> 0
<a> return <RARE_TOKEN> ( pos + offset ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( int position ) { </a> 0
<a> final int count = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( position >= count ) { </a> 0
<a> pos = count ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( position < 0 ) { </a> 0
<a> pos = - 1 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> pos = position ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( 0 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> ( ) - 1 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( pos + 1 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( pos - 1 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( pos == 0 ) && ( <RARE_TOKEN> ( ) != 0 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isLast ( ) { </a> 0
<a> final int count = <RARE_TOKEN> ( ) ; </a> 0
<a> return ( pos == ( count - 1 ) ) && ( count != 0 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( <RARE_TOKEN> ( ) == 0 ) || ( pos == - 1 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> final int count = <RARE_TOKEN> ( ) ; </a> 0
<a> return ( count == 0 ) || ( pos == count ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public T <RARE_TOKEN> ( ) { </a> 0
<a> if ( pos < 0 ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( pos >= <RARE_TOKEN> . size ( ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> last <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . get ( pos ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) { </a> 0
<a> closed = true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return closed ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import com . facebook . internal . FileLruCache ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . URL ; </a> 0
<a> class <RARE_TOKEN> { </a> 0
<a> static final String TAG = <RARE_TOKEN> . class . getSimpleName ( ) ; </a> 0
<a> private static final String <RARE_TOKEN> = TAG + <RARE_TOKEN> ; </a> 0
<a> private volatile static FileLruCache <RARE_TOKEN> ; </a> 0
<a> synchronized static FileLruCache <RARE_TOKEN> ( Context context ) throws IOException { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new FileLruCache ( context . <RARE_TOKEN> ( ) , TAG , new FileLruCache . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static URL <RARE_TOKEN> ( Context context , URL url ) { </a> 0
<a> if ( url == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = url . toString ( ) ; </a> 0
<a> URL <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> InputStream stream ; </a> 0
<a> FileLruCache cache = <RARE_TOKEN> ( context ) ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> while ( ( stream = cache . get ( <RARE_TOKEN> , <RARE_TOKEN> ) ) != null ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( stream ) ; </a> 0
<a> char [ ] buffer = new char [ <RARE_TOKEN> ] ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> StringBuilder <RARE_TOKEN> = new StringBuilder ( ) ; </a> 0
<a> while ( ( <RARE_TOKEN> = <RARE_TOKEN> . read ( buffer , 0 , buffer . length ) ) > 0 ) { </a> 0
<a> <RARE_TOKEN> . append ( buffer , 0 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . toString ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = new URL ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } catch ( IOException <RARE_TOKEN> ) { </a> 0
<a> } finally { </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( Context context , URL <RARE_TOKEN> , URL <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null || <RARE_TOKEN> == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> OutputStream <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> FileLruCache cache = <RARE_TOKEN> ( context ) ; </a> 0
<a> <RARE_TOKEN> = cache . <RARE_TOKEN> ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . write ( <RARE_TOKEN> . toString ( ) . getBytes ( ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> } finally { </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = "name" ; </a> 0
<a> private static final String ID = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , new String [ ] { ID , <RARE_TOKEN> , <RARE_TOKEN> } ) ; </a> 0
<a> private LoginButton <RARE_TOKEN> ; </a> 0
<a> private LoginButton . <RARE_TOKEN> <RARE_TOKEN> = new LoginButton . <RARE_TOKEN> ( ) ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private GraphUser user ; </a> 0
<a> private Session <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private Session . StatusCallback <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , ViewGroup container , Bundle savedInstanceState ) { </a> 0
<a> View view = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , container , false ) ; </a> 0
<a> <RARE_TOKEN> = ( LoginButton ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> Session session = getSession ( ) ; </a> 0
<a> if ( session != null && ! session . equals ( Session . getActiveSession ( ) ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( session ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = ( TextView ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( view . <RARE_TOKEN> ( ) == null ) { </a> 0
<a> view . <RARE_TOKEN> ( getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> } else { </a> 0
<a> view . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session <RARE_TOKEN> ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( List < String > permissions ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , getSession ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( List < String > permissions ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , getSession ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( loginBehavior ) ; </a> 0
<a> } </a> 0
<a> public SessionLoginBehavior <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( LoginButton . <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public LoginButton . <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Session . StatusCallback callback ) { </a> 0
<a> this . <RARE_TOKEN> = callback ; </a> 0
<a> } </a> 0
<a> public Session . StatusCallback <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( SessionState state , Exception exception ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( getSession ( ) , state , exception ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> List < String > getPermissions ( ) { </a> 0
<a> return <RARE_TOKEN> . getPermissions ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> final Session currentSession = getSession ( ) ; </a> 0
<a> if ( currentSession != null && currentSession . isOpened ( ) ) { </a> 0
<a> if ( currentSession != <RARE_TOKEN> ) { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( currentSession , new Request . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( GraphUser <RARE_TOKEN> , Response response ) { </a> 0
<a> if ( currentSession == getSession ( ) ) { </a> 0
<a> user = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( response . getError ( ) != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( response . getError ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> request . <RARE_TOKEN> ( parameters ) ; </a> 0
<a> Request . <RARE_TOKEN> ( request ) ; </a> 0
<a> <RARE_TOKEN> = currentSession ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> user = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , - <RARE_TOKEN> , </a> 0
<a> getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> if ( user != null ) { </a> 0
<a> <RARE_TOKEN> request = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( request != null ) { </a> 0
<a> URL <RARE_TOKEN> = request . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . equals ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> if ( user . getId ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null , <RARE_TOKEN> , null , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( request ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . setText ( user . getName ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . setText ( getResources ( ) . getString ( </a> 0
<a> R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 0 , 0 , </a> 0
<a> getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null , <RARE_TOKEN> , null , null ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> int <RARE_TOKEN> = getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setText ( getResources ( ) . getString ( </a> 0
<a> R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null , null , null , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> request = null ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . Builder <RARE_TOKEN> = new <RARE_TOKEN> . Builder ( </a> 0
<a> getActivity ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> user . getId ( ) , </a> 0
<a> getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ) ; </a> 0
<a> request = <RARE_TOKEN> . <RARE_TOKEN> ( this ) </a> 0
<a> . setCallback ( </a> 0
<a> new <RARE_TOKEN> . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( <RARE_TOKEN> response ) { </a> 0
<a> <RARE_TOKEN> ( user . getId ( ) , response ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . build ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String id , <RARE_TOKEN> response ) { </a> 0
<a> if ( response != null ) { </a> 0
<a> Bitmap <RARE_TOKEN> = response . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> . this . getResources ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 0 , 0 , </a> 0
<a> getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = id ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null , <RARE_TOKEN> , null , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( response . getRequest ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . annotation . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . net . <RARE_TOKEN> ; </a> 0
<a> import android . net . http . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . * ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = Logger . <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final int <RARE_TOKEN> = android . R . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> private String url ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( Bundle values , FacebookException error ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , String url ) { </a> 0
<a> this ( context , url , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , String url , int <RARE_TOKEN> ) { </a> 0
<a> super ( context , <RARE_TOKEN> ) ; </a> 0
<a> this . url = url ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , String action , Bundle parameters , int <RARE_TOKEN> , <RARE_TOKEN> listener ) { </a> 0
<a> super ( context , <RARE_TOKEN> ) ; </a> 0
<a> if ( parameters == null ) { </a> 0
<a> parameters = new Bundle ( ) ; </a> 0
<a> } </a> 0
<a> parameters . putString ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> uri = Utility . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> + action , parameters ) ; </a> 0
<a> this . url = uri . toString ( ) ; </a> 0
<a> <RARE_TOKEN> = listener ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> <RARE_TOKEN> = listener ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void dismiss ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> super . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( DialogInterface <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( getContext ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( getContext ( ) . getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( DialogInterface <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( getContext ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> / 2 ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , new ViewGroup . LayoutParams ( </a> 0
<a> ViewGroup . LayoutParams . <RARE_TOKEN> , ViewGroup . LayoutParams . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , </a> 1
<a> new ViewGroup . LayoutParams ( ViewGroup . LayoutParams . <RARE_TOKEN> , ViewGroup . LayoutParams . <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Bundle values ) { </a> 0
<a> if ( <RARE_TOKEN> != null && ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( values , null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Throwable error ) { </a> 0
<a> if ( <RARE_TOKEN> != null && ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> FacebookException <RARE_TOKEN> = null ; </a> 0
<a> if ( error instanceof FacebookException ) { </a> 0
<a> <RARE_TOKEN> = ( FacebookException ) error ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = new FacebookException ( error ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( getContext ( ) ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = getContext ( ) . getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> private void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( getContext ( ) ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( getContext ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( url ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> . LayoutParams ( ViewGroup . LayoutParams . <RARE_TOKEN> , </a> 0
<a> ViewGroup . LayoutParams . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> view , String url ) { </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> " + url ) ; </a> 0
<a> if ( url . startsWith ( <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> Bundle values = Util . <RARE_TOKEN> ( url ) ; </a> 0
<a> String error = values . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( error == null ) { </a> 0
<a> error = values . getString ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String errorMessage = values . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( errorMessage == null ) { </a> 0
<a> errorMessage = values . getString ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = values . getString ( <RARE_TOKEN> ) ; </a> 0
<a> int errorCode = FacebookRequestError . <RARE_TOKEN> ; </a> 0
<a> if ( ! Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> try { </a> 0
<a> errorCode = Integer . parseInt ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> errorCode = FacebookRequestError . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( Utility . <RARE_TOKEN> ( error ) && Utility </a> 0
<a> . <RARE_TOKEN> ( errorMessage ) && errorCode == FacebookRequestError . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( values ) ; </a> 0
<a> } else if ( error != null && ( error . equals ( <RARE_TOKEN> ) || </a> 0
<a> error . equals ( <RARE_TOKEN> ) ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> FacebookRequestError <RARE_TOKEN> = new FacebookRequestError ( errorCode , error , errorMessage ) ; </a> 0
<a> <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> , errorMessage ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . this . dismiss ( ) ; </a> 0
<a> return true ; </a> 0
<a> } else if ( url . startsWith ( <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . this . dismiss ( ) ; </a> 0
<a> return true ; </a> 0
<a> } else if ( url . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> getContext ( ) . <RARE_TOKEN> ( </a> 0
<a> new Intent ( Intent . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( url ) ) ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> view , int errorCode , </a> 0
<a> String <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> super . <RARE_TOKEN> ( view , errorCode , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> , errorCode , <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> view , <RARE_TOKEN> handler , <RARE_TOKEN> error ) { </a> 0
<a> super . <RARE_TOKEN> ( view , handler , error ) ; </a> 0
<a> <RARE_TOKEN> ( new <RARE_TOKEN> ( null , <RARE_TOKEN> , null ) ) ; </a> 0
<a> handler . cancel ( ) ; </a> 0
<a> <RARE_TOKEN> . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> view , String url , Bitmap <RARE_TOKEN> ) { </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + url ) ; </a> 0
<a> super . <RARE_TOKEN> ( view , url , <RARE_TOKEN> ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> view , String url ) { </a> 0
<a> super . <RARE_TOKEN> ( view , url ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> < <RARE_TOKEN> extends <RARE_TOKEN> < ? > > { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private Context context ; </a> 0
<a> private Session session ; </a> 0
<a> private String applicationId ; </a> 0
<a> private String action ; </a> 0
<a> private int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> listener ; </a> 0
<a> private Bundle parameters ; </a> 0
<a> protected <RARE_TOKEN> ( Context context , Session session , String action , Bundle parameters ) { </a> 0
<a> Validate . <RARE_TOKEN> ( session , <RARE_TOKEN> ) ; </a> 0
<a> if ( ! session . isOpened ( ) ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> to <RARE_TOKEN> a Session that <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . session = session ; </a> 0
<a> <RARE_TOKEN> ( context , action , parameters ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> ( Context context , String applicationId , String action , Bundle parameters ) { </a> 0
<a> Validate . <RARE_TOKEN> ( applicationId , <RARE_TOKEN> ) ; </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> <RARE_TOKEN> ( context , action , parameters ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> <RARE_TOKEN> result = ( <RARE_TOKEN> ) this ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> this . listener = listener ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> <RARE_TOKEN> result = ( <RARE_TOKEN> ) this ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> build ( ) { </a> 0
<a> if ( session != null && session . isOpened ( ) ) { </a> 0
<a> parameters . putString ( <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 1
<a> parameters . putString ( <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } else { </a> 0
<a> parameters . putString ( <RARE_TOKEN> , applicationId ) ; </a> 1
<a> } </a> 0
<a> if ( ! parameters . containsKey ( <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> parameters . putString ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return new <RARE_TOKEN> ( context , action , parameters , <RARE_TOKEN> , listener ) ; </a> 0
<a> } </a> 0
<a> protected String <RARE_TOKEN> ( ) { </a> 0
<a> return applicationId ; </a> 0
<a> } </a> 0
<a> protected Context getContext ( ) { </a> 0
<a> return context ; </a> 0
<a> } </a> 0
<a> protected int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected Bundle <RARE_TOKEN> ( ) { </a> 0
<a> return parameters ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return listener ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Context context , String action , Bundle parameters ) { </a> 0
<a> this . context = context ; </a> 0
<a> this . action = action ; </a> 0
<a> if ( parameters != null ) { </a> 0
<a> this . parameters = parameters ; </a> 0
<a> } else { </a> 0
<a> this . parameters = new Bundle ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class Builder extends <RARE_TOKEN> < Builder > { </a> 0
<a> public Builder ( Context context , Session session , String action , Bundle parameters ) { </a> 0
<a> super ( context , session , action , parameters ) ; </a> 0
<a> } </a> 0
<a> public Builder ( Context context , String applicationId , String action , Bundle parameters ) { </a> 0
<a> super ( context , applicationId , action , parameters ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = "name" ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Context context , Session session ) { </a> 0
<a> super ( context , session , <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , Session session , Bundle parameters ) { </a> 0
<a> super ( context , session , <RARE_TOKEN> , parameters ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String id ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , id ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String id ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , id ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String source ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , source ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String name ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , name ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = "message" ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Context context , Session session ) { </a> 0
<a> super ( context , session , <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , Session session , Bundle parameters ) { </a> 0
<a> super ( context , session , <RARE_TOKEN> , parameters ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String message ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , message ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String id ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , id ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String data ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , data ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import com . facebook . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> class WorkQueue { </a> 0
<a> public static final int <RARE_TOKEN> = 8 ; </a> 0
<a> private final Object <RARE_TOKEN> = new Object ( ) ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> executor ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> private int <RARE_TOKEN> = 0 ; </a> 0
<a> WorkQueue ( ) { </a> 0
<a> this ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> WorkQueue ( int <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> WorkQueue ( int <RARE_TOKEN> , <RARE_TOKEN> executor ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . executor = executor ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( Runnable callback ) { </a> 0
<a> return <RARE_TOKEN> ( callback , true ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( Runnable callback , boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( callback ) ; </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> int count = 0 ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> . verify ( true ) ; </a> 0
<a> count ++ ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } while ( <RARE_TOKEN> != <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> assert <RARE_TOKEN> == count ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> execute ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void execute ( final <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> executor . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . run ( ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final Runnable callback ; </a> 0
<a> private <RARE_TOKEN> next ; </a> 0
<a> private <RARE_TOKEN> prev ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( Runnable callback ) { </a> 0
<a> this . callback = callback ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean cancel ( ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> Runnable <RARE_TOKEN> ( ) { </a> 0
<a> return callback ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return next ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> list , boolean <RARE_TOKEN> ) { </a> 0
<a> assert next == null ; </a> 0
<a> assert prev == null ; </a> 0
<a> if ( list == null ) { </a> 0
<a> list = next = prev = this ; </a> 0
<a> } else { </a> 0
<a> next = list ; </a> 0
<a> prev = list . prev ; </a> 0
<a> next . prev = prev . next = this ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ? this : list ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> list ) { </a> 0
<a> assert next != null ; </a> 0
<a> assert prev != null ; </a> 0
<a> if ( list == this ) { </a> 0
<a> if ( next == this ) { </a> 0
<a> list = null ; </a> 0
<a> } else { </a> 0
<a> list = next ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> next . prev = prev ; </a> 0
<a> prev . next = next ; </a> 0
<a> next = prev = null ; </a> 0
<a> return list ; </a> 0
<a> } </a> 0
<a> void verify ( boolean <RARE_TOKEN> ) { </a> 0
<a> assert prev . next == this ; </a> 0
<a> assert next . prev == this ; </a> 0
<a> assert <RARE_TOKEN> ( ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> interface <RARE_TOKEN> { </a> 0
<a> boolean cancel ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . <RARE_TOKEN> ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> List < String > permissions = Utility . <RARE_TOKEN> ( ) ; </a> 0
<a> AccessToken token = AccessToken . <RARE_TOKEN> ( permissions ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , token ) ; </a> 0
<a> assertEquals ( "" , token . getToken ( ) ) ; </a> 0
<a> assertTrue ( token . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( token . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( new Date ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> List < String > permissions = Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> AccessToken token = AccessToken . <RARE_TOKEN> ( permissions ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , token ) ; </a> 0
<a> assertEquals ( "" , token . getToken ( ) ) ; </a> 0
<a> assertTrue ( token . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( token . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( new Date ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> List < String > permissions = Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String token = <RARE_TOKEN> ; </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> , token ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> AccessToken accessToken = AccessToken . <RARE_TOKEN> ( permissions , bundle , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . <RARE_TOKEN> , accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> List < String > permissions = Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String token = <RARE_TOKEN> ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> , token ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> AccessToken accessToken = AccessToken </a> 0
<a> . <RARE_TOKEN> ( permissions , intent . <RARE_TOKEN> ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . <RARE_TOKEN> , accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> List < String > permissions = Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String token = <RARE_TOKEN> ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> , token ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> AccessToken accessToken = AccessToken </a> 0
<a> . <RARE_TOKEN> ( permissions , intent . <RARE_TOKEN> ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . <RARE_TOKEN> , accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < String > permissions = Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String token = <RARE_TOKEN> ; </a> 0
<a> long <RARE_TOKEN> = new Date ( ) . getTime ( ) / 1000 ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> , token ) ; </a> 0
<a> intent . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> , <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> intent . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> , permissions ) ; </a> 0
<a> AccessToken accessToken = AccessToken . <RARE_TOKEN> ( </a> 0
<a> intent . <RARE_TOKEN> ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . <RARE_TOKEN> , accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < String > permissions = Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String token = <RARE_TOKEN> ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , token ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , permissions ) ; </a> 0
<a> AccessToken accessToken = AccessToken . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . <RARE_TOKEN> , accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Bundle cache = accessToken . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( bundle , cache ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> for ( String token : new String [ ] { "" , <RARE_TOKEN> <RARE_TOKEN> random token <RARE_TOKEN> } ) { </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , token ) ; </a> 0
<a> assertEquals ( token , TokenCachingStrategy . getToken ( bundle ) ) ; </a> 0
<a> } </a> 0
<a> for ( Date <RARE_TOKEN> : new Date [ ] { new Date ( <RARE_TOKEN> ) , new Date ( ) } ) { </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , TokenCachingStrategy . <RARE_TOKEN> ( bundle ) ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , TokenCachingStrategy . <RARE_TOKEN> ( bundle ) ) ; </a> 0
<a> } </a> 0
<a> for ( long <RARE_TOKEN> : new long [ ] { 0 , - 1 , System . currentTimeMillis ( ) } ) { </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , TokenCachingStrategy . <RARE_TOKEN> ( bundle ) ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , TokenCachingStrategy . <RARE_TOKEN> ( bundle ) ) ; </a> 0
<a> } </a> 0
<a> for ( AccessTokenSource source : AccessTokenSource . values ( ) ) { </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , source ) ; </a> 0
<a> assertEquals ( source , TokenCachingStrategy . <RARE_TOKEN> ( bundle ) ) ; </a> 0
<a> } </a> 0
<a> List < String > <RARE_TOKEN> = Arrays . asList ( "" , <RARE_TOKEN> <RARE_TOKEN> random token <RARE_TOKEN> ) ; </a> 0
<a> List < String > <RARE_TOKEN> = Arrays . asList ( ) ; </a> 0
<a> ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( <RARE_TOKEN> ) ; </a> 0
<a> ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> List < List < String > > <RARE_TOKEN> = Arrays </a> 0
<a> . asList ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> for ( List < String > list : <RARE_TOKEN> ) { </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , list ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( list , TokenCachingStrategy . getPermissions ( bundle ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> AccessToken accessToken = AccessToken . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> Arrays . asList ( <RARE_TOKEN> , <RARE_TOKEN> ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> AccessToken res = <RARE_TOKEN> . <RARE_TOKEN> ( accessToken ) ; </a> 0
<a> assertEquals ( accessToken . getPermissions ( ) , res . getPermissions ( ) ) ; </a> 0
<a> assertEquals ( accessToken . getToken ( ) , res . getToken ( ) ) ; </a> 0
<a> assertEquals ( accessToken . <RARE_TOKEN> ( ) , res . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> List < String > permissions = Arrays . asList ( <RARE_TOKEN> to <RARE_TOKEN> , <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> AccessToken accessToken = new AccessToken ( <RARE_TOKEN> <RARE_TOKEN> , new Date ( ) , permissions , </a> 0
<a> AccessTokenSource . <RARE_TOKEN> , new Date ( ) ) ; </a> 0
<a> permissions = accessToken . getPermissions ( ) ; </a> 0
<a> try { </a> 0
<a> permissions . add ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException ex ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final String token = <RARE_TOKEN> token of <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> AccessToken accessToken = AccessToken . <RARE_TOKEN> ( token , null , null , null , null ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( new Date ( Long . MAX_VALUE ) , accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . <RARE_TOKEN> , accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 0 , accessToken . getPermissions ( ) . size ( ) ) ; </a> 0
<a> long <RARE_TOKEN> = accessToken . <RARE_TOKEN> ( ) . getTime ( ) - new Date ( ) . getTime ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> < 1000 ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final String token = <RARE_TOKEN> token of <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> final List < String > permissions = Arrays . asList ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> final Date <RARE_TOKEN> = new Date ( <RARE_TOKEN> , 5 , 3 ) ; </a> 0
<a> final Date <RARE_TOKEN> = new Date ( <RARE_TOKEN> , 8 , 15 ) ; </a> 0
<a> final AccessTokenSource source = AccessTokenSource . <RARE_TOKEN> ; </a> 0
<a> AccessToken accessToken = AccessToken </a> 0
<a> . <RARE_TOKEN> ( token , <RARE_TOKEN> , <RARE_TOKEN> , source , permissions ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( source , accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( permissions , accessToken . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( null , <RARE_TOKEN> , null , null ) ; </a> 0
<a> try { </a> 0
<a> TestRequestAsyncTask task = <RARE_TOKEN> ( request ) ; </a> 0
<a> assertNotNull ( task ) ; </a> 0
<a> } catch ( Throwable throwable ) { </a> 0
<a> assertNull ( throwable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> try { </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( ( Request [ ] ) null ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> try { </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( new Request [ ] { } ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IllegalArgumentException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> try { </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( new Request [ ] { null } ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = new Request ( null , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( Response response ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> GraphPlace <RARE_TOKEN> = response . <RARE_TOKEN> ( GraphPlace . class ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( request ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = new Request ( null , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( Response response ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> GraphPlace <RARE_TOKEN> = response . <RARE_TOKEN> ( GraphPlace . class ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> HttpURLConnection connection = Request . <RARE_TOKEN> ( request ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( connection , Arrays . asList ( new Request [ ] { request } ) ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = new Request ( null , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( request ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 3 ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> final int <RARE_TOKEN> = 8 ; </a> 0
<a> Request [ ] requests = new Request [ <RARE_TOKEN> ] ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; ++ i ) { </a> 0
<a> boolean <RARE_TOKEN> = ( i <RARE_TOKEN> 2 ) == 1 ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> requests [ i ] = new Request ( session , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> requests [ i ] = new Request ( session , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( requests ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> + 1 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> implements Request . <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( GraphUser <RARE_TOKEN> , Response response ) { </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( session . <RARE_TOKEN> ( ) , <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( session , response ) ; </a> 0
<a> onCompleted ( response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Request . <RARE_TOKEN> ( session , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } , false ) ; </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> implements Request . <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( List < GraphUser > <RARE_TOKEN> , Response response ) { </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( session , response ) ; </a> 0
<a> onCompleted ( response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Request . <RARE_TOKEN> ( session , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } , false ) ; </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = <RARE_TOKEN> ( null , <RARE_TOKEN> ) ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( session , <RARE_TOKEN> , null , null , </a> 0
<a> new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( Response response ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = response . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( session , <RARE_TOKEN> , null , null , </a> 0
<a> new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( Response response ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = response . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 3 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = new Request ( session , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> RequestBatch <RARE_TOKEN> = new RequestBatch ( request ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( <RARE_TOKEN> ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = new Request ( session , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> RequestBatch <RARE_TOKEN> = new RequestBatch ( request ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( <RARE_TOKEN> ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . model . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphObjectList ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . util . * ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private static final long <RARE_TOKEN> = <RARE_TOKEN> * 24 * <RARE_TOKEN> ; </a> 0
<a> private static final ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( </a> 0
<a> Arrays . asList ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> is <RARE_TOKEN> ; </a> 0
<a> class <RARE_TOKEN> extends AuthorizationClient { </a> 0
<a> Result result ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( getActivity ( ) ) ; </a> 0
<a> } </a> 0
<a> AuthorizationClient . AuthorizationRequest getRequest ( ) { </a> 0
<a> return pendingRequest ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( AuthorizationClient . AuthorizationRequest request ) { </a> 0
<a> pendingRequest = request ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( Result result ) { </a> 0
<a> this . result = result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> AuthorizationClient . AuthorizationRequest <RARE_TOKEN> ( ) { </a> 0
<a> Session . AuthorizationRequest request = new Session . AuthorizationRequest ( getActivity ( ) ) ; </a> 0
<a> request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return request . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> , String . format ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . <RARE_TOKEN> ( request , bundle , null ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNotNull ( token ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , token . getToken ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( new Date ( ) , token . <RARE_TOKEN> ( ) , <RARE_TOKEN> * 1000 , 1000 ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , token . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . <RARE_TOKEN> ( request , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . <RARE_TOKEN> ( request , null , new FacebookException ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> assertEquals ( client . result . errorMessage , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> int <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . <RARE_TOKEN> ( request , null , new FacebookException ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> , new Date ( ) . getTime ( ) / 1000 + <RARE_TOKEN> ) ; </a> 0
<a> bundle . putString ( NativeProtocol . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . <RARE_TOKEN> ( request , bundle ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNotNull ( token ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , token . getToken ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( new Date ( ) , token . <RARE_TOKEN> ( ) , <RARE_TOKEN> * 1000 , 1000 ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , token . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> , new ArrayList < String > ( Arrays . asList ( <RARE_TOKEN> <RARE_TOKEN> ) ) ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> , new Date ( ) . getTime ( ) / 1000 + <RARE_TOKEN> ) ; </a> 0
<a> bundle . putString ( NativeProtocol . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . size ( ) , request . getPermissions ( ) . size ( ) ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . <RARE_TOKEN> ( request , bundle ) ; </a> 0
<a> assertNull ( client . result ) ; </a> 0
<a> assertTrue ( client . <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 1 , request . getPermissions ( ) . size ( ) ) ; </a> 0
<a> assertTrue ( request . getPermissions ( ) . contains ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . size ( ) , request . getPermissions ( ) . size ( ) ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . <RARE_TOKEN> ( request , null ) ; </a> 0
<a> assertNull ( client . result ) ; </a> 0
<a> assertTrue ( client . <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . size ( ) , request . getPermissions ( ) . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> , new Date ( ) . getTime ( ) / 1000 + <RARE_TOKEN> ) ; </a> 0
<a> bundle . putString ( NativeProtocol . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . <RARE_TOKEN> , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNotNull ( token ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , token . getToken ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( new Date ( ) , token . <RARE_TOKEN> ( ) , <RARE_TOKEN> * 1000 , 1000 ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , token . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( NativeProtocol . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . <RARE_TOKEN> , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNull ( token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , client . result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( NativeProtocol . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . <RARE_TOKEN> , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNull ( token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , client . result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( NativeProtocol . <RARE_TOKEN> , NativeProtocol . <RARE_TOKEN> ) ; </a> 0
<a> bundle . putString ( NativeProtocol . <RARE_TOKEN> , NativeProtocol . <RARE_TOKEN> ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . <RARE_TOKEN> , intent ) ; </a> 0
<a> assertNull ( client . result ) ; </a> 0
<a> assertTrue ( client . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( AccessToken . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> bundle . putString ( AccessToken . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . <RARE_TOKEN> , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNotNull ( token ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , token . getToken ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( new Date ( ) , token . <RARE_TOKEN> ( ) , <RARE_TOKEN> * 1000 , 1000 ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , token . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . <RARE_TOKEN> , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> assertTrue ( client . result . errorMessage . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . <RARE_TOKEN> , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . <RARE_TOKEN> handler = client . new <RARE_TOKEN> ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . <RARE_TOKEN> , intent ) ; </a> 0
<a> assertNull ( client . result ) ; </a> 0
<a> assertTrue ( client . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final HashMap < String , String > <RARE_TOKEN> = new HashMap < String , String > ( ) ; </a> 0
<a> private List < String > <RARE_TOKEN> = Arrays . asList ( ) ; </a> 0
<a> private TestBlocker blocker ; </a> 0
<a> public <RARE_TOKEN> ( TestBlocker blocker ) { </a> 0
<a> this . blocker = blocker ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String accessToken , String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( accessToken , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( AccessToken accessToken , String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . put ( accessToken . getToken ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( List < String > <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( Result result ) { </a> 0
<a> super . <RARE_TOKEN> ( result ) ; </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> Request <RARE_TOKEN> ( final String accessToken ) { </a> 0
<a> return new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public Response <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . get ( accessToken ) ; </a> 0
<a> GraphUser user = GraphObject . Factory . create ( GraphUser . class ) ; </a> 0
<a> user . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return new Response ( this , null , user , false ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> Request <RARE_TOKEN> ( String accessToken ) { </a> 0
<a> final List < String > permissions = <RARE_TOKEN> ; </a> 0
<a> return new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public Response <RARE_TOKEN> ( ) { </a> 0
<a> GraphObject <RARE_TOKEN> = GraphObject . Factory . create ( ) ; </a> 0
<a> if ( permissions != null ) { </a> 0
<a> for ( String <RARE_TOKEN> : permissions ) { </a> 0
<a> <RARE_TOKEN> . setProperty ( <RARE_TOKEN> , 1 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> GraphObjectList < GraphObject > data = GraphObject . Factory . <RARE_TOKEN> ( GraphObject . class ) ; </a> 0
<a> data . add ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> result = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> result . setProperty ( <RARE_TOKEN> , data ) ; </a> 0
<a> return new Response ( this , null , result , false ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> RequestBatch <RARE_TOKEN> ( final Result <RARE_TOKEN> ) { </a> 0
<a> RequestBatch batch = super . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> batch . <RARE_TOKEN> ( blocker . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return new <RARE_TOKEN> ( batch ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> token for user <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> token for user <RARE_TOKEN> ; </a> 0
<a> AuthorizationClient . AuthorizationRequest <RARE_TOKEN> ( String accessToken ) { </a> 0
<a> Session . <RARE_TOKEN> request = new Session . <RARE_TOKEN> ( getActivity ( ) , <RARE_TOKEN> ) ; </a> 0
<a> request . <RARE_TOKEN> ( accessToken ) ; </a> 0
<a> return request . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( blocker ) ; </a> 0
<a> client . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> client . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> client . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> AccessToken token = AccessToken . <RARE_TOKEN> ( <RARE_TOKEN> , null , null , null , <RARE_TOKEN> ) ; </a> 0
<a> AuthorizationClient . Result result = AuthorizationClient . Result . <RARE_TOKEN> ( token ) ; </a> 0
<a> client . <RARE_TOKEN> ( result ) ; </a> 0
<a> blocker . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> AccessToken <RARE_TOKEN> = client . result . token ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getToken ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( blocker ) ; </a> 0
<a> client . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> client . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> client . <RARE_TOKEN> ( Arrays . asList ( <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> AccessToken token = AccessToken . <RARE_TOKEN> ( <RARE_TOKEN> , null , null , null , <RARE_TOKEN> ) ; </a> 0
<a> AuthorizationClient . Result result = AuthorizationClient . Result . <RARE_TOKEN> ( token ) ; </a> 0
<a> client . <RARE_TOKEN> ( result ) ; </a> 0
<a> blocker . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> AccessToken <RARE_TOKEN> = client . result . token ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getToken ( ) ) ; </a> 0
<a> assertEquals ( Arrays . asList ( <RARE_TOKEN> <RARE_TOKEN> ) , <RARE_TOKEN> . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( blocker ) ; </a> 0
<a> client . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> client . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> client . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> AccessToken token = AccessToken . <RARE_TOKEN> ( <RARE_TOKEN> , null , null , null , <RARE_TOKEN> ) ; </a> 0
<a> AuthorizationClient . Result result = AuthorizationClient . Result . <RARE_TOKEN> ( token ) ; </a> 0
<a> client . <RARE_TOKEN> ( result ) ; </a> 0
<a> blocker . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . <RARE_TOKEN> . <RARE_TOKEN> , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> client = new <RARE_TOKEN> ( blocker ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> request . <RARE_TOKEN> ( true ) ; </a> 0
<a> client . <RARE_TOKEN> ( request ) ; </a> 0
<a> AccessToken token = AccessToken . <RARE_TOKEN> ( <RARE_TOKEN> , null , null , null , <RARE_TOKEN> ) ; </a> 0
<a> AuthorizationClient . Result result = AuthorizationClient . Result . <RARE_TOKEN> ( token ) ; </a> 0
<a> client . <RARE_TOKEN> ( result ) ; </a> 0
<a> AccessToken <RARE_TOKEN> = client . result . token ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getToken ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> static class <RARE_TOKEN> extends AuthorizationClient { </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException , <RARE_TOKEN> { </a> 0
<a> AuthorizationClient client = new <RARE_TOKEN> ( ) ; </a> 0
<a> client . <RARE_TOKEN> ( getActivity ( ) ) ; </a> 0
<a> client . <RARE_TOKEN> ( new AuthorizationClient . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( AuthorizationClient . Result result ) { </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> client . <RARE_TOKEN> ( new AuthorizationClient . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> client . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( client ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Object obj = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( obj ) ; </a> 0
<a> assertTrue ( obj instanceof AuthorizationClient ) ; </a> 0
<a> AuthorizationClient <RARE_TOKEN> = ( AuthorizationClient ) obj ; </a> 0
<a> assertNull ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> assertNull ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> assertNull ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> assertNull ( <RARE_TOKEN> . context ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> instanceof AuthorizationClient . <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> . size ( ) > 0 ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> . pendingRequest ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . pendingRequest . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> Request . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> batch = new <RARE_TOKEN> ( ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( null , null ) ; </a> 0
<a> assertEquals ( 0 , batch . size ( ) ) ; </a> 0
<a> batch . add ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 1 , batch . size ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , batch . get ( 0 ) ) ; </a> 0
<a> String key = <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> assertNull ( batch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> batch . <RARE_TOKEN> ( key ) ; </a> 0
<a> assertEquals ( key , batch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( ! batch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> batch . <RARE_TOKEN> ( true ) ; </a> 0
<a> assertTrue ( batch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( null , null ) ; </a> 0
<a> RequestBatch batch = new RequestBatch ( new Request [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ; </a> 0
<a> assertEquals ( 2 , batch . size ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , batch . get ( 0 ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , batch . get ( 1 ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> Request . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> assertTrue ( responses . get ( 0 ) . getError ( ) == null ) ; </a> 0
<a> assertTrue ( responses . get ( 1 ) . getError ( ) == null ) ; </a> 0
<a> GraphPlace <RARE_TOKEN> = responses . get ( 0 ) . <RARE_TOKEN> ( GraphPlace . class ) ; </a> 0
<a> GraphPlace <RARE_TOKEN> = responses . get ( 1 ) . <RARE_TOKEN> ( GraphPlace . class ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> != null ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> assertTrue ( responses . get ( 0 ) . getError ( ) != null ) ; </a> 0
<a> assertTrue ( responses . get ( 1 ) . getError ( ) != null ) ; </a> 0
<a> FacebookRequestError error = responses . get ( 0 ) . getError ( ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) instanceof <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) != FacebookRequestError . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( session , <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( session , <RARE_TOKEN> ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 4 , responses . size ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( responses ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = responses . get ( 2 ) . <RARE_TOKEN> ( ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = responses . get ( 3 ) . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getProperty ( "message" ) , <RARE_TOKEN> . getProperty ( "message" ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getProperty ( "message" ) , <RARE_TOKEN> . getProperty ( "message" ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession <RARE_TOKEN> = openTestSessionWithSharedUser ( ) ; </a> 0
<a> TestSession <RARE_TOKEN> = openTestSessionWithSharedUser ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( <RARE_TOKEN> , null ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( <RARE_TOKEN> , null ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> GraphUser <RARE_TOKEN> = responses . get ( 0 ) . <RARE_TOKEN> ( GraphUser . class ) ; </a> 0
<a> GraphUser <RARE_TOKEN> = responses . get ( 1 ) . <RARE_TOKEN> ( GraphUser . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . getId ( ) . equals ( <RARE_TOKEN> . getId ( ) ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( session , <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> GraphUser <RARE_TOKEN> = responses . get ( 0 ) . <RARE_TOKEN> ( GraphUser . class ) ; </a> 0
<a> GraphUser <RARE_TOKEN> = responses . get ( 1 ) . <RARE_TOKEN> ( GraphUser . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . getId ( ) . equals ( <RARE_TOKEN> . getId ( ) ) ) ; </a> 0
<a> assertEquals ( session . <RARE_TOKEN> ( ) , <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( session , <RARE_TOKEN> ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> GraphUser <RARE_TOKEN> = responses . get ( 0 ) . <RARE_TOKEN> ( GraphUser . class ) ; </a> 0
<a> GraphUser <RARE_TOKEN> = responses . get ( 1 ) . <RARE_TOKEN> ( GraphUser . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . getId ( ) . equals ( <RARE_TOKEN> . getId ( ) ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> assertEquals ( session . <RARE_TOKEN> ( ) , <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = <RARE_TOKEN> ( null ) ; </a> 0
<a> String <RARE_TOKEN> = session . <RARE_TOKEN> ( ) ; </a> 0
<a> Request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> GraphUser <RARE_TOKEN> = responses . get ( 0 ) . <RARE_TOKEN> ( GraphUser . class ) ; </a> 0
<a> GraphUser <RARE_TOKEN> = responses . get ( 1 ) . <RARE_TOKEN> ( GraphUser . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> final int <RARE_TOKEN> = 8 ; </a> 0
<a> Request [ ] requests = new Request [ <RARE_TOKEN> ] ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; ++ i ) { </a> 0
<a> boolean <RARE_TOKEN> = ( i <RARE_TOKEN> 2 ) == 1 ; </a> 0
<a> requests [ i ] = new Request ( session , <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( requests ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , responses . size ( ) ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; ++ i ) { </a> 0
<a> boolean <RARE_TOKEN> = ( i <RARE_TOKEN> 2 ) == 1 ; </a> 0
<a> Response response = responses . get ( i ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertNotNull ( response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> assertNotNull ( response . getError ( ) ) ; </a> 0
<a> assertNull ( response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( session , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( session , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = <RARE_TOKEN> ( null , <RARE_TOKEN> ) ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( session , <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( session , <RARE_TOKEN> ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 4 , responses . size ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( responses ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = responses . get ( 2 ) . <RARE_TOKEN> ( ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = responses . get ( 3 ) . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> ArrayList < Request > requests = new ArrayList < Request > ( ) ; </a> 0
<a> final ArrayList < Boolean > <RARE_TOKEN> = new ArrayList < Boolean > ( ) ; </a> 0
<a> final int <RARE_TOKEN> = 4 ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; ++ i ) { </a> 0
<a> Request request = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> request . setCallback ( new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> <RARE_TOKEN> . add ( true ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> requests . add ( request ) ; </a> 0
<a> } </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( requests ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . size ( ) == <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> Response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , null ) ; </a> 0
<a> <RARE_TOKEN> batch = new <RARE_TOKEN> ( request ) ; </a> 0
<a> batch . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 1 , responses . size ( ) ) ; </a> 0
<a> Response response = responses . get ( 0 ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( ! response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> responses = Request . <RARE_TOKEN> ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 1 , responses . size ( ) ) ; </a> 0
<a> response = responses . get ( 0 ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> batch . <RARE_TOKEN> ( true ) ; </a> 0
<a> responses = Request . <RARE_TOKEN> ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 1 , responses . size ( ) ) ; </a> 0
<a> response = responses . get ( 0 ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( ! response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> Response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , null ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , null ) ; </a> 0
<a> <RARE_TOKEN> batch = new <RARE_TOKEN> ( new Request [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ; </a> 0
<a> batch . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> for ( Response response : responses ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( ! response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> responses = Request . <RARE_TOKEN> ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> for ( Response response : responses ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> batch . <RARE_TOKEN> ( true ) ; </a> 0
<a> responses = Request . <RARE_TOKEN> ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> for ( Response response : responses ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( ! response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> Response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Response <RARE_TOKEN> = responses . get ( 0 ) ; </a> 0
<a> Response <RARE_TOKEN> = responses . get ( 1 ) ; </a> 0
<a> assertNull ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Response <RARE_TOKEN> = responses . get ( 0 ) ; </a> 0
<a> Response <RARE_TOKEN> = responses . get ( 1 ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> RequestBatch batch = new RequestBatch ( ) ; </a> 0
<a> RequestBatch . Callback <RARE_TOKEN> = new RequestBatch . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( RequestBatch batch ) { </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> RequestBatch . Callback <RARE_TOKEN> = new RequestBatch . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( RequestBatch batch ) { </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> batch . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> batch . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 2 , batch . <RARE_TOKEN> ( ) . size ( ) ) ; </a> 0
<a> batch . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> batch . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 0 , batch . <RARE_TOKEN> ( ) . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final AtomicInteger count = new AtomicInteger ( ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( null , <RARE_TOKEN> , new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> count . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( null , <RARE_TOKEN> , new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> count . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> RequestBatch batch = new RequestBatch ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> batch . <RARE_TOKEN> ( new RequestBatch . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( RequestBatch batch ) { </a> 0
<a> count . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> batch . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( 3 , count . get ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . res . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . test . <RARE_TOKEN> ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import junit . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import org . json . <RARE_TOKEN> ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> public class <RARE_TOKEN> < T extends Activity > extends <RARE_TOKEN> < T > { </a> 0
<a> private static final String TAG = <RARE_TOKEN> . class . getSimpleName ( ) ; </a> 0
<a> private static String applicationId ; </a> 0
<a> private static String <RARE_TOKEN> ; </a> 0
<a> public final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private TestBlocker <RARE_TOKEN> ; </a> 0
<a> protected synchronized TestBlocker <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = TestBlocker . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Class < T > <RARE_TOKEN> ) { </a> 0
<a> super ( "" , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected TestSession <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> protected TestSession <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , new ArrayList < String > ( ) ) ; </a> 0
<a> } </a> 0
<a> protected TestSession <RARE_TOKEN> ( String <RARE_TOKEN> , </a> 0
<a> List < String > permissions ) { </a> 0
<a> return TestSession . <RARE_TOKEN> ( getActivity ( ) , permissions , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected TestSession <RARE_TOKEN> ( TestBlocker <RARE_TOKEN> ) { </a> 0
<a> return TestSession . <RARE_TOKEN> ( getActivity ( ) , null ) ; </a> 0
<a> } </a> 0
<a> protected TestSession openTestSessionWithSharedUser ( final TestBlocker blocker ) { </a> 0
<a> return openTestSessionWithSharedUser ( blocker , null ) ; </a> 0
<a> } </a> 0
<a> protected TestSession openTestSessionWithSharedUser ( final TestBlocker blocker , String <RARE_TOKEN> ) { </a> 0
<a> TestSession session = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( getActivity ( ) , session , blocker ) ; </a> 0
<a> return session ; </a> 0
<a> } </a> 0
<a> protected TestSession openTestSessionWithSharedUser ( ) { </a> 0
<a> return openTestSessionWithSharedUser ( ( String ) null ) ; </a> 0
<a> } </a> 0
<a> protected TestSession openTestSessionWithSharedUser ( String <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , ( String [ ] ) null ) ; </a> 0
<a> } </a> 0
<a> protected TestSession <RARE_TOKEN> ( String <RARE_TOKEN> , </a> 0
<a> String ... permissions ) { </a> 0
<a> List < String > <RARE_TOKEN> = ( permissions != null ) ? Arrays . asList ( permissions ) : null ; </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected TestSession <RARE_TOKEN> ( String <RARE_TOKEN> , </a> 0
<a> List < String > permissions ) { </a> 0
<a> final TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> TestSession session = <RARE_TOKEN> ( <RARE_TOKEN> , permissions ) ; </a> 0
<a> <RARE_TOKEN> ( getActivity ( ) , session , blocker ) ; </a> 0
<a> return session ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( TestBlocker <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw e ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> " + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( int <RARE_TOKEN> ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( final int <RARE_TOKEN> , final Runnable <RARE_TOKEN> ) throws Throwable { </a> 0
<a> final TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . run ( ) ; </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> blocker . <RARE_TOKEN> ( 1 + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> protected synchronized void <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( <RARE_TOKEN> . class ) { </a> 0
<a> if ( applicationId != null && <RARE_TOKEN> != null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) . getContext ( ) . getResources ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> InputStream stream = null ; </a> 0
<a> final String errorMessage = <RARE_TOKEN> not read applicationId <RARE_TOKEN> <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> " </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> run <RARE_TOKEN> <RARE_TOKEN> " ; </a> 0
<a> try { </a> 0
<a> stream = <RARE_TOKEN> . open ( <RARE_TOKEN> ) ; </a> 0
<a> String string = Utility . <RARE_TOKEN> ( stream ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( string ) ; </a> 0
<a> Object obj = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! ( obj instanceof JSONObject ) ) { </a> 0
<a> fail ( errorMessage + <RARE_TOKEN> not <RARE_TOKEN> a <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> JSONObject jsonObject = ( JSONObject ) obj ; </a> 0
<a> applicationId = jsonObject . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = jsonObject . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( Utility . <RARE_TOKEN> ( applicationId ) || Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> fail ( errorMessage + <RARE_TOKEN> or <RARE_TOKEN> config values <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> TestSession . <RARE_TOKEN> ( applicationId ) ; </a> 0
<a> TestSession . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> fail ( errorMessage + e . toString ( ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> fail ( errorMessage + e . toString ( ) ) ; </a> 0
<a> } finally { </a> 0
<a> if ( stream != null ) { </a> 0
<a> try { </a> 0
<a> stream . close ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> fail ( errorMessage + e . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( Activity activity , TestSession session ) { </a> 0
<a> final TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( activity , session , blocker ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( Activity activity , TestSession session , final TestBlocker blocker ) { </a> 0
<a> Session . OpenRequest openRequest = new Session . OpenRequest ( activity ) . </a> 0
<a> setCallback ( new Session . StatusCallback ( ) { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( exception != null ) { </a> 0
<a> Log . w ( TAG , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> an error <RARE_TOKEN> <RARE_TOKEN> " + exception . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> assertTrue ( exception == null ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> session . <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> <RARE_TOKEN> ( blocker , 1 ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( LoggingBehavior . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( LoggingBehavior . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected Bundle <RARE_TOKEN> ( String token ) { </a> 0
<a> Bundle extras = new Bundle ( ) ; </a> 0
<a> String <RARE_TOKEN> = String </a> 0
<a> . format ( <RARE_TOKEN> , </a> 0
<a> TestSession . <RARE_TOKEN> ( ) , token ) ; </a> 0
<a> extras . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> extras . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> extras . <RARE_TOKEN> ( <RARE_TOKEN> , Long . <RARE_TOKEN> ( TestSession . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> extras . putString ( <RARE_TOKEN> , token ) ; </a> 0
<a> return extras ; </a> 0
<a> } </a> 0
<a> interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> String getId ( ) ; </a> 0
<a> } </a> 0
<a> protected GraphObject <RARE_TOKEN> ( Session session , String id ) { </a> 0
<a> Request request = new Request ( session , id ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphObject result = response . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( result ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> protected GraphObject <RARE_TOKEN> ( Session session , String path , GraphObject graphObject ) { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , path , graphObject , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> <RARE_TOKEN> result = response . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> assertNotNull ( result ) ; </a> 0
<a> assertNotNull ( result . getId ( ) ) ; </a> 0
<a> return <RARE_TOKEN> ( session , result . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = TestSession . <RARE_TOKEN> ( ) ; </a> 0
<a> Request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected < U extends GraphObject > U <RARE_TOKEN> ( Session session , String graphPath , GraphObject graphObject , </a> 0
<a> String fields , Class < U > <RARE_TOKEN> ) { </a> 0
<a> Request create = Request . <RARE_TOKEN> ( session , graphPath , graphObject , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> create . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request get = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( fields != null ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , fields ) ; </a> 0
<a> get . <RARE_TOKEN> ( parameters ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( create , get , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected < U extends GraphObject > U <RARE_TOKEN> ( Session session , String graphPath , GraphObject graphObject , </a> 0
<a> String fields , Class < U > <RARE_TOKEN> ) { </a> 0
<a> Request <RARE_TOKEN> = Request . <RARE_TOKEN> ( session , graphPath , graphObject , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> Request get = Request . <RARE_TOKEN> ( session , graphPath , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( fields != null ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , fields ) ; </a> 0
<a> get . <RARE_TOKEN> ( parameters ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , get , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected < U extends GraphObject > U <RARE_TOKEN> ( Request post , Request get , Class < U > <RARE_TOKEN> ) { </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( post , get ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> U <RARE_TOKEN> = responses . get ( 1 ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected GraphObject <RARE_TOKEN> ( ) { </a> 0
<a> GraphObject <RARE_TOKEN> = GraphObject . Factory . create ( ) ; </a> 0
<a> String message = String . format ( </a> 0
<a> <RARE_TOKEN> out <RARE_TOKEN> <RARE_TOKEN> new status <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> for <RARE_TOKEN> <RARE_TOKEN> , new Date ( ) ) ; </a> 0
<a> <RARE_TOKEN> . setProperty ( "message" , message ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected Bitmap <RARE_TOKEN> ( int size ) { </a> 0
<a> Bitmap <RARE_TOKEN> = Bitmap . <RARE_TOKEN> ( size , size , Bitmap . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( TestSession session , String <RARE_TOKEN> ) { </a> 0
<a> String graphPath = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , graphPath , null , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> assertTrue ( error == null || error . <RARE_TOKEN> ( ) == <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( TestSession <RARE_TOKEN> , TestSession <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( Date expected , Date <RARE_TOKEN> , long <RARE_TOKEN> ) { </a> 0
<a> long <RARE_TOKEN> = Math . <RARE_TOKEN> ( expected . getTime ( ) - <RARE_TOKEN> . getTime ( ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> < <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( Date expected , Date <RARE_TOKEN> , long <RARE_TOKEN> , long <RARE_TOKEN> ) { </a> 0
<a> long <RARE_TOKEN> = Math . <RARE_TOKEN> ( expected . getTime ( ) - <RARE_TOKEN> . getTime ( ) ) - <RARE_TOKEN> ; </a> 0
<a> assertTrue ( <RARE_TOKEN> < <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( List < Response > responses ) { </a> 0
<a> for ( int i = 0 ; i < responses . size ( ) ; ++ i ) { </a> 0
<a> Response response = responses . get ( i ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected File <RARE_TOKEN> ( String <RARE_TOKEN> ) throws IOException { </a> 0
<a> InputStream <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) . getContext ( ) . getResources ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . open ( <RARE_TOKEN> ) ; </a> 0
<a> File <RARE_TOKEN> = getActivity ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> File <RARE_TOKEN> = File . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> * 2 ; </a> 0
<a> byte [ ] buffer = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> int n = 0 ; </a> 0
<a> while ( ( n = <RARE_TOKEN> . read ( buffer ) ) != - 1 ) { </a> 0
<a> <RARE_TOKEN> . write ( buffer , 0 , n ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } finally { </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( final Runnable <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> Runnable <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ? new <RARE_TOKEN> ( ! <RARE_TOKEN> ) : null ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . run ( ) ; </a> 0
<a> <RARE_TOKEN> . open ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> Handler handler = blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> handler . post ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> boolean success = <RARE_TOKEN> . block ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( success ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> while ( ! <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> fail ( e . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected TestRequestAsyncTask <RARE_TOKEN> ( final Request ... requests ) throws Throwable { </a> 0
<a> final ArrayList < TestRequestAsyncTask > result = new ArrayList < TestRequestAsyncTask > ( ) ; </a> 0
<a> <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> result . add ( new TestRequestAsyncTask ( requests ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> return result . isEmpty ( ) ? null : result . get ( 0 ) ; </a> 0
<a> } </a> 0
<a> protected class TestRequestAsyncTask extends <RARE_TOKEN> { </a> 0
<a> private final TestBlocker blocker = <RARE_TOKEN> . this . <RARE_TOKEN> ( ) ; </a> 0
<a> public TestRequestAsyncTask ( Request ... requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> public TestRequestAsyncTask ( List < Request > requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> public TestRequestAsyncTask ( RequestBatch requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> public TestRequestAsyncTask ( HttpURLConnection connection , Request ... requests ) { </a> 0
<a> super ( connection , requests ) ; </a> 0
<a> } </a> 0
<a> public TestRequestAsyncTask ( HttpURLConnection connection , List < Request > requests ) { </a> 0
<a> super ( connection , requests ) ; </a> 0
<a> } </a> 0
<a> public TestRequestAsyncTask ( HttpURLConnection connection , RequestBatch requests ) { </a> 0
<a> super ( connection , requests ) ; </a> 0
<a> } </a> 0
<a> public final TestBlocker <RARE_TOKEN> ( ) { </a> 0
<a> return blocker ; </a> 0
<a> } </a> 0
<a> public final Exception <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( List < Response > result ) { </a> 0
<a> try { </a> 0
<a> super . <RARE_TOKEN> ( result ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) != null ) { </a> 0
<a> blocker . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> Log . d ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> execute ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Handler handler = new Handler ( blocker . <RARE_TOKEN> ( ) ) ; </a> 0
<a> handler . post ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 0
<a> Class . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } catch ( Throwable throwable ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected class <RARE_TOKEN> implements Request . Callback { </a> 0
<a> private final TestBlocker blocker ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( TestBlocker blocker , boolean <RARE_TOKEN> ) { </a> 0
<a> this . blocker = blocker ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> . this . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> try { </a> 0
<a> if ( Thread . currentThread ( ) != blocker ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> " + Thread . currentThread ( ) . getId ( ) </a> 0
<a> + <RARE_TOKEN> expected to be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + blocker . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> && response . getError ( ) != null ) { </a> 0
<a> throw response . getError ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( ! <RARE_TOKEN> && response . getError ( ) == null ) { </a> 0
<a> throw new FacebookException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( response ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> blocker . <RARE_TOKEN> ( e ) ; </a> 0
<a> } finally { </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( Response response ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static abstract class <RARE_TOKEN> extends Request { </a> 0
<a> public abstract Response <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> extends RequestBatch { </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> ... requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( RequestBatch requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> List < Response > <RARE_TOKEN> ( ) { </a> 0
<a> List < Request > requests = <RARE_TOKEN> ( ) ; </a> 0
<a> List < Response > responses = new ArrayList < Response > ( ) ; </a> 0
<a> for ( Request request : requests ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) request ; </a> 0
<a> responses . add ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> Request . <RARE_TOKEN> ( this , responses ) ; </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( ) ; </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> . get ( ) == false ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( false , true ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } catch ( Throwable throwable ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> loader = Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> Class < ? > <RARE_TOKEN> = Class . <RARE_TOKEN> ( <RARE_TOKEN> , true , loader ) ; </a> 0
<a> Class < ? > <RARE_TOKEN> = Class . <RARE_TOKEN> ( <RARE_TOKEN> , true , loader ) ; </a> 0
<a> Class < ? > <RARE_TOKEN> = Class . <RARE_TOKEN> ( <RARE_TOKEN> , true , </a> 0
<a> loader ) ; </a> 0
<a> Object <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . newInstance ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Object <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import com . facebook . <RARE_TOKEN> . <RARE_TOKEN> . R ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> path <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> token must be <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the current <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> token must be <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the current <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> token must be <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the current <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> token must be <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the current <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> request limit <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final String <RARE_TOKEN> = <RARE_TOKEN> error <RARE_TOKEN> ; </a> 0
<a> FacebookRequestError error = new FacebookRequestError ( null , new FacebookException ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( <RARE_TOKEN> ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> path <RARE_TOKEN> <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray <RARE_TOKEN> = new JSONArray ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 2 , <RARE_TOKEN> . length ( ) ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = ( JSONObject ) <RARE_TOKEN> . get ( 0 ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> token must be <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the current <RARE_TOKEN> , </a> 0
<a> error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) instanceof JSONArray ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( <RARE_TOKEN> ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> request limit <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertNull ( error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 4 , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( <RARE_TOKEN> ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertNull ( error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 2 , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( <RARE_TOKEN> ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 200 , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( R . string . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( <RARE_TOKEN> ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( R . string . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( <RARE_TOKEN> ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( R . string . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( <RARE_TOKEN> ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . <RARE_TOKEN> . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( R . string . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import java . util . Date ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> GraphObject status = <RARE_TOKEN> ( ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = <RARE_TOKEN> ( session , <RARE_TOKEN> , status , null , GraphObject . class ) ; </a> 0
<a> String <RARE_TOKEN> = ( String ) <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = GraphObject . Factory . create ( ) ; </a> 0
<a> final String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> is a <RARE_TOKEN> status <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . setProperty ( "message" , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = <RARE_TOKEN> ( session , <RARE_TOKEN> + <RARE_TOKEN> , <RARE_TOKEN> , null , </a> 0
<a> GraphObject . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = ( String ) <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = ( String ) <RARE_TOKEN> . getProperty ( "message" ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = <RARE_TOKEN> ( session , <RARE_TOKEN> + <RARE_TOKEN> , <RARE_TOKEN> , null , </a> 0
<a> GraphObject . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = ( String ) <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = ( String ) <RARE_TOKEN> . getProperty ( "message" ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = <RARE_TOKEN> ( null , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject event = GraphObject . Factory . create ( ) ; </a> 0
<a> Date <RARE_TOKEN> = new Date ( <RARE_TOKEN> , 2 , 17 , 12 , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> event . setProperty ( "name" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> . toString ( ) ) ; </a> 0
<a> final String <RARE_TOKEN> = <RARE_TOKEN> is a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> event . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Date <RARE_TOKEN> = new Date ( <RARE_TOKEN> . getTime ( ) + <RARE_TOKEN> * 1000 ) ; </a> 0
<a> event . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> event . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> event . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = <RARE_TOKEN> ( session , <RARE_TOKEN> , event , null , GraphObject . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = <RARE_TOKEN> ( session , <RARE_TOKEN> , <RARE_TOKEN> , null , GraphObject . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . net . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . model . * ; </a> 0
<a> import java . io . File ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = new Request ( ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( null , <RARE_TOKEN> , graphObject , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . POST , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( graphObject , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( null , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( null , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bitmap <RARE_TOKEN> = Bitmap . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , Bitmap . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( null , <RARE_TOKEN> , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> Bundle parameters = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( parameters != null ) ; </a> 0
<a> assertTrue ( parameters . containsKey ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , parameters . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> location . <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( null , location , 1000 , <RARE_TOKEN> , null , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( null , null , 1000 , <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( null , null , 1000 , <RARE_TOKEN> , null , null ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( FacebookException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = new Request ( ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> request . <RARE_TOKEN> ( null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Request . <RARE_TOKEN> ( ( Request [ ] ) null ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Request . <RARE_TOKEN> ( new Request [ ] { } ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IllegalArgumentException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Request . <RARE_TOKEN> ( new Request [ ] { null } ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Request . <RARE_TOKEN> ( ( Request [ ] ) null ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Request . <RARE_TOKEN> ( new Request [ ] { } ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IllegalArgumentException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Request . <RARE_TOKEN> ( new Request [ ] { null } ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> Request <RARE_TOKEN> = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> HttpURLConnection connection = Request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( connection != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , connection . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , connection . <RARE_TOKEN> ( ) . getPath ( ) ) ; </a> 0
<a> assertTrue ( connection . <RARE_TOKEN> ( <RARE_TOKEN> ) . startsWith ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> uri = <RARE_TOKEN> . <RARE_TOKEN> ( connection . <RARE_TOKEN> ( ) . toString ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , uri . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , uri . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( response != null ) ; </a> 0
<a> assertTrue ( response . getError ( ) == null ) ; </a> 0
<a> assertTrue ( response . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> GraphPlace <RARE_TOKEN> = response . <RARE_TOKEN> ( GraphPlace . class ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> Request request = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> HttpURLConnection connection = Request . <RARE_TOKEN> ( request ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( connection , Arrays . asList ( new Request [ ] { request } ) ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 1 , responses . size ( ) ) ; </a> 0
<a> Response response = responses . get ( 0 ) ; </a> 0
<a> assertTrue ( response != null ) ; </a> 0
<a> assertTrue ( response . getError ( ) == null ) ; </a> 0
<a> assertTrue ( response . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> GraphPlace <RARE_TOKEN> = response . <RARE_TOKEN> ( GraphPlace . class ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> int code = connection . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( 200 , code ) ; </a> 0
<a> assertTrue ( connection . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> connection . disconnect ( ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( response != null ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> FacebookException exception = error . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( exception ) ; </a> 0
<a> assertTrue ( exception instanceof <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) != FacebookRequestError . <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , null , null ) ; </a> 0
<a> assertNotNull ( request ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( response != null ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) instanceof <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( error . <RARE_TOKEN> ( ) != FacebookRequestError . <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = <RARE_TOKEN> ( null ) ; </a> 0
<a> Request request = new Request ( session , <RARE_TOKEN> ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( session , response ) ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( TestSession session , Response response ) { </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphUser <RARE_TOKEN> = response . <RARE_TOKEN> ( GraphUser . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( session . <RARE_TOKEN> ( ) , <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( session , response ) ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( TestSession session , Response response ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = response . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> List < GraphObject > <RARE_TOKEN> = <RARE_TOKEN> . getData ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> location . <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , location , 5 , 5 , null , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = response . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> List < GraphObject > <RARE_TOKEN> = <RARE_TOKEN> . getData ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , null , 1000 , 5 , <RARE_TOKEN> , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = response . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> List < GraphObject > <RARE_TOKEN> = <RARE_TOKEN> . getData ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> location . <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , location , 1000 , 5 , <RARE_TOKEN> , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = response . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> List < GraphObject > <RARE_TOKEN> = <RARE_TOKEN> . getData ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphObject result = response . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( result ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> File <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> File <RARE_TOKEN> = getActivity ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = File . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( Bitmap . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphObject result = response . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( result ) ; </a> 0
<a> } finally { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException , <RARE_TOKEN> { </a> 0
<a> File <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphObject result = response . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( result ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> return ; </a> 0
<a> } finally { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = <RARE_TOKEN> ( session , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getProperty ( "message" ) , <RARE_TOKEN> . getProperty ( "message" ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> String <RARE_TOKEN> = session . <RARE_TOKEN> ( ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , <RARE_TOKEN> , parameters , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> GraphObjectList < GraphObject > <RARE_TOKEN> = response . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 1 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> GraphObject user = <RARE_TOKEN> . get ( 0 ) ; </a> 0
<a> assertNotNull ( user ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , user . getProperty ( <RARE_TOKEN> ) . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> final ArrayList < Boolean > <RARE_TOKEN> = new ArrayList < Boolean > ( ) ; </a> 0
<a> request . setCallback ( new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> <RARE_TOKEN> . add ( true ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . size ( ) == 1 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = new Request ( null , <RARE_TOKEN> ) ; </a> 0
<a> RequestBatch batch = new RequestBatch ( request ) ; </a> 0
<a> batch . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> List < Response > responses = Request . <RARE_TOKEN> ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertTrue ( responses . size ( ) == 1 ) ; </a> 0
<a> Response response = responses . get ( 0 ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNotNull ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> RequestBatch batch = new RequestBatch ( ) ; </a> 0
<a> batch . <RARE_TOKEN> ( - 1 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( IllegalArgumentException ex ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Request request = new Request ( ) ; </a> 0
<a> request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> request . setCallback ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( request ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> Request request = new Request ( session , <RARE_TOKEN> , null , null , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( request ) ; </a> 0
<a> task . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . <RARE_TOKEN> ( "foo" , new short [ 1 ] ) ; </a> 0
<a> Request request = new Request ( session , <RARE_TOKEN> , parameters , HttpMethod . GET , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> FacebookException exception = error . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( exception ) ; </a> 0
<a> assertTrue ( exception . getMessage ( ) . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> private final Location <RARE_TOKEN> = new Location ( "" ) { </a> 0
<a> { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> final List < GraphPlace > <RARE_TOKEN> = new ArrayList < GraphPlace > ( ) ; </a> 0
<a> Request request = Request </a> 0
<a> . <RARE_TOKEN> ( session , <RARE_TOKEN> , 1000 , 5 , null , new Request . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( List < GraphPlace > <RARE_TOKEN> , Response response ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertNotNull ( response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> Request <RARE_TOKEN> = response . <RARE_TOKEN> ( Response . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setCallback ( request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> response = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertNotNull ( response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> Request <RARE_TOKEN> = response . <RARE_TOKEN> ( Response . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setCallback ( request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> response = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertNotNull ( response . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = <RARE_TOKEN> ( ) ; </a> 0
<a> assertFalse ( session . isOpened ( ) ) ; </a> 0
<a> Request request = new Request ( session , <RARE_TOKEN> ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . content . <RARE_TOKEN> ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> new <RARE_TOKEN> ( getActivity ( ) ) . clear ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> new Session ( null ) ; </a> 0
<a> assertFalse ( true ) ; </a> 0
<a> } catch ( NullPointerException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( getActivity ( ) ) ; </a> 0
<a> try { </a> 0
<a> Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 3 ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> Session . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Session . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Session . <RARE_TOKEN> ( null ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( getActivity ( ) ) ; </a> 0
<a> try { </a> 0
<a> Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 0
<a> assertEquals ( null , Session . getActiveSession ( ) ) ; </a> 0
<a> Session . <RARE_TOKEN> ( null ) ; </a> 0
<a> assertEquals ( null , Session . getActiveSession ( ) ) ; </a> 0
<a> Session <RARE_TOKEN> = new Session . Builder ( getActivity ( ) ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) . </a> 0
<a> <RARE_TOKEN> ( new MockTokenCachingStrategy ( ) ) . </a> 0
<a> build ( ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , Session . getActiveSession ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , Session . getActiveSession ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Session <RARE_TOKEN> = new Session . Builder ( getActivity ( ) ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) . </a> 0
<a> <RARE_TOKEN> ( new MockTokenCachingStrategy ( ) ) . </a> 0
<a> build ( ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , Session . getActiveSession ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Session . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> AccessToken <RARE_TOKEN> = AccessToken </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> token of <RARE_TOKEN> , permissions , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( session , <RARE_TOKEN> ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getToken ( ) , TokenCachingStrategy . getToken ( cache . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> AccessToken <RARE_TOKEN> = AccessToken </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> token of <RARE_TOKEN> , permissions , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) . </a> 0
<a> <RARE_TOKEN> ( Arrays . asList ( new String [ ] { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( session , <RARE_TOKEN> ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getToken ( ) , TokenCachingStrategy . getToken ( cache . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> AccessToken <RARE_TOKEN> = AccessToken </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> token of <RARE_TOKEN> , permissions , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) . </a> 0
<a> <RARE_TOKEN> ( Arrays . asList ( new String [ ] { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( session , <RARE_TOKEN> ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getToken ( ) , TokenCachingStrategy . getToken ( cache . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> String token = <RARE_TOKEN> token <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( token , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( <RARE_TOKEN> , cache ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> new <RARE_TOKEN> ( getActivity ( ) ) . clear ( ) ; </a> 0
<a> assertNull ( Session . <RARE_TOKEN> ( getActivity ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> Exception <RARE_TOKEN> = new Exception ( ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> try { </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) . </a> 0
<a> <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> } ) ) ) ; </a> 0
<a> fail ( <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> an <RARE_TOKEN> ) ; </a> 0
<a> } catch ( FacebookException e ) { </a> 0
<a> assertTrue ( e . getMessage ( ) . contains ( <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> or <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> final AccessToken <RARE_TOKEN> = AccessToken </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , permissions , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> permissions . add ( <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( session , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getToken ( ) , TokenCachingStrategy . getToken ( cache . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> final AccessToken <RARE_TOKEN> = AccessToken . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , permissions , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> permissions . add ( <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . <RARE_TOKEN> ( getActivity ( ) , permissions ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( session , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getToken ( ) , TokenCachingStrategy . getToken ( cache . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> final Exception <RARE_TOKEN> = new Exception ( <RARE_TOKEN> run <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> permissions . add ( <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . <RARE_TOKEN> ( getActivity ( ) , permissions ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getToken ( ) , TokenCachingStrategy . getToken ( cache . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> final AccessToken <RARE_TOKEN> = AccessToken </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , permissions , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> permissions . add ( <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( session , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getToken ( ) , TokenCachingStrategy . getToken ( cache . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> final AccessToken <RARE_TOKEN> = AccessToken . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , permissions , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> permissions . add ( <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . <RARE_TOKEN> ( getActivity ( ) , permissions ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( session , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getToken ( ) , TokenCachingStrategy . getToken ( cache . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> permissions . add ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> session . <RARE_TOKEN> ( new Session . <RARE_TOKEN> ( getActivity ( ) , permissions ) ) ; </a> 0
<a> fail ( <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> an <RARE_TOKEN> ) ; </a> 0
<a> } catch ( FacebookException e ) { </a> 0
<a> assertTrue ( e . getMessage ( ) . contains ( <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> or <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> String token = <RARE_TOKEN> is a <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> Date <RARE_TOKEN> = new Date ( new Date ( ) . getTime ( ) + <RARE_TOKEN> * 1000 ) ; </a> 0
<a> Date <RARE_TOKEN> = new Date ( ) ; </a> 0
<a> List < String > permissions = Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> AccessToken accessToken = AccessToken . <RARE_TOKEN> ( token , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> AccessTokenSource . <RARE_TOKEN> , permissions ) ; </a> 0
<a> session . open ( accessToken , statusRecorder ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> AccessToken <RARE_TOKEN> = new AccessToken ( token , <RARE_TOKEN> , permissions , </a> 0
<a> AccessTokenSource . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( session , <RARE_TOKEN> ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getToken ( ) , TokenCachingStrategy . getToken ( cache . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> String token = <RARE_TOKEN> is a <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> AccessToken accessToken = AccessToken . <RARE_TOKEN> ( token , null , null , null , null ) ; </a> 0
<a> session . open ( accessToken , statusRecorder ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertEquals ( token , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( new Date ( Long . MAX_VALUE ) , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 0 , session . getPermissions ( ) . size ( ) ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) != null ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> session . <RARE_TOKEN> ( true ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , null ) ; </a> 0
<a> request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> session . <RARE_TOKEN> ( true ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , null ) ; </a> 0
<a> request . <RARE_TOKEN> ( ) ; </a> 0
<a> assertFalse ( session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException , <RARE_TOKEN> { </a> 0
<a> Session <RARE_TOKEN> = new Session . Builder ( getActivity ( ) ) . <RARE_TOKEN> ( <RARE_TOKEN> ) . build ( ) ; </a> 0
<a> Session <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Session . AuthorizationRequest <RARE_TOKEN> = </a> 0
<a> new Session . OpenRequest ( getActivity ( ) ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) . </a> 0
<a> <RARE_TOKEN> ( SessionLoginBehavior . <RARE_TOKEN> ) ; </a> 0
<a> Session . AuthorizationRequest <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> String token = <RARE_TOKEN> token <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> Intent intent = new Intent ( Intent . <RARE_TOKEN> ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> ( token ) ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> AccessToken accessToken = AccessToken . <RARE_TOKEN> ( intent ) ; </a> 0
<a> assertNotNull ( accessToken ) ; </a> 0
<a> session . open ( accessToken , statusRecorder ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertEquals ( token , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> long <RARE_TOKEN> = session . <RARE_TOKEN> ( ) . getTime ( ) - new Date ( ) . getTime ( ) ; </a> 0
<a> assertTrue ( Math . <RARE_TOKEN> ( <RARE_TOKEN> - <RARE_TOKEN> * 1000 ) < <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 0 , session . getPermissions ( ) . size ( ) ) ; </a> 0
<a> assertEquals ( Utility . <RARE_TOKEN> ( getActivity ( ) ) , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertFalse ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Session <RARE_TOKEN> = Session . getActiveSession ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( getActivity ( ) ) ; </a> 0
<a> assertEquals ( 0 , <RARE_TOKEN> . <RARE_TOKEN> ( ) . size ( ) ) ; </a> 0
<a> String token = <RARE_TOKEN> token <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> Intent intent = new Intent ( Intent . <RARE_TOKEN> ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> ( token ) ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> AccessToken accessToken = AccessToken . <RARE_TOKEN> ( intent ) ; </a> 0
<a> assertNotNull ( accessToken ) ; </a> 0
<a> Session session = Session . <RARE_TOKEN> ( getActivity ( ) , accessToken , statusRecorder ) ; </a> 0
<a> assertEquals ( session , Session . getActiveSession ( ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , <RARE_TOKEN> . <RARE_TOKEN> ( ) . size ( ) ) ; </a> 0
<a> assertEquals ( token , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> long <RARE_TOKEN> = session . <RARE_TOKEN> ( ) . getTime ( ) - new Date ( ) . getTime ( ) ; </a> 0
<a> assertTrue ( Math . <RARE_TOKEN> ( <RARE_TOKEN> - <RARE_TOKEN> * 1000 ) < <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 0 , session . getPermissions ( ) . size ( ) ) ; </a> 0
<a> assertEquals ( Utility . <RARE_TOKEN> ( getActivity ( ) ) , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> AccessToken <RARE_TOKEN> = AccessToken </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> token of <RARE_TOKEN> , permissions , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , new UnsupportedOperationException ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> static <RARE_TOKEN> <RARE_TOKEN> ( String ... <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> filter = new <RARE_TOKEN> ( ) ; </a> 0
<a> for ( String action : <RARE_TOKEN> ) { </a> 0
<a> filter . <RARE_TOKEN> ( action ) ; </a> 0
<a> } </a> 0
<a> return filter ; </a> 0
<a> } </a> 0
<a> static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( Session . <RARE_TOKEN> , Session . <RARE_TOKEN> , </a> 0
<a> Session . <RARE_TOKEN> , Session . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Session session , AccessToken token ) { </a> 0
<a> assertEquals ( token . getToken ( ) , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( token . <RARE_TOKEN> ( ) , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( token . getPermissions ( ) , session . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . test . <RARE_TOKEN> ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> public final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . open ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> boolean success = <RARE_TOKEN> . block ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( success ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { } </a> 0
<a> } ; </a> 0
<a> final <RARE_TOKEN> executor = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void execute ( Runnable command ) { </a> 0
<a> assertEquals ( <RARE_TOKEN> , command ) ; </a> 0
<a> command . run ( ) ; </a> 0
<a> <RARE_TOKEN> . open ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( executor ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . execute ( <RARE_TOKEN> ) ; </a> 0
<a> boolean success = <RARE_TOKEN> . block ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( success ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . <RARE_TOKEN> ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import junit . <RARE_TOKEN> . Assert ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . * ; </a> 0
<a> public final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static Random random = new Random ( ( new Date ( ) ) . getTime ( ) ) ; </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle originalBundle = new Bundle ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> putString ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , originalBundle ) ; </a> 0
<a> originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> cache = new <RARE_TOKEN> ( getContext ( ) ) ; </a> 0
<a> cache . <RARE_TOKEN> ( originalBundle ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( getContext ( ) ) ; </a> 0
<a> Bundle <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getByte ( <RARE_TOKEN> ) , <RARE_TOKEN> . getByte ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getInt ( <RARE_TOKEN> ) , <RARE_TOKEN> . getInt ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getLong ( <RARE_TOKEN> ) , <RARE_TOKEN> . getLong ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getString ( <RARE_TOKEN> ) , <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . <RARE_TOKEN> ( <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Bundle <RARE_TOKEN> = new Bundle ( ) , <RARE_TOKEN> = new Bundle ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , 10 ) ; </a> 0
<a> <RARE_TOKEN> . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( getContext ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( getContext ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( getContext ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( getContext ( ) ) ; </a> 0
<a> Bundle <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> . getInt ( <RARE_TOKEN> ) , <RARE_TOKEN> . getInt ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> . getString ( <RARE_TOKEN> ) , <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> . getInt ( <RARE_TOKEN> ) , <RARE_TOKEN> . getInt ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> . getString ( <RARE_TOKEN> ) , <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ArrayList < String > permissions = Utility . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String token = <RARE_TOKEN> ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> cache = new <RARE_TOKEN> ( getContext ( ) ) ; </a> 0
<a> cache . clear ( ) ; </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , token ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> TokenCachingStrategy . <RARE_TOKEN> ( bundle , permissions ) ; </a> 0
<a> cache . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> bundle = cache . <RARE_TOKEN> ( ) ; </a> 0
<a> AccessToken accessToken = AccessToken . <RARE_TOKEN> ( bundle ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . <RARE_TOKEN> , accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Bundle <RARE_TOKEN> = accessToken . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( bundle , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( Object <RARE_TOKEN> , Object <RARE_TOKEN> ) { </a> 0
<a> Assert . assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> . getClass ( ) , <RARE_TOKEN> . getClass ( ) ) ; </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> an <RARE_TOKEN> , <RARE_TOKEN> . getClass ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> int length = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertEquals ( length , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> Object <RARE_TOKEN> = <RARE_TOKEN> . get ( <RARE_TOKEN> , i ) ; </a> 0
<a> Object <RARE_TOKEN> = <RARE_TOKEN> . get ( <RARE_TOKEN> , i ) ; </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( List < ? > <RARE_TOKEN> , List < ? > <RARE_TOKEN> ) { </a> 0
<a> Assert . assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> Iterator < ? > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> while ( <RARE_TOKEN> . <RARE_TOKEN> ( ) && <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> . next ( ) , <RARE_TOKEN> . next ( ) ) ; </a> 0
<a> } </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> not of the <RARE_TOKEN> <RARE_TOKEN> , ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> not of the <RARE_TOKEN> <RARE_TOKEN> , ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , random . nextInt ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( <RARE_TOKEN> ) ; </a> 0
<a> int [ ] array = new int [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = random . nextInt ( ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , ( short ) random . nextInt ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( <RARE_TOKEN> ) ; </a> 0
<a> short [ ] array = new short [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = ( short ) random . nextInt ( ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , ( byte ) random . nextInt ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( <RARE_TOKEN> ) ; </a> 0
<a> byte [ ] array = new byte [ length ] ; </a> 0
<a> random . <RARE_TOKEN> ( array ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , random . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( <RARE_TOKEN> ) ; </a> 0
<a> boolean [ ] array = new boolean [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = random . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , random . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( <RARE_TOKEN> ) ; </a> 0
<a> long [ ] array = new long [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = random . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , random . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( <RARE_TOKEN> ) ; </a> 0
<a> float [ ] array = new float [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = random . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , random . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( <RARE_TOKEN> ) ; </a> 0
<a> double [ ] array = new double [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = random . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> bundle . <RARE_TOKEN> ( key , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void putString ( String key , Bundle bundle ) { </a> 0
<a> bundle . putString ( key , new String ( <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( <RARE_TOKEN> ) ; </a> 0
<a> ArrayList < String > <RARE_TOKEN> = new ArrayList < String > ( length ) ; </a> 0
<a> while ( 0 < length -- ) { </a> 0
<a> if ( length == 0 ) { </a> 0
<a> <RARE_TOKEN> . add ( null ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . add ( new String ( <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( key , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static char [ ] <RARE_TOKEN> ( ) { </a> 0
<a> int length = random . nextInt ( <RARE_TOKEN> ) ; </a> 0
<a> char [ ] array = new char [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return array ; </a> 0
<a> } </a> 0
<a> private static char <RARE_TOKEN> ( ) { </a> 0
<a> return ( char ) random . nextInt ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> long <RARE_TOKEN> = 0 ; </a> 0
<a> try { </a> 0
<a> while ( getContext ( ) . <RARE_TOKEN> ( ) == null && <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> public class TestBlocker extends <RARE_TOKEN> { </a> 0
<a> private Exception exception ; </a> 0
<a> public int <RARE_TOKEN> ; </a> 0
<a> private volatile Handler handler ; </a> 0
<a> private TestBlocker ( ) { </a> 0
<a> super ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public synchronized static TestBlocker <RARE_TOKEN> ( ) { </a> 0
<a> TestBlocker blocker = new TestBlocker ( ) ; </a> 0
<a> blocker . start ( ) ; </a> 0
<a> synchronized ( blocker ) { </a> 0
<a> while ( blocker . handler == null ) { </a> 0
<a> try { </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return blocker ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 0
<a> super . run ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Handler <RARE_TOKEN> ( ) { </a> 0
<a> return handler ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> Exception e = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( e != null ) { </a> 0
<a> throw e ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public synchronized void <RARE_TOKEN> ( ) { </a> 0
<a> ++ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( null ) ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> while ( <RARE_TOKEN> ( ) == null && <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public synchronized Exception <RARE_TOKEN> ( ) { </a> 0
<a> return exception ; </a> 0
<a> } </a> 0
<a> public synchronized void <RARE_TOKEN> ( Exception e ) { </a> 0
<a> exception = e ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> handler = new Handler ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = TestSession . <RARE_TOKEN> ( getActivity ( ) , null ) ; </a> 0
<a> assertTrue ( session != null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = TestSession . <RARE_TOKEN> ( getActivity ( ) , null ) ; </a> 0
<a> assertTrue ( session != null ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> final TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> TestSession session = <RARE_TOKEN> ( ) ; </a> 0
<a> Session . OpenRequest openRequest = new Session . OpenRequest ( getActivity ( ) ) . </a> 0
<a> setCallback ( </a> 0
<a> new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> assertTrue ( exception == null ) ; </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> session . <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> <RARE_TOKEN> ( blocker , 1 ) ; </a> 0
<a> assertTrue ( session . <RARE_TOKEN> ( ) . isOpened ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> TestSession session = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( getActivity ( ) , session ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> session = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( getActivity ( ) , session ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> assertSame ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> final TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> TestSession session = <RARE_TOKEN> ( blocker ) ; </a> 0
<a> <RARE_TOKEN> ( getActivity ( ) , session ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> assertSame ( <RARE_TOKEN> + 1 , <RARE_TOKEN> ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> assertSame ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> TestSession . <RARE_TOKEN> ( "hello" ) ; </a> 0
<a> TestSession . <RARE_TOKEN> ( "world" ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( FacebookException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> TestSession . <RARE_TOKEN> ( "hello" ) ; </a> 0
<a> TestSession . <RARE_TOKEN> ( "world" ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( FacebookException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( ) { </a> 0
<a> TestSession session = <RARE_TOKEN> ( null ) ; </a> 0
<a> String <RARE_TOKEN> = TestSession . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> String applicationId = session . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( applicationId ) ; </a> 0
<a> String <RARE_TOKEN> = String . format ( <RARE_TOKEN> id <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> , applicationId ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Request request = new Request ( null , <RARE_TOKEN> , parameters , null ) ; </a> 0
<a> Response response = request . <RARE_TOKEN> ( ) ; </a> 0
<a> JSONArray data = ( JSONArray ) response . <RARE_TOKEN> ( ) . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> return data . length ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import junit . <RARE_TOKEN> . Assert ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> public static < T extends Serializable > T <RARE_TOKEN> ( T t ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> os = new <RARE_TOKEN> ( ) ; </a> 0
<a> new <RARE_TOKEN> ( os ) . <RARE_TOKEN> ( t ) ; </a> 0
<a> <RARE_TOKEN> is = new <RARE_TOKEN> ( os . <RARE_TOKEN> ( ) ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> T <RARE_TOKEN> = ( T ) ( new <RARE_TOKEN> ( is ) ) . <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new <RARE_TOKEN> ( e ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw new <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static Date <RARE_TOKEN> ( long offset ) { </a> 0
<a> return new Date ( new Date ( ) . getTime ( ) + ( offset * <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( List < String > expected , AccessToken <RARE_TOKEN> ) { </a> 0
<a> if ( expected == null ) { </a> 0
<a> Assert . assertEquals ( null , <RARE_TOKEN> . getPermissions ( ) ) ; </a> 0
<a> } else { </a> 0
<a> for ( String p : expected ) { </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> . getPermissions ( ) . contains ( p ) ) ; </a> 0
<a> } </a> 0
<a> for ( String p : <RARE_TOKEN> . getPermissions ( ) ) { </a> 0
<a> Assert . assertTrue ( expected . contains ( p ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( List < String > expected , List < String > <RARE_TOKEN> ) { </a> 0
<a> if ( expected == null ) { </a> 0
<a> Assert . assertEquals ( null , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> for ( String p : expected ) { </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> . contains ( p ) ) ; </a> 0
<a> } </a> 0
<a> for ( String p : <RARE_TOKEN> ) { </a> 0
<a> Assert . assertTrue ( expected . contains ( p ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( List < String > expected , List < String > <RARE_TOKEN> ) { </a> 0
<a> if ( expected != null ) { </a> 0
<a> for ( String p : expected ) { </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> . contains ( p ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( Bundle a , Bundle b ) { </a> 0
<a> for ( String key : a . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( ! b . containsKey ( key ) ) { </a> 0
<a> Assert . fail ( <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> key " + key ) ; </a> 0
<a> } </a> 0
<a> Assert . assertEquals ( a . get ( key ) , b . get ( key ) ) ; </a> 0
<a> } </a> 0
<a> for ( String key : b . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( ! a . containsKey ( key ) ) { </a> 0
<a> Assert . fail ( <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> key " + key ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . test . <RARE_TOKEN> ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . util . Random ; </a> 0
<a> public final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Random random = new Random ( ) ; </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> byte [ ] data = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String key = "a" ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , <RARE_TOKEN> , <RARE_TOKEN> ( 2 * <RARE_TOKEN> ) ) ; </a> 0
<a> put ( cache , key , data ) ; </a> 0
<a> <RARE_TOKEN> ( cache , key , data ) ; </a> 0
<a> cache . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> byte [ ] data = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String key = "a" ; </a> 0
<a> InputStream stream = new <RARE_TOKEN> ( data ) ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , <RARE_TOKEN> , <RARE_TOKEN> ( 2 * <RARE_TOKEN> ) ) ; </a> 0
<a> cache . <RARE_TOKEN> ( ) ; </a> 0
<a> InputStream <RARE_TOKEN> = cache . <RARE_TOKEN> ( key , stream ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( cache , key , data ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> byte [ ] data = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String key = "a" ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , <RARE_TOKEN> , <RARE_TOKEN> ( 2 * <RARE_TOKEN> ) ) ; </a> 0
<a> cache . <RARE_TOKEN> ( ) ; </a> 0
<a> put ( cache , key , data ) ; </a> 0
<a> <RARE_TOKEN> ( cache , key , data ) ; </a> 0
<a> cache . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( false , <RARE_TOKEN> ( cache , key ) ) ; </a> 0
<a> assertEquals ( 0 , cache . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> int count = 17 ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = count * <RARE_TOKEN> ; </a> 0
<a> byte [ ] data = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , <RARE_TOKEN> , <RARE_TOKEN> ( 2 * <RARE_TOKEN> ) ) ; </a> 0
<a> cache . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> put ( cache , i , data ) ; </a> 0
<a> int <RARE_TOKEN> = ( i + 1 ) * <RARE_TOKEN> ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) > <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) < 2 * <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> String key = Integer . valueOf ( i ) . toString ( ) ; </a> 0
<a> <RARE_TOKEN> ( cache , key , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> int count = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = 32 ; </a> 0
<a> int <RARE_TOKEN> = count * <RARE_TOKEN> / 2 ; </a> 0
<a> byte [ ] data = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , <RARE_TOKEN> , <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> cache . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> put ( cache , i , data ) ; </a> 0
<a> int <RARE_TOKEN> = ( i + 1 ) * <RARE_TOKEN> ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) > Math . min ( <RARE_TOKEN> , <RARE_TOKEN> / 2 ) ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) < Math . min ( 2 * <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> String key = Integer . valueOf ( i ) . toString ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ( cache , key ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> ( cache , key , data ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> assertEquals ( true , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( true , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> int count = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = 32 ; </a> 0
<a> int <RARE_TOKEN> = count / 2 ; </a> 0
<a> byte [ ] data = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , <RARE_TOKEN> , <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> cache . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> put ( cache , i , data ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> if ( <RARE_TOKEN> ( cache , i ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> ( cache , i , data ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> assertEquals ( true , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( true , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException , InterruptedException { </a> 0
<a> int <RARE_TOKEN> = 10 ; </a> 0
<a> int <RARE_TOKEN> = 5 ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> byte [ ] data = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , <RARE_TOKEN> , <RARE_TOKEN> ( <RARE_TOKEN> + 1 ) ) ; </a> 0
<a> cache . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> put ( cache , i , data ) ; </a> 0
<a> } </a> 0
<a> Thread . sleep ( 1000 ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> put ( cache , <RARE_TOKEN> + i , data ) ; </a> 0
<a> Thread . sleep ( 1000 ) ; </a> 0
<a> for ( int <RARE_TOKEN> = 0 ; <RARE_TOKEN> < <RARE_TOKEN> ; <RARE_TOKEN> ++ ) { </a> 0
<a> <RARE_TOKEN> ( cache , <RARE_TOKEN> , data ) ; </a> 0
<a> } </a> 0
<a> Thread . sleep ( 1000 ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < ( <RARE_TOKEN> - 1 ) ; i ++ ) { </a> 0
<a> String key = Integer . valueOf ( <RARE_TOKEN> + i ) . toString ( ) ; </a> 0
<a> assertEquals ( false , <RARE_TOKEN> ( cache , key ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException , InterruptedException { </a> 0
<a> final int count = 5 ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> final int <RARE_TOKEN> = 10 ; </a> 0
<a> final byte [ ] data = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> final FileLruCache cache = new FileLruCache ( </a> 0
<a> getContext ( ) , <RARE_TOKEN> , <RARE_TOKEN> ( count + 1 ) ) ; </a> 0
<a> cache . <RARE_TOKEN> ( ) ; </a> 0
<a> Runnable run = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> for ( int <RARE_TOKEN> = 0 ; <RARE_TOKEN> < <RARE_TOKEN> ; <RARE_TOKEN> ++ ) { </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> put ( cache , i , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Thread [ ] <RARE_TOKEN> = new Thread [ <RARE_TOKEN> ] ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> [ i ] = new Thread ( run ) ; </a> 0
<a> } </a> 0
<a> for ( Thread <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . start ( ) ; </a> 0
<a> } </a> 0
<a> for ( Thread <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 10 * 1000 , 0 ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> <RARE_TOKEN> ( cache , i , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> ( int n ) { </a> 0
<a> byte [ ] bytes = new byte [ n ] ; </a> 0
<a> random . <RARE_TOKEN> ( bytes ) ; </a> 0
<a> return bytes ; </a> 0
<a> } </a> 0
<a> FileLruCache . <RARE_TOKEN> <RARE_TOKEN> ( int n ) { </a> 0
<a> FileLruCache . <RARE_TOKEN> <RARE_TOKEN> = new FileLruCache . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( n ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> FileLruCache . <RARE_TOKEN> <RARE_TOKEN> ( int n ) { </a> 0
<a> FileLruCache . <RARE_TOKEN> <RARE_TOKEN> = new FileLruCache . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( n ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void put ( FileLruCache cache , int i , byte [ ] data ) { </a> 0
<a> put ( cache , Integer . valueOf ( i ) . toString ( ) , data ) ; </a> 0
<a> } </a> 0
<a> void put ( FileLruCache cache , String key , byte [ ] data ) { </a> 0
<a> try { </a> 0
<a> OutputStream stream = cache . <RARE_TOKEN> ( key ) ; </a> 0
<a> assertNotNull ( stream ) ; </a> 0
<a> stream . write ( data ) ; </a> 0
<a> stream . close ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( FileLruCache cache , int i , byte [ ] expected ) { </a> 0
<a> <RARE_TOKEN> ( cache , Integer . valueOf ( i ) . toString ( ) , expected ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( FileLruCache cache , String key , byte [ ] expected ) { </a> 0
<a> try { </a> 0
<a> InputStream stream = cache . get ( key ) ; </a> 0
<a> assertNotNull ( stream ) ; </a> 0
<a> <RARE_TOKEN> ( expected , stream ) ; </a> 0
<a> stream . close ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( FileLruCache cache , int i ) { </a> 0
<a> return <RARE_TOKEN> ( cache , Integer . valueOf ( i ) . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( FileLruCache cache , String key ) { </a> 0
<a> InputStream stream = null ; </a> 0
<a> try { </a> 0
<a> stream = cache . get ( key ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } </a> 0
<a> return stream != null ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( byte [ ] expected , InputStream <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> for ( int i = 0 ; i < expected . length ; i ++ ) { </a> 0
<a> int b = <RARE_TOKEN> . read ( ) ; </a> 0
<a> assertEquals ( ( ( int ) expected [ i ] ) & 0xff , b ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . read ( ) ; </a> 0
<a> assertEquals ( - 1 , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( InputStream stream ) { </a> 0
<a> try { </a> 0
<a> byte [ ] buffer = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> while ( stream . read ( buffer ) > - 1 ) { </a> 0
<a> } </a> 0
<a> stream . close ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . internal . <RARE_TOKEN> ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> token of <RARE_TOKEN> ; </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> Session . <RARE_TOKEN> ( null ) ; </a> 0
<a> final SessionStatusCallbackRecorder statusRecorder = </a> 0
<a> new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> final MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> final <RARE_TOKEN> session = </a> 0
<a> <RARE_TOKEN> ( cache ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> , Collections . < String > <RARE_TOKEN> ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( getActivity ( ) , statusRecorder ) ; </a> 0
<a> Session . <RARE_TOKEN> ( session ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> final SessionStatusCallbackRecorder statusRecorder = </a> 0
<a> new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> final MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> final <RARE_TOKEN> session = </a> 0
<a> <RARE_TOKEN> ( cache ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> , Collections . < String > <RARE_TOKEN> ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( getActivity ( ) , statusRecorder , session ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> Session . <RARE_TOKEN> ( null ) ; </a> 0
<a> final SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> final MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> final <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> , Collections . < String > <RARE_TOKEN> ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( getActivity ( ) , statusRecorder ) ; </a> 0
<a> Session . <RARE_TOKEN> ( session ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( cache ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , Collections . < String > <RARE_TOKEN> ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertNull ( <RARE_TOKEN> <RARE_TOKEN> not be <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( <RARE_TOKEN> , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( <RARE_TOKEN> , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( <RARE_TOKEN> , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> Session . <RARE_TOKEN> ( null ) ; </a> 0
<a> final SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> final MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> final <RARE_TOKEN> session = <RARE_TOKEN> ( cache ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> , Collections . < String > <RARE_TOKEN> ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( getActivity ( ) , statusRecorder , session ) ; </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( cache ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , Collections . < String > <RARE_TOKEN> ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> Session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } , true ) ; </a> 0
<a> assertNull ( <RARE_TOKEN> <RARE_TOKEN> not be <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( <RARE_TOKEN> , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( <RARE_TOKEN> , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( <RARE_TOKEN> , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . test . <RARE_TOKEN> ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ SmallTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Validate . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , "name" ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Validate . <RARE_TOKEN> ( null , "name" ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Validate . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> } ) , "name" ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Validate . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { } ) , "name" ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Validate . <RARE_TOKEN> ( <RARE_TOKEN> , "name" ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Validate . <RARE_TOKEN> ( "" , "name" ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Validate . <RARE_TOKEN> ( null , "name" ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Validate . <RARE_TOKEN> ( <RARE_TOKEN> , "name" , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Validate . <RARE_TOKEN> ( <RARE_TOKEN> , "name" , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Validate . <RARE_TOKEN> ( null , "name" , <RARE_TOKEN> , <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Validate . <RARE_TOKEN> ( null , "name" , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import android . test . <RARE_TOKEN> ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . <RARE_TOKEN> ; </a> 0
<a> import junit . <RARE_TOKEN> . Assert ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . * ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> public final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> assertTrue ( graphObject != null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> assertEquals ( "world" , ( String ) graphObject . <RARE_TOKEN> ( ) . get ( "hello" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GraphPlace <RARE_TOKEN> = GraphObject . Factory . create ( GraphPlace . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( "hello" ) ; </a> 0
<a> assertEquals ( "hello" , <RARE_TOKEN> . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GraphUser <RARE_TOKEN> = GraphObject . Factory . create ( GraphUser . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . get ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . get ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> graphObject . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphUser <RARE_TOKEN> = graphObject . cast ( GraphUser . class ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , graphObject . getProperty ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> } </a> 0
<a> interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> cast = <RARE_TOKEN> . cast ( <RARE_TOKEN> . class ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> == cast ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> cast = <RARE_TOKEN> . cast ( <RARE_TOKEN> . class ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> == cast ) ; </a> 0
<a> cast = cast . cast ( <RARE_TOKEN> . class ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> == cast ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> GraphPlace <RARE_TOKEN> = GraphObject . Factory . create ( GraphPlace . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( "name" , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> GraphPlace <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> , GraphPlace . class ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> graphObject . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> graphObject . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , graphObject ) ; </a> 0
<a> <RARE_TOKEN> . put ( "name" , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> GraphPlace <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> , GraphPlace . class ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private abstract class <RARE_TOKEN> implements GraphObject { </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GraphObject . Factory . create ( jsonObject , <RARE_TOKEN> . class ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . startsWith ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> Object <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> void <RARE_TOKEN> ( Object obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> void get ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> Object <RARE_TOKEN> ( Object obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> void set ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> Object <RARE_TOKEN> ( Object obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( Object obj ) ; </a> 0
<a> Object <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> void <RARE_TOKEN> ( String s ) ; </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> void <RARE_TOKEN> ( String s ) ; </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> void <RARE_TOKEN> ( String s ) ; </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> graphObject = </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> graphObject . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> , graphObject . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> graphObject . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> , graphObject . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> graphObject . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> , graphObject . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> @ <RARE_TOKEN> ( "" ) </a> 0
<a> void <RARE_TOKEN> ( Object value ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> graphObject . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( graphObject . equals ( graphObject ) ) ; </a> 0
<a> GraphPlace <RARE_TOKEN> = graphObject . cast ( GraphPlace . class ) ; </a> 0
<a> assertTrue ( graphObject . equals ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . equals ( graphObject ) ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = GraphObject . Factory . create ( ) ; </a> 0
<a> <RARE_TOKEN> . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertFalse ( graphObject . equals ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertEquals ( "world" , graphObject . getProperty ( "hello" ) ) ; </a> 0
<a> assertTrue ( graphObject . getProperty ( <RARE_TOKEN> ) == null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> graphObject . setProperty ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( "world" , jsonObject . getString ( "hello" ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> , jsonObject . getString ( <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> graphObject . setProperty ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( "world" , jsonObject . getString ( "hello" ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> , jsonObject . getString ( <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertEquals ( 1 , jsonObject . length ( ) ) ; </a> 0
<a> graphObject . <RARE_TOKEN> ( ) . clear ( ) ; </a> 0
<a> assertEquals ( 0 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertTrue ( graphObject . <RARE_TOKEN> ( ) . containsKey ( "hello" ) ) ; </a> 0
<a> assertFalse ( graphObject . <RARE_TOKEN> ( ) . containsKey ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertTrue ( graphObject . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( "world" ) ) ; </a> 0
<a> assertFalse ( graphObject . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> Set < Entry < String , Object > > <RARE_TOKEN> = graphObject . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( 2 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertEquals ( "world" , graphObject . <RARE_TOKEN> ( ) . get ( "hello" ) ) ; </a> 0
<a> assertTrue ( graphObject . getProperty ( <RARE_TOKEN> ) == null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> GraphUser <RARE_TOKEN> = GraphObject . Factory . create ( GraphUser . class ) ; </a> 0
<a> assertNull ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertTrue ( graphObject . <RARE_TOKEN> ( ) . isEmpty ( ) ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertFalse ( graphObject . <RARE_TOKEN> ( ) . isEmpty ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> Set < String > <RARE_TOKEN> = graphObject . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( 2 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . contains ( "hello" ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . contains ( "world" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> graphObject . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , jsonObject . get ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( 2 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> graphObject . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = GraphObject . Factory . create ( ) ; </a> 0
<a> <RARE_TOKEN> . setProperty ( <RARE_TOKEN> , graphObject ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Object obj = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( obj ) ; </a> 0
<a> assertEquals ( jsonObject , obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> GraphObjectList < String > <RARE_TOKEN> = GraphObject . Factory </a> 0
<a> . <RARE_TOKEN> ( jsonArray , String . class ) ; </a> 0
<a> <RARE_TOKEN> . add ( "hello" ) ; </a> 0
<a> <RARE_TOKEN> . add ( "world" ) ; </a> 0
<a> GraphObject <RARE_TOKEN> = GraphObject . Factory . create ( ) ; </a> 0
<a> <RARE_TOKEN> . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Object obj = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( obj ) ; </a> 0
<a> assertEquals ( jsonArray , obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> HashMap < String , Object > map = new HashMap < String , Object > ( ) ; </a> 0
<a> map . put ( "hello" , "world" ) ; </a> 0
<a> map . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( map ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , jsonObject . get ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( 2 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . <RARE_TOKEN> ( "hello" ) ; </a> 0
<a> assertEquals ( 1 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertEquals ( 2 , graphObject . <RARE_TOKEN> ( ) . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> Collection < Object > values = graphObject . <RARE_TOKEN> ( ) . values ( ) ; </a> 0
<a> assertEquals ( 2 , values . size ( ) ) ; </a> 0
<a> assertTrue ( values . contains ( "world" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertEquals ( jsonObject , graphObject . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> GraphPlace <RARE_TOKEN> = GraphObject . Factory . create ( GraphPlace . class ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> . <RARE_TOKEN> ( ) . get ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> Date <RARE_TOKEN> ( ) ; </a> 0
<a> Date <RARE_TOKEN> ( ) ; </a> 0
<a> Date <RARE_TOKEN> ( ) ; </a> 0
<a> Date <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( Date <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> . <RARE_TOKEN> , 0 ) ; </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> , 6 , 4 , 0 , 0 , 0 ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . getTime ( ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> , 6 , 4 , 19 , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . getTime ( ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> . <RARE_TOKEN> , 0 ) ; </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> , 6 , 4 , 23 , 20 , <RARE_TOKEN> ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . getTime ( ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> , 9 , 28 , 9 , <RARE_TOKEN> , 0 ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . getTime ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( array , Integer . class ) ; </a> 0
<a> collection . add ( 5 ) ; </a> 0
<a> assertTrue ( array . length ( ) == 1 ) ; </a> 0
<a> assertTrue ( array . <RARE_TOKEN> ( 0 ) == 5 ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> Collection < Integer > <RARE_TOKEN> = Arrays . asList ( 5 , - 1 ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( array , Integer . class ) ; </a> 0
<a> collection . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( array . length ( ) == 2 ) ; </a> 0
<a> assertTrue ( array . <RARE_TOKEN> ( 0 ) == 5 ) ; </a> 0
<a> assertTrue ( array . <RARE_TOKEN> ( 1 ) == - 1 ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> array . put ( 5 ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( array , Integer . class ) ; </a> 0
<a> assertTrue ( collection . contains ( 5 ) ) ; </a> 0
<a> assertFalse ( collection . contains ( 6 ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> array . put ( 5 ) ; </a> 0
<a> array . put ( - 1 ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( array , Integer . class ) ; </a> 0
<a> assertTrue ( collection . <RARE_TOKEN> ( Arrays . asList ( 5 ) ) ) ; </a> 0
<a> assertTrue ( collection . <RARE_TOKEN> ( Arrays . asList ( 5 , - 1 ) ) ) ; </a> 0
<a> assertFalse ( collection . <RARE_TOKEN> ( Arrays . asList ( 5 , - 1 , 2 ) ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( array , Integer . class ) ; </a> 0
<a> assertTrue ( collection . isEmpty ( ) ) ; </a> 0
<a> array . put ( 5 ) ; </a> 0
<a> assertFalse ( collection . isEmpty ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> array . put ( 5 ) ; </a> 0
<a> array . put ( - 1 ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( array , Integer . class ) ; </a> 0
<a> Iterator < Integer > <RARE_TOKEN> = collection . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . next ( ) == 5 ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . next ( ) == - 1 ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> for ( Integer i : collection ) { </a> 0
<a> <RARE_TOKEN> ( 0 , i ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> Collection < <RARE_TOKEN> > collection = GraphObject . Factory . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> collection . add ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> collection . add ( <RARE_TOKEN> ) ; </a> 0
<a> Iterator < <RARE_TOKEN> > <RARE_TOKEN> = collection . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . next ( ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . next ( ) ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> for ( <RARE_TOKEN> location : collection ) { </a> 0
<a> assertTrue ( location != null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( array , Integer . class ) ; </a> 0
<a> assertEquals ( 0 , collection . size ( ) ) ; </a> 0
<a> array . put ( 5 ) ; </a> 0
<a> assertEquals ( 1 , collection . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> try { </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( Integer . class ) ; </a> 0
<a> collection . clear ( ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( UnsupportedOperationException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> try { </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( Integer . class ) ; </a> 0
<a> collection . remove ( 5 ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( UnsupportedOperationException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> try { </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( Integer . class ) ; </a> 0
<a> collection . <RARE_TOKEN> ( Arrays . asList ( ) ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( UnsupportedOperationException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> try { </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( Integer . class ) ; </a> 0
<a> collection . <RARE_TOKEN> ( Arrays . asList ( ) ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( UnsupportedOperationException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface Locations extends GraphObject { </a> 0
<a> Collection < <RARE_TOKEN> > <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> jsonArray . put ( <RARE_TOKEN> ) ; </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , jsonArray ) ; </a> 0
<a> Locations <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> , Locations . class ) ; </a> 0
<a> Collection < <RARE_TOKEN> > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> != null ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . next ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> GraphUser user = GraphObject . Factory . create ( GraphUser . class ) ; </a> 0
<a> user . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> user . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> List < GraphUser > <RARE_TOKEN> = new ArrayList < GraphUser > ( ) ; </a> 0
<a> <RARE_TOKEN> . add ( user ) ; </a> 0
<a> <RARE_TOKEN> action = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> action . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String json = action . <RARE_TOKEN> ( ) . toString ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> string <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , json . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> Object <RARE_TOKEN> = action . <RARE_TOKEN> ( ) . get ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> <RARE_TOKEN> not be <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> , <RARE_TOKEN> instanceof JSONArray ) ; </a> 0
<a> List < GraphObject > <RARE_TOKEN> = action . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> , 1 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> GraphUser <RARE_TOKEN> = <RARE_TOKEN> . get ( 0 ) . cast ( GraphUser . class ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> name <RARE_TOKEN> be <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> name <RARE_TOKEN> be <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> jsonArray . put ( <RARE_TOKEN> ) ; </a> 0
<a> Collection < <RARE_TOKEN> > <RARE_TOKEN> = GraphObject . Factory </a> 0
<a> . <RARE_TOKEN> ( jsonArray , </a> 0
<a> <RARE_TOKEN> . class ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> != null ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . next ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> try { </a> 0
<a> GraphObjectList < Integer > collection = GraphObject . Factory . <RARE_TOKEN> ( Integer . class ) ; </a> 0
<a> collection . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject <RARE_TOKEN> = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> jsonArray . put ( <RARE_TOKEN> ) ; </a> 0
<a> GraphObjectList < GraphObject > collection = GraphObject . Factory </a> 0
<a> . <RARE_TOKEN> ( jsonArray , GraphObject . class ) ; </a> 0
<a> GraphObjectList < <RARE_TOKEN> > <RARE_TOKEN> = collection . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> != null ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . next ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> != null ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GraphObjectList < <RARE_TOKEN> > <RARE_TOKEN> = GraphObject . Factory . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> GraphObjectList < <RARE_TOKEN> > cast = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> == cast ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> GraphObjectList < <RARE_TOKEN> > <RARE_TOKEN> = GraphObject . Factory . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> GraphObjectList < <RARE_TOKEN> > cast = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> assertTrue ( ( GraphObjectList < ? > ) <RARE_TOKEN> == ( GraphObjectList < ? > ) cast ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> GraphObjectList < GraphObject > collection = GraphObject . Factory </a> 0
<a> . <RARE_TOKEN> ( jsonArray , GraphObject . class ) ; </a> 0
<a> assertEquals ( jsonArray , collection . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> jsonArray . put ( <RARE_TOKEN> ) ; </a> 0
<a> jsonArray . put ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> GraphObjectList < String > collection = GraphObject . Factory </a> 0
<a> . <RARE_TOKEN> ( jsonArray , String . class ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> , collection . get ( 1 ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> GraphObjectList < String > collection = GraphObject . Factory </a> 0
<a> . <RARE_TOKEN> ( jsonArray , String . class ) ; </a> 0
<a> collection . add ( <RARE_TOKEN> ) ; </a> 0
<a> collection . add ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> collection . set ( 1 , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> , collection . get ( 1 ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> graphObject . setProperty ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> GraphObjectList < GraphObject > <RARE_TOKEN> = GraphObject . Factory </a> 0
<a> . <RARE_TOKEN> ( GraphObject . class ) ; </a> 0
<a> <RARE_TOKEN> . add ( graphObject ) ; </a> 0
<a> JSONArray jsonArray = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Object obj = jsonArray . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> assertNotNull ( obj ) ; </a> 0
<a> assertEquals ( jsonObject , obj ) ; </a> 0
<a> <RARE_TOKEN> . set ( 0 , graphObject ) ; </a> 0
<a> obj = jsonArray . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> assertNotNull ( obj ) ; </a> 0
<a> assertEquals ( jsonObject , obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assertEquals ( <RARE_TOKEN> , GraphObject . Factory </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , GraphObject . Factory </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import android . test . <RARE_TOKEN> ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> import java . util . Set ; </a> 0
<a> public final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( jsonObject ) ; </a> 0
<a> assertEquals ( 0 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( jsonObject , <RARE_TOKEN> ) ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . <RARE_TOKEN> ( jsonObject , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Set < Entry < String , Object > > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( jsonObject ) ; </a> 0
<a> assertEquals ( 2 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Set < String > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( jsonObject ) ; </a> 0
<a> assertEquals ( 2 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . contains ( "hello" ) ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . contains ( "world" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> HashMap < String , Object > map = new HashMap < String , Object > ( ) ; </a> 0
<a> map . put ( "hello" , "world" ) ; </a> 0
<a> map . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( jsonObject , map ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , jsonObject . get ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( 2 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Collection < Object > values = <RARE_TOKEN> . <RARE_TOKEN> ( jsonObject ) ; </a> 0
<a> assertEquals ( 2 , values . size ( ) ) ; </a> 0
<a> assertTrue ( values . contains ( "world" ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> < T extends <RARE_TOKEN> . <RARE_TOKEN> < ? > > extends <RARE_TOKEN> < T > { </a> 0
<a> public <RARE_TOKEN> ( Class < T > <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected T <RARE_TOKEN> ( ) { </a> 0
<a> return ( T ) getActivity ( ) ; </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> < T extends <RARE_TOKEN> > extends <RARE_TOKEN> { </a> 0
<a> public static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private Class < T > <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> ( Class < T > <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( T fragment ) { </a> 0
<a> if ( fragment == null ) { </a> 0
<a> fragment = <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> layout = new <RARE_TOKEN> ( this ) ; </a> 0
<a> layout . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> layout . <RARE_TOKEN> ( new <RARE_TOKEN> . LayoutParams ( <RARE_TOKEN> . LayoutParams . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . LayoutParams . <RARE_TOKEN> ) ) ; </a> 0
<a> layout . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) </a> 0
<a> . add ( <RARE_TOKEN> , fragment ) </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( layout ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( int i , int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( i ) ; </a> 0
<a> } </a> 0
<a> T <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> . newInstance ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> fail ( <RARE_TOKEN> not create <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> fail ( <RARE_TOKEN> not create <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> T <RARE_TOKEN> ( ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> T fragment = ( T ) <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return fragment ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . <RARE_TOKEN> ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . TestBlocker ; </a> 0
<a> import com . facebook . TestSession ; </a> 0
<a> import com . facebook . <RARE_TOKEN> . <RARE_TOKEN> . R ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> . <RARE_TOKEN> > { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( <RARE_TOKEN> . class ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> <RARE_TOKEN> activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , false ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , false ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> fragment = new <RARE_TOKEN> ( bundle ) ; </a> 0
<a> getActivity ( ) . <RARE_TOKEN> ( fragment ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final <RARE_TOKEN> fragment = activity . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( false , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( false , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Collection < String > <RARE_TOKEN> = fragment . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> <RARE_TOKEN> activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , R . id . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final <RARE_TOKEN> fragment = activity . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> assertEquals ( false , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( false , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Collection < String > <RARE_TOKEN> = fragment . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> <RARE_TOKEN> activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final <RARE_TOKEN> fragment = activity . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> final TestSession <RARE_TOKEN> = openTestSessionWithSharedUser ( ) ; </a> 0
<a> TestSession <RARE_TOKEN> = openTestSessionWithSharedUser ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> final TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 2 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> fragment . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( PickerFragment < ? > fragment ) { </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( Arrays . asList ( <RARE_TOKEN> ) ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) fragment . <RARE_TOKEN> ( ) . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> View <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 0 , fragment . <RARE_TOKEN> ( ) . size ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 1 , fragment . <RARE_TOKEN> ( ) . size ( ) ) ; </a> 0
<a> assertNotNull ( fragment . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . next ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 0 , fragment . <RARE_TOKEN> ( ) . size ( ) ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> extends <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( <RARE_TOKEN> . class ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . test . <RARE_TOKEN> ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . widget . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> public final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private Bitmap <RARE_TOKEN> ( String uri , boolean <RARE_TOKEN> ) { </a> 0
<a> Bitmap <RARE_TOKEN> = null ; </a> 0
<a> InputStream <RARE_TOKEN> = null ; </a> 0
<a> try </a> 0
<a> { </a> 0
<a> URL url = new URL ( uri ) ; </a> 0
<a> boolean <RARE_TOKEN> = ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) . get ( url . toString ( ) ) != null ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> == <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( url , <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> HttpURLConnection connection = ( HttpURLConnection ) url . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , connection ) ; </a> 0
<a> } </a> 0
<a> assertTrue ( <RARE_TOKEN> != null ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> != null ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } finally { </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( Bitmap <RARE_TOKEN> , Bitmap <RARE_TOKEN> ) { </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> ByteBuffer <RARE_TOKEN> = ByteBuffer . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) * <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> ByteBuffer <RARE_TOKEN> = ByteBuffer . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) * <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( Arrays . equals ( <RARE_TOKEN> . array ( ) , <RARE_TOKEN> . array ( ) ) ) ; </a> 0
<a> } </a> 0
<a> private Context <RARE_TOKEN> ( ) { </a> 0
<a> for ( ; ; ) { </a> 0
<a> if ( ( getContext ( ) != null ) && ( getContext ( ) . <RARE_TOKEN> ( ) != null ) ) { </a> 0
<a> return getContext ( ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 25 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . widget . LoginButton ; </a> 0
<a> import junit . <RARE_TOKEN> . Assert ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> final <RARE_TOKEN> session = new <RARE_TOKEN> ( getActivity ( ) , <RARE_TOKEN> , cache ) ; </a> 0
<a> <RARE_TOKEN> . SessionStatusCallbackRecorder statusRecorder = new <RARE_TOKEN> . SessionStatusCallbackRecorder ( ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> token of <RARE_TOKEN> , new ArrayList < String > ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( statusRecorder ) ; </a> 0
<a> Assert . assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> final SessionStatusCallbackRecorder <RARE_TOKEN> = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . <RARE_TOKEN> ( button ) ; </a> 0
<a> button . <RARE_TOKEN> ( session ) ; </a> 0
<a> button . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> button . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> <RARE_TOKEN> session = new <RARE_TOKEN> ( getActivity ( ) , <RARE_TOKEN> , cache ) ; </a> 0
<a> final Exception <RARE_TOKEN> = new Exception ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( false ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> LoginButton . <RARE_TOKEN> listener = new LoginButton . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( FacebookException exception ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> assertEquals ( exception . <RARE_TOKEN> ( ) . getMessage ( ) , <RARE_TOKEN> . getMessage ( ) ) ; </a> 0
<a> <RARE_TOKEN> . set ( true ) ; </a> 0
<a> this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> button . <RARE_TOKEN> ( listener ) ; </a> 0
<a> button . <RARE_TOKEN> ( session ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> button . <RARE_TOKEN> ( ) ; </a> 0
<a> button . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> synchronized ( listener ) { </a> 0
<a> listener . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . get ( ) ) { </a> 0
<a> fail ( <RARE_TOKEN> not get <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> <RARE_TOKEN> session = new <RARE_TOKEN> ( getActivity ( ) , <RARE_TOKEN> , cache ) ; </a> 0
<a> <RARE_TOKEN> . SessionStatusCallbackRecorder statusRecorder = new <RARE_TOKEN> . SessionStatusCallbackRecorder ( ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . <RARE_TOKEN> ( session ) ; </a> 0
<a> button . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> token of <RARE_TOKEN> , new ArrayList < String > ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( statusRecorder ) ; </a> 0
<a> button . <RARE_TOKEN> ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> <RARE_TOKEN> session = new <RARE_TOKEN> ( getActivity ( ) , <RARE_TOKEN> , cache ) ; </a> 0
<a> <RARE_TOKEN> . SessionStatusCallbackRecorder statusRecorder = </a> 0
<a> new <RARE_TOKEN> . SessionStatusCallbackRecorder ( ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . <RARE_TOKEN> ( session ) ; </a> 0
<a> button . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> token of <RARE_TOKEN> , new ArrayList < String > ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( statusRecorder ) ; </a> 0
<a> button . <RARE_TOKEN> ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ) ; </a> 0
<a> try { </a> 0
<a> button . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ) ; </a> 0
<a> fail ( <RARE_TOKEN> not be <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> assertTrue ( e instanceof UnsupportedOperationException ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ) ; </a> 0
<a> try { </a> 0
<a> button . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ) ; </a> 0
<a> fail ( <RARE_TOKEN> not be <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> assertTrue ( e instanceof UnsupportedOperationException ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ) ; </a> 0
<a> button . <RARE_TOKEN> ( ) ; </a> 0
<a> button . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> <RARE_TOKEN> session = new <RARE_TOKEN> ( getActivity ( ) , <RARE_TOKEN> , cache ) ; </a> 0
<a> <RARE_TOKEN> . SessionStatusCallbackRecorder statusRecorder = </a> 0
<a> new <RARE_TOKEN> . SessionStatusCallbackRecorder ( ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . <RARE_TOKEN> ( session ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> token of <RARE_TOKEN> , </a> 0
<a> Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( statusRecorder ) ; </a> 0
<a> button . <RARE_TOKEN> ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> button . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ) ; </a> 0
<a> button . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ) ; </a> 0
<a> List < String > permissions = button . getPermissions ( ) ; </a> 0
<a> assertTrue ( permissions . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertTrue ( permissions . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertFalse ( permissions . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . MockTokenCachingStrategy cache = new <RARE_TOKEN> . MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> <RARE_TOKEN> session = new <RARE_TOKEN> ( getActivity ( ) , <RARE_TOKEN> , cache ) ; </a> 0
<a> <RARE_TOKEN> . SessionStatusCallbackRecorder statusRecorder = </a> 0
<a> new <RARE_TOKEN> . SessionStatusCallbackRecorder ( ) ; </a> 0
<a> assertEquals ( SessionState . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . <RARE_TOKEN> ( session ) ; </a> 0
<a> button . <RARE_TOKEN> ( Arrays . asList ( new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) ) ; </a> 0
<a> button . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> token of <RARE_TOKEN> , new ArrayList < String > ( ) , AccessTokenSource . <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( statusRecorder ) ; </a> 0
<a> button . <RARE_TOKEN> ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> assertNotNull ( session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . <RARE_TOKEN> , session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( cache . <RARE_TOKEN> ( ) == null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . <RARE_TOKEN> ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . <RARE_TOKEN> . <RARE_TOKEN> . R ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> . <RARE_TOKEN> > { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( <RARE_TOKEN> . class ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> <RARE_TOKEN> activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> final Location location = new Location ( "" ) ; </a> 0
<a> location . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> location . <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , false ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , 5 ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , location ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> fragment = new <RARE_TOKEN> ( bundle ) ; </a> 0
<a> getActivity ( ) . <RARE_TOKEN> ( fragment ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final <RARE_TOKEN> fragment = activity . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> assertEquals ( false , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 5 , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( location , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Collection < String > <RARE_TOKEN> = fragment . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> <RARE_TOKEN> activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , R . id . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final <RARE_TOKEN> fragment = activity . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> assertEquals ( false , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 5 , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Collection < String > <RARE_TOKEN> = fragment . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> <RARE_TOKEN> activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> fragment = activity . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> final TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> final TestBlocker blocker = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 1 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> fragment . <RARE_TOKEN> ( session ) ; </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> location . <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( location ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( PickerFragment < ? > fragment ) { </a> 0
<a> blocker . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + error . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) fragment . <RARE_TOKEN> ( ) . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> View <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertNull ( fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> assertNull ( fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> <RARE_TOKEN> activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> fragment = activity . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> final TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> final TestBlocker <RARE_TOKEN> = TestBlocker . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> fragment . <RARE_TOKEN> ( session ) ; </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> location . <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( location ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( PickerFragment < ? > fragment ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> fail ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) fragment . <RARE_TOKEN> ( ) . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> > - 1 ) ; </a> 0
<a> View <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertNull ( fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> final TestBlocker <RARE_TOKEN> = TestBlocker . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> session . <RARE_TOKEN> ( new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> == - 1 ) ; </a> 0
<a> assertNull ( fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> extends <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( <RARE_TOKEN> . class ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import com . facebook . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . SessionLoginBehavior ; </a> 0
<a> import java . util . Arrays ; </a> 1
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> . <RARE_TOKEN> > { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( <RARE_TOKEN> . class ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> <RARE_TOKEN> activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> final <RARE_TOKEN> fragment = activity . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> assertEquals ( SessionLoginBehavior . <RARE_TOKEN> , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . <RARE_TOKEN> , fragment . <RARE_TOKEN> ( ) ) ; </a> 0
<a> List < String > permissions = fragment . getPermissions ( ) ; </a> 0
<a> assertEquals ( 2 , permissions . size ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , permissions . get ( 0 ) ) ; </a> 0
<a> } </a> 0
<a> public static class <RARE_TOKEN> extends <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( <RARE_TOKEN> . class ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> fragment = <RARE_TOKEN> ( ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( SessionLoginBehavior . <RARE_TOKEN> ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( Arrays . asList ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . widget . WorkQueue ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> WorkQueue manager = new WorkQueue ( ) ; </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> run = new <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( 0 , run . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> executor = new <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( 0 , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> WorkQueue manager = new WorkQueue ( 1 , executor ) ; </a> 0
<a> <RARE_TOKEN> ( manager , run ) ; </a> 0
<a> assertEquals ( 1 , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 0 , run . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( manager , executor ) ; </a> 0
<a> assertEquals ( 0 , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 1 , run . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> run = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> executor = new <RARE_TOKEN> ( ) ; </a> 0
<a> WorkQueue manager = new WorkQueue ( 1 , executor ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> <RARE_TOKEN> ( manager , run ) ; </a> 0
<a> assertEquals ( 1 , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> assertEquals ( 1 , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( i , run . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( manager , executor ) ; </a> 0
<a> } </a> 0
<a> assertEquals ( 0 , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , run . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> run = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> executor = new <RARE_TOKEN> ( ) ; </a> 0
<a> WorkQueue manager = new WorkQueue ( <RARE_TOKEN> , executor ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> assertEquals ( i , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( manager , run ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> assertEquals ( <RARE_TOKEN> - i , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( i , run . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( manager , executor ) ; </a> 0
<a> } </a> 0
<a> assertEquals ( 0 , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , run . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> run = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> executor = new <RARE_TOKEN> ( ) ; </a> 0
<a> WorkQueue manager = new WorkQueue ( 1 , executor ) ; </a> 0
<a> <RARE_TOKEN> ( manager , run ) ; </a> 0
<a> WorkQueue . <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( manager , run ) ; </a> 0
<a> <RARE_TOKEN> ( manager , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 1 , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( manager , executor ) ; </a> 0
<a> assertEquals ( 0 , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final int <RARE_TOKEN> = 8 ; </a> 0
<a> final int <RARE_TOKEN> = 17 ; </a> 0
<a> ArrayList < WorkQueue . <RARE_TOKEN> > <RARE_TOKEN> = new ArrayList < WorkQueue . <RARE_TOKEN> > ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> executor = new <RARE_TOKEN> ( ) ; </a> 0
<a> WorkQueue manager = new WorkQueue ( <RARE_TOKEN> , executor ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> <RARE_TOKEN> ( manager , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( int h = 0 ; h < <RARE_TOKEN> ; h ++ ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ( manager , <RARE_TOKEN> ) ) ; </a> 0
<a> for ( int l = 0 ; l < h ; l ++ ) { </a> 0
<a> <RARE_TOKEN> ( manager , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> assertEquals ( <RARE_TOKEN> , executor . <RARE_TOKEN> ( ) ) ; </a> 0
<a> for ( WorkQueue . <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( manager , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> assertEquals ( i , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( manager , executor ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> assertEquals ( i , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( manager , executor ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> assertEquals ( i , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( manager , executor ) ; </a> 0
<a> } </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> WorkQueue manager = new WorkQueue ( ) ; </a> 0
<a> ArrayList < <RARE_TOKEN> > <RARE_TOKEN> = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> final int <RARE_TOKEN> = 20 ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> ( manager , 20 ) ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> manager . <RARE_TOKEN> ( <RARE_TOKEN> . get ( i ) ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . get ( i ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private WorkQueue . <RARE_TOKEN> <RARE_TOKEN> ( WorkQueue manager , Runnable <RARE_TOKEN> ) { </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> WorkQueue . <RARE_TOKEN> <RARE_TOKEN> = manager . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( WorkQueue manager , <RARE_TOKEN> executor ) { </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> executor . <RARE_TOKEN> ( ) ; </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( WorkQueue manager , WorkQueue . <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . cancel ( ) ; </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( WorkQueue manager , WorkQueue . <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> static class <RARE_TOKEN> implements Runnable { </a> 0
<a> static ArrayList < WorkQueue . <RARE_TOKEN> > <RARE_TOKEN> = new ArrayList < WorkQueue . <RARE_TOKEN> > ( ) ; </a> 0
<a> final WorkQueue manager ; </a> 0
<a> final <RARE_TOKEN> random = new <RARE_TOKEN> ( ) ; </a> 0
<a> final int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> ( WorkQueue manager , int <RARE_TOKEN> ) { </a> 0
<a> this . manager = manager ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( <RARE_TOKEN> ++ < <RARE_TOKEN> ) { </a> 0
<a> final int <RARE_TOKEN> = 80 ; </a> 0
<a> final int <RARE_TOKEN> = 10 ; </a> 0
<a> final int <RARE_TOKEN> = 6 ; </a> 0
<a> final int <RARE_TOKEN> = 2 ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> final int n = random . nextInt ( <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> WorkQueue . <RARE_TOKEN> <RARE_TOKEN> = manager . <RARE_TOKEN> ( this ) ; </a> 0
<a> if ( n < ( <RARE_TOKEN> += <RARE_TOKEN> ) ) { </a> 0
<a> try { </a> 0
<a> Thread . sleep ( n / 4 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } else if ( n < ( <RARE_TOKEN> += <RARE_TOKEN> ) ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else if ( n < ( <RARE_TOKEN> += <RARE_TOKEN> ) ) { </a> 0
<a> ArrayList < WorkQueue . <RARE_TOKEN> > <RARE_TOKEN> = new ArrayList < WorkQueue . <RARE_TOKEN> > ( ) ; </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> for ( WorkQueue . <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> while ( ! <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> this . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final ArrayList < Runnable > <RARE_TOKEN> = new ArrayList < Runnable > ( ) ; </a> 0
<a> int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . size ( ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> assertTrue ( <RARE_TOKEN> . size ( ) > 0 ) ; </a> 0
<a> <RARE_TOKEN> . get ( 0 ) . run ( ) ; </a> 0
<a> <RARE_TOKEN> . remove ( 0 ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> assertTrue ( <RARE_TOKEN> . size ( ) > 0 ) ; </a> 0
<a> int index = <RARE_TOKEN> . size ( ) - 1 ; </a> 0
<a> <RARE_TOKEN> . get ( index ) . run ( ) ; </a> 0
<a> <RARE_TOKEN> . remove ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void execute ( Runnable <RARE_TOKEN> ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> implements Runnable { </a> 0
<a> volatile int <RARE_TOKEN> = 0 ; </a> 0
<a> int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 1 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . net . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . * ; </a> 0
<a> import com . facebook . widget . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . widget . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . widget . PickerFragment ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . util . * ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String TAG = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = TAG + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = TAG + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = TAG + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = TAG + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = TAG + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = TAG + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = TAG + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = TAG + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final List < String > <RARE_TOKEN> = Arrays . asList ( <RARE_TOKEN> ) ; </a> 0
<a> private static volatile <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private static volatile <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private static volatile int <RARE_TOKEN> = - 1 ; </a> 0
<a> private static volatile int <RARE_TOKEN> = - 1 ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private ViewGroup <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private Bundle <RARE_TOKEN> ; </a> 0
<a> private ViewGroup <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> pendingRequest ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private ArrayList < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 0
<a> private ViewGroup <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private ViewGroup <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Session . StatusCallback callback = new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( exception != null ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } else if ( state == SessionState . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> } else if ( state == SessionState . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( this , callback ) ; </a> 0
<a> <RARE_TOKEN> . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( ViewGroup ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( ViewGroup ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> String [ ] <RARE_TOKEN> = { <RARE_TOKEN> , <RARE_TOKEN> } ; </a> 0
<a> int [ ] <RARE_TOKEN> = { R . id . <RARE_TOKEN> , R . id . <RARE_TOKEN> } ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( this , R . layout . <RARE_TOKEN> , <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( ViewGroup ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( ViewGroup ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> Bundle args = new Bundle ( ) ; </a> 0
<a> args . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , false ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( args ) ; </a> 0
<a> <RARE_TOKEN> . add ( R . id . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . add ( R . id . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( this , R . array . <RARE_TOKEN> , android . R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( android . R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> for ( Button button : Arrays . asList ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( button ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> <RARE_TOKEN> . this . onError ( error ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( PickerFragment < ? > fragment ) { </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( Arrays . asList ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> < GraphUser > ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( GraphUser graphObject ) { </a> 0
<a> Boolean <RARE_TOKEN> = graphObject . cast ( <RARE_TOKEN> . class ) . <RARE_TOKEN> ( ) ; </a> 0
<a> return ( <RARE_TOKEN> != null ) && <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < ? > <RARE_TOKEN> , View view , int i , long l ) { </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < ? > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Button <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( savedInstanceState . getInt ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( savedInstanceState . getInt ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( savedInstanceState . getInt ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . setText ( savedInstanceState . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . setText ( savedInstanceState . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = savedInstanceState . getString ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = savedInstanceState . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = savedInstanceState . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( ( <RARE_TOKEN> != null ) && ( <RARE_TOKEN> . size ( ) > 0 ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( getString ( R . string . <RARE_TOKEN> ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else if ( getString ( R . string . <RARE_TOKEN> ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else if ( getString ( R . string . <RARE_TOKEN> ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && session . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> <RARE_TOKEN> . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> outState . putString ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . toString ( ) ) ; </a> 0
<a> outState . putString ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . toString ( ) ) ; </a> 0
<a> outState . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> <RARE_TOKEN> . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Button button ) { </a> 0
<a> button . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ( Button ) view ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Button source ) { </a> 0
<a> <RARE_TOKEN> = source . <RARE_TOKEN> ( ) . toString ( ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( <RARE_TOKEN> ( source , <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( <RARE_TOKEN> ( source , <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( <RARE_TOKEN> ( source , <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( <RARE_TOKEN> ( source , <RARE_TOKEN> ) ) ; </a> 0
<a> if ( source == <RARE_TOKEN> ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ( session == null ) || ! session . isOpened ( ) ) { </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( Button source , Button <RARE_TOKEN> ) { </a> 0
<a> if ( source == <RARE_TOKEN> ) { </a> 0
<a> return View . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return View . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Button button ) { </a> 0
<a> button . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( view ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( View view ) { </a> 0
<a> if ( view == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( view == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> assert false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> boolean result = <RARE_TOKEN> && <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ( getString ( R . string . <RARE_TOKEN> ) , <RARE_TOKEN> , <RARE_TOKEN> , result ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , result ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> boolean result = <RARE_TOKEN> || <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ( getString ( R . string . <RARE_TOKEN> ) , <RARE_TOKEN> , <RARE_TOKEN> , result ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , result ) ; </a> 0
<a> } </a> 0
<a> private String <RARE_TOKEN> ( String <RARE_TOKEN> , boolean <RARE_TOKEN> , boolean <RARE_TOKEN> , boolean result ) { </a> 0
<a> String <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = result ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> return String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( final String <RARE_TOKEN> , final boolean <RARE_TOKEN> , final boolean <RARE_TOKEN> , </a> 0
<a> final boolean result ) { </a> 0
<a> Bundle post = new Bundle ( ) ; </a> 0
<a> post . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> post . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> post . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> post . <RARE_TOKEN> ( <RARE_TOKEN> , result ) ; </a> 0
<a> <RARE_TOKEN> = post ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ( session == null ) || ! session . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> post <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> List < String > permissions = session . getPermissions ( ) ; </a> 0
<a> if ( ! permissions . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> Session . <RARE_TOKEN> <RARE_TOKEN> = new Session . <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> boolean result = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> action = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> action . <RARE_TOKEN> ( result ) ; </a> 0
<a> action . <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> action . <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> Request . Callback callback = new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> <RARE_TOKEN> ( response ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Request request = new Request ( session , <RARE_TOKEN> , null , HttpMethod . POST , </a> 0
<a> callback ) ; </a> 0
<a> request . <RARE_TOKEN> ( action ) ; </a> 0
<a> <RARE_TOKEN> task = new <RARE_TOKEN> ( request ) ; </a> 0
<a> task . execute ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Response response ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = response . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . getId ( ) != null ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> id = " + <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> } else if ( response . getError ( ) != null ) { </a> 0
<a> <RARE_TOKEN> . setText ( response . getError ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( boolean value ) { </a> 0
<a> if ( value ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> object = GraphObject . Factory </a> 0
<a> . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> object . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = object ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> object = GraphObject . Factory </a> 0
<a> . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> object . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = object ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> GraphUser user = <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( user != null ) { </a> 0
<a> <RARE_TOKEN> ( user . getId ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = String . format ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = String . format ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( Session . getActiveSession ( ) , <RARE_TOKEN> , null , HttpMethod . GET ) ; </a> 0
<a> Request <RARE_TOKEN> = new Request ( Session . getActiveSession ( ) , <RARE_TOKEN> , null , HttpMethod . GET ) ; </a> 0
<a> RequestBatch batch = new RequestBatch ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> pendingRequest . cancel ( true ) ; </a> 0
<a> } </a> 0
<a> pendingRequest = new <RARE_TOKEN> ( batch ) { </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( List < Response > result ) { </a> 0
<a> if ( pendingRequest == this ) { </a> 0
<a> pendingRequest = null ; </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( result ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> pendingRequest . execute ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( List < Response > result ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( result ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private ArrayList < <RARE_TOKEN> > <RARE_TOKEN> ( List < Response > result ) { </a> 0
<a> ArrayList < <RARE_TOKEN> > <RARE_TOKEN> = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> for ( Response response : result ) { </a> 0
<a> if ( response . getError ( ) != null ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> list = response . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> List < <RARE_TOKEN> > <RARE_TOKEN> = list . getData ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> for ( <RARE_TOKEN> action : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ( action ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Collections . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> cursor = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> int id = 0 ; </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> Object [ ] <RARE_TOKEN> = new Object [ 3 ] ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = id ++ ; </a> 0
<a> <RARE_TOKEN> [ 1 ] = <RARE_TOKEN> . format ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ 2 ] = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> cursor . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( cursor ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> String [ ] <RARE_TOKEN> = { <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> } ; </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> action ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( action ) ; </a> 0
<a> Date <RARE_TOKEN> = action . <RARE_TOKEN> ( ) ; </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private String <RARE_TOKEN> ( <RARE_TOKEN> action ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = action . getData ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Boolean <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = action . getType ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ( <RARE_TOKEN> == null ) || ( <RARE_TOKEN> == null ) || ( <RARE_TOKEN> == null ) || ( <RARE_TOKEN> == null ) ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> return String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> private Boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . toString ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> return Boolean . <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> return Boolean . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Boolean <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( Boolean . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else if ( Boolean . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( ) { </a> 0
<a> Session <RARE_TOKEN> = Session . getActiveSession ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null || ! <RARE_TOKEN> . isOpened ( ) ) { </a> 0
<a> AccessToken accessToken = AccessToken . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( accessToken != null ) { </a> 0
<a> Session <RARE_TOKEN> = new Session . Builder ( this ) . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . build ( ) ; </a> 0
<a> <RARE_TOKEN> . open ( accessToken , null ) ; </a> 0
<a> Session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Boolean <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ( ) . getData ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( Boolean value ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( Boolean . <RARE_TOKEN> . equals ( value ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else if ( Boolean . <RARE_TOKEN> . equals ( value ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private Boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> int position = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( position == <RARE_TOKEN> ) { </a> 0
<a> return Boolean . <RARE_TOKEN> ; </a> 0
<a> } else if ( position == <RARE_TOKEN> ) { </a> 0
<a> return Boolean . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ( <RARE_TOKEN> < 0 ) || ( <RARE_TOKEN> < 0 ) ) { </a> 0
<a> String [ ] <RARE_TOKEN> = getResources ( ) . <RARE_TOKEN> ( R . array . <RARE_TOKEN> ) ; </a> 0
<a> List < String > <RARE_TOKEN> = Arrays . asList ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . indexOf ( getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . indexOf ( getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onError ( Exception error ) { </a> 0
<a> <RARE_TOKEN> ( error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String message ) { </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( message ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> private < T > T <RARE_TOKEN> ( List < T > <RARE_TOKEN> ) { </a> 0
<a> for ( T t : <RARE_TOKEN> ) { </a> 0
<a> return t ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphUser { </a> 0
<a> Boolean <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> implements <RARE_TOKEN> < <RARE_TOKEN> > , <RARE_TOKEN> { </a> 0
<a> final String <RARE_TOKEN> ; </a> 0
<a> final Date <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( String <RARE_TOKEN> , Date <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( <RARE_TOKEN> other ) { </a> 0
<a> if ( other == null ) { </a> 0
<a> return 1 ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( other . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getTime ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public final <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) { </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Date <RARE_TOKEN> = new Date ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> [ ] <RARE_TOKEN> ( int size ) { </a> 0
<a> return new <RARE_TOKEN> [ size ] ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> void <RARE_TOKEN> ( String url ) ; </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> Boolean <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( Boolean result ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> getData ( ) ; </a> 0
<a> String getType ( ) ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> String getId ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( Session . getActiveSession ( ) == null || </a> 1
<a> Session . getActiveSession ( ) . <RARE_TOKEN> ( ) ) { </a> 1
<a> Session . <RARE_TOKEN> ( this , true , null ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> switch ( requestCode ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( resultCode ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> Session . getActiveSession ( ) . onActivityResult ( this , requestCode , resultCode , data ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int resultCode ) { </a> 0
<a> String <RARE_TOKEN> = "" ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> ( ) ; </a> 0
<a> Collection < GraphUser > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . size ( ) > 0 ) { </a> 0
<a> ArrayList < String > names = new ArrayList < String > ( ) ; </a> 0
<a> for ( GraphUser user : <RARE_TOKEN> ) { </a> 0
<a> names . add ( user . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ", " , names ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 1
<a> Intent intent = new Intent ( this , <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( intent , null , true , true ) ; </a> 0
<a> <RARE_TOKEN> ( intent , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 1
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . FacebookException ; </a> 0
<a> import com . facebook . widget . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . widget . PickerFragment ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public static void <RARE_TOKEN> ( Intent intent , String <RARE_TOKEN> , boolean <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( savedInstanceState == null ) { </a> 0
<a> final Bundle args = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( args ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) </a> 0
<a> . add ( R . id . <RARE_TOKEN> , <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> <RARE_TOKEN> . this . onError ( error ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( PickerFragment < ? > fragment ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void onError ( Exception error ) { </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) </a> 1
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 1
<a> . <RARE_TOKEN> ( error . getMessage ( ) ) </a> 1
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , null ) </a> 1
<a> . show ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . View . OnClickListener ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . Session . StatusCallback ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends Activity { </a> 0
<a> static final String applicationId = <RARE_TOKEN> ; </a> 0
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> Button <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> TextView <RARE_TOKEN> ; </a> 0
<a> Session session ; </a> 0
<a> boolean pendingRequest ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> this . <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> this . session = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( LoggingBehavior . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> if ( this . session . onActivityResult ( this , requestCode , resultCode , data ) && </a> 0
<a> pendingRequest && </a> 0
<a> this . session . <RARE_TOKEN> ( ) . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( Bundle savedInstanceState ) { </a> 0
<a> super . <RARE_TOKEN> ( savedInstanceState ) ; </a> 0
<a> pendingRequest = savedInstanceState . <RARE_TOKEN> ( <RARE_TOKEN> , pendingRequest ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , pendingRequest ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( this . session . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> StatusCallback callback = new StatusCallback ( ) { </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( exception != null ) { </a> 0
<a> new <RARE_TOKEN> . Builder ( <RARE_TOKEN> . this ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( exception . getMessage ( ) ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> <RARE_TOKEN> . this . session = <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> pendingRequest = true ; </a> 0
<a> this . session . <RARE_TOKEN> ( new Session . OpenRequest ( this ) . setCallback ( callback ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( "" ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . toString ( ) ; </a> 0
<a> String [ ] <RARE_TOKEN> = <RARE_TOKEN> . split ( <RARE_TOKEN> ) ; </a> 0
<a> List < Request > requests = new ArrayList < Request > ( ) ; </a> 0
<a> for ( final String <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> requests . add ( new Request ( session , <RARE_TOKEN> , null , null , new Request . Callback ( ) { </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> GraphObject graphObject = response . <RARE_TOKEN> ( ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> String s = <RARE_TOKEN> . <RARE_TOKEN> ( ) . toString ( ) ; </a> 0
<a> if ( graphObject != null ) { </a> 0
<a> if ( graphObject . getProperty ( <RARE_TOKEN> ) != null ) { </a> 0
<a> s = s + String . format ( <RARE_TOKEN> <RARE_TOKEN> , graphObject . getProperty ( <RARE_TOKEN> ) , graphObject . getProperty ( </a> 0
<a> "name" ) ) ; </a> 0
<a> } else { </a> 0
<a> s = s + String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else if ( error != null ) { </a> 0
<a> s = s + String . format ( <RARE_TOKEN> <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . setText ( s ) ; </a> 0
<a> } </a> 0
<a> } ) ) ; </a> 0
<a> } </a> 0
<a> pendingRequest = false ; </a> 0
<a> Request . <RARE_TOKEN> ( requests ) ; </a> 0
<a> } </a> 0
<a> private Session <RARE_TOKEN> ( ) { </a> 0
<a> Session <RARE_TOKEN> = Session . getActiveSession ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null || <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = new Session . Builder ( this ) . <RARE_TOKEN> ( applicationId ) . build ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public abstract class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( FacebookError e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onError ( <RARE_TOKEN> e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup . LayoutParams ; </a> 0
<a> import android . view . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Activity activity ; </a> 0
<a> private Handler <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> dialog ; </a> 0
<a> public <RARE_TOKEN> ( Activity activity ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> this . activity = activity ; </a> 0
<a> <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new Handler ( ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> LayoutParams params = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> params . <RARE_TOKEN> = LayoutParams . <RARE_TOKEN> ; </a> 0
<a> params . <RARE_TOKEN> = LayoutParams . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ( android . view . <RARE_TOKEN> . LayoutParams ) params ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> ( ( <RARE_TOKEN> ) activity . <RARE_TOKEN> ( Context . <RARE_TOKEN> ) ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , 0 ) ; </a> 0
<a> dialog = <RARE_TOKEN> . show ( <RARE_TOKEN> . this . activity , "" , </a> 0
<a> <RARE_TOKEN> . this . activity . getString ( R . string . <RARE_TOKEN> ) , true , true ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . toString ( ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( null , params , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> try { </a> 0
<a> JSONArray json = new JSONArray ( response ) ; </a> 0
<a> setText ( json . toString ( 2 ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> try { </a> 0
<a> JSONObject json = new JSONObject ( response ) ; </a> 0
<a> setText ( json . toString ( 2 ) ) ; </a> 0
<a> } catch ( JSONException <RARE_TOKEN> ) { </a> 0
<a> setText ( activity . getString ( R . string . exception ) + <RARE_TOKEN> . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> setText ( activity . getString ( R . string . <RARE_TOKEN> ) + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setText ( final String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> < String , Bitmap > <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> < String , String > <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> listener ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> > queue ; </a> 0
<a> final static int <RARE_TOKEN> = 15 ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> < String , Bitmap > ( ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> < String , String > ( ) ; </a> 0
<a> queue = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> this . listener = listener ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> queue . clear ( ) ; </a> 0
<a> } </a> 0
<a> public Bitmap <RARE_TOKEN> ( String <RARE_TOKEN> , String url ) { </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . containsKey ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , "" ) ; </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> queue . <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> , url ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> new <RARE_TOKEN> ( ) . execute ( <RARE_TOKEN> , url ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! queue . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = queue . <RARE_TOKEN> ( ) ; </a> 0
<a> new <RARE_TOKEN> ( ) . execute ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . url ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> < Object , Void , Bitmap > { </a> 0
<a> String <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> protected Bitmap <RARE_TOKEN> ( Object ... params ) { </a> 0
<a> this . <RARE_TOKEN> = ( String ) params [ 0 ] ; </a> 0
<a> String url = ( String ) params [ 1 ] ; </a> 0
<a> return Utility . <RARE_TOKEN> ( url ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( Bitmap result ) { </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> if ( result != null ) { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , result ) ; </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> { </a> 0
<a> String <RARE_TOKEN> ; </a> 0
<a> String url ; </a> 0
<a> public <RARE_TOKEN> ( String <RARE_TOKEN> , String url ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . url = url ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import android . widget . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> public class <RARE_TOKEN> extends Activity implements <RARE_TOKEN> { </a> 0
<a> private Handler <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> protected static JSONArray jsonArray ; </a> 0
<a> protected String <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new Handler ( ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> Bundle extras = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = extras . getString ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = extras . getString ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> jsonArray = new JSONObject ( <RARE_TOKEN> ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> jsonArray = new JSONArray ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> " + e . getMessage ( ) ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( this ) ) ; </a> 0
<a> <RARE_TOKEN> ( getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < ? > <RARE_TOKEN> , View v , int position , long <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> final long <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = jsonArray . <RARE_TOKEN> ( position ) . getLong ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = jsonArray . <RARE_TOKEN> ( position ) . getLong ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String name = jsonArray . <RARE_TOKEN> ( position ) . getString ( "name" ) ; </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( String . format ( getString ( R . string . <RARE_TOKEN> ) , name ) ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int <RARE_TOKEN> ) { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , String . valueOf ( <RARE_TOKEN> ) ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , Utility . <RARE_TOKEN> ) ; </a> 0
<a> params . putString ( "name" , getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> Utility . <RARE_TOKEN> . dialog ( <RARE_TOKEN> . this , <RARE_TOKEN> , params , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , null ) . show ( ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> " + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle values ) { </a> 0
<a> final String <RARE_TOKEN> = values . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> message <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( final String msg ) { </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Toast <RARE_TOKEN> = Toast . <RARE_TOKEN> ( <RARE_TOKEN> . this , msg , Toast . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( Utility . model == null ) { </a> 0
<a> Utility . model = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> Utility . model . <RARE_TOKEN> ( this ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . from ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return jsonArray . length ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( int position ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( int position ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( int position , View <RARE_TOKEN> , ViewGroup parent ) { </a> 0
<a> JSONObject jsonObject = null ; </a> 0
<a> try { </a> 0
<a> jsonObject = jsonArray . <RARE_TOKEN> ( position ) ; </a> 0
<a> } catch ( JSONException <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> View <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . name = ( TextView ) <RARE_TOKEN> . findViewById ( R . id . name ) ; </a> 0
<a> <RARE_TOKEN> . info = ( TextView ) <RARE_TOKEN> . findViewById ( R . id . info ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ( Utility . model . <RARE_TOKEN> ( </a> 0
<a> jsonObject . getString ( <RARE_TOKEN> ) , jsonObject . getString ( <RARE_TOKEN> ) ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ( Utility . model . <RARE_TOKEN> ( </a> 0
<a> jsonObject . getString ( <RARE_TOKEN> ) , jsonObject . getString ( <RARE_TOKEN> ) ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> <RARE_TOKEN> . name . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . name . setText ( jsonObject . getString ( "name" ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> <RARE_TOKEN> . name . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . info . setText ( jsonObject . <RARE_TOKEN> ( <RARE_TOKEN> ) . getString ( "name" ) ) ; </a> 0
<a> } else { </a> 0
<a> JSONObject location = jsonObject . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . info . setText ( location . getString ( <RARE_TOKEN> ) + ", " </a> 0
<a> + location . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> <RARE_TOKEN> . info . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> TextView name ; </a> 0
<a> TextView info ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . net . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . text . util . <RARE_TOKEN> ; </a> 0
<a> import android . text . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . View . OnClickListener ; </a> 0
<a> import android . view . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> extends Activity { </a> 0
<a> private Button <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Bundle params ; </a> 0
<a> private String url , <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> dialog ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Handler <RARE_TOKEN> ; </a> 0
<a> private final static String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private JSONObject <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new Handler ( ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> url = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . output ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> params = new Bundle ( ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> ( ( <RARE_TOKEN> ) <RARE_TOKEN> ( Context . <RARE_TOKEN> ) ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , 0 ) ; </a> 0
<a> url = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . toString ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . isEmpty ( <RARE_TOKEN> ) ) { </a> 0
<a> dialog = <RARE_TOKEN> . show ( <RARE_TOKEN> . this , "" , </a> 0
<a> getString ( R . string . <RARE_TOKEN> ) , true , true ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , params , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> url += "/" + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> setText ( url ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> if ( Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> dialog = <RARE_TOKEN> . show ( <RARE_TOKEN> . this , "" , </a> 0
<a> getString ( R . string . <RARE_TOKEN> ) , true , true ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , params , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . this ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> for this <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . this , <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> url = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = "" ; </a> 0
<a> <RARE_TOKEN> . setText ( "" ) ; </a> 0
<a> params . clear ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> setText ( "" ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = "" ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( Utility . <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . setText ( Utility . <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( Intent <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getData ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String connection ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> + "/" + connection ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < String > <RARE_TOKEN> ) { </a> 0
<a> String fields = "" ; </a> 0
<a> int count = 0 ; </a> 0
<a> for ( String field : <RARE_TOKEN> ) { </a> 0
<a> fields += field ; </a> 0
<a> if ( ++ count < <RARE_TOKEN> . size ( ) ) { </a> 0
<a> fields += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> params . putString ( <RARE_TOKEN> , fields ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> Utility . <RARE_TOKEN> . clear ( ) ; </a> 0
<a> try { </a> 0
<a> JSONObject jsonObject = new JSONObject ( response ) . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> Iterator < ? > <RARE_TOKEN> = jsonObject . keys ( ) ; </a> 0
<a> String <RARE_TOKEN> ; </a> 0
<a> while ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = ( String ) <RARE_TOKEN> . next ( ) ; </a> 0
<a> Utility . <RARE_TOKEN> . put ( <RARE_TOKEN> , </a> 0
<a> String . valueOf ( jsonObject . getInt ( <RARE_TOKEN> ) ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> not be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . this ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> not be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . this ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> Utility . <RARE_TOKEN> . <RARE_TOKEN> ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> if ( ! params . isEmpty ( ) ) { </a> 0
<a> url += <RARE_TOKEN> + Util . <RARE_TOKEN> ( params ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> params . clear ( ) ; </a> 0
<a> try { </a> 0
<a> JSONObject json = Util . <RARE_TOKEN> ( response ) ; </a> 0
<a> if ( json . has ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = json . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> json . remove ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> setText ( json . toString ( 2 ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> setText ( e . getMessage ( ) ) ; </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> setText ( e . getMessage ( ) ) ; </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> setText ( error . getMessage ( ) ) ; </a> 0
<a> params . clear ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setText ( final String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public final String <RARE_TOKEN> ( final <RARE_TOKEN> <RARE_TOKEN> , String url ) { </a> 0
<a> return <RARE_TOKEN> . group ( 1 ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( </a> 0
<a> <RARE_TOKEN> . isEmpty ( <RARE_TOKEN> ) ? View . <RARE_TOKEN> : View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( <RARE_TOKEN> . isEmpty ( <RARE_TOKEN> ) ? View . <RARE_TOKEN> </a> 0
<a> : View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( <RARE_TOKEN> . isEmpty ( <RARE_TOKEN> ) ? View . <RARE_TOKEN> : View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( </a> 0
<a> <RARE_TOKEN> . isEmpty ( <RARE_TOKEN> ) ? View . <RARE_TOKEN> : View . <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , "/" ) ; </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 0 , 0 ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , null , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( final String msg ) { </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Toast . <RARE_TOKEN> ( <RARE_TOKEN> . this , msg , Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . net . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import android . widget . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> extends Activity implements <RARE_TOKEN> { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private LoginButton <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Handler <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> dialog ; </a> 0
<a> final static int <RARE_TOKEN> = 0 ; </a> 0
<a> final static int <RARE_TOKEN> = 1 ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> list ; </a> 0
<a> String [ ] <RARE_TOKEN> = { <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> } ; </a> 0
<a> String [ ] permissions = { <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> } ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> Util . <RARE_TOKEN> ( this , <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ID must be " </a> 0
<a> + <RARE_TOKEN> <RARE_TOKEN> running this <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new Handler ( ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) <RARE_TOKEN> . this . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . this . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> = new <RARE_TOKEN> ( Utility . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( LoginButton ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( Utility . <RARE_TOKEN> , this ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . init ( this , <RARE_TOKEN> , Utility . <RARE_TOKEN> , permissions ) ; </a> 0
<a> if ( Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> list = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> list . <RARE_TOKEN> ( this ) ; </a> 0
<a> list . <RARE_TOKEN> ( new <RARE_TOKEN> < String > ( this , R . layout . <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( Utility . <RARE_TOKEN> != null ) { </a> 0
<a> if ( ! Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> } else { </a> 0
<a> Utility . <RARE_TOKEN> . <RARE_TOKEN> ( this , null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> switch ( requestCode ) { </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> Utility . <RARE_TOKEN> . <RARE_TOKEN> ( requestCode , resultCode , data ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> if ( resultCode == Activity . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = data . getData ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> try { </a> 0
<a> params . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> Utility . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , params , <RARE_TOKEN> , </a> 0
<a> new <RARE_TOKEN> ( ) , null ) ; </a> 0
<a> } else { </a> 0
<a> Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> from the <RARE_TOKEN> , Toast . <RARE_TOKEN> ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> for <RARE_TOKEN> , </a> 0
<a> Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < ? > <RARE_TOKEN> , View v , int position , long <RARE_TOKEN> ) { </a> 0
<a> switch ( position ) { </a> 0
<a> case 0 : { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , Utility . <RARE_TOKEN> ) ; </a> 0
<a> params . putString ( "name" , getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> Utility . <RARE_TOKEN> . dialog ( <RARE_TOKEN> . this , <RARE_TOKEN> , params , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> String <RARE_TOKEN> = Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 1 : { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "message" , getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> Utility . <RARE_TOKEN> . dialog ( <RARE_TOKEN> . this , <RARE_TOKEN> , params , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 2 : { </a> 0
<a> if ( ! Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> Util . <RARE_TOKEN> ( this , <RARE_TOKEN> , <RARE_TOKEN> must <RARE_TOKEN> log <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> dialog = <RARE_TOKEN> . show ( <RARE_TOKEN> . this , "" , </a> 0
<a> getString ( R . string . <RARE_TOKEN> ) , true , true ) ; </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , params , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> from user <RARE_TOKEN> <RARE_TOKEN> in <RARE_TOKEN> <RARE_TOKEN> from <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> order <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( null , params , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) . <RARE_TOKEN> ( new DialogInterface . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( DialogInterface d ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } ) . show ( ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 3 : { </a> 0
<a> if ( ! Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> Util . <RARE_TOKEN> ( this , <RARE_TOKEN> , <RARE_TOKEN> must <RARE_TOKEN> log <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> dialog = <RARE_TOKEN> . show ( <RARE_TOKEN> . this , "" , </a> 0
<a> getString ( R . string . <RARE_TOKEN> ) , true , true ) ; </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int <RARE_TOKEN> ) { </a> 0
<a> Intent intent = new Intent ( Intent . <RARE_TOKEN> , </a> 0
<a> ( <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( intent , </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int <RARE_TOKEN> ) { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , params , </a> 0
<a> <RARE_TOKEN> , new <RARE_TOKEN> ( ) , null ) ; </a> 0
<a> } </a> 0
<a> } ) . <RARE_TOKEN> ( new DialogInterface . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( DialogInterface d ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } ) . show ( ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 4 : { </a> 0
<a> final Intent <RARE_TOKEN> = new Intent ( <RARE_TOKEN> ( ) , <RARE_TOKEN> . class ) ; </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) . show ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 5 : { </a> 0
<a> if ( ! Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> Util . <RARE_TOKEN> ( this , <RARE_TOKEN> , <RARE_TOKEN> must <RARE_TOKEN> log <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . this ) . show ( ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 6 : { </a> 0
<a> Intent <RARE_TOKEN> = new Intent ( <RARE_TOKEN> ( ) , <RARE_TOKEN> . class ) ; </a> 0
<a> if ( Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> Utility . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 7 : { </a> 0
<a> if ( ! Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> Util . <RARE_TOKEN> ( this , <RARE_TOKEN> , <RARE_TOKEN> must <RARE_TOKEN> log <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . this ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle values ) { </a> 0
<a> final String <RARE_TOKEN> = values . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . this , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , values ) </a> 0
<a> . show ( ) ; </a> 0
<a> } else { </a> 0
<a> Toast <RARE_TOKEN> = Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> post <RARE_TOKEN> , </a> 0
<a> Toast . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> " + error . getMessage ( ) , </a> 0
<a> Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Toast <RARE_TOKEN> = Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> status <RARE_TOKEN> , </a> 0
<a> Toast . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle values ) { </a> 0
<a> Toast <RARE_TOKEN> = Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> request <RARE_TOKEN> , </a> 0
<a> Toast . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . show ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> " + error . getMessage ( ) , </a> 0
<a> Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Toast <RARE_TOKEN> = Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> request <RARE_TOKEN> , </a> 0
<a> Toast . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> Intent <RARE_TOKEN> = new Intent ( <RARE_TOKEN> ( ) , <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , response ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> " + error . getMessage ( ) , </a> 0
<a> Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . this , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , response ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> " + error . getMessage ( ) , </a> 0
<a> Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> " + response , </a> 0
<a> Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> Toast . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> " + error . getMessage ( ) , </a> 0
<a> Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> JSONObject jsonObject ; </a> 0
<a> try { </a> 0
<a> jsonObject = new JSONObject ( response ) ; </a> 0
<a> final String <RARE_TOKEN> = jsonObject . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) . getString ( <RARE_TOKEN> ) ; </a> 0
<a> final String name = jsonObject . getString ( "name" ) ; </a> 0
<a> Utility . <RARE_TOKEN> = jsonObject . getString ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> " + name + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( Utility . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String error ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> " + error ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> user <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , params , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . from ( <RARE_TOKEN> . this . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( int position ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( int position ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( int position , View <RARE_TOKEN> , ViewGroup parent ) { </a> 0
<a> View <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = ( TextView ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> . setText ( <RARE_TOKEN> [ position ] ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> { </a> 0
<a> TextView <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . net . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> public class <RARE_TOKEN> extends Activity { </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> Intent <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getData ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> Utility . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Intent <RARE_TOKEN> = new Intent ( <RARE_TOKEN> ( ) , <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( Intent . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . util . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public class LoginButton extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Handler <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private String [ ] <RARE_TOKEN> ; </a> 0
<a> private Activity <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public LoginButton ( Context context ) { </a> 0
<a> super ( context ) ; </a> 0
<a> } </a> 0
<a> public LoginButton ( Context context , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( context , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public LoginButton ( Context context , <RARE_TOKEN> <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super ( context , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void init ( final Activity activity , final int <RARE_TOKEN> , final <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> init ( activity , <RARE_TOKEN> , <RARE_TOKEN> , new String [ ] { } ) ; </a> 0
<a> } </a> 0
<a> public void init ( final Activity activity , final int <RARE_TOKEN> , final <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> final String [ ] permissions ) { </a> 0
<a> <RARE_TOKEN> = activity ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = permissions ; </a> 0
<a> <RARE_TOKEN> = new Handler ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ? R . <RARE_TOKEN> . <RARE_TOKEN> : R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> setOnClickListener ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> implements OnClickListener { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( getContext ( ) , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle values ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onError ( <RARE_TOKEN> error ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String response , final Object state ) { </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , getContext ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String error ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . clear ( getContext ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . method . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . view . ViewGroup . LayoutParams ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import android . widget . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final static int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private Activity activity ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> < String > <RARE_TOKEN> ; </a> 0
<a> String [ ] <RARE_TOKEN> = { <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> } ; </a> 0
<a> String [ ] <RARE_TOKEN> = { <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> } ; </a> 0
<a> String [ ] <RARE_TOKEN> = { <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> } ; </a> 0
<a> public <RARE_TOKEN> ( Activity activity ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> this . activity = activity ; </a> 0
<a> <RARE_TOKEN> ( activity . getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> < String > ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> LayoutParams params = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> params . <RARE_TOKEN> = LayoutParams . <RARE_TOKEN> ; </a> 0
<a> params . <RARE_TOKEN> = LayoutParams . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ( android . view . <RARE_TOKEN> . LayoutParams ) params ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getInstance ( ) ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( activity . getString ( R . string . user ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( activity . getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( activity . getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( 0 ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( 1 ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( 2 ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( ) && Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> Toast . <RARE_TOKEN> ( activity . <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> <RARE_TOKEN> . this . dismiss ( ) ; </a> 0
<a> } else { </a> 0
<a> String [ ] permissions = <RARE_TOKEN> . <RARE_TOKEN> ( new String [ 0 ] ) ; </a> 0
<a> Utility . <RARE_TOKEN> . <RARE_TOKEN> ( activity , permissions , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle values ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Toast . <RARE_TOKEN> ( activity . <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> <RARE_TOKEN> . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> Toast . <RARE_TOKEN> ( activity . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> new permissions <RARE_TOKEN> , Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> <RARE_TOKEN> . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onError ( <RARE_TOKEN> error ) { </a> 0
<a> Toast . <RARE_TOKEN> ( activity . <RARE_TOKEN> ( ) , <RARE_TOKEN> <RARE_TOKEN> new permissions <RARE_TOKEN> , </a> 0
<a> Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> <RARE_TOKEN> . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Toast . <RARE_TOKEN> ( activity . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> new permissions <RARE_TOKEN> , Toast . <RARE_TOKEN> ) . show ( ) ; </a> 0
<a> <RARE_TOKEN> . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> String [ ] permissions ; </a> 0
<a> boolean [ ] <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( String [ ] permissions ) { </a> 0
<a> this . permissions = permissions ; </a> 0
<a> this . <RARE_TOKEN> = new boolean [ permissions . length ] ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . from ( activity . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return permissions . length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( int position ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( int position ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( final int position , View <RARE_TOKEN> , ViewGroup parent ) { </a> 0
<a> View <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . setText ( this . permissions [ position ] ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( position ) ; </a> 0
<a> if ( Utility . <RARE_TOKEN> . containsKey ( this . permissions [ position ] ) </a> 0
<a> && Utility . <RARE_TOKEN> . get ( this . permissions [ position ] ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this . <RARE_TOKEN> [ position ] ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> button , boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> [ button . getId ( ) ] = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . add ( button . <RARE_TOKEN> ( ) . toString ( ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . contains ( button . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> <RARE_TOKEN> . remove ( button . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . location . <RARE_TOKEN> ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . location . <RARE_TOKEN> ; </a> 0
<a> import android . location . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import android . widget . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> extends Activity implements <RARE_TOKEN> { </a> 0
<a> private Handler <RARE_TOKEN> ; </a> 0
<a> private JSONObject location ; </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> protected static JSONArray jsonArray ; </a> 0
<a> final static double <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> final static double <RARE_TOKEN> = - <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> dialog ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new Handler ( ) ; </a> 0
<a> location = new JSONObject ( ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> Bundle extras = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = extras . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> try { </a> 0
<a> location . put ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> location . put ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> new Thread ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> dialog = <RARE_TOKEN> . show ( <RARE_TOKEN> . this , "" , </a> 0
<a> getString ( R . string . <RARE_TOKEN> ) , false , true , </a> 0
<a> new DialogInterface . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( DialogInterface dialog ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> location <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> ( Context . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , 1 , 0 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> new <RARE_TOKEN> . Builder ( <RARE_TOKEN> . this ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( getString ( R . string . <RARE_TOKEN> ) ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( </a> 0
<a> new Intent ( </a> 0
<a> android . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> 0 ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . <RARE_TOKEN> ( R . string . cancel , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int <RARE_TOKEN> ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) . show ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . loop ( ) ; </a> 0
<a> } </a> 0
<a> } . start ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> dialog = <RARE_TOKEN> . show ( <RARE_TOKEN> . this , "" , getString ( R . string . <RARE_TOKEN> ) , true , </a> 0
<a> true , new DialogInterface . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( DialogInterface dialog ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> params . putString ( <RARE_TOKEN> , </a> 0
<a> location . getString ( <RARE_TOKEN> ) + <RARE_TOKEN> + location . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , params , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> Log . d ( <RARE_TOKEN> , <RARE_TOKEN> response: " + response ) ; </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> try { </a> 0
<a> jsonArray = new JSONObject ( response ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( jsonArray == null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> not be <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> " + e . getMessage ( ) ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . this ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> . this ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < ? > <RARE_TOKEN> , View v , int position , long <RARE_TOKEN> ) { </a> 0
<a> if ( ! Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> Util . <RARE_TOKEN> ( this , <RARE_TOKEN> , <RARE_TOKEN> must <RARE_TOKEN> log <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> try { </a> 0
<a> final String message = <RARE_TOKEN> from the " + getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> final String name = jsonArray . <RARE_TOKEN> ( position ) . getString ( "name" ) ; </a> 0
<a> final String <RARE_TOKEN> = jsonArray . <RARE_TOKEN> ( position ) . getString ( <RARE_TOKEN> ) ; </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( String . format ( getString ( R . string . <RARE_TOKEN> ) , name ) ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int <RARE_TOKEN> ) { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> params . putString ( "message" , message ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , location . toString ( ) ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , params , <RARE_TOKEN> , </a> 0
<a> new <RARE_TOKEN> ( ) , null ) ; </a> 0
<a> } </a> 0
<a> } ) . <RARE_TOKEN> ( R . string . cancel , null ) . show ( ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> " + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> " + response ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> " + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( final String msg ) { </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Toast <RARE_TOKEN> = Toast . <RARE_TOKEN> ( <RARE_TOKEN> . this , msg , Toast . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Context context ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . from ( context ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return jsonArray . length ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( int position ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( int position ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( int position , View <RARE_TOKEN> , ViewGroup parent ) { </a> 0
<a> JSONObject jsonObject = null ; </a> 0
<a> try { </a> 0
<a> jsonObject = jsonArray . <RARE_TOKEN> ( position ) ; </a> 0
<a> } catch ( JSONException <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> View <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . name = ( TextView ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . location = ( TextView ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . name . setText ( jsonObject . getString ( "name" ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> <RARE_TOKEN> . name . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> String location = jsonObject . <RARE_TOKEN> ( <RARE_TOKEN> ) . getString ( <RARE_TOKEN> ) + ", " </a> 0
<a> + jsonObject . <RARE_TOKEN> ( <RARE_TOKEN> ) . getString ( <RARE_TOKEN> ) + ", " </a> 0
<a> + jsonObject . <RARE_TOKEN> ( <RARE_TOKEN> ) . getString ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . location . setText ( location ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> <RARE_TOKEN> . location . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> { </a> 0
<a> TextView name ; </a> 0
<a> TextView location ; </a> 0
<a> } </a> 0
<a> class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Location <RARE_TOKEN> ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> try { </a> 0
<a> location . put ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> location . put ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> " + String . valueOf ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) + " " </a> 0
<a> + String . valueOf ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , int status , Bundle extras ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 0
<a> private static <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 0
<a> public static void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> <RARE_TOKEN> . add ( listener ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> <RARE_TOKEN> . remove ( listener ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> <RARE_TOKEN> . add ( listener ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> <RARE_TOKEN> . remove ( listener ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( ) { </a> 0
<a> for ( <RARE_TOKEN> listener : <RARE_TOKEN> ) { </a> 0
<a> listener . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String error ) { </a> 0
<a> for ( <RARE_TOKEN> listener : <RARE_TOKEN> ) { </a> 0
<a> listener . <RARE_TOKEN> ( error ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( ) { </a> 0
<a> for ( <RARE_TOKEN> l : <RARE_TOKEN> ) { </a> 0
<a> l . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( ) { </a> 0
<a> for ( <RARE_TOKEN> l : <RARE_TOKEN> ) { </a> 0
<a> l . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static interface <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String error ) ; </a> 0
<a> } </a> 0
<a> public static interface <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . method . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . util . Date ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Activity activity ; </a> 0
<a> public <RARE_TOKEN> ( Activity activity ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> this . activity = activity ; </a> 0
<a> <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setText ( Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( Utility . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getInstance ( ) ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> listener = new <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! Utility . <RARE_TOKEN> . <RARE_TOKEN> ( activity , listener ) ) { </a> 0
<a> listener . onError ( new Error ( </a> 0
<a> activity . getString ( R . string . <RARE_TOKEN> ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements <RARE_TOKEN> . <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( FacebookError e ) { </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> String <RARE_TOKEN> = String . format ( activity . getString ( R . string . <RARE_TOKEN> ) + <RARE_TOKEN> , </a> 0
<a> e . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Util . <RARE_TOKEN> ( activity , <RARE_TOKEN> , e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onError ( Error e ) { </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> Util . <RARE_TOKEN> ( activity , activity . getString ( R . string . error ) , e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Bundle values ) { </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . setText ( values . getString ( <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( values . getLong ( <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( boolean enabled ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( enabled ) ; </a> 0
<a> <RARE_TOKEN> . setText ( enabled ? R . string . <RARE_TOKEN> : R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( long time ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> . format ( new Date ( time ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . text . method . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup . LayoutParams ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private Bundle values ; </a> 0
<a> private TextView <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private Activity activity ; </a> 0
<a> private Handler <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Activity activity , String <RARE_TOKEN> , Bundle values ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> this . activity = activity ; </a> 0
<a> this . values = values ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new Handler ( ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> LayoutParams params = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> params . <RARE_TOKEN> = LayoutParams . <RARE_TOKEN> ; </a> 0
<a> params . <RARE_TOKEN> = LayoutParams . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ( android . view . <RARE_TOKEN> . LayoutParams ) params ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setText ( values . toString ( ) ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getInstance ( ) ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> final String <RARE_TOKEN> = values . getString ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , new Bundle ( ) , <RARE_TOKEN> , </a> 0
<a> new <RARE_TOKEN> ( ) , null ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> try { </a> 0
<a> JSONObject json = new JSONObject ( response ) ; </a> 0
<a> setText ( json . toString ( 2 ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> setText ( activity . getString ( R . string . exception ) + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> setText ( activity . getString ( R . string . <RARE_TOKEN> ) + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> if ( response . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> String message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> message += <RARE_TOKEN> <RARE_TOKEN> " + response ; </a> 0
<a> setText ( message ) ; </a> 0
<a> } else { </a> 0
<a> setText ( <RARE_TOKEN> post <RARE_TOKEN> not be <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> setText ( activity . getString ( R . string . <RARE_TOKEN> ) + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setText ( final String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . text . util . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup . LayoutParams ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private String response , <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Activity activity ; </a> 0
<a> private <RARE_TOKEN> dialog ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> private Handler <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Activity activity , String <RARE_TOKEN> , String response ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> this . activity = activity ; </a> 0
<a> this . response = response ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new Handler ( ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> LayoutParams params = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> params . <RARE_TOKEN> = LayoutParams . <RARE_TOKEN> ; </a> 0
<a> params . <RARE_TOKEN> = LayoutParams . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ( android . view . <RARE_TOKEN> . LayoutParams ) params ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> JSONObject json ; </a> 0
<a> try { </a> 0
<a> json = Util . <RARE_TOKEN> ( response ) ; </a> 0
<a> final String <RARE_TOKEN> = json . getString ( <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . setText ( json . toString ( 2 ) ) ; </a> 0
<a> <RARE_TOKEN> . setText ( activity . getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> dialog = <RARE_TOKEN> . show ( activity , "" , </a> 0
<a> activity . getString ( R . string . <RARE_TOKEN> ) , true , true ) ; </a> 0
<a> dialog . show ( ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , params , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> setText ( activity . getString ( R . string . exception ) + e . getMessage ( ) ) ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> setText ( activity . getString ( R . string . <RARE_TOKEN> ) + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> + Utility . <RARE_TOKEN> ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Utility . <RARE_TOKEN> . request ( <RARE_TOKEN> , params , <RARE_TOKEN> , new <RARE_TOKEN> ( ) , </a> 0
<a> null ) ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> try { </a> 0
<a> JSONObject json = Util . <RARE_TOKEN> ( response ) ; </a> 0
<a> final String <RARE_TOKEN> = json . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( <RARE_TOKEN> ) ) { </a> 0
<a> setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> field of the <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> new <RARE_TOKEN> ( ) . execute ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> setText ( activity . getString ( R . string . exception ) + e . getMessage ( ) ) ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> setText ( activity . getString ( R . string . <RARE_TOKEN> ) + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> setText ( activity . getString ( R . string . <RARE_TOKEN> ) + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> if ( response . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> String message = <RARE_TOKEN> <RARE_TOKEN> in <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> message += <RARE_TOKEN> <RARE_TOKEN> " + response ; </a> 0
<a> setText ( message ) ; </a> 0
<a> } else { </a> 0
<a> setText ( <RARE_TOKEN> <RARE_TOKEN> not be <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError error ) { </a> 0
<a> setText ( activity . getString ( R . string . <RARE_TOKEN> ) + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setText ( final String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> < String , Void , Bitmap > { </a> 0
<a> @ Override </a> 0
<a> protected Bitmap <RARE_TOKEN> ( String ... <RARE_TOKEN> ) { </a> 0
<a> return Utility . <RARE_TOKEN> ( <RARE_TOKEN> [ 0 ] ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( Bitmap result ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( result ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . net . <RARE_TOKEN> ; </a> 0
<a> import android . net . http . <RARE_TOKEN> ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public class Utility extends <RARE_TOKEN> { </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public static JSONObject <RARE_TOKEN> ; </a> 0
<a> public static String <RARE_TOKEN> = null ; </a> 0
<a> public static String <RARE_TOKEN> = null ; </a> 0
<a> public static <RARE_TOKEN> model ; </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> public static <RARE_TOKEN> < String , String > <RARE_TOKEN> = new <RARE_TOKEN> < String , String > ( ) ; </a> 0
<a> private static int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static Bitmap <RARE_TOKEN> ( String url ) { </a> 0
<a> Bitmap <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> URL <RARE_TOKEN> = new URL ( url ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . connect ( ) ; </a> 0
<a> InputStream is = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( is ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( is ) ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> is . close ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } finally { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( InputStream <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( long n ) throws IOException { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> while ( <RARE_TOKEN> < n ) { </a> 0
<a> long <RARE_TOKEN> = in . <RARE_TOKEN> ( n - <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> int b = read ( ) ; </a> 0
<a> if ( b < 0 ) { </a> 0
<a> break ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static byte [ ] <RARE_TOKEN> ( Context context , <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 0
<a> InputStream is = context . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( is , null , <RARE_TOKEN> ) ; </a> 0
<a> is . close ( ) ; </a> 0
<a> int <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( context , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> || <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> Bitmap <RARE_TOKEN> ; </a> 0
<a> is = context . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> || <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> float <RARE_TOKEN> = ( ( float ) <RARE_TOKEN> ) / ( ( float ) <RARE_TOKEN> ) ; </a> 0
<a> float <RARE_TOKEN> = ( ( float ) <RARE_TOKEN> ) / ( ( float ) <RARE_TOKEN> ) ; </a> 0
<a> float <RARE_TOKEN> = Math . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = ( int ) <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( is , null , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( is ) ; </a> 0
<a> } </a> 0
<a> is . close ( ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = Bitmap . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , 0 , <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> , true ) ; </a> 0
<a> } </a> 0
<a> String type = context . <RARE_TOKEN> ( ) . getType ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> if ( type . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( Bitmap . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( type . equals ( <RARE_TOKEN> ) || type . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( Bitmap . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static int <RARE_TOKEN> ( Context context , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> cursor = context . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> new String [ ] { <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> } , null , null , null ) ; </a> 0
<a> if ( cursor . <RARE_TOKEN> ( ) != 1 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> cursor . <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = cursor . getInt ( 0 ) ; </a> 0
<a> cursor . close ( ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . <RARE_TOKEN> . Bitmap ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . text . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . widget . * ; </a> 0
<a> import java . util . * ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final List < String > <RARE_TOKEN> = Arrays . asList ( <RARE_TOKEN> ) ; </a> 0
<a> private static final Location <RARE_TOKEN> = new Location ( "" ) { </a> 0
<a> { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private LoginButton <RARE_TOKEN> ; </a> 0
<a> private ProfilePictureView <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> private ViewGroup <RARE_TOKEN> ; </a> 0
<a> private GraphUser user ; </a> 0
<a> private enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Session . StatusCallback callback = new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> <RARE_TOKEN> ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( this , callback ) ; </a> 0
<a> <RARE_TOKEN> . onCreate ( savedInstanceState ) ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> String name = savedInstanceState . getString ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . valueOf ( name ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( LoginButton ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new LoginButton . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( GraphUser user ) { </a> 0
<a> <RARE_TOKEN> . this . user = user ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = ( ProfilePictureView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = ( ViewGroup ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> fragment = <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( fragment != null ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> if ( fragment instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( <RARE_TOKEN> ) fragment ) ; </a> 0
<a> } else if ( fragment instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( <RARE_TOKEN> ) fragment ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == 0 ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> <RARE_TOKEN> . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . putString ( <RARE_TOKEN> , <RARE_TOKEN> . name ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> <RARE_TOKEN> . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> . <RARE_TOKEN> && </a> 0
<a> ( exception instanceof <RARE_TOKEN> || </a> 0
<a> exception instanceof <RARE_TOKEN> ) ) { </a> 0
<a> new <RARE_TOKEN> . Builder ( <RARE_TOKEN> . this ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } else if ( state == SessionState . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = ( session != null && session . isOpened ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> && user != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( user . getId ( ) ) ; </a> 0
<a> <RARE_TOKEN> . setText ( getString ( R . string . <RARE_TOKEN> , user . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> <RARE_TOKEN> . setText ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> String getId ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String message , GraphObject result , FacebookRequestError error ) { </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> if ( error == null ) { </a> 0
<a> <RARE_TOKEN> = getString ( R . string . success ) ; </a> 0
<a> String id = result . cast ( <RARE_TOKEN> . class ) . getId ( ) ; </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> , message , id ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = getString ( R . string . error ) ; </a> 0
<a> <RARE_TOKEN> = error . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( user != null && <RARE_TOKEN> ( ) ) { </a> 0
<a> final String message = getString ( R . string . <RARE_TOKEN> , user . <RARE_TOKEN> ( ) , ( new Date ( ) . toString ( ) ) ) ; </a> 0
<a> Request request = Request </a> 0
<a> . <RARE_TOKEN> ( Session . getActiveSession ( ) , message , new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> <RARE_TOKEN> ( message , response . <RARE_TOKEN> ( ) , response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> request . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> Bitmap <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( this . getResources ( ) , R . <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> Request request = Request . <RARE_TOKEN> ( Session . getActiveSession ( ) , <RARE_TOKEN> , new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> <RARE_TOKEN> ( getString ( R . string . <RARE_TOKEN> ) , response . <RARE_TOKEN> ( ) , response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> request . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( PickerFragment < ? > fragment ) { </a> 0
<a> fragment . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > <RARE_TOKEN> , FacebookException error ) { </a> 0
<a> <RARE_TOKEN> ( getString ( R . string . error ) , error . getMessage ( ) ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> , fragment ) </a> 0
<a> . <RARE_TOKEN> ( null ) </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> final <RARE_TOKEN> fragment = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( fragment ) ; </a> 0
<a> <RARE_TOKEN> ( fragment ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( final <RARE_TOKEN> fragment ) { </a> 0
<a> fragment . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( PickerFragment < ? > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( fragment ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> fragment ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = "" ; </a> 0
<a> Collection < GraphUser > <RARE_TOKEN> = fragment . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . size ( ) > 0 ) { </a> 0
<a> ArrayList < String > names = new ArrayList < String > ( ) ; </a> 0
<a> for ( GraphUser user : <RARE_TOKEN> ) { </a> 0
<a> names . add ( user . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ", " , names ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( getString ( R . string . <RARE_TOKEN> ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> fragment ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> String result = "" ; </a> 0
<a> GraphPlace <RARE_TOKEN> = fragment . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> result = <RARE_TOKEN> . getName ( ) ; </a> 0
<a> } else { </a> 0
<a> result = getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( getString ( R . string . <RARE_TOKEN> ) , result ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> final <RARE_TOKEN> fragment = new <RARE_TOKEN> ( ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( fragment ) ; </a> 0
<a> <RARE_TOKEN> ( fragment ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( final <RARE_TOKEN> fragment ) { </a> 0
<a> fragment . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( PickerFragment < ? > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( fragment ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( PickerFragment < ? > <RARE_TOKEN> ) { </a> 0
<a> if ( fragment . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> <RARE_TOKEN> ( fragment ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String <RARE_TOKEN> , String message ) { </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( message ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> return session != null && session . getPermissions ( ) . contains ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> action ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> <RARE_TOKEN> = action ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> session . <RARE_TOKEN> ( new Session . <RARE_TOKEN> ( this , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 1
<a> import android . content . Intent ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . FacebookException ; </a> 0
<a> import com . facebook . widget . PickerFragment ; </a> 0
<a> import com . facebook . widget . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public static void <RARE_TOKEN> ( Intent intent , Location location , String <RARE_TOKEN> ) { </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , location ) ; </a> 0
<a> intent . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( savedInstanceState == null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> <RARE_TOKEN> . this . onError ( error ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( PickerFragment < ? > fragment ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new PickerFragment . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( PickerFragment < ? > fragment ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , null ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void onError ( Exception error ) { </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) </a> 1
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 1
<a> . <RARE_TOKEN> ( error . getMessage ( ) ) </a> 1
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , null ) </a> 1
<a> . show ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public GraphPlace <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( GraphPlace <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private GraphPlace <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . location . <RARE_TOKEN> ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . location . <RARE_TOKEN> ; </a> 0
<a> import android . location . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . model . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final Location <RARE_TOKEN> = new Location ( "" ) { </a> 0
<a> { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private static final Location <RARE_TOKEN> = new Location ( "" ) { </a> 0
<a> { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( - <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private static final Location <RARE_TOKEN> = new Location ( "" ) { </a> 0
<a> { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Location <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> Button button = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> button . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> button = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> button . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> button = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> button . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( Session . getActiveSession ( ) == null || </a> 1
<a> Session . getActiveSession ( ) . <RARE_TOKEN> ( ) ) { </a> 1
<a> Session . <RARE_TOKEN> ( this , true , null ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> ( Context . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void onError ( Exception exception ) { </a> 0
<a> <RARE_TOKEN> . Builder builder = new <RARE_TOKEN> . Builder ( this ) ; </a> 0
<a> builder . <RARE_TOKEN> ( <RARE_TOKEN> ) . <RARE_TOKEN> ( exception . getMessage ( ) ) . <RARE_TOKEN> ( <RARE_TOKEN> , null ) ; </a> 0
<a> builder . show ( ) ; </a> 0
<a> } </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> switch ( requestCode ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( resultCode ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> Session . getActiveSession ( ) . onActivityResult ( this , requestCode , resultCode , data ) ; </a> 1
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int resultCode ) { </a> 0
<a> String <RARE_TOKEN> = "" ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> ( ) ; </a> 0
<a> GraphPlace <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> location = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . getName ( ) , <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 0
<a> location . <RARE_TOKEN> ( ) , location . <RARE_TOKEN> ( ) , </a> 0
<a> location . <RARE_TOKEN> ( ) , location . <RARE_TOKEN> ( ) , location . <RARE_TOKEN> ( ) , location . <RARE_TOKEN> ( ) , </a> 0
<a> location . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Location location ) { </a> 0
<a> <RARE_TOKEN> = location ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , int status , Bundle extras ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Location location ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> Intent intent = new Intent ( this , <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( intent , location , null ) ; </a> 0
<a> <RARE_TOKEN> ( intent , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> String model = android . os . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> if ( model . equals ( <RARE_TOKEN> ) || model . equals ( <RARE_TOKEN> ) || model . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> new <RARE_TOKEN> . Builder ( this ) </a> 1
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 1
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 1
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , null ) </a> 1
<a> . show ( ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . widget . ProfilePictureView ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . Random ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = 6 ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> / 2 ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String [ ] <RARE_TOKEN> = { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> } ; </a> 0
<a> private int <RARE_TOKEN> = ProfilePictureView . <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private Random <RARE_TOKEN> ; </a> 0
<a> private ProfilePictureView <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private View <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , ViewGroup parent , Bundle savedInstanceState ) { </a> 0
<a> View <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , parent , false ) ; </a> 0
<a> <RARE_TOKEN> = new Random ( ( new Date ( ) ) . getTime ( ) ) ; </a> 0
<a> <RARE_TOKEN> = ( ProfilePictureView ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> container = ( <RARE_TOKEN> ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = container . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> View <RARE_TOKEN> = container . <RARE_TOKEN> ( i ) ; </a> 0
<a> Object <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> instanceof Button ) { </a> 0
<a> <RARE_TOKEN> ( ( Button ) <RARE_TOKEN> ) ; </a> 0
<a> if ( i == 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final Button <RARE_TOKEN> = ( Button ) <RARE_TOKEN> . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> if ( <RARE_TOKEN> != ProfilePictureView . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ProfilePictureView . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> switch ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> case ProfilePictureView . <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ProfilePictureView . <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> case ProfilePictureView . <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ProfilePictureView . <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> switch ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> case ProfilePictureView . <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ProfilePictureView . <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> case ProfilePictureView . <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ProfilePictureView . <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , int i , boolean b ) { </a> 0
<a> <RARE_TOKEN> ( i ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> ( savedInstanceState ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Bundle savedInstanceState ) { </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> <RARE_TOKEN> = savedInstanceState . getInt ( </a> 0
<a> <RARE_TOKEN> , ProfilePictureView . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == ProfilePictureView . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ProfilePictureView . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Button b ) { </a> 0
<a> b . setOnClickListener ( new Button . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Object <RARE_TOKEN> = v . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . toString ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> . nextInt ( <RARE_TOKEN> . length ) ] ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = ProfilePictureView . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setVisibility ( View . <RARE_TOKEN> ) ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case ProfilePictureView . <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case ProfilePictureView . <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case ProfilePictureView . <RARE_TOKEN> : </a> 0
<a> default : </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ProfilePictureView . <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . LayoutParams params = new <RARE_TOKEN> . LayoutParams ( </a> 0
<a> 0 , </a> 0
<a> ViewGroup . LayoutParams . <RARE_TOKEN> , </a> 0
<a> 1 </a> 0
<a> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( params ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int i ) { </a> 0
<a> if ( <RARE_TOKEN> != ProfilePictureView . <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> float <RARE_TOKEN> = ( i * <RARE_TOKEN> ) + <RARE_TOKEN> ; </a> 0
<a> float <RARE_TOKEN> = ( i * 28 ) + <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . LayoutParams params = new <RARE_TOKEN> . LayoutParams ( </a> 0
<a> ( int ) ( <RARE_TOKEN> * getResources ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ) , </a> 0
<a> ( int ) ( <RARE_TOKEN> * getResources ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( params ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . <RARE_TOKEN> ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . model . <RARE_TOKEN> ; </a> 0
<a> public abstract class <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> adapter ; </a> 0
<a> private int requestCode ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , String <RARE_TOKEN> , String <RARE_TOKEN> , int requestCode ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . requestCode = requestCode ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> adapter ) { </a> 0
<a> this . adapter = adapter ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return requestCode ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( adapter != null ) { </a> 0
<a> adapter . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( adapter != null ) { </a> 0
<a> adapter . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected abstract View . OnClickListener <RARE_TOKEN> ( ) ; </a> 0
<a> protected abstract void <RARE_TOKEN> ( <RARE_TOKEN> action ) ; </a> 0
<a> protected void onActivityResult ( Intent data ) { } </a> 0
<a> protected void onSaveInstanceState ( Bundle bundle ) { } </a> 0
<a> protected boolean <RARE_TOKEN> ( Bundle <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> adapter . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . util . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> import android . widget . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( Context context ) { </a> 0
<a> super ( context ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( context , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Context context , <RARE_TOKEN> <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super ( context , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> adapter = <RARE_TOKEN> ( ) ; </a> 0
<a> int count = adapter . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> View <RARE_TOKEN> = adapter . <RARE_TOKEN> ( i , null , this ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( 0 , <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 0 , <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> += ( count - 1 ) * <RARE_TOKEN> ( ) + <RARE_TOKEN> . <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . <RARE_TOKEN> ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> import com . facebook . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> + 1 ; </a> 0
<a> private <RARE_TOKEN> [ ] <RARE_TOKEN> = new <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> = false ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Session . StatusCallback callback = new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> <RARE_TOKEN> ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( this , callback ) ; </a> 0
<a> <RARE_TOKEN> . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> [ i ] ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> <RARE_TOKEN> . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> <RARE_TOKEN> . onSaveInstanceState ( outState ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && session . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> [ <RARE_TOKEN> ] . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( <RARE_TOKEN> . size ( ) == 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . add ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> manager = <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = manager . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> manager . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( state . equals ( SessionState . <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> } else if ( state . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> if ( i == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . show ( <RARE_TOKEN> [ i ] ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> [ i ] ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . <RARE_TOKEN> ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . app . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . net . <RARE_TOKEN> ; </a> 0
<a> import android . os . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . * ; </a> 0
<a> import com . facebook . widget . ProfilePictureView ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String TAG = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final List < String > <RARE_TOKEN> = Arrays . asList ( <RARE_TOKEN> ) ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private List < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 0
<a> private ProfilePictureView <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Session . StatusCallback callback = new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final Session session , final SessionState state , final Exception exception ) { </a> 0
<a> <RARE_TOKEN> ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( getActivity ( ) , callback ) ; </a> 0
<a> <RARE_TOKEN> . onCreate ( savedInstanceState ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , ViewGroup container , Bundle savedInstanceState ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> , container , savedInstanceState ) ; </a> 0
<a> View view = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , container , false ) ; </a> 0
<a> <RARE_TOKEN> = ( ProfilePictureView ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> init ( savedInstanceState ) ; </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> if ( requestCode == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } else if ( resultCode == Activity . <RARE_TOKEN> && requestCode >= 0 && requestCode < <RARE_TOKEN> . size ( ) ) { </a> 0
<a> <RARE_TOKEN> . get ( requestCode ) . onActivityResult ( data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle bundle ) { </a> 0
<a> super . onSaveInstanceState ( bundle ) ; </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . onSaveInstanceState ( bundle ) ; </a> 0
<a> } </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . onSaveInstanceState ( bundle ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( final Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( session != null && session . isOpened ( ) ) { </a> 0
<a> if ( state . equals ( SessionState . <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( session ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( final Session session ) { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( session , new Request . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( GraphUser user , Response response ) { </a> 0
<a> if ( session == Session . getActiveSession ( ) ) { </a> 0
<a> if ( user != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( user . getId ( ) ) ; </a> 0
<a> <RARE_TOKEN> . setText ( user . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( response . getError ( ) != null ) { </a> 0
<a> <RARE_TOKEN> ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> request . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void init ( Bundle savedInstanceState ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> ( 0 ) ) ; </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> ( 1 ) ) ; </a> 0
<a> <RARE_TOKEN> . add ( new <RARE_TOKEN> ( 2 ) ) ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( savedInstanceState ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = savedInstanceState . <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( getActivity ( ) , R . id . <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && session . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> ( session ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session == null || ! session . isOpened ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> List < String > permissions = session . getPermissions ( ) ; </a> 0
<a> if ( ! permissions . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> ( session ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . show ( getActivity ( ) , "" , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . <RARE_TOKEN> ) , true ) ; </a> 0
<a> <RARE_TOKEN> < Void , Void , Response > task = new <RARE_TOKEN> < Void , Void , Response > ( ) { </a> 0
<a> @ Override </a> 0
<a> protected Response <RARE_TOKEN> ( Void ... <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Request request = new Request ( Session . getActiveSession ( ) , </a> 0
<a> <RARE_TOKEN> , null , HttpMethod . POST ) ; </a> 0
<a> request . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return request . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( Response response ) { </a> 0
<a> <RARE_TOKEN> ( response ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> task . execute ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Session session ) { </a> 0
<a> if ( session != null ) { </a> 0
<a> Session . <RARE_TOKEN> <RARE_TOKEN> = new Session . <RARE_TOKEN> ( this , <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> session . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Response response ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . dismiss ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> if ( getActivity ( ) == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = response . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . getId ( ) != null ) { </a> 0
<a> String <RARE_TOKEN> = String . format ( getString ( R . string . <RARE_TOKEN> ) , <RARE_TOKEN> . getId ( ) ) ; </a> 0
<a> new <RARE_TOKEN> . Builder ( getActivity ( ) ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , null ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . show ( ) ; </a> 0
<a> init ( null ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( FacebookRequestError error ) { </a> 0
<a> DialogInterface . OnClickListener listener = null ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> if ( error == null ) { </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> switch ( error . <RARE_TOKEN> ( ) ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> String <RARE_TOKEN> = ( error . <RARE_TOKEN> ( ) ) ? "" : </a> 0
<a> getString ( error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> listener = new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface <RARE_TOKEN> , int i ) { </a> 0
<a> Intent intent = new Intent ( Intent . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( intent ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> listener = new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface <RARE_TOKEN> , int i ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && ! session . <RARE_TOKEN> ( ) ) { </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> listener = new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface <RARE_TOKEN> , int i ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> ( Session . getActiveSession ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> default : </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> , error . <RARE_TOKEN> ( ) ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> new <RARE_TOKEN> . Builder ( getActivity ( ) ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> , listener ) </a> 0
<a> . <RARE_TOKEN> ( R . string . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> data , int requestCode ) { </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . <RARE_TOKEN> ( data ) ; </a> 0
<a> intent . <RARE_TOKEN> ( getActivity ( ) , <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> public String <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String url ) ; </a> 0
<a> public String getId ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( String id ) ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private interface <RARE_TOKEN> extends GraphObject { </a> 0
<a> String getId ( ) ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final String [ ] <RARE_TOKEN> ; </a> 0
<a> private final String [ ] <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> = null ; </a> 0
<a> private String <RARE_TOKEN> = null ; </a> 0
<a> public <RARE_TOKEN> ( int requestCode ) { </a> 0
<a> super ( getActivity ( ) . getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . <RARE_TOKEN> ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . <RARE_TOKEN> ) , </a> 0
<a> requestCode ) ; </a> 0
<a> <RARE_TOKEN> = getActivity ( ) . getResources ( ) . <RARE_TOKEN> ( R . array . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = getActivity ( ) . getResources ( ) . <RARE_TOKEN> ( R . array . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected View . OnClickListener <RARE_TOKEN> ( ) { </a> 0
<a> return new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> action ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = action . cast ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = GraphObject . Factory . create ( <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle bundle ) { </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> != null ) { </a> 0
<a> bundle . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> bundle . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( Bundle <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = getActivity ( ) . getResources ( ) . getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . Builder builder = new <RARE_TOKEN> . Builder ( getActivity ( ) ) ; </a> 0
<a> builder . <RARE_TOKEN> ( <RARE_TOKEN> ) . </a> 0
<a> <RARE_TOKEN> ( true ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface <RARE_TOKEN> , int i ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ i ] ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ i ] ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> builder . show ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( getActivity ( ) . getResources ( ) . getString ( R . string . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private List < GraphUser > <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( int requestCode ) { </a> 0
<a> super ( getActivity ( ) . getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . <RARE_TOKEN> ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . <RARE_TOKEN> ) , </a> 0
<a> requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected View . OnClickListener <RARE_TOKEN> ( ) { </a> 0
<a> return new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( Intent data ) { </a> 0
<a> <RARE_TOKEN> = ( ( <RARE_TOKEN> ) getActivity ( ) . <RARE_TOKEN> ( ) ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> action ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> action . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle bundle ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> bundle . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( Bundle <RARE_TOKEN> ) { </a> 0
<a> byte [ ] bytes = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( bytes != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( bytes ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> String text = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( <RARE_TOKEN> . size ( ) == 1 ) { </a> 0
<a> text = String . format ( getResources ( ) . getString ( R . string . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> . get ( 0 ) . getName ( ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . size ( ) == 2 ) { </a> 0
<a> text = String . format ( getResources ( ) . getString ( R . string . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> . get ( 0 ) . getName ( ) , <RARE_TOKEN> . get ( 1 ) . getName ( ) ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . size ( ) > 2 ) { </a> 0
<a> text = String . format ( getResources ( ) . getString ( R . string . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> . get ( 0 ) . getName ( ) , ( <RARE_TOKEN> . size ( ) - 1 ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( text == null ) { </a> 0
<a> text = getResources ( ) . getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( text ) ; </a> 0
<a> } </a> 0
<a> private byte [ ] <RARE_TOKEN> ( List < GraphUser > <RARE_TOKEN> ) { </a> 0
<a> List < String > <RARE_TOKEN> = new ArrayList < String > ( <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> for ( GraphUser user : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . add ( user . <RARE_TOKEN> ( ) . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> Log . e ( TAG , <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> private List < GraphUser > <RARE_TOKEN> ( byte [ ] bytes ) { </a> 0
<a> try { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> List < String > <RARE_TOKEN> = </a> 0
<a> ( List < String > ) ( new <RARE_TOKEN> ( new <RARE_TOKEN> ( bytes ) ) ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> List < GraphUser > <RARE_TOKEN> = new ArrayList < GraphUser > ( <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> for ( String user : <RARE_TOKEN> ) { </a> 0
<a> GraphUser <RARE_TOKEN> = GraphObject . Factory </a> 0
<a> . create ( new JSONObject ( user ) , GraphUser . class ) ; </a> 0
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> Log . e ( TAG , <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> Log . e ( TAG , <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> Log . e ( TAG , <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private GraphPlace <RARE_TOKEN> = null ; </a> 0
<a> public <RARE_TOKEN> ( int requestCode ) { </a> 0
<a> super ( getActivity ( ) . getResources ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . <RARE_TOKEN> ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . <RARE_TOKEN> ) , </a> 0
<a> requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected View . OnClickListener <RARE_TOKEN> ( ) { </a> 0
<a> return new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( Intent data ) { </a> 0
<a> <RARE_TOKEN> = ( ( <RARE_TOKEN> ) getActivity ( ) . <RARE_TOKEN> ( ) ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> action ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> action . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle bundle ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> bundle . putString ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( Bundle <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = GraphObject . Factory </a> 0
<a> . create ( new JSONObject ( <RARE_TOKEN> ) , GraphPlace . class ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return true ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> Log . e ( TAG , <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> String text = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> text = <RARE_TOKEN> . getName ( ) ; </a> 0
<a> } </a> 0
<a> if ( text == null ) { </a> 0
<a> text = getResources ( ) . getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( text ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> private List < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Context context , int <RARE_TOKEN> , List < <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> super ( context , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . size ( ) ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . get ( i ) . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( int position , View <RARE_TOKEN> , ViewGroup parent ) { </a> 0
<a> View view = <RARE_TOKEN> ; </a> 0
<a> if ( view == null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> ( <RARE_TOKEN> ) getActivity ( ) . <RARE_TOKEN> ( Context . <RARE_TOKEN> ) ; </a> 0
<a> view = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( position ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> view . setOnClickListener ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> TextView <RARE_TOKEN> = ( TextView ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> TextView <RARE_TOKEN> = ( TextView ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , ViewGroup container , Bundle savedInstanceState ) { </a> 0
<a> View view = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , container , false ) ; </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . View . OnClickListener ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . LoggingBehavior ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> import com . facebook . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends Activity { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Session . StatusCallback <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . activity ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( LoggingBehavior . <RARE_TOKEN> ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session == null ) { </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> session = Session . <RARE_TOKEN> ( this , null , <RARE_TOKEN> , savedInstanceState ) ; </a> 0
<a> } </a> 0
<a> if ( session == null ) { </a> 0
<a> session = new Session ( this ) ; </a> 0
<a> } </a> 0
<a> Session . <RARE_TOKEN> ( session ) ; </a> 0
<a> if ( session . <RARE_TOKEN> ( ) . equals ( SessionState . <RARE_TOKEN> ) ) { </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( this ) . setCallback ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . getActiveSession ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . getActiveSession ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> Session . getActiveSession ( ) . onActivityResult ( this , requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( session , outState ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> + session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { <RARE_TOKEN> ( ) ; } </a> 0
<a> } ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { <RARE_TOKEN> ( ) ; } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ! session . isOpened ( ) && ! session . <RARE_TOKEN> ( ) ) { </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( this ) . setCallback ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else { </a> 0
<a> Session . <RARE_TOKEN> ( this , true , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ! session . <RARE_TOKEN> ( ) ) { </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements Session . StatusCallback { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> import com . facebook . widget . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> Log . d ( <RARE_TOKEN> , String . format ( <RARE_TOKEN> session <RARE_TOKEN> <RARE_TOKEN> , state . toString ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> <RARE_TOKEN> . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . LoggingBehavior ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> import com . facebook . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Session . StatusCallback <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , ViewGroup container , Bundle savedInstanceState ) { </a> 0
<a> View view = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . fragment , container , false ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) view . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( LoggingBehavior . <RARE_TOKEN> ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session == null ) { </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> session = Session . <RARE_TOKEN> ( getActivity ( ) , null , <RARE_TOKEN> , savedInstanceState ) ; </a> 0
<a> } </a> 0
<a> if ( session == null ) { </a> 0
<a> session = new Session ( getActivity ( ) ) ; </a> 0
<a> } </a> 0
<a> Session . <RARE_TOKEN> ( session ) ; </a> 0
<a> if ( session . <RARE_TOKEN> ( ) . equals ( SessionState . <RARE_TOKEN> ) ) { </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( this ) . setCallback ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . getActiveSession ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> Session . getActiveSession ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> Session . getActiveSession ( ) . onActivityResult ( getActivity ( ) , requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> Session . <RARE_TOKEN> ( session , outState ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> + session . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { <RARE_TOKEN> ( ) ; } </a> 0
<a> } ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { <RARE_TOKEN> ( ) ; } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ! session . isOpened ( ) && ! session . <RARE_TOKEN> ( ) ) { </a> 0
<a> session . <RARE_TOKEN> ( new Session . OpenRequest ( this ) . setCallback ( <RARE_TOKEN> ) ) ; </a> 0
<a> } else { </a> 0
<a> Session . <RARE_TOKEN> ( getActivity ( ) , this , true , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ! session . <RARE_TOKEN> ( ) ) { </a> 0
<a> session . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements Session . StatusCallback { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> public class <RARE_TOKEN> extends Activity { </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> private Button <RARE_TOKEN> ; </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Intent intent = new Intent ( <RARE_TOKEN> . this , <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> ( intent ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Intent intent = new Intent ( <RARE_TOKEN> . this , <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> ( intent ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Intent intent = new Intent ( <RARE_TOKEN> . this , <RARE_TOKEN> . class ) ; </a> 0
<a> <RARE_TOKEN> ( intent ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . view . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private Session currentSession ; </a> 0
<a> private Session . StatusCallback <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> <RARE_TOKEN> ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> if ( savedInstanceState . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( </a> 0
<a> this , </a> 0
<a> savedInstanceState . getString ( <RARE_TOKEN> ) ) ; </a> 0
<a> currentSession = Session . <RARE_TOKEN> ( </a> 0
<a> this , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> savedInstanceState ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> outState . putString ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> manager = <RARE_TOKEN> ( ) ; </a> 0
<a> manager . <RARE_TOKEN> ( outState , <RARE_TOKEN> . TAG , <RARE_TOKEN> ) ; </a> 0
<a> manager . <RARE_TOKEN> ( outState , <RARE_TOKEN> . TAG , <RARE_TOKEN> ) ; </a> 0
<a> Session . <RARE_TOKEN> ( currentSession , outState ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> super . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . onActivityResult ( this , requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( session != currentSession ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( state . isOpened ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( state . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Bundle savedInstanceState ) { </a> 0
<a> <RARE_TOKEN> manager = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = manager . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) manager . <RARE_TOKEN> ( savedInstanceState , <RARE_TOKEN> . TAG ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) manager . <RARE_TOKEN> ( savedInstanceState , <RARE_TOKEN> . TAG ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . add ( R . id . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . TAG ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . add ( R . id . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> . TAG ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . show ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) </a> 0
<a> . show ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( currentSession != null && currentSession . isOpened ( ) ) { </a> 0
<a> Request request = Request . <RARE_TOKEN> ( currentSession , new Request . <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( GraphUser <RARE_TOKEN> , Response response ) { </a> 0
<a> if ( response . getRequest ( ) . getSession ( ) == currentSession ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> request . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . close ( ) ; </a> 0
<a> currentSession = null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> currentSession = new Session . Builder ( this ) </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) </a> 0
<a> . build ( ) ; </a> 0
<a> currentSession . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Session . OpenRequest openRequest = new Session . OpenRequest ( this ) ; </a> 0
<a> openRequest . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> openRequest . <RARE_TOKEN> ( Session . <RARE_TOKEN> ) ; </a> 0
<a> currentSession . <RARE_TOKEN> ( openRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> switch ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> case R . id . <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return true ; </a> 0
<a> default : </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( GraphUser user ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( user ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( user ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . view . * ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . widget . ProfilePictureView ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public static final String TAG = <RARE_TOKEN> ; </a> 0
<a> private TextView <RARE_TOKEN> ; </a> 0
<a> private ProfilePictureView <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private GraphUser <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> listener = <RARE_TOKEN> ; </a> 0
<a> if ( listener != null ) { </a> 0
<a> <RARE_TOKEN> = listener . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = super . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , ViewGroup parent , Bundle savedInstanceState ) { </a> 0
<a> View v = <RARE_TOKEN> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , parent , false ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) v . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( ProfilePictureView ) v . findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> return v ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> this . <RARE_TOKEN> = listener ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( GraphUser user ) { </a> 0
<a> if ( <RARE_TOKEN> == null || <RARE_TOKEN> == null || ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = user ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( user == null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( null ) ; </a> 0
<a> <RARE_TOKEN> . setText ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( user . getId ( ) ) ; </a> 0
<a> <RARE_TOKEN> . setText ( </a> 0
<a> String . format ( getString ( R . string . <RARE_TOKEN> ) , user . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . <RARE_TOKEN> ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . <RARE_TOKEN> ; </a> 0
<a> import android . view . * ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . widget . ProfilePictureView ; </a> 0
<a> import com . facebook . SessionLoginBehavior ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public static final String TAG = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> getActivity ( ) , </a> 0
<a> savedInstanceState != null ? </a> 0
<a> savedInstanceState . getInt ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) : </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> ArrayList < <RARE_TOKEN> > <RARE_TOKEN> = new ArrayList < <RARE_TOKEN> > ( </a> 0
<a> Arrays . asList ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , ViewGroup parent , Bundle savedInstanceState ) { </a> 0
<a> View view = super . <RARE_TOKEN> ( <RARE_TOKEN> , parent , savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( view . findViewById ( android . R . id . list ) ) ; </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , View view , <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> , view , <RARE_TOKEN> ) ; </a> 0
<a> getActivity ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( R . <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> l , View view , int position , long id ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( position ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> info = ( <RARE_TOKEN> . <RARE_TOKEN> ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> adapter = ( <RARE_TOKEN> ) <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = adapter . <RARE_TOKEN> ( info . position ) ; </a> 0
<a> switch ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> case R . id . <RARE_TOKEN> : </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( info . position ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> return super . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> <RARE_TOKEN> = listener ; </a> 0
<a> if ( listener != null && <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( GraphUser user ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( user != null ) { </a> 0
<a> <RARE_TOKEN> s = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> s . <RARE_TOKEN> ( user ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> listener = <RARE_TOKEN> ; </a> 0
<a> if ( listener != null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> listener . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> adapter = ( <RARE_TOKEN> ) <RARE_TOKEN> ( ) ; </a> 0
<a> adapter . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> public <RARE_TOKEN> ( ArrayList < <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> super ( getActivity ( ) , android . R . layout . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View <RARE_TOKEN> ( int position , View <RARE_TOKEN> , ViewGroup parent ) { </a> 0
<a> if ( null == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = getActivity ( ) . <RARE_TOKEN> ( ) </a> 0
<a> . <RARE_TOKEN> ( R . layout . <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( position ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = getString ( R . string . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> ProfilePictureView <RARE_TOKEN> = ( ProfilePictureView ) <RARE_TOKEN> . findViewById ( </a> 0
<a> R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> TextView <RARE_TOKEN> = ( TextView ) <RARE_TOKEN> . findViewById ( </a> 0
<a> R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . findViewById ( </a> 0
<a> R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> { </a> 0
<a> static final int <RARE_TOKEN> = - 1 ; </a> 0
<a> private final static int <RARE_TOKEN> = 4 ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> [ ] <RARE_TOKEN> ; </a> 0
<a> void <RARE_TOKEN> ( Context context , int <RARE_TOKEN> ) { </a> 0
<a> if ( context == null ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Context <RARE_TOKEN> = context . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> == null ) ? context : <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> SessionLoginBehavior loginBehavior = ( i == 0 ) ? </a> 0
<a> SessionLoginBehavior . <RARE_TOKEN> : </a> 0
<a> SessionLoginBehavior . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ i ] = new <RARE_TOKEN> ( <RARE_TOKEN> , i , loginBehavior ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , Context . <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . getInt ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> && <RARE_TOKEN> != <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> <= <RARE_TOKEN> || <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> String . format ( <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> 0 <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> - 1 ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . android . FacebookError ; </a> 0
<a> import com . facebook . android . Util ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import com . facebook . android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . View . OnClickListener ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> public class <RARE_TOKEN> extends Activity { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final String [ ] <RARE_TOKEN> = </a> 0
<a> new String [ ] { <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> } ; </a> 0
<a> TextView <RARE_TOKEN> ; </a> 0
<a> TextView <RARE_TOKEN> ; </a> 0
<a> Button <RARE_TOKEN> ; </a> 0
<a> TextView <RARE_TOKEN> ; </a> 0
<a> TextView <RARE_TOKEN> ; </a> 0
<a> Button <RARE_TOKEN> ; </a> 0
<a> TextView <RARE_TOKEN> ; </a> 0
<a> TextView <RARE_TOKEN> ; </a> 0
<a> Button <RARE_TOKEN> ; </a> 0
<a> TextView <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> <RARE_TOKEN> ( R . layout . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( </a> 0
<a> R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( </a> 0
<a> R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . post ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( Button ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( TextView ) findViewById ( R . id . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . this , <RARE_TOKEN> , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> <RARE_TOKEN> . dialog ( <RARE_TOKEN> . this , <RARE_TOKEN> , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> failed" ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> failed" ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> JSONObject response = Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( <RARE_TOKEN> ) ) ; </a> 0
<a> if ( ! response . getString ( "name" ) . equals ( <RARE_TOKEN> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> response = Util . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> . request ( <RARE_TOKEN> , new Bundle ( ) , <RARE_TOKEN> ) ) ; </a> 0
<a> if ( ! response . getString ( "name" ) . equals ( <RARE_TOKEN> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> a public <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> response = Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( <RARE_TOKEN> , params ) ) ; </a> 0
<a> if ( response . <RARE_TOKEN> ( <RARE_TOKEN> ) . length ( ) == 0 ) return false ; </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return true ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> params . putString ( "message" , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( <RARE_TOKEN> , params , <RARE_TOKEN> ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( <RARE_TOKEN> post <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( <RARE_TOKEN> , new Bundle ( ) , <RARE_TOKEN> ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> token is <RARE_TOKEN> to request this " + </a> 0
<a> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> post to <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( <RARE_TOKEN> , new Bundle ( ) , <RARE_TOKEN> ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( <RARE_TOKEN> <RARE_TOKEN> user <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> the <RARE_TOKEN> to <RARE_TOKEN> this <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( <RARE_TOKEN> ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . startsWith ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> request for <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( <RARE_TOKEN> ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> token must be <RARE_TOKEN> to " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the current <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( "" ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( <RARE_TOKEN> get <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( <RARE_TOKEN> ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> of the <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> not " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( <RARE_TOKEN> , new Bundle ( ) , <RARE_TOKEN> ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> that <RARE_TOKEN> method is <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . request ( new Bundle ( ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( IllegalArgumentException e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( </a> 0
<a> <RARE_TOKEN> method must be <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> must <RARE_TOKEN> key <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> that <RARE_TOKEN> <RARE_TOKEN> request <RARE_TOKEN> be <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( params ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( e . <RARE_TOKEN> ( ) != <RARE_TOKEN> || </a> 0
<a> ! e . getMessage ( ) . equals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( <RARE_TOKEN> , new Bundle ( ) , <RARE_TOKEN> ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> Error <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return true ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( Bundle values ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . setText ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . setText ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> failed" ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . setText ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . setText ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> failed" ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public void onError ( <RARE_TOKEN> e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) return false ; </a> 0
<a> try { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> request for <RARE_TOKEN> ) ; </a> 0
<a> String response = <RARE_TOKEN> . request ( <RARE_TOKEN> ) ; </a> 0
<a> JSONObject obj = Util . <RARE_TOKEN> ( response ) ; </a> 0
<a> if ( obj . getString ( "name" ) == null || </a> 0
<a> obj . getString ( "name" ) . equals ( "" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "message" , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> test <RARE_TOKEN> ) ; </a> 0
<a> response = <RARE_TOKEN> . request ( <RARE_TOKEN> , parameters , </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> response: " + response ) ; </a> 0
<a> if ( response == null || response . equals ( "" ) || </a> 0
<a> response . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> response = response . <RARE_TOKEN> ( <RARE_TOKEN> , "" ) ; </a> 0
<a> response = response . <RARE_TOKEN> ( <RARE_TOKEN> , "" ) ; </a> 0
<a> response = <RARE_TOKEN> . request ( response , new Bundle ( ) , </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> if ( ! response . equals ( <RARE_TOKEN> ) ) return false ; </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> parameters . putString ( <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ) ; ; </a> 0
<a> response = <RARE_TOKEN> . request ( parameters ) ; </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> response: " + response ) ; </a> 0
<a> if ( response == null || response . equals ( "" ) || </a> 0
<a> response . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> post <RARE_TOKEN> ) ; </a> 0
<a> response = response . <RARE_TOKEN> ( <RARE_TOKEN> , "" ) ; </a> 0
<a> response = <RARE_TOKEN> . request ( </a> 0
<a> response , new Bundle ( ) , <RARE_TOKEN> ) ; </a> 0
<a> if ( ! response . equals ( <RARE_TOKEN> ) ) return false ; </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return true ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) return false ; </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> that request for <RARE_TOKEN> is <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( <RARE_TOKEN> ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( <RARE_TOKEN> path <RARE_TOKEN> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> that <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> method <RARE_TOKEN> ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . request ( params ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> + e . getMessage ( ) + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( <RARE_TOKEN> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> Error <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( Bundle values ) { </a> 0
<a> final String <RARE_TOKEN> = values . getString ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> Log . d ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ) . request ( <RARE_TOKEN> , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { } </a> 0
<a> public void onError ( <RARE_TOKEN> e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> public void <RARE_TOKEN> ( final String response , final Object state ) { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> response: " + response ) ; </a> 0
<a> try { </a> 0
<a> JSONObject json = Util . <RARE_TOKEN> ( response ) ; </a> 0
<a> String <RARE_TOKEN> = json . getString ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> post <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( FacebookError e , final Object state ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> e , </a> 0
<a> final Object state ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( IOException e , final Object state ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> e , </a> 0
<a> final Object state ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> String <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . request ( <RARE_TOKEN> , new Bundle ( ) , <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . setText ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> String response = <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> response: <RARE_TOKEN> + response + <RARE_TOKEN> ) ; </a> 0
<a> if ( ! response . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> out facebook <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( this ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> if ( e . <RARE_TOKEN> ( ) != <RARE_TOKEN> || </a> 0
<a> ! e . getMessage ( ) . equals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> Util . <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> ) . <RARE_TOKEN> ( this ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> if ( e . <RARE_TOKEN> ( ) != <RARE_TOKEN> || </a> 0
<a> ! e . getMessage ( ) . equals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return true ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . ByteOrder ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . Charset ; </a> 0
<a> public abstract class <RARE_TOKEN> implements ByteBuf { </a> 1
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> private final ByteOrder order ; </a> 1
<a> private final int maxCapacity ; </a> 1
<a> private int readerIndex ; </a> 1
<a> private int writerIndex ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = 1 ; </a> 1
<a> protected <RARE_TOKEN> ( ByteOrder <RARE_TOKEN> , int maxCapacity ) { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( maxCapacity < 0 ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + maxCapacity + " (expected: >= <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> order = <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( this ) ; </a> 1
<a> this . maxCapacity = maxCapacity ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelBufType type ( ) { </a> 1
<a> return ChannelBufType . <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int maxCapacity ( ) { </a> 0
<a> return maxCapacity ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int readerIndex ( ) { </a> 0
<a> return readerIndex ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readerIndex ( int readerIndex ) { </a> 0
<a> if ( readerIndex < 0 || readerIndex > writerIndex ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> " </a> 0
<a> + readerIndex + " - <RARE_TOKEN> is " + writerIndex ) ; </a> 0
<a> } </a> 0
<a> this . readerIndex = readerIndex ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int writerIndex ( ) { </a> 0
<a> return writerIndex ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writerIndex ( int writerIndex ) { </a> 0
<a> if ( writerIndex < readerIndex || writerIndex > capacity ( ) ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> " </a> 0
<a> + writerIndex + " - <RARE_TOKEN> is " + readerIndex + " or " + capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> this . writerIndex = writerIndex ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int readerIndex , int writerIndex ) { </a> 0
<a> if ( readerIndex < 0 || readerIndex > writerIndex || writerIndex > capacity ( ) ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> readerIndex is " </a> 0
<a> + readerIndex + ", writerIndex is " </a> 0
<a> + writerIndex + ", capacity is " + capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> this . readerIndex = readerIndex ; </a> 0
<a> this . writerIndex = writerIndex ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> readerIndex = writerIndex = 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean readable ( ) { </a> 0
<a> return writerIndex > readerIndex ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) > 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int readableBytes ( ) { </a> 0
<a> return writerIndex - readerIndex ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return capacity ( ) - writerIndex ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = readerIndex ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> readerIndex ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = writerIndex ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> writerIndex = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( readerIndex == 0 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( readerIndex != writerIndex ) { </a> 0
<a> setBytes ( 0 , this , readerIndex , writerIndex - readerIndex ) ; </a> 0
<a> writerIndex -= readerIndex ; </a> 0
<a> <RARE_TOKEN> ( readerIndex ) ; </a> 0
<a> readerIndex = 0 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( readerIndex ) ; </a> 0
<a> writerIndex = readerIndex = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = Math . <RARE_TOKEN> ( <RARE_TOKEN> - <RARE_TOKEN> , 0 ) ; </a> 0
<a> <RARE_TOKEN> = Math . <RARE_TOKEN> ( <RARE_TOKEN> - <RARE_TOKEN> , 0 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( String . format ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> (expected: >= <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= <RARE_TOKEN> ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > maxCapacity - writerIndex ) { </a> 0
<a> throw new IndexOutOfBoundsException ( String . format ( </a> 0
<a> <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> writerIndex , <RARE_TOKEN> , maxCapacity ) ) ; </a> 0
<a> } </a> 0
<a> int newCapacity = <RARE_TOKEN> ( writerIndex + <RARE_TOKEN> ) ; </a> 0
<a> capacity ( newCapacity ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( String . format ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> (expected: >= <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= <RARE_TOKEN> ( ) ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > maxCapacity - writerIndex ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> if ( capacity ( ) == maxCapacity ( ) ) { </a> 0
<a> return 1 ; </a> 0
<a> } </a> 0
<a> capacity ( maxCapacity ( ) ) ; </a> 0
<a> return 3 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int newCapacity = <RARE_TOKEN> ( writerIndex + <RARE_TOKEN> ) ; </a> 0
<a> capacity ( newCapacity ) ; </a> 0
<a> return 2 ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> final int maxCapacity = this . maxCapacity ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> * 4 ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> int newCapacity = <RARE_TOKEN> / <RARE_TOKEN> * <RARE_TOKEN> ; </a> 0
<a> if ( newCapacity > maxCapacity - <RARE_TOKEN> ) { </a> 0
<a> newCapacity = maxCapacity ; </a> 0
<a> } else { </a> 0
<a> newCapacity += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return newCapacity ; </a> 0
<a> } </a> 0
<a> int newCapacity = <RARE_TOKEN> ; </a> 0
<a> while ( newCapacity < <RARE_TOKEN> ) { </a> 0
<a> newCapacity <RARE_TOKEN> 1 ; </a> 0
<a> } </a> 0
<a> return Math . min ( newCapacity , maxCapacity ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final ByteOrder order ( ) { </a> 1
<a> return order ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuf order ( ByteOrder <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == order ( ) ) { </a> 1
<a> return this ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( int index ) { </a> 0
<a> return getByte ( index ) != 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( int index ) { </a> 0
<a> return ( short ) ( getByte ( index ) & 0xFF ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> return <RARE_TOKEN> ( index ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> int value = <RARE_TOKEN> ( index ) ; </a> 0
<a> if ( ( value & <RARE_TOKEN> ) != 0 ) { </a> 0
<a> value |= <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return value ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( int index ) { </a> 0
<a> return getInt ( index ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public char <RARE_TOKEN> ( int index ) { </a> 0
<a> return ( char ) <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public float <RARE_TOKEN> ( int index ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( getInt ( index ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public double <RARE_TOKEN> ( int index ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( getLong ( index ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , byte [ ] dst ) { </a> 0
<a> getBytes ( index , dst , 0 , dst . length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuf dst ) { </a> 0
<a> getBytes ( index , dst , dst . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuf dst , int length ) { </a> 0
<a> if ( length > dst . <RARE_TOKEN> ( ) ) { </a> 1
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to be <RARE_TOKEN> <RARE_TOKEN> " </a> 0
<a> + length + ", <RARE_TOKEN> is " + dst . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 1
<a> getBytes ( index , dst , dst . writerIndex ( ) , length ) ; </a> 0
<a> dst . writerIndex ( dst . writerIndex ( ) + length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , boolean value ) { </a> 0
<a> setByte ( index , value ? 1 : 0 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> <RARE_TOKEN> ( index , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , float value ) { </a> 0
<a> <RARE_TOKEN> ( index , <RARE_TOKEN> . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , double value ) { </a> 0
<a> <RARE_TOKEN> ( index , <RARE_TOKEN> . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , byte [ ] src ) { </a> 0
<a> setBytes ( index , src , 0 , src . length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuf src ) { </a> 0
<a> setBytes ( index , src , src . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuf src , int length ) { </a> 0
<a> if ( length > src . readableBytes ( ) ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to <RARE_TOKEN> <RARE_TOKEN> " </a> 0
<a> + length + ", <RARE_TOKEN> is " + src . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> setBytes ( index , src , src . readerIndex ( ) , length ) ; </a> 0
<a> src . readerIndex ( src . readerIndex ( ) + length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int length ) { </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( length < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be 0 or <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = length > > > 3 ; </a> 0
<a> int <RARE_TOKEN> = length & 7 ; </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> <RARE_TOKEN> ( index , 0 ) ; </a> 0
<a> index += 8 ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 4 ) { </a> 0
<a> <RARE_TOKEN> ( index , 0 ) ; </a> 0
<a> } else if ( <RARE_TOKEN> < 4 ) { </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> setByte ( index , ( byte ) 0 ) ; </a> 0
<a> index ++ ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( index , 0 ) ; </a> 0
<a> index += 4 ; </a> 0
<a> for ( int i = <RARE_TOKEN> - 4 ; i > 0 ; i -- ) { </a> 0
<a> setByte ( index , ( byte ) 0 ) ; </a> 0
<a> index ++ ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte <RARE_TOKEN> ( ) { </a> 0
<a> if ( readerIndex == writerIndex ) { </a> 1
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> byte limit <RARE_TOKEN> " </a> 0
<a> + readerIndex ) ; </a> 0
<a> } </a> 1
<a> return getByte ( readerIndex ++ ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) != 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( ) { </a> 0
<a> return ( short ) ( <RARE_TOKEN> ( ) & 0xFF ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> short v = <RARE_TOKEN> ( readerIndex ) ; </a> 0
<a> readerIndex += 2 ; </a> 0
<a> return v ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> int value = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ( value & <RARE_TOKEN> ) != 0 ) { </a> 0
<a> value |= <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return value ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 3 ) ; </a> 0
<a> int v = <RARE_TOKEN> ( readerIndex ) ; </a> 0
<a> readerIndex += 3 ; </a> 0
<a> return v ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 4 ) ; </a> 0
<a> int v = getInt ( readerIndex ) ; </a> 0
<a> readerIndex += 4 ; </a> 0
<a> return v ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 8 ) ; </a> 0
<a> long v = getLong ( readerIndex ) ; </a> 0
<a> readerIndex += 8 ; </a> 0
<a> return v ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public char <RARE_TOKEN> ( ) { </a> 0
<a> return ( char ) <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public float <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public double <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf readBytes ( int length ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return Unpooled . EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> ByteBuf buf = unsafe ( ) . <RARE_TOKEN> ( length ) ; </a> 1
<a> buf . writeBytes ( this , readerIndex , length ) ; </a> 0
<a> readerIndex += length ; </a> 0
<a> return buf ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( int length ) { </a> 0
<a> ByteBuf slice = slice ( readerIndex , length ) ; </a> 0
<a> readerIndex += length ; </a> 0
<a> return slice ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( byte [ ] dst , int dstIndex , int length ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> getBytes ( readerIndex , dst , dstIndex , length ) ; </a> 0
<a> readerIndex += length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( byte [ ] dst ) { </a> 0
<a> readBytes ( dst , 0 , dst . length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuf dst ) { </a> 0
<a> readBytes ( dst , dst . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuf dst , int length ) { </a> 0
<a> if ( length > dst . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to be <RARE_TOKEN> <RARE_TOKEN> " </a> 0
<a> + length + ", <RARE_TOKEN> is " + dst . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> readBytes ( dst , dst . writerIndex ( ) , length ) ; </a> 0
<a> dst . writerIndex ( dst . writerIndex ( ) + length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuf dst , int dstIndex , int length ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> getBytes ( readerIndex , dst , dstIndex , length ) ; </a> 0
<a> readerIndex += length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuffer dst ) { </a> 0
<a> int length = dst . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> getBytes ( readerIndex , dst ) ; </a> 0
<a> readerIndex += length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int readBytes ( <RARE_TOKEN> out , int length ) </a> 0
<a> throws IOException { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> int readBytes = getBytes ( readerIndex , out , length ) ; </a> 0
<a> readerIndex += readBytes ; </a> 0
<a> return readBytes ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( OutputStream out , int length ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> getBytes ( readerIndex , out , length ) ; </a> 0
<a> readerIndex += length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void skipBytes ( int length ) { </a> 0
<a> int <RARE_TOKEN> = readerIndex + length ; </a> 0
<a> if ( <RARE_TOKEN> > writerIndex ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> bytes <RARE_TOKEN> - <RARE_TOKEN> " </a> 0
<a> + <RARE_TOKEN> + ", <RARE_TOKEN> is " + writerIndex ) ; </a> 0
<a> } </a> 0
<a> readerIndex = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean value ) { </a> 0
<a> writeByte ( value ? 1 : 0 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeByte ( int value ) { </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> setByte ( writerIndex ++ , value ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int value ) { </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> <RARE_TOKEN> ( writerIndex , value ) ; </a> 0
<a> writerIndex += 2 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int value ) { </a> 0
<a> <RARE_TOKEN> ( 3 ) ; </a> 0
<a> <RARE_TOKEN> ( writerIndex , value ) ; </a> 0
<a> writerIndex += 3 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeInt ( int value ) { </a> 0
<a> <RARE_TOKEN> ( 4 ) ; </a> 0
<a> <RARE_TOKEN> ( writerIndex , value ) ; </a> 0
<a> writerIndex += 4 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( long value ) { </a> 0
<a> <RARE_TOKEN> ( 8 ) ; </a> 0
<a> <RARE_TOKEN> ( writerIndex , value ) ; </a> 0
<a> writerIndex += 8 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int value ) { </a> 0
<a> <RARE_TOKEN> ( value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( float value ) { </a> 0
<a> writeInt ( <RARE_TOKEN> . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( double value ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( byte [ ] src , int srcIndex , int length ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> setBytes ( writerIndex , src , srcIndex , length ) ; </a> 0
<a> writerIndex += length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( byte [ ] src ) { </a> 0
<a> writeBytes ( src , 0 , src . length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuf src ) { </a> 0
<a> writeBytes ( src , src . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuf src , int length ) { </a> 0
<a> if ( length > src . readableBytes ( ) ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to write - <RARE_TOKEN> " </a> 0
<a> + length + ", <RARE_TOKEN> is " + src . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> writeBytes ( src , src . readerIndex ( ) , length ) ; </a> 0
<a> src . readerIndex ( src . readerIndex ( ) + length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuf src , int srcIndex , int length ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> setBytes ( writerIndex , src , srcIndex , length ) ; </a> 0
<a> writerIndex += length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuffer src ) { </a> 0
<a> int length = src . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> setBytes ( writerIndex , src ) ; </a> 0
<a> writerIndex += length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int writeBytes ( InputStream in , int length ) </a> 0
<a> throws IOException { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> int <RARE_TOKEN> = setBytes ( writerIndex , in , length ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> writerIndex += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int writeBytes ( <RARE_TOKEN> in , int length ) </a> 1
<a> throws IOException { </a> 1
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> int <RARE_TOKEN> = setBytes ( writerIndex , in , length ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> writerIndex += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int length ) { </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( length < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be 0 or <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = length > > > 3 ; </a> 0
<a> int <RARE_TOKEN> = length & 7 ; </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> <RARE_TOKEN> ( 0 ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 4 ) { </a> 0
<a> writeInt ( 0 ) ; </a> 0
<a> } else if ( <RARE_TOKEN> < 4 ) { </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> writeByte ( ( byte ) 0 ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> writeInt ( 0 ) ; </a> 0
<a> for ( int i = <RARE_TOKEN> - 4 ; i > 0 ; i -- ) { </a> 0
<a> writeByte ( ( byte ) 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( readerIndex , readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf slice ( ) { </a> 0
<a> return slice ( readerIndex , readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf slice ( int index , int length ) { </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return Unpooled . EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> return new <RARE_TOKEN> ( this , index , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuffer nioBuffer ( ) { </a> 0
<a> return nioBuffer ( readerIndex , readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuffer [ ] nioBuffers ( ) { </a> 0
<a> return nioBuffers ( readerIndex , readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( Charset charset ) { </a> 0
<a> return toString ( readerIndex , readableBytes ( ) , charset ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( int index , int length , Charset charset ) { </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> ByteBuffer nioBuffer ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> nioBuffer = nioBuffer ( index , length ) ; </a> 0
<a> } else { </a> 0
<a> nioBuffer = ByteBuffer . <RARE_TOKEN> ( length ) ; </a> 0
<a> getBytes ( index , nioBuffer ) ; </a> 0
<a> nioBuffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return ByteBufUtil . <RARE_TOKEN> ( nioBuffer , charset ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int indexOf ( int fromIndex , int <RARE_TOKEN> , byte value ) { </a> 0
<a> return ByteBufUtil . indexOf ( this , fromIndex , <RARE_TOKEN> , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int indexOf ( int fromIndex , int <RARE_TOKEN> , ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> return ByteBufUtil . indexOf ( this , fromIndex , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( byte value ) { </a> 0
<a> return bytesBefore ( readerIndex ( ) , readableBytes ( ) , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> return bytesBefore ( readerIndex ( ) , readableBytes ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( int length , byte value ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> return bytesBefore ( readerIndex ( ) , length , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( int length , ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> return bytesBefore ( readerIndex ( ) , length , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( int index , int length , byte value ) { </a> 0
<a> int <RARE_TOKEN> = indexOf ( index , index + length , value ) ; </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> - index ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( int index , int length , </a> 0
<a> ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = indexOf ( index , index + length , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> - index ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return ByteBufUtil . hashCode ( this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object o ) { </a> 0
<a> if ( this == o ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( o instanceof ByteBuf ) { </a> 0
<a> return ByteBufUtil . equals ( this , ( ByteBuf ) o ) ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ByteBuf that ) { </a> 0
<a> return ByteBufUtil . <RARE_TOKEN> ( this , that ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return getClass ( ) . getSimpleName ( ) + <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + readerIndex + ", " + </a> 0
<a> <RARE_TOKEN> + writerIndex + ", " + </a> 0
<a> <RARE_TOKEN> + capacity ( ) + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> if ( readableBytes ( ) < <RARE_TOKEN> ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> readable bytes - <RARE_TOKEN> " </a> 0
<a> + <RARE_TOKEN> + ", <RARE_TOKEN> is " + readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . ByteOrder ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . Charset ; </a> 0
<a> import java . nio . charset . <RARE_TOKEN> ; </a> 0
<a> public interface ByteBuf extends <RARE_TOKEN> , <RARE_TOKEN> < ByteBuf > { </a> 1
<a> int capacity ( ) ; </a> 1
<a> void capacity ( int newCapacity ) ; </a> 0
<a> int maxCapacity ( ) ; </a> 1
<a> ByteOrder order ( ) ; </a> 1
<a> ByteBuf order ( ByteOrder <RARE_TOKEN> ) ; </a> 1
<a> boolean <RARE_TOKEN> ( ) ; </a> 1
<a> int readerIndex ( ) ; </a> 1
<a> void readerIndex ( int readerIndex ) ; </a> 0
<a> int writerIndex ( ) ; </a> 1
<a> void writerIndex ( int writerIndex ) ; </a> 0
<a> void <RARE_TOKEN> ( int readerIndex , int writerIndex ) ; </a> 0
<a> int readableBytes ( ) ; </a> 1
<a> int <RARE_TOKEN> ( ) ; </a> 1
<a> boolean readable ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> void clear ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> ( int <RARE_TOKEN> , boolean <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> ( int index ) ; </a> 1
<a> byte getByte ( int index ) ; </a> 1
<a> short <RARE_TOKEN> ( int index ) ; </a> 1
<a> short <RARE_TOKEN> ( int index ) ; </a> 1
<a> int <RARE_TOKEN> ( int index ) ; </a> 1
<a> int <RARE_TOKEN> ( int index ) ; </a> 1
<a> int <RARE_TOKEN> ( int index ) ; </a> 1
<a> int getInt ( int index ) ; </a> 1
<a> long <RARE_TOKEN> ( int index ) ; </a> 1
<a> long getLong ( int index ) ; </a> 1
<a> char <RARE_TOKEN> ( int index ) ; </a> 1
<a> float <RARE_TOKEN> ( int index ) ; </a> 1
<a> double <RARE_TOKEN> ( int index ) ; </a> 1
<a> void getBytes ( int index , ByteBuf dst ) ; </a> 0
<a> void getBytes ( int index , ByteBuf dst , int length ) ; </a> 0
<a> void getBytes ( int index , ByteBuf dst , int dstIndex , int length ) ; </a> 0
<a> void getBytes ( int index , byte [ ] dst ) ; </a> 0
<a> void getBytes ( int index , byte [ ] dst , int dstIndex , int length ) ; </a> 0
<a> void getBytes ( int index , ByteBuffer dst ) ; </a> 0
<a> void getBytes ( int index , OutputStream out , int length ) throws IOException ; </a> 0
<a> int getBytes ( int index , <RARE_TOKEN> out , int length ) throws IOException ; </a> 1
<a> void <RARE_TOKEN> ( int index , boolean value ) ; </a> 0
<a> void setByte ( int index , int value ) ; </a> 0
<a> void <RARE_TOKEN> ( int index , int value ) ; </a> 0
<a> void <RARE_TOKEN> ( int index , int value ) ; </a> 0
<a> void <RARE_TOKEN> ( int index , int value ) ; </a> 0
<a> void <RARE_TOKEN> ( int index , long value ) ; </a> 0
<a> void <RARE_TOKEN> ( int index , int value ) ; </a> 0
<a> void <RARE_TOKEN> ( int index , float value ) ; </a> 0
<a> void <RARE_TOKEN> ( int index , double value ) ; </a> 0
<a> void setBytes ( int index , ByteBuf src ) ; </a> 0
<a> void setBytes ( int index , ByteBuf src , int length ) ; </a> 0
<a> void setBytes ( int index , ByteBuf src , int srcIndex , int length ) ; </a> 0
<a> void setBytes ( int index , byte [ ] src ) ; </a> 0
<a> void setBytes ( int index , byte [ ] src , int srcIndex , int length ) ; </a> 0
<a> void setBytes ( int index , ByteBuffer src ) ; </a> 0
<a> int setBytes ( int index , InputStream in , int length ) throws IOException ; </a> 1
<a> int setBytes ( int index , <RARE_TOKEN> in , int length ) throws IOException ; </a> 1
<a> void <RARE_TOKEN> ( int index , int length ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 1
<a> byte <RARE_TOKEN> ( ) ; </a> 1
<a> short <RARE_TOKEN> ( ) ; </a> 1
<a> short <RARE_TOKEN> ( ) ; </a> 1
<a> int <RARE_TOKEN> ( ) ; </a> 1
<a> int <RARE_TOKEN> ( ) ; </a> 1
<a> int <RARE_TOKEN> ( ) ; </a> 1
<a> int <RARE_TOKEN> ( ) ; </a> 1
<a> long <RARE_TOKEN> ( ) ; </a> 1
<a> long <RARE_TOKEN> ( ) ; </a> 1
<a> char <RARE_TOKEN> ( ) ; </a> 1
<a> float <RARE_TOKEN> ( ) ; </a> 1
<a> double <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuf readBytes ( int length ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> ( int length ) ; </a> 1
<a> void readBytes ( ByteBuf dst ) ; </a> 0
<a> void readBytes ( ByteBuf dst , int length ) ; </a> 0
<a> void readBytes ( ByteBuf dst , int dstIndex , int length ) ; </a> 0
<a> void readBytes ( byte [ ] dst ) ; </a> 0
<a> void readBytes ( byte [ ] dst , int dstIndex , int length ) ; </a> 0
<a> void readBytes ( ByteBuffer dst ) ; </a> 0
<a> void readBytes ( OutputStream out , int length ) throws IOException ; </a> 0
<a> int readBytes ( <RARE_TOKEN> out , int length ) throws IOException ; </a> 1
<a> void skipBytes ( int length ) ; </a> 0
<a> void <RARE_TOKEN> ( boolean value ) ; </a> 0
<a> void writeByte ( int value ) ; </a> 0
<a> void <RARE_TOKEN> ( int value ) ; </a> 0
<a> void <RARE_TOKEN> ( int value ) ; </a> 0
<a> void writeInt ( int value ) ; </a> 0
<a> void <RARE_TOKEN> ( long value ) ; </a> 0
<a> void <RARE_TOKEN> ( int value ) ; </a> 0
<a> void <RARE_TOKEN> ( float value ) ; </a> 0
<a> void <RARE_TOKEN> ( double value ) ; </a> 0
<a> void writeBytes ( ByteBuf src ) ; </a> 0
<a> void writeBytes ( ByteBuf src , int length ) ; </a> 0
<a> void writeBytes ( ByteBuf src , int srcIndex , int length ) ; </a> 0
<a> void writeBytes ( byte [ ] src ) ; </a> 0
<a> void writeBytes ( byte [ ] src , int srcIndex , int length ) ; </a> 0
<a> void writeBytes ( ByteBuffer src ) ; </a> 0
<a> int writeBytes ( InputStream in , int length ) throws IOException ; </a> 1
<a> int writeBytes ( <RARE_TOKEN> in , int length ) throws IOException ; </a> 1
<a> void <RARE_TOKEN> ( int length ) ; </a> 0
<a> int indexOf ( int fromIndex , int <RARE_TOKEN> , byte value ) ; </a> 1
<a> int indexOf ( int fromIndex , int <RARE_TOKEN> , ByteBufIndexFinder <RARE_TOKEN> ) ; </a> 0
<a> int bytesBefore ( byte value ) ; </a> 1
<a> int bytesBefore ( ByteBufIndexFinder <RARE_TOKEN> ) ; </a> 0
<a> int bytesBefore ( int length , byte value ) ; </a> 1
<a> int bytesBefore ( int length , ByteBufIndexFinder <RARE_TOKEN> ) ; </a> 0
<a> int bytesBefore ( int index , int length , byte value ) ; </a> 1
<a> int bytesBefore ( int index , int length , ByteBufIndexFinder <RARE_TOKEN> ) ; </a> 0
<a> ByteBuf <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> ( int index , int length ) ; </a> 1
<a> ByteBuf slice ( ) ; </a> 1
<a> ByteBuf slice ( int index , int length ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuffer nioBuffer ( ) ; </a> 1
<a> ByteBuffer nioBuffer ( int index , int length ) ; </a> 1
<a> boolean <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuffer [ ] nioBuffers ( ) ; </a> 1
<a> ByteBuffer [ ] nioBuffers ( int offset , int length ) ; </a> 1
<a> boolean <RARE_TOKEN> ( ) ; </a> 1
<a> byte [ ] array ( ) ; </a> 1
<a> int <RARE_TOKEN> ( ) ; </a> 1
<a> String toString ( Charset charset ) ; </a> 1
<a> String toString ( int index , int length , Charset charset ) ; </a> 1
<a> @ Override </a> 0
<a> int hashCode ( ) ; </a> 1
<a> @ Override </a> 0
<a> boolean equals ( Object obj ) ; </a> 1
<a> @ Override </a> 0
<a> int <RARE_TOKEN> ( ByteBuf buffer ) ; </a> 1
<a> @ Override </a> 0
<a> String toString ( ) ; </a> 1
<a> <RARE_TOKEN> unsafe ( ) ; </a> 1
<a> interface <RARE_TOKEN> { </a> 1
<a> ByteBuffer nioBuffer ( ) ; </a> 1
<a> ByteBuffer [ ] nioBuffers ( ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 1
<a> void <RARE_TOKEN> ( ) ; </a> 1
<a> void <RARE_TOKEN> ( ) ; </a> 1
<a> void <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> public interface ByteBufIndexFinder { </a> 0
<a> boolean <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) ; </a> 0
<a> ByteBufIndexFinder <RARE_TOKEN> = new ByteBufIndexFinder ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) { </a> 0
<a> return buffer . getByte ( <RARE_TOKEN> ) == 0 ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> ByteBufIndexFinder <RARE_TOKEN> = new ByteBufIndexFinder ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) { </a> 0
<a> return buffer . getByte ( <RARE_TOKEN> ) != 0 ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> ByteBufIndexFinder <RARE_TOKEN> = new ByteBufIndexFinder ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) { </a> 0
<a> return buffer . getByte ( <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> ByteBufIndexFinder <RARE_TOKEN> = new ByteBufIndexFinder ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) { </a> 0
<a> return buffer . getByte ( <RARE_TOKEN> ) != <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> ByteBufIndexFinder <RARE_TOKEN> = new ByteBufIndexFinder ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) { </a> 0
<a> return buffer . getByte ( <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> ByteBufIndexFinder <RARE_TOKEN> = new ByteBufIndexFinder ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) { </a> 0
<a> return buffer . getByte ( <RARE_TOKEN> ) != <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> ByteBufIndexFinder <RARE_TOKEN> = new ByteBufIndexFinder ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) { </a> 0
<a> byte b = buffer . getByte ( <RARE_TOKEN> ) ; </a> 0
<a> return b == <RARE_TOKEN> || b == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> ByteBufIndexFinder <RARE_TOKEN> = new ByteBufIndexFinder ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) { </a> 0
<a> byte b = buffer . getByte ( <RARE_TOKEN> ) ; </a> 0
<a> return b != <RARE_TOKEN> && b != <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> ByteBufIndexFinder <RARE_TOKEN> = new ByteBufIndexFinder ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) { </a> 0
<a> byte b = buffer . getByte ( <RARE_TOKEN> ) ; </a> 0
<a> return b == ' ' || b == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> ByteBufIndexFinder <RARE_TOKEN> = new ByteBufIndexFinder ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) { </a> 0
<a> byte b = buffer . getByte ( <RARE_TOKEN> ) ; </a> 0
<a> return b != ' ' && b != <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> public class <RARE_TOKEN> extends InputStream implements <RARE_TOKEN> { </a> 0
<a> private final ByteBuf buffer ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> this ( buffer , buffer . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ByteBuf buffer , int length ) { </a> 0
<a> if ( buffer == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( length < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + length ) ; </a> 0
<a> } </a> 0
<a> if ( length > buffer . readableBytes ( ) ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to be read - <RARE_TOKEN> " </a> 0
<a> + length + ", <RARE_TOKEN> is " + buffer . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> this . buffer = buffer ; </a> 0
<a> <RARE_TOKEN> = buffer . readerIndex ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + length ; </a> 0
<a> buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public int readBytes ( ) { </a> 0
<a> return buffer . readerIndex ( ) - <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return <RARE_TOKEN> - buffer . readerIndex ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( ) throws IOException { </a> 0
<a> if ( ! buffer . readable ( ) ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> return buffer . <RARE_TOKEN> ( ) & 0xff ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( byte [ ] b , int off , int len ) throws IOException { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> len = Math . min ( <RARE_TOKEN> , len ) ; </a> 0
<a> buffer . readBytes ( b , off , len ) ; </a> 0
<a> return len ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( long n ) throws IOException { </a> 0
<a> if ( n > Integer . MAX_VALUE ) { </a> 0
<a> return skipBytes ( Integer . MAX_VALUE ) ; </a> 0
<a> } else { </a> 0
<a> return skipBytes ( ( int ) n ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> return read ( ) != 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> if ( ! buffer . readable ( ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public char <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return ( char ) <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public double <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public float <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( byte [ ] b ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( b , 0 , b . length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( byte [ ] b , int off , int len ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( len ) ; </a> 0
<a> buffer . readBytes ( b , off , len ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( 4 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private final StringBuilder <RARE_TOKEN> = new StringBuilder ( ) ; </a> 0
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> int b = read ( ) ; </a> 0
<a> if ( b < 0 || b == <RARE_TOKEN> ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . append ( ( char ) b ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . length ( ) > 0 ) { </a> 0
<a> while ( <RARE_TOKEN> . charAt ( <RARE_TOKEN> . length ( ) - 1 ) == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . length ( ) - 1 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( 8 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return <RARE_TOKEN> ( ) & 0xff ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return <RARE_TOKEN> ( ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int skipBytes ( int n ) throws IOException { </a> 0
<a> int <RARE_TOKEN> = Math . min ( <RARE_TOKEN> ( ) , n ) ; </a> 0
<a> buffer . skipBytes ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int <RARE_TOKEN> ) throws IOException { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> be a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> is " + <RARE_TOKEN> </a> 0
<a> + ", <RARE_TOKEN> <RARE_TOKEN> is " + <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> public class <RARE_TOKEN> extends OutputStream implements <RARE_TOKEN> { </a> 0
<a> private final ByteBuf buffer ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( this ) ; </a> 0
<a> public <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> if ( buffer == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . buffer = buffer ; </a> 0
<a> <RARE_TOKEN> = buffer . writerIndex ( ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return buffer . writerIndex ( ) - <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] b , int off , int len ) throws IOException { </a> 0
<a> if ( len == 0 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> buffer . writeBytes ( b , off , len ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] b ) throws IOException { </a> 0
<a> buffer . writeBytes ( b ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( int b ) throws IOException { </a> 0
<a> buffer . writeByte ( ( byte ) b ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean v ) throws IOException { </a> 0
<a> write ( v ? ( byte ) 1 : ( byte ) 0 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeByte ( int v ) throws IOException { </a> 0
<a> write ( v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( String s ) throws IOException { </a> 0
<a> int len = s . length ( ) ; </a> 0
<a> for ( int i = 0 ; i < len ; i ++ ) { </a> 0
<a> write ( ( byte ) s . charAt ( i ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int v ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( ( short ) v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String s ) throws IOException { </a> 0
<a> int len = s . length ( ) ; </a> 0
<a> for ( int i = 0 ; i < len ; i ++ ) { </a> 0
<a> <RARE_TOKEN> ( s . charAt ( i ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( double v ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( v ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( float v ) throws IOException { </a> 0
<a> writeInt ( <RARE_TOKEN> . <RARE_TOKEN> ( v ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeInt ( int v ) throws IOException { </a> 0
<a> buffer . writeInt ( v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( long v ) throws IOException { </a> 0
<a> buffer . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int v ) throws IOException { </a> 0
<a> buffer . <RARE_TOKEN> ( ( short ) v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( String s ) throws IOException { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( s ) ; </a> 0
<a> } </a> 0
<a> public ByteBuf buffer ( ) { </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . ByteOrder ; </a> 0
<a> import java . nio . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . Charset ; </a> 0
<a> import java . nio . charset . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . <RARE_TOKEN> ; </a> 0
<a> public final class ByteBufUtil { </a> 0
<a> private static final char [ ] <RARE_TOKEN> = new char [ <RARE_TOKEN> * 4 ] ; </a> 0
<a> static { </a> 0
<a> final char [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> <RARE_TOKEN> [ ( i < < 1 ) + 0 ] = <RARE_TOKEN> [ i > > > 4 & <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> [ ( i < < 1 ) + 1 ] = <RARE_TOKEN> [ i > > > 0 & <RARE_TOKEN> ] ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> public static String <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> return <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) , buffer . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( ByteBuf buffer , int fromIndex , int length ) { </a> 0
<a> if ( length < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + length ) ; </a> 0
<a> } </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = fromIndex + length ; </a> 0
<a> char [ ] buf = new char [ length < < 1 ] ; </a> 0
<a> int <RARE_TOKEN> = fromIndex ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( ; <RARE_TOKEN> < <RARE_TOKEN> ; <RARE_TOKEN> ++ , <RARE_TOKEN> += 2 ) { </a> 0
<a> System . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , buffer . <RARE_TOKEN> ( <RARE_TOKEN> ) < < 1 , </a> 0
<a> buf , <RARE_TOKEN> , 2 ) ; </a> 0
<a> } </a> 0
<a> return new String ( buf ) ; </a> 0
<a> } </a> 0
<a> public static int hashCode ( ByteBuf buffer ) { </a> 0
<a> final int <RARE_TOKEN> = buffer . readableBytes ( ) ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> > > > 2 ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> & 3 ; </a> 0
<a> int hashCode = 1 ; </a> 0
<a> int <RARE_TOKEN> = buffer . readerIndex ( ) ; </a> 0
<a> if ( buffer . order ( ) == ByteOrder . <RARE_TOKEN> ) { </a> 1
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> hashCode = <RARE_TOKEN> * hashCode + buffer . getInt ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> += 4 ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> hashCode = <RARE_TOKEN> * hashCode + <RARE_TOKEN> ( buffer . getInt ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> += 4 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> hashCode = <RARE_TOKEN> * hashCode + buffer . getByte ( <RARE_TOKEN> ++ ) ; </a> 0
<a> } </a> 0
<a> if ( hashCode == 0 ) { </a> 0
<a> hashCode = 1 ; </a> 0
<a> } </a> 0
<a> return hashCode ; </a> 0
<a> } </a> 0
<a> public static boolean equals ( ByteBuf <RARE_TOKEN> , ByteBuf <RARE_TOKEN> ) { </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> . readableBytes ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> . readableBytes ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> > > > 3 ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> & 7 ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . readerIndex ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . readerIndex ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . order ( ) == <RARE_TOKEN> . order ( ) ) { </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> if ( <RARE_TOKEN> . getLong ( <RARE_TOKEN> ) != <RARE_TOKEN> . getLong ( <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += 8 ; </a> 0
<a> <RARE_TOKEN> += 8 ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> if ( <RARE_TOKEN> . getLong ( <RARE_TOKEN> ) != <RARE_TOKEN> ( <RARE_TOKEN> . getLong ( <RARE_TOKEN> ) ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += 8 ; </a> 0
<a> <RARE_TOKEN> += 8 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> if ( <RARE_TOKEN> . getByte ( <RARE_TOKEN> ) != <RARE_TOKEN> . getByte ( <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public static int <RARE_TOKEN> ( ByteBuf <RARE_TOKEN> , ByteBuf <RARE_TOKEN> ) { </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> . readableBytes ( ) ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> . readableBytes ( ) ; </a> 0
<a> final int <RARE_TOKEN> = Math . min ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> > > > 2 ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> & 3 ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . readerIndex ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . readerIndex ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . order ( ) == <RARE_TOKEN> . order ( ) ) { </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> return 1 ; </a> 0
<a> } else if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += 4 ; </a> 0
<a> <RARE_TOKEN> += 4 ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> . getInt ( <RARE_TOKEN> ) ) & <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> return 1 ; </a> 0
<a> } else if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += 4 ; </a> 0
<a> <RARE_TOKEN> += 4 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( int i = <RARE_TOKEN> ; i > 0 ; i -- ) { </a> 0
<a> short <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> short <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> return 1 ; </a> 0
<a> } else if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static int indexOf ( ByteBuf buffer , int fromIndex , int <RARE_TOKEN> , byte value ) { </a> 0
<a> if ( fromIndex <= <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( buffer , fromIndex , <RARE_TOKEN> , value ) ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( buffer , fromIndex , <RARE_TOKEN> , value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static int indexOf ( ByteBuf buffer , int fromIndex , int <RARE_TOKEN> , ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> if ( fromIndex <= <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( buffer , fromIndex , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ( buffer , fromIndex , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static short <RARE_TOKEN> ( short value ) { </a> 0
<a> return ( short ) ( value < < 8 | value > > > 8 & 0xff ) ; </a> 0
<a> } </a> 0
<a> public static int <RARE_TOKEN> ( int value ) { </a> 0
<a> int <RARE_TOKEN> = value < < 16 & <RARE_TOKEN> | value & <RARE_TOKEN> | value > > > 16 & 0xff ; </a> 0
<a> if ( ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ) { </a> 0
<a> <RARE_TOKEN> |= <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static int <RARE_TOKEN> ( int value ) { </a> 0
<a> return <RARE_TOKEN> ( ( short ) value ) < < 16 | </a> 0
<a> <RARE_TOKEN> ( ( short ) ( value > > > 16 ) ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static long <RARE_TOKEN> ( long value ) { </a> 0
<a> return ( long ) <RARE_TOKEN> ( ( int ) value ) < < 32 | </a> 0
<a> <RARE_TOKEN> ( ( int ) ( value > > > 32 ) ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( ByteBuf buffer , int fromIndex , int <RARE_TOKEN> , byte value ) { </a> 0
<a> fromIndex = Math . <RARE_TOKEN> ( fromIndex , 0 ) ; </a> 0
<a> if ( fromIndex >= <RARE_TOKEN> || buffer . capacity ( ) == 0 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> for ( int i = fromIndex ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> if ( buffer . getByte ( i ) == value ) { </a> 0
<a> return i ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( ByteBuf buffer , int fromIndex , int <RARE_TOKEN> , byte value ) { </a> 0
<a> fromIndex = Math . min ( fromIndex , buffer . capacity ( ) ) ; </a> 0
<a> if ( fromIndex < 0 || buffer . capacity ( ) == 0 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> for ( int i = fromIndex - 1 ; i >= <RARE_TOKEN> ; i -- ) { </a> 0
<a> if ( buffer . getByte ( i ) == value ) { </a> 0
<a> return i ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( </a> 0
<a> ByteBuf buffer , int fromIndex , int <RARE_TOKEN> , ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> fromIndex = Math . <RARE_TOKEN> ( fromIndex , 0 ) ; </a> 0
<a> if ( fromIndex >= <RARE_TOKEN> || buffer . capacity ( ) == 0 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> for ( int i = fromIndex ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( buffer , i ) ) { </a> 0
<a> return i ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( </a> 0
<a> ByteBuf buffer , int fromIndex , int <RARE_TOKEN> , ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> fromIndex = Math . min ( fromIndex , buffer . capacity ( ) ) ; </a> 0
<a> if ( fromIndex < 0 || buffer . capacity ( ) == 0 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> for ( int i = fromIndex - 1 ; i >= <RARE_TOKEN> ; i -- ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( buffer , i ) ) { </a> 0
<a> return i ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> static ByteBuffer <RARE_TOKEN> ( <RARE_TOKEN> src , Charset charset ) { </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = CharsetUtil . <RARE_TOKEN> ( charset ) ; </a> 0
<a> final ByteBuffer dst = ByteBuffer . <RARE_TOKEN> ( </a> 0
<a> ( int ) ( ( double ) src . <RARE_TOKEN> ( ) * <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . encode ( src , dst , true ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . flush ( dst ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> dst . <RARE_TOKEN> ( ) ; </a> 0
<a> return dst ; </a> 0
<a> } </a> 0
<a> static String <RARE_TOKEN> ( ByteBuffer src , Charset charset ) { </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = CharsetUtil . <RARE_TOKEN> ( charset ) ; </a> 0
<a> final <RARE_TOKEN> dst = <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> ( int ) ( ( double ) src . <RARE_TOKEN> ( ) * <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . decode ( src , dst , true ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . flush ( dst ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return dst . <RARE_TOKEN> ( ) . toString ( ) ; </a> 0
<a> } </a> 0
<a> private ByteBufUtil ( ) { } </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 1
<a> ChannelBufType type ( ) ; </a> 1
<a> boolean <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> public enum ChannelBufType { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . util . List ; </a> 0
<a> public interface <RARE_TOKEN> extends ByteBuf , <RARE_TOKEN> < ByteBuf > { </a> 1
<a> void <RARE_TOKEN> ( ByteBuf buffer ) ; </a> 0
<a> void <RARE_TOKEN> ( int cIndex , ByteBuf buffer ) ; </a> 0
<a> void <RARE_TOKEN> ( ByteBuf ... buffers ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> < ByteBuf > buffers ) ; </a> 0
<a> void <RARE_TOKEN> ( int cIndex , ByteBuf ... buffers ) ; </a> 0
<a> void <RARE_TOKEN> ( int cIndex , <RARE_TOKEN> < ByteBuf > buffers ) ; </a> 0
<a> void <RARE_TOKEN> ( int cIndex ) ; </a> 0
<a> void <RARE_TOKEN> ( int cIndex , int <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 1
<a> int <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> ( int cIndex ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> ( int offset ) ; </a> 1
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int cIndex , int <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> ( int offset ) ; </a> 1
<a> int <RARE_TOKEN> ( int cIndex ) ; </a> 1
<a> List < ByteBuf > <RARE_TOKEN> ( int offset , int length ) ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> ; </a> 1
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . ByteOrder ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 1
<a> import java . util . Collection ; </a> 1
<a> import java . util . Collections ; </a> 1
<a> import java . util . Iterator ; </a> 1
<a> import java . util . List ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final List < Component > components = new ArrayList < Component > ( ) ; </a> 1
<a> private final int <RARE_TOKEN> ; </a> 1
<a> private final <RARE_TOKEN> unsafe = new <RARE_TOKEN> ( ) ; </a> 1
<a> private Component <RARE_TOKEN> ; </a> 1
<a> private int <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> super ( ByteOrder . <RARE_TOKEN> , Integer . MAX_VALUE ) ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , ByteBuf ... buffers ) { </a> 1
<a> super ( ByteOrder . <RARE_TOKEN> , Integer . MAX_VALUE ) ; </a> 1
<a> if ( <RARE_TOKEN> < 2 ) { </a> 1
<a> throw new IllegalArgumentException ( </a> 1
<a> <RARE_TOKEN> " + <RARE_TOKEN> + " (expected: >= <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> ( 0 , buffers ) ; </a> 1
<a> <RARE_TOKEN> ( 0 , capacity ( ) ) ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , <RARE_TOKEN> < ByteBuf > buffers ) { </a> 1
<a> super ( ByteOrder . <RARE_TOKEN> , Integer . MAX_VALUE ) ; </a> 1
<a> if ( <RARE_TOKEN> < 2 ) { </a> 1
<a> throw new IllegalArgumentException ( </a> 1
<a> <RARE_TOKEN> " + <RARE_TOKEN> + " (expected: >= <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> ( 0 , buffers ) ; </a> 1
<a> <RARE_TOKEN> ( 0 , capacity ( ) ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> <RARE_TOKEN> ( components . size ( ) , buffer ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ByteBuf ... buffers ) { </a> 1
<a> <RARE_TOKEN> ( components . size ( ) , buffers ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < ByteBuf > buffers ) { </a> 1
<a> <RARE_TOKEN> ( components . size ( ) , buffers ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int cIndex , ByteBuf buffer ) { </a> 0
<a> <RARE_TOKEN> ( cIndex ) ; </a> 1
<a> if ( buffer == null ) { </a> 1
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( buffer instanceof <RARE_TOKEN> ) { </a> 1
<a> @ SuppressWarnings ( "unchecked" ) </a> 1
<a> <RARE_TOKEN> < ByteBuf > <RARE_TOKEN> = ( <RARE_TOKEN> < ByteBuf > ) buffer ; </a> 1
<a> <RARE_TOKEN> ( cIndex , <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> int readableBytes = buffer . readableBytes ( ) ; </a> 1
<a> if ( readableBytes == 0 ) { </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> final int <RARE_TOKEN> = components . size ( ) ; </a> 1
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 1
<a> final int capacity = components . get ( <RARE_TOKEN> - 1 ) . endOffset + readableBytes ; </a> 1
<a> ByteBuf <RARE_TOKEN> = buffer . unsafe ( ) . <RARE_TOKEN> ( capacity ) ; </a> 1
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 1
<a> ByteBuf b = components . get ( i ) . buf ; </a> 0
<a> <RARE_TOKEN> . writeBytes ( b ) ; </a> 0
<a> b . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> <RARE_TOKEN> . writeBytes ( buffer , buffer . readerIndex ( ) , readableBytes ) ; </a> 1
<a> Component c = new Component ( <RARE_TOKEN> ) ; </a> 1
<a> c . endOffset = c . length ; </a> 1
<a> components . clear ( ) ; </a> 1
<a> components . add ( c ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> Component c = new Component ( buffer . order ( ByteOrder . <RARE_TOKEN> ) . slice ( ) ) ; </a> 1
<a> if ( cIndex == components . size ( ) ) { </a> 1
<a> components . add ( c ) ; </a> 1
<a> if ( cIndex == 0 ) { </a> 1
<a> c . endOffset = readableBytes ; </a> 1
<a> } else { </a> 1
<a> Component prev = components . get ( cIndex - 1 ) ; </a> 1
<a> c . offset = prev . endOffset ; </a> 1
<a> c . endOffset = c . offset + readableBytes ; </a> 1
<a> } </a> 1
<a> } else { </a> 1
<a> components . add ( cIndex , c ) ; </a> 1
<a> <RARE_TOKEN> ( cIndex ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int cIndex , ByteBuf ... buffers ) { </a> 0
<a> <RARE_TOKEN> ( cIndex ) ; </a> 1
<a> if ( buffers == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> ByteBuf <RARE_TOKEN> = null ; </a> 1
<a> int <RARE_TOKEN> = 0 ; </a> 1
<a> int readableBytes = 0 ; </a> 1
<a> for ( ByteBuf b : buffers ) { </a> 0
<a> if ( b == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = b ; </a> 1
<a> <RARE_TOKEN> ++ ; </a> 1
<a> readableBytes += b . readableBytes ( ) ; </a> 1
<a> } </a> 1
<a> if ( readableBytes == 0 ) { </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> final int <RARE_TOKEN> = components . size ( ) ; </a> 1
<a> if ( <RARE_TOKEN> + <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 1
<a> final ByteBuf <RARE_TOKEN> ; </a> 1
<a> if ( <RARE_TOKEN> != 0 ) { </a> 1
<a> final int capacity = components . get ( <RARE_TOKEN> - 1 ) . endOffset + readableBytes ; </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> . unsafe ( ) . <RARE_TOKEN> ( capacity ) ; </a> 1
<a> for ( int i = 0 ; i < cIndex ; i ++ ) { </a> 1
<a> ByteBuf b = components . get ( i ) . buf ; </a> 0
<a> <RARE_TOKEN> . writeBytes ( b ) ; </a> 0
<a> b . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> for ( ByteBuf b : buffers ) { </a> 0
<a> if ( b == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . writeBytes ( b , b . readerIndex ( ) , b . readableBytes ( ) ) ; </a> 1
<a> } </a> 0
<a> for ( int i = cIndex ; i < <RARE_TOKEN> ; i ++ ) { </a> 1
<a> ByteBuf b = components . get ( i ) . buf ; </a> 0
<a> <RARE_TOKEN> . writeBytes ( b ) ; </a> 0
<a> b . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> . unsafe ( ) . <RARE_TOKEN> ( readableBytes ) ; </a> 1
<a> for ( ByteBuf b : buffers ) { </a> 0
<a> if ( b == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . writeBytes ( b , b . readerIndex ( ) , b . readableBytes ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> Component c = new Component ( <RARE_TOKEN> ) ; </a> 0
<a> c . endOffset = c . length ; </a> 0
<a> components . clear ( ) ; </a> 0
<a> components . add ( c ) ; </a> 0
<a> <RARE_TOKEN> ( 0 ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> for ( ByteBuf b : buffers ) { </a> 0
<a> if ( b == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( b . readable ( ) ) { </a> 1
<a> <RARE_TOKEN> ( cIndex ++ , b ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int cIndex , <RARE_TOKEN> < ByteBuf > buffers ) { </a> 0
<a> if ( buffers == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( buffers instanceof <RARE_TOKEN> ) { </a> 1
<a> List < Component > list = ( ( <RARE_TOKEN> ) buffers ) . components ; </a> 1
<a> ByteBuf [ ] array = new ByteBuf [ list . size ( ) ] ; </a> 1
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 1
<a> array [ i ] = list . get ( i ) . buf ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( cIndex , array ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> if ( buffers instanceof List ) { </a> 1
<a> List < ByteBuf > list = ( List < ByteBuf > ) buffers ; </a> 1
<a> ByteBuf [ ] array = new ByteBuf [ list . size ( ) ] ; </a> 1
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 1
<a> array [ i ] = list . get ( i ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> ( cIndex , array ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> if ( buffers instanceof Collection ) { </a> 1
<a> Collection < ByteBuf > <RARE_TOKEN> = ( Collection < ByteBuf > ) buffers ; </a> 0
<a> ByteBuf [ ] array = new ByteBuf [ <RARE_TOKEN> . size ( ) ] ; </a> 1
<a> int i = 0 ; </a> 1
<a> for ( ByteBuf b : <RARE_TOKEN> ) { </a> 1
<a> array [ i ++ ] = b ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( cIndex , array ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> List < ByteBuf > list = new ArrayList < ByteBuf > ( ) ; </a> 1
<a> for ( ByteBuf b : buffers ) { </a> 1
<a> list . add ( b ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( cIndex , list . <RARE_TOKEN> ( new ByteBuf [ list . size ( ) ] ) ) ; </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( int cIndex ) { </a> 1
<a> if ( cIndex < 0 || cIndex > components . size ( ) ) { </a> 1
<a> throw new IndexOutOfBoundsException ( String . format ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> (expected: >= 0 && <= <RARE_TOKEN> , </a> 1
<a> cIndex , components . size ( ) ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( int cIndex , int <RARE_TOKEN> ) { </a> 1
<a> if ( cIndex < 0 || cIndex + <RARE_TOKEN> > components . size ( ) ) { </a> 1
<a> throw new IndexOutOfBoundsException ( String . format ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + </a> 1
<a> <RARE_TOKEN> cIndex >= 0 && cIndex + <RARE_TOKEN> <= <RARE_TOKEN> , </a> 1
<a> cIndex , <RARE_TOKEN> , components . size ( ) ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( int cIndex ) { </a> 1
<a> Component c = components . get ( cIndex ) ; </a> 1
<a> <RARE_TOKEN> = c ; </a> 1
<a> <RARE_TOKEN> = cIndex ; </a> 1
<a> if ( cIndex == 0 ) { </a> 1
<a> c . offset = 0 ; </a> 1
<a> c . endOffset = c . length ; </a> 1
<a> cIndex ++ ; </a> 1
<a> } </a> 1
<a> for ( int i = cIndex ; i < components . size ( ) ; i ++ ) { </a> 1
<a> Component prev = components . get ( i - 1 ) ; </a> 1
<a> Component <RARE_TOKEN> = components . get ( i ) ; </a> 1
<a> <RARE_TOKEN> . offset = prev . endOffset ; </a> 1
<a> <RARE_TOKEN> . endOffset = <RARE_TOKEN> . offset + <RARE_TOKEN> . length ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int cIndex ) { </a> 0
<a> <RARE_TOKEN> ( cIndex ) ; </a> 1
<a> components . remove ( cIndex ) ; </a> 0
<a> <RARE_TOKEN> ( cIndex ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int cIndex , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( cIndex , <RARE_TOKEN> ) ; </a> 1
<a> components . <RARE_TOKEN> ( cIndex , cIndex + <RARE_TOKEN> ) . clear ( ) ; </a> 0
<a> <RARE_TOKEN> ( cIndex ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public Iterator < ByteBuf > <RARE_TOKEN> ( ) { </a> 1
<a> List < ByteBuf > list = new ArrayList < ByteBuf > ( components . size ( ) ) ; </a> 1
<a> for ( Component c : components ) { </a> 1
<a> list . add ( c . buf ) ; </a> 1
<a> } </a> 1
<a> return list . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public List < ByteBuf > <RARE_TOKEN> ( int offset , int length ) { </a> 1
<a> if ( length == 0 ) { </a> 1
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> if ( offset + length > capacity ( ) ) { </a> 1
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to <RARE_TOKEN> - <RARE_TOKEN> " </a> 1
<a> + ( offset + length ) + ", capacity is " + capacity ( ) ) ; </a> 1
<a> } </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( offset ) ; </a> 1
<a> List < ByteBuf > slice = new ArrayList < ByteBuf > ( components . size ( ) ) ; </a> 1
<a> Component <RARE_TOKEN> = components . get ( <RARE_TOKEN> ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> = <RARE_TOKEN> . buf . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> . readerIndex ( offset - <RARE_TOKEN> . offset ) ; </a> 1
<a> ByteBuf buf = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = length ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> int readableBytes = buf . readableBytes ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= readableBytes ) { </a> 0
<a> buf . writerIndex ( buf . readerIndex ( ) + <RARE_TOKEN> ) ; </a> 0
<a> slice . add ( buf ) ; </a> 0
<a> break ; </a> 0
<a> } else { </a> 0
<a> slice . add ( buf ) ; </a> 0
<a> <RARE_TOKEN> -= readableBytes ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> buf = components . get ( <RARE_TOKEN> ) . buf . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> } while ( <RARE_TOKEN> > 0 ) ; </a> 0
<a> for ( int i = 0 ; i < slice . size ( ) ; i ++ ) { </a> 0
<a> slice . set ( i , slice . get ( i ) . slice ( ) ) ; </a> 0
<a> } </a> 0
<a> return slice ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> if ( components . size ( ) == 1 ) { </a> 1
<a> return components . get ( 0 ) . buf . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> if ( components . size ( ) == 1 ) { </a> 1
<a> return components . get ( 0 ) . buf . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public byte [ ] array ( ) { </a> 1
<a> if ( components . size ( ) == 1 ) { </a> 1
<a> return components . get ( 0 ) . buf . array ( ) ; </a> 1
<a> } </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> if ( components . size ( ) == 1 ) { </a> 1
<a> return components . get ( 0 ) . buf . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int capacity ( ) { </a> 1
<a> if ( components . isEmpty ( ) ) { </a> 1
<a> return 0 ; </a> 1
<a> } </a> 1
<a> return components . get ( components . size ( ) - 1 ) . endOffset ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void capacity ( int newCapacity ) { </a> 0
<a> if ( newCapacity < 0 || newCapacity > maxCapacity ( ) ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + newCapacity ) ; </a> 1
<a> } </a> 1
<a> int <RARE_TOKEN> = capacity ( ) ; </a> 1
<a> if ( newCapacity > <RARE_TOKEN> ) { </a> 1
<a> final int <RARE_TOKEN> = newCapacity - <RARE_TOKEN> ; </a> 1
<a> ByteBuf <RARE_TOKEN> ; </a> 1
<a> if ( components . isEmpty ( ) ) { </a> 1
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } else { </a> 1
<a> Component last = components . get ( components . size ( ) - 1 ) ; </a> 1
<a> <RARE_TOKEN> = last . buf . unsafe ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 0 , <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } else if ( newCapacity < <RARE_TOKEN> ) { </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> - newCapacity ; </a> 1
<a> for ( <RARE_TOKEN> < Component > i = components . <RARE_TOKEN> ( components . size ( ) ) ; i . <RARE_TOKEN> ( ) ; ) { </a> 1
<a> Component c = i . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> >= c . length ) { </a> 1
<a> <RARE_TOKEN> -= c . length ; </a> 1
<a> i . remove ( ) ; </a> 1
<a> continue ; </a> 1
<a> } </a> 1
<a> Component <RARE_TOKEN> = new Component ( c . buf . slice ( 0 , c . length - <RARE_TOKEN> ) ) ; </a> 1
<a> <RARE_TOKEN> . offset = c . offset ; </a> 1
<a> <RARE_TOKEN> . endOffset = <RARE_TOKEN> . offset + <RARE_TOKEN> . length ; </a> 1
<a> c . buf . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> i . set ( <RARE_TOKEN> ) ; </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> if ( readerIndex ( ) > newCapacity ) { </a> 1
<a> <RARE_TOKEN> ( newCapacity , newCapacity ) ; </a> 1
<a> } else if ( writerIndex ( ) > newCapacity ) { </a> 1
<a> writerIndex ( newCapacity ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> return components . size ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( int offset ) { </a> 1
<a> if ( offset < 0 || offset >= capacity ( ) ) { </a> 1
<a> throw new IndexOutOfBoundsException ( String . format ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> (expected: >= 0 && < <RARE_TOKEN> , offset , capacity ( ) ) ) ; </a> 1
<a> } </a> 1
<a> Component c = <RARE_TOKEN> ; </a> 1
<a> if ( c == null ) { </a> 1
<a> <RARE_TOKEN> = c = components . get ( 0 ) ; </a> 1
<a> } </a> 1
<a> if ( offset >= c . offset ) { </a> 1
<a> if ( offset < c . endOffset ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> for ( int i = <RARE_TOKEN> + 1 ; i < components . size ( ) ; i ++ ) { </a> 1
<a> c = components . get ( i ) ; </a> 1
<a> if ( offset < c . endOffset ) { </a> 1
<a> <RARE_TOKEN> = i ; </a> 1
<a> <RARE_TOKEN> = c ; </a> 1
<a> return i ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } else { </a> 1
<a> for ( int i = <RARE_TOKEN> - 1 ; i >= 0 ; i -- ) { </a> 1
<a> c = components . get ( i ) ; </a> 1
<a> if ( offset >= c . offset ) { </a> 1
<a> <RARE_TOKEN> = i ; </a> 1
<a> <RARE_TOKEN> = c ; </a> 1
<a> return i ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> throw new IllegalStateException ( <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> - concurrent <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( int cIndex ) { </a> 1
<a> <RARE_TOKEN> ( cIndex ) ; </a> 1
<a> return components . get ( cIndex ) . offset ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public byte getByte ( int index ) { </a> 1
<a> Component c = <RARE_TOKEN> ( index ) ; </a> 1
<a> return c . buf . getByte ( index - c . offset ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public short <RARE_TOKEN> ( int index ) { </a> 0
<a> Component c = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index + 2 <= c . endOffset ) { </a> 1
<a> return c . buf . <RARE_TOKEN> ( index - c . offset ) ; </a> 1
<a> } else if ( order ( ) == ByteOrder . <RARE_TOKEN> ) { </a> 1
<a> return ( short ) ( ( getByte ( index ) & 0xff ) < < 8 | getByte ( index + 1 ) & 0xff ) ; </a> 0
<a> } else { </a> 1
<a> return ( short ) ( getByte ( index ) & 0xff | ( getByte ( index + 1 ) & 0xff ) < < 8 ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> Component c = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index + 3 <= c . endOffset ) { </a> 1
<a> return c . buf . <RARE_TOKEN> ( index - c . offset ) ; </a> 1
<a> } else if ( order ( ) == ByteOrder . <RARE_TOKEN> ) { </a> 1
<a> return ( <RARE_TOKEN> ( index ) & <RARE_TOKEN> ) < < 8 | getByte ( index + 2 ) & 0xff ; </a> 0
<a> } else { </a> 1
<a> return <RARE_TOKEN> ( index ) & <RARE_TOKEN> | ( getByte ( index + 2 ) & 0xFF ) < < 16 ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int getInt ( int index ) { </a> 0
<a> Component c = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index + 4 <= c . endOffset ) { </a> 1
<a> return c . buf . getInt ( index - c . offset ) ; </a> 1
<a> } else if ( order ( ) == ByteOrder . <RARE_TOKEN> ) { </a> 1
<a> return ( <RARE_TOKEN> ( index ) & <RARE_TOKEN> ) < < 16 | <RARE_TOKEN> ( index + 2 ) & <RARE_TOKEN> ; </a> 0
<a> } else { </a> 1
<a> return <RARE_TOKEN> ( index ) & <RARE_TOKEN> | ( <RARE_TOKEN> ( index + 2 ) & <RARE_TOKEN> ) < < 16 ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public long getLong ( int index ) { </a> 0
<a> Component c = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index + 8 <= c . endOffset ) { </a> 1
<a> return c . buf . getLong ( index - c . offset ) ; </a> 1
<a> } else if ( order ( ) == ByteOrder . <RARE_TOKEN> ) { </a> 1
<a> return ( getInt ( index ) & <RARE_TOKEN> ) < < 32 | getInt ( index + 4 ) & <RARE_TOKEN> ; </a> 0
<a> } else { </a> 1
<a> return getInt ( index ) & <RARE_TOKEN> | ( getInt ( index + 4 ) & <RARE_TOKEN> ) < < 32 ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void getBytes ( int index , byte [ ] dst , int dstIndex , int length ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index > capacity ( ) - length || dstIndex > dst . length - length ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to read - <RARE_TOKEN> " </a> 0
<a> + ( index + length ) + ", <RARE_TOKEN> is " + capacity ( ) + " or " </a> 0
<a> + dst . length ) ; </a> 0
<a> } </a> 0
<a> int i = <RARE_TOKEN> ; </a> 1
<a> while ( length > 0 ) { </a> 1
<a> Component c = components . get ( i ) ; </a> 1
<a> ByteBuf s = c . buf ; </a> 1
<a> int adjustment = c . offset ; </a> 1
<a> int localLength = Math . min ( length , s . capacity ( ) - ( index - adjustment ) ) ; </a> 0
<a> s . getBytes ( index - adjustment , dst , dstIndex , localLength ) ; </a> 0
<a> index += localLength ; </a> 0
<a> dstIndex += localLength ; </a> 0
<a> length -= localLength ; </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void getBytes ( int index , ByteBuffer dst ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( index ) ; </a> 1
<a> int limit = dst . limit ( ) ; </a> 1
<a> int length = dst . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( index > capacity ( ) - length ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to be read - <RARE_TOKEN> " </a> 0
<a> + ( index + length ) + ", <RARE_TOKEN> is " + capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> int i = <RARE_TOKEN> ; </a> 1
<a> try { </a> 1
<a> while ( length > 0 ) { </a> 1
<a> Component c = components . get ( i ) ; </a> 1
<a> ByteBuf s = c . buf ; </a> 1
<a> int adjustment = c . offset ; </a> 1
<a> int localLength = Math . min ( length , s . capacity ( ) - ( index - adjustment ) ) ; </a> 0
<a> dst . limit ( dst . position ( ) + localLength ) ; </a> 0
<a> s . getBytes ( index - adjustment , dst ) ; </a> 0
<a> index += localLength ; </a> 0
<a> length -= localLength ; </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> dst . limit ( limit ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void getBytes ( int index , ByteBuf dst , int dstIndex , int length ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index > capacity ( ) - length || dstIndex > dst . capacity ( ) - length ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to be read - <RARE_TOKEN> " </a> 0
<a> + ( index + length ) + " or " + ( dstIndex + length ) + ", <RARE_TOKEN> is " </a> 0
<a> + capacity ( ) + " or " + dst . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> int i = <RARE_TOKEN> ; </a> 1
<a> while ( length > 0 ) { </a> 1
<a> Component c = components . get ( i ) ; </a> 1
<a> ByteBuf s = c . buf ; </a> 1
<a> int adjustment = c . offset ; </a> 1
<a> int localLength = Math . min ( length , s . capacity ( ) - ( index - adjustment ) ) ; </a> 0
<a> s . getBytes ( index - adjustment , dst , dstIndex , localLength ) ; </a> 0
<a> index += localLength ; </a> 0
<a> dstIndex += localLength ; </a> 0
<a> length -= localLength ; </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getBytes ( int index , <RARE_TOKEN> out , int length ) </a> 0
<a> throws IOException { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 1
<a> return out . write ( <RARE_TOKEN> ( index , length ) ) ; </a> 0
<a> } else { </a> 0
<a> long <RARE_TOKEN> = out . write ( nioBuffers ( index , length ) ) ; </a> 0
<a> if ( <RARE_TOKEN> > Integer . MAX_VALUE ) { </a> 0
<a> return Integer . MAX_VALUE ; </a> 0
<a> } else { </a> 0
<a> return ( int ) <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , OutputStream out , int length ) </a> 0
<a> throws IOException { </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index > capacity ( ) - length ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to be read - <RARE_TOKEN> " </a> 0
<a> + ( index + length ) + ", <RARE_TOKEN> of " + capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> int i = <RARE_TOKEN> ; </a> 1
<a> while ( length > 0 ) { </a> 1
<a> Component c = components . get ( i ) ; </a> 1
<a> ByteBuf s = c . buf ; </a> 1
<a> int adjustment = c . offset ; </a> 1
<a> int localLength = Math . min ( length , s . capacity ( ) - ( index - adjustment ) ) ; </a> 0
<a> s . getBytes ( index - adjustment , out , localLength ) ; </a> 0
<a> index += localLength ; </a> 0
<a> length -= localLength ; </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setByte ( int index , int value ) { </a> 0
<a> Component c = <RARE_TOKEN> ( index ) ; </a> 1
<a> c . buf . setByte ( index - c . offset , value ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> Component c = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index + 2 <= c . endOffset ) { </a> 1
<a> c . buf . <RARE_TOKEN> ( index - c . offset , value ) ; </a> 1
<a> } else if ( order ( ) == ByteOrder . <RARE_TOKEN> ) { </a> 1
<a> setByte ( index , ( byte ) ( value > > > 8 ) ) ; </a> 0
<a> setByte ( index + 1 , ( byte ) value ) ; </a> 0
<a> } else { </a> 1
<a> setByte ( index , ( byte ) value ) ; </a> 0
<a> setByte ( index + 1 , ( byte ) ( value > > > 8 ) ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> Component c = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index + 3 <= c . endOffset ) { </a> 1
<a> c . buf . <RARE_TOKEN> ( index - c . offset , value ) ; </a> 1
<a> } else if ( order ( ) == ByteOrder . <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( index , ( short ) ( value > > 8 ) ) ; </a> 0
<a> setByte ( index + 2 , ( byte ) value ) ; </a> 0
<a> } else { </a> 1
<a> <RARE_TOKEN> ( index , ( short ) value ) ; </a> 0
<a> setByte ( index + 2 , ( byte ) ( value > > > 16 ) ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> Component c = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index + 4 <= c . endOffset ) { </a> 1
<a> c . buf . <RARE_TOKEN> ( index - c . offset , value ) ; </a> 1
<a> } else if ( order ( ) == ByteOrder . <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( index , ( short ) ( value > > > 16 ) ) ; </a> 0
<a> <RARE_TOKEN> ( index + 2 , ( short ) value ) ; </a> 0
<a> } else { </a> 1
<a> <RARE_TOKEN> ( index , ( short ) value ) ; </a> 0
<a> <RARE_TOKEN> ( index + 2 , ( short ) ( value > > > 16 ) ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int index , long value ) { </a> 0
<a> Component c = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index + 8 <= c . endOffset ) { </a> 1
<a> c . buf . <RARE_TOKEN> ( index - c . offset , value ) ; </a> 1
<a> } else if ( order ( ) == ByteOrder . <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( index , ( int ) ( value > > > 32 ) ) ; </a> 0
<a> <RARE_TOKEN> ( index + 4 , ( int ) value ) ; </a> 0
<a> } else { </a> 1
<a> <RARE_TOKEN> ( index , ( int ) value ) ; </a> 0
<a> <RARE_TOKEN> ( index + 4 , ( int ) ( value > > > 32 ) ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setBytes ( int index , byte [ ] src , int srcIndex , int length ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index > capacity ( ) - length || srcIndex > src . length - length ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to read - <RARE_TOKEN> " </a> 0
<a> + ( index + length ) + " or " + ( srcIndex + length ) + ", <RARE_TOKEN> is " </a> 0
<a> + capacity ( ) + " or " + src . length ) ; </a> 0
<a> } </a> 0
<a> int i = <RARE_TOKEN> ; </a> 1
<a> while ( length > 0 ) { </a> 1
<a> Component c = components . get ( i ) ; </a> 1
<a> ByteBuf s = c . buf ; </a> 1
<a> int adjustment = c . offset ; </a> 1
<a> int localLength = Math . min ( length , s . capacity ( ) - ( index - adjustment ) ) ; </a> 0
<a> s . setBytes ( index - adjustment , src , srcIndex , localLength ) ; </a> 0
<a> index += localLength ; </a> 0
<a> srcIndex += localLength ; </a> 0
<a> length -= localLength ; </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setBytes ( int index , ByteBuffer src ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( index ) ; </a> 1
<a> int limit = src . limit ( ) ; </a> 1
<a> int length = src . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( index > capacity ( ) - length ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to be <RARE_TOKEN> - <RARE_TOKEN> " </a> 0
<a> + ( index + length ) + ", <RARE_TOKEN> is " + capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> int i = <RARE_TOKEN> ; </a> 1
<a> try { </a> 1
<a> while ( length > 0 ) { </a> 1
<a> Component c = components . get ( i ) ; </a> 1
<a> ByteBuf s = c . buf ; </a> 1
<a> int adjustment = c . offset ; </a> 1
<a> int localLength = Math . min ( length , s . capacity ( ) - ( index - adjustment ) ) ; </a> 0
<a> src . limit ( src . position ( ) + localLength ) ; </a> 0
<a> s . setBytes ( index - adjustment , src ) ; </a> 0
<a> index += localLength ; </a> 0
<a> length -= localLength ; </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> src . limit ( limit ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setBytes ( int index , ByteBuf src , int srcIndex , int length ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index > capacity ( ) - length || srcIndex > src . capacity ( ) - length ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to be <RARE_TOKEN> - <RARE_TOKEN> " </a> 0
<a> + ( index + length ) + " or " + ( srcIndex + length ) + ", <RARE_TOKEN> is " </a> 0
<a> + capacity ( ) + " or " + src . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> int i = <RARE_TOKEN> ; </a> 1
<a> while ( length > 0 ) { </a> 1
<a> Component c = components . get ( i ) ; </a> 1
<a> ByteBuf s = c . buf ; </a> 1
<a> int adjustment = c . offset ; </a> 1
<a> int localLength = Math . min ( length , s . capacity ( ) - ( index - adjustment ) ) ; </a> 0
<a> s . setBytes ( index - adjustment , src , srcIndex , localLength ) ; </a> 0
<a> index += localLength ; </a> 0
<a> srcIndex += localLength ; </a> 0
<a> length -= localLength ; </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public int setBytes ( int index , InputStream in , int length ) </a> 1
<a> throws IOException { </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index > capacity ( ) - length ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to write - <RARE_TOKEN> " </a> 0
<a> + ( index + length ) + ", <RARE_TOKEN> is " + capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> int i = <RARE_TOKEN> ; </a> 1
<a> int readBytes = 0 ; </a> 1
<a> <RARE_TOKEN> { </a> 1
<a> Component c = components . get ( i ) ; </a> 1
<a> ByteBuf s = c . buf ; </a> 1
<a> int adjustment = c . offset ; </a> 1
<a> int localLength = Math . min ( length , s . capacity ( ) - ( index - adjustment ) ) ; </a> 0
<a> int <RARE_TOKEN> = s . setBytes ( index - adjustment , in , localLength ) ; </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> if ( readBytes == 0 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } else { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == localLength ) { </a> 0
<a> index += localLength ; </a> 0
<a> length -= localLength ; </a> 0
<a> readBytes += localLength ; </a> 0
<a> i ++ ; </a> 0
<a> } else { </a> 0
<a> index += <RARE_TOKEN> ; </a> 0
<a> length -= <RARE_TOKEN> ; </a> 0
<a> readBytes += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } while ( length > 0 ) ; </a> 0
<a> return readBytes ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int setBytes ( int index , <RARE_TOKEN> in , int length ) </a> 1
<a> throws IOException { </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index > capacity ( ) - length ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to write - <RARE_TOKEN> " </a> 0
<a> + ( index + length ) + ", <RARE_TOKEN> is " + capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> int i = <RARE_TOKEN> ; </a> 1
<a> int readBytes = 0 ; </a> 1
<a> <RARE_TOKEN> { </a> 1
<a> Component c = components . get ( i ) ; </a> 1
<a> ByteBuf s = c . buf ; </a> 1
<a> int adjustment = c . offset ; </a> 1
<a> int localLength = Math . min ( length , s . capacity ( ) - ( index - adjustment ) ) ; </a> 1
<a> int <RARE_TOKEN> = s . setBytes ( index - adjustment , in , localLength ) ; </a> 1
<a> if ( <RARE_TOKEN> == 0 ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> if ( readBytes == 0 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } else { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == localLength ) { </a> 0
<a> index += localLength ; </a> 0
<a> length -= localLength ; </a> 0
<a> readBytes += localLength ; </a> 0
<a> i ++ ; </a> 0
<a> } else { </a> 0
<a> index += <RARE_TOKEN> ; </a> 0
<a> length -= <RARE_TOKEN> ; </a> 0
<a> readBytes += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } while ( length > 0 ) ; </a> 0
<a> return readBytes ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( int index , int length ) { </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index > capacity ( ) - length ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to <RARE_TOKEN> - <RARE_TOKEN> " </a> 0
<a> + ( index + length ) + ", <RARE_TOKEN> is " + capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> ByteBuf dst = unsafe ( ) . <RARE_TOKEN> ( length ) ; </a> 1
<a> <RARE_TOKEN> ( index , length , <RARE_TOKEN> , dst ) ; </a> 1
<a> return dst ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int index , int length , int <RARE_TOKEN> , ByteBuf dst ) { </a> 0
<a> int dstIndex = 0 ; </a> 0
<a> int i = <RARE_TOKEN> ; </a> 0
<a> while ( length > 0 ) { </a> 0
<a> Component c = components . get ( i ) ; </a> 1
<a> ByteBuf s = c . buf ; </a> 1
<a> int adjustment = c . offset ; </a> 1
<a> int localLength = Math . min ( length , s . capacity ( ) - ( index - adjustment ) ) ; </a> 0
<a> s . getBytes ( index - adjustment , dst , dstIndex , localLength ) ; </a> 0
<a> index += localLength ; </a> 0
<a> dstIndex += localLength ; </a> 0
<a> length -= localLength ; </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> dst . writerIndex ( dst . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( int cIndex ) { </a> 1
<a> <RARE_TOKEN> ( cIndex ) ; </a> 1
<a> return components . get ( cIndex ) . buf ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( int offset ) { </a> 1
<a> return <RARE_TOKEN> ( offset ) . buf ; </a> 1
<a> } </a> 1
<a> private Component <RARE_TOKEN> ( int offset ) { </a> 1
<a> if ( offset < 0 || offset >= capacity ( ) ) { </a> 1
<a> throw new IndexOutOfBoundsException ( String . format ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> (expected: >= 0 && < <RARE_TOKEN> , offset , capacity ( ) ) ) ; </a> 1
<a> } </a> 1
<a> Component c = <RARE_TOKEN> ; </a> 1
<a> if ( c == null ) { </a> 1
<a> <RARE_TOKEN> = c = components . get ( 0 ) ; </a> 1
<a> } </a> 1
<a> if ( offset >= c . offset ) { </a> 1
<a> if ( offset < c . endOffset ) { </a> 1
<a> return c ; </a> 1
<a> } </a> 1
<a> for ( int i = <RARE_TOKEN> + 1 ; i < components . size ( ) ; i ++ ) { </a> 1
<a> c = components . get ( i ) ; </a> 1
<a> if ( offset < c . endOffset ) { </a> 1
<a> <RARE_TOKEN> = i ; </a> 1
<a> <RARE_TOKEN> = c ; </a> 1
<a> return c ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } else { </a> 1
<a> for ( int i = <RARE_TOKEN> - 1 ; i >= 0 ; i -- ) { </a> 1
<a> c = components . get ( i ) ; </a> 1
<a> if ( offset >= c . offset ) { </a> 1
<a> <RARE_TOKEN> = i ; </a> 1
<a> <RARE_TOKEN> = c ; </a> 1
<a> return c ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> throw new IllegalStateException ( <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> - concurrent <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> if ( components . size ( ) == 1 ) { </a> 1
<a> return components . get ( 0 ) . buf . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer nioBuffer ( int index , int length ) { </a> 0
<a> if ( components . size ( ) == 1 ) { </a> 1
<a> return components . get ( 0 ) . buf . nioBuffer ( index , length ) ; </a> 0
<a> } </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> private ByteBuffer <RARE_TOKEN> ( int index , int length ) { </a> 0
<a> if ( components . size ( ) == 1 ) { </a> 1
<a> return <RARE_TOKEN> ( components . get ( 0 ) . buf , index , length ) ; </a> 1
<a> } </a> 0
<a> ByteBuffer [ ] buffers = nioBuffers ( index , length ) ; </a> 0
<a> ByteBuffer <RARE_TOKEN> = ByteBuffer . <RARE_TOKEN> ( length ) . order ( order ( ) ) ; </a> 0
<a> for ( ByteBuffer b : buffers ) { </a> 0
<a> <RARE_TOKEN> . put ( b ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return true ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer [ ] nioBuffers ( int index , int length ) { </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( index ) ; </a> 1
<a> if ( index + length > capacity ( ) ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to <RARE_TOKEN> - <RARE_TOKEN> </a> 0
<a> + ( index + length ) + ", <RARE_TOKEN> is " + capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> List < ByteBuffer > buffers = new ArrayList < ByteBuffer > ( components . size ( ) ) ; </a> 1
<a> int i = <RARE_TOKEN> ; </a> 1
<a> while ( length > 0 ) { </a> 1
<a> Component c = components . get ( i ) ; </a> 1
<a> ByteBuf s = c . buf ; </a> 1
<a> int adjustment = c . offset ; </a> 1
<a> int localLength = Math . min ( length , s . capacity ( ) - ( index - adjustment ) ) ; </a> 1
<a> buffers . add ( <RARE_TOKEN> ( s , index - adjustment , localLength ) ) ; </a> 1
<a> index += localLength ; </a> 0
<a> length -= localLength ; </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> return buffers . <RARE_TOKEN> ( new ByteBuffer [ buffers . size ( ) ] ) ; </a> 0
<a> } </a> 0
<a> private static ByteBuffer <RARE_TOKEN> ( ByteBuf buf , int index , int length ) { </a> 0
<a> if ( buf . <RARE_TOKEN> ( ) ) { </a> 1
<a> return buf . nioBuffer ( index , length ) ; </a> 0
<a> } else { </a> 0
<a> return buf . <RARE_TOKEN> ( index , length ) . nioBuffer ( 0 , length ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> <= 1 ) { </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> final Component last = components . get ( <RARE_TOKEN> - 1 ) ; </a> 1
<a> final int capacity = last . endOffset ; </a> 1
<a> final ByteBuf <RARE_TOKEN> = last . buf . unsafe ( ) . <RARE_TOKEN> ( capacity ) ; </a> 1
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 1
<a> ByteBuf b = components . get ( i ) . buf ; </a> 1
<a> <RARE_TOKEN> . writeBytes ( b ) ; </a> 1
<a> b . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> components . clear ( ) ; </a> 1
<a> components . add ( new Component ( <RARE_TOKEN> ) ) ; </a> 1
<a> <RARE_TOKEN> ( 0 ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int cIndex , int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( cIndex , <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> <= 1 ) { </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> final int <RARE_TOKEN> = cIndex + <RARE_TOKEN> ; </a> 1
<a> final Component last = components . get ( <RARE_TOKEN> - 1 ) ; </a> 1
<a> final int capacity = last . endOffset - components . get ( cIndex ) . offset ; </a> 1
<a> final ByteBuf <RARE_TOKEN> = last . buf . unsafe ( ) . <RARE_TOKEN> ( capacity ) ; </a> 1
<a> for ( int i = cIndex ; i < <RARE_TOKEN> ; i ++ ) { </a> 1
<a> ByteBuf b = components . get ( i ) . buf ; </a> 1
<a> <RARE_TOKEN> . writeBytes ( b ) ; </a> 1
<a> b . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> components . <RARE_TOKEN> ( cIndex + 1 , <RARE_TOKEN> ) . clear ( ) ; </a> 1
<a> components . set ( cIndex , new Component ( <RARE_TOKEN> ) ) ; </a> 1
<a> <RARE_TOKEN> ( cIndex ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final int readerIndex = readerIndex ( ) ; </a> 1
<a> if ( readerIndex == 0 ) { </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> int writerIndex = writerIndex ( ) ; </a> 1
<a> if ( readerIndex == writerIndex && writerIndex == capacity ( ) ) { </a> 1
<a> for ( Component c : components ) { </a> 1
<a> c . buf . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> components . clear ( ) ; </a> 1
<a> <RARE_TOKEN> ( 0 , 0 ) ; </a> 1
<a> <RARE_TOKEN> ( readerIndex ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( readerIndex ) ; </a> 1
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 1
<a> components . get ( i ) . buf . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> components . <RARE_TOKEN> ( 0 , <RARE_TOKEN> ) . clear ( ) ; </a> 1
<a> Component <RARE_TOKEN> = components . get ( 0 ) ; </a> 1
<a> <RARE_TOKEN> ( 0 ) ; </a> 1
<a> <RARE_TOKEN> ( readerIndex - <RARE_TOKEN> . offset , writerIndex - <RARE_TOKEN> . offset ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> . offset ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final int readerIndex = readerIndex ( ) ; </a> 1
<a> if ( readerIndex == 0 ) { </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> int writerIndex = writerIndex ( ) ; </a> 1
<a> if ( readerIndex == writerIndex && writerIndex == capacity ( ) ) { </a> 1
<a> for ( Component c : components ) { </a> 1
<a> c . buf . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> components . clear ( ) ; </a> 1
<a> <RARE_TOKEN> ( 0 , 0 ) ; </a> 1
<a> <RARE_TOKEN> ( readerIndex ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( readerIndex ) ; </a> 1
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 1
<a> components . get ( i ) . buf . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> components . <RARE_TOKEN> ( 0 , <RARE_TOKEN> ) . clear ( ) ; </a> 1
<a> Component c = components . get ( 0 ) ; </a> 1
<a> int adjustment = readerIndex - c . offset ; </a> 1
<a> if ( adjustment == c . length ) { </a> 1
<a> components . remove ( 0 ) ; </a> 1
<a> } else { </a> 1
<a> Component <RARE_TOKEN> = new Component ( c . buf . slice ( adjustment , c . length - adjustment ) ) ; </a> 1
<a> c . buf . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> components . set ( 0 , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( 0 ) ; </a> 1
<a> <RARE_TOKEN> ( 0 , writerIndex - readerIndex ) ; </a> 1
<a> <RARE_TOKEN> ( readerIndex ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> String result = super . toString ( ) ; </a> 0
<a> result = result . substring ( 0 , result . length ( ) - 1 ) ; </a> 0
<a> return result + ", <RARE_TOKEN> + components . size ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> private static final class Component { </a> 1
<a> final ByteBuf buf ; </a> 1
<a> final int length ; </a> 1
<a> int offset ; </a> 1
<a> int endOffset ; </a> 1
<a> Component ( ByteBuf buf ) { </a> 1
<a> this . buf = buf ; </a> 1
<a> length = buf . readableBytes ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public <RARE_TOKEN> unsafe ( ) { </a> 1
<a> return unsafe ; </a> 1
<a> } </a> 1
<a> private final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer nioBuffer ( ) { </a> 1
<a> if ( components . size ( ) == 1 ) { </a> 1
<a> return components . get ( 0 ) . buf . unsafe ( ) . nioBuffer ( ) ; </a> 1
<a> } </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer [ ] nioBuffers ( ) { </a> 1
<a> ByteBuffer [ ] nioBuffers = new ByteBuffer [ components . size ( ) ] ; </a> 1
<a> int index = 0 ; </a> 1
<a> for ( Component <RARE_TOKEN> : components ) { </a> 1
<a> nioBuffers [ index ++ ] = <RARE_TOKEN> . buf . unsafe ( ) . nioBuffer ( ) ; </a> 1
<a> } </a> 1
<a> return nioBuffers ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> buf = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> buf . <RARE_TOKEN> ( new <RARE_TOKEN> ( new byte [ <RARE_TOKEN> ] , <RARE_TOKEN> ) ) ; </a> 1
<a> return buf ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 1
<a> throw new IllegalStateException ( ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ++ ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 1
<a> throw new IllegalStateException ( ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> -- ; </a> 1
<a> if ( <RARE_TOKEN> == 0 ) { </a> 1
<a> for ( Component c : components ) { </a> 1
<a> c . buf . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> components . clear ( ) ; </a> 1
<a> <RARE_TOKEN> = null ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer [ ] nioBuffers ( ) { </a> 1
<a> return nioBuffers ( readerIndex ( ) , readableBytes ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public class <RARE_TOKEN> < T > extends <RARE_TOKEN> < T > implements MessageBuf < T > { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { } </a> 0
<a> public <RARE_TOKEN> ( Collection < ? extends T > c ) { </a> 0
<a> super ( c ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelBufType type ( ) { </a> 1
<a> return ChannelBufType . <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( Collection < ? super T > c ) { </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> T o = poll ( ) ; </a> 0
<a> if ( o == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 1
<a> c . add ( o ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( Collection < ? super T > c , int <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> while ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> T o = poll ( ) ; </a> 0
<a> if ( o == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 1
<a> c . add ( o ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import java . nio . ByteBuffer ; </a> 1
<a> import java . nio . ByteOrder ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import sun . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private static final <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> static { </a> 1
<a> ByteBuffer <RARE_TOKEN> = ByteBuffer . <RARE_TOKEN> ( 1 ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> . getClass ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> <RARE_TOKEN> = null ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> private static void <RARE_TOKEN> ( ByteBuffer buffer ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . get ( buffer ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private final <RARE_TOKEN> unsafe = new <RARE_TOKEN> ( ) ; </a> 1
<a> private boolean <RARE_TOKEN> ; </a> 1
<a> private ByteBuffer buffer ; </a> 1
<a> private ByteBuffer <RARE_TOKEN> ; </a> 1
<a> private int capacity ; </a> 1
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , int maxCapacity ) { </a> 1
<a> super ( ByteOrder . <RARE_TOKEN> , maxCapacity ) ; </a> 1
<a> if ( <RARE_TOKEN> < 0 ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( maxCapacity < 0 ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + maxCapacity ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> > maxCapacity ) { </a> 1
<a> throw new IllegalArgumentException ( String . format ( </a> 1
<a> <RARE_TOKEN> > <RARE_TOKEN> , <RARE_TOKEN> , maxCapacity ) ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( ByteBuffer . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( ByteBuffer <RARE_TOKEN> , int maxCapacity ) { </a> 1
<a> super ( ByteOrder . <RARE_TOKEN> , maxCapacity ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> is not a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> is a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> > maxCapacity ) { </a> 1
<a> throw new IllegalArgumentException ( String . format ( </a> 1
<a> <RARE_TOKEN> > <RARE_TOKEN> , <RARE_TOKEN> , maxCapacity ) ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> . slice ( ) . order ( ByteOrder . <RARE_TOKEN> ) ) ; </a> 1
<a> writerIndex ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( ByteBuffer buffer ) { </a> 1
<a> ByteBuffer <RARE_TOKEN> = this . buffer ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = false ; </a> 1
<a> } else { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> this . buffer = buffer ; </a> 1
<a> <RARE_TOKEN> = buffer . <RARE_TOKEN> ( ) ; </a> 1
<a> capacity = buffer . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return true ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int capacity ( ) { </a> 1
<a> return capacity ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void capacity ( int newCapacity ) { </a> 0
<a> if ( newCapacity < 0 || newCapacity > maxCapacity ( ) ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + newCapacity ) ; </a> 1
<a> } </a> 1
<a> int readerIndex = readerIndex ( ) ; </a> 1
<a> int writerIndex = writerIndex ( ) ; </a> 1
<a> int <RARE_TOKEN> = capacity ; </a> 1
<a> if ( newCapacity > <RARE_TOKEN> ) { </a> 1
<a> ByteBuffer <RARE_TOKEN> = buffer ; </a> 1
<a> ByteBuffer <RARE_TOKEN> = ByteBuffer . <RARE_TOKEN> ( newCapacity ) ; </a> 1
<a> <RARE_TOKEN> . position ( readerIndex ) . limit ( writerIndex ) ; </a> 1
<a> <RARE_TOKEN> . position ( readerIndex ) . limit ( writerIndex ) ; </a> 1
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . clear ( ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } else if ( newCapacity < <RARE_TOKEN> ) { </a> 1
<a> ByteBuffer <RARE_TOKEN> = buffer ; </a> 1
<a> ByteBuffer <RARE_TOKEN> = ByteBuffer . <RARE_TOKEN> ( newCapacity ) ; </a> 1
<a> if ( readerIndex < newCapacity ) { </a> 1
<a> if ( writerIndex > newCapacity ) { </a> 1
<a> writerIndex ( writerIndex = newCapacity ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . position ( readerIndex ) . limit ( writerIndex ) ; </a> 1
<a> <RARE_TOKEN> . position ( readerIndex ) . limit ( writerIndex ) ; </a> 1
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . clear ( ) ; </a> 1
<a> } else { </a> 1
<a> <RARE_TOKEN> ( newCapacity , newCapacity ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte [ ] array ( ) { </a> 0
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public byte getByte ( int index ) { </a> 0
<a> return buffer . get ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( int index ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> return ( getByte ( index ) & 0xff ) < < 16 | ( getByte ( index + 1 ) & 0xff ) < < 8 | </a> 0
<a> ( getByte ( index + 2 ) & 0xff ) < < 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getInt ( int index ) { </a> 0
<a> return buffer . getInt ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getLong ( int index ) { </a> 0
<a> return buffer . getLong ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuf dst , int dstIndex , int length ) { </a> 0
<a> if ( dst instanceof <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) dst ; </a> 1
<a> ByteBuffer data = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> data . clear ( ) . position ( dstIndex ) . limit ( dstIndex + length ) ; </a> 1
<a> getBytes ( index , data ) ; </a> 1
<a> } else if ( buffer . <RARE_TOKEN> ( ) ) { </a> 1
<a> dst . setBytes ( dstIndex , buffer . array ( ) , index + buffer . <RARE_TOKEN> ( ) , length ) ; </a> 1
<a> } else { </a> 0
<a> dst . setBytes ( dstIndex , this , index , length ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void getBytes ( int index , byte [ ] dst , int dstIndex , int length ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . clear ( ) . position ( index ) . limit ( index + length ) ; </a> 0
<a> } catch ( IllegalArgumentException e ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to read - <RARE_TOKEN> " + </a> 1
<a> ( index + length ) + ", <RARE_TOKEN> is " + buffer . limit ( ) ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . get ( dst , dstIndex , length ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void getBytes ( int index , ByteBuffer dst ) { </a> 0
<a> int <RARE_TOKEN> = Math . min ( capacity ( ) - index , dst . <RARE_TOKEN> ( ) ) ; </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> . clear ( ) . position ( index ) . limit ( index + <RARE_TOKEN> ) ; </a> 1
<a> } catch ( IllegalArgumentException e ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to read - <RARE_TOKEN> " + </a> 1
<a> ( index + <RARE_TOKEN> ) + ", <RARE_TOKEN> is " + buffer . limit ( ) ) ; </a> 1
<a> } </a> 1
<a> dst . put ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setByte ( int index , int value ) { </a> 0
<a> buffer . put ( index , ( byte ) value ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> buffer . <RARE_TOKEN> ( index , ( short ) value ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> setByte ( index , ( byte ) ( value > > > 16 ) ) ; </a> 1
<a> setByte ( index + 1 , ( byte ) ( value > > > 8 ) ) ; </a> 1
<a> setByte ( index + 2 , ( byte ) ( value > > > 0 ) ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> buffer . <RARE_TOKEN> ( index , value ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int index , long value ) { </a> 0
<a> buffer . <RARE_TOKEN> ( index , value ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setBytes ( int index , ByteBuf src , int srcIndex , int length ) { </a> 0
<a> if ( src instanceof <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) src ; </a> 1
<a> ByteBuffer data = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> data . clear ( ) . position ( srcIndex ) . limit ( srcIndex + length ) ; </a> 0
<a> setBytes ( index , data ) ; </a> 0
<a> } else if ( buffer . <RARE_TOKEN> ( ) ) { </a> 0
<a> src . getBytes ( srcIndex , buffer . array ( ) , index + buffer . <RARE_TOKEN> ( ) , length ) ; </a> 0
<a> } else { </a> 0
<a> src . getBytes ( srcIndex , this , index , length ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setBytes ( int index , byte [ ] src , int srcIndex , int length ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) . position ( index ) . limit ( index + length ) ; </a> 1
<a> <RARE_TOKEN> . put ( src , srcIndex , length ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setBytes ( int index , ByteBuffer src ) { </a> 0
<a> if ( src == <RARE_TOKEN> ) { </a> 0
<a> src = src . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . clear ( ) . position ( index ) . limit ( index + src . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . put ( src ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void getBytes ( int index , OutputStream out , int length ) throws IOException { </a> 0
<a> if ( length == 0 ) { </a> 1
<a> return ; </a> 0
<a> } </a> 1
<a> if ( buffer . <RARE_TOKEN> ( ) ) { </a> 1
<a> out . write ( buffer . array ( ) , index + buffer . <RARE_TOKEN> ( ) , length ) ; </a> 1
<a> } else { </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ length ] ; </a> 0
<a> <RARE_TOKEN> . clear ( ) . position ( index ) ; </a> 0
<a> <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 0
<a> out . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getBytes ( int index , <RARE_TOKEN> out , int length ) throws IOException { </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . clear ( ) . position ( index ) . limit ( index + length ) ; </a> 0
<a> return out . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int setBytes ( int index , InputStream in , int length ) throws IOException { </a> 1
<a> if ( buffer . <RARE_TOKEN> ( ) ) { </a> 0
<a> return in . read ( buffer . array ( ) , buffer . <RARE_TOKEN> ( ) + index , length ) ; </a> 0
<a> } else { </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ length ] ; </a> 0
<a> int readBytes = in . read ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . clear ( ) . position ( index ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> ) ; </a> 0
<a> return readBytes ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int setBytes ( int index , <RARE_TOKEN> in , int length ) throws IOException { </a> 1
<a> <RARE_TOKEN> . clear ( ) . position ( index ) . limit ( index + length ) ; </a> 0
<a> try { </a> 0
<a> return in . read ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return true ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuffer nioBuffer ( int index , int length ) { </a> 0
<a> if ( index == 0 && length == capacity ( ) ) { </a> 1
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 1
<a> } else { </a> 1
<a> return ( ( ByteBuffer ) <RARE_TOKEN> . clear ( ) . position ( index ) . limit ( index + length ) ) . slice ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer [ ] nioBuffers ( int offset , int length ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( int index , int length ) { </a> 1
<a> ByteBuffer src ; </a> 1
<a> try { </a> 1
<a> src = ( ByteBuffer ) <RARE_TOKEN> . clear ( ) . position ( index ) . limit ( index + length ) ; </a> 1
<a> } catch ( IllegalArgumentException e ) { </a> 1
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> bytes to read - <RARE_TOKEN> " + ( index + length ) ) ; </a> 1
<a> } </a> 1
<a> ByteBuffer dst = </a> 1
<a> src . <RARE_TOKEN> ( ) ? ByteBuffer . <RARE_TOKEN> ( length ) : ByteBuffer . <RARE_TOKEN> ( length ) ; </a> 1
<a> dst . put ( src ) ; </a> 1
<a> dst . order ( order ( ) ) ; </a> 1
<a> dst . clear ( ) ; </a> 1
<a> return new <RARE_TOKEN> ( dst , maxCapacity ( ) ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public <RARE_TOKEN> unsafe ( ) { </a> 1
<a> return unsafe ; </a> 1
<a> } </a> 1
<a> private class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer nioBuffer ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer [ ] nioBuffers ( ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> , Math . <RARE_TOKEN> ( <RARE_TOKEN> , maxCapacity ( ) ) ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> final int readerIndex = readerIndex ( ) ; </a> 1
<a> if ( readerIndex == writerIndex ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> if ( readerIndex > 0 && readerIndex >= capacity > > > 1 ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 1
<a> throw new IllegalStateException ( ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ++ ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 1
<a> throw new IllegalStateException ( ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> -- ; </a> 1
<a> if ( <RARE_TOKEN> == 0 ) { </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = false ; </a> 1
<a> } else { </a> 1
<a> <RARE_TOKEN> ( buffer ) ; </a> 1
<a> } </a> 1
<a> buffer = null ; </a> 1
<a> <RARE_TOKEN> = null ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> unsafe = new <RARE_TOKEN> ( ) ; </a> 1
<a> final ByteBuf buffer ; </a> 1
<a> public <RARE_TOKEN> ( ByteBuf buffer ) { </a> 1
<a> super ( buffer . order ( ) , buffer . maxCapacity ( ) ) ; </a> 1
<a> if ( buffer instanceof <RARE_TOKEN> ) { </a> 0
<a> this . buffer = ( ( <RARE_TOKEN> ) buffer ) . buffer ; </a> 0
<a> } else { </a> 0
<a> this . buffer = buffer ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( buffer . readerIndex ( ) , buffer . writerIndex ( ) ) ; </a> 0
<a> buffer . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int capacity ( ) { </a> 0
<a> return buffer . capacity ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void capacity ( int newCapacity ) { </a> 0
<a> buffer . capacity ( newCapacity ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte [ ] array ( ) { </a> 0
<a> return buffer . array ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte getByte ( int index ) { </a> 0
<a> return buffer . getByte ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( int index ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getInt ( int index ) { </a> 0
<a> return buffer . getInt ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getLong ( int index ) { </a> 0
<a> return buffer . getLong ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( int index , int length ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( index , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf slice ( int index , int length ) { </a> 0
<a> return buffer . slice ( index , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuf dst , int dstIndex , int length ) { </a> 0
<a> buffer . getBytes ( index , dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , byte [ ] dst , int dstIndex , int length ) { </a> 0
<a> buffer . getBytes ( index , dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuffer dst ) { </a> 0
<a> buffer . getBytes ( index , dst ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setByte ( int index , int value ) { </a> 0
<a> buffer . setByte ( index , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> buffer . <RARE_TOKEN> ( index , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> buffer . <RARE_TOKEN> ( index , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> buffer . <RARE_TOKEN> ( index , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , long value ) { </a> 0
<a> buffer . <RARE_TOKEN> ( index , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , byte [ ] src , int srcIndex , int length ) { </a> 0
<a> buffer . setBytes ( index , src , srcIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuf src , int srcIndex , int length ) { </a> 0
<a> buffer . setBytes ( index , src , srcIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuffer src ) { </a> 0
<a> buffer . setBytes ( index , src ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , OutputStream out , int length ) </a> 0
<a> throws IOException { </a> 0
<a> buffer . getBytes ( index , out , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getBytes ( int index , <RARE_TOKEN> out , int length ) </a> 0
<a> throws IOException { </a> 0
<a> return buffer . getBytes ( index , out , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int setBytes ( int index , InputStream in , int length ) </a> 0
<a> throws IOException { </a> 0
<a> return buffer . setBytes ( index , in , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int setBytes ( int index , <RARE_TOKEN> in , int length ) </a> 0
<a> throws IOException { </a> 0
<a> return buffer . setBytes ( index , in , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuffer nioBuffer ( int index , int length ) { </a> 0
<a> return buffer . nioBuffer ( index , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer [ ] nioBuffers ( int offset , int length ) { </a> 1
<a> return buffer . nioBuffers ( offset , length ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> unsafe ( ) { </a> 1
<a> return unsafe ; </a> 1
<a> } </a> 0
<a> private final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> @ Override </a> 0
<a> public ByteBuffer nioBuffer ( ) { </a> 1
<a> return buffer . unsafe ( ) . nioBuffer ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer [ ] nioBuffers ( ) { </a> 1
<a> return buffer . unsafe ( ) . nioBuffers ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> return buffer . unsafe ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> buffer . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> buffer . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . util . Collection ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> public interface MessageBuf < T > extends <RARE_TOKEN> , <RARE_TOKEN> < T > { </a> 1
<a> int <RARE_TOKEN> ( Collection < ? super T > c ) ; </a> 1
<a> int <RARE_TOKEN> ( Collection < ? super T > c , int <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . util . Collection ; </a> 1
<a> import java . util . Iterator ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> < T > implements MessageBuf < T > { </a> 0
<a> private final <RARE_TOKEN> < T > queue ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> < T > queue ) { </a> 0
<a> if ( queue == null ) { </a> 1
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> this . queue = queue ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelBufType type ( ) { </a> 1
<a> return ChannelBufType . <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean add ( T e ) { </a> 0
<a> return queue . add ( e ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( T e ) { </a> 1
<a> return queue . <RARE_TOKEN> ( e ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public T remove ( ) { </a> 0
<a> return queue . remove ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public T poll ( ) { </a> 1
<a> return queue . poll ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public T <RARE_TOKEN> ( ) { </a> 0
<a> return queue . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public T <RARE_TOKEN> ( ) { </a> 1
<a> return queue . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int size ( ) { </a> 1
<a> return queue . size ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean isEmpty ( ) { </a> 1
<a> return queue . isEmpty ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean contains ( Object o ) { </a> 1
<a> return queue . contains ( o ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public Iterator < T > <RARE_TOKEN> ( ) { </a> 1
<a> return queue . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public Object [ ] <RARE_TOKEN> ( ) { </a> 1
<a> return queue . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public < E > E [ ] <RARE_TOKEN> ( E [ ] a ) { </a> 1
<a> return queue . <RARE_TOKEN> ( a ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean remove ( Object o ) { </a> 1
<a> return queue . remove ( o ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( Collection < ? > c ) { </a> 1
<a> return queue . <RARE_TOKEN> ( c ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( Collection < ? extends T > c ) { </a> 1
<a> return queue . <RARE_TOKEN> ( c ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( Collection < ? > c ) { </a> 1
<a> return queue . <RARE_TOKEN> ( c ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( Collection < ? > c ) { </a> 1
<a> return queue . <RARE_TOKEN> ( c ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void clear ( ) { </a> 1
<a> queue . clear ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( Collection < ? super T > c ) { </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> T o = poll ( ) ; </a> 1
<a> if ( o == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> c . add ( o ) ; </a> 1
<a> <RARE_TOKEN> ++ ; </a> 1
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( Collection < ? super T > c , int <RARE_TOKEN> ) { </a> 1
<a> int <RARE_TOKEN> = 0 ; </a> 1
<a> while ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 1
<a> T o = poll ( ) ; </a> 1
<a> if ( o == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> c . add ( o ) ; </a> 1
<a> <RARE_TOKEN> ++ ; </a> 1
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String toString ( ) { </a> 0
<a> return queue . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> unsafe = new <RARE_TOKEN> ( ) ; </a> 1
<a> private final ByteBuf buffer ; </a> 1
<a> private final int adjustment ; </a> 0
<a> private final int length ; </a> 0
<a> public <RARE_TOKEN> ( ByteBuf buffer , int index , int length ) { </a> 1
<a> super ( buffer . order ( ) , length ) ; </a> 1
<a> if ( index < 0 || index > buffer . capacity ( ) ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> index of " + index </a> 0
<a> + ", <RARE_TOKEN> is " + buffer . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( index + length > buffer . capacity ( ) ) { </a> 0
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> index of " </a> 0
<a> + ( index + length ) + ", <RARE_TOKEN> is " + buffer . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( buffer instanceof <RARE_TOKEN> ) { </a> 0
<a> this . buffer = ( ( <RARE_TOKEN> ) buffer ) . buffer ; </a> 0
<a> adjustment = ( ( <RARE_TOKEN> ) buffer ) . adjustment + index ; </a> 0
<a> } else if ( buffer instanceof <RARE_TOKEN> ) { </a> 0
<a> this . buffer = ( ( <RARE_TOKEN> ) buffer ) . buffer ; </a> 1
<a> adjustment = index ; </a> 0
<a> } else { </a> 0
<a> this . buffer = buffer ; </a> 0
<a> adjustment = index ; </a> 0
<a> } </a> 0
<a> this . length = length ; </a> 0
<a> writerIndex ( length ) ; </a> 0
<a> buffer . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int capacity ( ) { </a> 0
<a> return length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void capacity ( int newCapacity ) { </a> 0
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte [ ] array ( ) { </a> 0
<a> return buffer . array ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( ) + adjustment ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte getByte ( int index ) { </a> 0
<a> checkIndex ( index ) ; </a> 0
<a> return buffer . getByte ( index + adjustment ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 2 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index + adjustment ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 3 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index + adjustment ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getInt ( int index ) { </a> 0
<a> checkIndex ( index , 4 ) ; </a> 0
<a> return buffer . getInt ( index + adjustment ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getLong ( int index ) { </a> 0
<a> checkIndex ( index , 8 ) ; </a> 0
<a> return buffer . getLong ( index + adjustment ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf <RARE_TOKEN> = new <RARE_TOKEN> ( buffer , adjustment , length ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( readerIndex ( ) , writerIndex ( ) ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( int index , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index + adjustment , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf slice ( int index , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return Unpooled . EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> return new <RARE_TOKEN> ( buffer , index + adjustment , length ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuf dst , int dstIndex , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> buffer . getBytes ( index + adjustment , dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , byte [ ] dst , int dstIndex , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> buffer . getBytes ( index + adjustment , dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuffer dst ) { </a> 0
<a> checkIndex ( index , dst . <RARE_TOKEN> ( ) ) ; </a> 0
<a> buffer . getBytes ( index + adjustment , dst ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setByte ( int index , int value ) { </a> 0
<a> checkIndex ( index ) ; </a> 0
<a> buffer . setByte ( index + adjustment , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> checkIndex ( index , 2 ) ; </a> 0
<a> buffer . <RARE_TOKEN> ( index + adjustment , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> checkIndex ( index , 3 ) ; </a> 0
<a> buffer . <RARE_TOKEN> ( index + adjustment , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> checkIndex ( index , 4 ) ; </a> 0
<a> buffer . <RARE_TOKEN> ( index + adjustment , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , long value ) { </a> 0
<a> checkIndex ( index , 8 ) ; </a> 0
<a> buffer . <RARE_TOKEN> ( index + adjustment , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , byte [ ] src , int srcIndex , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> buffer . setBytes ( index + adjustment , src , srcIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuf src , int srcIndex , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> buffer . setBytes ( index + adjustment , src , srcIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuffer src ) { </a> 0
<a> checkIndex ( index , src . <RARE_TOKEN> ( ) ) ; </a> 0
<a> buffer . setBytes ( index + adjustment , src ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , OutputStream out , int length ) </a> 0
<a> throws IOException { </a> 1
<a> checkIndex ( index , length ) ; </a> 0
<a> buffer . getBytes ( index + adjustment , out , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getBytes ( int index , <RARE_TOKEN> out , int length ) </a> 1
<a> throws IOException { </a> 1
<a> checkIndex ( index , length ) ; </a> 0
<a> return buffer . getBytes ( index + adjustment , out , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int setBytes ( int index , InputStream in , int length ) </a> 1
<a> throws IOException { </a> 1
<a> checkIndex ( index , length ) ; </a> 0
<a> return buffer . setBytes ( index + adjustment , in , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int setBytes ( int index , <RARE_TOKEN> in , int length ) </a> 1
<a> throws IOException { </a> 1
<a> checkIndex ( index , length ) ; </a> 0
<a> return buffer . setBytes ( index + adjustment , in , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuffer nioBuffer ( int index , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> return buffer . nioBuffer ( index + adjustment , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer [ ] nioBuffers ( int index , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> return buffer . nioBuffers ( index , length ) ; </a> 0
<a> } </a> 0
<a> private void checkIndex ( int index ) { </a> 1
<a> if ( index < 0 || index >= capacity ( ) ) { </a> 1
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> " + index </a> 1
<a> + ", <RARE_TOKEN> is " + capacity ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private void checkIndex ( int <RARE_TOKEN> , int length ) { </a> 1
<a> if ( length < 0 ) { </a> 1
<a> throw new IllegalArgumentException ( </a> 1
<a> <RARE_TOKEN> is <RARE_TOKEN> " + length ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> < 0 ) { </a> 1
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> + length > capacity ( ) ) { </a> 1
<a> throw new IndexOutOfBoundsException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> - <RARE_TOKEN> <RARE_TOKEN> " </a> 1
<a> + ( <RARE_TOKEN> + length ) + ", <RARE_TOKEN> is " + capacity ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public <RARE_TOKEN> unsafe ( ) { </a> 1
<a> return unsafe ; </a> 1
<a> } </a> 1
<a> private final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer nioBuffer ( ) { </a> 1
<a> return buffer . nioBuffer ( adjustment , length ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuffer [ ] nioBuffers ( ) { </a> 1
<a> return buffer . nioBuffers ( adjustment , length ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> return buffer . unsafe ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> buffer . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> buffer . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . ByteOrder ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . Charset ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> private final ByteBuf buf ; </a> 1
<a> private final ByteOrder order ; </a> 0
<a> public <RARE_TOKEN> ( ByteBuf buf ) { </a> 1
<a> if ( buf == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . buf = buf ; </a> 0
<a> if ( buf . order ( ) == ByteOrder . <RARE_TOKEN> ) { </a> 0
<a> order = ByteOrder . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> order = ByteOrder . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteOrder order ( ) { </a> 0
<a> return order ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf order ( ByteOrder <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == order ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> return buf ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> return buf ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return buf . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelBufType type ( ) { </a> 1
<a> return ChannelBufType . <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int capacity ( ) { </a> 0
<a> return buf . capacity ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void capacity ( int newCapacity ) { </a> 0
<a> buf . capacity ( newCapacity ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int maxCapacity ( ) { </a> 0
<a> return buf . maxCapacity ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int readerIndex ( ) { </a> 0
<a> return buf . readerIndex ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readerIndex ( int readerIndex ) { </a> 0
<a> buf . readerIndex ( readerIndex ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int writerIndex ( ) { </a> 0
<a> return buf . writerIndex ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writerIndex ( int writerIndex ) { </a> 0
<a> buf . writerIndex ( writerIndex ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int readerIndex , int writerIndex ) { </a> 0
<a> buf . <RARE_TOKEN> ( readerIndex , writerIndex ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int readableBytes ( ) { </a> 0
<a> return buf . readableBytes ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean readable ( ) { </a> 0
<a> return buf . readable ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> buf . clear ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> buf . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> return buf . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( int index ) { </a> 0
<a> return buf . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte getByte ( int index ) { </a> 0
<a> return buf . getByte ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( int index ) { </a> 0
<a> return buf . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( int index ) { </a> 0
<a> return ByteBufUtil . <RARE_TOKEN> ( buf . <RARE_TOKEN> ( index ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> return <RARE_TOKEN> ( index ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> return ByteBufUtil . <RARE_TOKEN> ( buf . <RARE_TOKEN> ( index ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> return <RARE_TOKEN> ( index ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getInt ( int index ) { </a> 0
<a> return ByteBufUtil . <RARE_TOKEN> ( buf . getInt ( index ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( int index ) { </a> 0
<a> return getInt ( index ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getLong ( int index ) { </a> 0
<a> return ByteBufUtil . <RARE_TOKEN> ( buf . getLong ( index ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public char <RARE_TOKEN> ( int index ) { </a> 0
<a> return ( char ) <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public float <RARE_TOKEN> ( int index ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( getInt ( index ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public double <RARE_TOKEN> ( int index ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( getLong ( index ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuf dst ) { </a> 0
<a> buf . getBytes ( index , dst ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuf dst , int length ) { </a> 0
<a> buf . getBytes ( index , dst , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuf dst , int dstIndex , int length ) { </a> 0
<a> buf . getBytes ( index , dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , byte [ ] dst ) { </a> 0
<a> buf . getBytes ( index , dst ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , byte [ ] dst , int dstIndex , int length ) { </a> 0
<a> buf . getBytes ( index , dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuffer dst ) { </a> 0
<a> buf . getBytes ( index , dst ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , OutputStream out , int length ) throws IOException { </a> 0
<a> buf . getBytes ( index , out , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getBytes ( int index , <RARE_TOKEN> out , int length ) throws IOException { </a> 0
<a> return buf . getBytes ( index , out , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , boolean value ) { </a> 0
<a> buf . <RARE_TOKEN> ( index , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setByte ( int index , int value ) { </a> 0
<a> buf . setByte ( index , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> buf . <RARE_TOKEN> ( index , ByteBufUtil . <RARE_TOKEN> ( ( short ) value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> buf . <RARE_TOKEN> ( index , ByteBufUtil . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> buf . <RARE_TOKEN> ( index , ByteBufUtil . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , long value ) { </a> 0
<a> buf . <RARE_TOKEN> ( index , ByteBufUtil . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> <RARE_TOKEN> ( index , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , float value ) { </a> 0
<a> <RARE_TOKEN> ( index , <RARE_TOKEN> . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , double value ) { </a> 0
<a> <RARE_TOKEN> ( index , <RARE_TOKEN> . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuf src ) { </a> 0
<a> buf . setBytes ( index , src ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuf src , int length ) { </a> 0
<a> buf . setBytes ( index , src , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuf src , int srcIndex , int length ) { </a> 0
<a> buf . setBytes ( index , src , srcIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , byte [ ] src ) { </a> 0
<a> buf . setBytes ( index , src ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , byte [ ] src , int srcIndex , int length ) { </a> 0
<a> buf . setBytes ( index , src , srcIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuffer src ) { </a> 0
<a> buf . setBytes ( index , src ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int setBytes ( int index , InputStream in , int length ) throws IOException { </a> 0
<a> return buf . setBytes ( index , in , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int setBytes ( int index , <RARE_TOKEN> in , int length ) throws IOException { </a> 0
<a> return buf . setBytes ( index , in , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int length ) { </a> 0
<a> buf . <RARE_TOKEN> ( index , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte <RARE_TOKEN> ( ) { </a> 0
<a> return buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( ) { </a> 0
<a> return buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( ) { </a> 0
<a> return ByteBufUtil . <RARE_TOKEN> ( buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return ByteBufUtil . <RARE_TOKEN> ( buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return ByteBufUtil . <RARE_TOKEN> ( buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) & <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return ByteBufUtil . <RARE_TOKEN> ( buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public char <RARE_TOKEN> ( ) { </a> 0
<a> return ( char ) <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public float <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public double <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf readBytes ( int length ) { </a> 0
<a> return buf . readBytes ( length ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( int length ) { </a> 0
<a> return buf . <RARE_TOKEN> ( length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuf dst ) { </a> 0
<a> buf . readBytes ( dst ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuf dst , int length ) { </a> 0
<a> buf . readBytes ( dst , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuf dst , int dstIndex , int length ) { </a> 0
<a> buf . readBytes ( dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( byte [ ] dst ) { </a> 0
<a> buf . readBytes ( dst ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( byte [ ] dst , int dstIndex , int length ) { </a> 0
<a> buf . readBytes ( dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuffer dst ) { </a> 0
<a> buf . readBytes ( dst ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( OutputStream out , int length ) throws IOException { </a> 0
<a> buf . readBytes ( out , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int readBytes ( <RARE_TOKEN> out , int length ) throws IOException { </a> 0
<a> return buf . readBytes ( out , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void skipBytes ( int length ) { </a> 0
<a> buf . skipBytes ( length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean value ) { </a> 0
<a> buf . <RARE_TOKEN> ( value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeByte ( int value ) { </a> 0
<a> buf . writeByte ( value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int value ) { </a> 0
<a> buf . <RARE_TOKEN> ( ByteBufUtil . <RARE_TOKEN> ( ( short ) value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int value ) { </a> 0
<a> buf . <RARE_TOKEN> ( ByteBufUtil . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeInt ( int value ) { </a> 0
<a> buf . writeInt ( ByteBufUtil . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( long value ) { </a> 0
<a> buf . <RARE_TOKEN> ( ByteBufUtil . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int value ) { </a> 0
<a> <RARE_TOKEN> ( value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( float value ) { </a> 0
<a> writeInt ( <RARE_TOKEN> . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( double value ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( value ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuf src ) { </a> 0
<a> buf . writeBytes ( src ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuf src , int length ) { </a> 0
<a> buf . writeBytes ( src , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuf src , int srcIndex , int length ) { </a> 0
<a> buf . writeBytes ( src , srcIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( byte [ ] src ) { </a> 0
<a> buf . writeBytes ( src ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( byte [ ] src , int srcIndex , int length ) { </a> 0
<a> buf . writeBytes ( src , srcIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuffer src ) { </a> 0
<a> buf . writeBytes ( src ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int writeBytes ( InputStream in , int length ) throws IOException { </a> 0
<a> return buf . writeBytes ( in , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int writeBytes ( <RARE_TOKEN> in , int length ) throws IOException { </a> 0
<a> return buf . writeBytes ( in , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int length ) { </a> 0
<a> buf . <RARE_TOKEN> ( length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int indexOf ( int fromIndex , int <RARE_TOKEN> , byte value ) { </a> 0
<a> return buf . indexOf ( fromIndex , <RARE_TOKEN> , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int indexOf ( int fromIndex , int <RARE_TOKEN> , ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> return buf . indexOf ( fromIndex , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( byte value ) { </a> 0
<a> return buf . bytesBefore ( value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> return buf . bytesBefore ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( int length , byte value ) { </a> 0
<a> return buf . bytesBefore ( length , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( int length , ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> return buf . bytesBefore ( length , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( int index , int length , byte value ) { </a> 0
<a> return buf . bytesBefore ( index , length , value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( int index , int length , ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> return buf . bytesBefore ( index , length , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> return buf . <RARE_TOKEN> ( ) . order ( order ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( int index , int length ) { </a> 0
<a> return buf . <RARE_TOKEN> ( index , length ) . order ( order ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf slice ( ) { </a> 0
<a> return buf . slice ( ) . order ( order ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf slice ( int index , int length ) { </a> 0
<a> return buf . slice ( index , length ) . order ( order ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> return buf . <RARE_TOKEN> ( ) . order ( order ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return buf . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuffer nioBuffer ( ) { </a> 0
<a> return buf . nioBuffer ( ) . order ( order ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuffer nioBuffer ( int index , int length ) { </a> 0
<a> return buf . nioBuffer ( index , length ) . order ( order ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return buf . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer [ ] nioBuffers ( ) { </a> 0
<a> ByteBuffer [ ] nioBuffers = buf . nioBuffers ( ) ; </a> 0
<a> for ( int i = 0 ; i < nioBuffers . length ; i ++ ) { </a> 0
<a> nioBuffers [ i ] = nioBuffers [ i ] . order ( order ) ; </a> 0
<a> } </a> 0
<a> return nioBuffers ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuffer [ ] nioBuffers ( int offset , int length ) { </a> 1
<a> ByteBuffer [ ] nioBuffers = buf . nioBuffers ( offset , length ) ; </a> 1
<a> for ( int i = 0 ; i < nioBuffers . length ; i ++ ) { </a> 0
<a> nioBuffers [ i ] = nioBuffers [ i ] . order ( order ) ; </a> 0
<a> } </a> 0
<a> return nioBuffers ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte [ ] array ( ) { </a> 0
<a> return buf . array ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( Charset charset ) { </a> 0
<a> return buf . toString ( charset ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( int index , int length , Charset charset ) { </a> 0
<a> return buf . toString ( index , length , charset ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> unsafe ( ) { </a> 1
<a> return buf . unsafe ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int hashCode ( ) { </a> 0
<a> return buf . hashCode ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object obj ) { </a> 0
<a> if ( this == obj ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( obj instanceof ByteBuf ) { </a> 0
<a> return ByteBufUtil . equals ( this , ( ByteBuf ) obj ) ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> return ByteBufUtil . <RARE_TOKEN> ( this , buffer ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> + buf . toString ( ) + <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 1
<a> import java . nio . ByteOrder ; </a> 1
<a> import java . nio . <RARE_TOKEN> ; </a> 1
<a> import java . nio . charset . Charset ; </a> 1
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> public final class Unpooled { </a> 0
<a> public static final ByteOrder <RARE_TOKEN> = ByteOrder . <RARE_TOKEN> ; </a> 0
<a> public static final ByteOrder <RARE_TOKEN> = ByteOrder . <RARE_TOKEN> ; </a> 0
<a> public static final ByteBuf EMPTY_BUFFER = new <RARE_TOKEN> ( 0 , 0 ) { </a> 1
<a> @ Override </a> 1
<a> public ByteBuf order ( ByteOrder <RARE_TOKEN> ) { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> public static < T > MessageBuf < T > <RARE_TOKEN> ( ) { </a> 1
<a> return new <RARE_TOKEN> < T > ( ) ; </a> 1
<a> } </a> 1
<a> public static < T > MessageBuf < T > <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> return new <RARE_TOKEN> < T > ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static < T > MessageBuf < T > wrappedBuffer ( <RARE_TOKEN> < T > queue ) { </a> 1
<a> if ( queue instanceof MessageBuf ) { </a> 1
<a> return ( MessageBuf < T > ) queue ; </a> 1
<a> } </a> 1
<a> return new <RARE_TOKEN> < T > ( queue ) ; </a> 1
<a> } </a> 1
<a> public static ByteBuf buffer ( ) { </a> 0
<a> return buffer ( <RARE_TOKEN> , Integer . MAX_VALUE ) ; </a> 1
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , Integer . MAX_VALUE ) ; </a> 1
<a> } </a> 0
<a> public static ByteBuf buffer ( int <RARE_TOKEN> ) { </a> 0
<a> return buffer ( <RARE_TOKEN> , Integer . MAX_VALUE ) ; </a> 1
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , Integer . MAX_VALUE ) ; </a> 1
<a> } </a> 0
<a> public static ByteBuf buffer ( int <RARE_TOKEN> , int maxCapacity ) { </a> 0
<a> if ( <RARE_TOKEN> == 0 && maxCapacity == 0 ) { </a> 1
<a> return EMPTY_BUFFER ; </a> 1
<a> } </a> 1
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> , maxCapacity ) ; </a> 1
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( int <RARE_TOKEN> , int maxCapacity ) { </a> 0
<a> if ( <RARE_TOKEN> == 0 && maxCapacity == 0 ) { </a> 1
<a> return EMPTY_BUFFER ; </a> 1
<a> } </a> 1
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> , maxCapacity ) ; </a> 1
<a> } </a> 1
<a> public static ByteBuf wrappedBuffer ( byte [ ] array ) { </a> 0
<a> if ( array . length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> return new <RARE_TOKEN> ( array , array . length ) ; </a> 1
<a> } </a> 0
<a> public static ByteBuf wrappedBuffer ( byte [ ] array , int offset , int length ) { </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> if ( offset == 0 && length == array . length ) { </a> 0
<a> return wrappedBuffer ( array ) ; </a> 0
<a> } </a> 0
<a> return new <RARE_TOKEN> ( wrappedBuffer ( array ) , offset , length ) ; </a> 1
<a> } </a> 0
<a> public static ByteBuf wrappedBuffer ( ByteBuffer buffer ) { </a> 0
<a> if ( ! buffer . <RARE_TOKEN> ( ) ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> if ( buffer . <RARE_TOKEN> ( ) ) { </a> 0
<a> return wrappedBuffer ( </a> 0
<a> buffer . array ( ) , </a> 0
<a> buffer . <RARE_TOKEN> ( ) + buffer . position ( ) , </a> 0
<a> buffer . <RARE_TOKEN> ( ) ) . order ( buffer . order ( ) ) ; </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( buffer , buffer . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> public static ByteBuf wrappedBuffer ( ByteBuf buffer ) { </a> 0
<a> if ( buffer . readable ( ) ) { </a> 0
<a> return buffer . slice ( ) ; </a> 0
<a> } else { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static ByteBuf wrappedBuffer ( byte [ ] ... <RARE_TOKEN> ) { </a> 0
<a> return wrappedBuffer ( 16 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf wrappedBuffer ( ByteBuf ... buffers ) { </a> 0
<a> return wrappedBuffer ( 16 , buffers ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf wrappedBuffer ( ByteBuffer ... buffers ) { </a> 0
<a> return wrappedBuffer ( 16 , buffers ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf wrappedBuffer ( int <RARE_TOKEN> , byte [ ] ... <RARE_TOKEN> ) { </a> 0
<a> switch ( <RARE_TOKEN> . length ) { </a> 0
<a> case 0 : </a> 0
<a> break ; </a> 0
<a> case 1 : </a> 0
<a> if ( <RARE_TOKEN> [ 0 ] . length != 0 ) { </a> 0
<a> return wrappedBuffer ( <RARE_TOKEN> [ 0 ] ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> final List < ByteBuf > components = new ArrayList < ByteBuf > ( <RARE_TOKEN> . length ) ; </a> 0
<a> for ( byte [ ] a : <RARE_TOKEN> ) { </a> 0
<a> if ( a == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( a . length > 0 ) { </a> 0
<a> components . add ( wrappedBuffer ( a ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! components . isEmpty ( ) ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> , components ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> public static ByteBuf wrappedBuffer ( int <RARE_TOKEN> , ByteBuf ... buffers ) { </a> 0
<a> switch ( buffers . length ) { </a> 0
<a> case 0 : </a> 0
<a> break ; </a> 0
<a> case 1 : </a> 0
<a> if ( buffers [ 0 ] . readable ( ) ) { </a> 0
<a> return wrappedBuffer ( buffers [ 0 ] . order ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> for ( ByteBuf b : buffers ) { </a> 0
<a> if ( b . readable ( ) ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> , buffers ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> public static ByteBuf wrappedBuffer ( int <RARE_TOKEN> , ByteBuffer ... buffers ) { </a> 0
<a> switch ( buffers . length ) { </a> 0
<a> case 0 : </a> 0
<a> break ; </a> 0
<a> case 1 : </a> 0
<a> if ( buffers [ 0 ] . <RARE_TOKEN> ( ) ) { </a> 0
<a> return wrappedBuffer ( buffers [ 0 ] . order ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> final List < ByteBuf > components = new ArrayList < ByteBuf > ( buffers . length ) ; </a> 0
<a> for ( ByteBuffer b : buffers ) { </a> 0
<a> if ( b == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( b . <RARE_TOKEN> ( ) > 0 ) { </a> 0
<a> components . add ( wrappedBuffer ( b . order ( <RARE_TOKEN> ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! components . isEmpty ( ) ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> , components ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( 16 ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> public static ByteBuf copiedBuffer ( byte [ ] array ) { </a> 0
<a> if ( array . length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> return wrappedBuffer ( array . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf copiedBuffer ( byte [ ] array , int offset , int length ) { </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ length ] ; </a> 0
<a> System . <RARE_TOKEN> ( array , offset , <RARE_TOKEN> , 0 , length ) ; </a> 0
<a> return wrappedBuffer ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf copiedBuffer ( ByteBuffer buffer ) { </a> 0
<a> int length = buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ length ] ; </a> 0
<a> int position = buffer . position ( ) ; </a> 0
<a> try { </a> 0
<a> buffer . get ( <RARE_TOKEN> ) ; </a> 0
<a> } finally { </a> 0
<a> buffer . position ( position ) ; </a> 0
<a> } </a> 0
<a> return wrappedBuffer ( <RARE_TOKEN> ) . order ( buffer . order ( ) ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf copiedBuffer ( ByteBuf buffer ) { </a> 0
<a> if ( buffer . readable ( ) ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static ByteBuf copiedBuffer ( byte [ ] ... <RARE_TOKEN> ) { </a> 0
<a> switch ( <RARE_TOKEN> . length ) { </a> 0
<a> case 0 : </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> case 1 : </a> 0
<a> if ( <RARE_TOKEN> [ 0 ] . length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } else { </a> 0
<a> return copiedBuffer ( <RARE_TOKEN> [ 0 ] ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int length = 0 ; </a> 0
<a> for ( byte [ ] a : <RARE_TOKEN> ) { </a> 0
<a> if ( Integer . MAX_VALUE - length < a . length ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> length of the <RARE_TOKEN> <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> length += a . length ; </a> 0
<a> } </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ length ] ; </a> 0
<a> for ( int i = 0 , j = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> byte [ ] a = <RARE_TOKEN> [ i ] ; </a> 0
<a> System . <RARE_TOKEN> ( a , 0 , <RARE_TOKEN> , j , a . length ) ; </a> 0
<a> j += a . length ; </a> 0
<a> } </a> 0
<a> return wrappedBuffer ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf copiedBuffer ( ByteBuf ... buffers ) { </a> 0
<a> switch ( buffers . length ) { </a> 0
<a> case 0 : </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> case 1 : </a> 0
<a> return copiedBuffer ( buffers [ 0 ] ) ; </a> 0
<a> } </a> 0
<a> ByteOrder order = null ; </a> 0
<a> int length = 0 ; </a> 0
<a> for ( ByteBuf b : buffers ) { </a> 0
<a> int <RARE_TOKEN> = b . readableBytes ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> if ( Integer . MAX_VALUE - length < <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> length of the <RARE_TOKEN> buffers is <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> length += <RARE_TOKEN> ; </a> 0
<a> if ( order != null ) { </a> 0
<a> if ( ! order . equals ( b . order ( ) ) ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> byte <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> order = b . order ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ length ] ; </a> 0
<a> for ( int i = 0 , j = 0 ; i < buffers . length ; i ++ ) { </a> 0
<a> ByteBuf b = buffers [ i ] ; </a> 0
<a> int <RARE_TOKEN> = b . readableBytes ( ) ; </a> 0
<a> b . getBytes ( b . readerIndex ( ) , <RARE_TOKEN> , j , <RARE_TOKEN> ) ; </a> 0
<a> j += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return wrappedBuffer ( <RARE_TOKEN> ) . order ( order ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf copiedBuffer ( ByteBuffer ... buffers ) { </a> 0
<a> switch ( buffers . length ) { </a> 0
<a> case 0 : </a> 0
<a> return EMPTY_BUFFER ; </a> 1
<a> case 1 : </a> 1
<a> return copiedBuffer ( buffers [ 0 ] ) ; </a> 1
<a> } </a> 0
<a> ByteOrder order = null ; </a> 0
<a> int length = 0 ; </a> 0
<a> for ( ByteBuffer b : buffers ) { </a> 0
<a> int <RARE_TOKEN> = b . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> if ( Integer . MAX_VALUE - length < <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> length of the <RARE_TOKEN> buffers is <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> length += <RARE_TOKEN> ; </a> 0
<a> if ( order != null ) { </a> 0
<a> if ( ! order . equals ( b . order ( ) ) ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> byte <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> order = b . order ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ length ] ; </a> 0
<a> for ( int i = 0 , j = 0 ; i < buffers . length ; i ++ ) { </a> 0
<a> ByteBuffer b = buffers [ i ] ; </a> 0
<a> int <RARE_TOKEN> = b . <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = b . position ( ) ; </a> 0
<a> b . get ( <RARE_TOKEN> , j , <RARE_TOKEN> ) ; </a> 0
<a> b . position ( <RARE_TOKEN> ) ; </a> 0
<a> j += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return wrappedBuffer ( <RARE_TOKEN> ) . order ( order ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf copiedBuffer ( <RARE_TOKEN> string , Charset charset ) { </a> 0
<a> if ( string == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( string instanceof <RARE_TOKEN> ) { </a> 0
<a> return copiedBuffer ( ( <RARE_TOKEN> ) string , charset ) ; </a> 0
<a> } </a> 0
<a> return copiedBuffer ( <RARE_TOKEN> . wrap ( string ) , charset ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf copiedBuffer ( </a> 0
<a> <RARE_TOKEN> string , int offset , int length , Charset charset ) { </a> 0
<a> if ( string == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> if ( string instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> buf = ( <RARE_TOKEN> ) string ; </a> 0
<a> if ( buf . <RARE_TOKEN> ( ) ) { </a> 0
<a> return copiedBuffer ( </a> 0
<a> buf . array ( ) , </a> 0
<a> buf . <RARE_TOKEN> ( ) + buf . position ( ) + offset , </a> 0
<a> length , charset ) ; </a> 0
<a> } </a> 0
<a> buf = buf . slice ( ) ; </a> 0
<a> buf . limit ( length ) ; </a> 0
<a> buf . position ( offset ) ; </a> 0
<a> return copiedBuffer ( buf , charset ) ; </a> 0
<a> } </a> 0
<a> return copiedBuffer ( <RARE_TOKEN> . wrap ( string , offset , offset + length ) , charset ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf copiedBuffer ( char [ ] array , Charset charset ) { </a> 0
<a> return copiedBuffer ( array , 0 , array . length , charset ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf copiedBuffer ( char [ ] array , int offset , int length , Charset charset ) { </a> 0
<a> if ( array == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> return copiedBuffer ( <RARE_TOKEN> . wrap ( array , offset , length ) , charset ) ; </a> 0
<a> } </a> 0
<a> private static ByteBuf copiedBuffer ( <RARE_TOKEN> buffer , Charset charset ) { </a> 0
<a> ByteBuffer dst = ByteBufUtil . <RARE_TOKEN> ( buffer , charset ) ; </a> 0
<a> ByteBuf result = wrappedBuffer ( dst . array ( ) ) ; </a> 0
<a> result . writerIndex ( dst . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> if ( buffer instanceof <RARE_TOKEN> ) { </a> 1
<a> buffer = ( ( <RARE_TOKEN> ) buffer ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> return new <RARE_TOKEN> ( buffer ) ; </a> 1
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( int value ) { </a> 0
<a> ByteBuf buf = buffer ( 4 ) ; </a> 0
<a> buf . writeInt ( value ) ; </a> 0
<a> return buf ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( int ... values ) { </a> 0
<a> if ( values == null || values . length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> ByteBuf buffer = buffer ( values . length * 4 ) ; </a> 0
<a> for ( int v : values ) { </a> 0
<a> buffer . writeInt ( v ) ; </a> 0
<a> } </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( int value ) { </a> 0
<a> ByteBuf buf = buffer ( 2 ) ; </a> 0
<a> buf . <RARE_TOKEN> ( value ) ; </a> 0
<a> return buf ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( short ... values ) { </a> 0
<a> if ( values == null || values . length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> ByteBuf buffer = buffer ( values . length * 2 ) ; </a> 0
<a> for ( int v : values ) { </a> 0
<a> buffer . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( int ... values ) { </a> 0
<a> if ( values == null || values . length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> ByteBuf buffer = buffer ( values . length * 2 ) ; </a> 0
<a> for ( int v : values ) { </a> 0
<a> buffer . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( int value ) { </a> 0
<a> ByteBuf buf = buffer ( 3 ) ; </a> 0
<a> buf . <RARE_TOKEN> ( value ) ; </a> 0
<a> return buf ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( int ... values ) { </a> 0
<a> if ( values == null || values . length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> ByteBuf buffer = buffer ( values . length * 3 ) ; </a> 0
<a> for ( int v : values ) { </a> 0
<a> buffer . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( long value ) { </a> 0
<a> ByteBuf buf = buffer ( 8 ) ; </a> 0
<a> buf . <RARE_TOKEN> ( value ) ; </a> 0
<a> return buf ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( long ... values ) { </a> 0
<a> if ( values == null || values . length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> ByteBuf buffer = buffer ( values . length * 8 ) ; </a> 0
<a> for ( long v : values ) { </a> 0
<a> buffer . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( boolean value ) { </a> 0
<a> ByteBuf buf = buffer ( 1 ) ; </a> 0
<a> buf . <RARE_TOKEN> ( value ) ; </a> 0
<a> return buf ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( boolean ... values ) { </a> 0
<a> if ( values == null || values . length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> ByteBuf buffer = buffer ( values . length ) ; </a> 0
<a> for ( boolean v : values ) { </a> 0
<a> buffer . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( float value ) { </a> 0
<a> ByteBuf buf = buffer ( 4 ) ; </a> 0
<a> buf . <RARE_TOKEN> ( value ) ; </a> 0
<a> return buf ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( float ... values ) { </a> 0
<a> if ( values == null || values . length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> ByteBuf buffer = buffer ( values . length * 4 ) ; </a> 0
<a> for ( float v : values ) { </a> 0
<a> buffer . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( double value ) { </a> 0
<a> ByteBuf buf = buffer ( 8 ) ; </a> 0
<a> buf . <RARE_TOKEN> ( value ) ; </a> 0
<a> return buf ; </a> 0
<a> } </a> 0
<a> public static ByteBuf <RARE_TOKEN> ( double ... values ) { </a> 0
<a> if ( values == null || values . length == 0 ) { </a> 0
<a> return EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> ByteBuf buffer = buffer ( values . length * 8 ) ; </a> 0
<a> for ( double v : values ) { </a> 0
<a> buffer . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> private Unpooled ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> public interface <RARE_TOKEN> extends ByteBuf { </a> 1
<a> ByteBuf <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import static io . netty . buffer . Unpooled . * ; </a> 1
<a> import static org . junit . Assert . * ; </a> 1
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . ByteOrder ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public abstract class <RARE_TOKEN> extends </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> private final ByteOrder order ; </a> 0
<a> protected <RARE_TOKEN> ( ByteOrder order ) { </a> 0
<a> if ( order == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . order = order ; </a> 0
<a> } </a> 0
<a> private List < ByteBuf > buffers ; </a> 0
<a> private ByteBuf buffer ; </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf <RARE_TOKEN> ( int length ) { </a> 0
<a> buffers = new ArrayList < ByteBuf > ( ) ; </a> 0
<a> for ( int i = 0 ; i < length + <RARE_TOKEN> ; i += <RARE_TOKEN> ) { </a> 0
<a> buffers . add ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> buffers . add ( Unpooled . wrappedBuffer ( new byte [ 1 ] ) ) ; </a> 0
<a> buffers . add ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> buffers . add ( Unpooled . wrappedBuffer ( new byte [ 2 ] ) ) ; </a> 0
<a> buffers . add ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> buffers . add ( Unpooled . wrappedBuffer ( new byte [ 3 ] ) ) ; </a> 0
<a> buffers . add ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> buffers . add ( Unpooled . wrappedBuffer ( new byte [ 4 ] ) ) ; </a> 0
<a> buffers . add ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> buffers . add ( Unpooled . wrappedBuffer ( new byte [ 5 ] ) ) ; </a> 0
<a> buffers . add ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> buffers . add ( Unpooled . wrappedBuffer ( new byte [ 6 ] ) ) ; </a> 0
<a> buffers . add ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> buffers . add ( Unpooled . wrappedBuffer ( new byte [ 7 ] ) ) ; </a> 0
<a> buffers . add ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> buffers . add ( Unpooled . wrappedBuffer ( new byte [ 8 ] ) ) ; </a> 0
<a> buffers . add ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> buffers . add ( Unpooled . wrappedBuffer ( new byte [ 9 ] ) ) ; </a> 0
<a> buffers . add ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> } </a> 0
<a> buffer = Unpooled . wrappedBuffer ( </a> 1
<a> Integer . MAX_VALUE , buffers . <RARE_TOKEN> ( new ByteBuf [ buffers . size ( ) ] ) ) . order ( order ) ; </a> 1
<a> buffer . capacity ( length ) ; </a> 0
<a> assertEquals ( length , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( length , buffer . readableBytes ( ) ) ; </a> 0
<a> assertFalse ( buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> buffer . writerIndex ( 0 ) ; </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf [ ] components ( ) { </a> 0
<a> return buffers . <RARE_TOKEN> ( new ByteBuf [ buffers . size ( ) ] ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> buf = ( <RARE_TOKEN> ) Unpooled . wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 } , new byte [ ] { 4 , 5 , 6 , 7 , 8 , 9 , 26 } ) ; </a> 0
<a> assertEquals ( buf . <RARE_TOKEN> ( 2 ) . capacity ( ) , 5 ) ; </a> 1
<a> byte index = 0 ; </a> 0
<a> while ( index < buf . capacity ( ) ) { </a> 0
<a> ByteBuf <RARE_TOKEN> = buf . <RARE_TOKEN> ( index ++ ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . capacity ( ) > 0 ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> . getByte ( 0 ) ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> . getByte ( <RARE_TOKEN> . readableBytes ( ) - 1 ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf a , b ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) . order ( order ) ; </a> 0
<a> b = wrappedBuffer ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } , 0 , 5 ) . order ( order ) , </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } , 5 , 5 ) . order ( order ) ) ; </a> 1
<a> a . skipBytes ( 6 ) ; </a> 0
<a> a . <RARE_TOKEN> ( ) ; </a> 0
<a> b . skipBytes ( 6 ) ; </a> 0
<a> b . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( a . readerIndex ( ) , b . readerIndex ( ) ) ; </a> 0
<a> a . readerIndex ( a . readerIndex ( ) - 1 ) ; </a> 0
<a> b . readerIndex ( b . readerIndex ( ) - 1 ) ; </a> 0
<a> assertEquals ( a . readerIndex ( ) , b . readerIndex ( ) ) ; </a> 0
<a> a . writerIndex ( a . writerIndex ( ) - 1 ) ; </a> 0
<a> a . <RARE_TOKEN> ( ) ; </a> 0
<a> b . writerIndex ( b . writerIndex ( ) - 1 ) ; </a> 0
<a> b . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( a . writerIndex ( ) , b . writerIndex ( ) ) ; </a> 0
<a> a . writerIndex ( a . writerIndex ( ) + 1 ) ; </a> 0
<a> b . writerIndex ( b . writerIndex ( ) + 1 ) ; </a> 0
<a> assertEquals ( a . writerIndex ( ) , b . writerIndex ( ) ) ; </a> 0
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a . <RARE_TOKEN> ( ) ; </a> 0
<a> b . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( a . readerIndex ( ) , b . readerIndex ( ) ) ; </a> 0
<a> assertEquals ( a . writerIndex ( ) , b . writerIndex ( ) ) ; </a> 0
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a . <RARE_TOKEN> ( ) ; </a> 0
<a> b . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( a . readerIndex ( ) , b . readerIndex ( ) ) ; </a> 0
<a> a . <RARE_TOKEN> ( ) ; </a> 0
<a> b . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( a . writerIndex ( ) , b . writerIndex ( ) ) ; </a> 0
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> buf = <RARE_TOKEN> ( 2 ) ; </a> 1
<a> buf . <RARE_TOKEN> ( wrappedBuffer ( new byte [ ] { 1 } ) ) ; </a> 0
<a> assertEquals ( 1 , buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> buf . <RARE_TOKEN> ( wrappedBuffer ( new byte [ ] { 2 , 3 } ) ) ; </a> 0
<a> assertEquals ( 2 , buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> buf . <RARE_TOKEN> ( wrappedBuffer ( new byte [ ] { 4 , 5 , 6 } ) ) ; </a> 0
<a> assertEquals ( 1 , buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertNotNull ( buf . array ( ) ) ; </a> 0
<a> assertEquals ( 0 , buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> buf = <RARE_TOKEN> ( Integer . MAX_VALUE ) ; </a> 1
<a> buf . <RARE_TOKEN> ( wrappedBuffer ( new byte [ ] { 1 } ) ) ; </a> 0
<a> buf . <RARE_TOKEN> ( wrappedBuffer ( new byte [ ] { 2 , 3 } ) ) ; </a> 0
<a> buf . <RARE_TOKEN> ( wrappedBuffer ( new byte [ ] { 4 , 5 , 6 } ) ) ; </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( 1 , buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertNotNull ( buf . array ( ) ) ; </a> 0
<a> assertEquals ( 0 , buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> buf = <RARE_TOKEN> ( Integer . MAX_VALUE ) ; </a> 1
<a> buf . <RARE_TOKEN> ( wrappedBuffer ( new byte [ ] { 1 } ) ) ; </a> 0
<a> buf . <RARE_TOKEN> ( wrappedBuffer ( new byte [ ] { 2 , 3 } ) ) ; </a> 0
<a> buf . <RARE_TOKEN> ( wrappedBuffer ( new byte [ ] { 4 , 5 , 6 } ) ) ; </a> 0
<a> buf . <RARE_TOKEN> ( wrappedBuffer ( new byte [ ] { 7 , 8 , 9 , 10 } ) ) ; </a> 0
<a> buf . <RARE_TOKEN> ( 1 , 2 ) ; </a> 0
<a> assertEquals ( 3 , buf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( wrappedBuffer ( new byte [ ] { 1 } ) , buf . <RARE_TOKEN> ( 0 ) ) ; </a> 0
<a> assertEquals ( wrappedBuffer ( new byte [ ] { 2 , 3 , 4 , 5 , 6 } ) , buf . <RARE_TOKEN> ( 1 ) ) ; </a> 0
<a> assertEquals ( wrappedBuffer ( new byte [ ] { 7 , 8 , 9 , 10 } ) , buf . <RARE_TOKEN> ( 2 ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf header = buffer ( 12 ) . order ( order ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> = buffer ( <RARE_TOKEN> ) . order ( order ) ; </a> 1
<a> header . writeBytes ( new byte [ 12 ] ) ; </a> 0
<a> <RARE_TOKEN> . writeBytes ( new byte [ <RARE_TOKEN> ] ) ; </a> 0
<a> ByteBuf buffer = wrappedBuffer ( header , <RARE_TOKEN> ) ; </a> 1
<a> assertTrue ( header . readableBytes ( ) == 12 ) ; </a> 1
<a> assertTrue ( <RARE_TOKEN> . readableBytes ( ) == <RARE_TOKEN> ) ; </a> 1
<a> assertEquals ( 12 + <RARE_TOKEN> , buffer . readableBytes ( ) ) ; </a> 0
<a> assertFalse ( buffer . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf a , b ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 } ) . order ( order ) , </a> 1
<a> wrappedBuffer ( new byte [ ] { 2 } ) . order ( order ) ) ; </a> 1
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 } ) . order ( order ) , </a> 1
<a> wrappedBuffer ( new byte [ ] { 2 } ) . order ( order ) , </a> 0
<a> wrappedBuffer ( new byte [ ] { 3 } ) . order ( order ) ) ; </a> 1
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } , 1 , 2 ) . order ( order ) , </a> 1
<a> wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } , 3 , 1 ) . order ( order ) ) ; </a> 1
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 } ) . order ( order ) , </a> 1
<a> wrappedBuffer ( new byte [ ] { 4 } ) . order ( order ) ) ; </a> 1
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 4 , 5 } , 1 , 2 ) . order ( order ) , </a> 1
<a> wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 4 , 5 } , 3 , 1 ) . order ( order ) ) ; </a> 1
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) , </a> 1
<a> wrappedBuffer ( new byte [ ] { 4 , 5 , 6 } ) . order ( order ) , </a> 0
<a> wrappedBuffer ( new byte [ ] { 7 , 8 , 9 , 10 } ) . order ( order ) ) ; </a> 1
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 } , 1 , 5 ) . order ( order ) , </a> 1
<a> wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 } , 6 , 5 ) . order ( order ) ) ; </a> 1
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 6 } ) . order ( order ) , </a> 1
<a> wrappedBuffer ( new byte [ ] { 7 , 8 , 5 , 9 , 10 } ) . order ( order ) ) ; </a> 1
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 6 , 7 , 8 , 5 , 9 , 10 , 11 } , 1 , 5 ) . order ( order ) , </a> 1
<a> wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 6 , 7 , 8 , 5 , 9 , 10 , 11 } , 6 , 5 ) . order ( order ) ) ; </a> 1
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assertEquals ( 16 , wrappedBuffer ( wrappedBuffer ( ByteBuffer . <RARE_TOKEN> ( 16 ) ) ) . capacity ( ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ) , </a> 0
<a> wrappedBuffer ( wrappedBuffer ( new byte [ ] [ ] { new byte [ ] { 1 , 2 , 3 } } ) . order ( order ) ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ) , </a> 0
<a> wrappedBuffer ( wrappedBuffer ( </a> 1
<a> new byte [ ] { 1 } , </a> 0
<a> new byte [ ] { 2 } , </a> 0
<a> new byte [ ] { 3 } ) . order ( order ) ) ) ; </a> 1
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ) , </a> 0
<a> wrappedBuffer ( new ByteBuf [ ] { </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) </a> 0
<a> } ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ) , </a> 0
<a> wrappedBuffer ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 1 } ) . order ( order ) , </a> 0
<a> wrappedBuffer ( new byte [ ] { 2 } ) . order ( order ) , </a> 0
<a> wrappedBuffer ( new byte [ ] { 3 } ) . order ( order ) ) ) ; </a> 1
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ) , </a> 0
<a> wrappedBuffer ( wrappedBuffer ( new ByteBuffer [ ] { </a> 0
<a> ByteBuffer . wrap ( new byte [ ] { 1 , 2 , 3 } ) </a> 0
<a> } ) ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ) , </a> 0
<a> wrappedBuffer ( wrappedBuffer ( </a> 1
<a> ByteBuffer . wrap ( new byte [ ] { 1 } ) , </a> 0
<a> ByteBuffer . wrap ( new byte [ ] { 2 } ) , </a> 0
<a> ByteBuffer . wrap ( new byte [ ] { 3 } ) ) ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf a , b ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 } , new byte [ 1 ] ) . order ( order ) ) ; </a> 1
<a> b . writerIndex ( b . writerIndex ( ) - 1 ) ; </a> 0
<a> b . writeBytes ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 2 } ) . order ( order ) ) ; </a> 1
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 } , new byte [ 2 ] ) . order ( order ) ) ; </a> 1
<a> b . writerIndex ( b . writerIndex ( ) - 2 ) ; </a> 0
<a> b . writeBytes ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 2 } ) . order ( order ) ) ; </a> 1
<a> b . writeBytes ( wrappedBuffer ( new byte [ ] { 3 } ) . order ( order ) ) ; </a> 1
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } , 1 , 3 ) . order ( order ) ) ; </a> 1
<a> b . writerIndex ( b . writerIndex ( ) - 1 ) ; </a> 0
<a> b . writeBytes ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } , 3 , 1 ) . order ( order ) ) ; </a> 1
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 } , new byte [ 1 ] ) . order ( order ) ) ; </a> 1
<a> b . writerIndex ( b . writerIndex ( ) - 1 ) ; </a> 0
<a> b . writeBytes ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 4 } ) . order ( order ) ) ; </a> 1
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 4 , 5 } , 1 , 3 ) . order ( order ) ) ; </a> 1
<a> b . writerIndex ( b . writerIndex ( ) - 1 ) ; </a> 0
<a> b . writeBytes ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 4 , 5 } , 3 , 1 ) . order ( order ) ) ; </a> 1
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } , new byte [ 7 ] ) . order ( order ) ) ; </a> 1
<a> b . writerIndex ( b . writerIndex ( ) - 7 ) ; </a> 0
<a> b . writeBytes ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 4 , 5 , 6 } ) . order ( order ) ) ; </a> 1
<a> b . writeBytes ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 7 , 8 , 9 , 10 } ) . order ( order ) ) ; </a> 1
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 } , 1 , 10 ) . order ( order ) ) ; </a> 1
<a> b . writerIndex ( b . writerIndex ( ) - 5 ) ; </a> 0
<a> b . writeBytes ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 } , 6 , 5 ) . order ( order ) ) ; </a> 1
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 6 } , new byte [ 5 ] ) . order ( order ) ) ; </a> 1
<a> b . writerIndex ( b . writerIndex ( ) - 5 ) ; </a> 0
<a> b . writeBytes ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 7 , 8 , 5 , 9 , 10 } ) . order ( order ) ) ; </a> 1
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) . order ( order ) ; </a> 1
<a> b = wrappedBuffer ( wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 6 , 7 , 8 , 5 , 9 , 10 , 11 } , 1 , 10 ) . order ( order ) ) ; </a> 1
<a> b . writerIndex ( b . writerIndex ( ) - 5 ) ; </a> 0
<a> b . writeBytes ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 6 , 7 , 8 , 5 , 9 , 10 , 11 } , 6 , 5 ) . order ( order ) ) ; </a> 1
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import java . nio . ByteOrder ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private ByteBuf buffer ; </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf <RARE_TOKEN> ( int length ) { </a> 0
<a> buffer = Unpooled . <RARE_TOKEN> ( length ) ; </a> 1
<a> assertSame ( ByteOrder . <RARE_TOKEN> , buffer . order ( ) ) ; </a> 0
<a> assertEquals ( 0 , buffer . writerIndex ( ) ) ; </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf [ ] components ( ) { </a> 0
<a> return new ByteBuf [ ] { buffer } ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private ByteBuf buffer ; </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf <RARE_TOKEN> ( int length ) { </a> 0
<a> buffer = Unpooled . buffer ( length ) ; </a> 0
<a> assertEquals ( 0 , buffer . writerIndex ( ) ) ; </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf [ ] components ( ) { </a> 0
<a> return new ByteBuf [ ] { buffer } ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = NullPointerException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> new <RARE_TOKEN> ( null , 0 ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ByteBuf buf = Unpooled . buffer ( 0 , <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> new <RARE_TOKEN> ( null ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( NullPointerException e ) { </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> out = new <RARE_TOKEN> ( buf ) ; </a> 0
<a> assertSame ( buf , out . buffer ( ) ) ; </a> 0
<a> out . <RARE_TOKEN> ( true ) ; </a> 0
<a> out . <RARE_TOKEN> ( false ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> out . writeBytes ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> out . writeInt ( <RARE_TOKEN> ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> out . writeBytes ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> out . write ( new byte [ 0 ] ) ; </a> 0
<a> out . write ( new byte [ ] { 1 , 2 , 3 , 4 } ) ; </a> 0
<a> out . write ( new byte [ ] { 1 , 3 , 3 , 4 } , 0 , 0 ) ; </a> 0
<a> out . close ( ) ; </a> 0
<a> try { </a> 0
<a> new <RARE_TOKEN> ( null ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( NullPointerException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> new <RARE_TOKEN> ( null , 0 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( NullPointerException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> new <RARE_TOKEN> ( buf , - 1 ) ; </a> 0
<a> } catch ( IllegalArgumentException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> new <RARE_TOKEN> ( buf , buf . capacity ( ) + 1 ) ; </a> 0
<a> } catch ( IndexOutOfBoundsException e ) { </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> in = new <RARE_TOKEN> ( buf ) ; </a> 0
<a> assertTrue ( in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> in . <RARE_TOKEN> ( Integer . MAX_VALUE ) ; </a> 0
<a> assertEquals ( buf . writerIndex ( ) , in . <RARE_TOKEN> ( Long . MAX_VALUE ) ) ; </a> 0
<a> assertFalse ( buf . readable ( ) ) ; </a> 0
<a> in . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( 0 , buf . readerIndex ( ) ) ; </a> 0
<a> assertEquals ( 4 , in . <RARE_TOKEN> ( 4 ) ) ; </a> 0
<a> assertEquals ( 4 , buf . readerIndex ( ) ) ; </a> 0
<a> in . <RARE_TOKEN> ( ) ; </a> 0
<a> assertTrue ( in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertFalse ( in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ 13 ] ; </a> 0
<a> in . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> , new String ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( ' ' , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 4 , in . read ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( 1 , <RARE_TOKEN> [ 0 ] ) ; </a> 0
<a> assertEquals ( 2 , <RARE_TOKEN> [ 1 ] ) ; </a> 0
<a> assertEquals ( 3 , <RARE_TOKEN> [ 2 ] ) ; </a> 0
<a> assertEquals ( 4 , <RARE_TOKEN> [ 3 ] ) ; </a> 0
<a> assertEquals ( - 1 , in . read ( ) ) ; </a> 0
<a> assertEquals ( - 1 , in . read ( <RARE_TOKEN> ) ) ; </a> 0
<a> try { </a> 0
<a> in . <RARE_TOKEN> ( ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> in . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , - 1 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( IndexOutOfBoundsException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> in . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> in . close ( ) ; </a> 0
<a> assertEquals ( buf . readerIndex ( ) , in . readBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ByteBuf buf = Unpooled . buffer ( 0 ) ; </a> 0
<a> <RARE_TOKEN> in = new <RARE_TOKEN> ( buf ) ; </a> 0
<a> String s = in . <RARE_TOKEN> ( ) ; </a> 0
<a> assertEquals ( 0 , s . length ( ) ) ; </a> 0
<a> in . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import static io . netty . buffer . Unpooled . * ; </a> 1
<a> import static org . junit . Assert . * ; </a> 1
<a> import java . io . InputStream ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf header = buffer ( 12 ) ; </a> 0
<a> ByteBuf <RARE_TOKEN> = buffer ( <RARE_TOKEN> ) ; </a> 0
<a> header . writeBytes ( new byte [ 12 ] ) ; </a> 0
<a> <RARE_TOKEN> . writeBytes ( new byte [ <RARE_TOKEN> ] ) ; </a> 0
<a> ByteBuf buffer = wrappedBuffer ( header , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( header . readableBytes ( ) == 12 ) ; </a> 1
<a> assertTrue ( <RARE_TOKEN> . readableBytes ( ) == <RARE_TOKEN> ) ; </a> 1
<a> assertEquals ( 12 + <RARE_TOKEN> , buffer . readableBytes ( ) ) ; </a> 0
<a> assertFalse ( buffer . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Map < byte [ ] , Integer > map = new <RARE_TOKEN> < byte [ ] , Integer > ( ) ; </a> 0
<a> map . put ( new byte [ 0 ] , 1 ) ; </a> 0
<a> map . put ( new byte [ ] { 1 } , 32 ) ; </a> 0
<a> map . put ( new byte [ ] { 2 } , <RARE_TOKEN> ) ; </a> 0
<a> map . put ( new byte [ ] { 0 , 1 } , <RARE_TOKEN> ) ; </a> 0
<a> map . put ( new byte [ ] { 1 , 2 } , <RARE_TOKEN> ) ; </a> 0
<a> map . put ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 } , <RARE_TOKEN> ) ; </a> 0
<a> map . put ( new byte [ ] { 6 , 7 , 8 , 9 , 0 , 1 } , ( int ) <RARE_TOKEN> ) ; </a> 0
<a> map . put ( new byte [ ] { - 1 , - 1 , - 1 , ( byte ) <RARE_TOKEN> } , 1 ) ; </a> 0
<a> for ( Entry < byte [ ] , Integer > e : map . <RARE_TOKEN> ( ) ) { </a> 0
<a> assertEquals ( </a> 0
<a> e . getValue ( ) . <RARE_TOKEN> ( ) , </a> 0
<a> ByteBufUtil . hashCode ( wrappedBuffer ( e . <RARE_TOKEN> ( ) ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf a , b ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 } ) ; </a> 0
<a> b = wrappedBuffer ( new byte [ ] { 1 , 2 } ) ; </a> 0
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) ; </a> 0
<a> b = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) ; </a> 0
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) ; </a> 0
<a> b = wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } , 1 , 3 ) ; </a> 0
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) ; </a> 0
<a> b = wrappedBuffer ( new byte [ ] { 1 , 2 , 4 } ) ; </a> 0
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) ; </a> 0
<a> b = wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 4 , 5 } , 1 , 3 ) ; </a> 0
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) ; </a> 0
<a> b = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) ; </a> 0
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) ; </a> 0
<a> b = wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 } , 1 , 10 ) ; </a> 0
<a> assertTrue ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) ; </a> 0
<a> b = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 6 , 7 , 8 , 5 , 9 , 10 } ) ; </a> 0
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> a = wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) ; </a> 0
<a> b = wrappedBuffer ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 6 , 7 , 8 , 5 , 9 , 10 , 11 } , 1 , 10 ) ; </a> 0
<a> assertFalse ( ByteBufUtil . equals ( a , b ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> List < ByteBuf > expected = new ArrayList < ByteBuf > ( ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 1 } ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 1 , 2 } ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 } ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 2 } ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 2 , 3 } ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 } ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 } ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 2 , 3 , 4 } , 1 , 1 ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 } , 2 , 2 ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 } , 1 , 10 ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 } , 2 , 12 ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 2 , 3 , 4 , 5 } , 2 , 1 ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 } , 3 , 2 ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 } , 2 , 10 ) ) ; </a> 0
<a> expected . add ( wrappedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 } , 3 , 12 ) ) ; </a> 0
<a> for ( int i = 0 ; i < expected . size ( ) ; i ++ ) { </a> 0
<a> for ( int j = 0 ; j < expected . size ( ) ; j ++ ) { </a> 0
<a> if ( i == j ) { </a> 0
<a> assertEquals ( 0 , ByteBufUtil . <RARE_TOKEN> ( expected . get ( i ) , expected . get ( j ) ) ) ; </a> 0
<a> } else if ( i < j ) { </a> 0
<a> assertTrue ( ByteBufUtil . <RARE_TOKEN> ( expected . get ( i ) , expected . get ( j ) ) < 0 ) ; </a> 0
<a> } else { </a> 0
<a> assertTrue ( ByteBufUtil . <RARE_TOKEN> ( expected . get ( i ) , expected . get ( j ) ) > 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new byte [ 0 ] ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new byte [ 0 ] ) . order ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new byte [ 8 ] , 0 , 0 ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new byte [ 8 ] , 0 , 0 ) . order ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new byte [ 8 ] , 8 , 0 ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new byte [ 8 ] , 8 , 0 ) . order ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( ByteBuffer . <RARE_TOKEN> ( 0 ) ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( EMPTY_BUFFER ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new byte [ 0 ] [ ] ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new byte [ ] [ ] { new byte [ 0 ] } ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new ByteBuffer [ 0 ] ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new ByteBuffer [ ] { ByteBuffer . <RARE_TOKEN> ( 0 ) } ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( ByteBuffer . <RARE_TOKEN> ( 0 ) , ByteBuffer . <RARE_TOKEN> ( 0 ) ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new ByteBuf [ 0 ] ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( new ByteBuf [ ] { buffer ( 0 ) } ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , wrappedBuffer ( buffer ( 0 ) , buffer ( 0 ) ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new byte [ 0 ] ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new byte [ 0 ] ) . order ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new byte [ 8 ] , 0 , 0 ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new byte [ 8 ] , 0 , 0 ) . order ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new byte [ 8 ] , 8 , 0 ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new byte [ 8 ] , 8 , 0 ) . order ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( ByteBuffer . <RARE_TOKEN> ( 0 ) ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( EMPTY_BUFFER ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new byte [ 0 ] [ ] ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new byte [ ] [ ] { new byte [ 0 ] } ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new ByteBuffer [ 0 ] ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new ByteBuffer [ ] { ByteBuffer . <RARE_TOKEN> ( 0 ) } ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( ByteBuffer . <RARE_TOKEN> ( 0 ) , ByteBuffer . <RARE_TOKEN> ( 0 ) ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new ByteBuf [ 0 ] ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( new ByteBuf [ ] { buffer ( 0 ) } ) ) ; </a> 0
<a> assertSame ( EMPTY_BUFFER , copiedBuffer ( buffer ( 0 ) , buffer ( 0 ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assertTrue ( ByteBufUtil . <RARE_TOKEN> ( </a> 0
<a> Unpooled . wrappedBuffer ( new byte [ ] { ( byte ) 0xFF , ( byte ) 0xFF , ( byte ) 0xFF , ( byte ) 0xFF } ) , </a> 0
<a> Unpooled . wrappedBuffer ( new byte [ ] { ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 } ) ) </a> 0
<a> > 0 ) ; </a> 0
<a> assertTrue ( ByteBufUtil . <RARE_TOKEN> ( </a> 0
<a> Unpooled . wrappedBuffer ( new byte [ ] { ( byte ) 0xFF } ) , </a> 0
<a> Unpooled . wrappedBuffer ( new byte [ ] { ( byte ) 0x00 } ) ) </a> 0
<a> > 0 ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buf = wrappedBuffer ( </a> 0
<a> EMPTY_BUFFER , </a> 0
<a> wrappedBuffer ( new byte [ 16 ] ) . order ( <RARE_TOKEN> ) , </a> 0
<a> EMPTY_BUFFER ) ; </a> 0
<a> assertEquals ( 16 , buf . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assertEquals ( 16 , wrappedBuffer ( ByteBuffer . <RARE_TOKEN> ( 16 ) ) . capacity ( ) ) ; </a> 1
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> wrappedBuffer ( new byte [ ] [ ] { new byte [ ] { 1 , 2 , 3 } } ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> wrappedBuffer ( </a> 1
<a> new byte [ ] { 1 } , </a> 0
<a> new byte [ ] { 2 } , </a> 0
<a> new byte [ ] { 3 } ) ) ; </a> 1
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> wrappedBuffer ( new ByteBuf [ ] { </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) </a> 0
<a> } ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> wrappedBuffer ( </a> 1
<a> wrappedBuffer ( new byte [ ] { 1 } ) , </a> 0
<a> wrappedBuffer ( new byte [ ] { 2 } ) , </a> 0
<a> wrappedBuffer ( new byte [ ] { 3 } ) ) ) ; </a> 1
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> wrappedBuffer ( new ByteBuffer [ ] { </a> 0
<a> ByteBuffer . wrap ( new byte [ ] { 1 , 2 , 3 } ) </a> 0
<a> } ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> wrappedBuffer ( </a> 1
<a> ByteBuffer . wrap ( new byte [ ] { 1 } ) , </a> 0
<a> ByteBuffer . wrap ( new byte [ ] { 2 } ) , </a> 0
<a> ByteBuffer . wrap ( new byte [ ] { 3 } ) ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assertEquals ( 16 , copiedBuffer ( ByteBuffer . <RARE_TOKEN> ( 16 ) ) . capacity ( ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> copiedBuffer ( new byte [ ] [ ] { new byte [ ] { 1 , 2 , 3 } } ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> copiedBuffer ( </a> 0
<a> new byte [ ] { 1 } , </a> 0
<a> new byte [ ] { 2 } , </a> 0
<a> new byte [ ] { 3 } ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> copiedBuffer ( new ByteBuf [ ] { </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) </a> 0
<a> } ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> copiedBuffer ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 } ) , </a> 0
<a> wrappedBuffer ( new byte [ ] { 2 } ) , </a> 0
<a> wrappedBuffer ( new byte [ ] { 3 } ) ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> copiedBuffer ( new ByteBuffer [ ] { </a> 0
<a> ByteBuffer . wrap ( new byte [ ] { 1 , 2 , 3 } ) </a> 0
<a> } ) ) ; </a> 0
<a> assertEquals ( </a> 0
<a> wrappedBuffer ( new byte [ ] { 1 , 2 , 3 } ) , </a> 0
<a> copiedBuffer ( </a> 0
<a> ByteBuffer . wrap ( new byte [ ] { 1 } ) , </a> 0
<a> ByteBuffer . wrap ( new byte [ ] { 2 } ) , </a> 0
<a> ByteBuffer . wrap ( new byte [ ] { 3 } ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assertEquals ( "" , ByteBufUtil . <RARE_TOKEN> ( EMPTY_BUFFER ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , ByteBufUtil . <RARE_TOKEN> ( wrappedBuffer ( </a> 0
<a> new byte [ ] { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } ) ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , ByteBufUtil . <RARE_TOKEN> ( wrappedBuffer ( </a> 0
<a> new byte [ ] { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> </a> 0
<a> } ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assertEquals ( <RARE_TOKEN> , ByteBufUtil . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , ByteBufUtil . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ByteBuf buf = <RARE_TOKEN> ( buffer ( 16 ) ) ; </a> 0
<a> try { </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> buf . setByte ( 0 , ( byte ) 0 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> buf . setBytes ( 0 , EMPTY_BUFFER , 0 , 0 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> buf . setBytes ( 0 , new byte [ 0 ] , 0 , 0 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> buf . setBytes ( 0 , ByteBuffer . <RARE_TOKEN> ( 0 ) ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> buf . <RARE_TOKEN> ( 0 , ( short ) 0 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> buf . <RARE_TOKEN> ( 0 , 0 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> buf . <RARE_TOKEN> ( 0 , 0 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> buf . <RARE_TOKEN> ( 0 , 0 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> buf . setBytes ( 0 , <RARE_TOKEN> . <RARE_TOKEN> ( InputStream . class ) , 0 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException e ) { </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> buf . setBytes ( 0 , <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) , 0 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 4 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( 1 , 4 ) ; </a> 0
<a> assertEquals ( 8 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( 1 , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 4 , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( null ) . capacity ( ) ) ; </a> 1
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( new int [ 0 ] ) . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 2 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( new short [ ] { 1 , 4 } ) ; </a> 0
<a> assertEquals ( 4 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( 1 , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 4 , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( ( short [ ] ) null ) . capacity ( ) ) ; </a> 1
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( new short [ 0 ] ) . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( 1 , 4 ) ; </a> 0
<a> assertEquals ( 4 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( 1 , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 4 , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( ( int [ ] ) null ) . capacity ( ) ) ; </a> 1
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( new int [ 0 ] ) . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 3 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( 1 , 4 ) ; </a> 0
<a> assertEquals ( 6 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( 1 , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 4 , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( null ) . capacity ( ) ) ; </a> 1
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( new int [ 0 ] ) . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 8 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( 1 , 4 ) ; </a> 0
<a> assertEquals ( 16 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( 1 , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 4 , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( null ) . capacity ( ) ) ; </a> 1
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( new long [ 0 ] ) . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 4 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , buffer . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( 1 , 4 ) ; </a> 0
<a> assertEquals ( 8 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( 1 , buffer . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 4 , buffer . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( null ) . capacity ( ) ) ; </a> 1
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( new float [ 0 ] ) . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 8 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , buffer . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( 1 , 4 ) ; </a> 0
<a> assertEquals ( 16 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( 1 , buffer . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 4 , buffer . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( null ) . capacity ( ) ) ; </a> 1
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( new double [ 0 ] ) . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buffer = Unpooled . <RARE_TOKEN> ( true , false ) ; </a> 0
<a> assertEquals ( 2 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( true , buffer . <RARE_TOKEN> ( ) ) ; </a> 1
<a> assertEquals ( false , buffer . <RARE_TOKEN> ( ) ) ; </a> 1
<a> assertFalse ( buffer . readable ( ) ) ; </a> 0
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( null ) . capacity ( ) ) ; </a> 1
<a> assertEquals ( 0 , Unpooled . <RARE_TOKEN> ( new boolean [ 0 ] ) . capacity ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import java . nio . ByteOrder ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private ByteBuf buffer ; </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf <RARE_TOKEN> ( int length ) { </a> 0
<a> buffer = Unpooled . buffer ( length ) . order ( ByteOrder . <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 0 , buffer . writerIndex ( ) ) ; </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf [ ] components ( ) { </a> 0
<a> return new ByteBuf [ ] { buffer } ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import static io . netty . buffer . Unpooled . * ; </a> 1
<a> import static org . <RARE_TOKEN> . <RARE_TOKEN> . * ; </a> 1
<a> import static org . junit . Assert . * ; </a> 1
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test ( expected = NullPointerException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> new <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assertTrue ( Unpooled . <RARE_TOKEN> ( Unpooled . buffer ( 1 ) ) instanceof <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buf = Unpooled . buffer ( 1 ) ; </a> 0
<a> assertSame ( buf , ( ( <RARE_TOKEN> ) Unpooled . <RARE_TOKEN> ( buf ) ) . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buf = Unpooled . buffer ( 1 ) ; </a> 0
<a> assertSame ( Unpooled . <RARE_TOKEN> , Unpooled . <RARE_TOKEN> ( buf ) . order ( ) ) ; </a> 0
<a> buf = buf . order ( <RARE_TOKEN> ) ; </a> 0
<a> assertSame ( Unpooled . <RARE_TOKEN> , Unpooled . <RARE_TOKEN> ( buf ) . order ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buf = Unpooled . <RARE_TOKEN> ( Unpooled . buffer ( 1 ) ) ; </a> 0
<a> assertTrue ( buf . <RARE_TOKEN> ( ) instanceof <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( buf . slice ( ) instanceof <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( buf . slice ( 0 , 1 ) instanceof <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( buf . <RARE_TOKEN> ( ) instanceof <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ByteBuf buf = Unpooled . <RARE_TOKEN> ( Unpooled . buffer ( 1 ) ) ; </a> 0
<a> assertFalse ( buf . <RARE_TOKEN> ( ) instanceof <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ByteBuf buf = createStrictMock ( ByteBuf . class ) ; </a> 1
<a> expect ( buf . order ( ) ) . andReturn ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ; </a> 0
<a> expect ( buf . maxCapacity ( ) ) . andReturn ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ; </a> 0
<a> expect ( buf . readerIndex ( ) ) . andReturn ( 0 ) . <RARE_TOKEN> ( ) ; </a> 0
<a> expect ( buf . writerIndex ( ) ) . andReturn ( 0 ) . <RARE_TOKEN> ( ) ; </a> 0
<a> expect ( buf . capacity ( ) ) . andReturn ( 0 ) . <RARE_TOKEN> ( ) ; </a> 0
<a> expect ( buf . getBytes ( 1 , ( <RARE_TOKEN> ) null , 2 ) ) . andReturn ( 3 ) ; </a> 0
<a> buf . getBytes ( 4 , ( OutputStream ) null , 5 ) ; </a> 0
<a> buf . getBytes ( 6 , ( byte [ ] ) null , 7 , 8 ) ; </a> 0
<a> buf . getBytes ( 9 , ( ByteBuf ) null , 10 , 11 ) ; </a> 0
<a> buf . getBytes ( 12 , ( ByteBuffer ) null ) ; </a> 0
<a> expect ( buf . getByte ( 13 ) ) . andReturn ( <RARE_TOKEN> . valueOf ( ( byte ) 14 ) ) ; </a> 0
<a> expect ( buf . <RARE_TOKEN> ( 15 ) ) . andReturn ( <RARE_TOKEN> . valueOf ( ( short ) 16 ) ) ; </a> 0
<a> expect ( buf . <RARE_TOKEN> ( 17 ) ) . andReturn ( <RARE_TOKEN> ) ; </a> 0
<a> expect ( buf . getInt ( 19 ) ) . andReturn ( 20 ) ; </a> 0
<a> expect ( buf . getLong ( <RARE_TOKEN> ) ) . andReturn ( <RARE_TOKEN> ) ; </a> 0
<a> ByteBuffer <RARE_TOKEN> = ByteBuffer . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> expect ( buf . nioBuffer ( 23 , 24 ) ) . andReturn ( <RARE_TOKEN> ) ; </a> 0
<a> expect ( buf . capacity ( ) ) . andReturn ( 27 ) ; </a> 0
<a> replay ( buf ) ; </a> 0
<a> ByteBuf <RARE_TOKEN> = <RARE_TOKEN> ( buf ) ; </a> 0
<a> assertEquals ( 3 , <RARE_TOKEN> . getBytes ( 1 , ( <RARE_TOKEN> ) null , 2 ) ) ; </a> 0
<a> <RARE_TOKEN> . getBytes ( 4 , ( OutputStream ) null , 5 ) ; </a> 0
<a> <RARE_TOKEN> . getBytes ( 6 , ( byte [ ] ) null , 7 , 8 ) ; </a> 0
<a> <RARE_TOKEN> . getBytes ( 9 , ( ByteBuf ) null , 10 , 11 ) ; </a> 0
<a> <RARE_TOKEN> . getBytes ( 12 , ( ByteBuffer ) null ) ; </a> 0
<a> assertEquals ( ( byte ) 14 , <RARE_TOKEN> . getByte ( 13 ) ) ; </a> 0
<a> assertEquals ( ( short ) 16 , <RARE_TOKEN> . <RARE_TOKEN> ( 15 ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( 17 ) ) ; </a> 0
<a> assertEquals ( 20 , <RARE_TOKEN> . getInt ( 19 ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . getLong ( <RARE_TOKEN> ) ) ; </a> 0
<a> ByteBuffer <RARE_TOKEN> = <RARE_TOKEN> . nioBuffer ( 23 , 24 ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . capacity ( ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertEquals ( 27 , <RARE_TOKEN> . capacity ( ) ) ; </a> 0
<a> verify ( buf ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = UnsupportedOperationException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( EMPTY_BUFFER ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = UnsupportedOperationException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( EMPTY_BUFFER ) . setByte ( 0 , ( byte ) 0 ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = UnsupportedOperationException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( EMPTY_BUFFER ) . <RARE_TOKEN> ( 0 , ( short ) 0 ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = UnsupportedOperationException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( EMPTY_BUFFER ) . <RARE_TOKEN> ( 0 , 0 ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = UnsupportedOperationException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( EMPTY_BUFFER ) . <RARE_TOKEN> ( 0 , 0 ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = UnsupportedOperationException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( EMPTY_BUFFER ) . <RARE_TOKEN> ( 0 , 0 ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = UnsupportedOperationException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( EMPTY_BUFFER ) . setBytes ( 0 , ( InputStream ) null , 0 ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = UnsupportedOperationException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> <RARE_TOKEN> ( EMPTY_BUFFER ) . setBytes ( 0 , ( <RARE_TOKEN> ) null , 0 ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = UnsupportedOperationException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( EMPTY_BUFFER ) . setBytes ( 0 , ( byte [ ] ) null , 0 , 0 ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = UnsupportedOperationException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( EMPTY_BUFFER ) . setBytes ( 0 , ( ByteBuf ) null , 0 , 0 ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = UnsupportedOperationException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( EMPTY_BUFFER ) . setBytes ( 0 , ( ByteBuffer ) null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . buffer ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import java . util . Random ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final Random random = new Random ( ) ; </a> 0
<a> private ByteBuf buffer ; </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf <RARE_TOKEN> ( int length ) { </a> 0
<a> buffer = Unpooled . wrappedBuffer ( </a> 0
<a> new byte [ length * 2 ] , random . nextInt ( length - 1 ) + 1 , length ) ; </a> 0
<a> assertEquals ( length , buffer . writerIndex ( ) ) ; </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf [ ] components ( ) { </a> 0
<a> return new ByteBuf [ ] { buffer } ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = NullPointerException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> new <RARE_TOKEN> ( null , 0 , 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import static io . netty . handler . codec . http . <RARE_TOKEN> . * ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> public static String encode ( String name , String value ) { </a> 0
<a> return encode ( new <RARE_TOKEN> ( name , value ) ) ; </a> 0
<a> } </a> 0
<a> public static String encode ( Cookie cookie ) { </a> 0
<a> if ( cookie == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 0
<a> encode ( buf , cookie ) ; </a> 0
<a> return <RARE_TOKEN> ( buf ) ; </a> 0
<a> } </a> 0
<a> public static String encode ( Cookie ... <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 0
<a> for ( Cookie c : <RARE_TOKEN> ) { </a> 0
<a> if ( c == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> encode ( buf , c ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( buf ) ; </a> 0
<a> } </a> 0
<a> public static String encode ( <RARE_TOKEN> < Cookie > <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 0
<a> for ( Cookie c : <RARE_TOKEN> ) { </a> 0
<a> if ( c == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> encode ( buf , c ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( buf ) ; </a> 0
<a> } </a> 0
<a> private static void encode ( StringBuilder buf , Cookie c ) { </a> 0
<a> if ( c . <RARE_TOKEN> ( ) >= 1 ) { </a> 0
<a> add ( buf , <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> , 1 ) ; </a> 0
<a> } </a> 0
<a> add ( buf , c . getName ( ) , c . getValue ( ) ) ; </a> 0
<a> if ( c . getPath ( ) != null ) { </a> 0
<a> add ( buf , <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> , c . getPath ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( c . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> add ( buf , <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> , c . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( c . <RARE_TOKEN> ( ) >= 1 ) { </a> 0
<a> if ( ! c . <RARE_TOKEN> ( ) . isEmpty ( ) ) { </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> for ( int port : c . <RARE_TOKEN> ( ) ) { </a> 0
<a> buf . append ( port ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> buf . <RARE_TOKEN> ( buf . length ( ) - 1 , ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static Set < Cookie > decode ( String header ) { </a> 0
<a> List < String > names = new ArrayList < String > ( 8 ) ; </a> 0
<a> List < String > values = new ArrayList < String > ( 8 ) ; </a> 0
<a> <RARE_TOKEN> ( header , names , values ) ; </a> 0
<a> if ( names . isEmpty ( ) ) { </a> 0
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> int i ; </a> 0
<a> int version = 0 ; </a> 0
<a> if ( names . get ( 0 ) . equalsIgnoreCase ( <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> try { </a> 0
<a> version = Integer . parseInt ( values . get ( 0 ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> i = 1 ; </a> 0
<a> } else { </a> 0
<a> i = 0 ; </a> 0
<a> } </a> 0
<a> if ( names . size ( ) <= i ) { </a> 0
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> Set < Cookie > <RARE_TOKEN> = new <RARE_TOKEN> < Cookie > ( ) ; </a> 0
<a> for ( ; i < names . size ( ) ; i ++ ) { </a> 0
<a> String name = names . get ( i ) ; </a> 0
<a> String value = values . get ( i ) ; </a> 0
<a> if ( value == null ) { </a> 0
<a> value = "" ; </a> 0
<a> } </a> 0
<a> Cookie c = new <RARE_TOKEN> ( name , value ) ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> String path = null ; </a> 0
<a> long <RARE_TOKEN> = Long . <RARE_TOKEN> ; </a> 0
<a> List < Integer > <RARE_TOKEN> = new ArrayList < Integer > ( 2 ) ; </a> 0
<a> for ( int j = i + 1 ; j < names . size ( ) ; j ++ , i ++ ) { </a> 0
<a> name = names . get ( j ) ; </a> 0
<a> value = values . get ( j ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> . equalsIgnoreCase ( name ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . equalsIgnoreCase ( name ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . equalsIgnoreCase ( name ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . equalsIgnoreCase ( name ) ) { </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . equalsIgnoreCase ( name ) ) { </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . equalsIgnoreCase ( name ) ) { </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . equalsIgnoreCase ( name ) ) { </a> 0
<a> path = value ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . equalsIgnoreCase ( name ) ) { </a> 0
<a> try { </a> 0
<a> long <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> ( ) . <RARE_TOKEN> ( value ) . getTime ( ) - </a> 0
<a> System . currentTimeMillis ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 1
<a> <RARE_TOKEN> = 0 ; </a> 1
<a> } else { </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> / 1000 + ( <RARE_TOKEN> <RARE_TOKEN> 1000 != 0 ? 1 : 0 ) ; </a> 0
<a> } </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . equalsIgnoreCase ( name ) ) { </a> 0
<a> <RARE_TOKEN> = Integer . parseInt ( value ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . equalsIgnoreCase ( name ) ) { </a> 0
<a> version = Integer . parseInt ( value ) ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> . equalsIgnoreCase ( name ) ) { </a> 0
<a> String [ ] <RARE_TOKEN> = value . split ( <RARE_TOKEN> ) ; </a> 0
<a> for ( String <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . add ( Integer . valueOf ( <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> c . <RARE_TOKEN> ( version ) ; </a> 0
<a> c . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> c . <RARE_TOKEN> ( path ) ; </a> 0
<a> c . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> c . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> c . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( version > 0 ) { </a> 0
<a> c . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( version > 1 ) { </a> 0
<a> c . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> c . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> c . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( c ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( </a> 0
<a> final String header , final List < String > names , final List < String > values ) { </a> 0
<a> final int <RARE_TOKEN> = header . length ( ) ; </a> 0
<a> loop : for ( int i = 0 ; ; ) { </a> 0
<a> for ( ; ; ) { </a> 0
<a> if ( i == <RARE_TOKEN> ) { </a> 0
<a> break loop ; </a> 0
<a> } </a> 0
<a> switch ( header . charAt ( i ) ) { </a> 0
<a> case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : </a> 0
<a> case ' ' : case <RARE_TOKEN> : case <RARE_TOKEN> : </a> 0
<a> i ++ ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> for ( ; ; ) { </a> 0
<a> if ( i == <RARE_TOKEN> ) { </a> 0
<a> break loop ; </a> 0
<a> } </a> 0
<a> if ( header . charAt ( i ) == <RARE_TOKEN> ) { </a> 0
<a> i ++ ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> String name ; </a> 0
<a> String value ; </a> 0
<a> if ( i == <RARE_TOKEN> ) { </a> 0
<a> name = null ; </a> 0
<a> value = null ; </a> 0
<a> } else { </a> 0
<a> int <RARE_TOKEN> = i ; </a> 0
<a> <RARE_TOKEN> : for ( ; ; ) { </a> 0
<a> switch ( header . charAt ( i ) ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> name = header . substring ( <RARE_TOKEN> , i ) ; </a> 0
<a> value = null ; </a> 0
<a> break <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> name = header . substring ( <RARE_TOKEN> , i ) ; </a> 0
<a> i ++ ; </a> 0
<a> if ( i == <RARE_TOKEN> ) { </a> 0
<a> value = "" ; </a> 0
<a> break <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = i ; </a> 0
<a> char c = header . charAt ( i ) ; </a> 0
<a> if ( c == <RARE_TOKEN> || c == <RARE_TOKEN> ) { </a> 0
<a> StringBuilder <RARE_TOKEN> = new StringBuilder ( header . length ( ) - i ) ; </a> 0
<a> final char q = c ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> i ++ ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> if ( i == <RARE_TOKEN> ) { </a> 0
<a> value = <RARE_TOKEN> . toString ( ) ; </a> 0
<a> break <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> c = header . charAt ( i ++ ) ; </a> 0
<a> switch ( c ) { </a> 0
<a> case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . length ( ) - 1 , c ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> <RARE_TOKEN> . append ( c ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> c = header . charAt ( i ++ ) ; </a> 0
<a> if ( c == q ) { </a> 0
<a> value = <RARE_TOKEN> . toString ( ) ; </a> 0
<a> break <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . append ( c ) ; </a> 0
<a> if ( c == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> int <RARE_TOKEN> = header . indexOf ( <RARE_TOKEN> , i ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> value = header . substring ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> i = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> value = header . substring ( <RARE_TOKEN> ) ; </a> 0
<a> i = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> break <RARE_TOKEN> ; </a> 0
<a> default : </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> if ( i == <RARE_TOKEN> ) { </a> 0
<a> name = header . substring ( <RARE_TOKEN> ) ; </a> 0
<a> value = null ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> names . add ( name ) ; </a> 0
<a> values . add ( value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> static String <RARE_TOKEN> ( StringBuilder buf ) { </a> 0
<a> if ( buf . length ( ) > 0 ) { </a> 0
<a> buf . <RARE_TOKEN> ( buf . length ( ) - 2 ) ; </a> 0
<a> } </a> 0
<a> return buf . toString ( ) ; </a> 0
<a> } </a> 0
<a> static void add ( StringBuilder sb , String name , String val ) { </a> 0
<a> if ( val == null ) { </a> 0
<a> <RARE_TOKEN> ( sb , name , "" ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < val . length ( ) ; i ++ ) { </a> 0
<a> char c = val . charAt ( i ) ; </a> 0
<a> switch ( c ) { </a> 0
<a> case <RARE_TOKEN> : case ' ' : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( sb , name , val ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( sb , name , val ) ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( StringBuilder sb , String name , String val ) { </a> 0
<a> sb . append ( name ) ; </a> 0
<a> sb . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( val ) ; </a> 0
<a> sb . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( StringBuilder sb , String name , String val ) { </a> 0
<a> if ( val == null ) { </a> 0
<a> val = "" ; </a> 0
<a> } </a> 0
<a> sb . append ( name ) ; </a> 0
<a> sb . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( val . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> sb . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> static void add ( StringBuilder sb , String name , long val ) { </a> 0
<a> sb . append ( name ) ; </a> 0
<a> sb . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( val ) ; </a> 0
<a> sb . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> final class <RARE_TOKEN> { </a> 1
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import java . util . Collections ; </a> 1
<a> import java . util . Set ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> implements Cookie { </a> 1
<a> private final String name ; </a> 1
<a> private String value ; </a> 1
<a> private String <RARE_TOKEN> ; </a> 1
<a> private String path ; </a> 1
<a> private String <RARE_TOKEN> ; </a> 1
<a> private String <RARE_TOKEN> ; </a> 1
<a> private boolean <RARE_TOKEN> ; </a> 1
<a> private Set < Integer > <RARE_TOKEN> = Collections . <RARE_TOKEN> ( ) ; </a> 1
<a> private Set < Integer > <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private long <RARE_TOKEN> = Long . <RARE_TOKEN> ; </a> 1
<a> private int version ; </a> 1
<a> private boolean <RARE_TOKEN> ; </a> 1
<a> private boolean <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( String name , String value ) { </a> 1
<a> if ( name == null ) { </a> 0
<a> throw new NullPointerException ( "name" ) ; </a> 0
<a> } </a> 0
<a> name = name . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( name . length ( ) == 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> for ( int i = 0 ; i < name . length ( ) ; i ++ ) { </a> 1
<a> char c = name . charAt ( i ) ; </a> 1
<a> if ( c > <RARE_TOKEN> ) { </a> 1
<a> throw new IllegalArgumentException ( </a> 1
<a> <RARE_TOKEN> contains <RARE_TOKEN> <RARE_TOKEN> " + name ) ; </a> 1
<a> } </a> 1
<a> switch ( c ) { </a> 1
<a> case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : </a> 1
<a> case ' ' : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : </a> 1
<a> throw new IllegalArgumentException ( </a> 1
<a> <RARE_TOKEN> contains one of the <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> " + name ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> if ( name . charAt ( 0 ) == <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> " + name ) ; </a> 0
<a> } </a> 1
<a> this . name = name ; </a> 1
<a> <RARE_TOKEN> ( value ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String getName ( ) { </a> 0
<a> return name ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String getValue ( ) { </a> 0
<a> return value ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( String value ) { </a> 1
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . value = value ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String getPath ( ) { </a> 0
<a> return path ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( String path ) { </a> 1
<a> this . path = <RARE_TOKEN> ( <RARE_TOKEN> , path ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public Set < Integer > <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> <RARE_TOKEN> = Collections . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int ... <RARE_TOKEN> ) { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> int [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> . length == 0 ) { </a> 1
<a> <RARE_TOKEN> = this . <RARE_TOKEN> = Collections . <RARE_TOKEN> ( ) ; </a> 1
<a> } else { </a> 1
<a> Set < Integer > <RARE_TOKEN> = new <RARE_TOKEN> < Integer > ( ) ; </a> 1
<a> for ( int p : <RARE_TOKEN> ) { </a> 1
<a> if ( p <= 0 || p > <RARE_TOKEN> ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> out of <RARE_TOKEN> " + p ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . add ( Integer . valueOf ( p ) ) ; </a> 1
<a> } </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> = null ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> < Integer > <RARE_TOKEN> ) { </a> 1
<a> Set < Integer > <RARE_TOKEN> = new <RARE_TOKEN> < Integer > ( ) ; </a> 1
<a> for ( int p : <RARE_TOKEN> ) { </a> 1
<a> if ( p <= 0 || p > <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> out of <RARE_TOKEN> " + p ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( Integer . valueOf ( p ) ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 1
<a> <RARE_TOKEN> = this . <RARE_TOKEN> = Collections . <RARE_TOKEN> ( ) ; </a> 1
<a> } else { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> = null ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( long <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return version ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int version ) { </a> 1
<a> this . version = version ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int hashCode ( ) { </a> 1
<a> return getName ( ) . hashCode ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean equals ( Object o ) { </a> 1
<a> if ( ! ( o instanceof Cookie ) ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> Cookie that = ( Cookie ) o ; </a> 1
<a> if ( ! getName ( ) . equalsIgnoreCase ( that . getName ( ) ) ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> if ( getPath ( ) == null ) { </a> 1
<a> if ( that . getPath ( ) != null ) { </a> 1
<a> return false ; </a> 0
<a> } </a> 0
<a> } else if ( that . getPath ( ) == null ) { </a> 1
<a> return false ; </a> 1
<a> } else if ( ! getPath ( ) . equals ( that . getPath ( ) ) ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> ( ) == null ) { </a> 1
<a> if ( that . <RARE_TOKEN> ( ) != null ) { </a> 1
<a> return false ; </a> 0
<a> } </a> 0
<a> } else if ( that . <RARE_TOKEN> ( ) == null ) { </a> 1
<a> return false ; </a> 1
<a> } else { </a> 1
<a> return <RARE_TOKEN> ( ) . equalsIgnoreCase ( that . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 1
<a> return true ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( Cookie c ) { </a> 1
<a> int v ; </a> 1
<a> v = getName ( ) . <RARE_TOKEN> ( c . getName ( ) ) ; </a> 1
<a> if ( v != 0 ) { </a> 1
<a> return v ; </a> 1
<a> } </a> 1
<a> if ( getPath ( ) == null ) { </a> 1
<a> if ( c . getPath ( ) != null ) { </a> 1
<a> return - 1 ; </a> 1
<a> } </a> 0
<a> } else if ( c . getPath ( ) == null ) { </a> 1
<a> return 1 ; </a> 1
<a> } else { </a> 1
<a> v = getPath ( ) . <RARE_TOKEN> ( c . getPath ( ) ) ; </a> 1
<a> if ( v != 0 ) { </a> 1
<a> return v ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> ( ) == null ) { </a> 1
<a> if ( c . <RARE_TOKEN> ( ) != null ) { </a> 1
<a> return - 1 ; </a> 1
<a> } </a> 0
<a> } else if ( c . <RARE_TOKEN> ( ) == null ) { </a> 1
<a> return 1 ; </a> 1
<a> } else { </a> 1
<a> v = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( c . <RARE_TOKEN> ( ) ) ; </a> 1
<a> return v ; </a> 1
<a> } </a> 1
<a> return 0 ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String toString ( ) { </a> 1
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 1
<a> buf . append ( getName ( ) ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( getValue ( ) ) ; </a> 1
<a> if ( <RARE_TOKEN> ( ) != null ) { </a> 1
<a> buf . append ( ", <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( getPath ( ) != null ) { </a> 1
<a> buf . append ( ", <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( getPath ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> ( ) != null ) { </a> 1
<a> buf . append ( ", <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> ( ) >= 0 ) { </a> 1
<a> buf . append ( ", <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> buf . append ( ", <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> buf . append ( ", <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> return buf . toString ( ) ; </a> 1
<a> } </a> 1
<a> private static String <RARE_TOKEN> ( String name , String value ) { </a> 1
<a> if ( value == null ) { </a> 1
<a> return null ; </a> 1
<a> } </a> 1
<a> value = value . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( value . length ( ) == 0 ) { </a> 0
<a> return null ; </a> 1
<a> } </a> 1
<a> for ( int i = 0 ; i < value . length ( ) ; i ++ ) { </a> 1
<a> char c = value . charAt ( i ) ; </a> 1
<a> switch ( c ) { </a> 1
<a> case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : </a> 1
<a> throw new IllegalArgumentException ( </a> 1
<a> name + " contains one of the <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> + value + <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> return value ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import java . util . List ; </a> 1
<a> import java . util . Map ; </a> 0
<a> import java . util . Set ; </a> 1
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final HttpHeaders headers = new HttpHeaders ( ) { </a> 1
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( String name ) { </a> 0
<a> super . <RARE_TOKEN> ( name ) ; </a> 0
<a> if ( name . equalsIgnoreCase ( HttpHeaders . Names . <RARE_TOKEN> ) || </a> 0
<a> name . equalsIgnoreCase ( HttpHeaders . Names . <RARE_TOKEN> ) || </a> 0
<a> name . equalsIgnoreCase ( HttpHeaders . Names . <RARE_TOKEN> ) ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + name ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public boolean isLast ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void addHeader ( final String name , final Object value ) { </a> 1
<a> headers . addHeader ( name , value ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setHeader ( final String name , final Object value ) { </a> 1
<a> headers . setHeader ( name , value ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setHeader ( final String name , final <RARE_TOKEN> < ? > values ) { </a> 1
<a> headers . setHeader ( name , values ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void removeHeader ( final String name ) { </a> 1
<a> headers . removeHeader ( name ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> headers . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public String getHeader ( final String name ) { </a> 1
<a> return headers . getHeader ( name ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public List < String > getHeaders ( final String name ) { </a> 1
<a> return headers . getHeaders ( name ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public List < Map . Entry < String , String > > getHeaders ( ) { </a> 1
<a> return headers . getHeaders ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( final String name ) { </a> 1
<a> return headers . <RARE_TOKEN> ( name ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public Set < String > <RARE_TOKEN> ( ) { </a> 1
<a> return headers . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuf getContent ( ) { </a> 0
<a> return Unpooled . EMPTY_BUFFER ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ByteBuf content ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . util . internal . StringUtil ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements HttpResponse { </a> 0
<a> private HttpResponseStatus status ; </a> 1
<a> public <RARE_TOKEN> ( HttpVersion version , HttpResponseStatus status ) { </a> 0
<a> super ( version ) ; </a> 1
<a> <RARE_TOKEN> ( status ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public HttpResponseStatus getStatus ( ) { </a> 1
<a> return status ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( HttpResponseStatus status ) { </a> 1
<a> if ( status == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . status = status ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public String toString ( ) { </a> 1
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 1
<a> buf . append ( getClass ( ) . getSimpleName ( ) ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> " ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) ; </a> 1
<a> buf . append ( ' ' ) ; </a> 1
<a> buf . append ( getStatus ( ) . toString ( ) ) ; </a> 1
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> <RARE_TOKEN> ( buf ) ; </a> 1
<a> buf . <RARE_TOKEN> ( buf . length ( ) - StringUtil . NEWLINE . length ( ) ) ; </a> 1
<a> return buf . toString ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import java . util . Collections ; </a> 1
<a> import java . util . List ; </a> 1
<a> import java . util . Map ; </a> 1
<a> import java . util . Set ; </a> 1
<a> public interface HttpChunk { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 1
<a> public ByteBuf getContent ( ) { </a> 1
<a> return Unpooled . EMPTY_BUFFER ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ByteBuf content ) { </a> 1
<a> throw new IllegalStateException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 1
<a> public boolean isLast ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void addHeader ( String name , Object value ) { </a> 1
<a> throw new IllegalStateException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( String name ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public String getHeader ( String name ) { </a> 1
<a> return null ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public Set < String > <RARE_TOKEN> ( ) { </a> 1
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public List < String > getHeaders ( String name ) { </a> 1
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public List < Map . Entry < String , String > > getHeaders ( ) { </a> 1
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void removeHeader ( String name ) { </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setHeader ( String name , Object value ) { </a> 1
<a> throw new IllegalStateException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void setHeader ( String name , <RARE_TOKEN> < ? > values ) { </a> 1
<a> throw new IllegalStateException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> boolean isLast ( ) ; </a> 0
<a> ByteBuf getContent ( ) ; </a> 1
<a> void <RARE_TOKEN> ( ByteBuf content ) ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import static io . netty . handler . codec . http . HttpHeaders . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 1
<a> import java . util . Map . Entry ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object , HttpMessage > { </a> 0
<a> public static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final ByteBuf <RARE_TOKEN> = Unpooled . copiedBuffer ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private HttpMessage <RARE_TOKEN> ; </a> 1
<a> private int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private ChannelHandlerContext ctx ; </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public final void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 2 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> + </a> 0
<a> " (expected: >= <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ctx == null ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> throw new IllegalStateException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> is <RARE_TOKEN> to a <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof HttpMessage || msg instanceof HttpChunk ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public HttpMessage decode ( ChannelHandlerContext ctx , Object msg ) throws Exception { </a> 0
<a> HttpMessage <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> if ( msg instanceof HttpMessage ) { </a> 0
<a> HttpMessage m = ( HttpMessage ) msg ; </a> 0
<a> if ( <RARE_TOKEN> ( m ) ) { </a> 0
<a> ctx . write ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> switch ( m . <RARE_TOKEN> ( ) ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> return m ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> m . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> m . <RARE_TOKEN> ( Unpooled . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> this . <RARE_TOKEN> = m ; </a> 0
<a> return null ; </a> 1
<a> default : </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof HttpChunk ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> throw new IllegalStateException ( </a> 1
<a> <RARE_TOKEN> " + HttpChunk . class . getSimpleName ( ) + </a> 0
<a> " <RARE_TOKEN> " + HttpMessage . class . getSimpleName ( ) + </a> 0
<a> " or last <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> HttpChunk chunk = ( HttpChunk ) msg ; </a> 0
<a> ByteBuf content = <RARE_TOKEN> . getContent ( ) ; </a> 1
<a> if ( content . readableBytes ( ) > <RARE_TOKEN> - chunk . getContent ( ) . readableBytes ( ) ) { </a> 1
<a> throw new TooLongFrameException ( </a> 0
<a> <RARE_TOKEN> content length <RARE_TOKEN> " + <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( chunk . getContent ( ) ) ; </a> 0
<a> if ( chunk . isLast ( ) ) { </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> if ( chunk instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) chunk ; </a> 0
<a> for ( Entry < String , String > header : <RARE_TOKEN> . getHeaders ( ) ) { </a> 1
<a> <RARE_TOKEN> . setHeader ( header . <RARE_TOKEN> ( ) , header . getValue ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . setHeader ( </a> 1
<a> HttpHeaders . Names . <RARE_TOKEN> , </a> 0
<a> String . valueOf ( content . readableBytes ( ) ) ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } else { </a> 1
<a> return null ; </a> 1
<a> } </a> 0
<a> } else { </a> 0
<a> throw new IllegalStateException ( </a> 1
<a> <RARE_TOKEN> " + HttpMessage . class . getSimpleName ( ) + " <RARE_TOKEN> " + </a> 0
<a> HttpChunk . class . getSimpleName ( ) + " <RARE_TOKEN> <RARE_TOKEN> " + msg . getClass ( ) . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ByteBuf input ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> . getContent ( ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( input ) ; </a> 1
<a> <RARE_TOKEN> . writerIndex ( <RARE_TOKEN> . capacity ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> this . ctx = ctx ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . atomic . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> final <RARE_TOKEN> < HttpMethod > queue = new <RARE_TOKEN> < HttpMethod > ( ) ; </a> 0
<a> volatile boolean done ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , false ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int <RARE_TOKEN> , int maxHeaderSize , int maxChunkSize ) { </a> 0
<a> this ( <RARE_TOKEN> , maxHeaderSize , maxChunkSize , false ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int <RARE_TOKEN> , int maxHeaderSize , int maxChunkSize , </a> 0
<a> boolean <RARE_TOKEN> ) { </a> 0
<a> init ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> , maxHeaderSize , maxChunkSize ) , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void encode ( </a> 0
<a> ChannelHandlerContext ctx , Object msg , ByteBuf out ) throws Exception { </a> 0
<a> if ( msg instanceof HttpRequest && ! done ) { </a> 0
<a> queue . <RARE_TOKEN> ( ( ( HttpRequest ) msg ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> super . encode ( ctx , msg , out ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> if ( msg instanceof HttpRequest && ( ( HttpMessage ) msg ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( msg instanceof HttpChunk && ( ( HttpChunk ) msg ) . isLast ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( int <RARE_TOKEN> , int maxHeaderSize , int maxChunkSize ) { </a> 0
<a> super ( <RARE_TOKEN> , maxHeaderSize , maxChunkSize ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object decode ( </a> 0
<a> ChannelHandlerContext ctx , ByteBuf buffer ) throws Exception { </a> 1
<a> if ( done ) { </a> 0
<a> return buffer . readBytes ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> Object msg = super . decode ( ctx , buffer ) ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( msg ) ; </a> 1
<a> } </a> 0
<a> return msg ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Object msg ) { </a> 0
<a> if ( msg == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( msg instanceof HttpMessage && ( ( HttpMessage ) msg ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( msg instanceof HttpChunk && ( ( HttpChunk ) msg ) . isLast ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( msg instanceof Object [ ] ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( HttpMessage msg ) { </a> 0
<a> final int statusCode = ( ( HttpResponse ) msg ) . getStatus ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( statusCode == <RARE_TOKEN> ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> HttpMethod method = queue . poll ( ) ; </a> 0
<a> char <RARE_TOKEN> = method . getName ( ) . charAt ( 0 ) ; </a> 1
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( HttpMethod . <RARE_TOKEN> . equals ( method ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( statusCode == 200 ) { </a> 0
<a> if ( HttpMethod . <RARE_TOKEN> . equals ( method ) ) { </a> 0
<a> done = true ; </a> 0
<a> queue . clear ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> return super . <RARE_TOKEN> ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) </a> 0
<a> throws Exception { </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> ctx . fireExceptionCaught ( new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . nio . charset . Charset ; </a> 0
<a> public final class HttpConstants { </a> 0
<a> public static final byte <RARE_TOKEN> = 32 ; </a> 0
<a> public static final byte <RARE_TOKEN> = 9 ; </a> 0
<a> public static final byte <RARE_TOKEN> = 13 ; </a> 0
<a> public static final byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final byte <RARE_TOKEN> = 10 ; </a> 0
<a> public static final byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final Charset <RARE_TOKEN> = CharsetUtil . <RARE_TOKEN> ; </a> 0
<a> private HttpConstants ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . ZlibWrapper ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final int compressionLevel ; </a> 0
<a> private final int windowBits ; </a> 0
<a> private final int memLevel ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( 6 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int compressionLevel ) { </a> 0
<a> this ( compressionLevel , 15 , 8 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int compressionLevel , int windowBits , int memLevel ) { </a> 0
<a> if ( compressionLevel < 0 || compressionLevel > 9 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + compressionLevel + </a> 0
<a> " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( windowBits < 9 || windowBits > 15 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + windowBits + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( memLevel < 1 || memLevel > 9 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + memLevel + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . compressionLevel = compressionLevel ; </a> 0
<a> this . windowBits = windowBits ; </a> 0
<a> this . memLevel = memLevel ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected Result <RARE_TOKEN> ( HttpMessage msg , String <RARE_TOKEN> ) throws Exception { </a> 0
<a> String <RARE_TOKEN> = msg . getHeader ( HttpHeaders . Names . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && </a> 0
<a> ! HttpHeaders . Values . <RARE_TOKEN> . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> ZlibWrapper wrapper = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( wrapper == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> ; </a> 0
<a> switch ( wrapper ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> return new Result ( </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> new EmbeddedByteChannel ( <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> wrapper , compressionLevel , windowBits , memLevel ) ) ) ; </a> 0
<a> } </a> 0
<a> protected ZlibWrapper <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> float <RARE_TOKEN> = - <RARE_TOKEN> ; </a> 0
<a> float <RARE_TOKEN> = - <RARE_TOKEN> ; </a> 0
<a> float <RARE_TOKEN> = - <RARE_TOKEN> ; </a> 0
<a> for ( String <RARE_TOKEN> : <RARE_TOKEN> . split ( <RARE_TOKEN> ) ) { </a> 0
<a> float q = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . indexOf ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != - 1 ) { </a> 0
<a> try { </a> 0
<a> q = <RARE_TOKEN> . valueOf ( <RARE_TOKEN> . substring ( <RARE_TOKEN> + 1 ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> q = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = q ; </a> 0
<a> } else if ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) && q > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = q ; </a> 0
<a> } else if ( <RARE_TOKEN> . contains ( <RARE_TOKEN> ) && q > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = q ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> || <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> return ZlibWrapper . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return ZlibWrapper . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == - <RARE_TOKEN> ) { </a> 0
<a> return ZlibWrapper . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == - <RARE_TOKEN> ) { </a> 0
<a> return ZlibWrapper . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> < Object , Object > { </a> 0
<a> private EmbeddedByteChannel <RARE_TOKEN> ; </a> 1
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof HttpMessage || msg instanceof HttpChunk ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object decode ( ChannelHandlerContext ctx , Object msg ) throws Exception { </a> 0
<a> if ( msg instanceof HttpResponse && ( ( HttpResponse ) msg ) . getStatus ( ) . <RARE_TOKEN> ( ) == <RARE_TOKEN> ) { </a> 0
<a> return msg ; </a> 1
<a> } else if ( msg instanceof HttpMessage ) { </a> 0
<a> HttpMessage m = ( HttpMessage ) msg ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = m . getHeader ( HttpHeaders . Names . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = </a> 0
<a> m . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) || m . getContent ( ) . readable ( ) ; </a> 0
<a> if ( <RARE_TOKEN> && ( <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ) != null ) { </a> 0
<a> m . setHeader ( </a> 1
<a> HttpHeaders . Names . <RARE_TOKEN> , </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 1
<a> if ( m . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> ByteBuf content = m . getContent ( ) ; </a> 0
<a> ByteBuf <RARE_TOKEN> = Unpooled . buffer ( ) ; </a> 0
<a> decode ( content , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> m . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( m . <RARE_TOKEN> ( HttpHeaders . Names . <RARE_TOKEN> ) ) { </a> 0
<a> m . setHeader ( </a> 0
<a> HttpHeaders . Names . <RARE_TOKEN> , </a> 0
<a> Integer . toString ( <RARE_TOKEN> . readableBytes ( ) ) ) ; </a> 0
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof HttpChunk ) { </a> 0
<a> HttpChunk c = ( HttpChunk ) msg ; </a> 0
<a> ByteBuf content = c . getContent ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( ! c . isLast ( ) ) { </a> 0
<a> ByteBuf <RARE_TOKEN> = Unpooled . buffer ( ) ; </a> 0
<a> decode ( content , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . readable ( ) ) { </a> 0
<a> c . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> ByteBuf <RARE_TOKEN> = Unpooled . buffer ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . readable ( ) ) { </a> 0
<a> return new Object [ ] { new <RARE_TOKEN> ( <RARE_TOKEN> ) , c } ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return msg ; </a> 0
<a> } </a> 0
<a> protected abstract EmbeddedByteChannel <RARE_TOKEN> ( String <RARE_TOKEN> ) throws Exception ; </a> 1
<a> protected String <RARE_TOKEN> ( String <RARE_TOKEN> ) throws Exception { </a> 0
<a> return HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( Unpooled . buffer ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> private void decode ( ByteBuf in , ByteBuf out ) { </a> 0
<a> <RARE_TOKEN> . writeInbound ( in ) ; </a> 0
<a> <RARE_TOKEN> ( out ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ByteBuf out ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( out ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ByteBuf out ) { </a> 0
<a> for ( ; ; ) { </a> 0
<a> ByteBuf buf = ( ByteBuf ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( buf == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> out . writeBytes ( buf ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> super ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Date <RARE_TOKEN> ( String text , <RARE_TOKEN> pos ) { </a> 0
<a> Date <RARE_TOKEN> = super . <RARE_TOKEN> ( text , pos ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( text , pos ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( text , pos ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> super ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> super ( <RARE_TOKEN> <RARE_TOKEN> d <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> import java . util . Date ; </a> 1
<a> import java . util . List ; </a> 1
<a> import java . util . Map ; </a> 1
<a> import java . util . Set ; </a> 1
<a> public interface HttpMessage { </a> 0
<a> String getHeader ( String name ) ; </a> 1
<a> List < String > getHeaders ( String name ) ; </a> 1
<a> List < Map . Entry < String , String > > getHeaders ( ) ; </a> 1
<a> boolean <RARE_TOKEN> ( String name ) ; </a> 1
<a> Set < String > <RARE_TOKEN> ( ) ; </a> 1
<a> HttpVersion <RARE_TOKEN> ( ) ; </a> 1
<a> void <RARE_TOKEN> ( HttpVersion version ) ; </a> 1
<a> ByteBuf getContent ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ByteBuf content ) ; </a> 0
<a> void addHeader ( String name , Object value ) ; </a> 1
<a> void setHeader ( String name , Object value ) ; </a> 1
<a> void setHeader ( String name , <RARE_TOKEN> < ? > values ) ; </a> 1
<a> void removeHeader ( String name ) ; </a> 1
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import java . util . List ; </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> < Object , <RARE_TOKEN> . State > { </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final int maxHeaderSize ; </a> 0
<a> private final int maxChunkSize ; </a> 0
<a> private HttpMessage message ; </a> 0
<a> private ByteBuf content ; </a> 0
<a> private long chunkSize ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> protected enum State { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> ( </a> 0
<a> int <RARE_TOKEN> , int maxHeaderSize , int maxChunkSize ) { </a> 0
<a> super ( State . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( maxHeaderSize <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> maxHeaderSize ) ; </a> 0
<a> } </a> 0
<a> if ( maxChunkSize < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> maxChunkSize ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . maxHeaderSize = maxHeaderSize ; </a> 0
<a> this . maxChunkSize = maxChunkSize ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object decode ( ChannelHandlerContext ctx , ByteBuf buffer ) throws Exception { </a> 0
<a> switch ( state ( ) ) { </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( buffer ) ; </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> String [ ] <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ( buffer , <RARE_TOKEN> ) ) ; </a> 0
<a> if ( <RARE_TOKEN> . length < 3 ) { </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> message = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> State <RARE_TOKEN> = <RARE_TOKEN> ( buffer ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == State . <RARE_TOKEN> ) { </a> 0
<a> return message ; </a> 1
<a> } else if ( <RARE_TOKEN> == State . <RARE_TOKEN> ) { </a> 0
<a> return message ; </a> 0
<a> } else { </a> 0
<a> long <RARE_TOKEN> = HttpHeaders . <RARE_TOKEN> ( message , - 1 ) ; </a> 0
<a> if ( <RARE_TOKEN> == 0 || <RARE_TOKEN> == - 1 && <RARE_TOKEN> ( ) ) { </a> 0
<a> content = Unpooled . EMPTY_BUFFER ; </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( <RARE_TOKEN> > maxChunkSize || HttpHeaders . <RARE_TOKEN> ( message ) ) { </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> message . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> chunkSize = HttpHeaders . <RARE_TOKEN> ( message , - 1 ) ; </a> 0
<a> return message ; </a> 1
<a> } </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( buffer . readableBytes ( ) > maxChunkSize || HttpHeaders . <RARE_TOKEN> ( message ) ) { </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> message . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> return message ; </a> 1
<a> } </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new IllegalStateException ( "Unexpected <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> > maxChunkSize ) { </a> 0
<a> <RARE_TOKEN> = maxChunkSize ; </a> 0
<a> } </a> 0
<a> if ( message . <RARE_TOKEN> ( ) != <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> message . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> return new Object [ ] { message , new <RARE_TOKEN> ( buffer . readBytes ( <RARE_TOKEN> ) ) } ; </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( buffer . readBytes ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> > maxChunkSize ) { </a> 0
<a> <RARE_TOKEN> = maxChunkSize ; </a> 0
<a> } </a> 0
<a> HttpChunk chunk = new <RARE_TOKEN> ( buffer . readBytes ( <RARE_TOKEN> ) ) ; </a> 0
<a> if ( ! buffer . readable ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! chunk . isLast ( ) ) { </a> 0
<a> return new Object [ ] { chunk , HttpChunk . <RARE_TOKEN> } ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return chunk ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> return <RARE_TOKEN> ( buffer ) ; </a> 1
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> assert chunkSize <= Integer . MAX_VALUE ; </a> 0
<a> int chunkSize = ( int ) this . chunkSize ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = chunkSize ; </a> 0
<a> if ( <RARE_TOKEN> > maxChunkSize ) { </a> 0
<a> <RARE_TOKEN> = maxChunkSize ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> HttpChunk chunk = new <RARE_TOKEN> ( buffer . readBytes ( <RARE_TOKEN> ) ) ; </a> 0
<a> if ( chunkSize > <RARE_TOKEN> ) { </a> 0
<a> chunkSize -= <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> chunkSize = 0 ; </a> 0
<a> } </a> 0
<a> this . chunkSize = chunkSize ; </a> 0
<a> if ( chunkSize == 0 ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! chunk . isLast ( ) ) { </a> 0
<a> return new Object [ ] { chunk , HttpChunk . <RARE_TOKEN> } ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return chunk ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( buffer , <RARE_TOKEN> ) ; </a> 0
<a> int chunkSize = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> this . chunkSize = chunkSize ; </a> 0
<a> if ( chunkSize == 0 ) { </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 1
<a> } else if ( chunkSize > maxChunkSize ) { </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> assert chunkSize <= Integer . MAX_VALUE ; </a> 0
<a> HttpChunk chunk = new <RARE_TOKEN> ( buffer . readBytes ( ( int ) chunkSize ) ) ; </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> return chunk ; </a> 1
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> assert chunkSize <= Integer . MAX_VALUE ; </a> 0
<a> int chunkSize = ( int ) this . chunkSize ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = chunkSize ; </a> 0
<a> if ( <RARE_TOKEN> > maxChunkSize ) { </a> 0
<a> <RARE_TOKEN> = maxChunkSize ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> HttpChunk chunk = new <RARE_TOKEN> ( buffer . readBytes ( <RARE_TOKEN> ) ) ; </a> 0
<a> if ( chunkSize > <RARE_TOKEN> ) { </a> 0
<a> chunkSize -= <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> chunkSize = 0 ; </a> 0
<a> } </a> 0
<a> this . chunkSize = chunkSize ; </a> 0
<a> if ( chunkSize == 0 ) { </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! chunk . isLast ( ) ) { </a> 0
<a> return chunk ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> for ( ; ; ) { </a> 0
<a> byte next = buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( next == HttpConstants . <RARE_TOKEN> ) { </a> 0
<a> if ( buffer . <RARE_TOKEN> ( ) == HttpConstants . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> } else if ( next == HttpConstants . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( buffer ) ; </a> 0
<a> if ( maxChunkSize == 0 ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 1
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> default : { </a> 0
<a> throw new Error ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected boolean <RARE_TOKEN> ( HttpMessage msg ) { </a> 0
<a> if ( msg instanceof HttpResponse ) { </a> 0
<a> HttpResponse res = ( HttpResponse ) msg ; </a> 0
<a> int code = res . getStatus ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( code >= <RARE_TOKEN> && code < 200 ) { </a> 0
<a> if ( code == <RARE_TOKEN> && ! res . <RARE_TOKEN> ( HttpHeaders . Names . <RARE_TOKEN> ) ) { </a> 1
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> switch ( code ) { </a> 0
<a> case <RARE_TOKEN> : case <RARE_TOKEN> : case <RARE_TOKEN> : </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private Object <RARE_TOKEN> ( ) { </a> 1
<a> HttpMessage message = this . message ; </a> 0
<a> ByteBuf content = this . content ; </a> 0
<a> if ( content != null ) { </a> 0
<a> message . <RARE_TOKEN> ( content ) ; </a> 0
<a> this . content = null ; </a> 0
<a> } </a> 0
<a> this . message = null ; </a> 0
<a> <RARE_TOKEN> ( State . <RARE_TOKEN> ) ; </a> 0
<a> return message ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> for ( ; ; ) { </a> 0
<a> char c = ( char ) buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( c ) && </a> 0
<a> ! <RARE_TOKEN> . <RARE_TOKEN> ( c ) ) { </a> 0
<a> buffer . readerIndex ( buffer . readerIndex ( ) - 1 ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private Object <RARE_TOKEN> ( ByteBuf buffer ) { </a> 1
<a> long length = HttpHeaders . <RARE_TOKEN> ( message , - 1 ) ; </a> 0
<a> assert length <= Integer . MAX_VALUE ; </a> 0
<a> int <RARE_TOKEN> = ( int ) length - <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> if ( length < <RARE_TOKEN> ) { </a> 0
<a> if ( message . <RARE_TOKEN> ( ) != <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> message . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> return new Object [ ] { message , new <RARE_TOKEN> ( read ( buffer , <RARE_TOKEN> ) ) } ; </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( read ( buffer , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( content == null ) { </a> 0
<a> content = read ( buffer , ( int ) length ) ; </a> 0
<a> } else { </a> 0
<a> content . writeBytes ( buffer . readBytes ( ( int ) length ) ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private ByteBuf read ( ByteBuf buffer , int len ) { </a> 0
<a> ByteBuf internal = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( internal . readableBytes ( ) >= len ) { </a> 0
<a> int index = internal . readerIndex ( ) ; </a> 0
<a> ByteBuf buf = internal . slice ( index , len ) ; </a> 0
<a> buffer . readerIndex ( index + len ) ; </a> 0
<a> return buf ; </a> 0
<a> } else { </a> 0
<a> return buffer . readBytes ( len ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private State <RARE_TOKEN> ( ByteBuf buffer ) throws TooLongFrameException { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> final HttpMessage message = this . message ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( buffer ) ; </a> 0
<a> String name = null ; </a> 0
<a> String value = null ; </a> 0
<a> if ( <RARE_TOKEN> . length ( ) != 0 ) { </a> 0
<a> message . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> { </a> 0
<a> char <RARE_TOKEN> = <RARE_TOKEN> . charAt ( 0 ) ; </a> 0
<a> if ( name != null && ( <RARE_TOKEN> == ' ' || <RARE_TOKEN> == <RARE_TOKEN> ) ) { </a> 0
<a> value = value + ' ' + <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> if ( name != null ) { </a> 0
<a> message . addHeader ( name , value ) ; </a> 1
<a> } </a> 0
<a> String [ ] header = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> name = header [ 0 ] ; </a> 0
<a> value = header [ 1 ] ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( buffer ) ; </a> 0
<a> } while ( <RARE_TOKEN> . length ( ) != 0 ) ; </a> 0
<a> if ( name != null ) { </a> 0
<a> message . addHeader ( name , value ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> State <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> ( message ) ) { </a> 0
<a> message . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = State . <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> . <RARE_TOKEN> ( message ) ) { </a> 0
<a> message . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = State . <RARE_TOKEN> ; </a> 0
<a> } else if ( HttpHeaders . <RARE_TOKEN> ( message , - 1 ) >= 0 ) { </a> 0
<a> <RARE_TOKEN> = State . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( ByteBuf buffer ) throws TooLongFrameException { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( buffer ) ; </a> 0
<a> String <RARE_TOKEN> = null ; </a> 0
<a> if ( <RARE_TOKEN> . length ( ) != 0 ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> char <RARE_TOKEN> = <RARE_TOKEN> . charAt ( 0 ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && ( <RARE_TOKEN> == ' ' || <RARE_TOKEN> == <RARE_TOKEN> ) ) { </a> 0
<a> List < String > current = <RARE_TOKEN> . getHeaders ( <RARE_TOKEN> ) ; </a> 1
<a> if ( current . size ( ) != 0 ) { </a> 0
<a> int <RARE_TOKEN> = current . size ( ) - 1 ; </a> 0
<a> String <RARE_TOKEN> = current . get ( <RARE_TOKEN> ) + <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> current . set ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> String [ ] header = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String name = header [ 0 ] ; </a> 0
<a> if ( ! name . equalsIgnoreCase ( HttpHeaders . Names . <RARE_TOKEN> ) && </a> 0
<a> ! name . equalsIgnoreCase ( HttpHeaders . Names . <RARE_TOKEN> ) && </a> 0
<a> ! name . equalsIgnoreCase ( HttpHeaders . Names . <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . addHeader ( name , header [ 1 ] ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> = name ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( buffer ) ; </a> 0
<a> } while ( <RARE_TOKEN> . length ( ) != 0 ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return HttpChunk . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private String <RARE_TOKEN> ( ByteBuf buffer ) throws TooLongFrameException { </a> 0
<a> StringBuilder sb = new StringBuilder ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> loop : </a> 0
<a> for ( ; ; ) { </a> 0
<a> char <RARE_TOKEN> = ( char ) buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case HttpConstants . <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = ( char ) buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> if ( <RARE_TOKEN> == HttpConstants . <RARE_TOKEN> ) { </a> 0
<a> break loop ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> case HttpConstants . <RARE_TOKEN> : </a> 0
<a> break loop ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> >= maxHeaderSize ) { </a> 0
<a> throw new TooLongFrameException ( </a> 0
<a> <RARE_TOKEN> header is <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> maxHeaderSize + " <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> sb . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return sb . toString ( ) ; </a> 0
<a> } </a> 0
<a> protected abstract boolean <RARE_TOKEN> ( ) ; </a> 0
<a> protected abstract HttpMessage <RARE_TOKEN> ( String [ ] <RARE_TOKEN> ) throws Exception ; </a> 0
<a> private static int <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ( ) ; i ++ ) { </a> 0
<a> char c = <RARE_TOKEN> . charAt ( i ) ; </a> 0
<a> if ( c == <RARE_TOKEN> || <RARE_TOKEN> . <RARE_TOKEN> ( c ) || <RARE_TOKEN> . <RARE_TOKEN> ( c ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . substring ( 0 , i ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return Integer . parseInt ( <RARE_TOKEN> , 16 ) ; </a> 0
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( ByteBuf buffer , int <RARE_TOKEN> ) throws TooLongFrameException { </a> 0
<a> StringBuilder sb = new StringBuilder ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> while ( true ) { </a> 0
<a> byte <RARE_TOKEN> = buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == HttpConstants . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == HttpConstants . <RARE_TOKEN> ) { </a> 0
<a> return sb . toString ( ) ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> == HttpConstants . <RARE_TOKEN> ) { </a> 0
<a> return sb . toString ( ) ; </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> throw new TooLongFrameException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> + </a> 0
<a> " <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> sb . append ( ( char ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static String [ ] <RARE_TOKEN> ( String sb ) { </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( sb , 0 ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( sb , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( sb , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( sb , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( sb , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( sb ) ; </a> 0
<a> return new String [ ] { </a> 0
<a> sb . substring ( <RARE_TOKEN> , <RARE_TOKEN> ) , </a> 0
<a> sb . substring ( <RARE_TOKEN> , <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> ? sb . substring ( <RARE_TOKEN> , <RARE_TOKEN> ) : "" } ; </a> 0
<a> } </a> 0
<a> private static String [ ] <RARE_TOKEN> ( String sb ) { </a> 0
<a> final int length = sb . length ( ) ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( sb , 0 ) ; </a> 0
<a> for ( <RARE_TOKEN> = <RARE_TOKEN> ; <RARE_TOKEN> < length ; <RARE_TOKEN> ++ ) { </a> 0
<a> char ch = sb . charAt ( <RARE_TOKEN> ) ; </a> 0
<a> if ( ch == <RARE_TOKEN> || <RARE_TOKEN> . <RARE_TOKEN> ( ch ) ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( <RARE_TOKEN> = <RARE_TOKEN> ; <RARE_TOKEN> < length ; <RARE_TOKEN> ++ ) { </a> 0
<a> if ( sb . charAt ( <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( sb , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == length ) { </a> 0
<a> return new String [ ] { </a> 0
<a> sb . substring ( <RARE_TOKEN> , <RARE_TOKEN> ) , </a> 0
<a> "" </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( sb ) ; </a> 0
<a> return new String [ ] { </a> 0
<a> sb . substring ( <RARE_TOKEN> , <RARE_TOKEN> ) , </a> 0
<a> sb . substring ( <RARE_TOKEN> , <RARE_TOKEN> ) </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( String sb , int offset ) { </a> 0
<a> int result ; </a> 0
<a> for ( result = offset ; result < sb . length ( ) ; result ++ ) { </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( sb . charAt ( result ) ) ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( String sb , int offset ) { </a> 0
<a> int result ; </a> 0
<a> for ( result = offset ; result < sb . length ( ) ; result ++ ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( sb . charAt ( result ) ) ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( String sb ) { </a> 0
<a> int result ; </a> 0
<a> for ( result = sb . length ( ) ; result > 0 ; result -- ) { </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( sb . charAt ( result - 1 ) ) ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import static io . netty . buffer . Unpooled . * ; </a> 1
<a> import static io . netty . handler . codec . http . HttpConstants . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> < Object > { </a> 0
<a> private static final ByteBuf <RARE_TOKEN> = </a> 0
<a> copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof HttpMessage || msg instanceof HttpChunk ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void encode ( ChannelHandlerContext ctx , Object msg , ByteBuf out ) throws Exception { </a> 0
<a> if ( msg instanceof HttpMessage ) { </a> 0
<a> HttpMessage m = ( HttpMessage ) msg ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = m . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> m . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> out . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> ( out , m ) ; </a> 0
<a> <RARE_TOKEN> ( out , m ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> ByteBuf content = m . getContent ( ) ; </a> 0
<a> out . writeBytes ( content , content . readerIndex ( ) , content . readableBytes ( ) ) ; </a> 0
<a> } else if ( msg instanceof HttpChunk ) { </a> 0
<a> HttpChunk chunk = ( HttpChunk ) msg ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> must <RARE_TOKEN> an <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> of the last <RARE_TOKEN> HttpMessage is <RARE_TOKEN> ) ; </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> ByteBuf content = chunk . getContent ( ) ; </a> 1
<a> out . writeBytes ( content , content . readerIndex ( ) , content . readableBytes ( ) ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( chunk . isLast ( ) ) { </a> 0
<a> if ( chunk instanceof <RARE_TOKEN> ) { </a> 0
<a> out . writeByte ( ( byte ) <RARE_TOKEN> ) ; </a> 1
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( out , ( <RARE_TOKEN> ) chunk ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 1
<a> out . writeBytes ( <RARE_TOKEN> , <RARE_TOKEN> . readerIndex ( ) , <RARE_TOKEN> . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> ByteBuf content = chunk . getContent ( ) ; </a> 1
<a> int <RARE_TOKEN> = content . readableBytes ( ) ; </a> 1
<a> out . writeBytes ( copiedBuffer ( Integer . <RARE_TOKEN> ( <RARE_TOKEN> ) , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> out . writeBytes ( content , content . readerIndex ( ) , <RARE_TOKEN> ) ; </a> 1
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( msg , HttpMessage . class , HttpChunk . class ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ByteBuf buf , HttpMessage message ) { </a> 0
<a> for ( Map . Entry < String , String > h : message . getHeaders ( ) ) { </a> 1
<a> <RARE_TOKEN> ( buf , h . <RARE_TOKEN> ( ) , h . getValue ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ByteBuf buf , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> for ( Map . Entry < String , String > h : <RARE_TOKEN> . getHeaders ( ) ) { </a> 1
<a> <RARE_TOKEN> ( buf , h . <RARE_TOKEN> ( ) , h . getValue ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ByteBuf buf , String header , String value ) { </a> 0
<a> buf . writeBytes ( header . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> buf . writeBytes ( value . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected abstract void <RARE_TOKEN> ( ByteBuf buf , HttpMessage message ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class HttpMethod implements <RARE_TOKEN> < HttpMethod > { </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod GET = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod POST = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> private static final Map < String , HttpMethod > <RARE_TOKEN> = </a> 0
<a> new HashMap < String , HttpMethod > ( ) ; </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( GET . toString ( ) , GET ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( POST . toString ( ) , POST ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static HttpMethod valueOf ( String name ) { </a> 0
<a> if ( name == null ) { </a> 0
<a> throw new NullPointerException ( "name" ) ; </a> 0
<a> } </a> 0
<a> name = name . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( name . length ( ) == 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> HttpMethod result = <RARE_TOKEN> . get ( name ) ; </a> 0
<a> if ( result != null ) { </a> 0
<a> return result ; </a> 0
<a> } else { </a> 0
<a> return new HttpMethod ( name ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final String name ; </a> 0
<a> public HttpMethod ( String name ) { </a> 0
<a> if ( name == null ) { </a> 0
<a> throw new NullPointerException ( "name" ) ; </a> 0
<a> } </a> 0
<a> name = name . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( name . length ( ) == 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < name . length ( ) ; i ++ ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( name . charAt ( i ) ) || </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( name . charAt ( i ) ) ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> in <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> this . name = name ; </a> 0
<a> } </a> 0
<a> public String getName ( ) { </a> 1
<a> return name ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return getName ( ) . hashCode ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object o ) { </a> 0
<a> if ( ! ( o instanceof HttpMethod ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> HttpMethod that = ( HttpMethod ) o ; </a> 0
<a> return getName ( ) . equals ( that . getName ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return getName ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( HttpMethod o ) { </a> 0
<a> return getName ( ) . <RARE_TOKEN> ( o . getName ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> public interface HttpRequest extends HttpMessage { </a> 0
<a> HttpMethod <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( HttpMethod method ) ; </a> 1
<a> String <RARE_TOKEN> ( ) ; </a> 1
<a> void <RARE_TOKEN> ( String uri ) ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int <RARE_TOKEN> , int maxHeaderSize , int maxChunkSize ) { </a> 0
<a> super ( <RARE_TOKEN> , maxHeaderSize , maxChunkSize ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected HttpMessage <RARE_TOKEN> ( String [ ] <RARE_TOKEN> ) throws Exception { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> HttpVersion . valueOf ( <RARE_TOKEN> [ 2 ] ) , HttpMethod . valueOf ( <RARE_TOKEN> [ 0 ] ) , <RARE_TOKEN> [ 1 ] ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import static io . netty . handler . codec . http . HttpConstants . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ByteBuf buf , HttpMessage message ) throws Exception { </a> 0
<a> HttpRequest request = ( HttpRequest ) message ; </a> 0
<a> buf . writeBytes ( request . <RARE_TOKEN> ( ) . toString ( ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> buf . writeBytes ( request . <RARE_TOKEN> ( ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 1
<a> buf . writeBytes ( request . <RARE_TOKEN> ( ) . toString ( ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> public interface HttpResponse extends HttpMessage { </a> 0
<a> HttpResponseStatus getStatus ( ) ; </a> 0
<a> void <RARE_TOKEN> ( HttpResponseStatus status ) ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int <RARE_TOKEN> , int maxHeaderSize , int maxChunkSize ) { </a> 0
<a> super ( <RARE_TOKEN> , maxHeaderSize , maxChunkSize ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected HttpMessage <RARE_TOKEN> ( String [ ] <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> HttpVersion . valueOf ( <RARE_TOKEN> [ 0 ] ) , </a> 0
<a> new HttpResponseStatus ( Integer . valueOf ( <RARE_TOKEN> [ 1 ] ) , <RARE_TOKEN> [ 2 ] ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import static io . netty . handler . codec . http . HttpConstants . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ByteBuf buf , HttpMessage message ) throws Exception { </a> 0
<a> HttpResponse response = ( HttpResponse ) message ; </a> 0
<a> buf . writeBytes ( response . <RARE_TOKEN> ( ) . toString ( ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> buf . writeBytes ( String . valueOf ( response . getStatus ( ) . <RARE_TOKEN> ( ) ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> buf . writeBytes ( String . valueOf ( response . getStatus ( ) . <RARE_TOKEN> ( ) ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> buf . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( false ) , </a> 0
<a> <RARE_TOKEN> ( false ) , </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ! <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class HttpVersion implements <RARE_TOKEN> < HttpVersion > { </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpVersion <RARE_TOKEN> = new HttpVersion ( <RARE_TOKEN> , 1 , 0 , false ) ; </a> 0
<a> public static final HttpVersion <RARE_TOKEN> = new HttpVersion ( <RARE_TOKEN> , 1 , 1 , true ) ; </a> 0
<a> public static HttpVersion valueOf ( String text ) { </a> 0
<a> if ( text == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> text = text . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( text . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( text . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return new HttpVersion ( text , true ) ; </a> 0
<a> } </a> 0
<a> private final String <RARE_TOKEN> ; </a> 1
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final String text ; </a> 1
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public HttpVersion ( String text , boolean <RARE_TOKEN> ) { </a> 0
<a> if ( text == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> text = text . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( text . length ( ) == 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> m = <RARE_TOKEN> . <RARE_TOKEN> ( text ) ; </a> 0
<a> if ( ! m . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> version <RARE_TOKEN> " + text ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = m . group ( 1 ) ; </a> 1
<a> <RARE_TOKEN> = Integer . parseInt ( m . group ( 2 ) ) ; </a> 0
<a> <RARE_TOKEN> = Integer . parseInt ( m . group ( 3 ) ) ; </a> 0
<a> this . text = <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public HttpVersion ( </a> 1
<a> String <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> , </a> 1
<a> boolean <RARE_TOKEN> ) { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . length ( ) == 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ( ) ; i ++ ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . charAt ( i ) ) || </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . charAt ( i ) ) ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> in <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> text = <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return text ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return ( <RARE_TOKEN> ( ) . hashCode ( ) * <RARE_TOKEN> + <RARE_TOKEN> ( ) ) * <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object o ) { </a> 0
<a> if ( ! ( o instanceof HttpVersion ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> HttpVersion that = ( HttpVersion ) o ; </a> 0
<a> return <RARE_TOKEN> ( ) == that . <RARE_TOKEN> ( ) && </a> 0
<a> <RARE_TOKEN> ( ) == that . <RARE_TOKEN> ( ) && </a> 0
<a> <RARE_TOKEN> ( ) . equals ( that . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( HttpVersion o ) { </a> 0
<a> int v = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( o . <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( v != 0 ) { </a> 0
<a> return v ; </a> 0
<a> } </a> 0
<a> v = <RARE_TOKEN> ( ) - o . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( v != 0 ) { </a> 0
<a> return v ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( ) - o . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . net . URI ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . Charset ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final Charset charset ; </a> 0
<a> private final String uri ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private String path ; </a> 0
<a> private Map < String , List < String > > params ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( String uri ) { </a> 0
<a> this ( uri , HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String uri , boolean <RARE_TOKEN> ) { </a> 0
<a> this ( uri , HttpConstants . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String uri , Charset charset ) { </a> 0
<a> this ( uri , charset , true ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String uri , Charset charset , boolean <RARE_TOKEN> ) { </a> 0
<a> this ( uri , charset , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String uri , Charset charset , boolean <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> if ( uri == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> if ( charset == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> + " (expected: a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . uri = uri . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> this . charset = charset ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( URI uri ) { </a> 0
<a> this ( uri , HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( URI uri , Charset charset ) { </a> 0
<a> this ( uri , charset , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( URI uri , Charset charset , int <RARE_TOKEN> ) { </a> 0
<a> if ( uri == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> if ( charset == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> + " (expected: a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = uri . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = "" ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> + uri . <RARE_TOKEN> ( ) ; </a> 0
<a> this . uri = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> this . charset = charset ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String getPath ( ) { </a> 0
<a> if ( path == null ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> return path = "" ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = uri . indexOf ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> path = uri ; </a> 0
<a> } else { </a> 0
<a> return path = uri . substring ( 0 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return path ; </a> 0
<a> } </a> 0
<a> public Map < String , List < String > > <RARE_TOKEN> ( ) { </a> 0
<a> if ( params == null ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = getPath ( ) . length ( ) ; </a> 0
<a> if ( uri . length ( ) == <RARE_TOKEN> ) { </a> 0
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( uri . substring ( <RARE_TOKEN> + 1 ) ) ; </a> 0
<a> } else { </a> 0
<a> if ( uri . isEmpty ( ) ) { </a> 0
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( uri ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return params ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( String s ) { </a> 0
<a> Map < String , List < String > > params = this . params = new <RARE_TOKEN> < String , List < String > > ( ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> String name = null ; </a> 0
<a> int pos = 0 ; </a> 0
<a> int i ; </a> 0
<a> char c ; </a> 0
<a> for ( i = 0 ; i < s . length ( ) ; i ++ ) { </a> 0
<a> c = s . charAt ( i ) ; </a> 0
<a> if ( c == <RARE_TOKEN> && name == null ) { </a> 0
<a> if ( pos != i ) { </a> 0
<a> name = <RARE_TOKEN> ( s . substring ( pos , i ) , charset ) ; </a> 0
<a> } </a> 0
<a> pos = i + 1 ; </a> 0
<a> } else if ( c == <RARE_TOKEN> ) { </a> 0
<a> if ( name == null && pos != i ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( params , <RARE_TOKEN> ( s . substring ( pos , i ) , charset ) , "" ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } else if ( name != null ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( params , name , <RARE_TOKEN> ( s . substring ( pos , i ) , charset ) ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> name = null ; </a> 0
<a> } </a> 0
<a> pos = i + 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( pos != i ) { </a> 0
<a> if ( name == null ) { </a> 0
<a> <RARE_TOKEN> ( params , <RARE_TOKEN> ( s . substring ( pos , i ) , charset ) , "" ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( params , name , <RARE_TOKEN> ( s . substring ( pos , i ) , charset ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( name != null ) { </a> 0
<a> <RARE_TOKEN> ( params , name , "" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( Map < String , List < String > > params , String name , String value ) { </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> List < String > values = params . get ( name ) ; </a> 0
<a> if ( values == null ) { </a> 0
<a> values = new ArrayList < String > ( 1 ) ; </a> 0
<a> params . put ( name , values ) ; </a> 0
<a> } </a> 0
<a> values . add ( value ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( final String s ) { </a> 0
<a> return <RARE_TOKEN> ( s , HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 1
<a> public static String <RARE_TOKEN> ( final String s , </a> 1
<a> final Charset charset ) { </a> 1
<a> if ( s == null ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> final int size = s . length ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> for ( int i = 0 ; i < size ; i ++ ) { </a> 0
<a> final char c = s . charAt ( i ) ; </a> 0
<a> switch ( c ) { </a> 1
<a> case <RARE_TOKEN> : </a> 1
<a> i ++ ; </a> 1
<a> case <RARE_TOKEN> : </a> 1
<a> <RARE_TOKEN> = true ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> return s ; </a> 0
<a> } </a> 0
<a> final byte [ ] buf = new byte [ size ] ; </a> 0
<a> int pos = 0 ; </a> 0
<a> for ( int i = 0 ; i < size ; i ++ ) { </a> 0
<a> char c = s . charAt ( i ) ; </a> 0
<a> switch ( c ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> buf [ pos ++ ] = ' ' ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( i == size - 1 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> + " <RARE_TOKEN> <RARE_TOKEN> end of <RARE_TOKEN> " + s ) ; </a> 0
<a> } </a> 0
<a> c = s . charAt ( ++ i ) ; </a> 0
<a> if ( c == <RARE_TOKEN> ) { </a> 0
<a> buf [ pos ++ ] = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } else if ( i == size - 1 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> </a> 0
<a> + " <RARE_TOKEN> <RARE_TOKEN> end of <RARE_TOKEN> " + s ) ; </a> 0
<a> } </a> 0
<a> c = <RARE_TOKEN> ( c ) ; </a> 0
<a> final char <RARE_TOKEN> = <RARE_TOKEN> ( s . charAt ( ++ i ) ) ; </a> 0
<a> if ( c == <RARE_TOKEN> . MAX_VALUE || <RARE_TOKEN> == <RARE_TOKEN> . MAX_VALUE ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + s . charAt ( i - 1 ) </a> 0
<a> + s . charAt ( i ) + <RARE_TOKEN> <RARE_TOKEN> index " + ( i - 2 ) </a> 0
<a> + " <RARE_TOKEN> " + s ) ; </a> 0
<a> } </a> 0
<a> c = ( char ) ( c * 16 + <RARE_TOKEN> ) ; </a> 0
<a> default : </a> 0
<a> buf [ pos ++ ] = ( byte ) c ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return new String ( buf , 0 , pos , charset ) ; </a> 0
<a> } </a> 0
<a> private static char <RARE_TOKEN> ( final char c ) { </a> 0
<a> if ( <RARE_TOKEN> <= c && c <= <RARE_TOKEN> ) { </a> 0
<a> return ( char ) ( c - <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> <= c && c <= <RARE_TOKEN> ) { </a> 0
<a> return ( char ) ( c - <RARE_TOKEN> + 10 ) ; </a> 0
<a> } else if ( <RARE_TOKEN> <= c && c <= <RARE_TOKEN> ) { </a> 0
<a> return ( char ) ( c - <RARE_TOKEN> + 10 ) ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> . MAX_VALUE ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . net . URI ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . Charset ; </a> 0
<a> import java . nio . charset . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private final Charset charset ; </a> 0
<a> private final String uri ; </a> 0
<a> private final List < <RARE_TOKEN> > params = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> public <RARE_TOKEN> ( String uri ) { </a> 0
<a> this ( uri , HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String uri , Charset charset ) { </a> 0
<a> if ( uri == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> if ( charset == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . uri = uri ; </a> 0
<a> this . charset = charset ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String name , String value ) { </a> 0
<a> if ( name == null ) { </a> 0
<a> throw new NullPointerException ( "name" ) ; </a> 0
<a> } </a> 0
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> params . add ( new <RARE_TOKEN> ( name , value ) ) ; </a> 0
<a> } </a> 0
<a> public URI <RARE_TOKEN> ( ) throws <RARE_TOKEN> { </a> 0
<a> return new URI ( toString ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> if ( params . isEmpty ( ) ) { </a> 0
<a> return uri ; </a> 0
<a> } else { </a> 0
<a> StringBuilder sb = new StringBuilder ( uri ) . append ( <RARE_TOKEN> ) ; </a> 0
<a> for ( int i = 0 ; i < params . size ( ) ; i ++ ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = params . get ( i ) ; </a> 0
<a> sb . append ( <RARE_TOKEN> ( <RARE_TOKEN> . name , charset ) ) ; </a> 0
<a> sb . append ( <RARE_TOKEN> ) ; </a> 0
<a> sb . append ( <RARE_TOKEN> ( <RARE_TOKEN> . value , charset ) ) ; </a> 0
<a> if ( i != params . size ( ) - 1 ) { </a> 0
<a> sb . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return sb . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( String s , Charset charset ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> . encode ( s , charset . name ( ) ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> throw new <RARE_TOKEN> ( charset . name ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static final class <RARE_TOKEN> { </a> 0
<a> final String name ; </a> 0
<a> final String value ; </a> 0
<a> <RARE_TOKEN> ( String name , String value ) { </a> 0
<a> this . value = value ; </a> 0
<a> this . name = name ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import static io . netty . handler . codec . http . <RARE_TOKEN> . * ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> public static String encode ( String name , String value ) { </a> 0
<a> return encode ( new <RARE_TOKEN> ( name , value ) ) ; </a> 0
<a> } </a> 0
<a> public static String encode ( Cookie cookie ) { </a> 0
<a> if ( cookie == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 0
<a> add ( buf , cookie . getName ( ) , cookie . getValue ( ) ) ; </a> 0
<a> if ( cookie . <RARE_TOKEN> ( ) != Long . <RARE_TOKEN> ) { </a> 1
<a> if ( cookie . <RARE_TOKEN> ( ) == 0 ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> . <RARE_TOKEN> , </a> 0
<a> new <RARE_TOKEN> ( ) . format ( </a> 0
<a> new Date ( System . currentTimeMillis ( ) + </a> 0
<a> cookie . <RARE_TOKEN> ( ) * <RARE_TOKEN> ) ) ) ; </a> 0
<a> } else { </a> 0
<a> add ( buf , <RARE_TOKEN> . <RARE_TOKEN> , cookie . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( cookie . getPath ( ) != null ) { </a> 0
<a> if ( cookie . <RARE_TOKEN> ( ) > 0 ) { </a> 0
<a> add ( buf , <RARE_TOKEN> . <RARE_TOKEN> , cookie . getPath ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> . <RARE_TOKEN> , cookie . getPath ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( cookie . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> if ( cookie . <RARE_TOKEN> ( ) > 0 ) { </a> 0
<a> add ( buf , <RARE_TOKEN> . <RARE_TOKEN> , cookie . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> . <RARE_TOKEN> , cookie . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( cookie . <RARE_TOKEN> ( ) ) { </a> 0
<a> buf . append ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( cookie . <RARE_TOKEN> ( ) ) { </a> 0
<a> buf . append ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( cookie . <RARE_TOKEN> ( ) >= 1 ) { </a> 0
<a> if ( cookie . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> add ( buf , <RARE_TOKEN> . <RARE_TOKEN> , cookie . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> add ( buf , <RARE_TOKEN> . <RARE_TOKEN> , 1 ) ; </a> 0
<a> if ( cookie . <RARE_TOKEN> ( ) != null ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> . <RARE_TOKEN> , cookie . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( ! cookie . <RARE_TOKEN> ( ) . isEmpty ( ) ) { </a> 0
<a> buf . append ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> for ( int port : cookie . <RARE_TOKEN> ( ) ) { </a> 0
<a> buf . append ( port ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> buf . <RARE_TOKEN> ( buf . length ( ) - 1 , ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( cookie . <RARE_TOKEN> ( ) ) { </a> 0
<a> buf . append ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ( char ) HttpConstants . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( buf ) ; </a> 0
<a> } </a> 0
<a> public static List < String > encode ( Cookie ... <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> List < String > <RARE_TOKEN> = new ArrayList < String > ( <RARE_TOKEN> . length ) ; </a> 0
<a> for ( Cookie c : <RARE_TOKEN> ) { </a> 0
<a> if ( c == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( encode ( c ) ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static List < String > encode ( Collection < Cookie > <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> List < String > <RARE_TOKEN> = new ArrayList < String > ( <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> for ( Cookie c : <RARE_TOKEN> ) { </a> 0
<a> if ( c == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( encode ( c ) ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static List < String > encode ( <RARE_TOKEN> < Cookie > <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> List < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 0
<a> for ( Cookie c : <RARE_TOKEN> ) { </a> 0
<a> if ( c == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( encode ( c ) ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ByteBuf <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> , int <RARE_TOKEN> , ByteBuf <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return getClass ( ) . getSimpleName ( ) + <RARE_TOKEN> " + <RARE_TOKEN> ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ByteBuf <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> , int <RARE_TOKEN> , ByteBuf <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> boolean <RARE_TOKEN> , int <RARE_TOKEN> , ByteBuf <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> , int <RARE_TOKEN> , String text ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> setText ( text ) ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( ) . toString ( CharsetUtil . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public void setText ( String text ) { </a> 0
<a> if ( text == null || text . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( Unpooled . copiedBuffer ( text , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return getClass ( ) . getSimpleName ( ) + <RARE_TOKEN> " + <RARE_TOKEN> ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ByteBuf <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> , int <RARE_TOKEN> , ByteBuf <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return getClass ( ) . getSimpleName ( ) + <RARE_TOKEN> " + <RARE_TOKEN> ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ByteBuf <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> , int <RARE_TOKEN> , ByteBuf <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return getClass ( ) . getSimpleName ( ) + <RARE_TOKEN> " + <RARE_TOKEN> ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> private static final int <RARE_TOKEN> = 12 ; </a> 0
<a> private static final byte [ ] <RARE_TOKEN> = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , </a> 0
<a> 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , </a> 0
<a> 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , </a> 0
<a> 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , </a> 0
<a> 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , </a> 0
<a> 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 7 , 7 , 7 , 7 , </a> 0
<a> 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 8 , </a> 0
<a> 8 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , </a> 0
<a> 2 , 2 , 10 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 3 , 3 , 11 , 6 , 6 , 6 , 5 , 8 , 8 , 8 , 8 , 8 , </a> 0
<a> 8 , 8 , 8 , 8 , 8 , 8 } ; </a> 0
<a> private static final byte [ ] <RARE_TOKEN> = { 0 , 12 , 24 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 12 , 12 , 12 , <RARE_TOKEN> , <RARE_TOKEN> , 12 , 12 , </a> 0
<a> 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 0 , 12 , 12 , 12 , 12 , 12 , 0 , 12 , 0 , 12 , 12 , </a> 0
<a> 12 , 24 , 12 , 12 , 12 , 12 , 12 , 24 , 12 , 24 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 24 , 12 , 12 , </a> 0
<a> 12 , 12 , 12 , 24 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 24 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , <RARE_TOKEN> , </a> 0
<a> 12 , <RARE_TOKEN> , 12 , 12 , 12 , <RARE_TOKEN> , 12 , 12 , 12 , 12 , 12 , <RARE_TOKEN> , 12 , <RARE_TOKEN> , 12 , 12 , 12 , <RARE_TOKEN> , 12 , 12 , 12 , 12 , </a> 0
<a> 12 , 12 , 12 , 12 , 12 , 12 } ; </a> 0
<a> private int state = <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private final StringBuilder <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( byte [ ] bytes ) { </a> 0
<a> <RARE_TOKEN> = new StringBuilder ( bytes . length ) ; </a> 0
<a> write ( bytes ) ; </a> 0
<a> } </a> 0
<a> public void write ( byte [ ] bytes ) { </a> 0
<a> for ( byte b : bytes ) { </a> 0
<a> write ( b ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void write ( int b ) { </a> 0
<a> byte type = <RARE_TOKEN> [ b & 0xFF ] ; </a> 0
<a> <RARE_TOKEN> = state != <RARE_TOKEN> ? b & <RARE_TOKEN> | <RARE_TOKEN> < < 6 : 0xff > > type & b ; </a> 0
<a> state = <RARE_TOKEN> [ state + type ] ; </a> 0
<a> if ( state == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . append ( ( char ) <RARE_TOKEN> ) ; </a> 0
<a> } else if ( state == <RARE_TOKEN> ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> if ( state != <RARE_TOKEN> ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( </a> 0
<a> ChannelHandlerContext ctx , </a> 0
<a> <RARE_TOKEN> msg , ByteBuf out ) throws Exception { </a> 0
<a> if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> ByteBuf data = msg . <RARE_TOKEN> ( ) ; </a> 0
<a> out . writeByte ( ( byte ) 0x00 ) ; </a> 0
<a> out . writeBytes ( data , data . readerIndex ( ) , data . readableBytes ( ) ) ; </a> 0
<a> out . writeByte ( ( byte ) 0xFF ) ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> out . writeByte ( ( byte ) 0xFF ) ; </a> 0
<a> out . writeByte ( ( byte ) 0x00 ) ; </a> 0
<a> } else { </a> 0
<a> ByteBuf data = msg . <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = data . readableBytes ( ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> + 5 ) ; </a> 0
<a> out . writeByte ( ( byte ) <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> > > > 28 & <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> > > > 14 & <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> > > > 7 & <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> & <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> out . writeByte ( <RARE_TOKEN> | <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> out . writeByte ( <RARE_TOKEN> | <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> | <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> out . writeByte ( <RARE_TOKEN> | <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> | <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> | <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> out . writeBytes ( data , data . readerIndex ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( ChannelHandlerContext ctx , </a> 0
<a> <RARE_TOKEN> msg , ByteBuf out ) throws Exception { </a> 0
<a> byte [ ] <RARE_TOKEN> ; </a> 0
<a> ByteBuf data = msg . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( data == null ) { </a> 1
<a> data = Unpooled . EMPTY_BUFFER ; </a> 1
<a> } </a> 1
<a> byte <RARE_TOKEN> ; </a> 0
<a> if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( <RARE_TOKEN> encode frame of <RARE_TOKEN> " + msg . getClass ( ) . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> int length = data . readableBytes ( ) ; </a> 0
<a> if ( logger . isDebugEnabled ( ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> WebSocket <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + " <RARE_TOKEN> + length ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> if ( msg . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> |= 1 < < 7 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> |= msg . <RARE_TOKEN> ( ) <RARE_TOKEN> 8 < < 4 ; </a> 0
<a> <RARE_TOKEN> |= <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> && length > <RARE_TOKEN> ) { </a> 0
<a> throw new TooLongFrameException ( <RARE_TOKEN> <RARE_TOKEN> for <RARE_TOKEN> <RARE_TOKEN> length must be <= <RARE_TOKEN> <RARE_TOKEN> " </a> 0
<a> + length ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ? 4 : 0 ; </a> 0
<a> if ( length <= <RARE_TOKEN> ) { </a> 0
<a> out . <RARE_TOKEN> ( 2 + <RARE_TOKEN> + length ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> byte b = ( byte ) ( <RARE_TOKEN> ? <RARE_TOKEN> | ( byte ) length : ( byte ) length ) ; </a> 0
<a> out . writeByte ( b ) ; </a> 0
<a> } else if ( length <= <RARE_TOKEN> ) { </a> 0
<a> out . <RARE_TOKEN> ( 4 + <RARE_TOKEN> + length ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( length > > > 8 & 0xFF ) ; </a> 0
<a> out . writeByte ( length & 0xFF ) ; </a> 0
<a> } else { </a> 0
<a> out . <RARE_TOKEN> ( 10 + <RARE_TOKEN> + length ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> ? 0xFF : <RARE_TOKEN> ) ; </a> 0
<a> out . <RARE_TOKEN> ( length ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> int random = ( int ) ( Math . random ( ) * Integer . MAX_VALUE ) ; </a> 0
<a> <RARE_TOKEN> = ByteBuffer . <RARE_TOKEN> ( 4 ) . <RARE_TOKEN> ( random ) . array ( ) ; </a> 0
<a> out . writeBytes ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( int i = data . readerIndex ( ) ; i < data . writerIndex ( ) ; i ++ ) { </a> 0
<a> byte <RARE_TOKEN> = data . getByte ( i ) ; </a> 0
<a> out . writeByte ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> [ + <RARE_TOKEN> ++ <RARE_TOKEN> 4 ] ) ; </a> 1
<a> } </a> 0
<a> } else { </a> 0
<a> out . writeBytes ( data , data . readerIndex ( ) , data . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> , boolean <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 0
<a> import java . net . URI ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public abstract class <RARE_TOKEN> { </a> 0
<a> private final URI <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> version ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 1
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 1
<a> protected final Map < String , String > <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( URI <RARE_TOKEN> , <RARE_TOKEN> version , String <RARE_TOKEN> , </a> 0
<a> Map < String , String > <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . version = version ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public URI <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return version ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public abstract ChannelFuture <RARE_TOKEN> ( Channel channel ) ; </a> 1
<a> public abstract void <RARE_TOKEN> ( Channel channel , HttpResponse response ) ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . Channel ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpHeaders . Names ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders . Values ; </a> 0
<a> import io . netty . handler . codec . http . HttpMethod ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponseStatus ; </a> 0
<a> import io . netty . handler . codec . http . HttpVersion ; </a> 0
<a> import java . net . URI ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private byte [ ] <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( URI <RARE_TOKEN> , <RARE_TOKEN> version , String <RARE_TOKEN> , </a> 0
<a> Map < String , String > <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> , version , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel ) { </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 1 , 12 ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 1 , 12 ) ; </a> 0
<a> int <RARE_TOKEN> = Integer . MAX_VALUE / <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = Integer . MAX_VALUE / <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 0 , <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 0 , <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> * <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> * <RARE_TOKEN> ; </a> 0
<a> String <RARE_TOKEN> = Integer . toString ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = Integer . toString ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 8 ) ; </a> 0
<a> ByteBuffer buffer = ByteBuffer . <RARE_TOKEN> ( 4 ) ; </a> 0
<a> buffer . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> byte [ ] <RARE_TOKEN> = buffer . array ( ) ; </a> 0
<a> buffer = ByteBuffer . <RARE_TOKEN> ( 4 ) ; </a> 0
<a> buffer . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> byte [ ] <RARE_TOKEN> = buffer . array ( ) ; </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ 16 ] ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , <RARE_TOKEN> , 0 , 4 ) ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , <RARE_TOKEN> , 4 , 4 ) ; </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , <RARE_TOKEN> , 8 , 8 ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> URI <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> String path = <RARE_TOKEN> . getPath ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) != null && <RARE_TOKEN> . <RARE_TOKEN> ( ) . length ( ) > 0 ) { </a> 0
<a> path = <RARE_TOKEN> . getPath ( ) + <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> HttpRequest request = new <RARE_TOKEN> ( HttpVersion . <RARE_TOKEN> , HttpMethod . GET , path ) ; </a> 1
<a> request . addHeader ( Names . <RARE_TOKEN> , Values . <RARE_TOKEN> ) ; </a> 1
<a> request . addHeader ( Names . <RARE_TOKEN> , Values . <RARE_TOKEN> ) ; </a> 1
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != 80 && <RARE_TOKEN> != <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && ! <RARE_TOKEN> . equals ( "" ) ) { </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> for ( String header : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> request . addHeader ( header , <RARE_TOKEN> . get ( header ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> request . <RARE_TOKEN> ( Unpooled . copiedBuffer ( <RARE_TOKEN> ) ) ; </a> 1
<a> ChannelFuture future = channel . write ( request ) ; </a> 1
<a> channel . pipeline ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . class , <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Channel channel , HttpResponse response ) throws <RARE_TOKEN> { </a> 0
<a> final HttpResponseStatus status = new HttpResponseStatus ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> if ( ! response . getStatus ( ) . equals ( status ) ) { </a> 1
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> response <RARE_TOKEN> " + response . getStatus ( ) ) ; </a> 1
<a> } </a> 0
<a> String <RARE_TOKEN> = response . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> == null || ! <RARE_TOKEN> . equalsIgnoreCase ( Values . <RARE_TOKEN> ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> response <RARE_TOKEN> " </a> 0
<a> + response . getHeader ( Names . <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> String connection = response . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( connection == null || ! connection . equalsIgnoreCase ( Values . <RARE_TOKEN> ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> response <RARE_TOKEN> " </a> 0
<a> + response . getHeader ( Names . <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = response . getContent ( ) . array ( ) ; </a> 1
<a> if ( ! Arrays . equals ( <RARE_TOKEN> , <RARE_TOKEN> ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = response . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> channel . pipeline ( ) . get ( <RARE_TOKEN> . class ) . <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( String key ) { </a> 0
<a> int count = <RARE_TOKEN> . <RARE_TOKEN> ( 1 , 12 ) ; </a> 0
<a> char [ ] <RARE_TOKEN> = new char [ count ] ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> while ( <RARE_TOKEN> < count ) { </a> 0
<a> int <RARE_TOKEN> = ( int ) ( Math . random ( ) * <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> && <RARE_TOKEN> < <RARE_TOKEN> || <RARE_TOKEN> < <RARE_TOKEN> && <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = ( char ) <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> += 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> int split = <RARE_TOKEN> . <RARE_TOKEN> ( 0 , key . length ( ) ) ; </a> 0
<a> String <RARE_TOKEN> = key . substring ( 0 , split ) ; </a> 0
<a> String <RARE_TOKEN> = key . substring ( split ) ; </a> 0
<a> key = <RARE_TOKEN> + <RARE_TOKEN> [ i ] + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return key ; </a> 0
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( String key , int <RARE_TOKEN> ) { </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> int split = <RARE_TOKEN> . <RARE_TOKEN> ( 1 , key . length ( ) - 1 ) ; </a> 0
<a> String <RARE_TOKEN> = key . substring ( 0 , split ) ; </a> 0
<a> String <RARE_TOKEN> = key . substring ( split ) ; </a> 0
<a> key = <RARE_TOKEN> + " " + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return key ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . channel . Channel ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpHeaders . Names ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders . Values ; </a> 0
<a> import io . netty . handler . codec . http . HttpMethod ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponseStatus ; </a> 0
<a> import io . netty . handler . codec . http . HttpVersion ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . net . URI ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( URI <RARE_TOKEN> , <RARE_TOKEN> version , String <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> , Map < String , String > <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> , version , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel ) { </a> 1
<a> URI <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> String path = <RARE_TOKEN> . getPath ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) != null && <RARE_TOKEN> . <RARE_TOKEN> ( ) . length ( ) > 0 ) { </a> 0
<a> path = <RARE_TOKEN> . getPath ( ) + <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 16 ) ; </a> 0
<a> String key = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = key + <RARE_TOKEN> ; </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( logger . isDebugEnabled ( ) ) { </a> 0
<a> logger . debug ( String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> response: <RARE_TOKEN> , key , </a> 0
<a> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> HttpRequest request = new <RARE_TOKEN> ( HttpVersion . <RARE_TOKEN> , HttpMethod . GET , path ) ; </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , Values . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , Values . <RARE_TOKEN> ) ; </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , key ) ; </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != 80 && <RARE_TOKEN> != <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && ! <RARE_TOKEN> . equals ( "" ) ) { </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> for ( String header : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> request . addHeader ( header , <RARE_TOKEN> . get ( header ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> ChannelFuture future = channel . write ( request ) ; </a> 1
<a> channel . pipeline ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . class , <RARE_TOKEN> , new <RARE_TOKEN> ( true ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Channel channel , HttpResponse response ) { </a> 1
<a> final HttpResponseStatus status = HttpResponseStatus . <RARE_TOKEN> ; </a> 0
<a> if ( ! response . getStatus ( ) . equals ( status ) ) { </a> 1
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> response <RARE_TOKEN> " + response . getStatus ( ) ) ; </a> 1
<a> } </a> 0
<a> String <RARE_TOKEN> = response . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> == null || ! <RARE_TOKEN> . equalsIgnoreCase ( Values . <RARE_TOKEN> ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> response <RARE_TOKEN> " </a> 0
<a> + response . getHeader ( Names . <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> String connection = response . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( connection == null || ! connection . equalsIgnoreCase ( Values . <RARE_TOKEN> ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> response <RARE_TOKEN> " </a> 0
<a> + response . getHeader ( Names . <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> String <RARE_TOKEN> = response . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> == null || ! <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = response . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> channel . pipeline ( ) . get ( <RARE_TOKEN> . class ) . <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> , </a> 1
<a> new <RARE_TOKEN> ( false , <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . channel . Channel ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders . Names ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders . Values ; </a> 0
<a> import io . netty . handler . codec . http . HttpMethod ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponseStatus ; </a> 0
<a> import io . netty . handler . codec . http . HttpVersion ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . net . URI ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( URI <RARE_TOKEN> , <RARE_TOKEN> version , String <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> , Map < String , String > <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> , version , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel ) { </a> 1
<a> URI <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> String path = <RARE_TOKEN> . getPath ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) != null && <RARE_TOKEN> . <RARE_TOKEN> ( ) . length ( ) > 0 ) { </a> 0
<a> path = <RARE_TOKEN> . getPath ( ) + <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 16 ) ; </a> 0
<a> String key = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = key + <RARE_TOKEN> ; </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( logger . isDebugEnabled ( ) ) { </a> 0
<a> logger . debug ( String . format ( <RARE_TOKEN> <RARE_TOKEN> 13 <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> response: <RARE_TOKEN> , key , </a> 0
<a> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> HttpRequest request = new <RARE_TOKEN> ( HttpVersion . <RARE_TOKEN> , HttpMethod . GET , path ) ; </a> 1
<a> request . addHeader ( Names . <RARE_TOKEN> , Values . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> request . addHeader ( Names . <RARE_TOKEN> , Values . <RARE_TOKEN> ) ; </a> 1
<a> request . addHeader ( Names . <RARE_TOKEN> , key ) ; </a> 1
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != 80 && <RARE_TOKEN> != <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && ! <RARE_TOKEN> . equals ( "" ) ) { </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> request . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> for ( String header : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> request . addHeader ( header , <RARE_TOKEN> . get ( header ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> ChannelFuture future = channel . write ( request ) ; </a> 1
<a> channel . pipeline ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . class , <RARE_TOKEN> , new <RARE_TOKEN> ( true ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Channel channel , HttpResponse response ) throws <RARE_TOKEN> { </a> 0
<a> final HttpResponseStatus status = HttpResponseStatus . <RARE_TOKEN> ; </a> 0
<a> if ( ! response . getStatus ( ) . equals ( status ) ) { </a> 1
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> response <RARE_TOKEN> " + response . getStatus ( ) ) ; </a> 1
<a> } </a> 0
<a> String <RARE_TOKEN> = response . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> == null || ! <RARE_TOKEN> . equalsIgnoreCase ( Values . <RARE_TOKEN> ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> response <RARE_TOKEN> " </a> 0
<a> + response . getHeader ( Names . <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> String connection = response . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( connection == null || ! connection . equalsIgnoreCase ( Values . <RARE_TOKEN> ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> response <RARE_TOKEN> " </a> 0
<a> + response . getHeader ( Names . <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> String <RARE_TOKEN> = response . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> == null || ! <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = response . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> channel . pipeline ( ) . get ( <RARE_TOKEN> . class ) . <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> , </a> 1
<a> new <RARE_TOKEN> ( false , <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import java . net . URI ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( </a> 0
<a> URI <RARE_TOKEN> , <RARE_TOKEN> version , String <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> , Map < String , String > <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> , version , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( </a> 0
<a> URI <RARE_TOKEN> , <RARE_TOKEN> version , String <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> , Map < String , String > <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> if ( version == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , version , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( version == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , version , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( version == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , version , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> version " + version . toString ( ) + " not <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( String s ) { </a> 0
<a> super ( s ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String s , Throwable throwable ) { </a> 0
<a> super ( s , throwable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Set ; </a> 0
<a> public abstract class <RARE_TOKEN> { </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private final String [ ] subprotocols ; </a> 0
<a> private final <RARE_TOKEN> version ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> version , String <RARE_TOKEN> , String subprotocols , </a> 0
<a> int <RARE_TOKEN> ) { </a> 0
<a> this . version = version ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( subprotocols != null ) { </a> 0
<a> String [ ] <RARE_TOKEN> = subprotocols . split ( <RARE_TOKEN> ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> [ i ] = <RARE_TOKEN> [ i ] . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> this . subprotocols = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> this . subprotocols = new String [ 0 ] ; </a> 1
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Set < String > <RARE_TOKEN> ( ) { </a> 0
<a> Set < String > <RARE_TOKEN> = new <RARE_TOKEN> < String > ( ) ; </a> 0
<a> Collections . <RARE_TOKEN> ( <RARE_TOKEN> , subprotocols ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return version ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public abstract ChannelFuture <RARE_TOKEN> ( Channel channel , HttpRequest req ) ; </a> 1
<a> public abstract ChannelFuture close ( Channel channel , <RARE_TOKEN> frame ) ; </a> 1
<a> protected String <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null || subprotocols . length == 0 ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String [ ] <RARE_TOKEN> = <RARE_TOKEN> . split ( <RARE_TOKEN> ) ; </a> 0
<a> for ( String p : <RARE_TOKEN> ) { </a> 0
<a> String <RARE_TOKEN> = p . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( String <RARE_TOKEN> : subprotocols ) { </a> 0
<a> if ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( String value ) { </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import static io . netty . handler . codec . http . HttpHeaders . Names . * ; </a> 1
<a> import static io . netty . handler . codec . http . HttpHeaders . Values . * ; </a> 1
<a> import static io . netty . handler . codec . http . HttpVersion . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders . Names ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders . Values ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponseStatus ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 1
<a> public <RARE_TOKEN> ( String <RARE_TOKEN> , String subprotocols , int <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> , subprotocols , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel , HttpRequest req ) { </a> 1
<a> if ( logger . isDebugEnabled ( ) ) { </a> 1
<a> logger . debug ( String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> server <RARE_TOKEN> , channel . id ( ) ) ) ; </a> 1
<a> } </a> 1
<a> if ( ! Values . <RARE_TOKEN> . equalsIgnoreCase ( req . getHeader ( <RARE_TOKEN> ) ) </a> 1
<a> || ! <RARE_TOKEN> . equalsIgnoreCase ( req . getHeader ( Names . <RARE_TOKEN> ) ) ) { </a> 1
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> a WebSocket <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = req . <RARE_TOKEN> ( <RARE_TOKEN> ) && req . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> HttpResponse res = new <RARE_TOKEN> ( <RARE_TOKEN> , new HttpResponseStatus ( <RARE_TOKEN> , </a> 1
<a> <RARE_TOKEN> ? <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> res . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> res . addHeader ( <RARE_TOKEN> , Values . <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> res . addHeader ( <RARE_TOKEN> , req . getHeader ( <RARE_TOKEN> ) ) ; </a> 1
<a> res . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 1
<a> String subprotocols = req . getHeader ( Names . <RARE_TOKEN> ) ; </a> 0
<a> if ( subprotocols != null ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( subprotocols ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> " + subprotocols ) ; </a> 0
<a> } else { </a> 0
<a> res . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = req . getHeader ( <RARE_TOKEN> ) ; </a> 1
<a> String <RARE_TOKEN> = req . getHeader ( <RARE_TOKEN> ) ; </a> 1
<a> int a = ( int ) ( Long . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , "" ) ) / <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , "" ) . length ( ) ) ; </a> 1
<a> int b = ( int ) ( Long . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , "" ) ) / <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , "" ) . length ( ) ) ; </a> 1
<a> long c = req . getContent ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuf input = Unpooled . buffer ( 16 ) ; </a> 0
<a> input . writeInt ( a ) ; </a> 0
<a> input . writeInt ( b ) ; </a> 0
<a> input . <RARE_TOKEN> ( c ) ; </a> 0
<a> ByteBuf output = Unpooled . wrappedBuffer ( <RARE_TOKEN> . <RARE_TOKEN> ( input . array ( ) ) ) ; </a> 1
<a> res . <RARE_TOKEN> ( output ) ; </a> 1
<a> } else { </a> 0
<a> res . addHeader ( <RARE_TOKEN> , req . getHeader ( <RARE_TOKEN> ) ) ; </a> 1
<a> res . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 1
<a> String <RARE_TOKEN> = req . getHeader ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> res . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> ChannelPipeline p = channel . pipeline ( ) ; </a> 0
<a> if ( p . get ( <RARE_TOKEN> . class ) != null ) { </a> 0
<a> p . remove ( <RARE_TOKEN> . class ) ; </a> 0
<a> } </a> 1
<a> p . <RARE_TOKEN> ( <RARE_TOKEN> . class , <RARE_TOKEN> , </a> 1
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> ChannelFuture future = channel . write ( res ) ; </a> 0
<a> p . <RARE_TOKEN> ( <RARE_TOKEN> . class , <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture close ( Channel channel , <RARE_TOKEN> frame ) { </a> 1
<a> return channel . write ( frame ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import static io . netty . handler . codec . http . HttpHeaders . Values . * ; </a> 0
<a> import static io . netty . handler . codec . http . HttpVersion . * ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders . Names ; </a> 1
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponseStatus ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 1
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> String <RARE_TOKEN> , String subprotocols , boolean <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> , subprotocols , <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel , HttpRequest req ) { </a> 1
<a> if ( logger . isDebugEnabled ( ) ) { </a> 1
<a> logger . debug ( String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> 8 server <RARE_TOKEN> , channel . id ( ) ) ) ; </a> 1
<a> } </a> 1
<a> HttpResponse res = new <RARE_TOKEN> ( <RARE_TOKEN> , HttpResponseStatus . <RARE_TOKEN> ) ; </a> 0
<a> String key = req . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( key == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> a WebSocket <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = key + <RARE_TOKEN> ; </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( logger . isDebugEnabled ( ) ) { </a> 0
<a> logger . debug ( String . format ( <RARE_TOKEN> <RARE_TOKEN> 8 <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , key , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> res . <RARE_TOKEN> ( HttpResponseStatus . <RARE_TOKEN> ) ; </a> 1
<a> res . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> res . addHeader ( Names . <RARE_TOKEN> , Names . <RARE_TOKEN> ) ; </a> 0
<a> res . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> String subprotocols = req . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( subprotocols != null ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( subprotocols ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> " + subprotocols ) ; </a> 0
<a> } else { </a> 0
<a> res . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> ChannelFuture future = channel . write ( res ) ; </a> 1
<a> ChannelPipeline p = channel . pipeline ( ) ; </a> 0
<a> if ( p . get ( <RARE_TOKEN> . class ) != null ) { </a> 0
<a> p . remove ( <RARE_TOKEN> . class ) ; </a> 0
<a> } </a> 0
<a> p . <RARE_TOKEN> ( <RARE_TOKEN> . class , <RARE_TOKEN> , </a> 1
<a> new <RARE_TOKEN> ( true , <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> p . <RARE_TOKEN> ( <RARE_TOKEN> . class , <RARE_TOKEN> , new <RARE_TOKEN> ( false ) ) ; </a> 1
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture close ( Channel channel , <RARE_TOKEN> frame ) { </a> 1
<a> ChannelFuture f = channel . write ( frame ) ; </a> 1
<a> f . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 1
<a> return f ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import static io . netty . handler . codec . http . HttpHeaders . Values . * ; </a> 0
<a> import static io . netty . handler . codec . http . HttpVersion . * ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 1
<a> import io . netty . channel . ChannelFutureListener ; </a> 1
<a> import io . netty . channel . ChannelPipeline ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders . Names ; </a> 1
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponseStatus ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 1
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> String <RARE_TOKEN> , String subprotocols , boolean <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> , subprotocols , <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel , HttpRequest req ) { </a> 1
<a> if ( logger . isDebugEnabled ( ) ) { </a> 1
<a> logger . debug ( String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> 13 server <RARE_TOKEN> , channel . id ( ) ) ) ; </a> 1
<a> } </a> 1
<a> HttpResponse res = new <RARE_TOKEN> ( <RARE_TOKEN> , HttpResponseStatus . <RARE_TOKEN> ) ; </a> 0
<a> String key = req . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( key == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> a WebSocket <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = key + <RARE_TOKEN> ; </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( logger . isDebugEnabled ( ) ) { </a> 0
<a> logger . debug ( String . format ( <RARE_TOKEN> <RARE_TOKEN> 13 <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , key , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> res . <RARE_TOKEN> ( HttpResponseStatus . <RARE_TOKEN> ) ; </a> 1
<a> res . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> res . addHeader ( Names . <RARE_TOKEN> , Names . <RARE_TOKEN> ) ; </a> 1
<a> res . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> String subprotocols = req . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> if ( subprotocols != null ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ( subprotocols ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> " + subprotocols ) ; </a> 0
<a> } else { </a> 0
<a> res . addHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> ChannelFuture future = channel . write ( res ) ; </a> 1
<a> ChannelPipeline p = channel . pipeline ( ) ; </a> 0
<a> if ( p . get ( <RARE_TOKEN> . class ) != null ) { </a> 0
<a> p . remove ( <RARE_TOKEN> . class ) ; </a> 0
<a> } </a> 0
<a> p . <RARE_TOKEN> ( <RARE_TOKEN> . class , <RARE_TOKEN> , </a> 1
<a> new <RARE_TOKEN> ( true , <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> p . <RARE_TOKEN> ( <RARE_TOKEN> . class , <RARE_TOKEN> , new <RARE_TOKEN> ( false ) ) ; </a> 1
<a> return future ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public ChannelFuture close ( Channel channel , <RARE_TOKEN> frame ) { </a> 1
<a> ChannelFuture f = channel . write ( frame ) ; </a> 1
<a> f . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 1
<a> return f ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders . Names ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponseStatus ; </a> 0
<a> import io . netty . handler . codec . http . HttpVersion ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private final String subprotocols ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> String <RARE_TOKEN> , String subprotocols , boolean <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> , subprotocols , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> String <RARE_TOKEN> , String subprotocols , boolean <RARE_TOKEN> , </a> 0
<a> int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . subprotocols = subprotocols ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( HttpRequest req ) { </a> 0
<a> String version = req . getHeader ( Names . <RARE_TOKEN> ) ; </a> 0
<a> if ( version != null ) { </a> 0
<a> if ( version . equals ( <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , subprotocols , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( version . equals ( <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , subprotocols , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> , subprotocols , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Channel channel ) { </a> 0
<a> HttpResponse res = new <RARE_TOKEN> ( </a> 0
<a> HttpVersion . <RARE_TOKEN> , </a> 0
<a> HttpResponseStatus . <RARE_TOKEN> ) ; </a> 1
<a> res . <RARE_TOKEN> ( HttpResponseStatus . <RARE_TOKEN> ) ; </a> 0
<a> res . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> channel . write ( res ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> static byte [ ] <RARE_TOKEN> ( byte [ ] data ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( data ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> this <RARE_TOKEN> - <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static byte [ ] <RARE_TOKEN> ( byte [ ] data ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( data ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> is not <RARE_TOKEN> <RARE_TOKEN> this <RARE_TOKEN> - <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static String <RARE_TOKEN> ( byte [ ] data ) { </a> 0
<a> ByteBuf <RARE_TOKEN> = Unpooled . wrappedBuffer ( data ) ; </a> 0
<a> return <RARE_TOKEN> . encode ( <RARE_TOKEN> ) . toString ( CharsetUtil . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> static byte [ ] <RARE_TOKEN> ( int size ) { </a> 0
<a> byte [ ] bytes = new byte [ size ] ; </a> 0
<a> for ( int index = 0 ; index < size ; index ++ ) { </a> 0
<a> bytes [ index ] = ( byte ) <RARE_TOKEN> ( 0 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return bytes ; </a> 0
<a> } </a> 0
<a> static int <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> return ( int ) ( Math . random ( ) * <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> if ( this == <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else if ( this == <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else if ( this == <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> socket <RARE_TOKEN> " + this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> public static final class Names { </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Names . <RARE_TOKEN> ; </a> 0
<a> private Names ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final class Values { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = HttpHeaders . Values . <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String URL = <RARE_TOKEN> ; </a> 0
<a> private Values ( ) { } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . embedded . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpMessage ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> ( int <RARE_TOKEN> , int maxHeaderSize , int <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> , maxHeaderSize , <RARE_TOKEN> * 2 ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object decode ( ChannelHandlerContext ctx , ByteBuf buffer ) throws Exception { </a> 0
<a> Object o = super . decode ( ctx , buffer ) ; </a> 0
<a> if ( o != null && <RARE_TOKEN> . writeInbound ( o ) ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( HttpMessage msg ) { </a> 0
<a> boolean <RARE_TOKEN> = super . <RARE_TOKEN> ( msg ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( ! msg . <RARE_TOKEN> ( <RARE_TOKEN> . Names . <RARE_TOKEN> ) ) { </a> 1
<a> return true ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpMessage ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> @ Sharable </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( ChannelHandlerContext ctx , Object msg , </a> 0
<a> ByteBuf out ) throws Exception { </a> 1
<a> if ( ! ( msg instanceof HttpMessage ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( msg , HttpMessage . class ) ; </a> 0
<a> } </a> 1
<a> super . encode ( ctx , msg , out ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpMethod ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = HttpMethod . <RARE_TOKEN> ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> public static final HttpMethod <RARE_TOKEN> = new HttpMethod ( <RARE_TOKEN> ) ; </a> 0
<a> private static final Map < String , HttpMethod > <RARE_TOKEN> = new HashMap < String , HttpMethod > ( ) ; </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static HttpMethod valueOf ( String name ) { </a> 0
<a> if ( name == null ) { </a> 0
<a> throw new NullPointerException ( "name" ) ; </a> 0
<a> } </a> 0
<a> name = name . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( name . length ( ) == 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> HttpMethod result = <RARE_TOKEN> . get ( name ) ; </a> 0
<a> if ( result != null ) { </a> 0
<a> return result ; </a> 0
<a> } else { </a> 0
<a> return new HttpMethod ( name ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpMessage ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , int maxHeaderSize , int <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> , maxHeaderSize , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected HttpMessage <RARE_TOKEN> ( String [ ] <RARE_TOKEN> ) throws Exception { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> . valueOf ( <RARE_TOKEN> [ 2 ] ) , </a> 0
<a> <RARE_TOKEN> . valueOf ( <RARE_TOKEN> [ 0 ] ) , <RARE_TOKEN> [ 1 ] ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . handler . codec . http . HttpMessage ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ByteBuf buf , HttpMessage message ) </a> 0
<a> throws Exception { </a> 0
<a> HttpRequest request = ( HttpRequest ) message ; </a> 0
<a> buf . writeBytes ( request . <RARE_TOKEN> ( ) . toString ( ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> buf . writeByte ( ( byte ) ' ' ) ; </a> 0
<a> buf . writeBytes ( request . <RARE_TOKEN> ( ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> buf . writeByte ( ( byte ) ' ' ) ; </a> 0
<a> buf . writeBytes ( request . <RARE_TOKEN> ( ) . toString ( ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> buf . writeByte ( ( byte ) <RARE_TOKEN> ) ; </a> 0
<a> buf . writeByte ( ( byte ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpMessage ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponseStatus ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , int maxHeaderSize , </a> 0
<a> int <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> , maxHeaderSize , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected HttpMessage <RARE_TOKEN> ( String [ ] <RARE_TOKEN> ) throws Exception { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> . valueOf ( <RARE_TOKEN> [ 0 ] ) , </a> 0
<a> new HttpResponseStatus ( Integer . valueOf ( <RARE_TOKEN> [ 1 ] ) , <RARE_TOKEN> [ 2 ] ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . handler . codec . http . HttpMessage ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ByteBuf buf , HttpMessage message ) </a> 0
<a> throws Exception { </a> 0
<a> HttpResponse response = ( HttpResponse ) message ; </a> 0
<a> buf . writeBytes ( response . <RARE_TOKEN> ( ) . toString ( ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> buf . writeByte ( ( byte ) ' ' ) ; </a> 0
<a> buf . writeBytes ( String . valueOf ( response . getStatus ( ) . <RARE_TOKEN> ( ) ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> buf . writeByte ( ( byte ) ' ' ) ; </a> 0
<a> buf . writeBytes ( String . valueOf ( response . getStatus ( ) . <RARE_TOKEN> ( ) ) . getBytes ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> buf . writeByte ( ( byte ) <RARE_TOKEN> ) ; </a> 0
<a> buf . writeByte ( ( byte ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpVersion ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> public static final HttpVersion <RARE_TOKEN> = new HttpVersion ( <RARE_TOKEN> , 1 , 0 , true ) ; </a> 0
<a> public static HttpVersion valueOf ( String text ) { </a> 0
<a> if ( text == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> text = text . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( text . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return new HttpVersion ( text , true ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . util . internal . StringUtil ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> status ; </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> , 0 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , int statusCode ) { </a> 0
<a> this ( <RARE_TOKEN> , <RARE_TOKEN> . valueOf ( statusCode ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , <RARE_TOKEN> status ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( status ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> </a> 0
<a> + " <RARE_TOKEN> be <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> getStatus ( ) { </a> 0
<a> return status ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> status ) { </a> 0
<a> this . status = status ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 1
<a> buf . append ( getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> = " ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> " ) ; </a> 1
<a> buf . append ( status . toString ( ) ) ; </a> 0
<a> return buf . toString ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . util . internal . StringUtil ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private int streamId ; </a> 0
<a> private boolean last ; </a> 0
<a> public <RARE_TOKEN> ( int streamId ) { </a> 0
<a> <RARE_TOKEN> ( streamId ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getStreamId ( ) { </a> 0
<a> return streamId ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int streamId ) { </a> 0
<a> if ( streamId <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be <RARE_TOKEN> " + streamId ) ; </a> 0
<a> } </a> 0
<a> this . streamId = streamId ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isLast ( ) { </a> 0
<a> return last ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean last ) { </a> 0
<a> this . last = last ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 1
<a> buf . append ( getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> " ) ; </a> 1
<a> buf . append ( isLast ( ) ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> = " ) ; </a> 1
<a> buf . append ( streamId ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> <RARE_TOKEN> ( buf ) ; </a> 0
<a> buf . <RARE_TOKEN> ( buf . length ( ) - StringUtil . NEWLINE . length ( ) ) ; </a> 0
<a> return buf . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return getClass ( ) . getSimpleName ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . util . internal . StringUtil ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private int id ; </a> 0
<a> public <RARE_TOKEN> ( int id ) { </a> 0
<a> <RARE_TOKEN> ( id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getId ( ) { </a> 0
<a> return id ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int id ) { </a> 0
<a> this . id = id ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 1
<a> buf . append ( getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ID = " ) ; </a> 1
<a> buf . append ( id ) ; </a> 0
<a> return buf . toString ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . util . internal . StringUtil ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private int streamId ; </a> 0
<a> private SpdyStreamStatus status ; </a> 0
<a> public <RARE_TOKEN> ( int streamId , int statusCode ) { </a> 0
<a> this ( streamId , SpdyStreamStatus . valueOf ( statusCode ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int streamId , SpdyStreamStatus status ) { </a> 0
<a> <RARE_TOKEN> ( streamId ) ; </a> 0
<a> <RARE_TOKEN> ( status ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getStreamId ( ) { </a> 0
<a> return streamId ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int streamId ) { </a> 0
<a> if ( streamId <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be <RARE_TOKEN> " + streamId ) ; </a> 0
<a> } </a> 0
<a> this . streamId = streamId ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public SpdyStreamStatus getStatus ( ) { </a> 0
<a> return status ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SpdyStreamStatus status ) { </a> 0
<a> this . status = status ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 1
<a> buf . append ( getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> = " ) ; </a> 1
<a> buf . append ( streamId ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> " ) ; </a> 1
<a> buf . append ( status . toString ( ) ) ; </a> 0
<a> return buf . toString ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . util . internal . StringUtil ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private boolean clear ; </a> 0
<a> private final Map < Integer , <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < Integer , <RARE_TOKEN> > ( ) ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Set < Integer > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( int ID ) { </a> 1
<a> Integer key = new Integer ( ID ) ; </a> 1
<a> return <RARE_TOKEN> . containsKey ( key ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getValue ( int ID ) { </a> 1
<a> Integer key = new Integer ( ID ) ; </a> 1
<a> if ( <RARE_TOKEN> . containsKey ( key ) ) { </a> 0
<a> return <RARE_TOKEN> . get ( key ) . getValue ( ) ; </a> 0
<a> } else { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int ID , int value ) { </a> 1
<a> <RARE_TOKEN> ( ID , value , false , false ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int ID , int value , boolean <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 1
<a> if ( ID <= 0 || ID > <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> ID is not <RARE_TOKEN> " + ID ) ; </a> 1
<a> } </a> 0
<a> Integer key = new Integer ( ID ) ; </a> 1
<a> if ( <RARE_TOKEN> . containsKey ( key ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( key ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( value ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . put ( key , new <RARE_TOKEN> ( value , <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int ID ) { </a> 1
<a> Integer key = new Integer ( ID ) ; </a> 1
<a> if ( <RARE_TOKEN> . containsKey ( key ) ) { </a> 0
<a> <RARE_TOKEN> . remove ( key ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( int ID ) { </a> 1
<a> Integer key = new Integer ( ID ) ; </a> 1
<a> if ( <RARE_TOKEN> . containsKey ( key ) ) { </a> 0
<a> return <RARE_TOKEN> . get ( key ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int ID , boolean <RARE_TOKEN> ) { </a> 1
<a> Integer key = new Integer ( ID ) ; </a> 1
<a> if ( <RARE_TOKEN> . containsKey ( key ) ) { </a> 0
<a> <RARE_TOKEN> . get ( key ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( int ID ) { </a> 1
<a> Integer key = new Integer ( ID ) ; </a> 1
<a> if ( <RARE_TOKEN> . containsKey ( key ) ) { </a> 0
<a> return <RARE_TOKEN> . get ( key ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int ID , boolean <RARE_TOKEN> ) { </a> 1
<a> Integer key = new Integer ( ID ) ; </a> 1
<a> if ( <RARE_TOKEN> . containsKey ( key ) ) { </a> 0
<a> <RARE_TOKEN> . get ( key ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return clear ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean clear ) { </a> 0
<a> this . clear = clear ; </a> 0
<a> } </a> 0
<a> private Set < Map . Entry < Integer , <RARE_TOKEN> > > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( StringBuilder buf ) { </a> 0
<a> for ( Map . Entry < Integer , <RARE_TOKEN> > e : <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = e . getValue ( ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> " ) ; </a> 0
<a> buf . append ( e . <RARE_TOKEN> ( ) . toString ( ) ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> . getValue ( ) ) ; </a> 0
<a> buf . append ( " <RARE_TOKEN> <RARE_TOKEN> " ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> " ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 1
<a> buf . append ( getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> <RARE_TOKEN> ( buf ) ; </a> 0
<a> buf . <RARE_TOKEN> ( buf . length ( ) - StringUtil . NEWLINE . length ( ) ) ; </a> 0
<a> return buf . toString ( ) ; </a> 0
<a> } </a> 0
<a> private static final class <RARE_TOKEN> { </a> 0
<a> private int value ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( int value , boolean <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> this . value = value ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int getValue ( ) { </a> 0
<a> return value ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( int value ) { </a> 0
<a> this . value = value ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . util . internal . StringUtil ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private int streamId ; </a> 0
<a> private boolean last ; </a> 0
<a> public <RARE_TOKEN> ( int streamId ) { </a> 0
<a> <RARE_TOKEN> ( streamId ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getStreamId ( ) { </a> 0
<a> return streamId ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int streamId ) { </a> 0
<a> if ( streamId <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be <RARE_TOKEN> " + streamId ) ; </a> 0
<a> } </a> 0
<a> this . streamId = streamId ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isLast ( ) { </a> 0
<a> return last ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean last ) { </a> 0
<a> this . last = last ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 1
<a> buf . append ( getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> " ) ; </a> 1
<a> buf . append ( isLast ( ) ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> = " ) ; </a> 1
<a> buf . append ( streamId ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> <RARE_TOKEN> ( buf ) ; </a> 0
<a> buf . <RARE_TOKEN> ( buf . length ( ) - StringUtil . NEWLINE . length ( ) ) ; </a> 0
<a> return buf . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . util . internal . StringUtil ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private int streamId ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 1
<a> private byte <RARE_TOKEN> ; </a> 0
<a> private boolean last ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( </a> 1
<a> int streamId , int <RARE_TOKEN> , byte <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( streamId ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getStreamId ( ) { </a> 0
<a> return streamId ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int streamId ) { </a> 0
<a> if ( streamId <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be <RARE_TOKEN> " + streamId ) ; </a> 0
<a> } </a> 0
<a> this . streamId = streamId ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 1
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( byte <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 || <RARE_TOKEN> > 7 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be <RARE_TOKEN> 0 <RARE_TOKEN> 7 <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isLast ( ) { </a> 0
<a> return last ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean last ) { </a> 0
<a> this . last = last ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> StringBuilder buf = new StringBuilder ( ) ; </a> 1
<a> buf . append ( getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> " ) ; </a> 1
<a> buf . append ( isLast ( ) ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> " ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> = " ) ; </a> 1
<a> buf . append ( streamId ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> if ( <RARE_TOKEN> != 0 ) { </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> = " ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> } </a> 0
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> = " ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( StringUtil . NEWLINE ) ; </a> 1
<a> <RARE_TOKEN> ( buf ) ; </a> 0
<a> buf . <RARE_TOKEN> ( buf . length ( ) - StringUtil . NEWLINE . length ( ) ) ; </a> 0
<a> return buf . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> public static final int <RARE_TOKEN> = 2 ; </a> 0
<a> public static final int <RARE_TOKEN> = 3 ; </a> 0
<a> private <RARE_TOKEN> ( ) { } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> int getStreamId ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int streamID ) ; </a> 0
<a> boolean isLast ( ) ; </a> 0
<a> void <RARE_TOKEN> ( boolean last ) ; </a> 0
<a> ByteBuf getData ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ByteBuf data ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( int version ) { </a> 0
<a> this ( version , <RARE_TOKEN> , <RARE_TOKEN> , 6 , 15 , 8 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int version , int maxChunkSize , int maxHeaderSize , </a> 0
<a> int compressionLevel , int windowBits , int memLevel ) { </a> 0
<a> super ( </a> 0
<a> new <RARE_TOKEN> ( version , maxChunkSize , maxHeaderSize ) , </a> 0
<a> new <RARE_TOKEN> ( version , compressionLevel , windowBits , memLevel ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import static io . netty . handler . codec . spdy . <RARE_TOKEN> . * ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object > { </a> 0
<a> private final int spdyVersion ; </a> 0
<a> private final int maxChunkSize ; </a> 0
<a> private final int maxHeaderSize ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private State state ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private SpdyHeaderBlock <RARE_TOKEN> ; </a> 0
<a> private byte <RARE_TOKEN> ; </a> 0
<a> private int length ; </a> 0
<a> private int version ; </a> 0
<a> private int type ; </a> 0
<a> private int streamID ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private ByteBuf <RARE_TOKEN> ; </a> 0
<a> private enum State { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( 2 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int version ) { </a> 0
<a> this ( version , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int version , int maxChunkSize , int maxHeaderSize ) { </a> 0
<a> if ( version < <RARE_TOKEN> . <RARE_TOKEN> || version > <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> " + version ) ; </a> 0
<a> } </a> 0
<a> if ( maxChunkSize <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> " + maxChunkSize ) ; </a> 0
<a> } </a> 0
<a> if ( maxHeaderSize <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> " + maxHeaderSize ) ; </a> 0
<a> } </a> 0
<a> spdyVersion = version ; </a> 0
<a> this . maxChunkSize = maxChunkSize ; </a> 0
<a> this . maxHeaderSize = maxHeaderSize ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . newInstance ( version ) ; </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception { </a> 1
<a> try { </a> 0
<a> return decode ( ctx , in ) ; </a> 1
<a> } finally { </a> 0
<a> <RARE_TOKEN> . end ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object decode ( ChannelHandlerContext ctx , ByteBuf buffer ) throws Exception { </a> 0
<a> switch ( state ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> state = <RARE_TOKEN> ( buffer ) ; </a> 0
<a> if ( state == State . <RARE_TOKEN> ) { </a> 0
<a> if ( version != spdyVersion ) { </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> <RARE_TOKEN> " + version ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( length == 0 ) { </a> 0
<a> if ( state == State . <RARE_TOKEN> ) { </a> 0
<a> if ( streamID == 0 ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> <RARE_TOKEN> data <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> spdyDataFrame = new <RARE_TOKEN> ( streamID ) ; </a> 0
<a> spdyDataFrame . <RARE_TOKEN> ( ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ) ; </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> return spdyDataFrame ; </a> 1
<a> } </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return null ; </a> 1
<a> case <RARE_TOKEN> : </a> 0
<a> try { </a> 0
<a> Object frame = <RARE_TOKEN> ( buffer ) ; </a> 0
<a> if ( frame != null ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return frame ; </a> 1
<a> } catch ( IllegalArgumentException e ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 1
<a> case <RARE_TOKEN> : </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> if ( buffer . readableBytes ( ) < 4 ) { </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) ) ; </a> 0
<a> buffer . skipBytes ( 4 ) ; </a> 0
<a> length -= 4 ; </a> 0
<a> if ( ( length & <RARE_TOKEN> ) != 0 || length > > 3 != <RARE_TOKEN> ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> boolean clear = ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( clear ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = Math . min ( buffer . readableBytes ( ) > > 3 , length > > 3 ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> int ID ; </a> 0
<a> byte <RARE_TOKEN> ; </a> 0
<a> if ( version < 3 ) { </a> 0
<a> ID = buffer . <RARE_TOKEN> ( ) & 0xFF | </a> 0
<a> ( buffer . <RARE_TOKEN> ( ) & 0xFF ) < < 8 | </a> 0
<a> ( buffer . <RARE_TOKEN> ( ) & 0xFF ) < < 16 ; </a> 0
<a> <RARE_TOKEN> = buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> ID = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) ) ; </a> 0
<a> buffer . skipBytes ( 3 ) ; </a> 0
<a> } </a> 0
<a> int value = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) ) ; </a> 0
<a> buffer . skipBytes ( 4 ) ; </a> 0
<a> if ( ID == 0 ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ID ) ) { </a> 0
<a> boolean <RARE_TOKEN> = ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ; </a> 0
<a> boolean <RARE_TOKEN> = ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ID , value , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> length -= 8 * <RARE_TOKEN> ; </a> 0
<a> if ( length == 0 ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> Object frame = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> return frame ; </a> 1
<a> } </a> 0
<a> return null ; </a> 1
<a> case <RARE_TOKEN> : </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( buffer ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> if ( length == 0 ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> Object frame = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> return frame ; </a> 1
<a> } </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return null ; </a> 1
<a> } catch ( IllegalArgumentException e ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> int <RARE_TOKEN> = Math . min ( buffer . readableBytes ( ) , length ) ; </a> 0
<a> length -= <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( buffer . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> ctx . fireExceptionCaught ( e ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> Object frame = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> if ( length == 0 ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return frame ; </a> 1
<a> } </a> 0
<a> if ( length == 0 ) { </a> 0
<a> Object frame = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> return frame ; </a> 1
<a> } </a> 0
<a> return null ; </a> 1
<a> case <RARE_TOKEN> : </a> 0
<a> if ( streamID == 0 ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> <RARE_TOKEN> data <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> int <RARE_TOKEN> = Math . min ( maxChunkSize , length ) ; </a> 0
<a> if ( buffer . readableBytes ( ) < <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> spdyDataFrame = new <RARE_TOKEN> ( streamID ) ; </a> 0
<a> spdyDataFrame . <RARE_TOKEN> ( buffer . readBytes ( <RARE_TOKEN> ) ) ; </a> 0
<a> length -= <RARE_TOKEN> ; </a> 0
<a> if ( length == 0 ) { </a> 0
<a> spdyDataFrame . <RARE_TOKEN> ( ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ) ; </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return spdyDataFrame ; </a> 1
<a> case <RARE_TOKEN> : </a> 0
<a> int <RARE_TOKEN> = Math . min ( buffer . readableBytes ( ) , length ) ; </a> 0
<a> buffer . skipBytes ( <RARE_TOKEN> ) ; </a> 0
<a> length -= <RARE_TOKEN> ; </a> 0
<a> if ( length == 0 ) { </a> 0
<a> state = State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return null ; </a> 1
<a> case <RARE_TOKEN> : </a> 0
<a> buffer . skipBytes ( buffer . readableBytes ( ) ) ; </a> 0
<a> return null ; </a> 1
<a> default : </a> 0
<a> throw new Error ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private State <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> if ( buffer . readableBytes ( ) < <RARE_TOKEN> ) { </a> 0
<a> return State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = buffer . readerIndex ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> buffer . skipBytes ( <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> = ( buffer . getByte ( <RARE_TOKEN> ) & <RARE_TOKEN> ) != 0 ; </a> 0
<a> <RARE_TOKEN> = buffer . getByte ( <RARE_TOKEN> ) ; </a> 0
<a> length = <RARE_TOKEN> ( buffer , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> version = <RARE_TOKEN> ( buffer , <RARE_TOKEN> ) & <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> type = <RARE_TOKEN> ( buffer , <RARE_TOKEN> ) ; </a> 0
<a> if ( version != spdyVersion || ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> State <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> switch ( type ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = State . <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = State . <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> <RARE_TOKEN> = State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } else if ( length != 0 ) { </a> 0
<a> <RARE_TOKEN> = State . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> streamID = <RARE_TOKEN> ( buffer , <RARE_TOKEN> ) ; </a> 0
<a> return State . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private Object <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> int streamID ; </a> 0
<a> int statusCode ; </a> 0
<a> switch ( type ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( buffer . readableBytes ( ) < 8 ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> streamID = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) ) ; </a> 0
<a> statusCode = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) + 4 ) ; </a> 0
<a> buffer . skipBytes ( 8 ) ; </a> 0
<a> return new <RARE_TOKEN> ( streamID , statusCode ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( buffer . readableBytes ( ) < 4 ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> int ID = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) ) ; </a> 0
<a> buffer . skipBytes ( 4 ) ; </a> 0
<a> return new <RARE_TOKEN> ( ID ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> int <RARE_TOKEN> = version < 3 ? 4 : 8 ; </a> 0
<a> if ( buffer . readableBytes ( ) < <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) ) ; </a> 0
<a> buffer . skipBytes ( 4 ) ; </a> 0
<a> if ( version < 3 ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> statusCode = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) ) ; </a> 0
<a> buffer . skipBytes ( 4 ) ; </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> , statusCode ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( buffer . readableBytes ( ) < 8 ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> streamID = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) + 4 ) ; </a> 0
<a> buffer . skipBytes ( 8 ) ; </a> 0
<a> return new <RARE_TOKEN> ( streamID , <RARE_TOKEN> ) ; </a> 0
<a> default : </a> 0
<a> throw new Error ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private SpdyHeaderBlock <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int streamID ; </a> 0
<a> switch ( type ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = version < 3 ? 12 : 10 ; </a> 0
<a> if ( buffer . readableBytes ( ) < <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> int offset = buffer . readerIndex ( ) ; </a> 0
<a> streamID = <RARE_TOKEN> ( buffer , offset ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( buffer , offset + 4 ) ; </a> 0
<a> byte <RARE_TOKEN> = ( byte ) ( buffer . getByte ( offset + 8 ) > > 5 & <RARE_TOKEN> ) ; </a> 0
<a> if ( version < 3 ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> 1 ; </a> 0
<a> } </a> 0
<a> buffer . skipBytes ( 10 ) ; </a> 0
<a> length -= 10 ; </a> 0
<a> if ( version < 3 && length == 2 && buffer . <RARE_TOKEN> ( buffer . readerIndex ( ) ) == 0 ) { </a> 0
<a> buffer . skipBytes ( 2 ) ; </a> 0
<a> length = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> spdySynStreamFrame = </a> 0
<a> new <RARE_TOKEN> ( streamID , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ) ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ) ; </a> 0
<a> return spdySynStreamFrame ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = version < 3 ? 8 : 4 ; </a> 0
<a> if ( buffer . readableBytes ( ) < <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> streamID = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) ) ; </a> 0
<a> buffer . skipBytes ( 4 ) ; </a> 0
<a> length -= 4 ; </a> 0
<a> if ( version < 3 ) { </a> 0
<a> buffer . skipBytes ( 2 ) ; </a> 0
<a> length -= 2 ; </a> 0
<a> } </a> 0
<a> if ( version < 3 && length == 2 && buffer . <RARE_TOKEN> ( buffer . readerIndex ( ) ) == 0 ) { </a> 0
<a> buffer . skipBytes ( 2 ) ; </a> 0
<a> length = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> spdySynReplyFrame = new <RARE_TOKEN> ( streamID ) ; </a> 0
<a> spdySynReplyFrame . <RARE_TOKEN> ( ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ) ; </a> 0
<a> return spdySynReplyFrame ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( buffer . readableBytes ( ) < 4 ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( version < 3 && length > 4 && buffer . readableBytes ( ) < 8 ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> streamID = <RARE_TOKEN> ( buffer , buffer . readerIndex ( ) ) ; </a> 0
<a> buffer . skipBytes ( 4 ) ; </a> 0
<a> length -= 4 ; </a> 0
<a> if ( version < 3 && length != 0 ) { </a> 0
<a> buffer . skipBytes ( 2 ) ; </a> 0
<a> length -= 2 ; </a> 0
<a> } </a> 0
<a> if ( version < 3 && length == 2 && buffer . <RARE_TOKEN> ( buffer . readerIndex ( ) ) == 0 ) { </a> 0
<a> buffer . skipBytes ( 2 ) ; </a> 0
<a> length = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( streamID ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> default : </a> 0
<a> throw new Error ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( int bytes ) throws Exception { </a> 0
<a> if ( <RARE_TOKEN> . readableBytes ( ) >= bytes ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . decode ( <RARE_TOKEN> ) ; </a> 1
<a> return <RARE_TOKEN> . readableBytes ( ) >= bytes ; </a> 1
<a> } </a> 0
<a> private int <RARE_TOKEN> ( ) { </a> 0
<a> if ( version < 3 ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ByteBuf buffer ) throws Exception { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = - 1 ; </a> 0
<a> <RARE_TOKEN> = Unpooled . buffer ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( buffer ) ; </a> 0
<a> <RARE_TOKEN> . decode ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = version < 3 ? 2 : 4 ; </a> 0
<a> if ( <RARE_TOKEN> == - 1 ) { </a> 0
<a> if ( <RARE_TOKEN> . readableBytes ( ) < <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> while ( <RARE_TOKEN> > 0 ) { </a> 0
<a> int <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > maxHeaderSize ) { </a> 0
<a> throw new TooLongFrameException ( </a> 0
<a> <RARE_TOKEN> block <RARE_TOKEN> " + maxHeaderSize ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> . readBytes ( <RARE_TOKEN> ) ; </a> 0
<a> String name = new String ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( name ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > maxHeaderSize ) { </a> 0
<a> throw new TooLongFrameException ( </a> 0
<a> <RARE_TOKEN> block <RARE_TOKEN> " + maxHeaderSize ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> . readBytes ( <RARE_TOKEN> ) ; </a> 0
<a> int index = 0 ; </a> 0
<a> int offset = 0 ; </a> 0
<a> while ( index < <RARE_TOKEN> ) { </a> 0
<a> while ( index < <RARE_TOKEN> . length && <RARE_TOKEN> [ index ] != ( byte ) 0 ) { </a> 0
<a> index ++ ; </a> 0
<a> } </a> 0
<a> if ( index < <RARE_TOKEN> . length && <RARE_TOKEN> [ index + 1 ] == ( byte ) 0 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String value = new String ( <RARE_TOKEN> , offset , index - offset , <RARE_TOKEN> ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . addHeader ( name , value ) ; </a> 0
<a> } catch ( IllegalArgumentException e ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> index ++ ; </a> 0
<a> offset = index ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( ) { </a> 0
<a> switch ( type ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return version < 3 ? length >= 12 : length >= 10 ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return version < 3 ? length >= 8 : length >= 4 ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> == 0 && length == 8 ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return length >= 4 ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return length == 0 ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return length == 4 ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return version < 3 ? length == 4 : length == 8 ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( version < 3 ) { </a> 0
<a> return length == 4 || length >= 8 ; </a> 0
<a> } else { </a> 0
<a> return length >= 4 ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return length == 8 ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> default : </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( ) { </a> 0
<a> switch ( type ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return true ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> default : </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> String message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> switch ( type ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> message = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ctx , message ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ChannelHandlerContext ctx , String message ) { </a> 0
<a> ctx . fireExceptionCaught ( new <RARE_TOKEN> ( message ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . Set ; </a> 0
<a> public interface SpdyHeaderBlock { </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> String getHeader ( String name ) ; </a> 0
<a> List < String > getHeaders ( String name ) ; </a> 0
<a> List < Map . Entry < String , String > > getHeaders ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( String name ) ; </a> 0
<a> Set < String > <RARE_TOKEN> ( ) ; </a> 0
<a> void addHeader ( String name , Object value ) ; </a> 0
<a> void setHeader ( String name , Object value ) ; </a> 0
<a> void setHeader ( String name , <RARE_TOKEN> < ? > values ) ; </a> 0
<a> void removeHeader ( String name ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> ; </a> 1
<a> abstract class <RARE_TOKEN> { </a> 0
<a> static <RARE_TOKEN> newInstance ( </a> 0
<a> int version , int compressionLevel , int windowBits , int memLevel ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) >= 7 ) { </a> 1
<a> return new <RARE_TOKEN> ( </a> 0
<a> version , compressionLevel ) ; </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> version , compressionLevel , windowBits , memLevel ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> abstract void <RARE_TOKEN> ( ByteBuf <RARE_TOKEN> ) ; </a> 0
<a> abstract void encode ( ByteBuf <RARE_TOKEN> ) ; </a> 0
<a> abstract void end ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> abstract class <RARE_TOKEN> { </a> 0
<a> static <RARE_TOKEN> newInstance ( int version ) { </a> 0
<a> return new <RARE_TOKEN> ( version ) ; </a> 0
<a> } </a> 0
<a> abstract void <RARE_TOKEN> ( ByteBuf <RARE_TOKEN> ) ; </a> 0
<a> abstract void decode ( ByteBuf <RARE_TOKEN> ) throws Exception ; </a> 1
<a> abstract void end ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import static io . netty . handler . codec . spdy . <RARE_TOKEN> . * ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> . JZlib ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> . ZStream ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final ZStream z = new ZStream ( ) ; </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int version , int compressionLevel , int windowBits , int memLevel ) { </a> 0
<a> if ( version < <RARE_TOKEN> . <RARE_TOKEN> || version > <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> " + version ) ; </a> 0
<a> } </a> 0
<a> if ( compressionLevel < 0 || compressionLevel > 9 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + compressionLevel + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( windowBits < 9 || windowBits > 15 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + windowBits + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( memLevel < 1 || memLevel > 9 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + memLevel + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> int resultCode = z . <RARE_TOKEN> ( </a> 0
<a> compressionLevel , windowBits , memLevel , JZlib . <RARE_TOKEN> ) ; </a> 0
<a> if ( resultCode != JZlib . Z_OK ) { </a> 0
<a> throw new <RARE_TOKEN> ( </a> 0
<a> "failed to <RARE_TOKEN> an <RARE_TOKEN> header block <RARE_TOKEN> " + resultCode ) ; </a> 0
<a> } else { </a> 0
<a> if ( version < 3 ) { </a> 0
<a> resultCode = z . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . length ) ; </a> 0
<a> } else { </a> 0
<a> resultCode = z . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . length ) ; </a> 0
<a> } </a> 0
<a> if ( resultCode != JZlib . Z_OK ) { </a> 0
<a> throw new <RARE_TOKEN> ( </a> 0
<a> "failed to set the <RARE_TOKEN> <RARE_TOKEN> " + resultCode ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ByteBuf <RARE_TOKEN> ) { </a> 0
<a> byte [ ] in = new byte [ <RARE_TOKEN> . readableBytes ( ) ] ; </a> 1
<a> <RARE_TOKEN> . readBytes ( in ) ; </a> 1
<a> z . next_in = in ; </a> 0
<a> z . next_in_index = 0 ; </a> 1
<a> z . avail_in = in . length ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( ByteBuf <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> byte [ ] out = new byte [ ( int ) Math . <RARE_TOKEN> ( z . next_in . length * <RARE_TOKEN> ) + 12 ] ; </a> 1
<a> z . <RARE_TOKEN> = out ; </a> 1
<a> z . <RARE_TOKEN> = 0 ; </a> 1
<a> z . <RARE_TOKEN> = out . length ; </a> 1
<a> int resultCode = z . <RARE_TOKEN> ( JZlib . <RARE_TOKEN> ) ; </a> 1
<a> if ( resultCode != JZlib . Z_OK ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> " + resultCode ) ; </a> 0
<a> } </a> 0
<a> if ( z . <RARE_TOKEN> != 0 ) { </a> 1
<a> <RARE_TOKEN> . writeBytes ( out , 0 , z . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } finally { </a> 0
<a> z . next_in = null ; </a> 0
<a> z . <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void end ( ) { </a> 0
<a> z . <RARE_TOKEN> ( ) ; </a> 0
<a> z . next_in = null ; </a> 0
<a> z . <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import static io . netty . handler . codec . spdy . <RARE_TOKEN> . * ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final byte [ ] out = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( int version , int compressionLevel ) { </a> 0
<a> if ( version < <RARE_TOKEN> . <RARE_TOKEN> || version > <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> " + version ) ; </a> 0
<a> } </a> 0
<a> if ( compressionLevel < 0 || compressionLevel > 9 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + compressionLevel + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( compressionLevel ) ; </a> 0
<a> if ( version < 3 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ByteBuf <RARE_TOKEN> ) { </a> 0
<a> byte [ ] in = new byte [ <RARE_TOKEN> . readableBytes ( ) ] ; </a> 0
<a> <RARE_TOKEN> . readBytes ( in ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( in ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( ByteBuf <RARE_TOKEN> ) { </a> 0
<a> while ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( out , 0 , out . length , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . writeBytes ( out , 0 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void end ( ) { </a> 0
<a> <RARE_TOKEN> . end ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import static io . netty . handler . codec . spdy . <RARE_TOKEN> . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final int version ; </a> 0
<a> private final byte [ ] out = new byte [ <RARE_TOKEN> ] ; </a> 1
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> public <RARE_TOKEN> ( int version ) { </a> 0
<a> if ( version < <RARE_TOKEN> . <RARE_TOKEN> || version > <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> " + version ) ; </a> 0
<a> } </a> 0
<a> this . version = version ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ByteBuf <RARE_TOKEN> ) { </a> 0
<a> byte [ ] in = new byte [ <RARE_TOKEN> . readableBytes ( ) ] ; </a> 1
<a> <RARE_TOKEN> . readBytes ( in ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( in ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void decode ( ByteBuf <RARE_TOKEN> ) throws Exception { </a> 1
<a> try { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( out ) ; </a> 1
<a> if ( <RARE_TOKEN> == 0 && <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( version < 3 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( out ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> . writeBytes ( out , 0 , <RARE_TOKEN> ) ; </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> throw new <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> header <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void end ( ) { </a> 0
<a> <RARE_TOKEN> . end ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . handler . codec . http . HttpMethod ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponseStatus ; </a> 0
<a> import io . netty . handler . codec . http . HttpVersion ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> public static final class <RARE_TOKEN> { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> ( ) { } </a> 0
<a> } </a> 0
<a> public static final class <RARE_TOKEN> { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> public static final String URL = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> ( ) { } </a> 0
<a> } </a> 0
<a> public static String getHeader ( SpdyHeaderBlock block , String name ) { </a> 0
<a> return block . getHeader ( name ) ; </a> 0
<a> } </a> 0
<a> public static String getHeader ( SpdyHeaderBlock block , String name , String <RARE_TOKEN> ) { </a> 0
<a> String value = block . getHeader ( name ) ; </a> 0
<a> if ( value == null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return value ; </a> 0
<a> } </a> 0
<a> public static void setHeader ( SpdyHeaderBlock block , String name , Object value ) { </a> 0
<a> block . setHeader ( name , value ) ; </a> 0
<a> } </a> 0
<a> public static void setHeader ( SpdyHeaderBlock block , String name , <RARE_TOKEN> < ? > values ) { </a> 0
<a> block . setHeader ( name , values ) ; </a> 0
<a> } </a> 0
<a> public static void addHeader ( SpdyHeaderBlock block , String name , Object value ) { </a> 0
<a> block . addHeader ( name , value ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block ) { </a> 0
<a> block . removeHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( SpdyHeaderBlock block ) { </a> 0
<a> return block . getHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block , String host ) { </a> 0
<a> block . setHeader ( <RARE_TOKEN> . <RARE_TOKEN> , host ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block ) { </a> 0
<a> <RARE_TOKEN> ( 2 , block ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block ) { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> block . removeHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> block . removeHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static HttpMethod <RARE_TOKEN> ( SpdyHeaderBlock block ) { </a> 0
<a> return <RARE_TOKEN> ( 2 , block ) ; </a> 0
<a> } </a> 0
<a> public static HttpMethod <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block ) { </a> 0
<a> try { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> return HttpMethod . valueOf ( block . getHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> } else { </a> 0
<a> return HttpMethod . valueOf ( block . getHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block , HttpMethod method ) { </a> 0
<a> <RARE_TOKEN> ( 2 , block , method ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block , HttpMethod method ) { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> block . setHeader ( <RARE_TOKEN> . <RARE_TOKEN> , method . getName ( ) ) ; </a> 1
<a> } else { </a> 0
<a> block . setHeader ( <RARE_TOKEN> . <RARE_TOKEN> , method . getName ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block ) { </a> 0
<a> <RARE_TOKEN> ( 2 , block ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block ) { </a> 0
<a> if ( spdyVersion < 2 ) { </a> 0
<a> block . removeHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> block . removeHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static String <RARE_TOKEN> ( SpdyHeaderBlock block ) { </a> 0
<a> return <RARE_TOKEN> ( 2 , block ) ; </a> 0
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block ) { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> return block . getHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> return block . getHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block , String <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( 2 , block , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block , String <RARE_TOKEN> ) { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> block . setHeader ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> block . setHeader ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block ) { </a> 0
<a> <RARE_TOKEN> ( 2 , block ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block ) { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> block . removeHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> block . removeHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static HttpResponseStatus getStatus ( SpdyHeaderBlock block ) { </a> 0
<a> return getStatus ( 2 , block ) ; </a> 0
<a> } </a> 0
<a> public static HttpResponseStatus getStatus ( int spdyVersion , SpdyHeaderBlock block ) { </a> 0
<a> try { </a> 0
<a> String status ; </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> status = block . getHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> status = block . getHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = status . indexOf ( ' ' ) ; </a> 0
<a> if ( <RARE_TOKEN> == - 1 ) { </a> 0
<a> return HttpResponseStatus . valueOf ( Integer . parseInt ( status ) ) ; </a> 0
<a> } else { </a> 0
<a> int code = Integer . parseInt ( status . substring ( 0 , <RARE_TOKEN> ) ) ; </a> 0
<a> String <RARE_TOKEN> = status . substring ( <RARE_TOKEN> + 1 ) ; </a> 0
<a> HttpResponseStatus <RARE_TOKEN> = HttpResponseStatus . valueOf ( code ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return new HttpResponseStatus ( code , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block , HttpResponseStatus status ) { </a> 0
<a> <RARE_TOKEN> ( 2 , block , status ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block , HttpResponseStatus status ) { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> block . setHeader ( <RARE_TOKEN> . <RARE_TOKEN> , status . toString ( ) ) ; </a> 0
<a> } else { </a> 0
<a> block . setHeader ( <RARE_TOKEN> . <RARE_TOKEN> , status . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block ) { </a> 0
<a> <RARE_TOKEN> ( 2 , block ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block ) { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> block . removeHeader ( <RARE_TOKEN> . URL ) ; </a> 0
<a> } else { </a> 0
<a> block . removeHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static String <RARE_TOKEN> ( SpdyHeaderBlock block ) { </a> 0
<a> return <RARE_TOKEN> ( 2 , block ) ; </a> 0
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block ) { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> return block . getHeader ( <RARE_TOKEN> . URL ) ; </a> 0
<a> } else { </a> 0
<a> return block . getHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block , String path ) { </a> 0
<a> <RARE_TOKEN> ( 2 , block , path ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block , String path ) { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> block . setHeader ( <RARE_TOKEN> . URL , path ) ; </a> 0
<a> } else { </a> 0
<a> block . setHeader ( <RARE_TOKEN> . <RARE_TOKEN> , path ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block ) { </a> 0
<a> <RARE_TOKEN> ( 2 , block ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block ) { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> block . removeHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> block . removeHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static HttpVersion <RARE_TOKEN> ( SpdyHeaderBlock block ) { </a> 0
<a> return <RARE_TOKEN> ( 2 , block ) ; </a> 0
<a> } </a> 0
<a> public static HttpVersion <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block ) { </a> 0
<a> try { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> return HttpVersion . valueOf ( block . getHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> } else { </a> 0
<a> return HttpVersion . valueOf ( block . getHeader ( <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void <RARE_TOKEN> ( SpdyHeaderBlock block , HttpVersion <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( 2 , block , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock block , HttpVersion <RARE_TOKEN> ) { </a> 0
<a> if ( spdyVersion < 3 ) { </a> 0
<a> block . setHeader ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> block . setHeader ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static final int <RARE_TOKEN> = 17 ; </a> 0
<a> private static int <RARE_TOKEN> ( String name ) { </a> 0
<a> int h = 0 ; </a> 0
<a> for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { </a> 0
<a> char c = name . charAt ( i ) ; </a> 0
<a> if ( c >= <RARE_TOKEN> && c <= <RARE_TOKEN> ) { </a> 0
<a> c += 32 ; </a> 0
<a> } </a> 0
<a> h = <RARE_TOKEN> * h + c ; </a> 0
<a> } </a> 0
<a> if ( h > 0 ) { </a> 0
<a> return h ; </a> 0
<a> } else if ( h == Integer . <RARE_TOKEN> ) { </a> 0
<a> return Integer . MAX_VALUE ; </a> 0
<a> } else { </a> 0
<a> return - h ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( String <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . length ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> . length ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> for ( int i = <RARE_TOKEN> - 1 ; i >= 0 ; i -- ) { </a> 0
<a> char <RARE_TOKEN> = <RARE_TOKEN> . charAt ( i ) ; </a> 0
<a> char <RARE_TOKEN> = <RARE_TOKEN> . charAt ( i ) ; </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> && <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> += 32 ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> && <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> += 32 ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> private static int index ( int <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private final Entry [ ] <RARE_TOKEN> = new Entry [ <RARE_TOKEN> ] ; </a> 1
<a> private final Entry <RARE_TOKEN> = new Entry ( - 1 , null , null ) ; </a> 1
<a> <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void addHeader ( final String name , final Object value ) { </a> 0
<a> String <RARE_TOKEN> = name . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = toString ( value ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int h = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int i = index ( h ) ; </a> 0
<a> <RARE_TOKEN> ( h , i , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int h , int i , final String name , final String value ) { </a> 0
<a> Entry e = <RARE_TOKEN> [ i ] ; </a> 1
<a> Entry <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> [ i ] = <RARE_TOKEN> = new Entry ( h , name , value ) ; </a> 1
<a> <RARE_TOKEN> . next = e ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> void removeHeader ( final String name ) { </a> 0
<a> if ( name == null ) { </a> 0
<a> throw new NullPointerException ( "name" ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = name . <RARE_TOKEN> ( ) ; </a> 0
<a> int h = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int i = index ( h ) ; </a> 0
<a> <RARE_TOKEN> ( h , i , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int h , int i , String name ) { </a> 0
<a> Entry e = <RARE_TOKEN> [ i ] ; </a> 1
<a> if ( e == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> for ( ; ; ) { </a> 0
<a> if ( e . <RARE_TOKEN> == h && <RARE_TOKEN> ( name , e . key ) ) { </a> 0
<a> e . remove ( ) ; </a> 0
<a> Entry next = e . next ; </a> 1
<a> if ( next != null ) { </a> 0
<a> <RARE_TOKEN> [ i ] = next ; </a> 0
<a> e = next ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> [ i ] = null ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( ; ; ) { </a> 0
<a> Entry next = e . next ; </a> 1
<a> if ( next == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( next . <RARE_TOKEN> == h && <RARE_TOKEN> ( name , next . key ) ) { </a> 0
<a> e . next = next . next ; </a> 0
<a> next . remove ( ) ; </a> 0
<a> } else { </a> 0
<a> e = next ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void setHeader ( final String name , final Object value ) { </a> 0
<a> String <RARE_TOKEN> = name . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = toString ( value ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int h = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int i = index ( h ) ; </a> 0
<a> <RARE_TOKEN> ( h , i , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( h , i , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> void setHeader ( final String name , final <RARE_TOKEN> < ? > values ) { </a> 0
<a> if ( values == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = name . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int h = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int i = index ( h ) ; </a> 0
<a> <RARE_TOKEN> ( h , i , <RARE_TOKEN> ) ; </a> 0
<a> for ( Object v : values ) { </a> 0
<a> if ( v == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = toString ( v ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( h , i , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> [ i ] = null ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> String getHeader ( final String name ) { </a> 0
<a> if ( name == null ) { </a> 0
<a> throw new NullPointerException ( "name" ) ; </a> 0
<a> } </a> 0
<a> int h = <RARE_TOKEN> ( name ) ; </a> 0
<a> int i = index ( h ) ; </a> 0
<a> Entry e = <RARE_TOKEN> [ i ] ; </a> 1
<a> while ( e != null ) { </a> 0
<a> if ( e . <RARE_TOKEN> == h && <RARE_TOKEN> ( name , e . key ) ) { </a> 0
<a> return e . value ; </a> 0
<a> } </a> 0
<a> e = e . next ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> List < String > getHeaders ( final String name ) { </a> 0
<a> if ( name == null ) { </a> 0
<a> throw new NullPointerException ( "name" ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> < String > values = new <RARE_TOKEN> < String > ( ) ; </a> 0
<a> int h = <RARE_TOKEN> ( name ) ; </a> 0
<a> int i = index ( h ) ; </a> 0
<a> Entry e = <RARE_TOKEN> [ i ] ; </a> 1
<a> while ( e != null ) { </a> 0
<a> if ( e . <RARE_TOKEN> == h && <RARE_TOKEN> ( name , e . key ) ) { </a> 0
<a> values . <RARE_TOKEN> ( e . value ) ; </a> 0
<a> } </a> 0
<a> e = e . next ; </a> 0
<a> } </a> 0
<a> return values ; </a> 0
<a> } </a> 0
<a> List < Map . Entry < String , String > > getHeaders ( ) { </a> 0
<a> List < Map . Entry < String , String > > <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> < Map . Entry < String , String > > ( ) ; </a> 0
<a> Entry e = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> while ( e != <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . add ( e ) ; </a> 0
<a> e = e . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( String name ) { </a> 0
<a> return getHeader ( name ) != null ; </a> 0
<a> } </a> 0
<a> Set < String > <RARE_TOKEN> ( ) { </a> 0
<a> Set < String > names = new <RARE_TOKEN> < String > ( ) ; </a> 0
<a> Entry e = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> while ( e != <RARE_TOKEN> ) { </a> 0
<a> names . add ( e . key ) ; </a> 0
<a> e = e . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return names ; </a> 0
<a> } </a> 0
<a> private static String toString ( Object value ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return value . toString ( ) ; </a> 0
<a> } </a> 0
<a> private static final class Entry implements Map . Entry < String , String > { </a> 1
<a> final int <RARE_TOKEN> ; </a> 0
<a> final String key ; </a> 0
<a> String value ; </a> 0
<a> Entry next ; </a> 1
<a> Entry <RARE_TOKEN> , <RARE_TOKEN> ; </a> 1
<a> Entry ( int <RARE_TOKEN> , String key , String value ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . key = key ; </a> 0
<a> this . value = value ; </a> 0
<a> } </a> 0
<a> void remove ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( Entry e ) { </a> 1
<a> <RARE_TOKEN> = e ; </a> 0
<a> <RARE_TOKEN> = e . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = this ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> return key ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String getValue ( ) { </a> 0
<a> return value ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String <RARE_TOKEN> ( String value ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( value ) ; </a> 0
<a> String <RARE_TOKEN> = this . value ; </a> 0
<a> this . value = value ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return key + <RARE_TOKEN> + value ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> public interface <RARE_TOKEN> extends SpdyHeaderBlock , <RARE_TOKEN> { </a> 0
<a> int getStreamId ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int streamID ) ; </a> 0
<a> boolean isLast ( ) ; </a> 0
<a> void <RARE_TOKEN> ( boolean last ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( int version , int <RARE_TOKEN> ) { </a> 0
<a> super ( </a> 0
<a> new <RARE_TOKEN> ( version , <RARE_TOKEN> ) , </a> 0
<a> new <RARE_TOKEN> ( version ) ) ; </a> 0
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpHeaders ; </a> 0
<a> import io . netty . handler . codec . http . HttpMessage ; </a> 0
<a> import io . netty . handler . codec . http . HttpMethod ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponseStatus ; </a> 0
<a> import io . netty . handler . codec . http . HttpVersion ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object , HttpMessage > { </a> 0
<a> private final int spdyVersion ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final Map < Integer , HttpMessage > <RARE_TOKEN> = new HashMap < Integer , HttpMessage > ( ) ; </a> 1
<a> public <RARE_TOKEN> ( int version , int <RARE_TOKEN> ) { </a> 0
<a> if ( version < <RARE_TOKEN> . <RARE_TOKEN> || version > <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> " + version ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> spdyVersion = version ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public HttpMessage decode ( ChannelHandlerContext ctx , Object msg ) throws Exception { </a> 0
<a> if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> spdySynStreamFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int streamID = spdySynStreamFrame . getStreamId ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> int <RARE_TOKEN> = spdySynStreamFrame . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> ( streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> ctx . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> String URL = <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , spdySynStreamFrame ) ; </a> 0
<a> if ( URL == null ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> ( streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> ctx . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> HttpResponse httpResponse = <RARE_TOKEN> ( spdyVersion , spdySynStreamFrame ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( httpResponse , streamID ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( httpResponse , <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( httpResponse , spdySynStreamFrame . <RARE_TOKEN> ( ) ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( httpResponse , URL ) ; </a> 1
<a> if ( spdySynStreamFrame . isLast ( ) ) { </a> 0
<a> HttpHeaders . <RARE_TOKEN> ( httpResponse , 0 ) ; </a> 1
<a> return httpResponse ; </a> 1
<a> } else { </a> 0
<a> <RARE_TOKEN> . put ( new Integer ( streamID ) , httpResponse ) ; </a> 1
<a> } </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> ( streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> ctx . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> try { </a> 0
<a> HttpRequest <RARE_TOKEN> = <RARE_TOKEN> ( spdyVersion , spdySynStreamFrame ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , streamID ) ; </a> 1
<a> if ( spdySynStreamFrame . isLast ( ) ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } else { </a> 0
<a> <RARE_TOKEN> . put ( new Integer ( streamID ) , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> <RARE_TOKEN> spdySynReplyFrame = new <RARE_TOKEN> ( streamID ) ; </a> 0
<a> spdySynReplyFrame . <RARE_TOKEN> ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , spdySynReplyFrame , HttpResponseStatus . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , spdySynReplyFrame , HttpVersion . <RARE_TOKEN> ) ; </a> 0
<a> ctx . write ( spdySynReplyFrame ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> spdySynReplyFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int streamID = spdySynReplyFrame . getStreamId ( ) ; </a> 0
<a> try { </a> 0
<a> HttpResponse httpResponse = <RARE_TOKEN> ( spdyVersion , spdySynReplyFrame ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( httpResponse , streamID ) ; </a> 1
<a> if ( spdySynReplyFrame . isLast ( ) ) { </a> 0
<a> HttpHeaders . <RARE_TOKEN> ( httpResponse , 0 ) ; </a> 1
<a> return httpResponse ; </a> 1
<a> } else { </a> 0
<a> <RARE_TOKEN> . put ( new Integer ( streamID ) , httpResponse ) ; </a> 1
<a> } </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> ( streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> ctx . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> Integer streamID = new Integer ( <RARE_TOKEN> . getStreamId ( ) ) ; </a> 1
<a> HttpMessage httpMessage = <RARE_TOKEN> . get ( streamID ) ; </a> 0
<a> if ( httpMessage == null ) { </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> for ( Map . Entry < String , String > e : <RARE_TOKEN> . getHeaders ( ) ) { </a> 0
<a> httpMessage . addHeader ( e . <RARE_TOKEN> ( ) , e . getValue ( ) ) ; </a> 1
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> spdyDataFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> Integer streamID = new Integer ( spdyDataFrame . getStreamId ( ) ) ; </a> 1
<a> HttpMessage httpMessage = <RARE_TOKEN> . get ( streamID ) ; </a> 1
<a> if ( httpMessage == null ) { </a> 1
<a> return null ; </a> 1
<a> } </a> 0
<a> ByteBuf content = httpMessage . getContent ( ) ; </a> 1
<a> if ( content . readableBytes ( ) > <RARE_TOKEN> - spdyDataFrame . getData ( ) . readableBytes ( ) ) { </a> 0
<a> <RARE_TOKEN> . remove ( streamID ) ; </a> 0
<a> throw new TooLongFrameException ( </a> 0
<a> <RARE_TOKEN> content length <RARE_TOKEN> " + <RARE_TOKEN> + " <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> ByteBuf <RARE_TOKEN> = spdyDataFrame . getData ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . readableBytes ( ) ; </a> 0
<a> if ( content == Unpooled . EMPTY_BUFFER ) { </a> 1
<a> content = Unpooled . buffer ( <RARE_TOKEN> ) ; </a> 1
<a> content . writeBytes ( <RARE_TOKEN> , <RARE_TOKEN> . readerIndex ( ) , <RARE_TOKEN> ) ; </a> 0
<a> httpMessage . <RARE_TOKEN> ( content ) ; </a> 1
<a> } else { </a> 1
<a> content . writeBytes ( <RARE_TOKEN> , <RARE_TOKEN> . readerIndex ( ) , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( spdyDataFrame . isLast ( ) ) { </a> 0
<a> HttpHeaders . <RARE_TOKEN> ( httpMessage , content . readableBytes ( ) ) ; </a> 1
<a> <RARE_TOKEN> . remove ( streamID ) ; </a> 0
<a> return httpMessage ; </a> 1
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> Integer streamID = new Integer ( <RARE_TOKEN> . getStreamId ( ) ) ; </a> 1
<a> <RARE_TOKEN> . remove ( streamID ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> private static HttpRequest <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock <RARE_TOKEN> ) </a> 1
<a> throws Exception { </a> 0
<a> HttpMethod method = <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , <RARE_TOKEN> ) ; </a> 0
<a> String url = <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , <RARE_TOKEN> ) ; </a> 0
<a> HttpVersion <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , <RARE_TOKEN> ) ; </a> 0
<a> HttpRequest <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , method , url ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , <RARE_TOKEN> ) ; </a> 0
<a> if ( spdyVersion >= 3 ) { </a> 1
<a> String host = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> HttpHeaders . <RARE_TOKEN> ( <RARE_TOKEN> , host ) ; </a> 1
<a> } </a> 1
<a> for ( Map . Entry < String , String > e : <RARE_TOKEN> . getHeaders ( ) ) { </a> 0
<a> <RARE_TOKEN> . addHeader ( e . <RARE_TOKEN> ( ) , e . getValue ( ) ) ; </a> 1
<a> } </a> 0
<a> HttpHeaders . <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 1
<a> <RARE_TOKEN> . removeHeader ( HttpHeaders . Names . <RARE_TOKEN> ) ; </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> private static HttpResponse <RARE_TOKEN> ( int spdyVersion , SpdyHeaderBlock <RARE_TOKEN> ) </a> 1
<a> throws Exception { </a> 0
<a> HttpResponseStatus status = <RARE_TOKEN> . getStatus ( spdyVersion , <RARE_TOKEN> ) ; </a> 0
<a> HttpVersion version = <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , <RARE_TOKEN> ) ; </a> 0
<a> HttpResponse httpResponse = new <RARE_TOKEN> ( version , status ) ; </a> 1
<a> for ( Map . Entry < String , String > e : <RARE_TOKEN> . getHeaders ( ) ) { </a> 0
<a> httpResponse . addHeader ( e . <RARE_TOKEN> ( ) , e . getValue ( ) ) ; </a> 1
<a> } </a> 0
<a> HttpHeaders . <RARE_TOKEN> ( httpResponse , true ) ; </a> 1
<a> httpResponse . removeHeader ( HttpHeaders . Names . <RARE_TOKEN> ) ; </a> 1
<a> httpResponse . removeHeader ( HttpHeaders . Names . <RARE_TOKEN> ) ; </a> 1
<a> return httpResponse ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpChunk ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders ; </a> 0
<a> import io . netty . handler . codec . http . HttpMessage ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 0
<a> import java . util . ArrayList ; </a> 1
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object , Object > { </a> 0
<a> private final int spdyVersion ; </a> 1
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( int version ) { </a> 0
<a> if ( version < <RARE_TOKEN> . <RARE_TOKEN> || version > <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> " + version ) ; </a> 0
<a> } </a> 0
<a> spdyVersion = version ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof HttpRequest || </a> 0
<a> msg instanceof HttpResponse || </a> 0
<a> msg instanceof HttpChunk ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object encode ( ChannelHandlerContext ctx , Object msg ) throws Exception { </a> 0
<a> List < Object > out = new ArrayList < Object > ( ) ; </a> 1
<a> if ( msg instanceof HttpRequest ) { </a> 0
<a> HttpRequest <RARE_TOKEN> = ( HttpRequest ) msg ; </a> 0
<a> <RARE_TOKEN> spdySynStreamFrame = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> int streamID = spdySynStreamFrame . getStreamId ( ) ; </a> 0
<a> out . add ( spdySynStreamFrame ) ; </a> 0
<a> <RARE_TOKEN> ( out , streamID , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( msg instanceof HttpResponse ) { </a> 0
<a> HttpResponse httpResponse = ( HttpResponse ) msg ; </a> 0
<a> if ( httpResponse . <RARE_TOKEN> ( <RARE_TOKEN> . Names . <RARE_TOKEN> ) ) { </a> 1
<a> <RARE_TOKEN> spdySynStreamFrame = <RARE_TOKEN> ( httpResponse ) ; </a> 1
<a> int streamID = spdySynStreamFrame . getStreamId ( ) ; </a> 0
<a> out . add ( spdySynStreamFrame ) ; </a> 1
<a> <RARE_TOKEN> ( out , streamID , httpResponse ) ; </a> 0
<a> } else { </a> 1
<a> <RARE_TOKEN> spdySynReplyFrame = <RARE_TOKEN> ( httpResponse ) ; </a> 1
<a> int streamID = spdySynReplyFrame . getStreamId ( ) ; </a> 0
<a> out . add ( spdySynReplyFrame ) ; </a> 1
<a> <RARE_TOKEN> ( out , streamID , httpResponse ) ; </a> 0
<a> } </a> 1
<a> } else if ( msg instanceof HttpChunk ) { </a> 0
<a> HttpChunk chunk = ( HttpChunk ) msg ; </a> 0
<a> <RARE_TOKEN> spdyDataFrame = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> spdyDataFrame . <RARE_TOKEN> ( chunk . getContent ( ) ) ; </a> 1
<a> spdyDataFrame . <RARE_TOKEN> ( chunk . isLast ( ) ) ; </a> 0
<a> if ( chunk instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) chunk ; </a> 0
<a> List < Map . Entry < String , String > > <RARE_TOKEN> = <RARE_TOKEN> . getHeaders ( ) ; </a> 1
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> out . add ( spdyDataFrame ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> for ( Map . Entry < String , String > entry : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . addHeader ( entry . <RARE_TOKEN> ( ) , entry . getValue ( ) ) ; </a> 0
<a> } </a> 0
<a> out . add ( <RARE_TOKEN> ) ; </a> 0
<a> out . add ( spdyDataFrame ) ; </a> 1
<a> } </a> 0
<a> } else { </a> 0
<a> out . add ( spdyDataFrame ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 1
<a> throw new <RARE_TOKEN> ( msg ) ; </a> 0
<a> } </a> 0
<a> return out . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( List < Object > out , int streamID , HttpMessage httpMessage ) { </a> 0
<a> if ( ! httpMessage . getContent ( ) . readable ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> spdyDataFrame = new <RARE_TOKEN> ( streamID ) ; </a> 0
<a> spdyDataFrame . <RARE_TOKEN> ( httpMessage . getContent ( ) ) ; </a> 0
<a> spdyDataFrame . <RARE_TOKEN> ( true ) ; </a> 0
<a> out . add ( spdyDataFrame ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( HttpMessage httpMessage ) </a> 0
<a> throws Exception { </a> 0
<a> boolean <RARE_TOKEN> = httpMessage . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> int streamID = <RARE_TOKEN> . getStreamId ( httpMessage ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( httpMessage ) ; </a> 0
<a> byte <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( httpMessage ) ; </a> 0
<a> String URL = <RARE_TOKEN> . <RARE_TOKEN> ( httpMessage ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( httpMessage ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( httpMessage ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( httpMessage ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( httpMessage ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( httpMessage ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( httpMessage ) ; </a> 0
<a> httpMessage . removeHeader ( HttpHeaders . Names . <RARE_TOKEN> ) ; </a> 1
<a> httpMessage . removeHeader ( <RARE_TOKEN> ) ; </a> 1
<a> httpMessage . removeHeader ( <RARE_TOKEN> ) ; </a> 1
<a> httpMessage . removeHeader ( HttpHeaders . Names . <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> spdySynStreamFrame = </a> 0
<a> new <RARE_TOKEN> ( streamID , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> if ( httpMessage instanceof HttpRequest ) { </a> 1
<a> HttpRequest <RARE_TOKEN> = ( HttpRequest ) httpMessage ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , spdySynStreamFrame , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , spdySynStreamFrame , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , spdySynStreamFrame , httpMessage . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( httpMessage instanceof HttpResponse ) { </a> 0
<a> HttpResponse httpResponse = ( HttpResponse ) httpMessage ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , spdySynStreamFrame , httpResponse . getStatus ( ) ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , spdySynStreamFrame , URL ) ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( true ) ; </a> 1
<a> } </a> 1
<a> if ( spdyVersion >= 3 ) { </a> 1
<a> String host = HttpHeaders . <RARE_TOKEN> ( httpMessage ) ; </a> 0
<a> httpMessage . removeHeader ( HttpHeaders . Names . <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdySynStreamFrame , host ) ; </a> 0
<a> } </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , spdySynStreamFrame , <RARE_TOKEN> ) ; </a> 0
<a> for ( Map . Entry < String , String > entry : httpMessage . getHeaders ( ) ) { </a> 1
<a> spdySynStreamFrame . addHeader ( entry . <RARE_TOKEN> ( ) , entry . getValue ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = streamID ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( false ) ; </a> 0
<a> } else { </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( httpMessage . getContent ( ) . readableBytes ( ) == 0 ) ; </a> 0
<a> } </a> 0
<a> return spdySynStreamFrame ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ( HttpResponse httpResponse ) </a> 0
<a> throws Exception { </a> 0
<a> boolean <RARE_TOKEN> = httpResponse . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> int streamID = <RARE_TOKEN> . getStreamId ( httpResponse ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( httpResponse ) ; </a> 0
<a> httpResponse . removeHeader ( HttpHeaders . Names . <RARE_TOKEN> ) ; </a> 1
<a> httpResponse . removeHeader ( <RARE_TOKEN> ) ; </a> 1
<a> httpResponse . removeHeader ( <RARE_TOKEN> ) ; </a> 1
<a> httpResponse . removeHeader ( HttpHeaders . Names . <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> spdySynReplyFrame = new <RARE_TOKEN> ( streamID ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , spdySynReplyFrame , httpResponse . getStatus ( ) ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyVersion , spdySynReplyFrame , httpResponse . <RARE_TOKEN> ( ) ) ; </a> 1
<a> for ( Map . Entry < String , String > entry : httpResponse . getHeaders ( ) ) { </a> 1
<a> spdySynReplyFrame . addHeader ( entry . <RARE_TOKEN> ( ) , entry . getValue ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = streamID ; </a> 1
<a> spdySynReplyFrame . <RARE_TOKEN> ( false ) ; </a> 0
<a> } else { </a> 0
<a> spdySynReplyFrame . <RARE_TOKEN> ( httpResponse . getContent ( ) . readableBytes ( ) == 0 ) ; </a> 0
<a> } </a> 1
<a> return spdySynReplyFrame ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders ; </a> 0
<a> import io . netty . handler . codec . http . HttpMessage ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> public static final class Names { </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final String URL = <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private Names ( ) { } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( HttpMessage message ) { </a> 0
<a> message . removeHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> public static int getStreamId ( HttpMessage message ) { </a> 0
<a> return HttpHeaders . <RARE_TOKEN> ( message , Names . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( HttpMessage message , int streamId ) { </a> 0
<a> HttpHeaders . <RARE_TOKEN> ( message , Names . <RARE_TOKEN> , streamId ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( HttpMessage message ) { </a> 0
<a> message . removeHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> public static int <RARE_TOKEN> ( HttpMessage message ) { </a> 0
<a> return HttpHeaders . <RARE_TOKEN> ( message , Names . <RARE_TOKEN> , 0 ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( HttpMessage message , int <RARE_TOKEN> ) { </a> 0
<a> HttpHeaders . <RARE_TOKEN> ( message , Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( HttpMessage message ) { </a> 0
<a> message . removeHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> public static byte <RARE_TOKEN> ( HttpMessage message ) { </a> 0
<a> return ( byte ) HttpHeaders . <RARE_TOKEN> ( message , Names . <RARE_TOKEN> , 0 ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( HttpMessage message , byte <RARE_TOKEN> ) { </a> 0
<a> HttpHeaders . <RARE_TOKEN> ( message , Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( HttpMessage message ) { </a> 0
<a> message . removeHeader ( Names . URL ) ; </a> 1
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( HttpMessage message ) { </a> 0
<a> return message . getHeader ( Names . URL ) ; </a> 1
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( HttpMessage message , String url ) { </a> 0
<a> message . setHeader ( Names . URL , url ) ; </a> 1
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( HttpMessage message ) { </a> 0
<a> message . removeHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> public static String <RARE_TOKEN> ( HttpMessage message ) { </a> 0
<a> return message . getHeader ( Names . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( HttpMessage message , String <RARE_TOKEN> ) { </a> 0
<a> message . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> int getId ( ) ; </a> 1
<a> void <RARE_TOKEN> ( int id ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> public class <RARE_TOKEN> extends Exception { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> int getStreamId ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int streamID ) ; </a> 0
<a> SpdyStreamStatus getStatus ( ) ; </a> 0
<a> void <RARE_TOKEN> ( SpdyStreamStatus status ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> < Object > , <RARE_TOKEN> < Object > { </a> 1
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> = new <RARE_TOKEN> [ 0 ] ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private final <RARE_TOKEN> spdySession = new <RARE_TOKEN> ( ) ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> * <RARE_TOKEN> ; </a> 0
<a> private volatile int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private volatile int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final Object <RARE_TOKEN> = new Object ( ) ; </a> 1
<a> private final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( ) ; </a> 0
<a> private volatile boolean <RARE_TOKEN> ; </a> 0
<a> private volatile boolean <RARE_TOKEN> ; </a> 0
<a> private volatile ChannelFuture <RARE_TOKEN> ; </a> 0
<a> private final boolean server ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( int version , boolean server ) { </a> 0
<a> if ( version < <RARE_TOKEN> . <RARE_TOKEN> || version > <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> " + version ) ; </a> 0
<a> } </a> 0
<a> this . server = server ; </a> 0
<a> <RARE_TOKEN> = version >= 3 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public MessageBuf < Object > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public MessageBuf < Object > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> MessageBuf < Object > in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> Object msg = in . poll ( ) ; </a> 1
<a> if ( msg == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ctx , msg ) ; </a> 1
<a> } else { </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( msg ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object msg ) throws Exception { </a> 1
<a> if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> spdyDataFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int streamID = spdyDataFrame . getStreamId ( ) ; </a> 0
<a> if ( ! spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> if ( streamID <= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> } else if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( streamID ) && ! spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = - 1 * spdyDataFrame . getData ( ) . readableBytes ( ) ; </a> 0
<a> int <RARE_TOKEN> = spdySession . <RARE_TOKEN> ( streamID , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> < spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> while ( spdyDataFrame . getData ( ) . readableBytes ( ) > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( streamID ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyDataFrame . getData ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( <RARE_TOKEN> ) ; </a> 1
<a> ctx . flush ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= <RARE_TOKEN> / 2 && ! spdyDataFrame . isLast ( ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> spdySession . <RARE_TOKEN> ( streamID , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> ( streamID , <RARE_TOKEN> ) ; </a> 0
<a> ctx . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( spdyDataFrame . isLast ( ) ) { </a> 0
<a> <RARE_TOKEN> ( streamID , true ) ; </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> spdySynStreamFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int streamID = spdySynStreamFrame . getStreamId ( ) ; </a> 0
<a> if ( spdySynStreamFrame . <RARE_TOKEN> ( ) || </a> 0
<a> ! <RARE_TOKEN> ( streamID ) || </a> 0
<a> spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> if ( streamID <= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> byte <RARE_TOKEN> = spdySynStreamFrame . <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> = spdySynStreamFrame . isLast ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = spdySynStreamFrame . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( streamID , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> spdySynReplyFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int streamID = spdySynReplyFrame . getStreamId ( ) ; </a> 0
<a> if ( spdySynReplyFrame . <RARE_TOKEN> ( ) || </a> 0
<a> <RARE_TOKEN> ( streamID ) || </a> 0
<a> spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> if ( spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> spdySession . <RARE_TOKEN> ( streamID ) ; </a> 0
<a> if ( spdySynReplyFrame . isLast ( ) ) { </a> 0
<a> <RARE_TOKEN> ( streamID , true ) ; </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> . getStreamId ( ) ) ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . getValue ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> >= 0 ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , true ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , false ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . getValue ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> >= 0 ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> if ( <RARE_TOKEN> ( <RARE_TOKEN> . getId ( ) ) ) { </a> 0
<a> ctx . write ( <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . get ( ) == 0 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int streamID = <RARE_TOKEN> . getStreamId ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> if ( spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . isLast ( ) ) { </a> 0
<a> <RARE_TOKEN> ( streamID , true ) ; </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int streamID = <RARE_TOKEN> . getStreamId ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( spdySession . <RARE_TOKEN> ( streamID ) > Integer . MAX_VALUE - <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ctx , streamID , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( msg ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 0
<a> if ( cause instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> super . exceptionCaught ( ctx , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 1
<a> super . close ( ctx , future ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> MessageBuf < Object > in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> Object msg = in . poll ( ) ; </a> 1
<a> if ( msg == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ctx , msg ) ; </a> 0
<a> } else { </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( msg ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> ctx . flush ( future ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object msg ) </a> 0
<a> throws Exception { </a> 1
<a> if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> spdyDataFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> final int streamID = spdyDataFrame . getStreamId ( ) ; </a> 0
<a> if ( spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> ctx . fireExceptionCaught ( <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 1
<a> int <RARE_TOKEN> = spdyDataFrame . getData ( ) . readableBytes ( ) ; </a> 0
<a> int <RARE_TOKEN> = spdySession . <RARE_TOKEN> ( streamID ) ; </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> spdySession . <RARE_TOKEN> ( streamID , - 1 * <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> spdySession . <RARE_TOKEN> ( streamID , - 1 * <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( streamID ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyDataFrame . getData ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> spdySession . <RARE_TOKEN> ( streamID , spdyDataFrame ) ; </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } else { </a> 0
<a> spdySession . <RARE_TOKEN> ( streamID , spdyDataFrame ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } </a> 0
<a> if ( spdyDataFrame . isLast ( ) ) { </a> 0
<a> <RARE_TOKEN> ( streamID , false ) ; </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> spdySynStreamFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int streamID = spdySynStreamFrame . getStreamId ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> ctx . fireExceptionCaught ( <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> byte <RARE_TOKEN> = spdySynStreamFrame . <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> = spdySynStreamFrame . <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = spdySynStreamFrame . isLast ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( streamID , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ) { </a> 0
<a> ctx . fireExceptionCaught ( <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> spdySynReplyFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int streamID = spdySynReplyFrame . getStreamId ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( streamID ) || spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> ctx . fireExceptionCaught ( <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( spdySynReplyFrame . isLast ( ) ) { </a> 0
<a> <RARE_TOKEN> ( streamID , false ) ; </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> . getStreamId ( ) ) ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . getValue ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> >= 0 ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , false ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , false ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . getValue ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> >= 0 ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> if ( <RARE_TOKEN> ( <RARE_TOKEN> . getId ( ) ) ) { </a> 0
<a> ctx . fireExceptionCaught ( new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> . getId ( ) ) ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> ctx . fireExceptionCaught ( <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> int streamID = <RARE_TOKEN> . getStreamId ( ) ; </a> 0
<a> if ( spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> ctx . fireExceptionCaught ( <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . isLast ( ) ) { </a> 0
<a> <RARE_TOKEN> ( streamID , false ) ; </a> 0
<a> } </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> ctx . fireExceptionCaught ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( msg ) ; </a> 1
<a> } </a> 0
<a> private void <RARE_TOKEN> ( </a> 0
<a> ChannelHandlerContext ctx , <RARE_TOKEN> status ) { </a> 0
<a> <RARE_TOKEN> ( ctx , status ) ; </a> 1
<a> ctx . flush ( ) . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> private void <RARE_TOKEN> ( </a> 0
<a> ChannelHandlerContext ctx , int streamID , SpdyStreamStatus status ) { </a> 1
<a> boolean <RARE_TOKEN> = ! spdySession . <RARE_TOKEN> ( streamID ) ; </a> 0
<a> <RARE_TOKEN> ( ctx , streamID ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( streamID , status ) ; </a> 0
<a> ctx . write ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( <RARE_TOKEN> ) ; </a> 1
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( int ID ) { </a> 1
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ID ) ; </a> 1
<a> return server && ! <RARE_TOKEN> || ! server && <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private synchronized void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( Integer streamId : spdySession . <RARE_TOKEN> ( ) ) { </a> 0
<a> spdySession . <RARE_TOKEN> ( streamId . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private synchronized void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> spdySession . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private synchronized boolean <RARE_TOKEN> ( </a> 0
<a> int streamID , byte <RARE_TOKEN> , boolean <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> || <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != 0 && </a> 0
<a> spdySession . <RARE_TOKEN> ( ) >= <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> spdySession . <RARE_TOKEN> ( </a> 0
<a> streamID , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> <RARE_TOKEN> = streamID ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int streamID , boolean <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> spdySession . <RARE_TOKEN> ( streamID ) ; </a> 0
<a> } else { </a> 0
<a> spdySession . <RARE_TOKEN> ( streamID ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null && spdySession . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx , int streamID ) { </a> 0
<a> if ( spdySession . <RARE_TOKEN> ( streamID ) ) { </a> 0
<a> ctx . fireExceptionCaught ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null && spdySession . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx , final int streamID , int <RARE_TOKEN> ) { </a> 1
<a> synchronized ( <RARE_TOKEN> ) { </a> 1
<a> int <RARE_TOKEN> = spdySession . <RARE_TOKEN> ( streamID , <RARE_TOKEN> ) ; </a> 0
<a> while ( <RARE_TOKEN> > 0 ) { </a> 1
<a> <RARE_TOKEN> spdyDataFrame = ( <RARE_TOKEN> ) spdySession . <RARE_TOKEN> ( streamID ) ; </a> 0
<a> if ( spdyDataFrame == null ) { </a> 0
<a> break ; </a> 1
<a> } </a> 0
<a> int <RARE_TOKEN> = spdyDataFrame . getData ( ) . readableBytes ( ) ; </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 1
<a> spdySession . <RARE_TOKEN> ( streamID ) ; </a> 0
<a> <RARE_TOKEN> = spdySession . <RARE_TOKEN> ( streamID , - 1 * <RARE_TOKEN> ) ; </a> 0
<a> if ( spdyDataFrame . isLast ( ) ) { </a> 1
<a> <RARE_TOKEN> ( streamID , false ) ; </a> 0
<a> } </a> 1
<a> ctx . <RARE_TOKEN> ( ) . add ( spdyDataFrame ) ; </a> 1
<a> } else { </a> 0
<a> spdySession . <RARE_TOKEN> ( streamID , - 1 * <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( streamID ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( spdyDataFrame . getData ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> = 0 ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 1
<a> if ( ! ctx . channel ( ) . isActive ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> ChannelFuture f = ctx . flush ( ) ; </a> 1
<a> if ( spdySession . <RARE_TOKEN> ( ) ) { </a> 0
<a> f . addListener ( new <RARE_TOKEN> ( ctx ) ) ; </a> 1
<a> } else { </a> 0
<a> <RARE_TOKEN> = ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . addListener ( new <RARE_TOKEN> ( ctx ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> private synchronized void <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx , <RARE_TOKEN> status ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , status ) ; </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> private static final class <RARE_TOKEN> implements ChannelFutureListener { </a> 0
<a> private final ChannelHandlerContext ctx ; </a> 0
<a> <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 1
<a> this . ctx = ctx ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture <RARE_TOKEN> ) throws Exception { </a> 0
<a> if ( ! ( <RARE_TOKEN> . cause ( ) instanceof <RARE_TOKEN> ) ) { </a> 1
<a> ctx . close ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> public static final <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> ( 0 , <RARE_TOKEN> ) ; </a> 0
<a> public static final <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> ( 1 , <RARE_TOKEN> ) ; </a> 0
<a> public static final <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> ( 11 , <RARE_TOKEN> ) ; </a> 1
<a> public static <RARE_TOKEN> valueOf ( int code ) { </a> 0
<a> switch ( code ) { </a> 0
<a> case 0 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 1 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 11 : </a> 1
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return new <RARE_TOKEN> ( code , <RARE_TOKEN> <RARE_TOKEN> + code + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private final int code ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( int code , String <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . code = code ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> return code ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object o ) { </a> 0
<a> if ( ! ( o instanceof <RARE_TOKEN> ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( ) == ( ( <RARE_TOKEN> ) o ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( <RARE_TOKEN> o ) { </a> 0
<a> return <RARE_TOKEN> ( ) - o . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> public class SpdyStreamStatus implements <RARE_TOKEN> < SpdyStreamStatus > { </a> 0
<a> public static final SpdyStreamStatus <RARE_TOKEN> = </a> 0
<a> new SpdyStreamStatus ( 1 , <RARE_TOKEN> ) ; </a> 0
<a> public static final SpdyStreamStatus <RARE_TOKEN> = </a> 0
<a> new SpdyStreamStatus ( 2 , <RARE_TOKEN> ) ; </a> 0
<a> public static final SpdyStreamStatus <RARE_TOKEN> = </a> 0
<a> new SpdyStreamStatus ( 3 , <RARE_TOKEN> ) ; </a> 0
<a> public static final SpdyStreamStatus <RARE_TOKEN> = </a> 0
<a> new SpdyStreamStatus ( 4 , <RARE_TOKEN> ) ; </a> 0
<a> public static final SpdyStreamStatus <RARE_TOKEN> = </a> 0
<a> new SpdyStreamStatus ( 5 , <RARE_TOKEN> ) ; </a> 0
<a> public static final SpdyStreamStatus <RARE_TOKEN> = </a> 0
<a> new SpdyStreamStatus ( 6 , <RARE_TOKEN> ) ; </a> 0
<a> public static final SpdyStreamStatus <RARE_TOKEN> = </a> 0
<a> new SpdyStreamStatus ( 7 , <RARE_TOKEN> ) ; </a> 0
<a> public static final SpdyStreamStatus <RARE_TOKEN> = </a> 0
<a> new SpdyStreamStatus ( 8 , <RARE_TOKEN> ) ; </a> 0
<a> public static final SpdyStreamStatus <RARE_TOKEN> = </a> 0
<a> new SpdyStreamStatus ( 9 , <RARE_TOKEN> ) ; </a> 0
<a> public static final SpdyStreamStatus <RARE_TOKEN> = </a> 0
<a> new SpdyStreamStatus ( 10 , <RARE_TOKEN> ) ; </a> 0
<a> public static final SpdyStreamStatus <RARE_TOKEN> = </a> 0
<a> new SpdyStreamStatus ( 11 , <RARE_TOKEN> ) ; </a> 0
<a> public static SpdyStreamStatus valueOf ( int code ) { </a> 0
<a> if ( code == 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> is not a <RARE_TOKEN> status code for a <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> switch ( code ) { </a> 0
<a> case 1 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 2 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 3 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 4 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 5 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 6 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 7 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 8 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 9 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 10 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> case 11 : </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return new SpdyStreamStatus ( code , <RARE_TOKEN> <RARE_TOKEN> + code + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private final int code ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> public SpdyStreamStatus ( int code , String <RARE_TOKEN> ) { </a> 0
<a> if ( code == 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> is not a <RARE_TOKEN> status code for a <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . code = code ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> return code ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object o ) { </a> 0
<a> if ( ! ( o instanceof SpdyStreamStatus ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( ) == ( ( SpdyStreamStatus ) o ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( SpdyStreamStatus o ) { </a> 0
<a> return <RARE_TOKEN> ( ) - o . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> public interface <RARE_TOKEN> extends SpdyHeaderBlock , <RARE_TOKEN> { </a> 0
<a> int getStreamId ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int streamID ) ; </a> 0
<a> boolean isLast ( ) ; </a> 0
<a> void <RARE_TOKEN> ( boolean last ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> int getStreamId ( ) ; </a> 1
<a> void <RARE_TOKEN> ( int streamID ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 1
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> String result = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> Cookie cookie = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> is a <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( true ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( 80 , <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( true ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . encode ( cookie ) ; </a> 0
<a> long currentTime = System . currentTimeMillis ( ) ; </a> 0
<a> boolean fail = true ; </a> 0
<a> for ( int <RARE_TOKEN> = 0 ; <RARE_TOKEN> <= <RARE_TOKEN> ; <RARE_TOKEN> += <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . equals ( result . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> . format ( new Date ( currentTime + <RARE_TOKEN> + <RARE_TOKEN> ) ) ) ) ) { </a> 0
<a> fail = false ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( fail ) { </a> 0
<a> fail ( <RARE_TOKEN> " + result + ", <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> String result = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> is a <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> Cookie cookie = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> is a <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( true ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . encode ( cookie ) ; </a> 0
<a> assertEquals ( result , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> String result = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> is a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> Cookie cookie = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> is a <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( true ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( 80 , <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( true ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . encode ( cookie ) ; </a> 0
<a> assertEquals ( result , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> Cookie cookie = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> is a <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( true ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( 80 , <RARE_TOKEN> ) ; </a> 0
<a> cookie . <RARE_TOKEN> ( true ) ; </a> 0
<a> Cookie <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> Cookie <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . encode ( cookie , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . encode ( ) ; </a> 0
<a> List < String > <RARE_TOKEN> = <RARE_TOKEN> . encode ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import org . junit . Assert ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> HttpMessage m = new <RARE_TOKEN> ( </a> 0
<a> HttpVersion . <RARE_TOKEN> , HttpMethod . GET , "/" ) ; </a> 0
<a> for ( int i = 0 ; i < 1000 ; i ++ ) { </a> 0
<a> m . setHeader ( String . valueOf ( i ) , "" ) ; </a> 1
<a> } </a> 0
<a> for ( int i = <RARE_TOKEN> ; i >= 0 ; i -- ) { </a> 0
<a> m . removeHeader ( String . valueOf ( i ) ) ; </a> 1
<a> } </a> 0
<a> for ( int i = 0 ; i < 1000 ; i ++ ) { </a> 0
<a> Assert . assertNull ( m . getHeader ( String . valueOf ( i ) ) ) ; </a> 1
<a> } </a> 0
<a> Assert . assertTrue ( m . getHeaders ( ) . isEmpty ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . embedded . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . util . List ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> * <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> HttpMessage message = new <RARE_TOKEN> ( HttpVersion . <RARE_TOKEN> ) ; </a> 0
<a> HttpHeaders . setHeader ( message , <RARE_TOKEN> , true ) ; </a> 0
<a> message . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> HttpChunk <RARE_TOKEN> = new <RARE_TOKEN> ( Unpooled . copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> HttpChunk <RARE_TOKEN> = new <RARE_TOKEN> ( Unpooled . copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> HttpChunk <RARE_TOKEN> = new <RARE_TOKEN> ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . writeInbound ( message ) ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . writeInbound ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . writeInbound ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . writeInbound ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> HttpMessage <RARE_TOKEN> = ( HttpMessage ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getContent ( ) . readableBytes ( ) + <RARE_TOKEN> . getContent ( ) . readableBytes ( ) , HttpHeaders . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getHeader ( <RARE_TOKEN> ) , Boolean . <RARE_TOKEN> . toString ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertNull ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( HttpMessage <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> buffer = ( <RARE_TOKEN> ) <RARE_TOKEN> . getContent ( ) ; </a> 0
<a> assertEquals ( 2 , buffer . <RARE_TOKEN> ( ) ) ; </a> 0
<a> List < ByteBuf > buffers = buffer . <RARE_TOKEN> ( 0 , buffer . capacity ( ) ) ; </a> 0
<a> assertEquals ( 2 , buffers . size ( ) ) ; </a> 0
<a> for ( ByteBuf buf : buffers ) { </a> 0
<a> assertFalse ( buf instanceof <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> * <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> HttpMessage message = new <RARE_TOKEN> ( HttpVersion . <RARE_TOKEN> ) ; </a> 0
<a> HttpHeaders . setHeader ( message , <RARE_TOKEN> , true ) ; </a> 0
<a> message . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> HttpChunk <RARE_TOKEN> = new <RARE_TOKEN> ( Unpooled . copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> HttpChunk <RARE_TOKEN> = new <RARE_TOKEN> ( Unpooled . copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . setHeader ( <RARE_TOKEN> , true ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . writeInbound ( message ) ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . writeInbound ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . writeInbound ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . writeInbound ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> HttpMessage <RARE_TOKEN> = ( HttpMessage ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getContent ( ) . readableBytes ( ) + <RARE_TOKEN> . getContent ( ) . readableBytes ( ) , HttpHeaders . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getHeader ( <RARE_TOKEN> ) , Boolean . <RARE_TOKEN> . toString ( ) ) ; </a> 0
<a> assertEquals ( <RARE_TOKEN> . getHeader ( <RARE_TOKEN> ) , Boolean . <RARE_TOKEN> . toString ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertNull ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = TooLongFrameException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 4 ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> HttpMessage message = new <RARE_TOKEN> ( HttpVersion . <RARE_TOKEN> ) ; </a> 0
<a> message . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> HttpChunk <RARE_TOKEN> = new <RARE_TOKEN> ( Unpooled . copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> HttpChunk <RARE_TOKEN> = new <RARE_TOKEN> ( Unpooled . copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . writeInbound ( message ) ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . writeInbound ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . writeInbound ( <RARE_TOKEN> ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = IllegalArgumentException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> new <RARE_TOKEN> ( 0 ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = IllegalArgumentException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( Integer . MAX_VALUE ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = IllegalStateException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( Integer . MAX_VALUE ) ; </a> 0
<a> ChannelHandlerContext ctx = <RARE_TOKEN> . <RARE_TOKEN> ( ChannelHandlerContext . class ) ; </a> 0
<a> <RARE_TOKEN> . replay ( ctx ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 10 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> 200 <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> </a> 1
<a> + <RARE_TOKEN> ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> 200 <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> </a> 1
<a> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ; </a> 1
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> codec = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , true ) ; </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( codec ) ; </a> 1
<a> ch . <RARE_TOKEN> ( new <RARE_TOKEN> ( HttpVersion . <RARE_TOKEN> , HttpMethod . GET , <RARE_TOKEN> ) ) ; </a> 1
<a> ch . writeInbound ( Unpooled . copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> ch . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> codec = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , true ) ; </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( codec ) ; </a> 1
<a> ch . <RARE_TOKEN> ( new <RARE_TOKEN> ( HttpVersion . <RARE_TOKEN> , HttpMethod . GET , <RARE_TOKEN> ) ) ; </a> 1
<a> ch . writeInbound ( Unpooled . copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> ch . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> codec = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , true ) ; </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( codec ) ; </a> 1
<a> assertTrue ( ch . <RARE_TOKEN> ( new <RARE_TOKEN> ( HttpVersion . <RARE_TOKEN> , HttpMethod . GET , <RARE_TOKEN> ) ) ) ; </a> 1
<a> assertNotNull ( ch . readOutbound ( ) ) ; </a> 1
<a> try { </a> 0
<a> ch . <RARE_TOKEN> ( ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> assertTrue ( e instanceof <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> codec = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , true ) ; </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( codec ) ; </a> 1
<a> ch . <RARE_TOKEN> ( new <RARE_TOKEN> ( HttpVersion . <RARE_TOKEN> , HttpMethod . GET , <RARE_TOKEN> ) ) ; </a> 1
<a> ch . writeInbound ( Unpooled . copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> try { </a> 0
<a> ch . <RARE_TOKEN> ( ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> assertTrue ( e instanceof <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import org . junit . Assert ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> int maxChunkSize = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 1000 , 1000 , maxChunkSize ) ; </a> 0
<a> EmbeddedByteChannel <RARE_TOKEN> = new EmbeddedByteChannel ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = maxChunkSize * 5 ; </a> 0
<a> <RARE_TOKEN> . writeInbound ( Unpooled . copiedBuffer ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> + <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> int <RARE_TOKEN> = ( int ) ( maxChunkSize * <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . writeInbound ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> HttpMessage httpMessage = ( HttpMessage ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Assert . assertSame ( <RARE_TOKEN> . <RARE_TOKEN> , httpMessage . <RARE_TOKEN> ( ) ) ; </a> 0
<a> boolean <RARE_TOKEN> = true ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> HttpChunk <RARE_TOKEN> = ( HttpChunk ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> . getContent ( ) . readableBytes ( ) ; </a> 0
<a> Assert . assertFalse ( <RARE_TOKEN> . isLast ( ) ) ; </a> 0
<a> } </a> 0
<a> Assert . assertFalse ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static ByteBuf <RARE_TOKEN> ( int size ) { </a> 0
<a> StringBuilder sb = new StringBuilder ( ) ; </a> 0
<a> for ( int i = 0 ; i < size ; ++ i ) { </a> 0
<a> sb . append ( "a" ) ; </a> 0
<a> } </a> 0
<a> return Unpooled . copiedBuffer ( sb . toString ( ) , CharsetUtil . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import static io . netty . handler . codec . http . HttpHeaders . Values . * ; </a> 1
<a> import static io . netty . handler . codec . http . HttpVersion . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders . Names ; </a> 0
<a> import io . netty . handler . codec . http . HttpMethod ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import org . junit . Assert ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( </a> 1
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ) , new <RARE_TOKEN> ( ) , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> HttpRequest req = new <RARE_TOKEN> ( <RARE_TOKEN> , HttpMethod . GET , <RARE_TOKEN> ) ; </a> 0
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> 1 <RARE_TOKEN> ) ; </a> 1
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> 5 <RARE_TOKEN> 1 <RARE_TOKEN> ) ; </a> 1
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> ByteBuf buffer = Unpooled . copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) ; </a> 1
<a> req . <RARE_TOKEN> ( buffer ) ; </a> 1
<a> new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , Integer . MAX_VALUE ) . <RARE_TOKEN> ( ch , req ) ; </a> 0
<a> ByteBuf <RARE_TOKEN> = ch . readOutbound ( ) ; </a> 1
<a> EmbeddedByteChannel <RARE_TOKEN> = new EmbeddedByteChannel ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> <RARE_TOKEN> . writeInbound ( <RARE_TOKEN> ) ; </a> 0
<a> HttpResponse res = ( HttpResponse ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Assert . assertEquals ( <RARE_TOKEN> , res . getHeader ( Names . <RARE_TOKEN> ) ) ; </a> 1
<a> Assert . assertEquals ( <RARE_TOKEN> , res . getHeader ( Names . <RARE_TOKEN> ) ) ; </a> 1
<a> Assert . assertEquals ( <RARE_TOKEN> , res . getContent ( ) . toString ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . http . websocketx ; </a> 0
<a> import static io . netty . handler . codec . http . HttpHeaders . Values . * ; </a> 1
<a> import static io . netty . handler . codec . http . HttpVersion . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders . Names ; </a> 0
<a> import io . netty . handler . codec . http . HttpMethod ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Assert ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( </a> 1
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ) , new <RARE_TOKEN> ( ) , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> HttpRequest req = new <RARE_TOKEN> ( <RARE_TOKEN> , HttpMethod . GET , <RARE_TOKEN> ) ; </a> 0
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> req . setHeader ( Names . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , false , Integer . MAX_VALUE ) . <RARE_TOKEN> ( ch , req ) ; </a> 0
<a> ByteBuf <RARE_TOKEN> = ch . readOutbound ( ) ; </a> 1
<a> EmbeddedByteChannel <RARE_TOKEN> = new EmbeddedByteChannel ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> <RARE_TOKEN> . writeInbound ( <RARE_TOKEN> ) ; </a> 0
<a> HttpResponse res = ( HttpResponse ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> Assert . assertEquals ( </a> 0
<a> <RARE_TOKEN> , res . getHeader ( Names . <RARE_TOKEN> ) ) ; </a> 1
<a> Assert . assertEquals ( <RARE_TOKEN> , res . getHeader ( Names . <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . spdy ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . channel . embedded . <RARE_TOKEN> ; </a> 1
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . util . List ; </a> 1
<a> import java . util . Map ; </a> 0
<a> import org . junit . Assert ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = </a> 0
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , 0 ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( SpdyHeaderBlock <RARE_TOKEN> , SpdyHeaderBlock expected ) { </a> 0
<a> for ( String name : expected . <RARE_TOKEN> ( ) ) { </a> 0
<a> List < String > <RARE_TOKEN> = expected . getHeaders ( name ) ; </a> 0
<a> List < String > <RARE_TOKEN> = <RARE_TOKEN> . getHeaders ( name ) ; </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> . isEmpty ( ) ) ; </a> 1
<a> <RARE_TOKEN> . removeHeader ( name ) ; </a> 0
<a> } </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> . getHeaders ( ) . isEmpty ( ) ) ; </a> 1
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( Object msg , int streamID , boolean last ) { </a> 0
<a> Assert . assertNotNull ( msg ) ; </a> 1
<a> Assert . assertTrue ( msg instanceof <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> spdyDataFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> Assert . assertTrue ( spdyDataFrame . getStreamId ( ) == streamID ) ; </a> 1
<a> Assert . assertTrue ( spdyDataFrame . isLast ( ) == last ) ; </a> 1
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( Object msg , int streamID , boolean last , SpdyHeaderBlock headers ) { </a> 0
<a> Assert . assertNotNull ( msg ) ; </a> 1
<a> Assert . assertTrue ( msg instanceof <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> spdySynReplyFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> Assert . assertTrue ( spdySynReplyFrame . getStreamId ( ) == streamID ) ; </a> 1
<a> Assert . assertTrue ( spdySynReplyFrame . isLast ( ) == last ) ; </a> 1
<a> <RARE_TOKEN> ( spdySynReplyFrame , headers ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( Object msg , int streamID , SpdyStreamStatus status ) { </a> 0
<a> Assert . assertNotNull ( msg ) ; </a> 1
<a> Assert . assertTrue ( msg instanceof <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> . getStreamId ( ) == streamID ) ; </a> 1
<a> Assert . assertTrue ( <RARE_TOKEN> . getStatus ( ) . equals ( status ) ) ; </a> 1
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( Object msg , int ID ) { </a> 1
<a> Assert . assertNotNull ( msg ) ; </a> 1
<a> Assert . assertTrue ( msg instanceof <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> . getId ( ) == ID ) ; </a> 1
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( Object msg , int <RARE_TOKEN> ) { </a> 0
<a> Assert . assertNotNull ( msg ) ; </a> 1
<a> Assert . assertTrue ( msg instanceof <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> . <RARE_TOKEN> ( ) == <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( Object msg , int streamID , SpdyHeaderBlock headers ) { </a> 0
<a> Assert . assertNotNull ( msg ) ; </a> 1
<a> Assert . assertTrue ( msg instanceof <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> Assert . assertTrue ( <RARE_TOKEN> . getStreamId ( ) == streamID ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> , headers ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int version , boolean server ) { </a> 1
<a> <RARE_TOKEN> sessionHandler = new <RARE_TOKEN> ( </a> 1
<a> new <RARE_TOKEN> ( version , server ) , new <RARE_TOKEN> ( <RARE_TOKEN> , server ) ) ; </a> 0
<a> while ( sessionHandler . readOutbound ( ) != null ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = server ? 1 : 2 ; </a> 0
<a> int <RARE_TOKEN> = server ? 2 : 1 ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> spdySynStreamFrame = </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> , 0 , ( byte ) 0 ) ; </a> 0
<a> spdySynStreamFrame . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> spdyDataFrame = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> spdyDataFrame . <RARE_TOKEN> ( true ) ; </a> 0
<a> sessionHandler . writeInbound ( new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> sessionHandler . writeInbound ( new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> <RARE_TOKEN> += 2 ; </a> 0
<a> sessionHandler . writeInbound ( new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> sessionHandler . writeInbound ( new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> <RARE_TOKEN> += 2 ; </a> 0
<a> sessionHandler . writeInbound ( spdySynStreamFrame ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , false , spdySynStreamFrame ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> sessionHandler . writeInbound ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> <RARE_TOKEN> += 2 ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( true ) ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( true ) ; </a> 0
<a> sessionHandler . writeInbound ( spdySynStreamFrame ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> sessionHandler . writeInbound ( new <RARE_TOKEN> ( <RARE_TOKEN> , 3 ) ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> <RARE_TOKEN> += 2 ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( false ) ; </a> 0
<a> sessionHandler . writeInbound ( spdySynStreamFrame ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> spdySynStreamFrame . <RARE_TOKEN> ( false ) ; </a> 0
<a> sessionHandler . writeInbound ( spdySynStreamFrame ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> <RARE_TOKEN> += 2 ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( <RARE_TOKEN> - 1 ) ; </a> 0
<a> sessionHandler . writeInbound ( spdySynStreamFrame ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> - 1 , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> spdySynStreamFrame . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , 2 ) ; </a> 0
<a> sessionHandler . writeInbound ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> sessionHandler . writeInbound ( spdySynStreamFrame ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , 4 ) ; </a> 0
<a> sessionHandler . writeInbound ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> sessionHandler . writeInbound ( spdySynStreamFrame ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , false , spdySynStreamFrame ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> int <RARE_TOKEN> = spdyDataFrame . getStreamId ( ) ; </a> 0
<a> sessionHandler . writeInbound ( spdyDataFrame ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , spdyDataFrame . isLast ( ) ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> sessionHandler . writeInbound ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> sessionHandler . writeInbound ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> sessionHandler . writeInbound ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> . getId ( ) ) ; </a> 1
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> sessionHandler . writeInbound ( <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> sessionHandler . writeInbound ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> ) ; </a> 0
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> <RARE_TOKEN> += 2 ; </a> 1
<a> spdySynStreamFrame . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> sessionHandler . writeInbound ( spdySynStreamFrame ) ; </a> 1
<a> <RARE_TOKEN> ( sessionHandler . readOutbound ( ) , <RARE_TOKEN> , SpdyStreamStatus . <RARE_TOKEN> ) ; </a> 1
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> spdyDataFrame . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> sessionHandler . writeInbound ( spdyDataFrame ) ; </a> 1
<a> Assert . assertNull ( sessionHandler . readOutbound ( ) ) ; </a> 1
<a> sessionHandler . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> for ( int version = <RARE_TOKEN> . <RARE_TOKEN> ; version <= <RARE_TOKEN> . <RARE_TOKEN> ; version ++ ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + version ) ; </a> 0
<a> <RARE_TOKEN> ( version , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> for ( int version = <RARE_TOKEN> . <RARE_TOKEN> ; version <= <RARE_TOKEN> . <RARE_TOKEN> ; version ++ ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + version ) ; </a> 0
<a> <RARE_TOKEN> ( version , true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < Object > { </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final boolean server ; </a> 0
<a> <RARE_TOKEN> ( int <RARE_TOKEN> , boolean server ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . server = server ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> int streamID = server ? 2 : 1 ; </a> 0
<a> <RARE_TOKEN> spdySynStreamFrame = </a> 0
<a> new <RARE_TOKEN> ( streamID , 0 , ( byte ) 0 ) ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( true ) ; </a> 0
<a> ctx . write ( spdySynStreamFrame ) ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( spdySynStreamFrame . getStreamId ( ) + 2 ) ; </a> 1
<a> ctx . write ( spdySynStreamFrame ) ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( spdySynStreamFrame . getStreamId ( ) + 2 ) ; </a> 1
<a> ctx . write ( spdySynStreamFrame ) ; </a> 0
<a> spdySynStreamFrame . <RARE_TOKEN> ( spdySynStreamFrame . getStreamId ( ) + 2 ) ; </a> 1
<a> ctx . write ( spdySynStreamFrame ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , 3 ) ; </a> 0
<a> ctx . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object msg ) throws Exception { </a> 1
<a> if ( msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> || </a> 0
<a> msg instanceof <RARE_TOKEN> ) { </a> 0
<a> ctx . write ( msg ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> spdySynStreamFrame = ( <RARE_TOKEN> ) msg ; </a> 0
<a> if ( ! spdySynStreamFrame . <RARE_TOKEN> ( ) ) { </a> 0
<a> int streamID = spdySynStreamFrame . getStreamId ( ) ; </a> 0
<a> <RARE_TOKEN> spdySynReplyFrame = new <RARE_TOKEN> ( streamID ) ; </a> 0
<a> spdySynReplyFrame . <RARE_TOKEN> ( spdySynStreamFrame . isLast ( ) ) ; </a> 0
<a> for ( Map . Entry < String , String > entry : spdySynStreamFrame . getHeaders ( ) ) { </a> 0
<a> spdySynReplyFrame . addHeader ( entry . <RARE_TOKEN> ( ) , entry . getValue ( ) ) ; </a> 0
<a> } </a> 0
<a> ctx . write ( spdySynReplyFrame ) ; </a> 0
<a> } </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> public abstract class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> , <RARE_TOKEN> { </a> 1
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 1
<a> @ Override </a> 1
<a> public void encode ( </a> 0
<a> ChannelHandlerContext ctx , </a> 1
<a> ByteBuf in , ByteBuf out ) throws Exception { </a> 1
<a> <RARE_TOKEN> . this . encode ( ctx , in , out ) ; </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 1
<a> @ Override </a> 1
<a> public void decode ( </a> 0
<a> ChannelHandlerContext ctx , </a> 0
<a> ByteBuf in , ByteBuf out ) throws Exception { </a> 0
<a> <RARE_TOKEN> . this . decode ( ctx , in , out ) ; </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ctx ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> <RARE_TOKEN> . inboundBufferUpdated ( ctx ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ctx ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void flush ( </a> 1
<a> ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> <RARE_TOKEN> . flush ( ctx , future ) ; </a> 0
<a> } </a> 1
<a> public abstract void encode ( </a> 0
<a> ChannelHandlerContext ctx , </a> 0
<a> ByteBuf in , ByteBuf out ) throws Exception ; </a> 0
<a> public abstract void decode ( </a> 0
<a> ChannelHandlerContext ctx , </a> 0
<a> ByteBuf in , ByteBuf out ) throws Exception ; </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> public abstract class <RARE_TOKEN> < <RARE_TOKEN> > </a> 0
<a> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private ChannelHandlerContext ctx ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> this . ctx = ctx ; </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> return Unpooled . buffer ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> ByteBuf in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( in . readable ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ctx , <RARE_TOKEN> ( ctx , in ) , true ) ) { </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 1
<a> } catch ( Throwable t ) { </a> 0
<a> if ( t instanceof <RARE_TOKEN> ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 1
<a> } else { </a> 0
<a> ctx . fireExceptionCaught ( new <RARE_TOKEN> ( t ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> ByteBuf in = ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> try { </a> 0
<a> int <RARE_TOKEN> = in . readableBytes ( ) ; </a> 0
<a> <RARE_TOKEN> o = decode ( ctx , in ) ; </a> 0
<a> if ( o == null ) { </a> 1
<a> if ( <RARE_TOKEN> == in . readableBytes ( ) ) { </a> 0
<a> break ; </a> 0
<a> } else { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> == in . readableBytes ( ) ) { </a> 0
<a> throw new IllegalStateException ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> not read <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ctx , o , true ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 1
<a> } else { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 1
<a> in . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 1
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 1
<a> if ( t instanceof <RARE_TOKEN> ) { </a> 1
<a> ctx . fireExceptionCaught ( t ) ; </a> 1
<a> } else { </a> 1
<a> ctx . fireExceptionCaught ( new <RARE_TOKEN> ( t ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> in . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> public void <RARE_TOKEN> ( String <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( ! ctx . executor ( ) . inEventLoop ( ) ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> in event <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> ctx . pipeline ( ) . <RARE_TOKEN> ( ctx . name ( ) , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> ByteBuf in = ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> if ( in . readable ( ) ) { </a> 0
<a> ctx . <RARE_TOKEN> ( ) . writeBytes ( ctx . <RARE_TOKEN> ( ) ) ; </a> 1
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> ctx . pipeline ( ) . remove ( this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public abstract <RARE_TOKEN> decode ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception ; </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception { </a> 0
<a> return decode ( ctx , in ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> static boolean <RARE_TOKEN> ( </a> 0
<a> ChannelHandlerContext ctx , Object msg , boolean <RARE_TOKEN> ) throws Exception { </a> 0
<a> if ( msg == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( msg instanceof Object [ ] ) { </a> 0
<a> Object [ ] array = ( Object [ ] ) msg ; </a> 0
<a> if ( array . length == 0 ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> for ( Object m : array ) { </a> 0
<a> if ( m == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ctx , m , <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> if ( ctx . <RARE_TOKEN> ( ) ) { </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( msg ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( msg instanceof ByteBuf && ctx . <RARE_TOKEN> ( ) ) { </a> 0
<a> ByteBuf <RARE_TOKEN> = ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> ByteBuf src = ( ByteBuf ) msg ; </a> 0
<a> <RARE_TOKEN> . writeBytes ( src , src . readerIndex ( ) , src . readableBytes ( ) ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( ctx . <RARE_TOKEN> ( ) ) { </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( msg ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( msg instanceof ByteBuf && ctx . <RARE_TOKEN> ( ) ) { </a> 0
<a> ByteBuf <RARE_TOKEN> = ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> ByteBuf src = ( ByteBuf ) msg ; </a> 0
<a> <RARE_TOKEN> . writeBytes ( src , src . readerIndex ( ) , src . readableBytes ( ) ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( </a> 0
<a> <RARE_TOKEN> handler <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> , </a> 0
<a> ctx . name ( ) , </a> 0
<a> <RARE_TOKEN> ? <RARE_TOKEN> . class . getSimpleName ( ) </a> 0
<a> : <RARE_TOKEN> . class . getSimpleName ( ) , </a> 0
<a> msg . getClass ( ) . getSimpleName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object > { </a> 0
<a> private final ByteBuf [ ] <RARE_TOKEN> ; </a> 0
<a> private final int maxFrameLength ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( int maxFrameLength , ByteBuf <RARE_TOKEN> ) { </a> 0
<a> this ( maxFrameLength , true , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int maxFrameLength , boolean <RARE_TOKEN> , ByteBuf <RARE_TOKEN> ) { </a> 0
<a> this ( maxFrameLength , <RARE_TOKEN> , true , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int maxFrameLength , boolean <RARE_TOKEN> , boolean <RARE_TOKEN> , </a> 0
<a> ByteBuf <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( maxFrameLength ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = new ByteBuf [ ] { </a> 0
<a> <RARE_TOKEN> . slice ( </a> 0
<a> <RARE_TOKEN> . readerIndex ( ) , <RARE_TOKEN> . readableBytes ( ) ) </a> 0
<a> } ; </a> 0
<a> this . maxFrameLength = maxFrameLength ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int maxFrameLength , ByteBuf ... <RARE_TOKEN> ) { </a> 0
<a> this ( maxFrameLength , true , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int maxFrameLength , boolean <RARE_TOKEN> , ByteBuf ... <RARE_TOKEN> ) { </a> 0
<a> this ( maxFrameLength , <RARE_TOKEN> , true , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int maxFrameLength , boolean <RARE_TOKEN> , boolean <RARE_TOKEN> , ByteBuf ... <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( maxFrameLength ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . length == 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = new ByteBuf [ <RARE_TOKEN> . length ] ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> ByteBuf d = <RARE_TOKEN> [ i ] ; </a> 0
<a> <RARE_TOKEN> ( d ) ; </a> 0
<a> this . <RARE_TOKEN> [ i ] = d . slice ( d . readerIndex ( ) , d . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> this . maxFrameLength = maxFrameLength ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object decode ( ChannelHandlerContext ctx , ByteBuf buffer ) throws Exception { </a> 0
<a> int <RARE_TOKEN> = Integer . MAX_VALUE ; </a> 0
<a> ByteBuf <RARE_TOKEN> = null ; </a> 0
<a> for ( ByteBuf <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = indexOf ( buffer , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> >= 0 && <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . capacity ( ) ; </a> 0
<a> ByteBuf frame ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> buffer . skipBytes ( <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = 0 ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> fail ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > maxFrameLength ) { </a> 0
<a> buffer . skipBytes ( <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> fail ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> frame = buffer . readBytes ( <RARE_TOKEN> ) ; </a> 0
<a> buffer . skipBytes ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> frame = buffer . readBytes ( <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return frame ; </a> 0
<a> } else { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> if ( buffer . readableBytes ( ) > maxFrameLength ) { </a> 0
<a> <RARE_TOKEN> = buffer . readableBytes ( ) ; </a> 0
<a> buffer . skipBytes ( buffer . readableBytes ( ) ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> fail ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> += buffer . readableBytes ( ) ; </a> 0
<a> buffer . skipBytes ( buffer . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void fail ( ChannelHandlerContext ctx , long <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> ctx . fireExceptionCaught ( </a> 0
<a> new TooLongFrameException ( </a> 0
<a> <RARE_TOKEN> length <RARE_TOKEN> " + maxFrameLength + </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> + " - <RARE_TOKEN> ) ) ; </a> 0
<a> } else { </a> 0
<a> ctx . fireExceptionCaught ( </a> 0
<a> new TooLongFrameException ( </a> 0
<a> <RARE_TOKEN> length <RARE_TOKEN> " + maxFrameLength + </a> 0
<a> " - <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static int indexOf ( ByteBuf <RARE_TOKEN> , ByteBuf <RARE_TOKEN> ) { </a> 0
<a> for ( int i = <RARE_TOKEN> . readerIndex ( ) ; i < <RARE_TOKEN> . writerIndex ( ) ; i ++ ) { </a> 0
<a> int <RARE_TOKEN> = i ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> for ( <RARE_TOKEN> = 0 ; <RARE_TOKEN> < <RARE_TOKEN> . capacity ( ) ; <RARE_TOKEN> ++ ) { </a> 0
<a> if ( <RARE_TOKEN> . getByte ( <RARE_TOKEN> ) != <RARE_TOKEN> . getByte ( <RARE_TOKEN> ) ) { </a> 0
<a> break ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> . writerIndex ( ) && </a> 0
<a> <RARE_TOKEN> != <RARE_TOKEN> . capacity ( ) - 1 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> . capacity ( ) ) { </a> 0
<a> return i - <RARE_TOKEN> . readerIndex ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ByteBuf <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . readable ( ) ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( int maxFrameLength ) { </a> 0
<a> if ( maxFrameLength <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> maxFrameLength ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> public static ByteBuf [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return new ByteBuf [ ] { </a> 0
<a> Unpooled . wrappedBuffer ( new byte [ ] { 0 } ) } ; </a> 0
<a> } </a> 0
<a> public static ByteBuf [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return new ByteBuf [ ] { </a> 0
<a> Unpooled . wrappedBuffer ( new byte [ ] { <RARE_TOKEN> , <RARE_TOKEN> } ) , </a> 0
<a> Unpooled . wrappedBuffer ( new byte [ ] { <RARE_TOKEN> } ) , </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object > { </a> 0
<a> private final int maxFrameLength ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private long <RARE_TOKEN> ; </a> 0
<a> private long <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int maxFrameLength , </a> 0
<a> int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> this ( maxFrameLength , <RARE_TOKEN> , <RARE_TOKEN> , 0 , 0 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int maxFrameLength , </a> 0
<a> int <RARE_TOKEN> , int <RARE_TOKEN> , </a> 0
<a> int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> this ( </a> 0
<a> maxFrameLength , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , true ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int maxFrameLength , </a> 1
<a> int <RARE_TOKEN> , int <RARE_TOKEN> , </a> 1
<a> int <RARE_TOKEN> , int <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> if ( maxFrameLength <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> maxFrameLength ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != 1 && <RARE_TOKEN> != 2 && </a> 1
<a> <RARE_TOKEN> != 3 && <RARE_TOKEN> != 4 && </a> 1
<a> <RARE_TOKEN> != 8 ) { </a> 1
<a> throw new IllegalArgumentException ( </a> 1
<a> <RARE_TOKEN> must be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> or <RARE_TOKEN> " + </a> 1
<a> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> > maxFrameLength - <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + maxFrameLength + <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> be <RARE_TOKEN> to or <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . maxFrameLength = maxFrameLength ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object decode ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> long <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = ( int ) Math . min ( <RARE_TOKEN> , in . readableBytes ( ) ) ; </a> 0
<a> in . skipBytes ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> -= <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ctx , false ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( in . readableBytes ( ) < <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = in . readerIndex ( ) + <RARE_TOKEN> ; </a> 0
<a> long <RARE_TOKEN> ; </a> 1
<a> switch ( <RARE_TOKEN> ) { </a> 1
<a> case 1 : </a> 1
<a> <RARE_TOKEN> = in . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> break ; </a> 1
<a> case 2 : </a> 1
<a> <RARE_TOKEN> = in . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> break ; </a> 1
<a> case 3 : </a> 1
<a> <RARE_TOKEN> = in . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> break ; </a> 1
<a> case 4 : </a> 1
<a> <RARE_TOKEN> = in . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> break ; </a> 1
<a> case 8 : </a> 1
<a> <RARE_TOKEN> = in . getLong ( <RARE_TOKEN> ) ; </a> 1
<a> break ; </a> 1
<a> default : </a> 1
<a> throw new Error ( <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> in . skipBytes ( <RARE_TOKEN> ) ; </a> 0
<a> throw new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> length <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> in . skipBytes ( <RARE_TOKEN> ) ; </a> 0
<a> throw new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> frame length <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> is <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > maxFrameLength ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - in . readableBytes ( ) ; </a> 0
<a> in . skipBytes ( in . readableBytes ( ) ) ; </a> 0
<a> <RARE_TOKEN> ( ctx , true ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = ( int ) <RARE_TOKEN> ; </a> 0
<a> if ( in . readableBytes ( ) < <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> in . skipBytes ( <RARE_TOKEN> ) ; </a> 0
<a> throw new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> frame length <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> is <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> in . skipBytes ( <RARE_TOKEN> ) ; </a> 0
<a> int readerIndex = in . readerIndex ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> ByteBuf frame = <RARE_TOKEN> ( in , readerIndex , <RARE_TOKEN> ) ; </a> 0
<a> in . readerIndex ( readerIndex + <RARE_TOKEN> ) ; </a> 0
<a> return frame ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx , boolean <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> long <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> if ( ! <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> && <RARE_TOKEN> ) { </a> 0
<a> fail ( ctx , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> ) { </a> 0
<a> fail ( ctx , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected ByteBuf <RARE_TOKEN> ( ByteBuf buffer , int index , int length ) { </a> 0
<a> ByteBuf frame = buffer . unsafe ( ) . <RARE_TOKEN> ( length ) ; </a> 1
<a> frame . writeBytes ( buffer , index , length ) ; </a> 0
<a> return frame ; </a> 0
<a> } </a> 0
<a> private void fail ( ChannelHandlerContext ctx , long <RARE_TOKEN> ) { </a> 1
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> ctx . fireExceptionCaught ( </a> 1
<a> new TooLongFrameException ( </a> 1
<a> <RARE_TOKEN> frame length <RARE_TOKEN> " + maxFrameLength + </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> + " - <RARE_TOKEN> ) ) ; </a> 1
<a> } else { </a> 0
<a> ctx . fireExceptionCaught ( </a> 1
<a> new TooLongFrameException ( </a> 1
<a> <RARE_TOKEN> frame length <RARE_TOKEN> " + maxFrameLength + </a> 0
<a> " - <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import java . nio . ByteOrder ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < ByteBuf > { </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> , false ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != 1 && <RARE_TOKEN> != 2 && </a> 0
<a> <RARE_TOKEN> != 3 && <RARE_TOKEN> != 4 && </a> 0
<a> <RARE_TOKEN> != 8 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> or <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof ByteBuf ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( </a> 0
<a> ChannelHandlerContext ctx , </a> 1
<a> ByteBuf msg , ByteBuf out ) throws Exception { </a> 1
<a> int length = <RARE_TOKEN> ? </a> 0
<a> msg . readableBytes ( ) + <RARE_TOKEN> : msg . readableBytes ( ) ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case 1 : </a> 0
<a> if ( length >= <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> " + length ) ; </a> 0
<a> } </a> 0
<a> out . writeByte ( ( byte ) length ) ; </a> 0
<a> break ; </a> 0
<a> case 2 : </a> 0
<a> if ( length >= <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> a short <RARE_TOKEN> " + length ) ; </a> 0
<a> } </a> 0
<a> out . <RARE_TOKEN> ( ( short ) length ) ; </a> 0
<a> break ; </a> 0
<a> case 3 : </a> 0
<a> if ( length >= <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> " + length ) ; </a> 0
<a> } </a> 0
<a> out . <RARE_TOKEN> ( length ) ; </a> 0
<a> break ; </a> 0
<a> case 4 : </a> 0
<a> out . writeInt ( length ) ; </a> 0
<a> break ; </a> 0
<a> case 8 : </a> 0
<a> out . <RARE_TOKEN> ( length ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new Error ( <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> out . writeBytes ( msg , msg . readerIndex ( ) , msg . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> public abstract class <RARE_TOKEN> < <RARE_TOKEN> > extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 1
<a> @ Override </a> 0
<a> public void flush ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> MessageBuf < <RARE_TOKEN> > in = ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> ByteBuf out = ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> Object msg = in . poll ( ) ; </a> 0
<a> if ( msg == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( msg ) ) { </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( msg ) ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> try { </a> 0
<a> encode ( ctx , <RARE_TOKEN> , out ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( t instanceof <RARE_TOKEN> ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 0
<a> } else { </a> 0
<a> ctx . fireExceptionCaught ( new <RARE_TOKEN> ( t ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> ctx . flush ( future ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public abstract void encode ( ChannelHandlerContext ctx , <RARE_TOKEN> msg , ByteBuf out ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> public abstract class <RARE_TOKEN> < <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> > </a> 0
<a> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> < <RARE_TOKEN> > , </a> 1
<a> <RARE_TOKEN> < <RARE_TOKEN> > { </a> 1
<a> private final <RARE_TOKEN> < <RARE_TOKEN> , <RARE_TOKEN> > <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> < <RARE_TOKEN> , <RARE_TOKEN> > ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return <RARE_TOKEN> . this . <RARE_TOKEN> ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> encode ( ChannelHandlerContext ctx , <RARE_TOKEN> msg ) throws Exception { </a> 0
<a> return <RARE_TOKEN> . this . encode ( ctx , msg ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private final <RARE_TOKEN> < <RARE_TOKEN> , <RARE_TOKEN> > <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> < <RARE_TOKEN> , <RARE_TOKEN> > ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return <RARE_TOKEN> . this . <RARE_TOKEN> ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> decode ( ChannelHandlerContext ctx , <RARE_TOKEN> msg ) throws Exception { </a> 0
<a> return <RARE_TOKEN> . this . decode ( ctx , msg ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public MessageBuf < <RARE_TOKEN> > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( </a> 1
<a> ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> <RARE_TOKEN> . inboundBufferUpdated ( ctx ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public MessageBuf < <RARE_TOKEN> > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void flush ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> <RARE_TOKEN> . flush ( ctx , future ) ; </a> 1
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public abstract <RARE_TOKEN> encode ( ChannelHandlerContext ctx , <RARE_TOKEN> msg ) throws Exception ; </a> 0
<a> public abstract <RARE_TOKEN> decode ( ChannelHandlerContext ctx , <RARE_TOKEN> msg ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> public abstract class <RARE_TOKEN> < <RARE_TOKEN> , <RARE_TOKEN> > </a> 0
<a> extends <RARE_TOKEN> implements <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> @ Override </a> 0
<a> public MessageBuf < <RARE_TOKEN> > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) </a> 1
<a> throws Exception { </a> 1
<a> MessageBuf < <RARE_TOKEN> > in = ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> try { </a> 0
<a> Object msg = in . poll ( ) ; </a> 0
<a> if ( msg == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( msg ) ) { </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( msg ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = decode ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ctx , <RARE_TOKEN> , true ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( t instanceof <RARE_TOKEN> ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 0
<a> } else { </a> 0
<a> ctx . fireExceptionCaught ( new <RARE_TOKEN> ( t ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public abstract <RARE_TOKEN> decode ( ChannelHandlerContext ctx , <RARE_TOKEN> msg ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> public abstract class <RARE_TOKEN> < <RARE_TOKEN> , <RARE_TOKEN> > extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> @ Override </a> 0
<a> public void flush ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> MessageBuf < <RARE_TOKEN> > in = ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> try { </a> 0
<a> Object msg = in . poll ( ) ; </a> 0
<a> if ( msg == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( msg ) ) { </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( msg ) ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) msg ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = encode ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ctx , <RARE_TOKEN> , false ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( t instanceof <RARE_TOKEN> ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 0
<a> } else { </a> 0
<a> ctx . fireExceptionCaught ( new <RARE_TOKEN> ( t ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> ctx . flush ( future ) ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public abstract <RARE_TOKEN> encode ( ChannelHandlerContext ctx , <RARE_TOKEN> msg ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> public abstract class <RARE_TOKEN> < <RARE_TOKEN> , <RARE_TOKEN> > extends <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ) ; </a> 1
<a> private final ByteBuf <RARE_TOKEN> = Unpooled . buffer ( ) ; </a> 1
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> private <RARE_TOKEN> state ; </a> 0
<a> private int <RARE_TOKEN> = - 1 ; </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> this ( null ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> state = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . readerIndex ( ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> state ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> state ( state ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> state ( ) { </a> 0
<a> return state ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> state ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = state ; </a> 0
<a> state = <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected int <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ( ) . readableBytes ( ) ; </a> 1
<a> } </a> 1
<a> protected ByteBuf <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( </a> 0
<a> ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> ByteBuf in = <RARE_TOKEN> ; </a> 0
<a> if ( in . readable ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ctx , <RARE_TOKEN> ( ctx , <RARE_TOKEN> ) , true ) ) { </a> 0
<a> fireInboundBufferUpdated ( ctx , in ) ; </a> 0
<a> } </a> 1
<a> } catch ( <RARE_TOKEN> replay ) { </a> 0
<a> replay . expect ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( t instanceof <RARE_TOKEN> ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 1
<a> } else { </a> 0
<a> ctx . fireExceptionCaught ( new <RARE_TOKEN> ( t ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> ByteBuf in = <RARE_TOKEN> ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> while ( in . readable ( ) ) { </a> 0
<a> try { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> = in . readerIndex ( ) ; </a> 0
<a> Object result = null ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = state ; </a> 0
<a> try { </a> 0
<a> result = decode ( ctx , <RARE_TOKEN> ) ; </a> 1
<a> if ( result == null ) { </a> 1
<a> if ( <RARE_TOKEN> == in . readerIndex ( ) && <RARE_TOKEN> == state ) { </a> 1
<a> throw new IllegalStateException ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> if <RARE_TOKEN> data is <RARE_TOKEN> <RARE_TOKEN> state <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } else { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> replay ) { </a> 0
<a> replay . expect ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> >= 0 ) { </a> 0
<a> in . readerIndex ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> } </a> 0
<a> } </a> 1
<a> if ( result == null ) { </a> 1
<a> break ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == in . readerIndex ( ) && <RARE_TOKEN> == state ) { </a> 0
<a> throw new IllegalStateException ( </a> 1
<a> <RARE_TOKEN> method must <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> one byte " + </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> message <RARE_TOKEN> <RARE_TOKEN> " + </a> 1
<a> getClass ( ) + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ctx , result , true ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 1
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 1
<a> fireInboundBufferUpdated ( ctx , in ) ; </a> 0
<a> } </a> 1
<a> if ( t instanceof <RARE_TOKEN> ) { </a> 1
<a> ctx . fireExceptionCaught ( t ) ; </a> 1
<a> } else { </a> 1
<a> ctx . fireExceptionCaught ( new <RARE_TOKEN> ( t ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> fireInboundBufferUpdated ( ctx , in ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void fireInboundBufferUpdated ( ChannelHandlerContext ctx , ByteBuf in ) { </a> 0
<a> final int <RARE_TOKEN> = in . readerIndex ( ) ; </a> 0
<a> in . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> final int <RARE_TOKEN> = in . readerIndex ( ) ; </a> 0
<a> <RARE_TOKEN> -= <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . ByteBufIndexFinder ; </a> 0
<a> import io . netty . buffer . ChannelBufType ; </a> 1
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 1
<a> import java . io . InputStream ; </a> 1
<a> import java . io . OutputStream ; </a> 1
<a> import java . nio . ByteBuffer ; </a> 1
<a> import java . nio . ByteOrder ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . nio . charset . Charset ; </a> 0
<a> class <RARE_TOKEN> implements ByteBuf { </a> 1
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> private final ByteBuf buffer ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> static final <RARE_TOKEN> EMPTY_BUFFER = new <RARE_TOKEN> ( Unpooled . EMPTY_BUFFER ) ; </a> 0
<a> static { </a> 0
<a> EMPTY_BUFFER . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> this . buffer = buffer ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int capacity ( ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return buffer . capacity ( ) ; </a> 0
<a> } else { </a> 0
<a> return Integer . MAX_VALUE ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void capacity ( int newCapacity ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int maxCapacity ( ) { </a> 0
<a> return capacity ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelBufType type ( ) { </a> 1
<a> return ChannelBufType . <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public byte [ ] array ( ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void clear ( ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object obj ) { </a> 0
<a> return this == obj ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ByteBuf buffer ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( int index , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( int <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 1 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte getByte ( int index ) { </a> 0
<a> checkIndex ( index , 1 ) ; </a> 0
<a> return buffer . getByte ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 1 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , byte [ ] dst , int dstIndex , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> buffer . getBytes ( index , dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , byte [ ] dst ) { </a> 0
<a> checkIndex ( index , dst . length ) ; </a> 0
<a> buffer . getBytes ( index , dst ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuffer dst ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuf dst , int dstIndex , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> buffer . getBytes ( index , dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuf dst , int length ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , ByteBuf dst ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public int getBytes ( int index , <RARE_TOKEN> out , int length ) </a> 1
<a> throws IOException { </a> 1
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void getBytes ( int index , OutputStream out , int length ) </a> 0
<a> throws IOException { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getInt ( int index ) { </a> 0
<a> checkIndex ( index , 4 ) ; </a> 0
<a> return buffer . getInt ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 4 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getLong ( int index ) { </a> 0
<a> checkIndex ( index , 8 ) ; </a> 0
<a> return buffer . getLong ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 3 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 3 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 2 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 2 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public char <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 2 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public float <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 4 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public double <RARE_TOKEN> ( int index ) { </a> 0
<a> checkIndex ( index , 8 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int indexOf ( int fromIndex , int <RARE_TOKEN> , byte value ) { </a> 0
<a> int <RARE_TOKEN> = buffer . indexOf ( fromIndex , <RARE_TOKEN> , value ) ; </a> 1
<a> if ( <RARE_TOKEN> < 0 ) { </a> 1
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public int indexOf ( int fromIndex , int <RARE_TOKEN> , </a> 1
<a> ByteBufIndexFinder <RARE_TOKEN> ) { </a> 1
<a> int <RARE_TOKEN> = buffer . indexOf ( fromIndex , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( byte value ) { </a> 0
<a> int bytes = buffer . bytesBefore ( value ) ; </a> 0
<a> if ( bytes < 0 ) { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return bytes ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> int bytes = buffer . bytesBefore ( <RARE_TOKEN> ) ; </a> 0
<a> if ( bytes < 0 ) { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return bytes ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( int length , byte value ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 1
<a> int bytes = buffer . bytesBefore ( length , value ) ; </a> 1
<a> if ( bytes < 0 ) { </a> 1
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return bytes ; </a> 1
<a> } </a> 0
<a> @ Override </a> 1
<a> public int bytesBefore ( int length , ByteBufIndexFinder <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> int bytes = buffer . bytesBefore ( length , <RARE_TOKEN> ) ; </a> 0
<a> if ( bytes < 0 ) { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return bytes ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( int index , int length , byte value ) { </a> 1
<a> int bytes = buffer . bytesBefore ( index , length , value ) ; </a> 1
<a> if ( bytes < 0 ) { </a> 1
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return bytes ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public int bytesBefore ( int index , int length , </a> 1
<a> ByteBufIndexFinder <RARE_TOKEN> ) { </a> 1
<a> int bytes = buffer . bytesBefore ( index , length , <RARE_TOKEN> ) ; </a> 0
<a> if ( bytes < 0 ) { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return bytes ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteOrder order ( ) { </a> 0
<a> return buffer . order ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf order ( ByteOrder <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == order ( ) ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean readable ( ) { </a> 1
<a> return <RARE_TOKEN> ? buffer . readable ( ) : true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int readableBytes ( ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return buffer . readableBytes ( ) ; </a> 0
<a> } else { </a> 0
<a> return Integer . MAX_VALUE - buffer . readerIndex ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( byte [ ] dst , int dstIndex , int length ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> buffer . readBytes ( dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( byte [ ] dst ) { </a> 0
<a> <RARE_TOKEN> ( dst . length ) ; </a> 0
<a> buffer . readBytes ( dst ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuffer dst ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuf dst , int dstIndex , int length ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> buffer . readBytes ( dst , dstIndex , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuf dst , int length ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( ByteBuf dst ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public int readBytes ( <RARE_TOKEN> out , int length ) </a> 0
<a> throws IOException { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf readBytes ( int length ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> return buffer . readBytes ( length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( int length ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readBytes ( OutputStream out , int length ) throws IOException { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int readerIndex ( ) { </a> 0
<a> return buffer . readerIndex ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void readerIndex ( int readerIndex ) { </a> 0
<a> buffer . readerIndex ( readerIndex ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 4 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 4 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 8 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 3 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 3 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public short <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public char <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 2 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public float <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 4 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public double <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( 8 ) ; </a> 0
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> buffer . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , boolean value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setByte ( int index , int value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , byte [ ] src , int srcIndex , int length ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , byte [ ] src ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuffer src ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuf src , int srcIndex , int length ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuf src , int length ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setBytes ( int index , ByteBuf src ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int setBytes ( int index , InputStream in , int length ) </a> 0
<a> throws IOException { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int length ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int setBytes ( int index , <RARE_TOKEN> in , int length ) </a> 0
<a> throws IOException { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int readerIndex , int writerIndex ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , long value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , float value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int index , double value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void skipBytes ( int length ) { </a> 0
<a> <RARE_TOKEN> ( length ) ; </a> 0
<a> buffer . skipBytes ( length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf slice ( ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf slice ( int index , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> return buffer . slice ( index , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuffer nioBuffer ( ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer nioBuffer ( int index , int length ) { </a> 1
<a> checkIndex ( index , length ) ; </a> 0
<a> return buffer . nioBuffer ( index , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return buffer . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuffer [ ] nioBuffers ( ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuffer [ ] nioBuffers ( int index , int length ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> return buffer . nioBuffers ( index , length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( int index , int length , Charset charset ) { </a> 0
<a> checkIndex ( index , length ) ; </a> 0
<a> return buffer . toString ( index , length , charset ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( Charset <RARE_TOKEN> ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return getClass ( ) . getSimpleName ( ) + <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> readerIndex ( ) + </a> 0
<a> ", " + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> writerIndex ( ) + </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeByte ( int value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( byte [ ] src , int srcIndex , int length ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void writeBytes ( byte [ ] src ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuffer src ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuf src , int srcIndex , int length ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuf src , int length ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeBytes ( ByteBuf src ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int writeBytes ( InputStream in , int length ) throws IOException { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int writeBytes ( <RARE_TOKEN> in , int length ) </a> 0
<a> throws IOException { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeInt ( int value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( long value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int length ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int writerIndex ( ) { </a> 0
<a> return buffer . writerIndex ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writerIndex ( int writerIndex ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( float value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( double value ) { </a> 0
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> private void checkIndex ( int index , int length ) { </a> 0
<a> if ( index + length > buffer . writerIndex ( ) ) { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int readableBytes ) { </a> 0
<a> if ( buffer . readableBytes ( ) < readableBytes ) { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> unsafe ( ) { </a> 1
<a> throw new UnreplayableOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> public class TooLongFrameException extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> public TooLongFrameException ( ) { </a> 0
<a> } </a> 0
<a> public TooLongFrameException ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public TooLongFrameException ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public TooLongFrameException ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> public class UnreplayableOperationException extends UnsupportedOperationException { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public UnreplayableOperationException ( ) { </a> 0
<a> } </a> 0
<a> public UnreplayableOperationException ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public UnreplayableOperationException ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> public UnreplayableOperationException ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> Object message , Class < ? > ... <RARE_TOKEN> ) { </a> 0
<a> super ( message ( </a> 0
<a> message == null ? <RARE_TOKEN> : message . getClass ( ) . getName ( ) , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ) { } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String s ) { </a> 0
<a> super ( s ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> private static String message ( </a> 0
<a> String <RARE_TOKEN> , Class < ? > ... <RARE_TOKEN> ) { </a> 0
<a> StringBuilder buf = new StringBuilder ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . length > 0 ) { </a> 0
<a> buf . append ( " (expected: " ) . append ( <RARE_TOKEN> [ 0 ] . getName ( ) ) ; </a> 0
<a> for ( int i = 1 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> Class < ? > t = <RARE_TOKEN> [ i ] ; </a> 0
<a> if ( t == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> buf . append ( ", " ) . append ( t . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return buf . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final byte <RARE_TOKEN> = ( byte ) <RARE_TOKEN> ; </a> 0
<a> private static final byte <RARE_TOKEN> = ( byte ) <RARE_TOKEN> ; </a> 0
<a> private static final byte <RARE_TOKEN> = - 5 ; </a> 0
<a> private static final byte <RARE_TOKEN> = - 1 ; </a> 0
<a> private static byte [ ] <RARE_TOKEN> ( <RARE_TOKEN> dialect ) { </a> 0
<a> if ( dialect == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return dialect . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static byte [ ] <RARE_TOKEN> ( <RARE_TOKEN> dialect ) { </a> 0
<a> if ( dialect == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return dialect . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( <RARE_TOKEN> dialect ) { </a> 0
<a> if ( dialect == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return dialect . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static ByteBuf encode ( ByteBuf src ) { </a> 0
<a> return encode ( src , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf encode ( ByteBuf src , <RARE_TOKEN> dialect ) { </a> 0
<a> return encode ( src , <RARE_TOKEN> ( dialect ) , dialect ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf encode ( ByteBuf src , boolean <RARE_TOKEN> ) { </a> 0
<a> return encode ( src , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf encode ( ByteBuf src , boolean <RARE_TOKEN> , <RARE_TOKEN> dialect ) { </a> 0
<a> if ( src == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> ByteBuf <RARE_TOKEN> = encode ( src , src . readerIndex ( ) , src . readableBytes ( ) , <RARE_TOKEN> , dialect ) ; </a> 0
<a> src . readerIndex ( src . writerIndex ( ) ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static ByteBuf encode ( ByteBuf src , int off , int len ) { </a> 0
<a> return encode ( src , off , len , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf encode ( ByteBuf src , int off , int len , <RARE_TOKEN> dialect ) { </a> 0
<a> return encode ( src , off , len , <RARE_TOKEN> ( dialect ) , dialect ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf encode ( </a> 0
<a> ByteBuf src , int off , int len , boolean <RARE_TOKEN> ) { </a> 0
<a> return encode ( src , off , len , <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf encode ( </a> 0
<a> ByteBuf src , int off , int len , boolean <RARE_TOKEN> , <RARE_TOKEN> dialect ) { </a> 0
<a> if ( src == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( dialect == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = len * 4 / 3 ; </a> 0
<a> ByteBuf <RARE_TOKEN> = src . unsafe ( ) . <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> + </a> 0
<a> ( len <RARE_TOKEN> 3 > 0 ? 4 : 0 ) + </a> 0
<a> ( <RARE_TOKEN> ? <RARE_TOKEN> / <RARE_TOKEN> : 0 ) ) . order ( src . order ( ) ) ; </a> 0
<a> int d = 0 ; </a> 0
<a> int e = 0 ; </a> 0
<a> int <RARE_TOKEN> = len - 2 ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( ; d < <RARE_TOKEN> ; d += 3 , e += 4 ) { </a> 0
<a> <RARE_TOKEN> ( src , d + off , 3 , <RARE_TOKEN> , e , dialect ) ; </a> 0
<a> <RARE_TOKEN> += 4 ; </a> 0
<a> if ( <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . setByte ( e + 4 , <RARE_TOKEN> ) ; </a> 0
<a> e ++ ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( d < len ) { </a> 0
<a> <RARE_TOKEN> ( src , d + off , len - d , <RARE_TOKEN> , e , dialect ) ; </a> 0
<a> e += 4 ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . slice ( 0 , e ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( </a> 0
<a> ByteBuf src , int <RARE_TOKEN> , int <RARE_TOKEN> , </a> 0
<a> ByteBuf <RARE_TOKEN> , int <RARE_TOKEN> , <RARE_TOKEN> dialect ) { </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> ( dialect ) ; </a> 0
<a> int <RARE_TOKEN> = </a> 0
<a> ( <RARE_TOKEN> > 0 ? src . getByte ( <RARE_TOKEN> ) < < 24 > > > 8 : 0 ) | </a> 0
<a> ( <RARE_TOKEN> > 1 ? src . getByte ( <RARE_TOKEN> + 1 ) < < 24 > > > 16 : 0 ) | </a> 0
<a> ( <RARE_TOKEN> > 2 ? src . getByte ( <RARE_TOKEN> + 2 ) < < 24 > > > 24 : 0 ) ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case 3 : </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> , <RARE_TOKEN> [ <RARE_TOKEN> > > > <RARE_TOKEN> ] ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 1 , <RARE_TOKEN> [ <RARE_TOKEN> > > > 12 & <RARE_TOKEN> ] ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 2 , <RARE_TOKEN> [ <RARE_TOKEN> > > > 6 & <RARE_TOKEN> ] ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 3 , <RARE_TOKEN> [ <RARE_TOKEN> & <RARE_TOKEN> ] ) ; </a> 0
<a> break ; </a> 0
<a> case 2 : </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> , <RARE_TOKEN> [ <RARE_TOKEN> > > > <RARE_TOKEN> ] ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 1 , <RARE_TOKEN> [ <RARE_TOKEN> > > > 12 & <RARE_TOKEN> ] ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 2 , <RARE_TOKEN> [ <RARE_TOKEN> > > > 6 & <RARE_TOKEN> ] ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 3 , <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> case 1 : </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> , <RARE_TOKEN> [ <RARE_TOKEN> > > > <RARE_TOKEN> ] ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 1 , <RARE_TOKEN> [ <RARE_TOKEN> > > > 12 & <RARE_TOKEN> ] ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 2 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 3 , <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static ByteBuf decode ( ByteBuf src ) { </a> 0
<a> return decode ( src , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf decode ( ByteBuf src , <RARE_TOKEN> dialect ) { </a> 0
<a> if ( src == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> ByteBuf <RARE_TOKEN> = decode ( src , src . readerIndex ( ) , src . readableBytes ( ) , dialect ) ; </a> 0
<a> src . readerIndex ( src . writerIndex ( ) ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static ByteBuf decode ( </a> 0
<a> ByteBuf src , int off , int len ) { </a> 0
<a> return decode ( src , off , len , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public static ByteBuf decode ( </a> 0
<a> ByteBuf src , int off , int len , <RARE_TOKEN> dialect ) { </a> 0
<a> if ( src == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( dialect == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> ( dialect ) ; </a> 0
<a> int <RARE_TOKEN> = len * 3 / 4 ; </a> 0
<a> ByteBuf <RARE_TOKEN> = src . unsafe ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) . order ( src . order ( ) ) ; </a> 1
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ 4 ] ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> int i ; </a> 0
<a> byte <RARE_TOKEN> ; </a> 0
<a> byte <RARE_TOKEN> ; </a> 0
<a> for ( i = off ; i < off + len ; i ++ ) { </a> 0
<a> <RARE_TOKEN> = ( byte ) ( src . getByte ( i ) & <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > 3 ) { </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , 0 , <RARE_TOKEN> , <RARE_TOKEN> , dialect ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> input <RARE_TOKEN> <RARE_TOKEN> " + i + <RARE_TOKEN> " + </a> 0
<a> src . <RARE_TOKEN> ( i ) + " <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . slice ( 0 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( </a> 0
<a> byte [ ] src , int <RARE_TOKEN> , </a> 0
<a> ByteBuf <RARE_TOKEN> , int <RARE_TOKEN> , <RARE_TOKEN> dialect ) { </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> ( dialect ) ; </a> 0
<a> if ( src [ <RARE_TOKEN> + 2 ] == <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = </a> 0
<a> ( <RARE_TOKEN> [ src [ <RARE_TOKEN> ] ] & 0xFF ) < < <RARE_TOKEN> | </a> 0
<a> ( <RARE_TOKEN> [ src [ <RARE_TOKEN> + 1 ] ] & 0xFF ) < < 12 ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> , ( byte ) ( <RARE_TOKEN> > > > 16 ) ) ; </a> 0
<a> return 1 ; </a> 0
<a> } else if ( src [ <RARE_TOKEN> + 3 ] == <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = </a> 0
<a> ( <RARE_TOKEN> [ src [ <RARE_TOKEN> ] ] & 0xFF ) < < <RARE_TOKEN> | </a> 0
<a> ( <RARE_TOKEN> [ src [ <RARE_TOKEN> + 1 ] ] & 0xFF ) < < 12 | </a> 0
<a> ( <RARE_TOKEN> [ src [ <RARE_TOKEN> + 2 ] ] & 0xFF ) < < 6 ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> , ( byte ) ( <RARE_TOKEN> > > > 16 ) ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 1 , ( byte ) ( <RARE_TOKEN> > > > 8 ) ) ; </a> 0
<a> return 2 ; </a> 0
<a> } else { </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = </a> 0
<a> ( <RARE_TOKEN> [ src [ <RARE_TOKEN> ] ] & 0xFF ) < < <RARE_TOKEN> | </a> 0
<a> ( <RARE_TOKEN> [ src [ <RARE_TOKEN> + 1 ] ] & 0xFF ) < < 12 | </a> 0
<a> ( <RARE_TOKEN> [ src [ <RARE_TOKEN> + 2 ] ] & 0xFF ) < < 6 | </a> 0
<a> <RARE_TOKEN> [ src [ <RARE_TOKEN> + 3 ] ] & 0xFF ; </a> 0
<a> } catch ( IndexOutOfBoundsException e ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> in <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> , ( byte ) ( <RARE_TOKEN> > > 16 ) ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 1 , ( byte ) ( <RARE_TOKEN> > > 8 ) ) ; </a> 0
<a> <RARE_TOKEN> . setByte ( <RARE_TOKEN> + 2 , ( byte ) <RARE_TOKEN> ) ; </a> 0
<a> return 3 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < ByteBuf , ByteBuf > { </a> 0
<a> private final <RARE_TOKEN> dialect ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> dialect ) { </a> 0
<a> if ( dialect == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . dialect = dialect ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof ByteBuf ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf decode ( ChannelHandlerContext ctx , ByteBuf msg ) throws Exception { </a> 0
<a> return <RARE_TOKEN> . decode ( msg , msg . readerIndex ( ) , msg . readableBytes ( ) , dialect ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( new byte [ ] { </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> } , </a> 0
<a> new byte [ ] { </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> - 9 , - 9 , - 9 , </a> 0
<a> - 5 , - 5 , </a> 0
<a> - 9 , - 9 , </a> 0
<a> - 5 , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> - 5 , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> - 9 , - 9 , - 9 , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> - 9 , - 9 , - 9 , </a> 0
<a> - 1 , </a> 0
<a> - 9 , - 9 , - 9 , </a> 0
<a> 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , </a> 0
<a> 14 , 15 , 16 , 17 , <RARE_TOKEN> , 19 , 20 , <RARE_TOKEN> , <RARE_TOKEN> , 23 , 24 , 25 , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> 26 , 27 , 28 , 29 , <RARE_TOKEN> , <RARE_TOKEN> , 32 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , </a> 0
<a> } , true ) , </a> 0
<a> <RARE_TOKEN> ( new byte [ ] { </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> } , </a> 0
<a> new byte [ ] { </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> - 9 , - 9 , - 9 , </a> 0
<a> - 5 , - 5 , </a> 0
<a> - 9 , - 9 , </a> 0
<a> - 5 , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> - 5 , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> - 9 , </a> 0
<a> - 9 , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> - 9 , </a> 0
<a> - 9 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> - 9 , - 9 , - 9 , </a> 0
<a> - 1 , </a> 0
<a> - 9 , - 9 , - 9 , </a> 0
<a> 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , </a> 0
<a> 14 , 15 , 16 , 17 , <RARE_TOKEN> , 19 , 20 , <RARE_TOKEN> , <RARE_TOKEN> , 23 , 24 , 25 , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> - 9 , </a> 0
<a> 26 , 27 , 28 , 29 , <RARE_TOKEN> , <RARE_TOKEN> , 32 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , </a> 0
<a> } , false ) , </a> 0
<a> <RARE_TOKEN> ( new byte [ ] { </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , </a> 0
<a> ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , ( byte ) <RARE_TOKEN> } , </a> 0
<a> new byte [ ] { </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> - 9 , - 9 , - 9 , </a> 0
<a> - 5 , - 5 , </a> 0
<a> - 9 , - 9 , </a> 0
<a> - 5 , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> - 5 , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , - 9 , </a> 0
<a> - 9 , </a> 0
<a> - 9 , </a> 0
<a> 0 , </a> 0
<a> - 9 , </a> 0
<a> - 9 , </a> 0
<a> 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , </a> 0
<a> - 9 , - 9 , - 9 , </a> 0
<a> - 1 , </a> 0
<a> - 9 , - 9 , - 9 , </a> 0
<a> 11 , 12 , 13 , 14 , 15 , 16 , 17 , <RARE_TOKEN> , 19 , 20 , <RARE_TOKEN> , <RARE_TOKEN> , 23 , </a> 0
<a> 24 , 25 , 26 , 27 , 28 , 29 , <RARE_TOKEN> , <RARE_TOKEN> , 32 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> - 9 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> - 9 , - 9 , - 9 , - 9 , </a> 0
<a> } , true ) ; </a> 0
<a> final byte [ ] <RARE_TOKEN> ; </a> 0
<a> final byte [ ] <RARE_TOKEN> ; </a> 0
<a> final boolean <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( byte [ ] <RARE_TOKEN> , byte [ ] <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < ByteBuf , ByteBuf > { </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> dialect ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( true ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( boolean <RARE_TOKEN> , <RARE_TOKEN> dialect ) { </a> 0
<a> if ( dialect == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . dialect = dialect ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof ByteBuf ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf encode ( ChannelHandlerContext ctx , </a> 0
<a> ByteBuf msg ) throws Exception { </a> 1
<a> return <RARE_TOKEN> . encode ( msg , msg . readerIndex ( ) , msg . readableBytes ( ) , <RARE_TOKEN> , dialect ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . bytes ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < ByteBuf , byte [ ] > { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof ByteBuf ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public byte [ ] decode ( ChannelHandlerContext ctx , ByteBuf msg ) throws Exception { </a> 0
<a> byte [ ] array ; </a> 0
<a> if ( msg . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( msg . <RARE_TOKEN> ( ) == 0 && msg . readableBytes ( ) == msg . capacity ( ) ) { </a> 0
<a> array = msg . array ( ) ; </a> 0
<a> } else { </a> 0
<a> array = new byte [ msg . readableBytes ( ) ] ; </a> 0
<a> msg . getBytes ( 0 , array ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> array = new byte [ msg . readableBytes ( ) ] ; </a> 0
<a> msg . getBytes ( 0 , array ) ; </a> 0
<a> } </a> 0
<a> return array ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> . JZlib ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> . ZStream ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final ZStream z = new ZStream ( ) ; </a> 0
<a> private byte [ ] dictionary ; </a> 0
<a> private volatile boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( ZlibWrapper . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ZlibWrapper wrapper ) { </a> 0
<a> if ( wrapper == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> int resultCode = z . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( wrapper ) ) ; </a> 0
<a> if ( resultCode != JZlib . Z_OK ) { </a> 0
<a> <RARE_TOKEN> . fail ( z , <RARE_TOKEN> <RARE_TOKEN> , resultCode ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( byte [ ] dictionary ) { </a> 0
<a> if ( dictionary == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . dictionary = dictionary ; </a> 0
<a> int resultCode ; </a> 0
<a> resultCode = z . <RARE_TOKEN> ( JZlib . <RARE_TOKEN> ) ; </a> 0
<a> if ( resultCode != JZlib . Z_OK ) { </a> 0
<a> <RARE_TOKEN> . fail ( z , <RARE_TOKEN> <RARE_TOKEN> , resultCode ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void decode ( </a> 0
<a> ChannelHandlerContext ctx , </a> 0
<a> ByteBuf in , ByteBuf out ) throws Exception { </a> 0
<a> if ( ! in . readable ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> int <RARE_TOKEN> = in . readableBytes ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = in . <RARE_TOKEN> ( ) ; </a> 0
<a> z . avail_in = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> z . next_in = in . array ( ) ; </a> 0
<a> z . next_in_index = in . <RARE_TOKEN> ( ) + in . readerIndex ( ) ; </a> 0
<a> } else { </a> 0
<a> byte [ ] array = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> in . readBytes ( array ) ; </a> 0
<a> z . next_in = array ; </a> 0
<a> z . next_in_index = 0 ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = z . next_in_index ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> < < 1 ; </a> 0
<a> boolean <RARE_TOKEN> = out . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> z . <RARE_TOKEN> = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> loop : for ( ; ; ) { </a> 0
<a> z . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> z . <RARE_TOKEN> = out . array ( ) ; </a> 0
<a> z . <RARE_TOKEN> = out . <RARE_TOKEN> ( ) + out . writerIndex ( ) ; </a> 0
<a> } else { </a> 0
<a> z . <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = z . <RARE_TOKEN> ; </a> 0
<a> int resultCode = z . <RARE_TOKEN> ( JZlib . <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = z . <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> out . writerIndex ( out . writerIndex ( ) + <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> out . writeBytes ( z . <RARE_TOKEN> , 0 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> switch ( resultCode ) { </a> 0
<a> case JZlib . <RARE_TOKEN> : </a> 0
<a> if ( dictionary == null ) { </a> 0
<a> <RARE_TOKEN> . fail ( z , <RARE_TOKEN> <RARE_TOKEN> , resultCode ) ; </a> 0
<a> } else { </a> 0
<a> resultCode = z . <RARE_TOKEN> ( dictionary , dictionary . length ) ; </a> 0
<a> if ( resultCode != JZlib . Z_OK ) { </a> 0
<a> <RARE_TOKEN> . fail ( z , "failed to set the <RARE_TOKEN> , resultCode ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> case JZlib . <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> z . <RARE_TOKEN> ( ) ; </a> 0
<a> break loop ; </a> 0
<a> case JZlib . Z_OK : </a> 0
<a> break ; </a> 0
<a> case JZlib . <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in <= 0 ) { </a> 0
<a> break loop ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> <RARE_TOKEN> . fail ( z , <RARE_TOKEN> <RARE_TOKEN> , resultCode ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> in . skipBytes ( z . next_in_index - <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> z . next_in = null ; </a> 0
<a> z . <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> . JZlib ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> . ZStream ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final byte [ ] <RARE_TOKEN> = new byte [ 0 ] ; </a> 0
<a> private final ZStream z = new ZStream ( ) ; </a> 0
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( ) ; </a> 0
<a> private volatile ChannelHandlerContext ctx ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( 6 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int compressionLevel ) { </a> 0
<a> this ( ZlibWrapper . <RARE_TOKEN> , compressionLevel ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ZlibWrapper wrapper ) { </a> 0
<a> this ( wrapper , 6 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ZlibWrapper wrapper , int compressionLevel ) { </a> 0
<a> this ( wrapper , compressionLevel , 15 , 8 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ZlibWrapper wrapper , int compressionLevel , int windowBits , int memLevel ) { </a> 0
<a> if ( compressionLevel < 0 || compressionLevel > 9 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + compressionLevel + </a> 0
<a> " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( windowBits < 9 || windowBits > 15 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + windowBits + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( memLevel < 1 || memLevel > 9 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + memLevel + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( wrapper == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( wrapper == ZlibWrapper . <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + ZlibWrapper . <RARE_TOKEN> + <RARE_TOKEN> is not " + </a> 0
<a> <RARE_TOKEN> for <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> synchronized ( z ) { </a> 0
<a> int resultCode = z . <RARE_TOKEN> ( </a> 0
<a> compressionLevel , windowBits , memLevel , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( wrapper ) ) ; </a> 0
<a> if ( resultCode != JZlib . Z_OK ) { </a> 0
<a> <RARE_TOKEN> . fail ( z , <RARE_TOKEN> <RARE_TOKEN> , resultCode ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( byte [ ] dictionary ) { </a> 0
<a> this ( 6 , dictionary ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int compressionLevel , byte [ ] dictionary ) { </a> 0
<a> this ( compressionLevel , 15 , 8 , dictionary ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int compressionLevel , int windowBits , int memLevel , byte [ ] dictionary ) { </a> 0
<a> if ( compressionLevel < 0 || compressionLevel > 9 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + compressionLevel + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( windowBits < 9 || windowBits > 15 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + windowBits + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( memLevel < 1 || memLevel > 9 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + memLevel + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( dictionary == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> synchronized ( z ) { </a> 0
<a> int resultCode ; </a> 0
<a> resultCode = z . <RARE_TOKEN> ( </a> 0
<a> compressionLevel , windowBits , memLevel , </a> 0
<a> JZlib . <RARE_TOKEN> ) ; </a> 0
<a> if ( resultCode != JZlib . Z_OK ) { </a> 0
<a> <RARE_TOKEN> . fail ( z , <RARE_TOKEN> <RARE_TOKEN> , resultCode ) ; </a> 0
<a> } else { </a> 0
<a> resultCode = z . <RARE_TOKEN> ( dictionary , dictionary . length ) ; </a> 0
<a> if ( resultCode != JZlib . Z_OK ) { </a> 0
<a> <RARE_TOKEN> . fail ( z , "failed to set the <RARE_TOKEN> , resultCode ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture close ( ) { </a> 0
<a> return close ( ctx ( ) . channel ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture close ( ChannelFuture future ) { </a> 0
<a> return <RARE_TOKEN> ( ctx ( ) , future ) ; </a> 0
<a> } </a> 0
<a> private ChannelHandlerContext ctx ( ) { </a> 0
<a> ChannelHandlerContext ctx = this . ctx ; </a> 0
<a> if ( ctx == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> to a <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return ctx ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . get ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( ChannelHandlerContext ctx , </a> 0
<a> ByteBuf in , ByteBuf out ) throws Exception { </a> 0
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> synchronized ( z ) { </a> 0
<a> try { </a> 0
<a> int <RARE_TOKEN> = in . readableBytes ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = in . <RARE_TOKEN> ( ) ; </a> 0
<a> z . avail_in = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> z . next_in = in . array ( ) ; </a> 0
<a> z . next_in_index = in . <RARE_TOKEN> ( ) + in . readerIndex ( ) ; </a> 0
<a> } else { </a> 0
<a> byte [ ] array = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> in . readBytes ( array ) ; </a> 0
<a> z . next_in = array ; </a> 0
<a> z . next_in_index = 0 ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = z . next_in_index ; </a> 0
<a> int <RARE_TOKEN> = ( int ) Math . <RARE_TOKEN> ( <RARE_TOKEN> * <RARE_TOKEN> ) + 12 ; </a> 0
<a> boolean <RARE_TOKEN> = out . <RARE_TOKEN> ( ) ; </a> 0
<a> z . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> z . <RARE_TOKEN> = out . array ( ) ; </a> 0
<a> z . <RARE_TOKEN> = out . <RARE_TOKEN> ( ) + out . writerIndex ( ) ; </a> 0
<a> } else { </a> 0
<a> z . <RARE_TOKEN> = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> z . <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = z . <RARE_TOKEN> ; </a> 0
<a> int resultCode ; </a> 0
<a> try { </a> 0
<a> resultCode = z . <RARE_TOKEN> ( JZlib . <RARE_TOKEN> ) ; </a> 0
<a> } finally { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> in . skipBytes ( z . next_in_index - <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( resultCode != JZlib . Z_OK ) { </a> 0
<a> <RARE_TOKEN> . fail ( z , <RARE_TOKEN> <RARE_TOKEN> , resultCode ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = z . <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> out . writerIndex ( out . writerIndex ( ) + <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> out . writeBytes ( z . <RARE_TOKEN> , 0 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> z . next_in = null ; </a> 0
<a> z . <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( </a> 0
<a> final ChannelHandlerContext ctx , </a> 0
<a> final ChannelFuture future ) throws Exception { </a> 0
<a> ChannelFuture f = <RARE_TOKEN> ( ctx , ctx . <RARE_TOKEN> ( ) ) ; </a> 0
<a> f . addListener ( new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture f ) throws Exception { </a> 0
<a> ctx . close ( future ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( ! f . <RARE_TOKEN> ( ) ) { </a> 0
<a> ctx . executor ( ) . schedule ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> ctx . close ( future ) ; </a> 0
<a> } </a> 0
<a> } , 10 , TimeUnit . SECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private ChannelFuture <RARE_TOKEN> ( ChannelHandlerContext ctx , ChannelFuture future ) { </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( false , true ) ) { </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> ByteBuf <RARE_TOKEN> ; </a> 0
<a> synchronized ( z ) { </a> 0
<a> try { </a> 0
<a> z . next_in = <RARE_TOKEN> ; </a> 0
<a> z . next_in_index = 0 ; </a> 0
<a> z . avail_in = 0 ; </a> 0
<a> byte [ ] out = new byte [ 32 ] ; </a> 0
<a> z . <RARE_TOKEN> = out ; </a> 0
<a> z . <RARE_TOKEN> = 0 ; </a> 0
<a> z . <RARE_TOKEN> = out . length ; </a> 0
<a> int resultCode = z . <RARE_TOKEN> ( JZlib . <RARE_TOKEN> ) ; </a> 0
<a> if ( resultCode != JZlib . Z_OK && resultCode != JZlib . <RARE_TOKEN> ) { </a> 0
<a> future . setFailure ( <RARE_TOKEN> . exception ( z , <RARE_TOKEN> <RARE_TOKEN> , resultCode ) ) ; </a> 0
<a> return future ; </a> 0
<a> } else if ( z . <RARE_TOKEN> != 0 ) { </a> 0
<a> <RARE_TOKEN> = Unpooled . wrappedBuffer ( out , 0 , z . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = Unpooled . EMPTY_BUFFER ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> z . <RARE_TOKEN> ( ) ; </a> 0
<a> z . next_in = null ; </a> 0
<a> z . <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> ctx . write ( <RARE_TOKEN> , future ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> this . ctx = ctx ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final byte [ ] <RARE_TOKEN> = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( ) ; </a> 0
<a> private volatile ChannelHandlerContext ctx ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private static final byte [ ] <RARE_TOKEN> = { <RARE_TOKEN> , ( byte ) <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; </a> 0
<a> private boolean <RARE_TOKEN> = true ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( 6 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int compressionLevel ) { </a> 0
<a> this ( ZlibWrapper . <RARE_TOKEN> , compressionLevel ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ZlibWrapper wrapper ) { </a> 0
<a> this ( wrapper , 6 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ZlibWrapper wrapper , int compressionLevel ) { </a> 0
<a> if ( compressionLevel < 0 || compressionLevel > 9 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + compressionLevel + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( wrapper == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( wrapper == ZlibWrapper . <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + ZlibWrapper . <RARE_TOKEN> + <RARE_TOKEN> is not " + </a> 0
<a> <RARE_TOKEN> for <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = wrapper == ZlibWrapper . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( compressionLevel , wrapper != ZlibWrapper . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( byte [ ] dictionary ) { </a> 0
<a> this ( 6 , dictionary ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int compressionLevel , byte [ ] dictionary ) { </a> 0
<a> if ( compressionLevel < 0 || compressionLevel > 9 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + compressionLevel + " (expected: <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( dictionary == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( compressionLevel ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( dictionary ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture close ( ) { </a> 0
<a> return close ( ctx ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture close ( ChannelFuture future ) { </a> 0
<a> return <RARE_TOKEN> ( ctx ( ) , future ) ; </a> 0
<a> } </a> 0
<a> private ChannelHandlerContext ctx ( ) { </a> 0
<a> ChannelHandlerContext ctx = this . ctx ; </a> 0
<a> if ( ctx == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> to a <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return ctx ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . get ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( ChannelHandlerContext ctx , ByteBuf in , ByteBuf out ) throws Exception { </a> 0
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> out . writeBytes ( in ) ; </a> 0
<a> in . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> ByteBuf <RARE_TOKEN> = in ; </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ <RARE_TOKEN> . readableBytes ( ) ] ; </a> 0
<a> <RARE_TOKEN> . readBytes ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = ( int ) Math . <RARE_TOKEN> ( <RARE_TOKEN> . length * <RARE_TOKEN> ) + 12 ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> out . writeBytes ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> while ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , <RARE_TOKEN> . length , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> out . writeBytes ( <RARE_TOKEN> , 0 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( final ChannelHandlerContext ctx , final ChannelFuture future ) throws Exception { </a> 0
<a> ChannelFuture f = <RARE_TOKEN> ( ctx , ctx . <RARE_TOKEN> ( ) ) ; </a> 0
<a> f . addListener ( new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture f ) throws Exception { </a> 0
<a> ctx . close ( future ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( ! f . <RARE_TOKEN> ( ) ) { </a> 0
<a> ctx . executor ( ) . schedule ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> ctx . close ( future ) ; </a> 0
<a> } </a> 0
<a> } , 10 , TimeUnit . SECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private ChannelFuture <RARE_TOKEN> ( final ChannelHandlerContext ctx , ChannelFuture future ) { </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( false , true ) ) { </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> ByteBuf <RARE_TOKEN> = Unpooled . buffer ( ) ; </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> while ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , 0 , <RARE_TOKEN> . length ) ; </a> 1
<a> <RARE_TOKEN> . writeBytes ( <RARE_TOKEN> , 0 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = ( int ) <RARE_TOKEN> . getValue ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . writeByte ( <RARE_TOKEN> > > > 8 ) ; </a> 0
<a> <RARE_TOKEN> . writeByte ( <RARE_TOKEN> > > > 16 ) ; </a> 0
<a> <RARE_TOKEN> . writeByte ( <RARE_TOKEN> > > > 24 ) ; </a> 0
<a> <RARE_TOKEN> . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . writeByte ( <RARE_TOKEN> > > > 8 ) ; </a> 0
<a> <RARE_TOKEN> . writeByte ( <RARE_TOKEN> > > > 16 ) ; </a> 0
<a> <RARE_TOKEN> . writeByte ( <RARE_TOKEN> > > > 24 ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . end ( ) ; </a> 0
<a> } </a> 0
<a> ctx . <RARE_TOKEN> ( ) . writeBytes ( <RARE_TOKEN> ) ; </a> 0
<a> ctx . flush ( future ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> this . ctx = ctx ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( int compressionLevel ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 0
<a> return new <RARE_TOKEN> ( compressionLevel ) ; </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( compressionLevel ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ZlibWrapper wrapper ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 0
<a> return new <RARE_TOKEN> ( wrapper ) ; </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( wrapper ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ZlibWrapper wrapper , int compressionLevel ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 0
<a> return new <RARE_TOKEN> ( wrapper , compressionLevel ) ; </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( wrapper , compressionLevel ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ZlibWrapper wrapper , int compressionLevel , int windowBits , int memLevel ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 0
<a> return new <RARE_TOKEN> ( wrapper , compressionLevel , windowBits , memLevel ) ; </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( wrapper , compressionLevel ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( byte [ ] dictionary ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 0
<a> return new <RARE_TOKEN> ( dictionary ) ; </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( dictionary ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( int compressionLevel , byte [ ] dictionary ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 0
<a> return new <RARE_TOKEN> ( compressionLevel , dictionary ) ; </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( compressionLevel , dictionary ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( int compressionLevel , int windowBits , int memLevel , byte [ ] dictionary ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 0
<a> return new <RARE_TOKEN> ( compressionLevel , windowBits , memLevel , dictionary ) ; </a> 0
<a> } else { </a> 0
<a> return new <RARE_TOKEN> ( compressionLevel , dictionary ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ZlibWrapper wrapper ) { </a> 0
<a> return new <RARE_TOKEN> ( wrapper ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( byte [ ] dictionary ) { </a> 0
<a> return new <RARE_TOKEN> ( dictionary ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 1
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public abstract boolean <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> . JZlib ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> . ZStream ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> static void fail ( ZStream z , String message , int resultCode ) { </a> 1
<a> throw exception ( z , message , resultCode ) ; </a> 1
<a> } </a> 0
<a> static <RARE_TOKEN> exception ( ZStream z , String message , int resultCode ) { </a> 1
<a> return new <RARE_TOKEN> ( message + " <RARE_TOKEN> + resultCode + <RARE_TOKEN> + </a> 0
<a> ( z . msg != null ? <RARE_TOKEN> " + z . msg : "" ) ) ; </a> 1
<a> } </a> 0
<a> static <RARE_TOKEN> < ? > <RARE_TOKEN> ( ZlibWrapper wrapper ) { </a> 0
<a> <RARE_TOKEN> < ? > <RARE_TOKEN> ; </a> 0
<a> switch ( wrapper ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = JZlib . <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = JZlib . <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = JZlib . <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = JZlib . <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> public enum ZlibWrapper { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final ByteBuf buffer ; </a> 0
<a> public <RARE_TOKEN> ( ByteBuf buffer ) { </a> 1
<a> this . buffer = buffer ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return buffer . readableBytes ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( ) throws IOException { </a> 0
<a> if ( buffer . readable ( ) ) { </a> 0
<a> return buffer . <RARE_TOKEN> ( ) & 0xff ; </a> 0
<a> } </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( byte [ ] array ) throws IOException { </a> 0
<a> return read ( array , 0 , array . length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( byte [ ] dst , int dstIndex , int length ) throws IOException { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> length = Math . min ( <RARE_TOKEN> , length ) ; </a> 0
<a> buffer . readBytes ( dst , dstIndex , length ) ; </a> 0
<a> return length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( long bytes ) throws IOException { </a> 0
<a> int readable = buffer . readableBytes ( ) ; </a> 0
<a> if ( readable < bytes ) { </a> 0
<a> bytes = readable ; </a> 0
<a> } </a> 0
<a> buffer . readerIndex ( ( int ) ( buffer . readerIndex ( ) + bytes ) ) ; </a> 0
<a> return bytes ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 1
<a> class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final ByteBuf buffer ; </a> 0
<a> public <RARE_TOKEN> ( ByteBuf buffer ) { </a> 1
<a> this . buffer = buffer ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ) throws IOException { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( int b ) throws IOException { </a> 0
<a> buffer . writeByte ( b ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] bytes ) throws IOException { </a> 0
<a> buffer . writeBytes ( bytes ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] bytes , int srcIndex , int length ) throws IOException { </a> 0
<a> buffer . writeBytes ( bytes , srcIndex , length ) ; </a> 0
<a> } </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 0
<a> return buffer ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object , Void > { </a> 0
<a> protected final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> protected final int <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object decode ( ChannelHandlerContext ctx , ByteBuf buffer ) throws Exception { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> <RARE_TOKEN> input = new <RARE_TOKEN> ( buffer ) ; </a> 0
<a> if ( <RARE_TOKEN> != Integer . MAX_VALUE ) { </a> 0
<a> input = new <RARE_TOKEN> ( input , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> . start ( input ) ; </a> 0
<a> Object obj = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> return obj ; </a> 1
<a> } catch ( <RARE_TOKEN> . <RARE_TOKEN> e ) { </a> 1
<a> throw new TooLongFrameException ( <RARE_TOKEN> to <RARE_TOKEN> to <RARE_TOKEN> ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( ChannelHandlerContext ctx , ByteBuf buffer ) throws Exception { </a> 0
<a> switch ( buffer . readableBytes ( ) ) { </a> 0
<a> case 0 : </a> 0
<a> return null ; </a> 1
<a> case 1 : </a> 0
<a> if ( buffer . getByte ( buffer . readerIndex ( ) ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> buffer . skipBytes ( 1 ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> return decode ( ctx , buffer ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 0
<a> if ( cause instanceof TooLongFrameException ) { </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } else { </a> 0
<a> super . exceptionCaught ( ctx , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object > { </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( ChannelHandlerContext ctx , Object msg , ByteBuf out ) throws Exception { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> <RARE_TOKEN> . start ( new <RARE_TOKEN> ( out ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( msg ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < <RARE_TOKEN> > ( </a> 1
<a> <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ) ; </a> 0
<a> public <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> super ( factory , config ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = ctx . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final MarshallerFactory factory ; </a> 0
<a> private final MarshallingConfiguration config ; </a> 0
<a> public <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> this . factory = factory ; </a> 0
<a> this . config = config ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> return factory . <RARE_TOKEN> ( config ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 1
<a> class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private final <RARE_TOKEN> input ; </a> 0
<a> private final long limit ; </a> 0
<a> private long read ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> input , long limit ) { </a> 1
<a> if ( limit <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> limit <RARE_TOKEN> be > <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . input = input ; </a> 0
<a> this . limit = limit ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return readable ( input . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( ) throws IOException { </a> 0
<a> int readable = readable ( 1 ) ; </a> 0
<a> if ( readable > 0 ) { </a> 0
<a> int b = input . read ( ) ; </a> 0
<a> read ++ ; </a> 0
<a> return b ; </a> 0
<a> } else { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( byte [ ] array ) throws IOException { </a> 0
<a> return read ( array , 0 , array . length ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( byte [ ] array , int offset , int length ) throws IOException { </a> 0
<a> int readable = readable ( length ) ; </a> 0
<a> if ( readable > 0 ) { </a> 0
<a> int i = input . read ( array , offset , readable ) ; </a> 0
<a> read += i ; </a> 0
<a> return i ; </a> 0
<a> } else { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( long bytes ) throws IOException { </a> 0
<a> int readable = readable ( ( int ) bytes ) ; </a> 0
<a> if ( readable > 0 ) { </a> 0
<a> long i = input . <RARE_TOKEN> ( readable ) ; </a> 0
<a> read += i ; </a> 0
<a> return i ; </a> 0
<a> } else { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private int readable ( int length ) { </a> 0
<a> return ( int ) Math . min ( length , limit - read ) ; </a> 0
<a> } </a> 0
<a> static final class <RARE_TOKEN> extends IOException { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object > { </a> 0
<a> private static final byte [ ] <RARE_TOKEN> = new byte [ 4 ] ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( ChannelHandlerContext ctx , Object msg , ByteBuf out ) throws Exception { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> int <RARE_TOKEN> = out . writerIndex ( ) ; </a> 0
<a> out . writeBytes ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> output = new <RARE_TOKEN> ( out ) ; </a> 0
<a> <RARE_TOKEN> . start ( output ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( msg ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> , out . writerIndex ( ) - <RARE_TOKEN> - 4 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 1
<a> private final MarshallerFactory factory ; </a> 0
<a> private final MarshallingConfiguration config ; </a> 0
<a> public <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> this . factory = factory ; </a> 0
<a> this . config = config ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = factory . <RARE_TOKEN> ( config ) ; </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . protobuf ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import com . google . protobuf . <RARE_TOKEN> ; </a> 0
<a> import com . google . protobuf . <RARE_TOKEN> ; </a> 0
<a> import com . google . protobuf . <RARE_TOKEN> ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < ByteBuf , <RARE_TOKEN> > { </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> extensionRegistry ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> extensionRegistry ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> this . extensionRegistry = extensionRegistry ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof ByteBuf ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> decode ( ChannelHandlerContext ctx , ByteBuf msg ) throws Exception { </a> 0
<a> if ( msg . <RARE_TOKEN> ( ) ) { </a> 0
<a> final int offset = msg . readerIndex ( ) ; </a> 0
<a> if ( extensionRegistry == null ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . mergeFrom ( </a> 0
<a> msg . array ( ) , msg . <RARE_TOKEN> ( ) + offset , msg . readableBytes ( ) ) . build ( ) ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . mergeFrom ( </a> 0
<a> msg . array ( ) , msg . <RARE_TOKEN> ( ) + offset , msg . readableBytes ( ) , extensionRegistry ) . build ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( extensionRegistry == null ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . mergeFrom ( </a> 0
<a> new <RARE_TOKEN> ( msg ) ) . build ( ) ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) . mergeFrom ( </a> 0
<a> new <RARE_TOKEN> ( msg ) , extensionRegistry ) . build ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . protobuf ; </a> 0
<a> import static io . netty . buffer . Unpooled . * ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import com . google . protobuf . <RARE_TOKEN> ; </a> 0
<a> import com . google . protobuf . <RARE_TOKEN> ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object , ByteBuf > { </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof <RARE_TOKEN> || msg instanceof <RARE_TOKEN> . Builder ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf encode ( ChannelHandlerContext ctx , Object msg ) throws Exception { </a> 0
<a> if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> return wrappedBuffer ( ( ( <RARE_TOKEN> ) msg ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( msg instanceof <RARE_TOKEN> . Builder ) { </a> 0
<a> return wrappedBuffer ( ( ( <RARE_TOKEN> . Builder ) msg ) . build ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . protobuf ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import com . google . protobuf . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object > { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object decode ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception { </a> 0
<a> in . <RARE_TOKEN> ( ) ; </a> 0
<a> final byte [ ] buf = new byte [ 5 ] ; </a> 0
<a> for ( int i = 0 ; i < buf . length ; i ++ ) { </a> 0
<a> if ( ! in . readable ( ) ) { </a> 0
<a> in . <RARE_TOKEN> ( ) ; </a> 0
<a> return null ; </a> 1
<a> } </a> 0
<a> buf [ i ] = in . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( buf [ i ] >= 0 ) { </a> 0
<a> int length = <RARE_TOKEN> . newInstance ( buf , 0 , i + 1 ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( length < 0 ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> " + length ) ; </a> 0
<a> } </a> 0
<a> if ( in . readableBytes ( ) < length ) { </a> 0
<a> in . <RARE_TOKEN> ( ) ; </a> 0
<a> return null ; </a> 1
<a> } else { </a> 0
<a> return in . readBytes ( length ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . protobuf ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import com . google . protobuf . <RARE_TOKEN> ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < ByteBuf > { </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof ByteBuf ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( </a> 0
<a> ChannelHandlerContext ctx , ByteBuf msg , ByteBuf out ) throws Exception { </a> 0
<a> int <RARE_TOKEN> = msg . readableBytes ( ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . newInstance ( new <RARE_TOKEN> ( out ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . flush ( ) ; </a> 0
<a> out . writeBytes ( msg , msg . readerIndex ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . protobuf ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final Map < String , Class < ? > > <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , Map < String , Class < ? > > <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Class < ? > <RARE_TOKEN> ( String <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> Class < ? > clazz ; </a> 0
<a> clazz = <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 0
<a> if ( clazz != null ) { </a> 0
<a> return clazz ; </a> 0
<a> } </a> 0
<a> clazz = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , clazz ) ; </a> 0
<a> return clazz ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Class < ? > <RARE_TOKEN> ( String <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> return Class . <RARE_TOKEN> ( <RARE_TOKEN> , false , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> Class < ? > <RARE_TOKEN> ( String <RARE_TOKEN> ) throws <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 1
<a> public final class <RARE_TOKEN> { </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) , </a> 0
<a> new <RARE_TOKEN> < String , Class < ? > > ( new HashMap < String , <RARE_TOKEN> < Class < ? > > > ( ) ) ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) , </a> 0
<a> new <RARE_TOKEN> < String , Class < ? > > ( new HashMap < String , <RARE_TOKEN> < Class < ? > > > ( ) ) ) ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) , </a> 0
<a> new <RARE_TOKEN> < String , Class < ? > > ( new ConcurrentHashMap < String , <RARE_TOKEN> < Class < ? > > > ( ) ) ) ; </a> 1
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) , </a> 0
<a> new <RARE_TOKEN> < String , Class < ? > > ( new ConcurrentHashMap < String , <RARE_TOKEN> < Class < ? > > > ( ) ) ) ; </a> 1
<a> } </a> 0
<a> static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . class . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> static final int <RARE_TOKEN> = 0 ; </a> 0
<a> static final int <RARE_TOKEN> = 1 ; </a> 0
<a> <RARE_TOKEN> ( OutputStream out ) throws IOException { </a> 0
<a> super ( out ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 0
<a> Class < ? > clazz = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( clazz . <RARE_TOKEN> ( ) || clazz . <RARE_TOKEN> ( ) || clazz . <RARE_TOKEN> ( ) || </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) == 0 ) { </a> 0
<a> write ( <RARE_TOKEN> ) ; </a> 0
<a> super . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> write ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object > { </a> 0
<a> private static final <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> < <RARE_TOKEN> > ( <RARE_TOKEN> . class . getName ( ) + <RARE_TOKEN> ) ; </a> 1
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( 16 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( OutputStream out ) throws Exception { </a> 0
<a> return new <RARE_TOKEN> ( out ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof Serializable ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( ChannelHandlerContext ctx , Object msg , ByteBuf out ) throws Exception { </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = ctx . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( new <RARE_TOKEN> ( out ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != 0 ) { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> if ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> out . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( msg ) ; </a> 0
<a> <RARE_TOKEN> . flush ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends InputStream implements </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> in ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( InputStream in ) { </a> 0
<a> this ( in , null ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( InputStream in , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this ( in , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( InputStream in , int <RARE_TOKEN> ) { </a> 0
<a> this ( in , null , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( InputStream in , <RARE_TOKEN> <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> if ( in == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( in instanceof <RARE_TOKEN> ) { </a> 0
<a> this . in = ( <RARE_TOKEN> ) in ; </a> 0
<a> } else { </a> 0
<a> this . in = new <RARE_TOKEN> ( in ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( ) throws <RARE_TOKEN> , IOException { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> data <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> throw new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> length <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> + " <RARE_TOKEN> " + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return new <RARE_TOKEN> ( in , <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> in . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> in . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( ) throws IOException { </a> 0
<a> return in . read ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final int read ( byte [ ] b , int off , int len ) throws IOException { </a> 0
<a> return in . read ( b , off , len ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final int read ( byte [ ] b ) throws IOException { </a> 0
<a> return in . read ( b ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final boolean <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final byte <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final char <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final double <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final float <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( byte [ ] b , int off , int len ) throws IOException { </a> 0
<a> in . <RARE_TOKEN> ( b , off , len ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( byte [ ] b ) throws IOException { </a> 0
<a> in . <RARE_TOKEN> ( b ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> @ Deprecated </a> 0
<a> public final String <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final long <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final short <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final int <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final String <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> in . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( long n ) throws IOException { </a> 0
<a> return in . <RARE_TOKEN> ( n ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final int skipBytes ( int n ) throws IOException { </a> 0
<a> return in . skipBytes ( n ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Object > { </a> 0
<a> private static final byte [ ] <RARE_TOKEN> = new byte [ 4 ] ; </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof Serializable ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void encode ( ChannelHandlerContext ctx , Object msg , ByteBuf out ) throws Exception { </a> 0
<a> int <RARE_TOKEN> = out . writerIndex ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( out ) ; </a> 0
<a> <RARE_TOKEN> . write ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( msg ) ; </a> 0
<a> <RARE_TOKEN> . flush ( ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> int <RARE_TOKEN> = out . writerIndex ( ) ; </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> - <RARE_TOKEN> - 4 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> public class <RARE_TOKEN> extends OutputStream implements </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> out ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( OutputStream out ) { </a> 0
<a> this ( out , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( OutputStream out , int <RARE_TOKEN> ) { </a> 0
<a> if ( out == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( out instanceof <RARE_TOKEN> ) { </a> 0
<a> this . out = ( <RARE_TOKEN> ) out ; </a> 0
<a> } else { </a> 0
<a> this . out = new <RARE_TOKEN> ( out ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Object obj ) throws IOException { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( Unpooled . buffer ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( obj ) ; </a> 0
<a> <RARE_TOKEN> . flush ( ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> ByteBuf buffer = <RARE_TOKEN> . buffer ( ) ; </a> 0
<a> int <RARE_TOKEN> = buffer . readableBytes ( ) ; </a> 0
<a> writeInt ( <RARE_TOKEN> ) ; </a> 0
<a> buffer . getBytes ( 0 , this , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( int b ) throws IOException { </a> 0
<a> out . write ( b ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> out . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ) throws IOException { </a> 0
<a> out . flush ( ) ; </a> 0
<a> } </a> 0
<a> public final int size ( ) { </a> 0
<a> return out . size ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] b , int off , int len ) throws IOException { </a> 0
<a> out . write ( b , off , len ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] b ) throws IOException { </a> 0
<a> out . write ( b ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( boolean v ) throws IOException { </a> 0
<a> out . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void writeByte ( int v ) throws IOException { </a> 0
<a> out . writeByte ( v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void writeBytes ( String s ) throws IOException { </a> 0
<a> out . writeBytes ( s ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( int v ) throws IOException { </a> 0
<a> out . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( String s ) throws IOException { </a> 0
<a> out . <RARE_TOKEN> ( s ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( double v ) throws IOException { </a> 0
<a> out . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( float v ) throws IOException { </a> 0
<a> out . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void writeInt ( int v ) throws IOException { </a> 0
<a> out . writeInt ( v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( long v ) throws IOException { </a> 0
<a> out . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( int v ) throws IOException { </a> 0
<a> out . <RARE_TOKEN> ( v ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( String <RARE_TOKEN> ) throws IOException { </a> 0
<a> out . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . Set ; </a> 0
<a> abstract class <RARE_TOKEN> < <RARE_TOKEN> , V > implements Map < <RARE_TOKEN> , V > { </a> 0
<a> private final Map < <RARE_TOKEN> , <RARE_TOKEN> < V > > <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> ( Map < <RARE_TOKEN> , <RARE_TOKEN> < V > > <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> abstract <RARE_TOKEN> < V > <RARE_TOKEN> ( V value ) ; </a> 0
<a> private V <RARE_TOKEN> ( <RARE_TOKEN> < V > <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . get ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int size ( ) { </a> 0
<a> return <RARE_TOKEN> . size ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isEmpty ( ) { </a> 0
<a> return <RARE_TOKEN> . isEmpty ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean containsKey ( Object key ) { </a> 0
<a> return <RARE_TOKEN> . containsKey ( key ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object value ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public V get ( Object key ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> . get ( key ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public V put ( <RARE_TOKEN> key , V value ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> . put ( key , <RARE_TOKEN> ( value ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public V remove ( Object key ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> . remove ( key ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( Map < ? extends <RARE_TOKEN> , ? extends V > m ) { </a> 0
<a> for ( Entry < ? extends <RARE_TOKEN> , ? extends V > entry : m . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . put ( entry . <RARE_TOKEN> ( ) , <RARE_TOKEN> ( entry . getValue ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Set < <RARE_TOKEN> > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Collection < V > values ( ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Set < Entry < <RARE_TOKEN> , V > > <RARE_TOKEN> ( ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> super ( null ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( InputStream in ) { </a> 0
<a> this . in = in ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> < <RARE_TOKEN> , V > extends <RARE_TOKEN> < <RARE_TOKEN> , V > { </a> 0
<a> public <RARE_TOKEN> ( Map < <RARE_TOKEN> , <RARE_TOKEN> < V > > <RARE_TOKEN> ) { </a> 1
<a> super ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> <RARE_TOKEN> < V > <RARE_TOKEN> ( V value ) { </a> 0
<a> return new <RARE_TOKEN> < V > ( value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . string ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . Charset ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < ByteBuf , String > { </a> 0
<a> private final Charset charset ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( Charset . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Charset charset ) { </a> 0
<a> if ( charset == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . charset = charset ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof ByteBuf ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String decode ( ChannelHandlerContext ctx , ByteBuf msg ) throws Exception { </a> 0
<a> return msg . toString ( charset ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . string ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . Charset ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < String , ByteBuf > { </a> 0
<a> private final Charset charset ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( Charset . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Charset charset ) { </a> 0
<a> if ( charset == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . charset = charset ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Object msg ) throws Exception { </a> 0
<a> return msg instanceof String ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf encode ( ChannelHandlerContext ctx , String msg ) throws Exception { </a> 0
<a> return Unpooled . copiedBuffer ( msg , charset ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . ByteBufIndexFinder ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 1
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { <RARE_TOKEN> } ) ) ; </a> 0
<a> assertNull ( ch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { <RARE_TOKEN> } ) ) ; </a> 0
<a> assertNull ( ch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { <RARE_TOKEN> } ) ) ; </a> 0
<a> assertNull ( ch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { <RARE_TOKEN> } ) ) ; </a> 0
<a> assertEquals ( Unpooled . wrappedBuffer ( new byte [ ] { <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> } ) , ch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { <RARE_TOKEN> } ) ) ; </a> 0
<a> assertNull ( ch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> ch . close ( ) ; </a> 1
<a> assertNull ( ch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> private static final class <RARE_TOKEN> extends <RARE_TOKEN> < ByteBuf , Void > { </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf decode ( ChannelHandlerContext ctx , ByteBuf in ) { </a> 0
<a> ByteBuf msg = in . readBytes ( in . bytesBefore ( ByteBufIndexFinder . <RARE_TOKEN> ) ) ; </a> 0
<a> in . skipBytes ( 1 ) ; </a> 0
<a> return msg ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . bytes ; </a> 0
<a> import static io . netty . buffer . Unpooled . * ; </a> 0
<a> import static org . <RARE_TOKEN> . core . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import io . netty . channel . embedded . <RARE_TOKEN> ; </a> 1
<a> import java . util . Random ; </a> 0
<a> import org . junit . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> ch ; </a> 1
<a> @ <RARE_TOKEN> </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ch = new <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> byte [ ] b = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> new Random ( ) . <RARE_TOKEN> ( b ) ; </a> 0
<a> ch . writeInbound ( wrappedBuffer ( b ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte [ ] ) ch . <RARE_TOKEN> ( ) , is ( b ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> byte [ ] b = new byte [ 0 ] ; </a> 0
<a> ch . writeInbound ( wrappedBuffer ( b ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte [ ] ) ch . <RARE_TOKEN> ( ) , is ( b ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> ch . writeInbound ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ch . <RARE_TOKEN> ( ) , is ( ( Object ) <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . bytes ; </a> 0
<a> import static io . netty . buffer . Unpooled . * ; </a> 0
<a> import static org . <RARE_TOKEN> . core . <RARE_TOKEN> . * ; </a> 0
<a> import static org . <RARE_TOKEN> . core . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . embedded . <RARE_TOKEN> ; </a> 1
<a> import java . util . Random ; </a> 0
<a> import org . junit . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> ch ; </a> 1
<a> @ <RARE_TOKEN> </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ch = new <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> byte [ ] b = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> new Random ( ) . <RARE_TOKEN> ( b ) ; </a> 0
<a> ch . <RARE_TOKEN> ( b ) ; </a> 0
<a> <RARE_TOKEN> ( ( ByteBuf ) ch . readOutbound ( ) , is ( wrappedBuffer ( b ) ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> byte [ ] b = new byte [ 0 ] ; </a> 0
<a> ch . <RARE_TOKEN> ( b ) ; </a> 0
<a> <RARE_TOKEN> ( ch . readOutbound ( ) , <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> ch . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ch . readOutbound ( ) , is ( ( Object ) <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . frame ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import org . junit . Assert ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( </a> 1
<a> new <RARE_TOKEN> ( 1 , true , false , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> for ( int i = 0 ; i < 2 ; i ++ ) { </a> 0
<a> ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { 1 , 2 } ) ) ; </a> 0
<a> try { </a> 0
<a> assertTrue ( ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { 0 } ) ) ) ; </a> 0
<a> Assert . fail ( <RARE_TOKEN> . class . getSimpleName ( ) + " must be <RARE_TOKEN> ) ; </a> 0
<a> } catch ( TooLongFrameException e ) { </a> 0
<a> } </a> 0
<a> ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { <RARE_TOKEN> , 0 } ) ) ; </a> 0
<a> ByteBuf buf = ( ByteBuf ) ch . <RARE_TOKEN> ( ) ; </a> 1
<a> Assert . assertEquals ( <RARE_TOKEN> , buf . toString ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( </a> 1
<a> new <RARE_TOKEN> ( 1 , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> for ( int i = 0 ; i < 2 ; i ++ ) { </a> 0
<a> try { </a> 0
<a> assertTrue ( ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { 1 , 2 } ) ) ) ; </a> 0
<a> Assert . fail ( <RARE_TOKEN> . class . getSimpleName ( ) + " must be <RARE_TOKEN> ) ; </a> 0
<a> } catch ( TooLongFrameException e ) { </a> 0
<a> } </a> 0
<a> ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { 0 , <RARE_TOKEN> , 0 } ) ) ; </a> 0
<a> ByteBuf buf = ( ByteBuf ) ch . <RARE_TOKEN> ( ) ; </a> 1
<a> Assert . assertEquals ( <RARE_TOKEN> , buf . toString ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . frame ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import org . junit . Assert ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( </a> 1
<a> new <RARE_TOKEN> ( 5 , 0 , 4 , 0 , 4 , false ) ) ; </a> 0
<a> for ( int i = 0 ; i < 2 ; i ++ ) { </a> 0
<a> assertFalse ( ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { 0 , 0 , 0 , 2 } ) ) ) ; </a> 0
<a> try { </a> 0
<a> assertTrue ( ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { 0 , 0 } ) ) ) ; </a> 0
<a> Assert . fail ( <RARE_TOKEN> . class . getSimpleName ( ) + " must be <RARE_TOKEN> ) ; </a> 0
<a> } catch ( TooLongFrameException e ) { </a> 0
<a> } </a> 0
<a> ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { 0 , 0 , 0 , 1 , <RARE_TOKEN> } ) ) ; </a> 0
<a> ByteBuf buf = ( ByteBuf ) ch . <RARE_TOKEN> ( ) ; </a> 1
<a> Assert . assertEquals ( <RARE_TOKEN> , buf . toString ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( </a> 1
<a> new <RARE_TOKEN> ( 5 , 0 , 4 , 0 , 4 ) ) ; </a> 0
<a> for ( int i = 0 ; i < 2 ; i ++ ) { </a> 0
<a> try { </a> 0
<a> assertTrue ( ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { 0 , 0 , 0 , 2 } ) ) ) ; </a> 0
<a> Assert . fail ( <RARE_TOKEN> . class . getSimpleName ( ) + " must be <RARE_TOKEN> ) ; </a> 0
<a> } catch ( TooLongFrameException e ) { </a> 0
<a> } </a> 0
<a> ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { 0 , 0 , 0 , 0 , 0 , 1 , <RARE_TOKEN> } ) ) ; </a> 0
<a> ByteBuf buf = ( ByteBuf ) ch . <RARE_TOKEN> ( ) ; </a> 1
<a> Assert . assertEquals ( <RARE_TOKEN> , buf . toString ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 1
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import junit . <RARE_TOKEN> . Assert ; </a> 1
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public abstract class <RARE_TOKEN> { </a> 0
<a> private final String <RARE_TOKEN> = new String ( <RARE_TOKEN> ) ; </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> MarshallerFactory <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> MarshallingConfiguration <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( <RARE_TOKEN> ( Integer . MAX_VALUE ) ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . start ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> ch . writeInbound ( input ( <RARE_TOKEN> ) ) ; </a> 0
<a> assertTrue ( ch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> String <RARE_TOKEN> = ( String ) ch . <RARE_TOKEN> ( ) ; </a> 1
<a> Assert . assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> Assert . assertNull ( ch . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> protected ByteBuf input ( byte [ ] input ) { </a> 0
<a> return Unpooled . wrappedBuffer ( input ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> MarshallerFactory <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> MarshallingConfiguration <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( <RARE_TOKEN> ( Integer . MAX_VALUE ) ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . start ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> ByteBuf buffer = input ( <RARE_TOKEN> ) ; </a> 0
<a> ByteBuf slice = buffer . <RARE_TOKEN> ( 2 ) ; </a> 0
<a> ch . writeInbound ( slice ) ; </a> 1
<a> ch . writeInbound ( buffer ) ; </a> 0
<a> assertTrue ( ch . <RARE_TOKEN> ( ) ) ; </a> 0
<a> String <RARE_TOKEN> = ( String ) ch . <RARE_TOKEN> ( ) ; </a> 1
<a> Assert . assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> Assert . assertNull ( ch . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws IOException { </a> 0
<a> MarshallerFactory <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> MarshallingConfiguration <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> ChannelHandler <RARE_TOKEN> = <RARE_TOKEN> ( 4 ) ; </a> 0
<a> EmbeddedByteChannel ch = new EmbeddedByteChannel ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . start ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> byte [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 1
<a> ch . writeInbound ( input ( <RARE_TOKEN> ) ) ; </a> 1
<a> fail ( ) ; </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> assertEquals ( TooLongFrameException . class , e . getClass ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> protected ChannelHandler <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> ( ) ) , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> return new <RARE_TOKEN> ( factory , config ) ; </a> 0
<a> } </a> 0
<a> protected abstract MarshallerFactory <RARE_TOKEN> ( ) ; </a> 0
<a> protected abstract MarshallingConfiguration <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected MarshallerFactory <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected MarshallingConfiguration <RARE_TOKEN> ( ) { </a> 0
<a> final MarshallingConfiguration <RARE_TOKEN> = new MarshallingConfiguration ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 3 ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected MarshallerFactory <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected MarshallingConfiguration <RARE_TOKEN> ( ) { </a> 0
<a> final MarshallingConfiguration <RARE_TOKEN> = new MarshallingConfiguration ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 3 ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> return new <RARE_TOKEN> ( factory , config ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> return new <RARE_TOKEN> ( factory , config ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf input ( byte [ ] input ) { </a> 0
<a> ByteBuf length = Unpooled . buffer ( 4 ) ; </a> 0
<a> length . writeInt ( input . length ) ; </a> 0
<a> return Unpooled . wrappedBuffer ( length , Unpooled . wrappedBuffer ( input ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected ChannelHandler <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> ( ) ) , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf <RARE_TOKEN> ( ByteBuf buf ) { </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> return buf ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected ChannelHandler <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> return new <RARE_TOKEN> ( factory , config ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> return new <RARE_TOKEN> ( factory , config ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected MarshallerFactory <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected MarshallingConfiguration <RARE_TOKEN> ( ) { </a> 0
<a> final MarshallingConfiguration <RARE_TOKEN> = new MarshallingConfiguration ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 5 ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . <RARE_TOKEN> ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected MarshallerFactory <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected MarshallingConfiguration <RARE_TOKEN> ( ) { </a> 0
<a> final MarshallingConfiguration <RARE_TOKEN> = new MarshallingConfiguration ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 5 ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> return new <RARE_TOKEN> ( factory , config ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> return new <RARE_TOKEN> ( factory , config ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf input ( byte [ ] input ) { </a> 0
<a> ByteBuf length = Unpooled . buffer ( 4 ) ; </a> 0
<a> length . writeInt ( input . length ) ; </a> 0
<a> return Unpooled . wrappedBuffer ( length , Unpooled . wrappedBuffer ( input ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected ChannelHandler <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> ( ) ) , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected ByteBuf <RARE_TOKEN> ( ByteBuf buf ) { </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> return buf ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected ChannelHandler <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> return new <RARE_TOKEN> ( factory , config ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> import org . jboss . marshalling . MarshallerFactory ; </a> 0
<a> import org . jboss . marshalling . MarshallingConfiguration ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( MarshallerFactory factory , MarshallingConfiguration config ) { </a> 0
<a> return new <RARE_TOKEN> ( factory , config ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . marshalling ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> ( ) , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . protobuf ; </a> 0
<a> import static io . netty . buffer . Unpooled . * ; </a> 0
<a> import static org . <RARE_TOKEN> . core . <RARE_TOKEN> . * ; </a> 0
<a> import static org . <RARE_TOKEN> . core . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 1
<a> import org . junit . <RARE_TOKEN> ; </a> 1
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> { </a> 0
<a> private EmbeddedByteChannel ch ; </a> 1
<a> @ <RARE_TOKEN> </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ch = new EmbeddedByteChannel ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> byte [ ] b = { 4 , 1 , 1 , 1 , 1 } ; </a> 0
<a> ch . writeInbound ( wrappedBuffer ( b , 0 , 1 ) ) ; </a> 0
<a> <RARE_TOKEN> ( ch . <RARE_TOKEN> ( ) , is ( <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> ch . writeInbound ( wrappedBuffer ( b , 1 , 2 ) ) ; </a> 0
<a> <RARE_TOKEN> ( ch . <RARE_TOKEN> ( ) , is ( <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> ch . writeInbound ( wrappedBuffer ( b , 3 , b . length - 3 ) ) ; </a> 0
<a> <RARE_TOKEN> ( </a> 0
<a> ( ByteBuf ) ch . <RARE_TOKEN> ( ) , </a> 1
<a> is ( wrappedBuffer ( new byte [ ] { 1 , 1 , 1 , 1 } ) ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> byte [ ] b = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> for ( int i = 2 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> b [ i ] = 1 ; </a> 0
<a> } </a> 0
<a> b [ 0 ] = - 2 ; </a> 0
<a> b [ 1 ] = 15 ; </a> 0
<a> ch . writeInbound ( wrappedBuffer ( b , 0 , <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( ch . <RARE_TOKEN> ( ) , is ( <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> ch . writeInbound ( wrappedBuffer ( b , <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( ch . <RARE_TOKEN> ( ) , is ( <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> ch . writeInbound ( wrappedBuffer ( b , <RARE_TOKEN> , b . length - <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( ByteBuf ) ch . <RARE_TOKEN> ( ) , is ( wrappedBuffer ( b , 2 , b . length - 2 ) ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . protobuf ; </a> 0
<a> import static io . netty . buffer . Unpooled . * ; </a> 0
<a> import static org . <RARE_TOKEN> . core . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import io . netty . channel . embedded . EmbeddedByteChannel ; </a> 1
<a> import org . junit . <RARE_TOKEN> ; </a> 1
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> { </a> 0
<a> private EmbeddedByteChannel ch ; </a> 1
<a> @ <RARE_TOKEN> </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> ch = new EmbeddedByteChannel ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> byte [ ] b = { 4 , 1 , 1 , 1 , 1 } ; </a> 0
<a> ch . <RARE_TOKEN> ( wrappedBuffer ( b , 1 , b . length - 1 ) ) ; </a> 0
<a> <RARE_TOKEN> ( ch . readOutbound ( ) , is ( wrappedBuffer ( b ) ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> byte [ ] b = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> for ( int i = 2 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> b [ i ] = 1 ; </a> 0
<a> } </a> 0
<a> b [ 0 ] = - 2 ; </a> 0
<a> b [ 1 ] = 15 ; </a> 0
<a> ch . <RARE_TOKEN> ( wrappedBuffer ( b , 2 , b . length - 2 ) ) ; </a> 0
<a> <RARE_TOKEN> ( ch . readOutbound ( ) , is ( wrappedBuffer ( b ) ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . util . List ; </a> 0
<a> import org . junit . Assert ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> out = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> in = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( null ) ) ; </a> 0
<a> out . <RARE_TOKEN> ( List . class ) ; </a> 0
<a> Assert . assertSame ( List . class , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import static org . <RARE_TOKEN> . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> InputStream <RARE_TOKEN> = createStrictMock ( InputStream . class ) ; </a> 0
<a> InputStream <RARE_TOKEN> = createStrictMock ( InputStream . class ) ; </a> 0
<a> expect ( <RARE_TOKEN> . read ( ) ) . andReturn ( 1 ) ; </a> 0
<a> replay ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 1 , <RARE_TOKEN> . read ( ) ) ; </a> 0
<a> verify ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> expect ( <RARE_TOKEN> . read ( ) ) . andReturn ( 2 ) ; </a> 0
<a> replay ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( 2 , <RARE_TOKEN> . read ( ) ) ; </a> 0
<a> verify ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> public abstract class <RARE_TOKEN> implements InternalLogger { </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> level ) { </a> 0
<a> switch ( level ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return isDebugEnabled ( ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> default : </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void log ( <RARE_TOKEN> level , String msg , Throwable cause ) { </a> 0
<a> switch ( level ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> trace ( msg , cause ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> debug ( msg , cause ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> info ( msg , cause ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> warn ( msg , cause ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> error ( msg , cause ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void log ( <RARE_TOKEN> level , String msg ) { </a> 0
<a> switch ( level ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> trace ( msg ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> debug ( msg ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> info ( msg ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> warn ( msg ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> error ( msg ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import org . apache . commons . logging . Log ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final Log logger ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( Log logger , String <RARE_TOKEN> ) { </a> 0
<a> this . logger = logger ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg ) { </a> 0
<a> logger . trace ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg , Throwable cause ) { </a> 0
<a> logger . trace ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg ) { </a> 0
<a> logger . debug ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg , Throwable cause ) { </a> 0
<a> logger . debug ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg ) { </a> 0
<a> logger . error ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg , Throwable cause ) { </a> 0
<a> logger . error ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg ) { </a> 0
<a> logger . info ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg , Throwable cause ) { </a> 0
<a> logger . info ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isDebugEnabled ( ) { </a> 0
<a> return logger . isDebugEnabled ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg ) { </a> 0
<a> logger . warn ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg , Throwable cause ) { </a> 0
<a> logger . warn ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import org . apache . commons . logging . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends InternalLoggerFactory { </a> 0
<a> @ Override </a> 0
<a> public InternalLogger newInstance ( String name ) { </a> 0
<a> return new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( name ) , name ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> public interface InternalLogger { </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean isDebugEnabled ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( <RARE_TOKEN> level ) ; </a> 0
<a> void trace ( String msg ) ; </a> 0
<a> void trace ( String msg , Throwable cause ) ; </a> 0
<a> void debug ( String msg ) ; </a> 0
<a> void debug ( String msg , Throwable cause ) ; </a> 0
<a> void info ( String msg ) ; </a> 0
<a> void info ( String msg , Throwable cause ) ; </a> 0
<a> void warn ( String msg ) ; </a> 0
<a> void warn ( String msg , Throwable cause ) ; </a> 0
<a> void error ( String msg ) ; </a> 0
<a> void error ( String msg , Throwable cause ) ; </a> 0
<a> void log ( <RARE_TOKEN> level , String msg ) ; </a> 0
<a> void log ( <RARE_TOKEN> level , String msg , Throwable cause ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> public abstract class InternalLoggerFactory { </a> 0
<a> private static volatile InternalLoggerFactory <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> public static InternalLoggerFactory <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( InternalLoggerFactory <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> InternalLoggerFactory . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static InternalLogger getInstance ( Class < ? > clazz ) { </a> 0
<a> return getInstance ( clazz . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> public static InternalLogger getInstance ( String name ) { </a> 0
<a> final InternalLogger logger = <RARE_TOKEN> ( ) . newInstance ( name ) ; </a> 0
<a> return new InternalLogger ( ) { </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg ) { </a> 0
<a> logger . trace ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg , Throwable cause ) { </a> 0
<a> logger . trace ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg ) { </a> 0
<a> logger . debug ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg , Throwable cause ) { </a> 0
<a> logger . debug ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg ) { </a> 0
<a> logger . error ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg , Throwable cause ) { </a> 0
<a> logger . error ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg ) { </a> 0
<a> logger . info ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg , Throwable cause ) { </a> 0
<a> logger . info ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isDebugEnabled ( ) { </a> 0
<a> return logger . isDebugEnabled ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg ) { </a> 0
<a> logger . warn ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg , Throwable cause ) { </a> 0
<a> logger . warn ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( <RARE_TOKEN> level ) { </a> 0
<a> return logger . <RARE_TOKEN> ( level ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void log ( <RARE_TOKEN> level , String msg ) { </a> 0
<a> logger . log ( level , msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void log ( <RARE_TOKEN> level , String msg , Throwable cause ) { </a> 0
<a> logger . log ( level , msg , cause ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> public abstract InternalLogger newInstance ( String name ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import org . jboss . logging . Logger ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final Logger logger ; </a> 0
<a> <RARE_TOKEN> ( Logger logger ) { </a> 0
<a> this . logger = logger ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg ) { </a> 0
<a> logger . trace ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg , Throwable cause ) { </a> 0
<a> logger . trace ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg ) { </a> 0
<a> logger . debug ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg , Throwable cause ) { </a> 0
<a> logger . debug ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg ) { </a> 0
<a> logger . error ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg , Throwable cause ) { </a> 0
<a> logger . error ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg ) { </a> 0
<a> logger . info ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg , Throwable cause ) { </a> 0
<a> logger . info ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public boolean isDebugEnabled ( ) { </a> 0
<a> return logger . isDebugEnabled ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg ) { </a> 0
<a> logger . warn ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg , Throwable cause ) { </a> 0
<a> logger . warn ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return String . valueOf ( logger . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import java . util . logging . Level ; </a> 0
<a> import java . util . logging . Logger ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final Logger logger ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( Logger logger , String <RARE_TOKEN> ) { </a> 0
<a> this . logger = logger ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg ) { </a> 0
<a> logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> , <RARE_TOKEN> , null , msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg , Throwable cause ) { </a> 0
<a> logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> , <RARE_TOKEN> , null , msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg ) { </a> 0
<a> logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> , <RARE_TOKEN> , null , msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg , Throwable cause ) { </a> 0
<a> logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> , <RARE_TOKEN> , null , msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg ) { </a> 0
<a> logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> , <RARE_TOKEN> , null , msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg , Throwable cause ) { </a> 0
<a> logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> , <RARE_TOKEN> , null , msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg ) { </a> 0
<a> logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> , <RARE_TOKEN> , null , msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg , Throwable cause ) { </a> 0
<a> logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> , <RARE_TOKEN> , null , msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isDebugEnabled ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg ) { </a> 0
<a> logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> , <RARE_TOKEN> , null , msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg , Throwable cause ) { </a> 0
<a> logger . <RARE_TOKEN> ( Level . <RARE_TOKEN> , <RARE_TOKEN> , null , msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> public class <RARE_TOKEN> extends InternalLoggerFactory { </a> 0
<a> @ Override </a> 0
<a> public InternalLogger newInstance ( String name ) { </a> 0
<a> final java . util . logging . Logger logger = </a> 0
<a> java . util . logging . Logger . getLogger ( name ) ; </a> 0
<a> return new <RARE_TOKEN> ( logger , name ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import org . apache . <RARE_TOKEN> . Logger ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final Logger logger ; </a> 0
<a> <RARE_TOKEN> ( Logger logger ) { </a> 0
<a> this . logger = logger ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg ) { </a> 0
<a> logger . trace ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg , Throwable cause ) { </a> 0
<a> logger . trace ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg ) { </a> 0
<a> logger . debug ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg , Throwable cause ) { </a> 0
<a> logger . debug ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg ) { </a> 0
<a> logger . error ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg , Throwable cause ) { </a> 0
<a> logger . error ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg ) { </a> 0
<a> logger . info ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg , Throwable cause ) { </a> 0
<a> logger . info ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isDebugEnabled ( ) { </a> 0
<a> return logger . isDebugEnabled ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return logger . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg ) { </a> 0
<a> logger . warn ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg , Throwable cause ) { </a> 0
<a> logger . warn ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return String . valueOf ( logger . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> public class <RARE_TOKEN> extends InternalLoggerFactory { </a> 0
<a> @ Override </a> 0
<a> public InternalLogger newInstance ( String name ) { </a> 0
<a> final org . apache . <RARE_TOKEN> . Logger logger = </a> 0
<a> org . apache . <RARE_TOKEN> . Logger . getLogger ( name ) ; </a> 0
<a> return new <RARE_TOKEN> ( logger ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import org . <RARE_TOKEN> . service . log . <RARE_TOKEN> ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> parent ; </a> 0
<a> private final InternalLogger <RARE_TOKEN> ; </a> 0
<a> private final String name ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> parent , String name , InternalLogger <RARE_TOKEN> ) { </a> 0
<a> this . parent = parent ; </a> 0
<a> this . name = name ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + name + <RARE_TOKEN> " ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void trace ( String msg , Throwable cause ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = parent . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . log ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> + msg ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . debug ( msg ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void debug ( String msg , Throwable cause ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = parent . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . log ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> + msg , cause ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . debug ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = parent . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . log ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> + msg ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . error ( msg ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void error ( String msg , Throwable cause ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = parent . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . log ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> + msg , cause ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . error ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = parent . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . log ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> + msg ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . info ( msg ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void info ( String msg , Throwable cause ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = parent . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . log ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> + msg , cause ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . info ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isDebugEnabled ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = parent . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . log ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> + msg ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . warn ( msg ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void warn ( String msg , Throwable cause ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = parent . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . log ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> + msg , cause ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . warn ( msg , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return name ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . service . log . <RARE_TOKEN> ; </a> 0
<a> import org . <RARE_TOKEN> . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends InternalLoggerFactory { </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> private final InternalLoggerFactory <RARE_TOKEN> ; </a> 0
<a> volatile <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> ctx ) { </a> 0
<a> this ( ctx , null ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> ctx , InternalLoggerFactory <RARE_TOKEN> ) { </a> 0
<a> if ( ctx == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = InternalLoggerFactory . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( </a> 1
<a> ctx , <RARE_TOKEN> , null ) { </a> 0
<a> @ Override </a> 0
<a> public Object <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> service = ( <RARE_TOKEN> ) super . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> = service ; </a> 0
<a> return service ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , </a> 1
<a> Object service ) { </a> 1
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> <RARE_TOKEN> . open ( ) ; </a> 0
<a> } </a> 0
<a> public InternalLoggerFactory <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void destroy ( ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public InternalLogger newInstance ( String name ) { </a> 0
<a> return new <RARE_TOKEN> ( this , name , <RARE_TOKEN> . newInstance ( name ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<a> public interface <RARE_TOKEN> < T > { </a> 0
<a> T get ( ) ; </a> 0
<a> void set ( T value ) ; </a> 0
<a> T <RARE_TOKEN> ( T value ) ; </a> 0
<a> T <RARE_TOKEN> ( T value ) ; </a> 0
<a> boolean <RARE_TOKEN> ( T <RARE_TOKEN> , T <RARE_TOKEN> ) ; </a> 0
<a> void remove ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> public final class <RARE_TOKEN> < T > extends <RARE_TOKEN> { </a> 1
<a> private static final <RARE_TOKEN> < String , Boolean > names = new ConcurrentHashMap < String , Boolean > ( ) ; </a> 1
<a> public <RARE_TOKEN> ( String name ) { </a> 1
<a> super ( names , name ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> < T > <RARE_TOKEN> < T > <RARE_TOKEN> ( <RARE_TOKEN> < T > key ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<a> import java . nio . charset . Charset ; </a> 0
<a> import java . nio . charset . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . <RARE_TOKEN> ; </a> 0
<a> import java . nio . charset . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public final class CharsetUtil { </a> 0
<a> public static final Charset <RARE_TOKEN> = Charset . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> public static final Charset <RARE_TOKEN> = Charset . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> public static final Charset <RARE_TOKEN> = Charset . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> public static final Charset <RARE_TOKEN> = Charset . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> public static final Charset <RARE_TOKEN> = Charset . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> public static final Charset <RARE_TOKEN> = Charset . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> private static final <RARE_TOKEN> < Map < Charset , <RARE_TOKEN> > > <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> < Map < Charset , <RARE_TOKEN> > > ( ) { </a> 1
<a> @ Override </a> 0
<a> protected Map < Charset , <RARE_TOKEN> > <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> < Charset , <RARE_TOKEN> > ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private static final <RARE_TOKEN> < Map < Charset , <RARE_TOKEN> > > <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> < Map < Charset , <RARE_TOKEN> > > ( ) { </a> 1
<a> @ Override </a> 0
<a> protected Map < Charset , <RARE_TOKEN> > <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> < Charset , <RARE_TOKEN> > ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Charset charset ) { </a> 0
<a> if ( charset == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Map < Charset , <RARE_TOKEN> > map = <RARE_TOKEN> . get ( ) ; </a> 0
<a> <RARE_TOKEN> e = map . get ( charset ) ; </a> 0
<a> if ( e != null ) { </a> 0
<a> e . <RARE_TOKEN> ( ) ; </a> 0
<a> e . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> e . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> return e ; </a> 0
<a> } </a> 0
<a> e = charset . <RARE_TOKEN> ( ) ; </a> 0
<a> e . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> e . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> map . put ( charset , e ) ; </a> 0
<a> return e ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( Charset charset ) { </a> 0
<a> if ( charset == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> Map < Charset , <RARE_TOKEN> > map = <RARE_TOKEN> . get ( ) ; </a> 0
<a> <RARE_TOKEN> d = map . get ( charset ) ; </a> 0
<a> if ( d != null ) { </a> 0
<a> d . <RARE_TOKEN> ( ) ; </a> 0
<a> d . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> d . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> return d ; </a> 0
<a> } </a> 0
<a> d = charset . <RARE_TOKEN> ( ) ; </a> 0
<a> d . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> d . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> map . put ( charset , d ) ; </a> 0
<a> return d ; </a> 0
<a> } </a> 0
<a> private CharsetUtil ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private Map < <RARE_TOKEN> < ? > , <RARE_TOKEN> < ? > > map ; </a> 1
<a> @ Override </a> 0
<a> public synchronized < T > <RARE_TOKEN> < T > <RARE_TOKEN> ( <RARE_TOKEN> < T > key ) { </a> 1
<a> Map < <RARE_TOKEN> < ? > , <RARE_TOKEN> < ? > > map = this . map ; </a> 0
<a> if ( map == null ) { </a> 0
<a> map = this . map = new <RARE_TOKEN> < <RARE_TOKEN> < ? > , <RARE_TOKEN> < ? > > ( 2 ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> < T > <RARE_TOKEN> = ( <RARE_TOKEN> < T > ) map . get ( key ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> < T > ( ) ; </a> 1
<a> map . put ( key , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> < T > extends AtomicReference < T > implements <RARE_TOKEN> < T > { </a> 0
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public T <RARE_TOKEN> ( T value ) { </a> 0
<a> if ( <RARE_TOKEN> ( null , value ) ) { </a> 1
<a> return null ; </a> 0
<a> } else { </a> 1
<a> return get ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void remove ( ) { </a> 0
<a> set ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> ; </a> 1
<a> import io . netty . util . internal . <RARE_TOKEN> ; </a> 1
<a> import java . util . ArrayList ; </a> 1
<a> import java . util . Collections ; </a> 0
<a> import java . util . HashSet ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . List ; </a> 1
<a> import java . util . Set ; </a> 0
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> static final InternalLogger logger = </a> 0
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = </a> 1
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 1
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final Thread <RARE_TOKEN> ; </a> 1
<a> final AtomicBoolean shutdown = new AtomicBoolean ( ) ; </a> 0
<a> private final long <RARE_TOKEN> ; </a> 1
<a> final long <RARE_TOKEN> ; </a> 1
<a> final Set < <RARE_TOKEN> > [ ] <RARE_TOKEN> ; </a> 1
<a> final int <RARE_TOKEN> ; </a> 1
<a> final <RARE_TOKEN> lock = new <RARE_TOKEN> ( ) ; </a> 1
<a> volatile int <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( long <RARE_TOKEN> , TimeUnit unit ) { </a> 0
<a> this ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> , unit ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( long <RARE_TOKEN> , TimeUnit unit , int <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> , unit , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ThreadFactory threadFactory ) { </a> 0
<a> this ( threadFactory , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> ThreadFactory threadFactory , long <RARE_TOKEN> , TimeUnit unit ) { </a> 0
<a> this ( threadFactory , <RARE_TOKEN> , unit , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> ThreadFactory threadFactory , </a> 0
<a> long <RARE_TOKEN> , TimeUnit unit , int <RARE_TOKEN> ) { </a> 0
<a> if ( threadFactory == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( unit == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 1
<a> <RARE_TOKEN> must be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 1
<a> <RARE_TOKEN> must be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . length - 1 ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> = unit . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == Long . MAX_VALUE || </a> 1
<a> <RARE_TOKEN> >= Long . MAX_VALUE / <RARE_TOKEN> . length ) { </a> 1
<a> throw new IllegalArgumentException ( </a> 1
<a> <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> " + </a> 1
<a> <RARE_TOKEN> + ' ' + unit ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> * <RARE_TOKEN> . length ; </a> 1
<a> <RARE_TOKEN> = threadFactory . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 1
<a> private static Set < <RARE_TOKEN> > [ ] <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> not be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Set < <RARE_TOKEN> > [ ] <RARE_TOKEN> = new Set [ <RARE_TOKEN> ] ; </a> 1
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> <RARE_TOKEN> [ i ] = Collections . <RARE_TOKEN> ( </a> 1
<a> new ConcurrentHashMap < <RARE_TOKEN> , Boolean > ( 16 , <RARE_TOKEN> , 4 ) ) ; </a> 1
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = 1 ; </a> 0
<a> while ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> 1 ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public synchronized void start ( ) { </a> 0
<a> if ( shutdown . get ( ) ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . start ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized Set < <RARE_TOKEN> > <RARE_TOKEN> ( ) { </a> 0
<a> if ( Thread . currentThread ( ) == <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalStateException ( </a> 0
<a> <RARE_TOKEN> . class . getSimpleName ( ) + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> from " + </a> 0
<a> <RARE_TOKEN> . class . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( ! shutdown . <RARE_TOKEN> ( false , true ) ) { </a> 0
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> while ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> Set < <RARE_TOKEN> > <RARE_TOKEN> = new HashSet < <RARE_TOKEN> > ( ) ; </a> 1
<a> for ( Set < <RARE_TOKEN> > <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . clear ( ) ; </a> 1
<a> } </a> 1
<a> return Collections . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> task , long delay , TimeUnit unit ) { </a> 0
<a> final long currentTime = System . currentTimeMillis ( ) ; </a> 1
<a> if ( task == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( unit == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> start ( ) ; </a> 1
<a> } </a> 0
<a> delay = unit . <RARE_TOKEN> ( delay ) ; </a> 1
<a> <RARE_TOKEN> timeout = new <RARE_TOKEN> ( task , currentTime + delay ) ; </a> 1
<a> <RARE_TOKEN> ( timeout , delay ) ; </a> 1
<a> return timeout ; </a> 1
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> timeout , long delay ) { </a> 1
<a> if ( delay < <RARE_TOKEN> ) { </a> 1
<a> delay = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> final long <RARE_TOKEN> = delay <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> final long <RARE_TOKEN> = delay <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> final long <RARE_TOKEN> = </a> 1
<a> <RARE_TOKEN> / <RARE_TOKEN> + ( <RARE_TOKEN> != 0 ? 1 : 0 ) ; </a> 1
<a> final long <RARE_TOKEN> = </a> 1
<a> delay / <RARE_TOKEN> - ( delay <RARE_TOKEN> <RARE_TOKEN> == 0 ? 1 : 0 ) ; </a> 1
<a> lock . <RARE_TOKEN> ( ) . lock ( ) ; </a> 1
<a> try { </a> 1
<a> int <RARE_TOKEN> = ( int ) ( <RARE_TOKEN> + <RARE_TOKEN> & <RARE_TOKEN> ) ; </a> 1
<a> timeout . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> timeout . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] . add ( timeout ) ; </a> 1
<a> } finally { </a> 0
<a> lock . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> implements Runnable { </a> 0
<a> private long <RARE_TOKEN> ; </a> 1
<a> private long <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> List < <RARE_TOKEN> > <RARE_TOKEN> = </a> 1
<a> new ArrayList < <RARE_TOKEN> > ( ) ; </a> 1
<a> <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 1
<a> <RARE_TOKEN> = 1 ; </a> 1
<a> while ( ! shutdown . get ( ) ) { </a> 0
<a> final long <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( </a> 1
<a> List < <RARE_TOKEN> > <RARE_TOKEN> , long <RARE_TOKEN> ) { </a> 1
<a> lock . <RARE_TOKEN> ( ) . lock ( ) ; </a> 1
<a> try { </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> = <RARE_TOKEN> + 1 & <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> [ <RARE_TOKEN> ] . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 0
<a> } finally { </a> 1
<a> lock . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> private void <RARE_TOKEN> ( </a> 1
<a> List < <RARE_TOKEN> > <RARE_TOKEN> , </a> 1
<a> Iterator < <RARE_TOKEN> > i , long <RARE_TOKEN> ) { </a> 0
<a> List < <RARE_TOKEN> > <RARE_TOKEN> = null ; </a> 1
<a> while ( i . <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> timeout = i . next ( ) ; </a> 1
<a> if ( timeout . <RARE_TOKEN> <= 0 ) { </a> 1
<a> i . remove ( ) ; </a> 1
<a> if ( timeout . <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> . add ( timeout ) ; </a> 1
<a> } else { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> <RARE_TOKEN> = new ArrayList < <RARE_TOKEN> . <RARE_TOKEN> > ( ) ; </a> 0
<a> } </a> 1
<a> <RARE_TOKEN> . add ( timeout ) ; </a> 1
<a> } </a> 0
<a> } else { </a> 1
<a> timeout . <RARE_TOKEN> -- ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> for ( <RARE_TOKEN> timeout : <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( timeout , timeout . <RARE_TOKEN> - <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<a> private void <RARE_TOKEN> ( </a> 1
<a> List < <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 1
<a> for ( int i = <RARE_TOKEN> . size ( ) - 1 ; i >= 0 ; i -- ) { </a> 1
<a> <RARE_TOKEN> . get ( i ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 1
<a> } </a> 0
<a> private long <RARE_TOKEN> ( ) { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> * <RARE_TOKEN> ; </a> 1
<a> for ( ; ; ) { </a> 0
<a> final long currentTime = System . currentTimeMillis ( ) ; </a> 1
<a> long <RARE_TOKEN> = <RARE_TOKEN> * <RARE_TOKEN> - ( currentTime - <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> / 10 * 10 ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 1
<a> break ; </a> 1
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 1
<a> if ( shutdown . get ( ) ) { </a> 0
<a> return - 1 ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ++ ; </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private final <RARE_TOKEN> task ; </a> 0
<a> final long <RARE_TOKEN> ; </a> 1
<a> volatile int <RARE_TOKEN> ; </a> 1
<a> volatile long <RARE_TOKEN> ; </a> 1
<a> private final AtomicInteger state = new AtomicInteger ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> task , long <RARE_TOKEN> ) { </a> 1
<a> this . task = task ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . this ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return task ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean cancel ( ) { </a> 0
<a> if ( ! state . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) { </a> 1
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] . remove ( this ) ; </a> 1
<a> return true ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public boolean isCancelled ( ) { </a> 0
<a> return state . get ( ) == <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return state . get ( ) != <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! state . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) { </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> task . run ( this ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . warn ( </a> 0
<a> <RARE_TOKEN> exception <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> . class . getSimpleName ( ) + <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> long currentTime = System . currentTimeMillis ( ) ; </a> 1
<a> long <RARE_TOKEN> = <RARE_TOKEN> - currentTime ; </a> 1
<a> StringBuilder buf = new StringBuilder ( <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( <RARE_TOKEN> " ) ; </a> 1
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( " <RARE_TOKEN> <RARE_TOKEN> " ) ; </a> 1
<a> } else if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> buf . append ( - <RARE_TOKEN> ) ; </a> 1
<a> buf . append ( " <RARE_TOKEN> <RARE_TOKEN> " ) ; </a> 1
<a> } else { </a> 0
<a> buf . append ( <RARE_TOKEN> " ) ; </a> 1
<a> } </a> 0
<a> if ( isCancelled ( ) ) { </a> 0
<a> buf . append ( ", <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return buf . append ( <RARE_TOKEN> ) . toString ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . net . InetAddress ; </a> 0
<a> import java . net . NetworkInterface ; </a> 0
<a> import java . net . SocketException ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> public static final InetAddress <RARE_TOKEN> ; </a> 0
<a> public static final NetworkInterface <RARE_TOKEN> ; </a> 0
<a> public static final int <RARE_TOKEN> ; </a> 0
<a> private static final InternalLogger logger = </a> 0
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> static { </a> 0
<a> InetAddress <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = InetAddress . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> try { </a> 1
<a> <RARE_TOKEN> = InetAddress . <RARE_TOKEN> ( new byte [ ] { <RARE_TOKEN> , 0 , 0 , 1 } ) ; </a> 1
<a> } catch ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> try { </a> 1
<a> <RARE_TOKEN> = InetAddress . <RARE_TOKEN> ( </a> 0
<a> new byte [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 } ) ; </a> 0
<a> } catch ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> logger . error ( "Failed to <RARE_TOKEN> <RARE_TOKEN> - <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> NetworkInterface <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = NetworkInterface . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 1
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> try { </a> 0
<a> for ( <RARE_TOKEN> < NetworkInterface > <RARE_TOKEN> = NetworkInterface . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; ) { </a> 0
<a> NetworkInterface networkInterface = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( networkInterface . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = networkInterface ; </a> 0
<a> break ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> logger . error ( "Failed to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> in = null ; </a> 0
<a> try { </a> 0
<a> in = new <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = Integer . parseInt ( in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } finally { </a> 0
<a> if ( in != null ) { </a> 0
<a> try { </a> 0
<a> in . close ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> task , long delay , TimeUnit unit ) ; </a> 0
<a> Set < <RARE_TOKEN> > <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void run ( <RARE_TOKEN> timeout ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal ; </a> 0
<a> import java . util . concurrent . atomic . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . atomic . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> private static final boolean <RARE_TOKEN> ; </a> 0
<a> static final class <RARE_TOKEN> { </a> 0
<a> volatile <RARE_TOKEN> next ; </a> 0
<a> } </a> 0
<a> static { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> < <RARE_TOKEN> , <RARE_TOKEN> > <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> . class , <RARE_TOKEN> . class , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . next != <RARE_TOKEN> ) { </a> 0
<a> throw new Exception ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static < T , V > <RARE_TOKEN> < T , V > <RARE_TOKEN> ( Class < T > <RARE_TOKEN> , Class < V > <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static < T > <RARE_TOKEN> < T > <RARE_TOKEN> ( Class < T > <RARE_TOKEN> , String <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 1
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 1
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 1
<a> private static final boolean <RARE_TOKEN> = <RARE_TOKEN> ( AtomicInteger . class . <RARE_TOKEN> ( ) ) ; </a> 1
<a> private static final boolean <RARE_TOKEN> ; </a> 1
<a> static { </a> 1
<a> String os = System . getProperty ( <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = os . contains ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public static boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public static boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public static int <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> private static boolean <RARE_TOKEN> ( <RARE_TOKEN> loader ) { </a> 1
<a> String value = <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 0
<a> if ( value != null ) { </a> 0
<a> return false ; </a> 1
<a> } </a> 1
<a> value = <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 0
<a> if ( value == null ) { </a> 0
<a> value = <RARE_TOKEN> . get ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> if ( ! <RARE_TOKEN> . equalsIgnoreCase ( value ) ) { </a> 0
<a> return false ; </a> 1
<a> } </a> 1
<a> try { </a> 1
<a> Class < ? > <RARE_TOKEN> = Class . <RARE_TOKEN> ( <RARE_TOKEN> , true , loader ) ; </a> 1
<a> return <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( Exception e ) { </a> 1
<a> } </a> 0
<a> return false ; </a> 1
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( final Class < ? > <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 1
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> < Boolean > ( ) { </a> 1
<a> @ Override </a> 1
<a> public Boolean run ( ) throws Exception { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> return true ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> } </a> 1
<a> private static int <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 1
<a> Class . <RARE_TOKEN> ( <RARE_TOKEN> , false , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 1
<a> return 6 ; </a> 1
<a> } catch ( Exception e ) { </a> 1
<a> } </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> . class . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return 7 ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 1
<a> return 6 ; </a> 1
<a> } </a> 1
<a> private <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 1
<a> import java . util . concurrent . atomic . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private static final InternalLogger logger = </a> 1
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 1
<a> private final Class < ? > type ; </a> 1
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( ) ; </a> 1
<a> public <RARE_TOKEN> ( Class < ? > type ) { </a> 1
<a> if ( type == null ) { </a> 1
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> this . type = type ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) > <RARE_TOKEN> ) { </a> 1
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( false , true ) ) { </a> 1
<a> logger . warn ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + type . getSimpleName ( ) + </a> 1
<a> " <RARE_TOKEN> " + type . getSimpleName ( ) + </a> 1
<a> " is a <RARE_TOKEN> resource that must be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 1
<a> " <RARE_TOKEN> <RARE_TOKEN> that <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> public final class <RARE_TOKEN> extends Error { </a> 1
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> private static final <RARE_TOKEN> < String , Boolean > map = </a> 1
<a> new ConcurrentHashMap < String , Boolean > ( ) ; </a> 1
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( String name ) { </a> 1
<a> super ( name ) ; </a> 1
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( map , name ) ; </a> 1
<a> } </a> 0
<a> public void expect ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( this != <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Throwable <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Throwable <RARE_TOKEN> ( ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> . name ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public final class StringUtil { </a> 0
<a> private StringUtil ( ) { </a> 1
<a> } </a> 1
<a> public static final String NEWLINE ; </a> 1
<a> static { </a> 0
<a> String <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) . format ( <RARE_TOKEN> ) . toString ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> NEWLINE = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal ; </a> 0
<a> import java . util . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> public static String get ( String key ) { </a> 0
<a> try { </a> 0
<a> return System . getProperty ( key ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static String get ( String key , String <RARE_TOKEN> ) { </a> 0
<a> String value = get ( key ) ; </a> 0
<a> if ( value == null ) { </a> 0
<a> value = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return value ; </a> 0
<a> } </a> 0
<a> public static int get ( String key , int <RARE_TOKEN> ) { </a> 0
<a> String value = get ( key ) ; </a> 0
<a> if ( value == null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , value ) ) { </a> 0
<a> return Integer . parseInt ( value ) ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> private static final int [ ] <RARE_TOKEN> = { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> } ; </a> 0
<a> static int <RARE_TOKEN> ( int <RARE_TOKEN> , byte [ ] buf , int index , int len ) { </a> 0
<a> final int <RARE_TOKEN> = index + len ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> for ( int i = index ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> > > > 8 <RARE_TOKEN> <RARE_TOKEN> [ ( <RARE_TOKEN> <RARE_TOKEN> buf [ i ] ) & 0xff ] ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> . JZlib . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> private static final class <RARE_TOKEN> { </a> 0
<a> final int <RARE_TOKEN> ; </a> 0
<a> final int <RARE_TOKEN> ; </a> 0
<a> final int <RARE_TOKEN> ; </a> 0
<a> final int <RARE_TOKEN> ; </a> 0
<a> final int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> , </a> 0
<a> int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private static final <RARE_TOKEN> [ ] <RARE_TOKEN> ; </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> [ 10 ] ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = new <RARE_TOKEN> ( 0 , 0 , 0 , 0 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ 1 ] = new <RARE_TOKEN> ( 4 , 4 , 8 , 4 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ 2 ] = new <RARE_TOKEN> ( 4 , 5 , 16 , 8 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ 3 ] = new <RARE_TOKEN> ( 4 , 6 , 32 , 32 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ 4 ] = new <RARE_TOKEN> ( 4 , 4 , 16 , 16 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ 5 ] = new <RARE_TOKEN> ( 8 , 16 , 32 , 32 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ 6 ] = new <RARE_TOKEN> ( 8 , 16 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ 7 ] = new <RARE_TOKEN> ( 8 , 32 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ 8 ] = new <RARE_TOKEN> ( 32 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ 9 ] = new <RARE_TOKEN> ( 32 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static final String [ ] <RARE_TOKEN> = { <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> "" , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> "" } ; </a> 0
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private static final int <RARE_TOKEN> = 3 ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private static final int <RARE_TOKEN> = 8 * 2 ; </a> 0
<a> private static final int <RARE_TOKEN> = 16 ; </a> 0
<a> private static final int <RARE_TOKEN> = 17 ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = 3 ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> + 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> ZStream strm ; </a> 0
<a> int status ; </a> 0
<a> byte [ ] <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> byte <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> byte [ ] window ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> short [ ] prev ; </a> 0
<a> short [ ] <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int strstart ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int level ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> short [ ] <RARE_TOKEN> ; </a> 0
<a> short [ ] <RARE_TOKEN> ; </a> 0
<a> short [ ] <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> short [ ] <RARE_TOKEN> = new short [ JZlib . <RARE_TOKEN> + 1 ] ; </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ 2 * JZlib . <RARE_TOKEN> + 1 ] ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ 2 * JZlib . <RARE_TOKEN> + 1 ] ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> short <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = new short [ JZlib . <RARE_TOKEN> * 2 ] ; </a> 0
<a> <RARE_TOKEN> = new short [ ( 2 * JZlib . <RARE_TOKEN> + 1 ) * 2 ] ; </a> 0
<a> <RARE_TOKEN> = new short [ ( 2 * JZlib . <RARE_TOKEN> + 1 ) * 2 ] ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = 2 * <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> [ level ] . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> [ level ] . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> [ level ] . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> [ level ] . <RARE_TOKEN> ; </a> 0
<a> strstart = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> = <RARE_TOKEN> - 1 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 8 ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> for ( int i = 0 ; i < JZlib . <RARE_TOKEN> ; i ++ ) { </a> 0
<a> <RARE_TOKEN> [ i * 2 ] = 0 ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < JZlib . <RARE_TOKEN> ; i ++ ) { </a> 0
<a> <RARE_TOKEN> [ i * 2 ] = 0 ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < JZlib . <RARE_TOKEN> ; i ++ ) { </a> 0
<a> <RARE_TOKEN> [ i * 2 ] = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> * 2 ] = 1 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( short [ ] tree , </a> 0
<a> int k </a> 0
<a> ) { </a> 0
<a> int v = <RARE_TOKEN> [ k ] ; </a> 0
<a> int j = k < < 1 ; </a> 0
<a> while ( j <= <RARE_TOKEN> ) { </a> 0
<a> if ( j < <RARE_TOKEN> && <RARE_TOKEN> ( tree , <RARE_TOKEN> [ j + 1 ] , <RARE_TOKEN> [ j ] , <RARE_TOKEN> ) ) { </a> 0
<a> j ++ ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( tree , v , <RARE_TOKEN> [ j ] , <RARE_TOKEN> ) ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ k ] = <RARE_TOKEN> [ j ] ; </a> 0
<a> k = j ; </a> 0
<a> j <RARE_TOKEN> 1 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ k ] = v ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( short [ ] tree , int n , int m , byte [ ] <RARE_TOKEN> ) { </a> 0
<a> short <RARE_TOKEN> = tree [ n * 2 ] ; </a> 0
<a> short <RARE_TOKEN> = tree [ m * 2 ] ; </a> 0
<a> return <RARE_TOKEN> < <RARE_TOKEN> || <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> [ n ] <= <RARE_TOKEN> [ m ] ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( short [ ] tree , </a> 0
<a> int <RARE_TOKEN> </a> 0
<a> ) { </a> 0
<a> int n ; </a> 0
<a> int <RARE_TOKEN> = - 1 ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = tree [ 0 * 2 + 1 ] ; </a> 1
<a> int count = 0 ; </a> 0
<a> int <RARE_TOKEN> = 7 ; </a> 0
<a> int <RARE_TOKEN> = 4 ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 3 ; </a> 0
<a> } </a> 0
<a> tree [ ( <RARE_TOKEN> + 1 ) * 2 + 1 ] = ( short ) <RARE_TOKEN> ; </a> 0
<a> for ( n = 0 ; n <= <RARE_TOKEN> ; n ++ ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = tree [ ( n + 1 ) * 2 + 1 ] ; </a> 0
<a> if ( ++ count < <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> continue ; </a> 0
<a> } else if ( count < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> * 2 ] += count ; </a> 0
<a> } else if ( <RARE_TOKEN> != 0 ) { </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> * 2 ] ++ ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> * 2 ] ++ ; </a> 0
<a> } else if ( count <= 10 ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> * 2 ] ++ ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> * 2 ] ++ ; </a> 0
<a> } </a> 0
<a> count = 0 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 3 ; </a> 0
<a> } else if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = 6 ; </a> 0
<a> <RARE_TOKEN> = 3 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = 7 ; </a> 0
<a> <RARE_TOKEN> = 4 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( ) { </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> for ( <RARE_TOKEN> = JZlib . <RARE_TOKEN> - 1 ; <RARE_TOKEN> >= 3 ; <RARE_TOKEN> -- ) { </a> 0
<a> if ( <RARE_TOKEN> [ <RARE_TOKEN> . <RARE_TOKEN> [ <RARE_TOKEN> ] * 2 + 1 ] != 0 ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += 3 * ( <RARE_TOKEN> + 1 ) + 5 + 5 + 4 ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> - <RARE_TOKEN> , 5 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> - 1 , 5 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> - 4 , 4 ) ; </a> 0
<a> for ( <RARE_TOKEN> = 0 ; <RARE_TOKEN> < <RARE_TOKEN> ; <RARE_TOKEN> ++ ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> [ <RARE_TOKEN> . <RARE_TOKEN> [ <RARE_TOKEN> ] * 2 + 1 ] , 3 ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> - 1 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> - 1 ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( short [ ] tree , </a> 0
<a> int <RARE_TOKEN> </a> 0
<a> ) { </a> 0
<a> int n ; </a> 0
<a> int <RARE_TOKEN> = - 1 ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = tree [ 0 * 2 + 1 ] ; </a> 1
<a> int count = 0 ; </a> 0
<a> int <RARE_TOKEN> = 7 ; </a> 0
<a> int <RARE_TOKEN> = 4 ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 3 ; </a> 0
<a> } </a> 0
<a> for ( n = 0 ; n <= <RARE_TOKEN> ; n ++ ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = tree [ ( n + 1 ) * 2 + 1 ] ; </a> 0
<a> if ( ++ count < <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> continue ; </a> 0
<a> } else if ( count < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } while ( -- count != 0 ) ; </a> 0
<a> } else if ( <RARE_TOKEN> != 0 ) { </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> count -- ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( count - 3 , 2 ) ; </a> 0
<a> } else if ( count <= 10 ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( count - 3 , 3 ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( count - 11 , 7 ) ; </a> 0
<a> } </a> 0
<a> count = 0 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 3 ; </a> 0
<a> } else if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = 6 ; </a> 0
<a> <RARE_TOKEN> = 3 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = 7 ; </a> 0
<a> <RARE_TOKEN> = 4 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( byte [ ] p , int start , int len ) { </a> 0
<a> System . <RARE_TOKEN> ( p , start , <RARE_TOKEN> , <RARE_TOKEN> , len ) ; </a> 0
<a> <RARE_TOKEN> += len ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( byte c ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ++ ] = c ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int w ) { </a> 0
<a> <RARE_TOKEN> ( ( byte ) w ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) ( w > > > 8 ) ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int b ) { </a> 0
<a> <RARE_TOKEN> ( ( byte ) ( b > > 8 ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) b ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int c , short [ ] tree ) { </a> 0
<a> int <RARE_TOKEN> = c * 2 ; </a> 0
<a> <RARE_TOKEN> ( tree [ <RARE_TOKEN> ] & <RARE_TOKEN> , tree [ <RARE_TOKEN> + 1 ] & <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int value , int length ) { </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> - length ) { </a> 0
<a> <RARE_TOKEN> |= value < < <RARE_TOKEN> & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = ( short ) ( value > > > <RARE_TOKEN> - <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> += length - <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> |= value < < <RARE_TOKEN> & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> += length ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> < < 1 , 3 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( 1 + <RARE_TOKEN> + 10 - <RARE_TOKEN> < 9 ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> < < 1 , 3 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 7 ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( int dist , </a> 0
<a> int <RARE_TOKEN> </a> 0
<a> ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> + <RARE_TOKEN> * 2 ] = ( byte ) ( dist > > > 8 ) ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> + <RARE_TOKEN> * 2 + 1 ] = ( byte ) dist ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> + <RARE_TOKEN> ] = ( byte ) <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> if ( dist == 0 ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> * 2 ] ++ ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> dist -- ; </a> 0
<a> <RARE_TOKEN> [ ( <RARE_TOKEN> . <RARE_TOKEN> [ <RARE_TOKEN> ] + JZlib . <RARE_TOKEN> + 1 ) * 2 ] ++ ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> . <RARE_TOKEN> ( dist ) * 2 ] ++ ; </a> 0
<a> } </a> 0
<a> if ( ( <RARE_TOKEN> & <RARE_TOKEN> ) == 0 && level > 2 ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> * 8 ; </a> 0
<a> int <RARE_TOKEN> = strstart - <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> for ( <RARE_TOKEN> = 0 ; <RARE_TOKEN> < JZlib . <RARE_TOKEN> ; <RARE_TOKEN> ++ ) { </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> [ <RARE_TOKEN> * 2 ] * </a> 0
<a> ( <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> [ <RARE_TOKEN> ] ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> 3 ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> / 2 && <RARE_TOKEN> < <RARE_TOKEN> / 2 ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> == <RARE_TOKEN> - 1 ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( short [ ] <RARE_TOKEN> , short [ ] <RARE_TOKEN> ) { </a> 0
<a> int dist ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> int code ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != 0 ) { </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> dist = <RARE_TOKEN> [ <RARE_TOKEN> + <RARE_TOKEN> * 2 ] < < 8 & <RARE_TOKEN> | </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> + <RARE_TOKEN> * 2 + 1 ] & 0xff ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> + <RARE_TOKEN> ] & 0xff ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> if ( dist == 0 ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> code = <RARE_TOKEN> . <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> ( code + JZlib . <RARE_TOKEN> + 1 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> [ code ] ; </a> 0
<a> if ( <RARE_TOKEN> != 0 ) { </a> 0
<a> <RARE_TOKEN> -= <RARE_TOKEN> . <RARE_TOKEN> [ code ] ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> dist -- ; </a> 0
<a> code = <RARE_TOKEN> . <RARE_TOKEN> ( dist ) ; </a> 0
<a> <RARE_TOKEN> ( code , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> [ code ] ; </a> 0
<a> if ( <RARE_TOKEN> != 0 ) { </a> 0
<a> dist -= <RARE_TOKEN> . <RARE_TOKEN> [ code ] ; </a> 0
<a> <RARE_TOKEN> ( dist , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } while ( <RARE_TOKEN> < <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> * 2 + 1 ] ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> int n = 0 ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> while ( n < 7 ) { </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> [ n * 2 ] ; </a> 0
<a> n ++ ; </a> 0
<a> } </a> 0
<a> while ( n < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> [ n * 2 ] ; </a> 0
<a> n ++ ; </a> 0
<a> } </a> 0
<a> while ( n < JZlib . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> [ n * 2 ] ; </a> 0
<a> n ++ ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = ( byte ) ( <RARE_TOKEN> > <RARE_TOKEN> > > > 2 ? <RARE_TOKEN> : <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == 16 ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } else if ( <RARE_TOKEN> >= 8 ) { </a> 0
<a> <RARE_TOKEN> ( ( byte ) <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> 8 ; </a> 0
<a> <RARE_TOKEN> -= 8 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> > 8 ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> ( ( byte ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int buf , </a> 0
<a> int len , </a> 0
<a> boolean header </a> 0
<a> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = 8 ; </a> 0
<a> if ( header ) { </a> 0
<a> <RARE_TOKEN> ( ( short ) len ) ; </a> 0
<a> <RARE_TOKEN> ( ( short ) ~ len ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( window , buf , len ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> >= 0 ? <RARE_TOKEN> : - 1 , strstart - </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = strstart ; </a> 0
<a> strm . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( int flush ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> - 5 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - 5 ; </a> 0
<a> } </a> 0
<a> while ( true ) { </a> 0
<a> if ( <RARE_TOKEN> <= 1 ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == 0 && flush == JZlib . <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> strstart += <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> if ( strstart == 0 || strstart >= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = strstart - <RARE_TOKEN> ; </a> 0
<a> strstart = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( strstart - <RARE_TOKEN> >= <RARE_TOKEN> - <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( flush == JZlib . <RARE_TOKEN> ) ; </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> return flush == JZlib . <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return flush == JZlib . <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int buf , </a> 0
<a> int <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> </a> 0
<a> ) { </a> 0
<a> <RARE_TOKEN> ( ( <RARE_TOKEN> < < 1 ) + ( <RARE_TOKEN> ? 1 : 0 ) , 3 ) ; </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , true ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int buf , </a> 0
<a> int <RARE_TOKEN> , </a> 0
<a> boolean <RARE_TOKEN> </a> 0
<a> ) { </a> 0
<a> int <RARE_TOKEN> , <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> if ( level > 0 ) { </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + 3 + 7 > > > 3 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + 3 + 7 > > > 3 ; </a> 0
<a> if ( <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> = <RARE_TOKEN> + 5 ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> + 4 <= <RARE_TOKEN> && buf != - 1 ) { </a> 0
<a> <RARE_TOKEN> ( buf , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( <RARE_TOKEN> < < 1 ) + ( <RARE_TOKEN> ? 1 : 0 ) , 3 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ( <RARE_TOKEN> < < 1 ) + ( <RARE_TOKEN> ? 1 : 0 ) , 3 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> + 1 , <RARE_TOKEN> . <RARE_TOKEN> + 1 , </a> 0
<a> <RARE_TOKEN> + 1 ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> int n , m ; </a> 0
<a> int p ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> - strstart ; </a> 0
<a> if ( <RARE_TOKEN> == 0 && strstart == 0 && <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> == - 1 ) { </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } else if ( strstart >= <RARE_TOKEN> + <RARE_TOKEN> - <RARE_TOKEN> ) { </a> 0
<a> System . <RARE_TOKEN> ( window , <RARE_TOKEN> , window , 0 , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> -= <RARE_TOKEN> ; </a> 0
<a> strstart -= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> -= <RARE_TOKEN> ; </a> 0
<a> n = <RARE_TOKEN> ; </a> 0
<a> p = n ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> m = <RARE_TOKEN> [ -- p ] & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ p ] = m >= <RARE_TOKEN> ? ( short ) ( m - <RARE_TOKEN> ) : 0 ; </a> 0
<a> } while ( -- n != 0 ) ; </a> 0
<a> n = <RARE_TOKEN> ; </a> 0
<a> p = n ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> m = prev [ -- p ] & <RARE_TOKEN> ; </a> 0
<a> prev [ p ] = m >= <RARE_TOKEN> ? ( short ) ( m - <RARE_TOKEN> ) : 0 ; </a> 0
<a> } while ( -- n != 0 ) ; </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( strm . avail_in == 0 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> n = strm . <RARE_TOKEN> ( window , strstart + <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> += n ; </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = window [ strstart ] & 0xff ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> < < <RARE_TOKEN> <RARE_TOKEN> window [ strstart + 1 ] & 0xff ) & </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } while ( <RARE_TOKEN> < <RARE_TOKEN> && strm . avail_in != 0 ) ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( int flush ) { </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> boolean <RARE_TOKEN> ; </a> 0
<a> while ( true ) { </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> && flush == JZlib . <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> < < <RARE_TOKEN> <RARE_TOKEN> window [ strstart + <RARE_TOKEN> - 1 ] & 0xff ) & </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ] & <RARE_TOKEN> ; </a> 0
<a> prev [ strstart & <RARE_TOKEN> ] = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = ( short ) strstart ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != <RARE_TOKEN> && </a> 0
<a> ( strstart - <RARE_TOKEN> & <RARE_TOKEN> ) <= <RARE_TOKEN> - <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != JZlib . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( strstart - <RARE_TOKEN> , <RARE_TOKEN> - </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> -= <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> <= <RARE_TOKEN> && <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> strstart ++ ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> < < <RARE_TOKEN> <RARE_TOKEN> window [ strstart + </a> 0
<a> <RARE_TOKEN> - 1 ] & 0xff ) & </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ] & <RARE_TOKEN> ; </a> 0
<a> prev [ strstart & <RARE_TOKEN> ] = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = ( short ) strstart ; </a> 0
<a> } while ( -- <RARE_TOKEN> != 0 ) ; </a> 0
<a> strstart ++ ; </a> 0
<a> } else { </a> 0
<a> strstart += <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = window [ strstart ] & 0xff ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> < < <RARE_TOKEN> <RARE_TOKEN> window [ strstart + 1 ] & 0xff ) & </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( 0 , window [ strstart ] & 0xff ) ; </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> strstart ++ ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( flush == JZlib . <RARE_TOKEN> ) ; </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> if ( flush == JZlib . <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return flush == JZlib . <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( int flush ) { </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> boolean <RARE_TOKEN> ; </a> 0
<a> while ( true ) { </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> && flush == JZlib . <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> < < <RARE_TOKEN> <RARE_TOKEN> window [ strstart + <RARE_TOKEN> - 1 ] & 0xff ) & </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ] & <RARE_TOKEN> ; </a> 0
<a> prev [ strstart & <RARE_TOKEN> ] = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = ( short ) strstart ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - 1 ; </a> 0
<a> if ( <RARE_TOKEN> != 0 && <RARE_TOKEN> < <RARE_TOKEN> && </a> 0
<a> ( strstart - <RARE_TOKEN> & <RARE_TOKEN> ) <= <RARE_TOKEN> - <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != JZlib . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= 5 && </a> 0
<a> ( <RARE_TOKEN> == JZlib . <RARE_TOKEN> || <RARE_TOKEN> == <RARE_TOKEN> && </a> 0
<a> strstart - <RARE_TOKEN> > <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> && <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = strstart + <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( strstart - 1 - <RARE_TOKEN> , <RARE_TOKEN> - </a> 0
<a> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> -= <RARE_TOKEN> - 1 ; </a> 0
<a> <RARE_TOKEN> -= 2 ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> if ( ++ strstart <= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> < < <RARE_TOKEN> <RARE_TOKEN> window [ strstart + </a> 0
<a> <RARE_TOKEN> - 1 ] & 0xff ) & </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ] & <RARE_TOKEN> ; </a> 0
<a> prev [ strstart & <RARE_TOKEN> ] = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = ( short ) strstart ; </a> 0
<a> } </a> 0
<a> } while ( -- <RARE_TOKEN> != 0 ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - 1 ; </a> 0
<a> strstart ++ ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> != 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( 0 , window [ strstart - 1 ] & 0xff ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> strstart ++ ; </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = 1 ; </a> 0
<a> strstart ++ ; </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != 0 ) { </a> 0
<a> <RARE_TOKEN> ( 0 , window [ strstart - 1 ] & 0xff ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( flush == JZlib . <RARE_TOKEN> ) ; </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> if ( flush == JZlib . <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return flush == JZlib . <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = strstart ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int len ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int limit = strstart > <RARE_TOKEN> - <RARE_TOKEN> ? strstart - </a> 0
<a> ( <RARE_TOKEN> - <RARE_TOKEN> ) : 0 ; </a> 0
<a> int <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = strstart + <RARE_TOKEN> ; </a> 0
<a> byte <RARE_TOKEN> = window [ <RARE_TOKEN> + <RARE_TOKEN> - 1 ] ; </a> 0
<a> byte <RARE_TOKEN> = window [ <RARE_TOKEN> + <RARE_TOKEN> ] ; </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> 2 ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( window [ <RARE_TOKEN> + <RARE_TOKEN> ] != <RARE_TOKEN> || </a> 0
<a> window [ <RARE_TOKEN> + <RARE_TOKEN> - 1 ] != <RARE_TOKEN> || </a> 0
<a> window [ <RARE_TOKEN> ] != window [ <RARE_TOKEN> ] || </a> 0
<a> window [ ++ <RARE_TOKEN> ] != window [ <RARE_TOKEN> + 1 ] ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += 2 ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> while ( window [ ++ <RARE_TOKEN> ] == window [ ++ <RARE_TOKEN> ] && </a> 0
<a> window [ ++ <RARE_TOKEN> ] == window [ ++ <RARE_TOKEN> ] && </a> 0
<a> window [ ++ <RARE_TOKEN> ] == window [ ++ <RARE_TOKEN> ] && </a> 0
<a> window [ ++ <RARE_TOKEN> ] == window [ ++ <RARE_TOKEN> ] && </a> 0
<a> window [ ++ <RARE_TOKEN> ] == window [ ++ <RARE_TOKEN> ] && </a> 0
<a> window [ ++ <RARE_TOKEN> ] == window [ ++ <RARE_TOKEN> ] && </a> 0
<a> window [ ++ <RARE_TOKEN> ] == window [ ++ <RARE_TOKEN> ] && </a> 0
<a> window [ ++ <RARE_TOKEN> ] == window [ ++ <RARE_TOKEN> ] && <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> len = <RARE_TOKEN> - ( <RARE_TOKEN> - <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> if ( len > <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = len ; </a> 0
<a> if ( len >= <RARE_TOKEN> ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = window [ <RARE_TOKEN> + <RARE_TOKEN> - 1 ] ; </a> 0
<a> <RARE_TOKEN> = window [ <RARE_TOKEN> + <RARE_TOKEN> ] ; </a> 0
<a> } </a> 0
<a> } while ( ( <RARE_TOKEN> = prev [ <RARE_TOKEN> & <RARE_TOKEN> ] & <RARE_TOKEN> ) > limit && </a> 0
<a> -- <RARE_TOKEN> != 0 ) ; </a> 0
<a> if ( <RARE_TOKEN> <= <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ZStream strm , int level , int bits , int memLevel , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( strm , level , JZlib . <RARE_TOKEN> , bits , </a> 0
<a> memLevel , JZlib . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( ZStream strm , int level , int method , int windowBits , </a> 0
<a> int memLevel , int <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> for <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> strm . msg = null ; </a> 0
<a> if ( level == JZlib . <RARE_TOKEN> ) { </a> 0
<a> level = 6 ; </a> 0
<a> } </a> 0
<a> if ( windowBits < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + windowBits ) ; </a> 0
<a> } </a> 0
<a> if ( memLevel < 1 || memLevel > JZlib . <RARE_TOKEN> || </a> 0
<a> method != JZlib . <RARE_TOKEN> || windowBits < 9 || </a> 0
<a> windowBits > 15 || level < 0 || level > 9 || <RARE_TOKEN> < 0 || </a> 0
<a> <RARE_TOKEN> > JZlib . <RARE_TOKEN> ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> strm . <RARE_TOKEN> = this ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = windowBits ; </a> 0
<a> <RARE_TOKEN> = 1 < < <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - 1 ; </a> 0
<a> <RARE_TOKEN> = memLevel + 7 ; </a> 0
<a> <RARE_TOKEN> = 1 < < <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - 1 ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> + <RARE_TOKEN> - 1 ) / <RARE_TOKEN> ; </a> 0
<a> window = new byte [ <RARE_TOKEN> * 2 ] ; </a> 0
<a> prev = new short [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> = new short [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> = 1 < < memLevel + 6 ; </a> 0
<a> <RARE_TOKEN> = new byte [ <RARE_TOKEN> * 4 ] ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> * 4 ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> / 2 ; </a> 0
<a> <RARE_TOKEN> = ( 1 + 2 ) * <RARE_TOKEN> ; </a> 0
<a> this . level = level ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ( strm ) ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ( ZStream strm ) { </a> 0
<a> strm . total_in = strm . <RARE_TOKEN> = 0 ; </a> 0
<a> strm . msg = null ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> status = <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> strm . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 0 , null , 0 , 0 ) ; </a> 0
<a> strm . <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = JZlib . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ) { </a> 0
<a> if ( status != <RARE_TOKEN> && status != <RARE_TOKEN> && </a> 0
<a> status != <RARE_TOKEN> ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> prev = null ; </a> 0
<a> window = null ; </a> 0
<a> return status == <RARE_TOKEN> ? JZlib . <RARE_TOKEN> : JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ZStream strm , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = JZlib . Z_OK ; </a> 0
<a> if ( <RARE_TOKEN> == JZlib . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = 6 ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> < 0 || <RARE_TOKEN> > 9 || <RARE_TOKEN> < 0 || </a> 0
<a> <RARE_TOKEN> > JZlib . <RARE_TOKEN> ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> [ level ] . <RARE_TOKEN> != <RARE_TOKEN> [ <RARE_TOKEN> ] . <RARE_TOKEN> && </a> 0
<a> strm . total_in != 0 ) { </a> 0
<a> <RARE_TOKEN> = strm . <RARE_TOKEN> ( JZlib . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( level != <RARE_TOKEN> ) { </a> 0
<a> level = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ level ] . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ level ] . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ level ] . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ level ] . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ZStream strm , byte [ ] dictionary , int <RARE_TOKEN> ) { </a> 0
<a> int length = <RARE_TOKEN> ; </a> 0
<a> int index = 0 ; </a> 0
<a> if ( dictionary == null || status != <RARE_TOKEN> ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> strm . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( strm . <RARE_TOKEN> , dictionary , 0 , <RARE_TOKEN> ) ; </a> 0
<a> if ( length < <RARE_TOKEN> ) { </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> if ( length > <RARE_TOKEN> - <RARE_TOKEN> ) { </a> 0
<a> length = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> index = <RARE_TOKEN> - length ; </a> 0
<a> } </a> 0
<a> System . <RARE_TOKEN> ( dictionary , index , window , 0 , length ) ; </a> 0
<a> strstart = length ; </a> 0
<a> <RARE_TOKEN> = length ; </a> 0
<a> <RARE_TOKEN> = window [ 0 ] & 0xff ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> < < <RARE_TOKEN> <RARE_TOKEN> window [ 1 ] & 0xff ) & <RARE_TOKEN> ; </a> 0
<a> for ( int n = 0 ; n <= length - <RARE_TOKEN> ; n ++ ) { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> < < <RARE_TOKEN> <RARE_TOKEN> window [ n + <RARE_TOKEN> - 1 ] & 0xff ) & </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> prev [ n & <RARE_TOKEN> ] = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = ( short ) n ; </a> 0
<a> } </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ZStream strm , int flush ) { </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> if ( flush > JZlib . <RARE_TOKEN> || flush < 0 ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( strm . <RARE_TOKEN> == null || strm . next_in == null && </a> 0
<a> strm . avail_in != 0 || status == <RARE_TOKEN> && </a> 0
<a> flush != JZlib . <RARE_TOKEN> ) { </a> 0
<a> strm . msg = <RARE_TOKEN> [ JZlib . <RARE_TOKEN> - JZlib . <RARE_TOKEN> ] ; </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> strm . msg = <RARE_TOKEN> [ JZlib . <RARE_TOKEN> - JZlib . <RARE_TOKEN> ] ; </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> this . strm = strm ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = flush ; </a> 0
<a> if ( status == <RARE_TOKEN> ) { </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> int header = JZlib . <RARE_TOKEN> + ( <RARE_TOKEN> - 8 < < 4 ) < < 8 ; </a> 0
<a> int <RARE_TOKEN> = ( level - 1 & 0xff ) > > 1 ; </a> 0
<a> if ( <RARE_TOKEN> > 3 ) { </a> 0
<a> <RARE_TOKEN> = 3 ; </a> 0
<a> } </a> 0
<a> header |= <RARE_TOKEN> < < 6 ; </a> 0
<a> if ( strstart != 0 ) { </a> 0
<a> header |= JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> header += <RARE_TOKEN> - header <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( header ) ; </a> 0
<a> if ( strstart != 0 ) { </a> 0
<a> <RARE_TOKEN> ( ( int ) ( strm . <RARE_TOKEN> > > > 16 ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( int ) ( strm . <RARE_TOKEN> & <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> strm . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 0 , null , 0 , 0 ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ( byte ) <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) 8 ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) 0 ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) 0 ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) 0 ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) 0 ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) 0 ) ; </a> 0
<a> switch ( <RARE_TOKEN> [ level ] . <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ( byte ) 4 ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ( byte ) 2 ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> <RARE_TOKEN> ( ( byte ) 0 ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ( byte ) <RARE_TOKEN> ) ; </a> 0
<a> strm . <RARE_TOKEN> = 0 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> status = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != 0 ) { </a> 0
<a> strm . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = - 1 ; </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> } else if ( strm . avail_in == 0 && flush <= <RARE_TOKEN> && </a> 0
<a> flush != JZlib . <RARE_TOKEN> ) { </a> 0
<a> strm . msg = <RARE_TOKEN> [ JZlib . <RARE_TOKEN> - JZlib . <RARE_TOKEN> ] ; </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( status == <RARE_TOKEN> && strm . avail_in != 0 ) { </a> 0
<a> strm . msg = <RARE_TOKEN> [ JZlib . <RARE_TOKEN> - JZlib . <RARE_TOKEN> ] ; </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = strm . next_in_index ; </a> 0
<a> try { </a> 0
<a> if ( strm . avail_in != 0 || <RARE_TOKEN> != 0 || flush != JZlib . <RARE_TOKEN> && </a> 0
<a> status != <RARE_TOKEN> ) { </a> 0
<a> int <RARE_TOKEN> = - 1 ; </a> 0
<a> switch ( <RARE_TOKEN> [ level ] . <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( flush ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( flush ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( flush ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> || <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> status = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> || <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = - 1 ; </a> 0
<a> } </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> if ( flush == JZlib . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( 0 , 0 , false ) ; </a> 0
<a> if ( flush == JZlib . <RARE_TOKEN> ) { </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> <RARE_TOKEN> [ i ] = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> strm . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( strm . <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = - 1 ; </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> += strm . next_in_index - <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( flush != JZlib . <RARE_TOKEN> ) { </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> || <RARE_TOKEN> ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ( int ) ( strm . <RARE_TOKEN> > > > 16 ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( int ) ( strm . <RARE_TOKEN> & <RARE_TOKEN> ) ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> ( ( byte ) ( strm . <RARE_TOKEN> & 0xFF ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) ( strm . <RARE_TOKEN> > > > 8 & 0xFF ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) ( strm . <RARE_TOKEN> > > > 16 & 0xFF ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) ( strm . <RARE_TOKEN> > > > 24 & 0xFF ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) ( <RARE_TOKEN> & 0xFF ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) ( <RARE_TOKEN> > > > 8 & 0xFF ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) ( <RARE_TOKEN> > > > 16 & 0xFF ) ) ; </a> 0
<a> <RARE_TOKEN> ( ( byte ) ( <RARE_TOKEN> > > > 24 & 0xFF ) ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> strm . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> return <RARE_TOKEN> != 0 ? JZlib . Z_OK : JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> private static final int [ ] <RARE_TOKEN> = { <RARE_TOKEN> , 0x00000001 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> } ; </a> 0
<a> private static final int [ ] <RARE_TOKEN> = { </a> 0
<a> 16 , 17 , <RARE_TOKEN> , 0 , 8 , 7 , 9 , 6 , 10 , 5 , 11 , 4 , 12 , 3 , 13 , 2 , 14 , 1 , 15 } ; </a> 0
<a> private static final int TYPE = 0 ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private static final int <RARE_TOKEN> = 3 ; </a> 0
<a> private static final int <RARE_TOKEN> = 4 ; </a> 0
<a> private static final int <RARE_TOKEN> = 5 ; </a> 0
<a> private static final int <RARE_TOKEN> = 6 ; </a> 0
<a> private static final int <RARE_TOKEN> = 7 ; </a> 0
<a> private static final int <RARE_TOKEN> = 8 ; </a> 0
<a> private static final int <RARE_TOKEN> = 9 ; </a> 0
<a> private int mode ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int index ; </a> 0
<a> private int [ ] <RARE_TOKEN> ; </a> 0
<a> private final int [ ] <RARE_TOKEN> = new int [ 1 ] ; </a> 0
<a> private final int [ ] <RARE_TOKEN> = new int [ 1 ] ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private int last ; </a> 0
<a> int bitk ; </a> 0
<a> int bitb ; </a> 0
<a> private int [ ] <RARE_TOKEN> ; </a> 0
<a> byte [ ] window ; </a> 0
<a> final int end ; </a> 0
<a> int read ; </a> 0
<a> int write ; </a> 0
<a> private final Object <RARE_TOKEN> ; </a> 0
<a> private long <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ZStream z , Object <RARE_TOKEN> , int w ) { </a> 0
<a> <RARE_TOKEN> = new int [ JZlib . <RARE_TOKEN> * 3 ] ; </a> 0
<a> window = new byte [ w ] ; </a> 0
<a> end = w ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> mode = TYPE ; </a> 0
<a> <RARE_TOKEN> ( z , null ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ZStream z , long [ ] c ) { </a> 0
<a> if ( c != null ) { </a> 0
<a> c [ 0 ] = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> mode = TYPE ; </a> 0
<a> bitk = 0 ; </a> 0
<a> bitb = 0 ; </a> 0
<a> read = write = 0 ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> z . <RARE_TOKEN> = <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , null , 0 , 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ZStream z , int r ) { </a> 0
<a> int t ; </a> 0
<a> int b ; </a> 0
<a> int k ; </a> 0
<a> int p ; </a> 0
<a> int n ; </a> 0
<a> int q ; </a> 0
<a> int m ; </a> 0
<a> { </a> 0
<a> p = z . next_in_index ; </a> 0
<a> n = z . avail_in ; </a> 0
<a> b = bitb ; </a> 0
<a> k = bitk ; </a> 0
<a> } </a> 0
<a> { </a> 0
<a> q = write ; </a> 0
<a> m = q < read ? read - q - 1 : end - q ; </a> 0
<a> } </a> 0
<a> while ( true ) { </a> 0
<a> switch ( mode ) { </a> 0
<a> case TYPE : </a> 0
<a> while ( k < 3 ) { </a> 0
<a> if ( n != 0 ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } else { </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> t = b & 7 ; </a> 0
<a> last = t & 1 ; </a> 0
<a> switch ( t > > > 1 ) { </a> 0
<a> case 0 : </a> 0
<a> { </a> 0
<a> b <RARE_TOKEN> 3 ; </a> 0
<a> k -= 3 ; </a> 0
<a> } </a> 0
<a> t = k & 7 ; </a> 0
<a> { </a> 0
<a> b <RARE_TOKEN> t ; </a> 0
<a> k -= t ; </a> 0
<a> } </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case 1 : </a> 0
<a> { </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ 1 ] ; </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ 1 ] ; </a> 0
<a> int [ ] [ ] <RARE_TOKEN> = new int [ 1 ] [ ] ; </a> 0
<a> int [ ] [ ] <RARE_TOKEN> = new int [ 1 ] [ ] ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . init ( <RARE_TOKEN> [ 0 ] , <RARE_TOKEN> [ 0 ] , <RARE_TOKEN> [ 0 ] , 0 , <RARE_TOKEN> [ 0 ] , 0 ) ; </a> 0
<a> } </a> 0
<a> { </a> 0
<a> b <RARE_TOKEN> 3 ; </a> 0
<a> k -= 3 ; </a> 0
<a> } </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case 2 : </a> 0
<a> { </a> 0
<a> b <RARE_TOKEN> 3 ; </a> 0
<a> k -= 3 ; </a> 0
<a> } </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case 3 : </a> 0
<a> { </a> 0
<a> b <RARE_TOKEN> 3 ; </a> 0
<a> k -= 3 ; </a> 0
<a> } </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> block <RARE_TOKEN> ; </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> while ( k < 32 ) { </a> 0
<a> if ( n != 0 ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } else { </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> if ( ( ~ b > > > 16 & <RARE_TOKEN> ) != ( b & <RARE_TOKEN> ) ) { </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> block <RARE_TOKEN> ; </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = b & <RARE_TOKEN> ; </a> 0
<a> b = k = 0 ; </a> 0
<a> mode = <RARE_TOKEN> != 0 ? <RARE_TOKEN> : last != 0 ? <RARE_TOKEN> : TYPE ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( n == 0 ) { </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> if ( m == 0 ) { </a> 0
<a> if ( q == end && read != 0 ) { </a> 0
<a> q = 0 ; </a> 0
<a> m = q < read ? read - q - 1 : end - q ; </a> 0
<a> } </a> 0
<a> if ( m == 0 ) { </a> 0
<a> write = q ; </a> 0
<a> r = inflate_flush ( z , r ) ; </a> 0
<a> q = write ; </a> 0
<a> m = q < read ? read - q - 1 : end - q ; </a> 0
<a> if ( q == end && read != 0 ) { </a> 0
<a> q = 0 ; </a> 0
<a> m = q < read ? read - q - 1 : end - q ; </a> 0
<a> } </a> 0
<a> if ( m == 0 ) { </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> t = <RARE_TOKEN> ; </a> 0
<a> if ( t > n ) { </a> 0
<a> t = n ; </a> 0
<a> } </a> 0
<a> if ( t > m ) { </a> 0
<a> t = m ; </a> 0
<a> } </a> 0
<a> System . <RARE_TOKEN> ( z . next_in , p , window , q , t ) ; </a> 0
<a> p += t ; </a> 0
<a> n -= t ; </a> 0
<a> q += t ; </a> 0
<a> m -= t ; </a> 0
<a> if ( ( <RARE_TOKEN> -= t ) != 0 ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> mode = last != 0 ? <RARE_TOKEN> : TYPE ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> while ( k < 14 ) { </a> 0
<a> if ( n != 0 ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } else { </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = t = b & <RARE_TOKEN> ; </a> 0
<a> if ( ( t & <RARE_TOKEN> ) > 29 || ( t > > 5 & <RARE_TOKEN> ) > 29 ) { </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> length or <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> t = <RARE_TOKEN> + ( t & <RARE_TOKEN> ) + ( t > > 5 & <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null || <RARE_TOKEN> . length < t ) { </a> 0
<a> <RARE_TOKEN> = new int [ t ] ; </a> 0
<a> } else { </a> 0
<a> for ( int i = 0 ; i < t ; i ++ ) { </a> 0
<a> <RARE_TOKEN> [ i ] = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> { </a> 0
<a> b <RARE_TOKEN> 14 ; </a> 0
<a> k -= 14 ; </a> 0
<a> } </a> 0
<a> index = 0 ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> while ( index < 4 + ( <RARE_TOKEN> > > > 10 ) ) { </a> 0
<a> while ( k < 3 ) { </a> 0
<a> if ( n != 0 ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } else { </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> [ index ++ ] ] = b & 7 ; </a> 0
<a> { </a> 0
<a> b <RARE_TOKEN> 3 ; </a> 0
<a> k -= 3 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> while ( index < 19 ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> [ index ++ ] ] = 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ 0 ] = 7 ; </a> 0
<a> t = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , z ) ; </a> 0
<a> if ( t != JZlib . Z_OK ) { </a> 0
<a> r = t ; </a> 0
<a> if ( r == JZlib . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> index = 0 ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> while ( true ) { </a> 0
<a> t = <RARE_TOKEN> ; </a> 0
<a> if ( ! ( index < <RARE_TOKEN> + ( t & <RARE_TOKEN> ) + ( t > > 5 & <RARE_TOKEN> ) ) ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> int i , j , c ; </a> 0
<a> t = <RARE_TOKEN> [ 0 ] ; </a> 0
<a> while ( k < t ) { </a> 0
<a> if ( n != 0 ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } else { </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> [ 0 ] == - 1 ) { </a> 0
<a> } </a> 0
<a> t = <RARE_TOKEN> [ ( <RARE_TOKEN> [ 0 ] + ( b & <RARE_TOKEN> [ t ] ) ) * 3 + 1 ] ; </a> 0
<a> c = <RARE_TOKEN> [ ( <RARE_TOKEN> [ 0 ] + ( b & <RARE_TOKEN> [ t ] ) ) * 3 + 2 ] ; </a> 0
<a> if ( c < 16 ) { </a> 0
<a> b <RARE_TOKEN> t ; </a> 0
<a> k -= t ; </a> 0
<a> <RARE_TOKEN> [ index ++ ] = c ; </a> 0
<a> } else { </a> 0
<a> i = c == <RARE_TOKEN> ? 7 : c - 14 ; </a> 0
<a> j = c == <RARE_TOKEN> ? 11 : 3 ; </a> 0
<a> while ( k < t + i ) { </a> 0
<a> if ( n != 0 ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } else { </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> b <RARE_TOKEN> t ; </a> 0
<a> k -= t ; </a> 0
<a> j += b & <RARE_TOKEN> [ i ] ; </a> 0
<a> b <RARE_TOKEN> i ; </a> 0
<a> k -= i ; </a> 0
<a> i = index ; </a> 0
<a> t = <RARE_TOKEN> ; </a> 0
<a> if ( i + j > <RARE_TOKEN> + ( t & <RARE_TOKEN> ) + ( t > > 5 & <RARE_TOKEN> ) || </a> 0
<a> c == 16 && i < 1 ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> length <RARE_TOKEN> ; </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> c = c == 16 ? <RARE_TOKEN> [ i - 1 ] : 0 ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> [ i ++ ] = c ; </a> 0
<a> } while ( -- j != 0 ) ; </a> 0
<a> index = i ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ 0 ] = - 1 ; </a> 0
<a> { </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ 1 ] ; </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ 1 ] ; </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ 1 ] ; </a> 0
<a> int [ ] <RARE_TOKEN> = new int [ 1 ] ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = 9 ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = 6 ; </a> 0
<a> t = <RARE_TOKEN> ; </a> 0
<a> t = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> + ( t & <RARE_TOKEN> ) , </a> 0
<a> 1 + ( t > > 5 & <RARE_TOKEN> ) , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> z ) ; </a> 0
<a> if ( t != JZlib . Z_OK ) { </a> 0
<a> if ( t == JZlib . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> r = t ; </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . init ( <RARE_TOKEN> [ 0 ] , <RARE_TOKEN> [ 0 ] , <RARE_TOKEN> , <RARE_TOKEN> [ 0 ] , <RARE_TOKEN> , <RARE_TOKEN> [ 0 ] ) ; </a> 0
<a> } </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> if ( ( r = <RARE_TOKEN> . <RARE_TOKEN> ( this , z , r ) ) != JZlib . <RARE_TOKEN> ) { </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> p = z . next_in_index ; </a> 0
<a> n = z . avail_in ; </a> 0
<a> b = bitb ; </a> 0
<a> k = bitk ; </a> 0
<a> q = write ; </a> 0
<a> m = q < read ? read - q - 1 : end - q ; </a> 0
<a> if ( last == 0 ) { </a> 0
<a> mode = TYPE ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> write = q ; </a> 0
<a> r = inflate_flush ( z , r ) ; </a> 0
<a> q = write ; </a> 0
<a> if ( read != write ) { </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> default : </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> bitb = b ; </a> 0
<a> bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> write = q ; </a> 0
<a> return inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ZStream z ) { </a> 0
<a> <RARE_TOKEN> ( z , null ) ; </a> 0
<a> window = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( byte [ ] d , int start , int n ) { </a> 0
<a> System . <RARE_TOKEN> ( d , start , window , 0 , n ) ; </a> 0
<a> read = write = n ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ) { </a> 0
<a> return mode == <RARE_TOKEN> ? 1 : 0 ; </a> 0
<a> } </a> 0
<a> int inflate_flush ( ZStream z , int r ) { </a> 0
<a> int n ; </a> 0
<a> int p ; </a> 0
<a> int q ; </a> 0
<a> p = z . <RARE_TOKEN> ; </a> 0
<a> q = read ; </a> 0
<a> n = ( q <= write ? write : end ) - q ; </a> 0
<a> if ( n > z . <RARE_TOKEN> ) { </a> 0
<a> n = z . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( n != 0 && r == JZlib . <RARE_TOKEN> ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> z . <RARE_TOKEN> -= n ; </a> 0
<a> z . <RARE_TOKEN> += n ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> z . <RARE_TOKEN> = <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , window , q , n ) ; </a> 0
<a> } </a> 0
<a> System . <RARE_TOKEN> ( window , q , z . <RARE_TOKEN> , p , n ) ; </a> 0
<a> p += n ; </a> 0
<a> q += n ; </a> 0
<a> if ( q == end ) { </a> 0
<a> q = 0 ; </a> 0
<a> if ( write == end ) { </a> 0
<a> write = 0 ; </a> 0
<a> } </a> 0
<a> n = write - q ; </a> 0
<a> if ( n > z . <RARE_TOKEN> ) { </a> 0
<a> n = z . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( n != 0 && r == JZlib . <RARE_TOKEN> ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> z . <RARE_TOKEN> -= n ; </a> 0
<a> z . <RARE_TOKEN> += n ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> z . <RARE_TOKEN> = <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , window , q , n ) ; </a> 0
<a> } </a> 0
<a> System . <RARE_TOKEN> ( window , q , z . <RARE_TOKEN> , p , n ) ; </a> 0
<a> p += n ; </a> 0
<a> q += n ; </a> 0
<a> } </a> 0
<a> z . <RARE_TOKEN> = p ; </a> 0
<a> read = q ; </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> private static final int [ ] <RARE_TOKEN> = { <RARE_TOKEN> , 0x00000001 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> } ; </a> 0
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private static final int <RARE_TOKEN> = 3 ; </a> 0
<a> private static final int <RARE_TOKEN> = 4 ; </a> 0
<a> private static final int <RARE_TOKEN> = 5 ; </a> 0
<a> private static final int <RARE_TOKEN> = 6 ; </a> 0
<a> private static final int <RARE_TOKEN> = 7 ; </a> 0
<a> private static final int <RARE_TOKEN> = 8 ; </a> 0
<a> private static final int <RARE_TOKEN> = 9 ; </a> 0
<a> private int mode ; </a> 0
<a> private int len ; </a> 0
<a> private int [ ] tree ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int get ; </a> 0
<a> private int dist ; </a> 0
<a> private byte <RARE_TOKEN> ; </a> 0
<a> private byte <RARE_TOKEN> ; </a> 0
<a> private int [ ] <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int [ ] <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> void init ( int <RARE_TOKEN> , int <RARE_TOKEN> , int [ ] <RARE_TOKEN> , int <RARE_TOKEN> , int [ ] <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = ( byte ) <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = ( byte ) <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> tree = null ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( <RARE_TOKEN> s , ZStream z , int r ) { </a> 0
<a> int j ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int e ; </a> 0
<a> int b = 0 ; </a> 1
<a> int k = 0 ; </a> 1
<a> int p = 0 ; </a> 1
<a> int n ; </a> 0
<a> int q ; </a> 0
<a> int m ; </a> 0
<a> int f ; </a> 0
<a> p = z . next_in_index ; </a> 0
<a> n = z . avail_in ; </a> 0
<a> b = s . bitb ; </a> 0
<a> k = s . bitk ; </a> 0
<a> q = s . write ; </a> 0
<a> m = q < s . read ? s . read - q - 1 : s . end - q ; </a> 0
<a> while ( true ) { </a> 0
<a> switch ( mode ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( m >= <RARE_TOKEN> && n >= 10 ) { </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> r = <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , s , z ) ; </a> 0
<a> p = z . next_in_index ; </a> 0
<a> n = z . avail_in ; </a> 0
<a> b = s . bitb ; </a> 0
<a> k = s . bitk ; </a> 0
<a> q = s . write ; </a> 0
<a> m = q < s . read ? s . read - q - 1 : s . end - q ; </a> 0
<a> if ( r != JZlib . Z_OK ) { </a> 0
<a> mode = r == JZlib . <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> tree = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> j = <RARE_TOKEN> ; </a> 0
<a> while ( k < j ) { </a> 0
<a> if ( n != 0 ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } else { </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> + ( b & <RARE_TOKEN> [ j ] ) ) * 3 ; </a> 0
<a> b <RARE_TOKEN> tree [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> k -= tree [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> e = tree [ <RARE_TOKEN> ] ; </a> 0
<a> if ( e == 0 ) { </a> 0
<a> <RARE_TOKEN> = tree [ <RARE_TOKEN> + 2 ] ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ( e & 16 ) != 0 ) { </a> 0
<a> get = e & 15 ; </a> 0
<a> len = tree [ <RARE_TOKEN> + 2 ] ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ( e & <RARE_TOKEN> ) == 0 ) { </a> 0
<a> <RARE_TOKEN> = e ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> / 3 + tree [ <RARE_TOKEN> + 2 ] ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ( e & 32 ) != 0 ) { </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> j = get ; </a> 0
<a> while ( k < j ) { </a> 0
<a> if ( n != 0 ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } else { </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> len += b & <RARE_TOKEN> [ j ] ; </a> 0
<a> b <RARE_TOKEN> j ; </a> 0
<a> k -= j ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> tree = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> j = <RARE_TOKEN> ; </a> 0
<a> while ( k < j ) { </a> 0
<a> if ( n != 0 ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } else { </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> + ( b & <RARE_TOKEN> [ j ] ) ) * 3 ; </a> 0
<a> b <RARE_TOKEN> tree [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> k -= tree [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> e = tree [ <RARE_TOKEN> ] ; </a> 0
<a> if ( ( e & 16 ) != 0 ) { </a> 0
<a> get = e & 15 ; </a> 0
<a> dist = tree [ <RARE_TOKEN> + 2 ] ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ( e & <RARE_TOKEN> ) == 0 ) { </a> 0
<a> <RARE_TOKEN> = e ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> / 3 + tree [ <RARE_TOKEN> + 2 ] ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> j = get ; </a> 0
<a> while ( k < j ) { </a> 0
<a> if ( n != 0 ) { </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> } else { </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> dist += b & <RARE_TOKEN> [ j ] ; </a> 0
<a> b <RARE_TOKEN> j ; </a> 0
<a> k -= j ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> f = q - dist ; </a> 0
<a> while ( f < 0 ) { </a> 0
<a> f += s . end ; </a> 0
<a> } </a> 0
<a> while ( len != 0 ) { </a> 0
<a> if ( m == 0 ) { </a> 0
<a> if ( q == s . end && s . read != 0 ) { </a> 0
<a> q = 0 ; </a> 0
<a> m = q < s . read ? s . read - q - 1 : s . end - q ; </a> 0
<a> } </a> 0
<a> if ( m == 0 ) { </a> 0
<a> s . write = q ; </a> 0
<a> r = s . inflate_flush ( z , r ) ; </a> 0
<a> q = s . write ; </a> 0
<a> m = q < s . read ? s . read - q - 1 : s . end - q ; </a> 0
<a> if ( q == s . end && s . read != 0 ) { </a> 0
<a> q = 0 ; </a> 0
<a> m = q < s . read ? s . read - q - 1 : s . end - q ; </a> 0
<a> } </a> 0
<a> if ( m == 0 ) { </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> s . window [ q ++ ] = s . window [ f ++ ] ; </a> 0
<a> m -- ; </a> 0
<a> if ( f == s . end ) { </a> 0
<a> f = 0 ; </a> 0
<a> } </a> 0
<a> len -- ; </a> 0
<a> } </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( m == 0 ) { </a> 0
<a> if ( q == s . end && s . read != 0 ) { </a> 0
<a> q = 0 ; </a> 0
<a> m = q < s . read ? s . read - q - 1 : s . end - q ; </a> 0
<a> } </a> 0
<a> if ( m == 0 ) { </a> 0
<a> s . write = q ; </a> 0
<a> r = s . inflate_flush ( z , r ) ; </a> 0
<a> q = s . write ; </a> 0
<a> m = q < s . read ? s . read - q - 1 : s . end - q ; </a> 0
<a> if ( q == s . end && s . read != 0 ) { </a> 0
<a> q = 0 ; </a> 0
<a> m = q < s . read ? s . read - q - 1 : s . end - q ; </a> 0
<a> } </a> 0
<a> if ( m == 0 ) { </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> r = JZlib . Z_OK ; </a> 0
<a> s . window [ q ++ ] = ( byte ) <RARE_TOKEN> ; </a> 0
<a> m -- ; </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( k > 7 ) { </a> 0
<a> k -= 8 ; </a> 0
<a> n ++ ; </a> 0
<a> p -- ; </a> 0
<a> } </a> 0
<a> s . write = q ; </a> 0
<a> r = s . inflate_flush ( z , r ) ; </a> 0
<a> q = s . write ; </a> 0
<a> if ( s . read != s . write ) { </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> default : </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return s . inflate_flush ( z , r ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static int <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> , int [ ] <RARE_TOKEN> , int <RARE_TOKEN> , int [ ] <RARE_TOKEN> , </a> 0
<a> int <RARE_TOKEN> , <RARE_TOKEN> s , ZStream z ) { </a> 0
<a> int t ; </a> 0
<a> int [ ] <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int e ; </a> 0
<a> int b ; </a> 0
<a> int k ; </a> 0
<a> int p ; </a> 0
<a> int n ; </a> 0
<a> int q ; </a> 0
<a> int m ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int c ; </a> 0
<a> int d ; </a> 0
<a> int r ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> p = z . next_in_index ; </a> 0
<a> n = z . avail_in ; </a> 0
<a> b = s . bitb ; </a> 0
<a> k = s . bitk ; </a> 0
<a> q = s . write ; </a> 0
<a> m = q < s . read ? s . read - q - 1 : s . end - q ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> while ( k < 20 ) { </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> t = b & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> + t ) * 3 ; </a> 0
<a> if ( ( e = <RARE_TOKEN> [ <RARE_TOKEN> ] ) == 0 ) { </a> 0
<a> b <RARE_TOKEN> <RARE_TOKEN> [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> k -= <RARE_TOKEN> [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> s . window [ q ++ ] = ( byte ) <RARE_TOKEN> [ <RARE_TOKEN> + 2 ] ; </a> 0
<a> m -- ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> b <RARE_TOKEN> <RARE_TOKEN> [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> k -= <RARE_TOKEN> [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> if ( ( e & 16 ) != 0 ) { </a> 0
<a> e <RARE_TOKEN> 15 ; </a> 0
<a> c = <RARE_TOKEN> [ <RARE_TOKEN> + 2 ] + ( b & <RARE_TOKEN> [ e ] ) ; </a> 0
<a> b <RARE_TOKEN> e ; </a> 0
<a> k -= e ; </a> 0
<a> while ( k < 15 ) { </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> t = b & <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> + t ) * 3 ; </a> 0
<a> e = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> b <RARE_TOKEN> <RARE_TOKEN> [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> k -= <RARE_TOKEN> [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> if ( ( e & 16 ) != 0 ) { </a> 0
<a> e <RARE_TOKEN> 15 ; </a> 0
<a> while ( k < e ) { </a> 0
<a> n -- ; </a> 0
<a> b |= ( z . next_in [ p ++ ] & 0xff ) < < k ; </a> 0
<a> k += 8 ; </a> 0
<a> } </a> 0
<a> d = <RARE_TOKEN> [ <RARE_TOKEN> + 2 ] + ( b & <RARE_TOKEN> [ e ] ) ; </a> 0
<a> b <RARE_TOKEN> e ; </a> 0
<a> k -= e ; </a> 0
<a> m -= c ; </a> 0
<a> if ( q >= d ) { </a> 0
<a> r = q - d ; </a> 0
<a> if ( q - r > 0 && 2 > q - r ) { </a> 0
<a> s . window [ q ++ ] = s . window [ r ++ ] ; </a> 0
<a> s . window [ q ++ ] = s . window [ r ++ ] ; </a> 0
<a> c -= 2 ; </a> 0
<a> } else { </a> 0
<a> System . <RARE_TOKEN> ( s . window , r , s . window , q , </a> 0
<a> 2 ) ; </a> 0
<a> q += 2 ; </a> 0
<a> r += 2 ; </a> 0
<a> c -= 2 ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> r = q - d ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> r += s . end ; </a> 0
<a> } while ( r < 0 ) ; </a> 0
<a> e = s . end - r ; </a> 0
<a> if ( c > e ) { </a> 0
<a> c -= e ; </a> 0
<a> if ( q - r > 0 && e > q - r ) { </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> s . window [ q ++ ] = s . window [ r ++ ] ; </a> 0
<a> } while ( -- e != 0 ) ; </a> 0
<a> } else { </a> 0
<a> System . <RARE_TOKEN> ( s . window , r , s . window , </a> 0
<a> q , e ) ; </a> 0
<a> q += e ; </a> 0
<a> r += e ; </a> 0
<a> e = 0 ; </a> 1
<a> } </a> 0
<a> r = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( q - r > 0 && c > q - r ) { </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> s . window [ q ++ ] = s . window [ r ++ ] ; </a> 0
<a> } while ( -- c != 0 ) ; </a> 0
<a> } else { </a> 0
<a> System . <RARE_TOKEN> ( s . window , r , s . window , q , c ) ; </a> 0
<a> q += c ; </a> 0
<a> r += c ; </a> 0
<a> c = 0 ; </a> 1
<a> } </a> 0
<a> break ; </a> 0
<a> } else if ( ( e & <RARE_TOKEN> ) == 0 ) { </a> 0
<a> t += <RARE_TOKEN> [ <RARE_TOKEN> + 2 ] ; </a> 0
<a> t += b & <RARE_TOKEN> [ e ] ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> + t ) * 3 ; </a> 0
<a> e = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> } else { </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> c = z . avail_in - n ; </a> 0
<a> c = k > > 3 < c ? k > > 3 : c ; </a> 0
<a> n += c ; </a> 0
<a> p -= c ; </a> 0
<a> k -= c < < 3 ; </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } while ( true ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ( e & <RARE_TOKEN> ) == 0 ) { </a> 0
<a> t += <RARE_TOKEN> [ <RARE_TOKEN> + 2 ] ; </a> 0
<a> t += b & <RARE_TOKEN> [ e ] ; </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> + t ) * 3 ; </a> 0
<a> if ( ( e = <RARE_TOKEN> [ <RARE_TOKEN> ] ) == 0 ) { </a> 0
<a> b <RARE_TOKEN> <RARE_TOKEN> [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> k -= <RARE_TOKEN> [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> s . window [ q ++ ] = ( byte ) <RARE_TOKEN> [ <RARE_TOKEN> + 2 ] ; </a> 0
<a> m -- ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } else if ( ( e & 32 ) != 0 ) { </a> 0
<a> c = z . avail_in - n ; </a> 0
<a> c = k > > 3 < c ? k > > 3 : c ; </a> 0
<a> n += c ; </a> 0
<a> p -= c ; </a> 0
<a> k -= c < < 3 ; </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> c = z . avail_in - n ; </a> 0
<a> c = k > > 3 < c ? k > > 3 : c ; </a> 0
<a> n += c ; </a> 0
<a> p -= c ; </a> 0
<a> k -= c < < 3 ; </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } while ( true ) ; </a> 0
<a> } while ( m >= <RARE_TOKEN> && n >= 10 ) ; </a> 0
<a> c = z . avail_in - n ; </a> 0
<a> c = k > > 3 < c ? k > > 3 : c ; </a> 0
<a> n += c ; </a> 0
<a> p -= c ; </a> 0
<a> k -= c < < 3 ; </a> 0
<a> s . bitb = b ; </a> 0
<a> s . bitk = k ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> s . write = q ; </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> static final int <RARE_TOKEN> = 9 ; </a> 0
<a> static final int <RARE_TOKEN> = 5 ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , 80 , 0 , 8 , 16 , <RARE_TOKEN> , 8 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 10 , 0 , 8 , <RARE_TOKEN> , 0 , </a> 0
<a> 8 , 32 , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 0 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , </a> 0
<a> 6 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 24 , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 17 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 8 , 0 , </a> 0
<a> 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 4 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 20 , <RARE_TOKEN> , 8 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , 200 , <RARE_TOKEN> , 7 , 13 , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 4 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , </a> 0
<a> 80 , 7 , 8 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 28 , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , </a> 0
<a> 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 23 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , </a> 0
<a> 12 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 3 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 11 , </a> 0
<a> 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 2 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , </a> 0
<a> <RARE_TOKEN> , 80 , 7 , 7 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 26 , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 19 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , </a> 0
<a> 8 , 10 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 5 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 8 , 0 , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , </a> 0
<a> 15 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 6 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 9 , <RARE_TOKEN> , 80 , 7 , 9 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , </a> 0
<a> 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 27 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , 14 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , 17 , <RARE_TOKEN> , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , </a> 0
<a> <RARE_TOKEN> , 80 , 7 , 10 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 1 , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 6 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 25 , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 17 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 9 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 4 , </a> 0
<a> 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 80 , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , </a> 0
<a> 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 13 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 5 , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 8 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 29 , 0 , 9 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 23 , 0 , 8 , <RARE_TOKEN> , 0 , </a> 0
<a> 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 13 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , </a> 0
<a> 3 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 19 , <RARE_TOKEN> , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 11 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 3 , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 7 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 27 , 0 , 9 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 19 , 0 , 8 , <RARE_TOKEN> , 0 , </a> 0
<a> 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 11 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , </a> 0
<a> 5 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 23 , <RARE_TOKEN> , 8 , 0 , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 15 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 7 , 0 , </a> 0
<a> 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 9 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 27 , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 15 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , 80 , 0 , 8 , 16 , <RARE_TOKEN> , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , </a> 0
<a> 80 , 7 , 10 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 32 , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 0 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 6 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 24 , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , </a> 0
<a> 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 17 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , </a> 0
<a> 9 , <RARE_TOKEN> , 0 , 8 , 8 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 4 , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , 20 , <RARE_TOKEN> , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 7 , 13 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 4 , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 8 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 28 , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 23 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 12 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 3 , </a> 0
<a> 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , </a> 0
<a> 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 11 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 2 , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 7 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 26 , 0 , 9 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 19 , 0 , 8 , <RARE_TOKEN> , 0 , </a> 0
<a> 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 10 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , </a> 0
<a> 5 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 8 , 0 , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 15 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 6 , 0 , </a> 0
<a> 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 9 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 27 , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 14 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 17 , <RARE_TOKEN> , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 10 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , </a> 0
<a> 8 , 1 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 6 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 25 , </a> 0
<a> 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 17 , 0 , </a> 0
<a> 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 9 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , </a> 0
<a> <RARE_TOKEN> , 80 , 7 , 4 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 80 , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 13 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , 5 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 8 , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 8 , 29 , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 7 , 23 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 13 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 3 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 19 , <RARE_TOKEN> , 8 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , </a> 0
<a> 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 11 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , </a> 0
<a> 9 , <RARE_TOKEN> , 0 , 8 , 3 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 7 , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , 27 , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 7 , 19 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 11 , 0 , 8 , <RARE_TOKEN> , 0 , </a> 0
<a> 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 5 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , 23 , <RARE_TOKEN> , 8 , 0 , <RARE_TOKEN> , 7 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , 15 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , </a> 0
<a> 0 , 9 , <RARE_TOKEN> , 0 , 8 , 7 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 80 , 7 , 9 , 0 , 8 , </a> 0
<a> <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , <RARE_TOKEN> , 7 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 7 , 27 , 0 , 8 , <RARE_TOKEN> , 0 , 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> , 0 , 8 , 15 , 0 , 8 , <RARE_TOKEN> , 0 , </a> 0
<a> 8 , <RARE_TOKEN> , 0 , 9 , <RARE_TOKEN> } ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { 80 , 5 , 1 , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , 17 , <RARE_TOKEN> , 5 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 5 , 5 , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , <RARE_TOKEN> , 80 , 5 , 3 , <RARE_TOKEN> , </a> 0
<a> 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , 9 , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 5 , <RARE_TOKEN> , 80 , 5 , 2 , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , 25 , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , </a> 0
<a> 7 , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , <RARE_TOKEN> , 80 , 5 , 4 , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , 13 , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , <RARE_TOKEN> , <RARE_TOKEN> , 5 , </a> 0
<a> <RARE_TOKEN> } ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { </a> 0
<a> 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 13 , 15 , 17 , 19 , 23 , 27 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0 , 0 } ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { </a> 0
<a> 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 5 , </a> 0
<a> 5 , 5 , 5 , 0 , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { </a> 0
<a> 1 , 2 , 3 , 4 , 5 , 7 , 9 , 13 , 17 , 25 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> } ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { </a> 0
<a> 0 , 0 , 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 , 6 , 6 , 7 , 7 , 8 , 8 , 9 , 9 , 10 , 10 , </a> 0
<a> 11 , 11 , 12 , 12 , 13 , 13 } ; </a> 0
<a> static final int <RARE_TOKEN> = 15 ; </a> 0
<a> private int [ ] <RARE_TOKEN> ; </a> 0
<a> private int [ ] v ; </a> 0
<a> private int [ ] c ; </a> 0
<a> private int [ ] r ; </a> 0
<a> private int [ ] <RARE_TOKEN> ; </a> 0
<a> private int [ ] <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ( int [ ] b , </a> 0
<a> int <RARE_TOKEN> , int n , </a> 0
<a> int s , </a> 0
<a> int [ ] d , </a> 0
<a> int [ ] e , </a> 0
<a> int [ ] t , </a> 0
<a> int [ ] m , </a> 0
<a> int [ ] <RARE_TOKEN> , </a> 0
<a> int [ ] <RARE_TOKEN> , </a> 0
<a> int [ ] v </a> 0
<a> ) { </a> 0
<a> int a ; </a> 0
<a> int f ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int h ; </a> 0
<a> int i ; </a> 0
<a> int j ; </a> 0
<a> int k ; </a> 0
<a> int l ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int p ; </a> 0
<a> int q ; </a> 0
<a> int w ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int z ; </a> 0
<a> p = 0 ; </a> 0
<a> i = n ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> c [ b [ <RARE_TOKEN> + p ] ] ++ ; </a> 0
<a> p ++ ; </a> 0
<a> i -- ; </a> 0
<a> } while ( i != 0 ) ; </a> 0
<a> if ( c [ 0 ] == n ) { </a> 0
<a> t [ 0 ] = - 1 ; </a> 0
<a> m [ 0 ] = 0 ; </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> l = m [ 0 ] ; </a> 0
<a> for ( j = 1 ; j <= <RARE_TOKEN> ; j ++ ) { </a> 0
<a> if ( c [ j ] != 0 ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> k = j ; </a> 0
<a> if ( l < j ) { </a> 0
<a> l = j ; </a> 0
<a> } </a> 0
<a> for ( i = <RARE_TOKEN> ; i != 0 ; i -- ) { </a> 0
<a> if ( c [ i ] != 0 ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = i ; </a> 0
<a> if ( l > i ) { </a> 0
<a> l = i ; </a> 0
<a> } </a> 0
<a> m [ 0 ] = l ; </a> 0
<a> for ( <RARE_TOKEN> = 1 < < j ; j < i ; j ++ , <RARE_TOKEN> <RARE_TOKEN> 1 ) { </a> 0
<a> if ( ( <RARE_TOKEN> -= c [ j ] ) < 0 ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ( <RARE_TOKEN> -= c [ i ] ) < 0 ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> c [ i ] += <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ 1 ] = j = 0 ; </a> 0
<a> p = 1 ; </a> 0
<a> <RARE_TOKEN> = 2 ; </a> 0
<a> while ( -- i != 0 ) { </a> 0
<a> <RARE_TOKEN> [ <RARE_TOKEN> ] = j += c [ p ] ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> p ++ ; </a> 0
<a> } </a> 0
<a> i = 0 ; </a> 0
<a> p = 0 ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> if ( ( j = b [ <RARE_TOKEN> + p ] ) != 0 ) { </a> 0
<a> v [ <RARE_TOKEN> [ j ] ++ ] = i ; </a> 0
<a> } </a> 0
<a> p ++ ; </a> 0
<a> } while ( ++ i < n ) ; </a> 0
<a> n = <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = i = 0 ; </a> 0
<a> p = 0 ; </a> 0
<a> h = - 1 ; </a> 0
<a> w = - l ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = 0 ; </a> 0
<a> q = 0 ; </a> 0
<a> z = 0 ; </a> 0
<a> for ( ; k <= <RARE_TOKEN> ; k ++ ) { </a> 0
<a> a = c [ k ] ; </a> 0
<a> while ( a -- != 0 ) { </a> 0
<a> while ( k > w + l ) { </a> 0
<a> h ++ ; </a> 0
<a> w += l ; </a> 0
<a> z = <RARE_TOKEN> - w ; </a> 0
<a> z = z > l ? l : z ; </a> 0
<a> if ( ( f = 1 < < ( j = k - w ) ) > a + 1 ) { </a> 0
<a> f -= a + 1 ; </a> 0
<a> <RARE_TOKEN> = k ; </a> 0
<a> if ( j < z ) { </a> 0
<a> while ( ++ j < z ) { </a> 0
<a> if ( ( f <RARE_TOKEN> 1 ) <= c [ ++ <RARE_TOKEN> ] ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> f -= c [ <RARE_TOKEN> ] ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> z = 1 < < j ; </a> 0
<a> if ( <RARE_TOKEN> [ 0 ] + z > JZlib . <RARE_TOKEN> ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> [ h ] = q = <RARE_TOKEN> [ 0 ] ; </a> 0
<a> <RARE_TOKEN> [ 0 ] += z ; </a> 0
<a> if ( h != 0 ) { </a> 0
<a> <RARE_TOKEN> [ h ] = i ; </a> 0
<a> r [ 0 ] = ( byte ) j ; </a> 0
<a> r [ 1 ] = ( byte ) l ; </a> 0
<a> j = i > > > w - l ; </a> 0
<a> r [ 2 ] = q - <RARE_TOKEN> [ h - 1 ] - j ; </a> 0
<a> System . <RARE_TOKEN> ( r , 0 , <RARE_TOKEN> , ( <RARE_TOKEN> [ h - 1 ] + j ) * 3 , 3 ) ; </a> 0
<a> } else { </a> 0
<a> t [ 0 ] = q ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> r [ 1 ] = ( byte ) ( k - w ) ; </a> 0
<a> if ( p >= n ) { </a> 0
<a> r [ 0 ] = <RARE_TOKEN> + <RARE_TOKEN> ; </a> 0
<a> } else if ( v [ p ] < s ) { </a> 0
<a> r [ 0 ] = ( byte ) ( v [ p ] < <RARE_TOKEN> ? 0 : 32 + <RARE_TOKEN> ) ; </a> 0
<a> r [ 2 ] = v [ p ++ ] ; </a> 0
<a> } else { </a> 0
<a> r [ 0 ] = ( byte ) ( e [ v [ p ] - s ] + 16 + <RARE_TOKEN> ) ; </a> 0
<a> r [ 2 ] = d [ v [ p ++ ] - s ] ; </a> 0
<a> } </a> 0
<a> f = 1 < < k - w ; </a> 0
<a> for ( j = i > > > w ; j < z ; j += f ) { </a> 0
<a> System . <RARE_TOKEN> ( r , 0 , <RARE_TOKEN> , ( q + j ) * 3 , 3 ) ; </a> 0
<a> } </a> 0
<a> for ( j = 1 < < k - 1 ; ( i & j ) != 0 ; j <RARE_TOKEN> 1 ) { </a> 0
<a> i <RARE_TOKEN> j ; </a> 0
<a> } </a> 0
<a> i <RARE_TOKEN> j ; </a> 0
<a> <RARE_TOKEN> = ( 1 < < w ) - 1 ; </a> 0
<a> while ( ( i & <RARE_TOKEN> ) != <RARE_TOKEN> [ h ] ) { </a> 0
<a> h -- ; </a> 0
<a> w -= l ; </a> 0
<a> <RARE_TOKEN> = ( 1 < < w ) - 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> != 0 && <RARE_TOKEN> != 1 ? JZlib . <RARE_TOKEN> : JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( int [ ] c , </a> 0
<a> int [ ] <RARE_TOKEN> , </a> 0
<a> int [ ] <RARE_TOKEN> , </a> 0
<a> int [ ] <RARE_TOKEN> , </a> 0
<a> ZStream z </a> 0
<a> ) { </a> 0
<a> int result ; </a> 0
<a> <RARE_TOKEN> ( 19 ) ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = 0 ; </a> 0
<a> result = <RARE_TOKEN> ( c , 0 , 19 , 19 , null , null , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , v ) ; </a> 0
<a> if ( result == JZlib . <RARE_TOKEN> ) { </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> } else if ( result == JZlib . <RARE_TOKEN> || <RARE_TOKEN> [ 0 ] == 0 ) { </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> result = JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( int <RARE_TOKEN> , </a> 0
<a> int <RARE_TOKEN> , </a> 0
<a> int [ ] c , </a> 0
<a> int [ ] <RARE_TOKEN> , </a> 0
<a> int [ ] <RARE_TOKEN> , </a> 0
<a> int [ ] <RARE_TOKEN> , </a> 0
<a> int [ ] <RARE_TOKEN> , </a> 0
<a> int [ ] <RARE_TOKEN> , </a> 0
<a> ZStream z </a> 0
<a> ) { </a> 0
<a> int result ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = 0 ; </a> 0
<a> result = <RARE_TOKEN> ( c , 0 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , v ) ; </a> 0
<a> if ( result != JZlib . Z_OK || <RARE_TOKEN> [ 0 ] == 0 ) { </a> 0
<a> if ( result == JZlib . <RARE_TOKEN> ) { </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> } else if ( result != JZlib . <RARE_TOKEN> ) { </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> result = JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> result = <RARE_TOKEN> ( c , <RARE_TOKEN> , <RARE_TOKEN> , 0 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , v ) ; </a> 0
<a> if ( result != JZlib . Z_OK || <RARE_TOKEN> [ 0 ] == 0 && <RARE_TOKEN> > <RARE_TOKEN> ) { </a> 0
<a> if ( result == JZlib . <RARE_TOKEN> ) { </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> } else if ( result == JZlib . <RARE_TOKEN> ) { </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> result = JZlib . <RARE_TOKEN> ; </a> 0
<a> } else if ( result != JZlib . <RARE_TOKEN> ) { </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> tree <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> result = JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> static int <RARE_TOKEN> ( int [ ] <RARE_TOKEN> , </a> 0
<a> int [ ] <RARE_TOKEN> , </a> 0
<a> int [ ] [ ] <RARE_TOKEN> , </a> 0
<a> int [ ] [ ] <RARE_TOKEN> </a> 0
<a> ) { </a> 0
<a> <RARE_TOKEN> [ 0 ] = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> [ 0 ] = <RARE_TOKEN> ; </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new int [ 1 ] ; </a> 0
<a> v = new int [ <RARE_TOKEN> ] ; </a> 0
<a> c = new int [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> r = new int [ 3 ] ; </a> 0
<a> <RARE_TOKEN> = new int [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> = new int [ <RARE_TOKEN> + 1 ] ; </a> 0
<a> } else { </a> 0
<a> if ( v . length < <RARE_TOKEN> ) { </a> 0
<a> v = new int [ <RARE_TOKEN> ] ; </a> 0
<a> } else { </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> v [ i ] = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> + 1 ; i ++ ) { </a> 0
<a> c [ i ] = 0 ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < 3 ; i ++ ) { </a> 0
<a> r [ i ] = 0 ; </a> 0
<a> } </a> 0
<a> System . <RARE_TOKEN> ( c , 0 , <RARE_TOKEN> , 0 , <RARE_TOKEN> ) ; </a> 0
<a> System . <RARE_TOKEN> ( c , 0 , <RARE_TOKEN> , 0 , <RARE_TOKEN> + 1 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> . JZlib . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = 0 ; </a> 0
<a> private static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private static final int <RARE_TOKEN> = 3 ; </a> 0
<a> private static final int <RARE_TOKEN> = 4 ; </a> 0
<a> private static final int <RARE_TOKEN> = 5 ; </a> 0
<a> private static final int <RARE_TOKEN> = 6 ; </a> 0
<a> private static final int <RARE_TOKEN> = 7 ; </a> 0
<a> private static final int <RARE_TOKEN> = 8 ; </a> 0
<a> private static final int <RARE_TOKEN> = 9 ; </a> 0
<a> private static final int <RARE_TOKEN> = 10 ; </a> 0
<a> private static final int <RARE_TOKEN> = 11 ; </a> 0
<a> private static final int <RARE_TOKEN> = 12 ; </a> 0
<a> private static final int <RARE_TOKEN> = 13 ; </a> 0
<a> private static final int <RARE_TOKEN> = 14 ; </a> 0
<a> private static final int <RARE_TOKEN> = 15 ; </a> 0
<a> private static final int <RARE_TOKEN> = 16 ; </a> 0
<a> private static final int <RARE_TOKEN> = 17 ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = 19 ; </a> 0
<a> private static final int <RARE_TOKEN> = 20 ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final int <RARE_TOKEN> = 23 ; </a> 0
<a> private static final int <RARE_TOKEN> = 24 ; </a> 0
<a> private static final int <RARE_TOKEN> = 25 ; </a> 0
<a> private int mode ; </a> 0
<a> private int method ; </a> 0
<a> private final long [ ] <RARE_TOKEN> = new long [ 1 ] ; </a> 0
<a> private long <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ( ZStream z ) { </a> 0
<a> if ( z == null || z . istate == null ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> z . total_in = z . <RARE_TOKEN> = 0 ; </a> 0
<a> z . msg = null ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> z . istate . <RARE_TOKEN> . <RARE_TOKEN> ( z , null ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ZStream z ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( z ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ZStream z , int w , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> z . msg = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( w < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + w ) ; </a> 0
<a> } </a> 0
<a> if ( w < 8 || w > 15 ) { </a> 0
<a> <RARE_TOKEN> ( z ) ; </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = w ; </a> 0
<a> z . istate . <RARE_TOKEN> = new <RARE_TOKEN> ( </a> 0
<a> z , z . istate . <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ? null : this , </a> 0
<a> 1 < < w ) ; </a> 0
<a> <RARE_TOKEN> ( z ) ; </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( ZStream z , int f ) { </a> 0
<a> int r ; </a> 0
<a> int b ; </a> 0
<a> if ( z == null || z . istate == null || z . next_in == null ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> f = f == JZlib . <RARE_TOKEN> ? JZlib . <RARE_TOKEN> : JZlib . Z_OK ; </a> 0
<a> r = JZlib . <RARE_TOKEN> ; </a> 0
<a> while ( true ) { </a> 0
<a> switch ( z . istate . mode ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> if ( z . istate . <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> if ( ( z . next_in [ z . next_in_index ] & <RARE_TOKEN> ) != JZlib . <RARE_TOKEN> || </a> 0
<a> ( z . next_in [ z . next_in_index ] > > 4 ) + 8 > z . istate . <RARE_TOKEN> ) { </a> 0
<a> z . istate . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } else { </a> 0
<a> z . istate . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> if ( ( ( z . istate . method = z . next_in [ z . next_in_index ++ ] ) & <RARE_TOKEN> ) != JZlib . <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 5 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ( z . istate . method > > 4 ) + 8 > z . istate . <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> window <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 5 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> b = z . next_in [ z . next_in_index ++ ] & 0xff ; </a> 0
<a> if ( ( ( z . istate . method < < 8 ) + b ) <RARE_TOKEN> <RARE_TOKEN> != 0 ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> header <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 5 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ( b & JZlib . <RARE_TOKEN> ) == 0 ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> z . istate . <RARE_TOKEN> = ( z . next_in [ z . next_in_index ++ ] & 0xff ) < < 24 & <RARE_TOKEN> ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> z . istate . <RARE_TOKEN> += ( z . next_in [ z . next_in_index ++ ] & 0xff ) < < 16 & <RARE_TOKEN> ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> z . istate . <RARE_TOKEN> += ( z . next_in [ z . next_in_index ++ ] & 0xff ) < < 8 & <RARE_TOKEN> ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> z . istate . <RARE_TOKEN> += z . next_in [ z . next_in_index ++ ] & <RARE_TOKEN> ; </a> 0
<a> z . <RARE_TOKEN> = z . istate . <RARE_TOKEN> ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 0 ; </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> int <RARE_TOKEN> = z . <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> r = z . istate . <RARE_TOKEN> . <RARE_TOKEN> ( z , r ) ; </a> 0
<a> if ( r == JZlib . <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 0 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( r == JZlib . Z_OK ) { </a> 0
<a> r = f ; </a> 0
<a> } </a> 0
<a> if ( r != JZlib . <RARE_TOKEN> ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . istate . <RARE_TOKEN> . <RARE_TOKEN> ( z , z . istate . <RARE_TOKEN> ) ; </a> 0
<a> } finally { </a> 0
<a> int <RARE_TOKEN> = z . <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> ; </a> 0
<a> z . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( z . <RARE_TOKEN> , z . <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( z . istate . <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } else if ( z . istate . <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> } else if ( z . istate . <RARE_TOKEN> == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 4 ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } else { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 0 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> z . istate . <RARE_TOKEN> = ( z . next_in [ z . next_in_index ++ ] & 0xff ) < < 24 & <RARE_TOKEN> ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> z . istate . <RARE_TOKEN> += ( z . next_in [ z . next_in_index ++ ] & 0xff ) < < 16 & <RARE_TOKEN> ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> z . istate . <RARE_TOKEN> += ( z . next_in [ z . next_in_index ++ ] & 0xff ) < < 8 & <RARE_TOKEN> ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> z . istate . <RARE_TOKEN> += z . next_in [ z . next_in_index ++ ] & <RARE_TOKEN> ; </a> 0
<a> if ( ( int ) z . istate . <RARE_TOKEN> [ 0 ] != ( int ) z . istate . <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> data <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 5 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> if ( ( z . next_in [ z . next_in_index ++ ] & 0xff ) != <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 5 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> if ( ( z . next_in [ z . next_in_index ++ ] & 0xff ) != <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 5 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> if ( ( z . next_in [ z . next_in_index ++ ] & 0xff ) != JZlib . <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 5 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> <RARE_TOKEN> = z . next_in [ z . next_in_index ++ ] & 0xff ; </a> 0
<a> if ( ( <RARE_TOKEN> & <RARE_TOKEN> ) != 0 ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 5 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 6 ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> while ( <RARE_TOKEN> > 0 ) { </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> z . next_in_index ++ ; </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 2 ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( ( <RARE_TOKEN> & 4 ) != 0 ) { </a> 0
<a> while ( <RARE_TOKEN> > 0 ) { </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> <RARE_TOKEN> |= ( z . next_in [ z . next_in_index ++ ] & 0xff ) < < ( 1 - <RARE_TOKEN> ) * 8 ; </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> while ( <RARE_TOKEN> > 0 ) { </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> z . next_in_index ++ ; </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( ( <RARE_TOKEN> & 8 ) != 0 ) { </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> } while ( z . next_in [ z . next_in_index ++ ] != 0 ) ; </a> 0
<a> } </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( ( <RARE_TOKEN> & 16 ) != 0 ) { </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> } while ( z . next_in [ z . next_in_index ++ ] != 0 ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 2 ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> if ( ( <RARE_TOKEN> & 2 ) != 0 ) { </a> 0
<a> while ( <RARE_TOKEN> > 0 ) { </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> z . next_in_index ++ ; </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> while ( <RARE_TOKEN> > 0 ) { </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> z . istate . <RARE_TOKEN> |= ( z . next_in [ z . next_in_index ++ ] & 0xff ) < < ( 3 - <RARE_TOKEN> ) * 8 ; </a> 0
<a> } </a> 0
<a> if ( z . <RARE_TOKEN> != z . istate . <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 5 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 4 ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> while ( <RARE_TOKEN> > 0 ) { </a> 0
<a> if ( z . avail_in == 0 ) { </a> 0
<a> return r ; </a> 0
<a> } </a> 0
<a> r = f ; </a> 0
<a> z . avail_in -- ; </a> 0
<a> z . total_in ++ ; </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> z . istate . <RARE_TOKEN> |= ( z . next_in [ z . next_in_index ++ ] & 0xff ) < < ( 3 - <RARE_TOKEN> ) * 8 ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != z . istate . <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . msg = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 5 ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static int <RARE_TOKEN> ( ZStream z , byte [ ] dictionary , int <RARE_TOKEN> ) { </a> 0
<a> int index = 0 ; </a> 0
<a> int length = <RARE_TOKEN> ; </a> 0
<a> if ( z == null || z . istate == null || z . istate . mode != <RARE_TOKEN> ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , dictionary , 0 , <RARE_TOKEN> ) != z . <RARE_TOKEN> ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> z . <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( 0 , null , 0 , 0 ) ; </a> 0
<a> if ( length >= 1 < < z . istate . <RARE_TOKEN> ) { </a> 0
<a> length = ( 1 < < z . istate . <RARE_TOKEN> ) - 1 ; </a> 0
<a> index = <RARE_TOKEN> - length ; </a> 0
<a> } </a> 0
<a> z . istate . <RARE_TOKEN> . <RARE_TOKEN> ( dictionary , index , length ) ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> private static final byte [ ] <RARE_TOKEN> = { ( byte ) 0 , ( byte ) 0 , ( byte ) 0xff , ( byte ) 0xff } ; </a> 0
<a> int <RARE_TOKEN> ( ZStream z ) { </a> 0
<a> int n ; </a> 0
<a> int p ; </a> 0
<a> int m ; </a> 0
<a> long r , w ; </a> 0
<a> if ( z == null || z . istate == null ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( z . istate . mode != <RARE_TOKEN> ) { </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> z . istate . <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> if ( ( n = z . avail_in ) == 0 ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> p = z . next_in_index ; </a> 0
<a> m = z . istate . <RARE_TOKEN> ; </a> 0
<a> while ( n != 0 && m < 4 ) { </a> 0
<a> if ( z . next_in [ p ] == <RARE_TOKEN> [ m ] ) { </a> 0
<a> m ++ ; </a> 0
<a> } else if ( z . next_in [ p ] != 0 ) { </a> 0
<a> m = 0 ; </a> 0
<a> } else { </a> 0
<a> m = 4 - m ; </a> 0
<a> } </a> 0
<a> p ++ ; </a> 0
<a> n -- ; </a> 0
<a> } </a> 0
<a> z . total_in += p - z . next_in_index ; </a> 0
<a> z . next_in_index = p ; </a> 0
<a> z . avail_in = n ; </a> 0
<a> z . istate . <RARE_TOKEN> = m ; </a> 0
<a> if ( m != 4 ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> r = z . total_in ; </a> 0
<a> w = z . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( z ) ; </a> 0
<a> z . total_in = r ; </a> 0
<a> z . <RARE_TOKEN> = w ; </a> 0
<a> z . istate . mode = <RARE_TOKEN> ; </a> 0
<a> return JZlib . Z_OK ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> public final class JZlib { </a> 0
<a> public static final <RARE_TOKEN> < ? > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public static final <RARE_TOKEN> < ? > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public static final <RARE_TOKEN> < ? > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public static final <RARE_TOKEN> < ? > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public static final int <RARE_TOKEN> = 0 ; </a> 0
<a> public static final int <RARE_TOKEN> = 1 ; </a> 0
<a> public static final int <RARE_TOKEN> = 9 ; </a> 0
<a> public static final int <RARE_TOKEN> = - 1 ; </a> 0
<a> public static final int <RARE_TOKEN> = 1 ; </a> 0
<a> public static final int <RARE_TOKEN> = 2 ; </a> 0
<a> public static final int <RARE_TOKEN> = 0 ; </a> 0
<a> public static final int <RARE_TOKEN> = 0 ; </a> 0
<a> public static final int <RARE_TOKEN> = 1 ; </a> 0
<a> public static final int <RARE_TOKEN> = 2 ; </a> 0
<a> public static final int <RARE_TOKEN> = 3 ; </a> 0
<a> public static final int <RARE_TOKEN> = 4 ; </a> 0
<a> public static final int Z_OK = 0 ; </a> 0
<a> public static final int <RARE_TOKEN> = 1 ; </a> 0
<a> public static final int <RARE_TOKEN> = 2 ; </a> 0
<a> public static final int <RARE_TOKEN> = - 1 ; </a> 0
<a> public static final int <RARE_TOKEN> = - 2 ; </a> 0
<a> public static final int <RARE_TOKEN> = - 3 ; </a> 0
<a> public static final int <RARE_TOKEN> = - 4 ; </a> 0
<a> public static final int <RARE_TOKEN> = - 5 ; </a> 0
<a> public static final int <RARE_TOKEN> = - 6 ; </a> 0
<a> static final int <RARE_TOKEN> = 8 ; </a> 0
<a> static final int <RARE_TOKEN> = 9 ; </a> 0
<a> static final int <RARE_TOKEN> = 8 ; </a> 0
<a> static final int <RARE_TOKEN> = 15 ; </a> 0
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final int <RARE_TOKEN> = 15 ; </a> 0
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final int <RARE_TOKEN> = 19 ; </a> 0
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> static final int <RARE_TOKEN> = 29 ; </a> 0
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> + 1 + <RARE_TOKEN> ; </a> 0
<a> static final int <RARE_TOKEN> = 2 * <RARE_TOKEN> + 1 ; </a> 0
<a> static final int <RARE_TOKEN> = 7 ; </a> 0
<a> enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> </a> 0
<a> } </a> 0
<a> private JZlib ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> static final int [ ] <RARE_TOKEN> = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 2 , </a> 0
<a> 2 , 2 , 2 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 0 } ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { 0 , 0 , 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , </a> 0
<a> 5 , 6 , 6 , 7 , 7 , 8 , 8 , 9 , 9 , 10 , 10 , 11 , 11 , 12 , 12 , 13 , 13 } ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , </a> 0
<a> 0 , 0 , 0 , 2 , 3 , 7 } ; </a> 0
<a> static final byte [ ] <RARE_TOKEN> = { 16 , 17 , <RARE_TOKEN> , 0 , 8 , 7 , 9 , 6 , 10 , 5 , 11 , 4 , </a> 0
<a> 12 , 3 , 13 , 2 , 14 , 1 , 15 } ; </a> 0
<a> static final byte [ ] <RARE_TOKEN> = { 0 , 1 , 2 , 3 , 4 , 4 , 5 , 5 , 6 , 6 , 6 , 6 , 7 , </a> 0
<a> 7 , 7 , 7 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 10 , 10 , </a> 0
<a> 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 11 , 11 , 11 , </a> 0
<a> 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 12 , 12 , 12 , 12 , </a> 0
<a> 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , </a> 0
<a> 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 13 , 13 , 13 , 13 , 13 , 13 , </a> 0
<a> 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , </a> 0
<a> 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , </a> 0
<a> 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , </a> 0
<a> 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , </a> 0
<a> 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , </a> 0
<a> 14 , 14 , 14 , 14 , 14 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , </a> 0
<a> 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , </a> 0
<a> 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , </a> 0
<a> 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , 15 , </a> 0
<a> 15 , 0 , 0 , 16 , 17 , <RARE_TOKEN> , <RARE_TOKEN> , 19 , 19 , 20 , 20 , 20 , 20 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 24 , </a> 0
<a> 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 25 , 25 , </a> 0
<a> 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 26 , 26 , 26 , </a> 0
<a> 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , </a> 0
<a> 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 27 , 27 , 27 , 27 , 27 , </a> 0
<a> 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , </a> 0
<a> 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , </a> 0
<a> 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , </a> 0
<a> 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , </a> 0
<a> 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , 28 , </a> 0
<a> 28 , 28 , 28 , 28 , 28 , 28 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , </a> 0
<a> 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , </a> 0
<a> 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , </a> 0
<a> 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , </a> 0
<a> 29 , 29 } ; </a> 0
<a> static final byte [ ] <RARE_TOKEN> = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 8 , 9 , 9 , </a> 0
<a> 10 , 10 , 11 , 11 , 12 , 12 , 12 , 12 , 13 , 13 , 13 , 13 , 14 , 14 , 14 , 14 , 15 , </a> 0
<a> 15 , 15 , 15 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 16 , 17 , 17 , 17 , 17 , 17 , 17 , </a> 0
<a> 17 , 17 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 19 , 19 , 19 , 19 , 19 , 19 , 19 , </a> 0
<a> 19 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 23 , 23 , </a> 0
<a> 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 24 , 24 , 24 , </a> 0
<a> 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , </a> 0
<a> 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 25 , 25 , 25 , 25 , 25 , </a> 0
<a> 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , </a> 0
<a> 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , </a> 0
<a> 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , </a> 0
<a> 26 , 26 , 26 , 26 , 26 , 26 , 26 , 26 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , </a> 0
<a> 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , 27 , </a> 0
<a> 27 , 27 , 27 , 27 , 27 , 28 } ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 , 12 , 14 , </a> 0
<a> 16 , 20 , 24 , 28 , 32 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 80 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0 } ; </a> 0
<a> static final int [ ] <RARE_TOKEN> = { 0 , 1 , 2 , 3 , 4 , 6 , 8 , 12 , 16 , 24 , 32 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> } ; </a> 0
<a> static int <RARE_TOKEN> ( int dist ) { </a> 0
<a> return dist < <RARE_TOKEN> ? <RARE_TOKEN> [ dist ] : <RARE_TOKEN> [ <RARE_TOKEN> + ( dist > > > 7 ) ] ; </a> 0
<a> } </a> 0
<a> short [ ] <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> s ) { </a> 0
<a> short [ ] tree = <RARE_TOKEN> ; </a> 0
<a> short [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> int [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> int h ; </a> 0
<a> int n , m ; </a> 0
<a> int bits ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> short f ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> for ( bits = 0 ; bits <= JZlib . <RARE_TOKEN> ; bits ++ ) { </a> 0
<a> s . <RARE_TOKEN> [ bits ] = 0 ; </a> 0
<a> } </a> 0
<a> tree [ s . <RARE_TOKEN> [ s . <RARE_TOKEN> ] * 2 + 1 ] = 0 ; </a> 0
<a> for ( h = s . <RARE_TOKEN> + 1 ; h < JZlib . <RARE_TOKEN> ; h ++ ) { </a> 0
<a> n = s . <RARE_TOKEN> [ h ] ; </a> 0
<a> bits = tree [ tree [ n * 2 + 1 ] * 2 + 1 ] + 1 ; </a> 0
<a> if ( bits > <RARE_TOKEN> ) { </a> 0
<a> bits = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> tree [ n * 2 + 1 ] = ( short ) bits ; </a> 0
<a> if ( n > <RARE_TOKEN> ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> s . <RARE_TOKEN> [ bits ] ++ ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> if ( n >= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> [ n - <RARE_TOKEN> ] ; </a> 0
<a> } </a> 0
<a> f = tree [ n * 2 ] ; </a> 0
<a> s . <RARE_TOKEN> += f * ( bits + <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> s . <RARE_TOKEN> += f * ( <RARE_TOKEN> [ n * 2 + 1 ] + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> bits = <RARE_TOKEN> - 1 ; </a> 0
<a> while ( s . <RARE_TOKEN> [ bits ] == 0 ) { </a> 0
<a> bits -- ; </a> 0
<a> } </a> 0
<a> s . <RARE_TOKEN> [ bits ] -- ; </a> 0
<a> s . <RARE_TOKEN> [ bits + 1 ] += 2 ; </a> 0
<a> s . <RARE_TOKEN> [ <RARE_TOKEN> ] -- ; </a> 0
<a> <RARE_TOKEN> -= 2 ; </a> 0
<a> } while ( <RARE_TOKEN> > 0 ) ; </a> 0
<a> for ( bits = <RARE_TOKEN> ; bits != 0 ; bits -- ) { </a> 0
<a> n = s . <RARE_TOKEN> [ bits ] ; </a> 0
<a> while ( n != 0 ) { </a> 0
<a> m = s . <RARE_TOKEN> [ -- h ] ; </a> 0
<a> if ( m > <RARE_TOKEN> ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> if ( tree [ m * 2 + 1 ] != bits ) { </a> 0
<a> s . <RARE_TOKEN> += ( ( long ) bits - ( long ) tree [ m * 2 + 1 ] ) * </a> 1
<a> tree [ m * 2 ] ; </a> 0
<a> tree [ m * 2 + 1 ] = ( short ) bits ; </a> 0
<a> } </a> 0
<a> n -- ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> s ) { </a> 0
<a> short [ ] tree = <RARE_TOKEN> ; </a> 0
<a> short [ ] <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> int n , m ; </a> 0
<a> int <RARE_TOKEN> = - 1 ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> s . <RARE_TOKEN> = 0 ; </a> 0
<a> s . <RARE_TOKEN> = JZlib . <RARE_TOKEN> ; </a> 0
<a> for ( n = 0 ; n < <RARE_TOKEN> ; n ++ ) { </a> 0
<a> if ( tree [ n * 2 ] != 0 ) { </a> 0
<a> s . <RARE_TOKEN> [ ++ s . <RARE_TOKEN> ] = <RARE_TOKEN> = n ; </a> 0
<a> s . <RARE_TOKEN> [ n ] = 0 ; </a> 0
<a> } else { </a> 0
<a> tree [ n * 2 + 1 ] = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> while ( s . <RARE_TOKEN> < 2 ) { </a> 0
<a> <RARE_TOKEN> = s . <RARE_TOKEN> [ ++ s . <RARE_TOKEN> ] = <RARE_TOKEN> < 2 ? ++ <RARE_TOKEN> : 0 ; </a> 0
<a> tree [ <RARE_TOKEN> * 2 ] = 1 ; </a> 0
<a> s . <RARE_TOKEN> [ <RARE_TOKEN> ] = 0 ; </a> 0
<a> s . <RARE_TOKEN> -- ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> s . <RARE_TOKEN> -= <RARE_TOKEN> [ <RARE_TOKEN> * 2 + 1 ] ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( n = s . <RARE_TOKEN> / 2 ; n >= 1 ; n -- ) { </a> 0
<a> s . <RARE_TOKEN> ( tree , n ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> n = s . <RARE_TOKEN> [ 1 ] ; </a> 0
<a> s . <RARE_TOKEN> [ 1 ] = s . <RARE_TOKEN> [ s . <RARE_TOKEN> -- ] ; </a> 0
<a> s . <RARE_TOKEN> ( tree , 1 ) ; </a> 0
<a> m = s . <RARE_TOKEN> [ 1 ] ; </a> 0
<a> s . <RARE_TOKEN> [ -- s . <RARE_TOKEN> ] = n ; </a> 0
<a> s . <RARE_TOKEN> [ -- s . <RARE_TOKEN> ] = m ; </a> 0
<a> tree [ <RARE_TOKEN> * 2 ] = ( short ) ( tree [ n * 2 ] + tree [ m * 2 ] ) ; </a> 0
<a> s . <RARE_TOKEN> [ <RARE_TOKEN> ] = ( byte ) ( Math . <RARE_TOKEN> ( s . <RARE_TOKEN> [ n ] , s . <RARE_TOKEN> [ m ] ) + 1 ) ; </a> 0
<a> tree [ n * 2 + 1 ] = tree [ m * 2 + 1 ] = ( short ) <RARE_TOKEN> ; </a> 0
<a> s . <RARE_TOKEN> [ 1 ] = <RARE_TOKEN> ++ ; </a> 0
<a> s . <RARE_TOKEN> ( tree , 1 ) ; </a> 0
<a> } while ( s . <RARE_TOKEN> >= 2 ) ; </a> 0
<a> s . <RARE_TOKEN> [ -- s . <RARE_TOKEN> ] = s . <RARE_TOKEN> [ 1 ] ; </a> 0
<a> <RARE_TOKEN> ( s ) ; </a> 0
<a> <RARE_TOKEN> ( tree , <RARE_TOKEN> , s . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( short [ ] tree , </a> 0
<a> int <RARE_TOKEN> , </a> 0
<a> short [ ] <RARE_TOKEN> </a> 0
<a> ) { </a> 0
<a> short [ ] <RARE_TOKEN> = new short [ JZlib . <RARE_TOKEN> + 1 ] ; </a> 0
<a> short code = 0 ; </a> 0
<a> int bits ; </a> 0
<a> int n ; </a> 0
<a> for ( bits = 1 ; bits <= JZlib . <RARE_TOKEN> ; bits ++ ) { </a> 0
<a> <RARE_TOKEN> [ bits ] = code = ( short ) ( code + <RARE_TOKEN> [ bits - 1 ] < < 1 ) ; </a> 0
<a> } </a> 0
<a> for ( n = 0 ; n <= <RARE_TOKEN> ; n ++ ) { </a> 0
<a> int len = tree [ n * 2 + 1 ] ; </a> 0
<a> if ( len == 0 ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> tree [ n * 2 ] = ( short ) <RARE_TOKEN> ( <RARE_TOKEN> [ len ] ++ , len ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static int <RARE_TOKEN> ( int code , </a> 0
<a> int len </a> 0
<a> ) { </a> 0
<a> int res = 0 ; </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> res |= code & 1 ; </a> 0
<a> code <RARE_TOKEN> 1 ; </a> 0
<a> res <RARE_TOKEN> 1 ; </a> 0
<a> } while ( -- len > 0 ) ; </a> 0
<a> return res > > > 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> . JZlib . <RARE_TOKEN> ; </a> 0
<a> public final class ZStream { </a> 0
<a> private static final InternalLogger logger = </a> 0
<a> InternalLoggerFactory . getInstance ( ZStream . class ) ; </a> 0
<a> public byte [ ] next_in ; </a> 0
<a> public int next_in_index ; </a> 0
<a> public int avail_in ; </a> 0
<a> public long total_in ; </a> 0
<a> public byte [ ] <RARE_TOKEN> ; </a> 0
<a> public int <RARE_TOKEN> ; </a> 0
<a> public int <RARE_TOKEN> ; </a> 0
<a> public long <RARE_TOKEN> ; </a> 0
<a> public String msg ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> istate ; </a> 0
<a> long <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( JZlib . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( <RARE_TOKEN> < ? > <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( JZlib . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( int w ) { </a> 0
<a> return <RARE_TOKEN> ( w , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( int w , @ SuppressWarnings ( <RARE_TOKEN> ) <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> istate = new <RARE_TOKEN> ( ) ; </a> 0
<a> return istate . <RARE_TOKEN> ( this , w , ( <RARE_TOKEN> ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( int f ) { </a> 0
<a> if ( istate == null ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return istate . <RARE_TOKEN> ( this , f ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> if ( istate == null ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = istate . <RARE_TOKEN> ( this ) ; </a> 0
<a> istate = null ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> if ( istate == null ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return istate . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( byte [ ] dictionary , int <RARE_TOKEN> ) { </a> 0
<a> if ( istate == null ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this , dictionary , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( int level ) { </a> 0
<a> return <RARE_TOKEN> ( level , JZlib . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( int level , <RARE_TOKEN> < ? > <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( level , JZlib . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( int level , int bits ) { </a> 0
<a> return <RARE_TOKEN> ( level , bits , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( int level , int bits , <RARE_TOKEN> < ? > <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( level , bits , JZlib . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( int level , int bits , int memLevel , @ SuppressWarnings ( <RARE_TOKEN> ) <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this , level , bits , memLevel , ( <RARE_TOKEN> ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( int flush ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this , flush ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( int level , int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this , level , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( byte [ ] dictionary , int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return JZlib . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( this , dictionary , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> int len = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> if ( len > <RARE_TOKEN> ) { </a> 0
<a> len = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( len == 0 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> . length <= <RARE_TOKEN> . <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> . length <= <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> . length < <RARE_TOKEN> . <RARE_TOKEN> + len || </a> 0
<a> <RARE_TOKEN> . length < <RARE_TOKEN> + len ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> . <RARE_TOKEN> . length + ", " + </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> + ", " + <RARE_TOKEN> . length + ", " + </a> 0
<a> <RARE_TOKEN> + ", " + len ) ; </a> 0
<a> logger . debug ( <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> System . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , len ) ; </a> 0
<a> <RARE_TOKEN> += len ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> += len ; </a> 0
<a> <RARE_TOKEN> += len ; </a> 0
<a> <RARE_TOKEN> -= len ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> -= len ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> ( byte [ ] buf , int start , int size ) { </a> 0
<a> int len = avail_in ; </a> 0
<a> if ( len > size ) { </a> 0
<a> len = size ; </a> 0
<a> } </a> 0
<a> if ( len == 0 ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> avail_in -= len ; </a> 0
<a> switch ( <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , next_in , next_in_index , len ) ; </a> 0
<a> break ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , next_in , next_in_index , len ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> System . <RARE_TOKEN> ( next_in , next_in_index , buf , start , len ) ; </a> 0
<a> next_in_index += len ; </a> 0
<a> total_in += len ; </a> 0
<a> return len ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> next_in = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> msg = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal . <RARE_TOKEN> ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import static org . <RARE_TOKEN> . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Exception e = new Exception ( ) ; </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> expect ( mock . isDebugEnabled ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> assertTrue ( logger . isDebugEnabled ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> mock . trace ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . trace ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> mock . trace ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . trace ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> mock . debug ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . debug ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> mock . debug ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . debug ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> mock . info ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . info ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> mock . info ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . info ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> mock . warn ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . warn ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> mock . warn ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . warn ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> mock . error ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . error ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . commons . logging . Log mock = </a> 0
<a> createStrictMock ( org . apache . commons . logging . Log . class ) ; </a> 0
<a> mock . error ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . error ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import static org . <RARE_TOKEN> . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import org . junit . <RARE_TOKEN> ; </a> 0
<a> import org . junit . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Exception e = new Exception ( ) ; </a> 0
<a> private InternalLoggerFactory <RARE_TOKEN> ; </a> 0
<a> private InternalLogger mock ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public void init ( ) { </a> 0
<a> <RARE_TOKEN> = InternalLoggerFactory . <RARE_TOKEN> ( ) ; </a> 0
<a> InternalLoggerFactory <RARE_TOKEN> = <RARE_TOKEN> ( InternalLoggerFactory . class ) ; </a> 0
<a> mock = createStrictMock ( InternalLogger . class ) ; </a> 0
<a> expect ( <RARE_TOKEN> . newInstance ( <RARE_TOKEN> ) ) . andReturn ( mock ) . <RARE_TOKEN> ( ) ; </a> 0
<a> replay ( <RARE_TOKEN> ) ; </a> 0
<a> InternalLoggerFactory . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public void destroy ( ) { </a> 0
<a> <RARE_TOKEN> ( mock ) ; </a> 0
<a> InternalLoggerFactory . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = NullPointerException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> InternalLoggerFactory . <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( mock , InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> InternalLoggerFactory . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> InternalLogger one = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> InternalLogger <RARE_TOKEN> = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . getClass ( ) ) ; </a> 0
<a> assertNotNull ( one ) ; </a> 0
<a> assertNotNull ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( one , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> expect ( mock . isDebugEnabled ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( logger . isDebugEnabled ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> mock . trace ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> logger . trace ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> mock . trace ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> logger . trace ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> mock . debug ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> logger . debug ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> mock . debug ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> logger . debug ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> mock . info ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> logger . info ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> mock . info ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> logger . info ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> mock . warn ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> logger . warn ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> mock . warn ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> logger . warn ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> mock . error ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> logger . error ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> mock . error ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> logger . error ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( ) . newInstance ( "foo" ) ; </a> 0
<a> assertTrue ( logger instanceof <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( "foo" , logger . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import static org . <RARE_TOKEN> . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Exception e = new Exception ( ) ; </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> expect ( mock . isDebugEnabled ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . isDebugEnabled ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> mock . trace ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . trace ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> mock . trace ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . trace ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> mock . debug ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . debug ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> mock . debug ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . debug ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> mock . info ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . info ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> mock . info ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . info ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> mock . warn ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . warn ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> mock . warn ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . warn ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> mock . error ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . error ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . jboss . logging . Logger mock = </a> 0
<a> createStrictMock ( org . jboss . logging . Logger . class ) ; </a> 0
<a> mock . error ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . error ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( ) . newInstance ( "foo" ) ; </a> 0
<a> assertTrue ( logger instanceof <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( "foo" , logger . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import static org . <RARE_TOKEN> . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import java . util . logging . Level ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Exception e = new Exception ( ) ; </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> assertTrue ( logger . isDebugEnabled ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> , "foo" , null , "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . trace ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> , "foo" , null , "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . trace ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> , "foo" , null , "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . debug ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> , "foo" , null , "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . debug ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> , "foo" , null , "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . info ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> , "foo" , null , "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . info ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> , "foo" , null , "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . warn ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> , "foo" , null , "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . warn ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> , "foo" , null , "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . error ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> java . util . logging . Logger mock = </a> 0
<a> createStrictMock ( java . util . logging . Logger . class ) ; </a> 0
<a> mock . <RARE_TOKEN> ( Level . <RARE_TOKEN> , "foo" , null , "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock , "foo" ) ; </a> 0
<a> logger . error ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( ) . newInstance ( "foo" ) ; </a> 0
<a> assertTrue ( logger instanceof <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( "foo" , logger . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import static org . <RARE_TOKEN> . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Exception e = new Exception ( ) ; </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> expect ( mock . isDebugEnabled ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . isDebugEnabled ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> mock . trace ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . trace ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> mock . trace ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . trace ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> mock . debug ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . debug ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> mock . debug ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . debug ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> mock . info ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . info ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> mock . info ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . info ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> mock . warn ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . warn ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> mock . warn ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . warn ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> mock . error ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . error ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . apache . <RARE_TOKEN> . Logger mock = </a> 0
<a> createStrictMock ( org . apache . <RARE_TOKEN> . Logger . class ) ; </a> 0
<a> mock . error ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . error ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( ) . newInstance ( "foo" ) ; </a> 0
<a> assertTrue ( logger instanceof <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( "foo" , logger . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . logging ; </a> 0
<a> import static org . <RARE_TOKEN> . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static final Exception e = new Exception ( ) ; </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> expect ( mock . isDebugEnabled ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . isDebugEnabled ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> expect ( mock . <RARE_TOKEN> ( ) ) . andReturn ( true ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> assertTrue ( logger . <RARE_TOKEN> ( ) ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> mock . trace ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . trace ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> mock . trace ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . trace ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> mock . debug ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . debug ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> mock . debug ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . debug ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> mock . info ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . info ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> mock . info ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . info ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> mock . warn ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . warn ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> mock . warn ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . warn ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> mock . error ( "a" ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . error ( "a" ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> org . slf4j . Logger mock = </a> 0
<a> createStrictMock ( org . slf4j . Logger . class ) ; </a> 0
<a> mock . error ( "a" , e ) ; </a> 0
<a> replay ( mock ) ; </a> 0
<a> InternalLogger logger = new <RARE_TOKEN> ( mock ) ; </a> 0
<a> logger . error ( "a" , e ) ; </a> 0
<a> verify ( mock ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<a> import static org . junit . Assert . assertEquals ; </a> 1
<a> import static org . junit . Assert . assertNotNull ; </a> 1
<a> import static org . junit . Assert . <RARE_TOKEN> ; </a> 1
<a> import static org . junit . Assert . assertNull ; </a> 1
<a> import static org . junit . Assert . assertSame ; </a> 1
<a> import org . junit . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> map ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> this . map = new <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assertNotNull ( this . map ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> < String > key = new <RARE_TOKEN> < String > ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> one = this . map . <RARE_TOKEN> ( key ) ; </a> 1
<a> assertSame ( one , this . map . <RARE_TOKEN> ( key ) ) ; </a> 1
<a> one . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertSame ( one . get ( ) , <RARE_TOKEN> ) ; </a> 1
<a> one . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( one . get ( ) , <RARE_TOKEN> ) ; </a> 1
<a> one . remove ( ) ; </a> 0
<a> assertNull ( one . get ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> < Integer > key = new <RARE_TOKEN> < Integer > ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> one = this . map . <RARE_TOKEN> ( key ) ; </a> 1
<a> assertSame ( one , this . map . <RARE_TOKEN> ( key ) ) ; </a> 1
<a> one . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> assertEquals ( one . get ( ) , <RARE_TOKEN> ) ; </a> 1
<a> one . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> <RARE_TOKEN> ( one . get ( ) , 1 ) ; </a> 1
<a> one . remove ( ) ; </a> 0
<a> assertNull ( one . get ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util ; </a> 0
<a> import java . util . ArrayList ; </a> 1
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 1
<a> import static org . junit . Assert . assertFalse ; </a> 1
<a> import static org . junit . Assert . <RARE_TOKEN> ; </a> 1
<a> import static org . junit . Assert . assertTrue ; </a> 1
<a> import static org . junit . Assert . assertSame ; </a> 1
<a> import org . junit . <RARE_TOKEN> ; </a> 1
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> { </a> 1
<a> private ConcurrentHashMap < String , Boolean > names ; </a> 1
<a> public <RARE_TOKEN> <RARE_TOKEN> ( String name ) { </a> 1
<a> return new <RARE_TOKEN> ( names , name ) ; </a> 1
<a> } </a> 1
<a> @ <RARE_TOKEN> </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> this . names = new ConcurrentHashMap < String , Boolean > ( ) ; </a> 1
<a> } </a> 1
<a> @ Test ( expected = NullPointerException . class ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( null , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Test ( expected = NullPointerException . class ) </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( this . names , null ) ; </a> 1
<a> } </a> 1
<a> @ Test </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( this . names , <RARE_TOKEN> <RARE_TOKEN> , 2 , 5 , new Object ( ) ) ; </a> 1
<a> } </a> 1
<a> @ Test </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> assertTrue ( this . names . get ( <RARE_TOKEN> ) ) ; </a> 1
<a> assertTrue ( this . names . get ( <RARE_TOKEN> ) == null ) ; </a> 1
<a> } </a> 1
<a> @ Test </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( IllegalArgumentException ex ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> } </a> 1
<a> assertTrue ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Test </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> one = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( one . id ( ) , <RARE_TOKEN> . id ( ) ) ; </a> 1
<a> ArrayList < <RARE_TOKEN> > <RARE_TOKEN> = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 1
<a> for ( int index = 0 ; index < <RARE_TOKEN> ; index ++ ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> + index ) ; </a> 1
<a> <RARE_TOKEN> . add ( <RARE_TOKEN> ) ; </a> 1
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 1
<a> if ( ! <RARE_TOKEN> . name ( ) . equals ( <RARE_TOKEN> . name ( ) ) ) { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> . hashCode ( ) , <RARE_TOKEN> . hashCode ( ) ) ; </a> 1
<a> assertFalse ( <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> . toString ( ) , <RARE_TOKEN> . toString ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Test </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> one = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> ConcurrentHashMap < String , Boolean > <RARE_TOKEN> = new ConcurrentHashMap < String , Boolean > ( ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> assertSame ( one . <RARE_TOKEN> ( one ) , 0 ) ; </a> 1
<a> assertSame ( one . <RARE_TOKEN> ( <RARE_TOKEN> ) , - 5 ) ; </a> 1
<a> assertSame ( one . <RARE_TOKEN> ( <RARE_TOKEN> ) , - 1 ) ; </a> 1
<a> assertSame ( <RARE_TOKEN> . <RARE_TOKEN> ( one ) , 1 ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . util . internal ; </a> 0
<a> import static org . junit . Assert . assertNotNull ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assertNotNull ( StringUtil . NEWLINE ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( int port ) { </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 0
<a> public void run ( ) throws Exception { </a> 1
<a> ServerBootstrap b = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( port ) </a> 0
<a> . <RARE_TOKEN> ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 1
<a> ch . pipeline ( ) . addLast ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> ChannelFuture f = b . bind ( ) . sync ( ) ; </a> 0
<a> f . channel ( ) . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> int port ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 1
<a> port = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import java . util . logging . Level ; </a> 0
<a> import java . util . logging . Logger ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private static final Logger logger = Logger . getLogger ( </a> 0
<a> <RARE_TOKEN> . class . getName ( ) ) ; </a> 1
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx , ByteBuf in ) </a> 1
<a> throws Exception { </a> 1
<a> in . clear ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , </a> 1
<a> Throwable cause ) throws Exception { </a> 1
<a> logger . log ( </a> 0
<a> Level . <RARE_TOKEN> , </a> 0
<a> "Unexpected exception from <RARE_TOKEN> , </a> 0
<a> cause ) ; </a> 1
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import java . util . logging . Level ; </a> 1
<a> import java . util . logging . Logger ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private static final Logger logger = Logger . getLogger ( </a> 1
<a> <RARE_TOKEN> . class . getName ( ) ) ; </a> 1
<a> private final ByteBuf <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = Unpooled . buffer ( <RARE_TOKEN> ) ; </a> 1
<a> for ( int i = 0 ; i < <RARE_TOKEN> . capacity ( ) ; i ++ ) { </a> 0
<a> <RARE_TOKEN> . writeByte ( ( byte ) i ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> ctx . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx , ByteBuf in ) { </a> 1
<a> ByteBuf out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> out . <RARE_TOKEN> ( ) ; </a> 0
<a> out . writeBytes ( in ) ; </a> 1
<a> ctx . flush ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) { </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , "Unexpected exception from <RARE_TOKEN> , cause ) ; </a> 1
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . ChannelOption ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . logging . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . logging . <RARE_TOKEN> ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( int port ) { </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 0
<a> public void run ( ) throws Exception { </a> 1
<a> ServerBootstrap b = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . option ( ChannelOption . <RARE_TOKEN> , <RARE_TOKEN> ) </a> 0
<a> . localAddress ( new InetSocketAddress ( port ) ) </a> 0
<a> . <RARE_TOKEN> ( ChannelOption . <RARE_TOKEN> , true ) </a> 1
<a> . handler ( new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ) </a> 0
<a> . <RARE_TOKEN> ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 0
<a> ch . pipeline ( ) . addLast ( </a> 1
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 1
<a> new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> ChannelFuture f = b . bind ( ) . sync ( ) ; </a> 0
<a> f . channel ( ) . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> int port ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 1
<a> port = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import java . util . logging . Level ; </a> 0
<a> import java . util . logging . Logger ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private static final Logger logger = Logger . getLogger ( </a> 0
<a> <RARE_TOKEN> . class . getName ( ) ) ; </a> 1
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx , ByteBuf in ) { </a> 1
<a> ByteBuf out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> out . <RARE_TOKEN> ( ) ; </a> 0
<a> out . writeBytes ( in ) ; </a> 1
<a> ctx . flush ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) { </a> 0
<a> logger . log ( Level . <RARE_TOKEN> , "Unexpected exception from <RARE_TOKEN> , cause ) ; </a> 1
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final String host ; </a> 1
<a> private final int port ; </a> 1
<a> private final int count ; </a> 1
<a> public <RARE_TOKEN> ( String host , int port , int count ) { </a> 1
<a> this . host = host ; </a> 1
<a> this . port = port ; </a> 1
<a> this . count = count ; </a> 1
<a> } </a> 1
<a> public void run ( ) throws Exception { </a> 1
<a> Bootstrap b = new Bootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . remoteAddress ( host , port ) </a> 0
<a> . handler ( new <RARE_TOKEN> ( count ) ) ; </a> 1
<a> ChannelFuture f = b . connect ( ) . sync ( ) ; </a> 0
<a> <RARE_TOKEN> handler = </a> 0
<a> ( <RARE_TOKEN> ) f . channel ( ) . pipeline ( ) . last ( ) ; </a> 0
<a> System . <RARE_TOKEN> . format ( </a> 1
<a> <RARE_TOKEN> of <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , count , handler . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 0
<a> if ( args . length != 3 ) { </a> 0
<a> System . <RARE_TOKEN> . println ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> . class . getSimpleName ( ) + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String host = args [ 0 ] ; </a> 0
<a> int port = Integer . parseInt ( args [ 1 ] ) ; </a> 0
<a> int count = Integer . parseInt ( args [ 2 ] ) ; </a> 0
<a> if ( count <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> new <RARE_TOKEN> ( host , port , count ) . run ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . ZlibWrapper ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInitializer < SocketChannel > { </a> 0
<a> private final int count ; </a> 1
<a> public <RARE_TOKEN> ( int count ) { </a> 1
<a> this . count = count ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 1
<a> ChannelPipeline pipeline = ch . pipeline ( ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ZlibWrapper . <RARE_TOKEN> ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ZlibWrapper . <RARE_TOKEN> ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( count ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( int port ) { </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 0
<a> public void run ( ) throws Exception { </a> 1
<a> ServerBootstrap b = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( port ) </a> 0
<a> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> b . bind ( ) . sync ( ) . channel ( ) . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> int port ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 1
<a> port = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> import java . util . logging . Level ; </a> 1
<a> import java . util . logging . Logger ; </a> 1
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < <RARE_TOKEN> > { </a> 1
<a> private static final Logger logger = Logger . getLogger ( </a> 1
<a> <RARE_TOKEN> . class . getName ( ) ) ; </a> 1
<a> private <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> ChannelHandlerContext ctx , <RARE_TOKEN> msg ) throws Exception { </a> 1
<a> <RARE_TOKEN> = msg ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( msg ) ; </a> 0
<a> ctx . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> logger . info ( new <RARE_TOKEN> ( ) . format ( </a> 0
<a> <RARE_TOKEN> of <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) . toString ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( </a> 0
<a> ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 0
<a> logger . log ( </a> 1
<a> Level . <RARE_TOKEN> , </a> 1
<a> "Unexpected exception from <RARE_TOKEN> , cause ) ; </a> 1
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . ZlibWrapper ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInitializer < SocketChannel > { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 1
<a> ChannelPipeline pipeline = ch . pipeline ( ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ZlibWrapper . <RARE_TOKEN> ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ZlibWrapper . <RARE_TOKEN> ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . file ; </a> 0
<a> import static io . netty . handler . codec . http . HttpHeaders . * ; </a> 0
<a> import static io . netty . handler . codec . http . HttpHeaders . Names . * ; </a> 0
<a> import static io . netty . handler . codec . http . HttpMethod . * ; </a> 0
<a> import static io . netty . handler . codec . http . HttpResponseStatus . * ; </a> 0
<a> import static io . netty . handler . codec . http . HttpVersion . * ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . handler . codec . TooLongFrameException ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpHeaders ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 1
<a> import io . netty . handler . codec . http . HttpResponseStatus ; </a> 0
<a> import io . netty . handler . stream . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . io . File ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . text . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import javax . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < HttpRequest > { </a> 1
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> public static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> ChannelHandlerContext ctx , HttpRequest request ) throws Exception { </a> 1
<a> if ( request . <RARE_TOKEN> ( ) != GET ) { </a> 1
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 1
<a> } </a> 0
<a> final String path = <RARE_TOKEN> ( request . <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( path == null ) { </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 1
<a> } </a> 0
<a> File file = new File ( path ) ; </a> 0
<a> if ( file . <RARE_TOKEN> ( ) || ! file . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 1
<a> } </a> 0
<a> if ( ! file . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 1
<a> } </a> 0
<a> String <RARE_TOKEN> = request . getHeader ( HttpHeaders . Names . <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null && ! <RARE_TOKEN> . equals ( "" ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> Date <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> . getTime ( ) / 1000 ; </a> 0
<a> long <RARE_TOKEN> = file . <RARE_TOKEN> ( ) / 1000 ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> return ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( file , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 1
<a> } </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> . length ( ) ; </a> 0
<a> HttpResponse response = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> ( response , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( response , file ) ; </a> 0
<a> <RARE_TOKEN> ( response , file ) ; </a> 0
<a> if ( <RARE_TOKEN> ( request ) ) { </a> 0
<a> response . setHeader ( <RARE_TOKEN> , HttpHeaders . Values . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> ctx . write ( response ) ; </a> 1
<a> ChannelFuture <RARE_TOKEN> = ctx . write ( new <RARE_TOKEN> ( <RARE_TOKEN> , 0 , <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 1
<a> if ( ! <RARE_TOKEN> ( request ) ) { </a> 0
<a> <RARE_TOKEN> . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( </a> 0
<a> ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 0
<a> if ( cause instanceof TooLongFrameException ) { </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> cause . printStackTrace ( ) ; </a> 0
<a> if ( ctx . channel ( ) . isActive ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( String uri ) { </a> 0
<a> try { </a> 0
<a> uri = <RARE_TOKEN> . decode ( uri , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> try { </a> 1
<a> uri = <RARE_TOKEN> . decode ( uri , <RARE_TOKEN> ) ; </a> 1
<a> } catch ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 1
<a> throw new Error ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> uri = uri . <RARE_TOKEN> ( <RARE_TOKEN> , File . <RARE_TOKEN> ) ; </a> 0
<a> if ( uri . contains ( File . <RARE_TOKEN> + <RARE_TOKEN> ) || </a> 0
<a> uri . contains ( <RARE_TOKEN> + File . <RARE_TOKEN> ) || </a> 0
<a> uri . startsWith ( <RARE_TOKEN> ) || uri . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return System . getProperty ( <RARE_TOKEN> ) + File . <RARE_TOKEN> + uri ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ChannelHandlerContext ctx , HttpResponseStatus status ) { </a> 0
<a> HttpResponse response = new <RARE_TOKEN> ( <RARE_TOKEN> , status ) ; </a> 1
<a> response . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> response . <RARE_TOKEN> ( Unpooled . copiedBuffer ( </a> 1
<a> <RARE_TOKEN> " + status . toString ( ) + <RARE_TOKEN> , </a> 1
<a> CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> ctx . write ( response ) . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> HttpResponse response = new <RARE_TOKEN> ( <RARE_TOKEN> , HttpResponseStatus . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( response ) ; </a> 0
<a> ctx . write ( response ) . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( HttpResponse response ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> time = new <RARE_TOKEN> ( ) ; </a> 0
<a> response . setHeader ( HttpHeaders . Names . <RARE_TOKEN> , <RARE_TOKEN> . format ( time . getTime ( ) ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( HttpResponse response , File <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> time = new <RARE_TOKEN> ( ) ; </a> 0
<a> response . setHeader ( HttpHeaders . Names . <RARE_TOKEN> , <RARE_TOKEN> . format ( time . getTime ( ) ) ) ; </a> 0
<a> time . add ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> response . setHeader ( HttpHeaders . Names . <RARE_TOKEN> , <RARE_TOKEN> . format ( time . getTime ( ) ) ) ; </a> 0
<a> response . setHeader ( HttpHeaders . Names . <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> response . setHeader ( </a> 1
<a> HttpHeaders . Names . <RARE_TOKEN> , <RARE_TOKEN> . format ( new Date ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( HttpResponse response , File file ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> response . setHeader ( HttpHeaders . Names . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( file . getPath ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . file ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . stream . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInitializer < SocketChannel > { </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 1
<a> ChannelPipeline pipeline = ch . pipeline ( ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders ; </a> 0
<a> import io . netty . handler . codec . http . HttpMethod ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 0
<a> import io . netty . handler . codec . http . HttpVersion ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . net . URI ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final URI uri ; </a> 1
<a> public <RARE_TOKEN> ( URI uri ) { </a> 1
<a> this . uri = uri ; </a> 1
<a> } </a> 1
<a> public void run ( ) throws Exception { </a> 1
<a> String <RARE_TOKEN> = uri . <RARE_TOKEN> ( ) == null ? <RARE_TOKEN> : uri . <RARE_TOKEN> ( ) ; </a> 0
<a> String host = uri . <RARE_TOKEN> ( ) == null ? <RARE_TOKEN> : uri . <RARE_TOKEN> ( ) ; </a> 1
<a> int port = uri . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( port == - 1 ) { </a> 0
<a> if ( <RARE_TOKEN> . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> port = 80 ; </a> 0
<a> } else if ( <RARE_TOKEN> . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> port = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> . equalsIgnoreCase ( <RARE_TOKEN> ) && ! <RARE_TOKEN> . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> System . <RARE_TOKEN> . println ( <RARE_TOKEN> <RARE_TOKEN> is <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . equalsIgnoreCase ( <RARE_TOKEN> ) ; </a> 0
<a> Bootstrap b = new Bootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . handler ( new <RARE_TOKEN> ( <RARE_TOKEN> ) ) </a> 0
<a> . remoteAddress ( new InetSocketAddress ( host , port ) ) ; </a> 0
<a> Channel ch = b . connect ( ) . sync ( ) . channel ( ) ; </a> 0
<a> HttpRequest request = new <RARE_TOKEN> ( </a> 0
<a> HttpVersion . <RARE_TOKEN> , HttpMethod . GET , uri . <RARE_TOKEN> ( ) ) ; </a> 0
<a> request . setHeader ( HttpHeaders . Names . <RARE_TOKEN> , host ) ; </a> 1
<a> request . setHeader ( HttpHeaders . Names . <RARE_TOKEN> , HttpHeaders . Values . <RARE_TOKEN> ) ; </a> 1
<a> request . setHeader ( HttpHeaders . Names . <RARE_TOKEN> , HttpHeaders . Values . <RARE_TOKEN> ) ; </a> 1
<a> request . setHeader ( </a> 0
<a> HttpHeaders . Names . <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . encode ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> , "foo" ) , </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ) ; </a> 0
<a> ch . write ( request ) ; </a> 1
<a> ch . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 0
<a> if ( args . length != 1 ) { </a> 0
<a> System . <RARE_TOKEN> . println ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> . class . getSimpleName ( ) + </a> 1
<a> " <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> URI uri = new URI ( args [ 0 ] ) ; </a> 0
<a> new <RARE_TOKEN> ( uri ) . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . handler . codec . http . HttpChunk ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < Object > { </a> 1
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object msg ) throws Exception { </a> 1
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> HttpResponse response = ( HttpResponse ) msg ; </a> 0
<a> System . out . println ( <RARE_TOKEN> " + response . getStatus ( ) ) ; </a> 1
<a> System . out . println ( <RARE_TOKEN> " + response . <RARE_TOKEN> ( ) ) ; </a> 1
<a> System . out . println ( ) ; </a> 1
<a> if ( ! response . <RARE_TOKEN> ( ) . isEmpty ( ) ) { </a> 1
<a> for ( String name : response . <RARE_TOKEN> ( ) ) { </a> 1
<a> for ( String value : response . getHeaders ( name ) ) { </a> 1
<a> System . out . println ( <RARE_TOKEN> " + name + " = " + value ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> System . out . println ( ) ; </a> 1
<a> } </a> 0
<a> if ( response . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } else { </a> 0
<a> ByteBuf content = response . getContent ( ) ; </a> 0
<a> if ( content . readable ( ) ) { </a> 0
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> System . out . println ( content . toString ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> HttpChunk chunk = ( HttpChunk ) msg ; </a> 0
<a> if ( chunk . isLast ( ) ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> System . out . print ( chunk . getContent ( ) . toString ( CharsetUtil . <RARE_TOKEN> ) ) ; </a> 0
<a> System . out . flush ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( </a> 1
<a> ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> cause . printStackTrace ( ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . <RARE_TOKEN> ; </a> 0
<a> import static io . netty . handler . codec . http . HttpHeaders . * ; </a> 1
<a> import static io . netty . handler . codec . http . HttpHeaders . Names . * ; </a> 1
<a> import static io . netty . handler . codec . http . HttpResponseStatus . * ; </a> 1
<a> import static io . netty . handler . codec . http . HttpVersion . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 1
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . handler . codec . http . Cookie ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . HttpChunk ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> import java . util . Set ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < Object > { </a> 1
<a> private HttpRequest request ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 1
<a> private final StringBuilder buf = new StringBuilder ( ) ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object msg ) throws Exception { </a> 1
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> HttpRequest request = this . request = ( HttpRequest ) msg ; </a> 0
<a> if ( <RARE_TOKEN> ( request ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 1
<a> } </a> 0
<a> buf . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> " + request . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> " + <RARE_TOKEN> ( request , <RARE_TOKEN> ) + <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> " + request . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 0
<a> for ( Map . Entry < String , String > h : request . getHeaders ( ) ) { </a> 1
<a> buf . append ( <RARE_TOKEN> " + h . <RARE_TOKEN> ( ) + " = " + h . getValue ( ) + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( request . <RARE_TOKEN> ( ) ) ; </a> 1
<a> Map < String , List < String > > params = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! params . isEmpty ( ) ) { </a> 0
<a> for ( Entry < String , List < String > > p : params . <RARE_TOKEN> ( ) ) { </a> 0
<a> String key = p . <RARE_TOKEN> ( ) ; </a> 0
<a> List < String > <RARE_TOKEN> = p . getValue ( ) ; </a> 0
<a> for ( String val : <RARE_TOKEN> ) { </a> 0
<a> buf . append ( <RARE_TOKEN> " + key + " = " + val + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( request . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 1
<a> } else { </a> 1
<a> ByteBuf content = request . getContent ( ) ; </a> 0
<a> if ( content . readable ( ) ) { </a> 0
<a> buf . append ( <RARE_TOKEN> " + content . toString ( CharsetUtil . <RARE_TOKEN> ) + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 1
<a> HttpChunk chunk = ( HttpChunk ) msg ; </a> 0
<a> if ( chunk . isLast ( ) ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) chunk ; </a> 0
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( ) . isEmpty ( ) ) { </a> 1
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> for ( String name : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 1
<a> for ( String value : <RARE_TOKEN> . getHeaders ( name ) ) { </a> 1
<a> buf . append ( <RARE_TOKEN> <RARE_TOKEN> " + name + " = " + value + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } else { </a> 1
<a> buf . append ( <RARE_TOKEN> " + chunk . getContent ( ) . toString ( CharsetUtil . <RARE_TOKEN> ) + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> ( request ) ; </a> 0
<a> HttpResponse response = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> response . <RARE_TOKEN> ( Unpooled . copiedBuffer ( buf . toString ( ) , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> response . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> response . setHeader ( <RARE_TOKEN> , response . getContent ( ) . readableBytes ( ) ) ; </a> 1
<a> response . setHeader ( <RARE_TOKEN> , HttpHeaders . Values . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> String <RARE_TOKEN> = request . getHeader ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> Set < Cookie > <RARE_TOKEN> = <RARE_TOKEN> . decode ( <RARE_TOKEN> ) ; </a> 0
<a> if ( ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> for ( Cookie cookie : <RARE_TOKEN> ) { </a> 0
<a> response . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> . encode ( cookie ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> response . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> . encode ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> response . addHeader ( <RARE_TOKEN> , <RARE_TOKEN> . encode ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> ChannelFuture future = ctx . write ( response ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 1
<a> future . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 1
<a> HttpResponse response = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> ctx . write ( response ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( </a> 1
<a> ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> cause . printStackTrace ( ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInitializer < SocketChannel > { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 1
<a> ChannelPipeline p = ch . pipeline ( ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private final int port ; </a> 0
<a> public <RARE_TOKEN> ( int port ) { </a> 0
<a> this . port = port ; </a> 0
<a> } </a> 0
<a> public void run ( ) throws Exception { </a> 0
<a> ServerBootstrap b = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( port ) </a> 0
<a> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> ChannelFuture f = b . bind ( ) . sync ( ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> port " + port ) ; </a> 0
<a> f . channel ( ) . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 0
<a> int port ; </a> 0
<a> if ( args . length > 0 ) { </a> 0
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 0
<a> } else { </a> 0
<a> port = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . <RARE_TOKEN> ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . client ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . Channel ; </a> 1
<a> import io . netty . channel . ChannelInitializer ; </a> 1
<a> import io . netty . channel . ChannelPipeline ; </a> 1
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 1
<a> import java . net . URI ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final URI uri ; </a> 1
<a> public <RARE_TOKEN> ( URI uri ) { </a> 1
<a> this . uri = uri ; </a> 1
<a> } </a> 1
<a> public void run ( ) throws Exception { </a> 1
<a> Bootstrap b = new Bootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> String <RARE_TOKEN> = uri . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( ! <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> HashMap < String , String > <RARE_TOKEN> = new HashMap < String , String > ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> final <RARE_TOKEN> <RARE_TOKEN> = </a> 1
<a> new <RARE_TOKEN> ( ) . <RARE_TOKEN> ( </a> 0
<a> uri , <RARE_TOKEN> . <RARE_TOKEN> , null , false , <RARE_TOKEN> ) ; </a> 1
<a> b . group ( new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . remoteAddress ( uri . <RARE_TOKEN> ( ) , uri . <RARE_TOKEN> ( ) ) </a> 0
<a> . handler ( new ChannelInitializer < SocketChannel > ( ) { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 1
<a> ChannelPipeline pipeline = ch . pipeline ( ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 1
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> Channel ch = b . connect ( ) . sync ( ) . channel ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ch ) . sync ( ) ; </a> 1
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> for ( int i = 0 ; i < 1000 ; i ++ ) { </a> 1
<a> ch . write ( new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> + i ) ) ; </a> 1
<a> } </a> 1
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> ch . write ( new <RARE_TOKEN> ( Unpooled . copiedBuffer ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 } ) ) ) ; </a> 1
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> ch . write ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> ch . <RARE_TOKEN> ( ) . sync ( ) ; </a> 1
<a> } finally { </a> 1
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> URI uri ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> uri = new URI ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 0
<a> uri = new URI ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> new <RARE_TOKEN> ( uri ) . run ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . server ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( int port ) { </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 0
<a> public void run ( ) throws Exception { </a> 1
<a> ServerBootstrap b = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( port ) </a> 0
<a> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> Channel ch = b . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> socket server <RARE_TOKEN> <RARE_TOKEN> port " + port + <RARE_TOKEN> ) ; </a> 1
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> + port + <RARE_TOKEN> ) ; </a> 1
<a> ch . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> int port ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 1
<a> port = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . server ; </a> 0
<a> import static io . netty . handler . codec . http . HttpHeaders . * ; </a> 0
<a> import static io . netty . handler . codec . http . HttpHeaders . Names . * ; </a> 0
<a> import static io . netty . handler . codec . http . HttpMethod . * ; </a> 0
<a> import static io . netty . handler . codec . http . HttpResponseStatus . * ; </a> 0
<a> import static io . netty . handler . codec . http . HttpVersion . * ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . HttpHeaders ; </a> 0
<a> import io . netty . handler . codec . http . HttpRequest ; </a> 0
<a> import io . netty . handler . codec . http . HttpResponse ; </a> 0
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . websocketx . <RARE_TOKEN> ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < Object > { </a> 1
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object msg ) throws Exception { </a> 1
<a> if ( msg instanceof HttpRequest ) { </a> 0
<a> <RARE_TOKEN> ( ctx , ( HttpRequest ) msg ) ; </a> 0
<a> } else if ( msg instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ctx , ( <RARE_TOKEN> ) msg ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx , HttpRequest req ) throws Exception { </a> 0
<a> if ( req . <RARE_TOKEN> ( ) != GET ) { </a> 0
<a> <RARE_TOKEN> ( ctx , req , new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( req . <RARE_TOKEN> ( ) . equals ( "/" ) ) { </a> 0
<a> HttpResponse res = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> ByteBuf content = <RARE_TOKEN> . getContent ( <RARE_TOKEN> ( req ) ) ; </a> 0
<a> res . setHeader ( <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( res , content . readableBytes ( ) ) ; </a> 0
<a> res . <RARE_TOKEN> ( content ) ; </a> 0
<a> <RARE_TOKEN> ( ctx , req , res ) ; </a> 0
<a> return ; </a> 0
<a> } else if ( req . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> HttpResponse res = new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ctx , req , res ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> ( req ) , null , false ) ; </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( req ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ctx . channel ( ) ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ctx . channel ( ) , req ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx , <RARE_TOKEN> frame ) { </a> 0
<a> if ( frame instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . close ( ctx . channel ( ) , ( <RARE_TOKEN> ) frame ) ; </a> 1
<a> return ; </a> 0
<a> } else if ( frame instanceof <RARE_TOKEN> ) { </a> 0
<a> ctx . channel ( ) . write ( new <RARE_TOKEN> ( frame . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> return ; </a> 0
<a> } else if ( ! ( frame instanceof <RARE_TOKEN> ) ) { </a> 0
<a> throw new UnsupportedOperationException ( String . format ( <RARE_TOKEN> frame <RARE_TOKEN> not <RARE_TOKEN> , frame . getClass ( ) </a> 0
<a> . getName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> String request = ( ( <RARE_TOKEN> ) frame ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( logger . isDebugEnabled ( ) ) { </a> 0
<a> logger . debug ( String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , ctx . channel ( ) . id ( ) , request ) ) ; </a> 0
<a> } </a> 1
<a> ctx . channel ( ) . write ( new <RARE_TOKEN> ( request . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ChannelHandlerContext ctx , HttpRequest req , HttpResponse res ) { </a> 1
<a> if ( res . getStatus ( ) . <RARE_TOKEN> ( ) != 200 ) { </a> 0
<a> res . <RARE_TOKEN> ( Unpooled . copiedBuffer ( res . getStatus ( ) . toString ( ) , CharsetUtil . <RARE_TOKEN> ) ) ; </a> 1
<a> <RARE_TOKEN> ( res , res . getContent ( ) . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> ChannelFuture f = ctx . channel ( ) . write ( res ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( req ) || res . getStatus ( ) . <RARE_TOKEN> ( ) != 200 ) { </a> 0
<a> f . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> cause . printStackTrace ( ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> private static String <RARE_TOKEN> ( HttpRequest req ) { </a> 1
<a> return <RARE_TOKEN> + req . getHeader ( HttpHeaders . Names . <RARE_TOKEN> ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . server ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 0
<a> private static final String NEWLINE = <RARE_TOKEN> ; </a> 0
<a> public static ByteBuf getContent ( String <RARE_TOKEN> ) { </a> 0
<a> return Unpooled . copiedBuffer ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> = <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> " socket = new <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> = <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + NEWLINE + </a> 0
<a> " <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> else <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> not support <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> + NEWLINE + </a> 0
<a> NEWLINE + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> " if <RARE_TOKEN> { <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> " if <RARE_TOKEN> == <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> + NEWLINE + </a> 0
<a> " } else <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> socket is not <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> + NEWLINE + </a> 0
<a> <RARE_TOKEN> + NEWLINE , CharsetUtil . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . server ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> extends ChannelInitializer < SocketChannel > { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 0
<a> ChannelPipeline pipeline = ch . pipeline ( ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . server ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . Channel ; </a> 1
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> { </a> 0
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( int port ) { </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 1
<a> public void run ( ) throws Exception { </a> 1
<a> ServerBootstrap b = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 1
<a> b . group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( port ) </a> 0
<a> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> Channel ch = b . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> socket server <RARE_TOKEN> <RARE_TOKEN> port " + port + <RARE_TOKEN> ) ; </a> 1
<a> System . out . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> + port + <RARE_TOKEN> ) ; </a> 1
<a> ch . <RARE_TOKEN> ( ) . sync ( ) ; </a> 1
<a> } finally { </a> 1
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> int port ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 1
<a> port = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> String <RARE_TOKEN> = System . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null || <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> System . out . println ( <RARE_TOKEN> System <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> System . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = System . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null || <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> System . out . println ( <RARE_TOKEN> System <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> System . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> } </a> 0
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 1
<a> import io . netty . channel . ChannelPipeline ; </a> 1
<a> import io . netty . channel . socket . SocketChannel ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> extends ChannelInitializer < SocketChannel > { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 1
<a> ChannelPipeline pipeline = ch . pipeline ( ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . <RARE_TOKEN> ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public final class <RARE_TOKEN> { </a> 1
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public static <RARE_TOKEN> getInstance ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> { </a> 0
<a> public static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> String <RARE_TOKEN> = System . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> String <RARE_TOKEN> = System . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . init ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . init ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , null , null ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new Error ( "Failed to <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . error ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + ex . getMessage ( ) , ex ) ; </a> 0
<a> } </a> 0
<a> System . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . http . websocketx . <RARE_TOKEN> ; </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> . LocalAddress ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . handler . logging . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . logging . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final String port ; </a> 1
<a> public <RARE_TOKEN> ( String port ) { </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 1
<a> public void run ( ) throws Exception { </a> 1
<a> final LocalAddress <RARE_TOKEN> = new LocalAddress ( port ) ; </a> 1
<a> Bootstrap cb = new Bootstrap ( ) ; </a> 0
<a> ServerBootstrap sb = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> sb . group ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( <RARE_TOKEN> ) </a> 0
<a> . handler ( new ChannelInitializer < <RARE_TOKEN> > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> ch ) throws Exception { </a> 0
<a> ch . pipeline ( ) . addLast ( new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . <RARE_TOKEN> ( new ChannelInitializer < <RARE_TOKEN> > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> ch ) throws Exception { </a> 0
<a> ch . pipeline ( ) . addLast ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> cb . group ( new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . remoteAddress ( <RARE_TOKEN> ) </a> 0
<a> . handler ( new ChannelInitializer < <RARE_TOKEN> > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> ch ) throws Exception { </a> 0
<a> ch . pipeline ( ) . addLast ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> sb . bind ( ) . sync ( ) ; </a> 0
<a> Channel ch = cb . connect ( ) . sync ( ) . channel ( ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> text <RARE_TOKEN> to <RARE_TOKEN> ) ; </a> 0
<a> ChannelFuture <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> in = new <RARE_TOKEN> ( new <RARE_TOKEN> ( System . in ) ) ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> String <RARE_TOKEN> = in . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null || <RARE_TOKEN> . equalsIgnoreCase ( <RARE_TOKEN> ) ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = ch . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> sb . shutdown ( ) ; </a> 0
<a> cb . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> new <RARE_TOKEN> ( <RARE_TOKEN> ) . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < String > { </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , String msg ) { </a> 1
<a> System . out . println ( msg ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) { </a> 0
<a> cause . printStackTrace ( ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < String > { </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , String msg ) { </a> 1
<a> ctx . write ( msg ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) { </a> 0
<a> cause . printStackTrace ( ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . localtime ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 1
<a> import java . util . Collection ; </a> 1
<a> import java . util . Iterator ; </a> 1
<a> import java . util . List ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private final String host ; </a> 1
<a> private final int port ; </a> 1
<a> private final Collection < String > <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( String host , int port , Collection < String > <RARE_TOKEN> ) { </a> 0
<a> this . host = host ; </a> 1
<a> this . port = port ; </a> 1
<a> this . <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 1
<a> this . <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> public void run ( ) throws Exception { </a> 1
<a> Bootstrap b = new Bootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . remoteAddress ( host , port ) </a> 0
<a> . handler ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> Channel ch = b . connect ( ) . sync ( ) . channel ( ) ; </a> 0
<a> <RARE_TOKEN> handler = </a> 0
<a> ch . pipeline ( ) . get ( <RARE_TOKEN> . class ) ; </a> 0
<a> List < String > response = handler . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> ch . close ( ) ; </a> 0
<a> Iterator < String > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> Iterator < String > <RARE_TOKEN> = response . <RARE_TOKEN> ( ) ; </a> 1
<a> while ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 1
<a> System . out . format ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> . next ( ) , <RARE_TOKEN> . next ( ) ) ; </a> 1
<a> } </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 0
<a> if ( args . length < 3 ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String host = args [ 0 ] ; </a> 0
<a> int port = Integer . parseInt ( args [ 1 ] ) ; </a> 0
<a> Collection < String > <RARE_TOKEN> = <RARE_TOKEN> ( args , 2 ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> new <RARE_TOKEN> ( host , port , <RARE_TOKEN> ) . run ( ) ; </a> 0
<a> } </a> 1
<a> private static void <RARE_TOKEN> ( ) { </a> 1
<a> System . <RARE_TOKEN> . println ( </a> 1
<a> <RARE_TOKEN> " + <RARE_TOKEN> . class . getSimpleName ( ) + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> System . <RARE_TOKEN> . println ( </a> 1
<a> <RARE_TOKEN> " + <RARE_TOKEN> . class . getSimpleName ( ) + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> private static List < String > <RARE_TOKEN> ( String [ ] args , int offset ) { </a> 1
<a> List < String > <RARE_TOKEN> = new ArrayList < String > ( ) ; </a> 1
<a> for ( int i = offset ; i < args . length ; i ++ ) { </a> 1
<a> if ( ! args [ i ] . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> System . <RARE_TOKEN> . println ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + args [ i ] + <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> return null ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . add ( args [ i ] . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . localtime ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> import io . netty . example . localtime . LocalTimeProtocol . LocalTime ; </a> 0
<a> import io . netty . example . localtime . LocalTimeProtocol . LocalTimes ; </a> 0
<a> import io . netty . example . localtime . LocalTimeProtocol . Location ; </a> 0
<a> import io . netty . example . localtime . LocalTimeProtocol . Locations ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . logging . Level ; </a> 1
<a> import java . util . logging . Logger ; </a> 1
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < LocalTimes > { </a> 0
<a> private static final Logger logger = Logger . getLogger ( </a> 1
<a> <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> private volatile Channel channel ; </a> 0
<a> private final <RARE_TOKEN> < LocalTimes > <RARE_TOKEN> = new <RARE_TOKEN> < LocalTimes > ( ) ; </a> 0
<a> public List < String > <RARE_TOKEN> ( Collection < String > <RARE_TOKEN> ) { </a> 0
<a> Locations . Builder builder = Locations . newBuilder ( ) ; </a> 0
<a> for ( String c : <RARE_TOKEN> ) { </a> 0
<a> String [ ] components = c . split ( "/" ) ; </a> 0
<a> builder . <RARE_TOKEN> ( Location . newBuilder ( ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . valueOf ( components [ 0 ] . <RARE_TOKEN> ( ) ) ) . </a> 0
<a> <RARE_TOKEN> ( components [ 1 ] ) . build ( ) ) ; </a> 0
<a> } </a> 0
<a> channel . write ( builder . build ( ) ) ; </a> 1
<a> LocalTimes <RARE_TOKEN> ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> break ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> List < String > result = new ArrayList < String > ( ) ; </a> 0
<a> for ( LocalTime <RARE_TOKEN> : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> result . add ( </a> 0
<a> new <RARE_TOKEN> ( ) . format ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . name ( ) ) . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> channel = ctx . channel ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , LocalTimes msg ) throws Exception { </a> 1
<a> <RARE_TOKEN> . add ( msg ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> logger . log ( </a> 1
<a> Level . <RARE_TOKEN> , </a> 1
<a> "Unexpected exception from <RARE_TOKEN> , cause ) ; </a> 1
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . localtime ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . protobuf . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . protobuf . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . protobuf . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . protobuf . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInitializer < SocketChannel > { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 1
<a> ChannelPipeline p = ch . pipeline ( ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( LocalTimeProtocol . LocalTimes . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . localtime ; </a> 0
<a> @ SuppressWarnings ( <RARE_TOKEN> ) </a> 0
<a> public final class LocalTimeProtocol { </a> 0
<a> private LocalTimeProtocol ( ) { } </a> 0
<a> public static void <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> public enum <RARE_TOKEN> </a> 0
<a> implements com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( 0 , 0 ) , </a> 0
<a> <RARE_TOKEN> ( 1 , 1 ) , </a> 0
<a> <RARE_TOKEN> ( 2 , 2 ) , </a> 0
<a> <RARE_TOKEN> ( 3 , 3 ) , </a> 0
<a> <RARE_TOKEN> ( 4 , 4 ) , </a> 0
<a> <RARE_TOKEN> ( 5 , 5 ) , </a> 0
<a> <RARE_TOKEN> ( 6 , 6 ) , </a> 0
<a> <RARE_TOKEN> ( 7 , 7 ) , </a> 0
<a> <RARE_TOKEN> ( 8 , 8 ) , </a> 0
<a> <RARE_TOKEN> ( 9 , 9 ) , </a> 0
<a> <RARE_TOKEN> ( 10 , 10 ) , </a> 0
<a> ; </a> 0
<a> public static final int <RARE_TOKEN> = 0 ; </a> 0
<a> public static final int <RARE_TOKEN> = 1 ; </a> 0
<a> public static final int <RARE_TOKEN> = 2 ; </a> 0
<a> public static final int <RARE_TOKEN> = 3 ; </a> 0
<a> public static final int <RARE_TOKEN> = 4 ; </a> 0
<a> public static final int <RARE_TOKEN> = 5 ; </a> 0
<a> public static final int <RARE_TOKEN> = 6 ; </a> 0
<a> public static final int <RARE_TOKEN> = 7 ; </a> 0
<a> public static final int <RARE_TOKEN> = 8 ; </a> 0
<a> public static final int <RARE_TOKEN> = 9 ; </a> 0
<a> public static final int <RARE_TOKEN> = 10 ; </a> 0
<a> public final int <RARE_TOKEN> ( ) { return value ; } </a> 0
<a> public static <RARE_TOKEN> valueOf ( int value ) { </a> 0
<a> switch ( value ) { </a> 0
<a> case 0 : return <RARE_TOKEN> ; </a> 0
<a> case 1 : return <RARE_TOKEN> ; </a> 0
<a> case 2 : return <RARE_TOKEN> ; </a> 0
<a> case 3 : return <RARE_TOKEN> ; </a> 0
<a> case 4 : return <RARE_TOKEN> ; </a> 0
<a> case 5 : return <RARE_TOKEN> ; </a> 0
<a> case 6 : return <RARE_TOKEN> ; </a> 0
<a> case 7 : return <RARE_TOKEN> ; </a> 0
<a> case 8 : return <RARE_TOKEN> ; </a> 0
<a> case 9 : return <RARE_TOKEN> ; </a> 0
<a> case 10 : return <RARE_TOKEN> ; </a> 0
<a> default : return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> = </a> 0
<a> new com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> > ( ) { </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . valueOf ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . get ( index ) ; </a> 0
<a> } </a> 0
<a> public final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . get ( 0 ) ; </a> 0
<a> } </a> 0
<a> private static final <RARE_TOKEN> [ ] <RARE_TOKEN> = { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> } ; </a> 0
<a> public static <RARE_TOKEN> valueOf ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . getType ( ) != <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new java . lang . IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> is not for this <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> [ <RARE_TOKEN> . <RARE_TOKEN> ( ) ] ; </a> 0
<a> } </a> 0
<a> private final int index ; </a> 0
<a> private final int value ; </a> 0
<a> private <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> this . index = index ; </a> 0
<a> this . value = value ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public enum <RARE_TOKEN> </a> 0
<a> implements com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( 0 , 1 ) , </a> 0
<a> <RARE_TOKEN> ( 1 , 2 ) , </a> 0
<a> <RARE_TOKEN> ( 2 , 3 ) , </a> 0
<a> <RARE_TOKEN> ( 3 , 4 ) , </a> 0
<a> <RARE_TOKEN> ( 4 , 5 ) , </a> 0
<a> <RARE_TOKEN> ( 5 , 6 ) , </a> 0
<a> <RARE_TOKEN> ( 6 , 7 ) , </a> 0
<a> ; </a> 0
<a> public static final int <RARE_TOKEN> = 1 ; </a> 0
<a> public static final int <RARE_TOKEN> = 2 ; </a> 0
<a> public static final int <RARE_TOKEN> = 3 ; </a> 0
<a> public static final int <RARE_TOKEN> = 4 ; </a> 0
<a> public static final int <RARE_TOKEN> = 5 ; </a> 0
<a> public static final int <RARE_TOKEN> = 6 ; </a> 0
<a> public static final int <RARE_TOKEN> = 7 ; </a> 0
<a> public final int <RARE_TOKEN> ( ) { return value ; } </a> 0
<a> public static <RARE_TOKEN> valueOf ( int value ) { </a> 0
<a> switch ( value ) { </a> 0
<a> case 1 : return <RARE_TOKEN> ; </a> 0
<a> case 2 : return <RARE_TOKEN> ; </a> 0
<a> case 3 : return <RARE_TOKEN> ; </a> 0
<a> case 4 : return <RARE_TOKEN> ; </a> 0
<a> case 5 : return <RARE_TOKEN> ; </a> 0
<a> case 6 : return <RARE_TOKEN> ; </a> 0
<a> case 7 : return <RARE_TOKEN> ; </a> 0
<a> default : return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> = </a> 0
<a> new com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> > ( ) { </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . valueOf ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . get ( index ) ; </a> 0
<a> } </a> 0
<a> public final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . get ( 1 ) ; </a> 0
<a> } </a> 0
<a> private static final <RARE_TOKEN> [ ] <RARE_TOKEN> = { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> } ; </a> 0
<a> public static <RARE_TOKEN> valueOf ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . getType ( ) != <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new java . lang . IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> is not for this <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> [ <RARE_TOKEN> . <RARE_TOKEN> ( ) ] ; </a> 0
<a> } </a> 0
<a> private final int index ; </a> 0
<a> private final int value ; </a> 0
<a> private <RARE_TOKEN> ( int index , int value ) { </a> 0
<a> this . index = index ; </a> 0
<a> this . value = value ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> </a> 0
<a> extends com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> String <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static final class Location extends </a> 0
<a> com . google . protobuf . <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private Location ( Builder builder ) { </a> 0
<a> super ( builder ) ; </a> 0
<a> } </a> 0
<a> private Location ( boolean <RARE_TOKEN> ) { } </a> 0
<a> private static final Location <RARE_TOKEN> ; </a> 0
<a> public static Location <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Location <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int bitField0_ ; </a> 0
<a> public static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & 0x00000001 ) == 0x00000001 ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private java . lang . Object <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> java . lang . Object <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> instanceof String ) { </a> 0
<a> return ( String ) <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> com . google . protobuf . <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> ( com . google . protobuf . <RARE_TOKEN> ) <RARE_TOKEN> ; </a> 0
<a> String s = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = s ; </a> 0
<a> } </a> 0
<a> return s ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private com . google . protobuf . <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> java . lang . Object <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> instanceof String ) { </a> 0
<a> com . google . protobuf . <RARE_TOKEN> b = </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ( ( String ) <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = b ; </a> 0
<a> return b ; </a> 0
<a> } else { </a> 0
<a> return ( com . google . protobuf . <RARE_TOKEN> ) <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = "" ; </a> 0
<a> } </a> 0
<a> private byte <RARE_TOKEN> = - 1 ; </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != - 1 ) { </a> 0
<a> return <RARE_TOKEN> == 1 ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 1 ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( com . google . protobuf . <RARE_TOKEN> output ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ( bitField0_ & 0x00000001 ) == 0x00000001 ) { </a> 0
<a> output . <RARE_TOKEN> ( 1 , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> output . writeBytes ( 2 , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( output ) ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> = - 1 ; </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> int size = <RARE_TOKEN> ; </a> 0
<a> if ( size != - 1 ) { </a> 0
<a> return size ; </a> 0
<a> } </a> 0
<a> size = 0 ; </a> 0
<a> if ( ( bitField0_ & 0x00000001 ) == 0x00000001 ) { </a> 0
<a> size += com . google . protobuf . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( 1 , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> size += com . google . protobuf . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( 2 , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> size += <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = size ; </a> 0
<a> return size ; </a> 0
<a> } </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> @ java . lang . Override </a> 0
<a> protected java . lang . Object <RARE_TOKEN> ( ) </a> 0
<a> throws java . io . <RARE_TOKEN> { </a> 0
<a> return super . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> data ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> data , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( byte [ ] data ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( </a> 0
<a> byte [ ] data , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( java . io . InputStream input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( </a> 0
<a> java . io . InputStream input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( java . io . InputStream input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> Builder builder = newBuilder ( ) ; </a> 0
<a> if ( builder . <RARE_TOKEN> ( input ) ) { </a> 0
<a> return builder . buildParsed ( ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( </a> 0
<a> java . io . InputStream input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> Builder builder = newBuilder ( ) ; </a> 0
<a> if ( builder . <RARE_TOKEN> ( input , extensionRegistry ) ) { </a> 0
<a> return builder . buildParsed ( ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static Builder newBuilder ( ) { return Builder . create ( ) ; } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { return newBuilder ( ) ; } </a> 0
<a> public static Builder newBuilder ( io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ) { </a> 0
<a> return newBuilder ( ) . mergeFrom ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { return newBuilder ( this ) ; } </a> 0
<a> @ java . lang . Override </a> 0
<a> protected Builder <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> parent ) { </a> 0
<a> Builder builder = new Builder ( parent ) ; </a> 0
<a> return builder ; </a> 0
<a> } </a> 0
<a> public static final class Builder extends </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . Builder < Builder > </a> 0
<a> implements io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> { </a> 0
<a> public static final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private Builder ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private Builder ( <RARE_TOKEN> parent ) { </a> 0
<a> super ( parent ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static Builder create ( ) { </a> 0
<a> return new Builder ( ) ; </a> 0
<a> } </a> 0
<a> public Builder clear ( ) { </a> 0
<a> super . clear ( ) ; </a> 0
<a> <RARE_TOKEN> = io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> <RARE_TOKEN> = "" ; </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> return create ( ) . mergeFrom ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . Location . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . Location . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . Location build ( ) { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location result = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! result . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw <RARE_TOKEN> ( result ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> private io . netty . example . localtime . LocalTimeProtocol . Location buildParsed ( ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location result = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! result . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw <RARE_TOKEN> ( </a> 0
<a> result ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( ) { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location result = new io . netty . example . localtime . LocalTimeProtocol . Location ( this ) ; </a> 0
<a> int <RARE_TOKEN> = bitField0_ ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> if ( ( <RARE_TOKEN> & 0x00000001 ) == 0x00000001 ) { </a> 0
<a> <RARE_TOKEN> |= 0x00000001 ; </a> 0
<a> } </a> 0
<a> result . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( ( <RARE_TOKEN> & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> |= <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> result . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> result . bitField0_ = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( com . google . protobuf . <RARE_TOKEN> other ) { </a> 0
<a> if ( other instanceof io . netty . example . localtime . LocalTimeProtocol . Location ) { </a> 0
<a> return mergeFrom ( ( io . netty . example . localtime . LocalTimeProtocol . Location ) other ) ; </a> 0
<a> } else { </a> 0
<a> super . mergeFrom ( other ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( io . netty . example . localtime . LocalTimeProtocol . Location other ) { </a> 0
<a> if ( other == io . netty . example . localtime . LocalTimeProtocol . Location . <RARE_TOKEN> ( ) ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> if ( other . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( other . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . Builder <RARE_TOKEN> = </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . newBuilder ( </a> 0
<a> <RARE_TOKEN> ( ) ) ; </a> 0
<a> while ( true ) { </a> 0
<a> int <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case 0 : </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> default : { </a> 0
<a> if ( ! <RARE_TOKEN> ( input , <RARE_TOKEN> , </a> 0
<a> extensionRegistry , <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 8 : { </a> 0
<a> int <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> value = io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> . valueOf ( <RARE_TOKEN> ) ; </a> 0
<a> if ( value == null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 1 , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> bitField0_ |= 0x00000001 ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = input . readBytes ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private int bitField0_ ; </a> 0
<a> private io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> = io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & 0x00000001 ) == 0x00000001 ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> value ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( ) ; </a> 0
<a> } </a> 0
<a> bitField0_ |= 0x00000001 ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> <RARE_TOKEN> = io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> private java . lang . Object <RARE_TOKEN> = "" ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public String <RARE_TOKEN> ( ) { </a> 0
<a> java . lang . Object <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( ! ( <RARE_TOKEN> instanceof String ) ) { </a> 0
<a> String s = ( ( com . google . protobuf . <RARE_TOKEN> ) <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = s ; </a> 0
<a> return s ; </a> 0
<a> } else { </a> 0
<a> return ( String ) <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( String value ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( ) ; </a> 0
<a> } </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( com . google . protobuf . <RARE_TOKEN> value ) { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> = new Location ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> </a> 0
<a> extends com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> java . util . List < io . netty . example . localtime . LocalTimeProtocol . Location > </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( int index ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> java . util . List < ? extends io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( </a> 0
<a> int index ) ; </a> 0
<a> } </a> 0
<a> public static final class Locations extends </a> 0
<a> com . google . protobuf . <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private Locations ( Builder builder ) { </a> 0
<a> super ( builder ) ; </a> 0
<a> } </a> 0
<a> private Locations ( boolean <RARE_TOKEN> ) { } </a> 0
<a> private static final Locations <RARE_TOKEN> ; </a> 0
<a> public static Locations <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Locations <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private java . util . List < io . netty . example . localtime . LocalTimeProtocol . Location > location_ ; </a> 0
<a> public java . util . List < io . netty . example . localtime . LocalTimeProtocol . Location > <RARE_TOKEN> ( ) { </a> 0
<a> return location_ ; </a> 0
<a> } </a> 0
<a> public java . util . List < ? extends io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return location_ ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return location_ . size ( ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( int index ) { </a> 0
<a> return location_ . get ( index ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( </a> 0
<a> int index ) { </a> 0
<a> return location_ . get ( index ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> location_ = java . util . Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private byte <RARE_TOKEN> = - 1 ; </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != - 1 ) { </a> 0
<a> return <RARE_TOKEN> == 1 ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ( ) ; i ++ ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( i ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 1 ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( com . google . protobuf . <RARE_TOKEN> output ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < location_ . size ( ) ; i ++ ) { </a> 0
<a> output . <RARE_TOKEN> ( 1 , location_ . get ( i ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( output ) ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> = - 1 ; </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> int size = <RARE_TOKEN> ; </a> 0
<a> if ( size != - 1 ) { </a> 0
<a> return size ; </a> 0
<a> } </a> 0
<a> size = 0 ; </a> 0
<a> for ( int i = 0 ; i < location_ . size ( ) ; i ++ ) { </a> 0
<a> size += com . google . protobuf . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( 1 , location_ . get ( i ) ) ; </a> 0
<a> } </a> 0
<a> size += <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = size ; </a> 0
<a> return size ; </a> 0
<a> } </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> @ java . lang . Override </a> 0
<a> protected java . lang . Object <RARE_TOKEN> ( ) </a> 0
<a> throws java . io . <RARE_TOKEN> { </a> 0
<a> return super . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> data ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> data , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( byte [ ] data ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( </a> 0
<a> byte [ ] data , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( java . io . InputStream input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( </a> 0
<a> java . io . InputStream input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( java . io . InputStream input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> Builder builder = newBuilder ( ) ; </a> 0
<a> if ( builder . <RARE_TOKEN> ( input ) ) { </a> 0
<a> return builder . buildParsed ( ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( </a> 0
<a> java . io . InputStream input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> Builder builder = newBuilder ( ) ; </a> 0
<a> if ( builder . <RARE_TOKEN> ( input , extensionRegistry ) ) { </a> 0
<a> return builder . buildParsed ( ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static Builder newBuilder ( ) { return Builder . create ( ) ; } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { return newBuilder ( ) ; } </a> 0
<a> public static Builder newBuilder ( io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ) { </a> 0
<a> return newBuilder ( ) . mergeFrom ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { return newBuilder ( this ) ; } </a> 0
<a> @ java . lang . Override </a> 0
<a> protected Builder <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> parent ) { </a> 0
<a> Builder builder = new Builder ( parent ) ; </a> 0
<a> return builder ; </a> 0
<a> } </a> 0
<a> public static final class Builder extends </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . Builder < Builder > </a> 0
<a> implements io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> { </a> 0
<a> public static final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private Builder ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private Builder ( <RARE_TOKEN> parent ) { </a> 0
<a> super ( parent ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static Builder create ( ) { </a> 0
<a> return new Builder ( ) ; </a> 0
<a> } </a> 0
<a> public Builder clear ( ) { </a> 0
<a> super . clear ( ) ; </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> location_ = java . util . Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> } else { </a> 0
<a> locationBuilder_ . clear ( ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> return create ( ) . mergeFrom ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . Locations . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . Locations . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . Locations build ( ) { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Locations result = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! result . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw <RARE_TOKEN> ( result ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> private io . netty . example . localtime . LocalTimeProtocol . Locations buildParsed ( ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Locations result = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! result . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw <RARE_TOKEN> ( </a> 0
<a> result ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . Locations <RARE_TOKEN> ( ) { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Locations result = new io . netty . example . localtime . LocalTimeProtocol . Locations ( this ) ; </a> 0
<a> int <RARE_TOKEN> = bitField0_ ; </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> if ( ( bitField0_ & 0x00000001 ) == 0x00000001 ) { </a> 0
<a> location_ = java . util . Collections . <RARE_TOKEN> ( location_ ) ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> } </a> 0
<a> result . location_ = location_ ; </a> 0
<a> } else { </a> 0
<a> result . location_ = locationBuilder_ . build ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( com . google . protobuf . <RARE_TOKEN> other ) { </a> 0
<a> if ( other instanceof io . netty . example . localtime . LocalTimeProtocol . Locations ) { </a> 0
<a> return mergeFrom ( ( io . netty . example . localtime . LocalTimeProtocol . Locations ) other ) ; </a> 0
<a> } else { </a> 0
<a> super . mergeFrom ( other ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( io . netty . example . localtime . LocalTimeProtocol . Locations other ) { </a> 0
<a> if ( other == io . netty . example . localtime . LocalTimeProtocol . Locations . <RARE_TOKEN> ( ) ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> if ( ! other . location_ . isEmpty ( ) ) { </a> 0
<a> if ( location_ . isEmpty ( ) ) { </a> 0
<a> location_ = other . location_ ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> location_ . <RARE_TOKEN> ( other . location_ ) ; </a> 0
<a> } </a> 0
<a> onChanged ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( ! other . location_ . isEmpty ( ) ) { </a> 0
<a> if ( locationBuilder_ . isEmpty ( ) ) { </a> 0
<a> locationBuilder_ . <RARE_TOKEN> ( ) ; </a> 0
<a> locationBuilder_ = null ; </a> 0
<a> location_ = other . location_ ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> locationBuilder_ = </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ? </a> 0
<a> <RARE_TOKEN> ( ) : null ; </a> 0
<a> } else { </a> 0
<a> locationBuilder_ . <RARE_TOKEN> ( other . location_ ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ( ) ; i ++ ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( i ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . Builder <RARE_TOKEN> = </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . newBuilder ( </a> 0
<a> <RARE_TOKEN> ( ) ) ; </a> 0
<a> while ( true ) { </a> 0
<a> int <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case 0 : </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> default : { </a> 0
<a> if ( ! <RARE_TOKEN> ( input , <RARE_TOKEN> , </a> 0
<a> extensionRegistry , <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 10 : { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location . Builder <RARE_TOKEN> = io . netty . example . localtime . LocalTimeProtocol . Location . newBuilder ( ) ; </a> 0
<a> input . <RARE_TOKEN> ( <RARE_TOKEN> , extensionRegistry ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private int bitField0_ ; </a> 0
<a> private java . util . List < io . netty . example . localtime . LocalTimeProtocol . Location > location_ = </a> 0
<a> java . util . Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! ( ( bitField0_ & 0x00000001 ) == 0x00000001 ) ) { </a> 0
<a> location_ = new java . util . ArrayList < io . netty . example . localtime . LocalTimeProtocol . Location > ( location_ ) ; </a> 0
<a> bitField0_ |= 0x00000001 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private com . google . protobuf . <RARE_TOKEN> < </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location , io . netty . example . localtime . LocalTimeProtocol . Location . Builder , io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > locationBuilder_ ; </a> 0
<a> public java . util . List < io . netty . example . localtime . LocalTimeProtocol . Location > <RARE_TOKEN> ( ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> return java . util . Collections . <RARE_TOKEN> ( location_ ) ; </a> 0
<a> } else { </a> 0
<a> return locationBuilder_ . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> return location_ . size ( ) ; </a> 0
<a> } else { </a> 0
<a> return locationBuilder_ . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . Location <RARE_TOKEN> ( int index ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> return location_ . get ( index ) ; </a> 0
<a> } else { </a> 0
<a> return locationBuilder_ . getMessage ( index ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> int index , io . netty . example . localtime . LocalTimeProtocol . Location value ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> location_ . set ( index , value ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> locationBuilder_ . <RARE_TOKEN> ( index , value ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> int index , io . netty . example . localtime . LocalTimeProtocol . Location . Builder <RARE_TOKEN> ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> location_ . set ( index , <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> locationBuilder_ . <RARE_TOKEN> ( index , <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( io . netty . example . localtime . LocalTimeProtocol . Location value ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> location_ . add ( value ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> locationBuilder_ . <RARE_TOKEN> ( value ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> int index , io . netty . example . localtime . LocalTimeProtocol . Location value ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> location_ . add ( index , value ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> locationBuilder_ . <RARE_TOKEN> ( index , value ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location . Builder <RARE_TOKEN> ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> location_ . add ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> locationBuilder_ . <RARE_TOKEN> ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> int index , io . netty . example . localtime . LocalTimeProtocol . Location . Builder <RARE_TOKEN> ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> location_ . add ( index , <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> locationBuilder_ . <RARE_TOKEN> ( index , <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> java . lang . <RARE_TOKEN> < ? extends io . netty . example . localtime . LocalTimeProtocol . Location > values ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> super . <RARE_TOKEN> ( values , location_ ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> locationBuilder_ . <RARE_TOKEN> ( values ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> location_ = java . util . Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> locationBuilder_ . clear ( ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( int index ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> location_ . remove ( index ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> locationBuilder_ . remove ( index ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . Location . Builder <RARE_TOKEN> ( </a> 0
<a> int index ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( </a> 0
<a> int index ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> return location_ . get ( index ) ; } else { </a> 0
<a> return locationBuilder_ . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public java . util . List < ? extends io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> if ( locationBuilder_ != null ) { </a> 0
<a> return locationBuilder_ . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> return java . util . Collections . <RARE_TOKEN> ( location_ ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . Location . Builder <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . Location . Builder <RARE_TOKEN> ( </a> 0
<a> int index ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( </a> 0
<a> index , io . netty . example . localtime . LocalTimeProtocol . Location . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public java . util . List < io . netty . example . localtime . LocalTimeProtocol . Location . Builder > </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private com . google . protobuf . <RARE_TOKEN> < </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location , io . netty . example . localtime . LocalTimeProtocol . Location . Builder , io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> if ( locationBuilder_ == null ) { </a> 0
<a> locationBuilder_ = new com . google . protobuf . <RARE_TOKEN> < </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location , io . netty . example . localtime . LocalTimeProtocol . Location . Builder , io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > ( </a> 0
<a> location_ , </a> 0
<a> ( bitField0_ & 0x00000001 ) == 0x00000001 , </a> 0
<a> <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> ( ) ) ; </a> 0
<a> location_ = null ; </a> 0
<a> } </a> 0
<a> return locationBuilder_ ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> = new Locations ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> </a> 0
<a> extends com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static final class LocalTime extends </a> 0
<a> com . google . protobuf . <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private LocalTime ( Builder builder ) { </a> 0
<a> super ( builder ) ; </a> 0
<a> } </a> 0
<a> private LocalTime ( boolean <RARE_TOKEN> ) { } </a> 0
<a> private static final LocalTime <RARE_TOKEN> ; </a> 0
<a> public static LocalTime <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public LocalTime <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private int bitField0_ ; </a> 0
<a> public static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & 0x00000001 ) == 0x00000001 ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final int <RARE_TOKEN> = 2 ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final int <RARE_TOKEN> = 4 ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final int <RARE_TOKEN> = 5 ; </a> 0
<a> private io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final int <RARE_TOKEN> = 6 ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final int <RARE_TOKEN> = 7 ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final int <RARE_TOKEN> = 8 ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> private byte <RARE_TOKEN> = - 1 ; </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != - 1 ) { </a> 0
<a> return <RARE_TOKEN> == 1 ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 1 ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( com . google . protobuf . <RARE_TOKEN> output ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ( bitField0_ & 0x00000001 ) == 0x00000001 ) { </a> 0
<a> output . <RARE_TOKEN> ( 1 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> output . <RARE_TOKEN> ( 2 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> output . <RARE_TOKEN> ( 4 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> output . <RARE_TOKEN> ( 5 , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> output . <RARE_TOKEN> ( 6 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> output . <RARE_TOKEN> ( 7 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> output . <RARE_TOKEN> ( 8 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( output ) ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> = - 1 ; </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> int size = <RARE_TOKEN> ; </a> 0
<a> if ( size != - 1 ) { </a> 0
<a> return size ; </a> 0
<a> } </a> 0
<a> size = 0 ; </a> 0
<a> if ( ( bitField0_ & 0x00000001 ) == 0x00000001 ) { </a> 0
<a> size += com . google . protobuf . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( 1 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> size += com . google . protobuf . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( 2 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> size += com . google . protobuf . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( 4 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> size += com . google . protobuf . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( 5 , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> size += com . google . protobuf . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( 6 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> size += com . google . protobuf . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( 7 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> size += com . google . protobuf . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( 8 , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> size += <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = size ; </a> 0
<a> return size ; </a> 0
<a> } </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> @ java . lang . Override </a> 0
<a> protected java . lang . Object <RARE_TOKEN> ( ) </a> 0
<a> throws java . io . <RARE_TOKEN> { </a> 0
<a> return super . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> data ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> data , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( byte [ ] data ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( </a> 0
<a> byte [ ] data , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( java . io . InputStream input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( </a> 0
<a> java . io . InputStream input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( java . io . InputStream input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> Builder builder = newBuilder ( ) ; </a> 0
<a> if ( builder . <RARE_TOKEN> ( input ) ) { </a> 0
<a> return builder . buildParsed ( ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( </a> 0
<a> java . io . InputStream input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> Builder builder = newBuilder ( ) ; </a> 0
<a> if ( builder . <RARE_TOKEN> ( input , extensionRegistry ) ) { </a> 0
<a> return builder . buildParsed ( ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static Builder newBuilder ( ) { return Builder . create ( ) ; } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { return newBuilder ( ) ; } </a> 0
<a> public static Builder newBuilder ( io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ) { </a> 0
<a> return newBuilder ( ) . mergeFrom ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { return newBuilder ( this ) ; } </a> 0
<a> @ java . lang . Override </a> 0
<a> protected Builder <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> parent ) { </a> 0
<a> Builder builder = new Builder ( parent ) ; </a> 0
<a> return builder ; </a> 0
<a> } </a> 0
<a> public static final class Builder extends </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . Builder < Builder > </a> 0
<a> implements io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> { </a> 0
<a> public static final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private Builder ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private Builder ( <RARE_TOKEN> parent ) { </a> 0
<a> super ( parent ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static Builder create ( ) { </a> 0
<a> return new Builder ( ) ; </a> 0
<a> } </a> 0
<a> public Builder clear ( ) { </a> 0
<a> super . clear ( ) ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> return create ( ) . mergeFrom ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . LocalTime . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . LocalTime . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . LocalTime build ( ) { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime result = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! result . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw <RARE_TOKEN> ( result ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> private io . netty . example . localtime . LocalTimeProtocol . LocalTime buildParsed ( ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime result = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! result . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw <RARE_TOKEN> ( </a> 0
<a> result ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( ) { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime result = new io . netty . example . localtime . LocalTimeProtocol . LocalTime ( this ) ; </a> 0
<a> int <RARE_TOKEN> = bitField0_ ; </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 0
<a> if ( ( <RARE_TOKEN> & 0x00000001 ) == 0x00000001 ) { </a> 0
<a> <RARE_TOKEN> |= 0x00000001 ; </a> 0
<a> } </a> 0
<a> result . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( ( <RARE_TOKEN> & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> |= <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> result . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( ( <RARE_TOKEN> & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> |= <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> result . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( ( <RARE_TOKEN> & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> |= <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> result . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( ( <RARE_TOKEN> & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> |= <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> result . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( ( <RARE_TOKEN> & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> |= <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> result . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( ( <RARE_TOKEN> & <RARE_TOKEN> ) == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> |= <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> result . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> result . bitField0_ = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( com . google . protobuf . <RARE_TOKEN> other ) { </a> 0
<a> if ( other instanceof io . netty . example . localtime . LocalTimeProtocol . LocalTime ) { </a> 0
<a> return mergeFrom ( ( io . netty . example . localtime . LocalTimeProtocol . LocalTime ) other ) ; </a> 0
<a> } else { </a> 0
<a> super . mergeFrom ( other ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( io . netty . example . localtime . LocalTimeProtocol . LocalTime other ) { </a> 0
<a> if ( other == io . netty . example . localtime . LocalTimeProtocol . LocalTime . <RARE_TOKEN> ( ) ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> if ( other . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( other . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( other . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( other . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( other . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( other . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( other . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . Builder <RARE_TOKEN> = </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . newBuilder ( </a> 0
<a> <RARE_TOKEN> ( ) ) ; </a> 0
<a> while ( true ) { </a> 0
<a> int <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case 0 : </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> default : { </a> 0
<a> if ( ! <RARE_TOKEN> ( input , <RARE_TOKEN> , </a> 0
<a> extensionRegistry , <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 8 : { </a> 0
<a> bitField0_ |= 0x00000001 ; </a> 0
<a> <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 16 : { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 32 : { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> int <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> value = io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> . valueOf ( <RARE_TOKEN> ) ; </a> 0
<a> if ( value == null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 5 , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case <RARE_TOKEN> : { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private int bitField0_ ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & 0x00000001 ) == 0x00000001 ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( int value ) { </a> 0
<a> bitField0_ |= 0x00000001 ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( int value ) { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( int value ) { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> private io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> = io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> value ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( ) ; </a> 0
<a> } </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( int value ) { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( int value ) { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( bitField0_ & <RARE_TOKEN> ) == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( int value ) { </a> 0
<a> bitField0_ |= <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = value ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> bitField0_ = bitField0_ & ~ <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> = new LocalTime ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> </a> 0
<a> extends com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> java . util . List < io . netty . example . localtime . LocalTimeProtocol . LocalTime > </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( int index ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> java . util . List < ? extends io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( </a> 0
<a> int index ) ; </a> 0
<a> } </a> 0
<a> public static final class LocalTimes extends </a> 0
<a> com . google . protobuf . <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private LocalTimes ( Builder builder ) { </a> 0
<a> super ( builder ) ; </a> 0
<a> } </a> 0
<a> private LocalTimes ( boolean <RARE_TOKEN> ) { } </a> 0
<a> private static final LocalTimes <RARE_TOKEN> ; </a> 0
<a> public static LocalTimes <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public LocalTimes <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static final int <RARE_TOKEN> = 1 ; </a> 0
<a> private java . util . List < io . netty . example . localtime . LocalTimeProtocol . LocalTime > localTime_ ; </a> 0
<a> public java . util . List < io . netty . example . localtime . LocalTimeProtocol . LocalTime > <RARE_TOKEN> ( ) { </a> 0
<a> return localTime_ ; </a> 0
<a> } </a> 0
<a> public java . util . List < ? extends io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return localTime_ ; </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return localTime_ . size ( ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( int index ) { </a> 0
<a> return localTime_ . get ( index ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( </a> 0
<a> int index ) { </a> 0
<a> return localTime_ . get ( index ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> localTime_ = java . util . Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private byte <RARE_TOKEN> = - 1 ; </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> byte <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != - 1 ) { </a> 0
<a> return <RARE_TOKEN> == 1 ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ( ) ; i ++ ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( i ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 1 ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( com . google . protobuf . <RARE_TOKEN> output ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> for ( int i = 0 ; i < localTime_ . size ( ) ; i ++ ) { </a> 0
<a> output . <RARE_TOKEN> ( 1 , localTime_ . get ( i ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( output ) ; </a> 0
<a> } </a> 0
<a> private int <RARE_TOKEN> = - 1 ; </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> int size = <RARE_TOKEN> ; </a> 0
<a> if ( size != - 1 ) { </a> 0
<a> return size ; </a> 0
<a> } </a> 0
<a> size = 0 ; </a> 0
<a> for ( int i = 0 ; i < localTime_ . size ( ) ; i ++ ) { </a> 0
<a> size += com . google . protobuf . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( 1 , localTime_ . get ( i ) ) ; </a> 0
<a> } </a> 0
<a> size += <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = size ; </a> 0
<a> return size ; </a> 0
<a> } </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> @ java . lang . Override </a> 0
<a> protected java . lang . Object <RARE_TOKEN> ( ) </a> 0
<a> throws java . io . <RARE_TOKEN> { </a> 0
<a> return super . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> data ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> data , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( byte [ ] data ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( </a> 0
<a> byte [ ] data , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> return newBuilder ( ) . mergeFrom ( data , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( java . io . InputStream input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( </a> 0
<a> java . io . InputStream input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( java . io . InputStream input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> Builder builder = newBuilder ( ) ; </a> 0
<a> if ( builder . <RARE_TOKEN> ( input ) ) { </a> 0
<a> return builder . buildParsed ( ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( </a> 0
<a> java . io . InputStream input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> Builder builder = newBuilder ( ) ; </a> 0
<a> if ( builder . <RARE_TOKEN> ( input , extensionRegistry ) ) { </a> 0
<a> return builder . buildParsed ( ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input ) . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> return newBuilder ( ) . mergeFrom ( input , extensionRegistry ) </a> 0
<a> . buildParsed ( ) ; </a> 0
<a> } </a> 0
<a> public static Builder newBuilder ( ) { return Builder . create ( ) ; } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { return newBuilder ( ) ; } </a> 0
<a> public static Builder newBuilder ( io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ) { </a> 0
<a> return newBuilder ( ) . mergeFrom ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { return newBuilder ( this ) ; } </a> 0
<a> @ java . lang . Override </a> 0
<a> protected Builder <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> parent ) { </a> 0
<a> Builder builder = new Builder ( parent ) ; </a> 0
<a> return builder ; </a> 0
<a> } </a> 0
<a> public static final class Builder extends </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . Builder < Builder > </a> 0
<a> implements io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> { </a> 0
<a> public static final com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private Builder ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private Builder ( <RARE_TOKEN> parent ) { </a> 0
<a> super ( parent ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static Builder create ( ) { </a> 0
<a> return new Builder ( ) ; </a> 0
<a> } </a> 0
<a> public Builder clear ( ) { </a> 0
<a> super . clear ( ) ; </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> localTime_ = java . util . Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> } else { </a> 0
<a> localTimeBuilder_ . clear ( ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> return create ( ) . mergeFrom ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . LocalTimes . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( ) { </a> 0
<a> return io . netty . example . localtime . LocalTimeProtocol . LocalTimes . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . LocalTimes build ( ) { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTimes result = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! result . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw <RARE_TOKEN> ( result ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> private io . netty . example . localtime . LocalTimeProtocol . LocalTimes buildParsed ( ) </a> 0
<a> throws com . google . protobuf . <RARE_TOKEN> { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTimes result = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! result . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw <RARE_TOKEN> ( </a> 0
<a> result ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . LocalTimes <RARE_TOKEN> ( ) { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTimes result = new io . netty . example . localtime . LocalTimeProtocol . LocalTimes ( this ) ; </a> 0
<a> int <RARE_TOKEN> = bitField0_ ; </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> if ( ( bitField0_ & 0x00000001 ) == 0x00000001 ) { </a> 0
<a> localTime_ = java . util . Collections . <RARE_TOKEN> ( localTime_ ) ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> } </a> 0
<a> result . localTime_ = localTime_ ; </a> 0
<a> } else { </a> 0
<a> result . localTime_ = localTimeBuilder_ . build ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( com . google . protobuf . <RARE_TOKEN> other ) { </a> 0
<a> if ( other instanceof io . netty . example . localtime . LocalTimeProtocol . LocalTimes ) { </a> 0
<a> return mergeFrom ( ( io . netty . example . localtime . LocalTimeProtocol . LocalTimes ) other ) ; </a> 0
<a> } else { </a> 0
<a> super . mergeFrom ( other ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( io . netty . example . localtime . LocalTimeProtocol . LocalTimes other ) { </a> 0
<a> if ( other == io . netty . example . localtime . LocalTimeProtocol . LocalTimes . <RARE_TOKEN> ( ) ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> if ( ! other . localTime_ . isEmpty ( ) ) { </a> 0
<a> if ( localTime_ . isEmpty ( ) ) { </a> 0
<a> localTime_ = other . localTime_ ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> localTime_ . <RARE_TOKEN> ( other . localTime_ ) ; </a> 0
<a> } </a> 0
<a> onChanged ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( ! other . localTime_ . isEmpty ( ) ) { </a> 0
<a> if ( localTimeBuilder_ . isEmpty ( ) ) { </a> 0
<a> localTimeBuilder_ . <RARE_TOKEN> ( ) ; </a> 0
<a> localTimeBuilder_ = null ; </a> 0
<a> localTime_ = other . localTime_ ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> localTimeBuilder_ = </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ? </a> 0
<a> <RARE_TOKEN> ( ) : null ; </a> 0
<a> } else { </a> 0
<a> localTimeBuilder_ . <RARE_TOKEN> ( other . localTime_ ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( other . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final boolean <RARE_TOKEN> ( ) { </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ( ) ; i ++ ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( i ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public Builder mergeFrom ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> input , </a> 0
<a> com . google . protobuf . <RARE_TOKEN> extensionRegistry ) </a> 0
<a> throws java . io . IOException { </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . Builder <RARE_TOKEN> = </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . newBuilder ( </a> 0
<a> <RARE_TOKEN> ( ) ) ; </a> 0
<a> while ( true ) { </a> 0
<a> int <RARE_TOKEN> = input . <RARE_TOKEN> ( ) ; </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case 0 : </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> default : { </a> 0
<a> if ( ! <RARE_TOKEN> ( input , <RARE_TOKEN> , </a> 0
<a> extensionRegistry , <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 10 : { </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder <RARE_TOKEN> = io . netty . example . localtime . LocalTimeProtocol . LocalTime . newBuilder ( ) ; </a> 0
<a> input . <RARE_TOKEN> ( <RARE_TOKEN> , extensionRegistry ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private int bitField0_ ; </a> 0
<a> private java . util . List < io . netty . example . localtime . LocalTimeProtocol . LocalTime > localTime_ = </a> 0
<a> java . util . Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! ( ( bitField0_ & 0x00000001 ) == 0x00000001 ) ) { </a> 0
<a> localTime_ = new java . util . ArrayList < io . netty . example . localtime . LocalTimeProtocol . LocalTime > ( localTime_ ) ; </a> 0
<a> bitField0_ |= 0x00000001 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private com . google . protobuf . <RARE_TOKEN> < </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime , io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder , io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > localTimeBuilder_ ; </a> 0
<a> public java . util . List < io . netty . example . localtime . LocalTimeProtocol . LocalTime > <RARE_TOKEN> ( ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> return java . util . Collections . <RARE_TOKEN> ( localTime_ ) ; </a> 0
<a> } else { </a> 0
<a> return localTimeBuilder_ . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> return localTime_ . size ( ) ; </a> 0
<a> } else { </a> 0
<a> return localTimeBuilder_ . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . LocalTime <RARE_TOKEN> ( int index ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> return localTime_ . get ( index ) ; </a> 0
<a> } else { </a> 0
<a> return localTimeBuilder_ . getMessage ( index ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> int index , io . netty . example . localtime . LocalTimeProtocol . LocalTime value ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> localTime_ . set ( index , value ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> localTimeBuilder_ . <RARE_TOKEN> ( index , value ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> int index , io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder <RARE_TOKEN> ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> localTime_ . set ( index , <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> localTimeBuilder_ . <RARE_TOKEN> ( index , <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( io . netty . example . localtime . LocalTimeProtocol . LocalTime value ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> localTime_ . add ( value ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> localTimeBuilder_ . <RARE_TOKEN> ( value ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> int index , io . netty . example . localtime . LocalTimeProtocol . LocalTime value ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> throw new NullPointerException ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> localTime_ . add ( index , value ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> localTimeBuilder_ . <RARE_TOKEN> ( index , value ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder <RARE_TOKEN> ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> localTime_ . add ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> localTimeBuilder_ . <RARE_TOKEN> ( <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> int index , io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder <RARE_TOKEN> ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> localTime_ . add ( index , <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> localTimeBuilder_ . <RARE_TOKEN> ( index , <RARE_TOKEN> . build ( ) ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( </a> 0
<a> java . lang . <RARE_TOKEN> < ? extends io . netty . example . localtime . LocalTimeProtocol . LocalTime > values ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> super . <RARE_TOKEN> ( values , localTime_ ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> localTimeBuilder_ . <RARE_TOKEN> ( values ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> localTime_ = java . util . Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> bitField0_ = bitField0_ & ~ 0x00000001 ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> localTimeBuilder_ . clear ( ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder <RARE_TOKEN> ( int index ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> localTime_ . remove ( index ) ; </a> 0
<a> onChanged ( ) ; </a> 0
<a> } else { </a> 0
<a> localTimeBuilder_ . remove ( index ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder <RARE_TOKEN> ( </a> 0
<a> int index ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> <RARE_TOKEN> ( </a> 0
<a> int index ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> return localTime_ . get ( index ) ; } else { </a> 0
<a> return localTimeBuilder_ . <RARE_TOKEN> ( index ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public java . util . List < ? extends io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> if ( localTimeBuilder_ != null ) { </a> 0
<a> return localTimeBuilder_ . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> return java . util . Collections . <RARE_TOKEN> ( localTime_ ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder <RARE_TOKEN> ( </a> 0
<a> int index ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( </a> 0
<a> index , io . netty . example . localtime . LocalTimeProtocol . LocalTime . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public java . util . List < io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder > </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private com . google . protobuf . <RARE_TOKEN> < </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime , io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder , io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> if ( localTimeBuilder_ == null ) { </a> 0
<a> localTimeBuilder_ = new com . google . protobuf . <RARE_TOKEN> < </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime , io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder , io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> > ( </a> 0
<a> localTime_ , </a> 0
<a> ( bitField0_ & 0x00000001 ) == 0x00000001 , </a> 0
<a> <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> ( ) ) ; </a> 0
<a> localTime_ = null ; </a> 0
<a> } </a> 0
<a> return localTimeBuilder_ ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> = new LocalTimes ( true ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> private static </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> private static com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> private static </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> private static com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> private static </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> private static com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> private static </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> public static com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> <RARE_TOKEN> ; </a> 0
<a> static { </a> 0
<a> java . lang . String [ ] <RARE_TOKEN> = { </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> + </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } ; </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> new com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ( ) { </a> 0
<a> public com . google . protobuf . <RARE_TOKEN> <RARE_TOKEN> ( </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . get ( 0 ) ; </a> 0
<a> <RARE_TOKEN> = new </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> new java . lang . String [ ] { <RARE_TOKEN> , <RARE_TOKEN> , } , </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location . class , </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Location . Builder . class ) ; </a> 0
<a> <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . get ( 1 ) ; </a> 0
<a> <RARE_TOKEN> = new </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> new java . lang . String [ ] { <RARE_TOKEN> , } , </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Locations . class , </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . Locations . Builder . class ) ; </a> 0
<a> <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . get ( 2 ) ; </a> 0
<a> <RARE_TOKEN> = new </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> new java . lang . String [ ] { <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , } , </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime . class , </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTime . Builder . class ) ; </a> 0
<a> <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) . get ( 3 ) ; </a> 0
<a> <RARE_TOKEN> = new </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> new java . lang . String [ ] { <RARE_TOKEN> , } , </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTimes . class , </a> 0
<a> io . netty . example . localtime . LocalTimeProtocol . LocalTimes . Builder . class ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> </a> 0
<a> . <RARE_TOKEN> ( <RARE_TOKEN> , </a> 0
<a> new com . google . protobuf . <RARE_TOKEN> . <RARE_TOKEN> [ ] { </a> 0
<a> } , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . localtime ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( int port ) { </a> 0
<a> this . port = port ; </a> 1
<a> } </a> 0
<a> public void run ( ) throws Exception { </a> 1
<a> ServerBootstrap b = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( port ) </a> 0
<a> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> b . bind ( ) . sync ( ) . channel ( ) . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> int port ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 1
<a> port = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . localtime ; </a> 0
<a> import static java . util . <RARE_TOKEN> . * ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> import io . netty . example . localtime . LocalTimeProtocol . <RARE_TOKEN> ; </a> 0
<a> import io . netty . example . localtime . LocalTimeProtocol . LocalTime ; </a> 0
<a> import io . netty . example . localtime . LocalTimeProtocol . LocalTimes ; </a> 0
<a> import io . netty . example . localtime . LocalTimeProtocol . Location ; </a> 0
<a> import io . netty . example . localtime . LocalTimeProtocol . Locations ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . logging . Level ; </a> 1
<a> import java . util . logging . Logger ; </a> 1
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < Locations > { </a> 0
<a> private static final Logger logger = Logger . getLogger ( </a> 1
<a> <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , Locations <RARE_TOKEN> ) throws Exception { </a> 1
<a> long currentTime = System . currentTimeMillis ( ) ; </a> 0
<a> LocalTimes . Builder builder = LocalTimes . newBuilder ( ) ; </a> 0
<a> for ( Location l : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> toString ( l . <RARE_TOKEN> ( ) ) + <RARE_TOKEN> + l . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( currentTime ) ; </a> 0
<a> builder . <RARE_TOKEN> ( LocalTime . newBuilder ( ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . get ( <RARE_TOKEN> ) ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . get ( <RARE_TOKEN> ) + 1 ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . get ( <RARE_TOKEN> ) ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . valueOf ( <RARE_TOKEN> . get ( <RARE_TOKEN> ) ) ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . get ( <RARE_TOKEN> ) ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . get ( <RARE_TOKEN> ) ) . </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . get ( <RARE_TOKEN> ) ) . build ( ) ) ; </a> 0
<a> } </a> 0
<a> ctx . write ( builder . build ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> logger . log ( </a> 1
<a> Level . <RARE_TOKEN> , </a> 1
<a> "Unexpected exception from <RARE_TOKEN> , cause ) ; </a> 1
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> private static String toString ( <RARE_TOKEN> c ) { </a> 0
<a> return c . name ( ) . charAt ( 0 ) + c . name ( ) . <RARE_TOKEN> ( ) . substring ( 1 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . localtime ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . protobuf . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . protobuf . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . protobuf . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . protobuf . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInitializer < SocketChannel > { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 0
<a> ChannelPipeline p = ch . pipeline ( ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( LocalTimeProtocol . Locations . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . logging . Level ; </a> 1
<a> import java . util . logging . Logger ; </a> 1
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < List < Integer > > { </a> 1
<a> private static final Logger logger = Logger . getLogger ( </a> 1
<a> <RARE_TOKEN> . class . getName ( ) ) ; </a> 1
<a> private final List < Integer > <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 1
<a> throw new IllegalArgumentException ( </a> 1
<a> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = new ArrayList < Integer > ( <RARE_TOKEN> ) ; </a> 1
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 1
<a> <RARE_TOKEN> . add ( Integer . valueOf ( i ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> ctx . write ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , List < Integer > msg ) throws Exception { </a> 1
<a> ctx . write ( msg ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( </a> 1
<a> ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> logger . log ( </a> 1
<a> Level . <RARE_TOKEN> , </a> 1
<a> "Unexpected exception from <RARE_TOKEN> , cause ) ; </a> 1
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> import io . netty . example . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( int port ) { </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 0
<a> public void run ( ) throws Exception { </a> 1
<a> ServerBootstrap b = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( port ) </a> 0
<a> . <RARE_TOKEN> ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 0
<a> ch . pipeline ( ) . addLast ( </a> 1
<a> new <RARE_TOKEN> ( ) , </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( null ) ) , </a> 0
<a> new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> b . bind ( ) . sync ( ) . channel ( ) . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> int port ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 1
<a> port = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import java . util . List ; </a> 1
<a> import java . util . logging . Level ; </a> 0
<a> import java . util . logging . Logger ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < List < Integer > > { </a> 1
<a> private static final Logger logger = Logger . getLogger ( </a> 0
<a> <RARE_TOKEN> . class . getName ( ) ) ; </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> ChannelHandlerContext ctx , List < Integer > msg ) throws Exception { </a> 1
<a> ctx . write ( msg ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( </a> 0
<a> ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> logger . log ( </a> 0
<a> Level . <RARE_TOKEN> , </a> 0
<a> "Unexpected exception from <RARE_TOKEN> , cause ) ; </a> 1
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( int port ) { </a> 0
<a> this . port = port ; </a> 1
<a> } </a> 1
<a> public void run ( ) throws Exception { </a> 1
<a> ServerBootstrap b = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( port ) </a> 0
<a> . <RARE_TOKEN> ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 0
<a> ch . pipeline ( ) . addLast ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> b . bind ( ) . sync ( ) . channel ( ) . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> int port ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 1
<a> port = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . example . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . example . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . example . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . example . http . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . example . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . ZlibWrapper ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . http . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( true , true ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( boolean <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception { </a> 1
<a> if ( in . readableBytes ( ) < 2 ) { </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> final int <RARE_TOKEN> = in . <RARE_TOKEN> ( in . readerIndex ( ) ) ; </a> 0
<a> final int <RARE_TOKEN> = in . <RARE_TOKEN> ( in . readerIndex ( ) + 1 ) ; </a> 0
<a> if ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 1
<a> <RARE_TOKEN> ( ctx ) ; </a> 1
<a> } else if ( <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) { </a> 1
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } else if ( <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } else if ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } else { </a> 0
<a> in . clear ( ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> ctx . <RARE_TOKEN> ( ) . writeBytes ( in ) ; </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 1
<a> case 20 : case <RARE_TOKEN> : case <RARE_TOKEN> : case 23 : case <RARE_TOKEN> : </a> 1
<a> return true ; </a> 1
<a> default : </a> 1
<a> return <RARE_TOKEN> >= <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> return </a> 0
<a> <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> ChannelPipeline p = ctx . pipeline ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( false , <RARE_TOKEN> ) ) ; </a> 0
<a> p . remove ( this ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> ChannelPipeline p = ctx . pipeline ( ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ZlibWrapper . <RARE_TOKEN> ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ZlibWrapper . <RARE_TOKEN> ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> , false ) ) ; </a> 0
<a> p . remove ( this ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> ChannelPipeline p = ctx . pipeline ( ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> p . remove ( this ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> ChannelPipeline p = ctx . pipeline ( ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> p . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> p . remove ( this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final int <RARE_TOKEN> ; </a> 1
<a> private final String <RARE_TOKEN> ; </a> 1
<a> private final int <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , String <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public void run ( ) throws Exception { </a> 1
<a> System . <RARE_TOKEN> . println ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> + <RARE_TOKEN> + " to " + </a> 1
<a> <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> + " <RARE_TOKEN> ) ; </a> 1
<a> ServerBootstrap b = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 1
<a> . localAddress ( <RARE_TOKEN> ) </a> 1
<a> . <RARE_TOKEN> ( new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> b . bind ( ) . sync ( ) . channel ( ) . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 0
<a> if ( args . length != 3 ) { </a> 0
<a> System . <RARE_TOKEN> . println ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> . class . getSimpleName ( ) + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = Integer . parseInt ( args [ 0 ] ) ; </a> 0
<a> String <RARE_TOKEN> = args [ 1 ] ; </a> 0
<a> int <RARE_TOKEN> = Integer . parseInt ( args [ 2 ] ) ; </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) . run ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private final Channel <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Channel <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> ctx . flush ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception { </a> 0
<a> ByteBuf out = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> out . <RARE_TOKEN> ( ) ; </a> 0
<a> out . writeBytes ( in ) ; </a> 1
<a> in . clear ( ) ; </a> 0
<a> <RARE_TOKEN> . flush ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> cause . printStackTrace ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ctx . channel ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelOption ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( int port ) { </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 1
<a> public void run ( ) throws Exception { </a> 1
<a> Bootstrap b = new Bootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( new InetSocketAddress ( 0 ) ) </a> 0
<a> . option ( ChannelOption . <RARE_TOKEN> , true ) </a> 0
<a> . handler ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> Channel ch = b . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> ch . write ( new <RARE_TOKEN> ( </a> 0
<a> Unpooled . copiedBuffer ( <RARE_TOKEN> , CharsetUtil . <RARE_TOKEN> ) , </a> 0
<a> new InetSocketAddress ( <RARE_TOKEN> , port ) ) ) ; </a> 1
<a> if ( ! ch . <RARE_TOKEN> ( ) . await ( <RARE_TOKEN> ) ) { </a> 0
<a> System . <RARE_TOKEN> . println ( <RARE_TOKEN> request <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> int port ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 1
<a> port = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < <RARE_TOKEN> > { </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx , <RARE_TOKEN> msg ) </a> 1
<a> throws Exception { </a> 1
<a> String response = msg . data ( ) . toString ( CharsetUtil . <RARE_TOKEN> ) ; </a> 1
<a> if ( response . startsWith ( <RARE_TOKEN> " ) ) { </a> 0
<a> System . out . println ( <RARE_TOKEN> of the <RARE_TOKEN> " + response . substring ( 6 ) ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( </a> 0
<a> ChannelHandlerContext ctx , Throwable cause ) </a> 0
<a> throws Exception { </a> 0
<a> cause . printStackTrace ( ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . channel . ChannelOption ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( int port ) { </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 1
<a> public void run ( ) throws Exception { </a> 1
<a> Bootstrap b = new Bootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( new InetSocketAddress ( port ) ) </a> 0
<a> . option ( ChannelOption . <RARE_TOKEN> , true ) </a> 0
<a> . handler ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> b . bind ( ) . sync ( ) . channel ( ) . <RARE_TOKEN> ( ) . await ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> int port ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 1
<a> port = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . util . Random ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < <RARE_TOKEN> > { </a> 1
<a> private static final Random random = new Random ( ) ; </a> 0
<a> private static final String [ ] <RARE_TOKEN> = { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> is <RARE_TOKEN> <RARE_TOKEN> is <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> in the <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> is the <RARE_TOKEN> of the <RARE_TOKEN> , </a> 0
<a> } ; </a> 0
<a> private static String <RARE_TOKEN> ( ) { </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> synchronized ( random ) { </a> 0
<a> <RARE_TOKEN> = random . nextInt ( <RARE_TOKEN> . length ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx , <RARE_TOKEN> msg ) </a> 1
<a> throws Exception { </a> 1
<a> if ( msg . data ( ) . toString ( CharsetUtil . <RARE_TOKEN> ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> ctx . write ( new <RARE_TOKEN> ( </a> 0
<a> Unpooled . copiedBuffer ( <RARE_TOKEN> " + <RARE_TOKEN> ( ) , CharsetUtil . <RARE_TOKEN> ) , </a> 1
<a> msg . remoteAddress ( ) ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( </a> 1
<a> ChannelHandlerContext ctx , Throwable cause ) </a> 1
<a> throws Exception { </a> 1
<a> cause . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> import io . netty . example . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final String host ; </a> 1
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( String host , int port ) { </a> 0
<a> this . host = host ; </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 1
<a> public void run ( ) throws Exception { </a> 1
<a> Bootstrap b = new Bootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . remoteAddress ( host , port ) </a> 0
<a> . handler ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> Channel ch = b . connect ( ) . sync ( ) . channel ( ) ; </a> 0
<a> ChannelFuture <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> in = new <RARE_TOKEN> ( new <RARE_TOKEN> ( System . in ) ) ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> String <RARE_TOKEN> = in . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = ch . write ( <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> ch . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . sync ( ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 0
<a> if ( args . length != 2 ) { </a> 0
<a> System . <RARE_TOKEN> . println ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> . class . getSimpleName ( ) + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String host = args [ 0 ] ; </a> 0
<a> int port = Integer . parseInt ( args [ 1 ] ) ; </a> 0
<a> new <RARE_TOKEN> ( host , port ) . run ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import java . util . logging . Level ; </a> 1
<a> import java . util . logging . Logger ; </a> 1
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < String > { </a> 1
<a> private static final Logger logger = Logger . getLogger ( </a> 1
<a> <RARE_TOKEN> . class . getName ( ) ) ; </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , String msg ) throws Exception { </a> 1
<a> System . <RARE_TOKEN> . println ( msg ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> logger . log ( </a> 1
<a> Level . <RARE_TOKEN> , </a> 1
<a> "Unexpected exception from <RARE_TOKEN> , cause ) ; </a> 1
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . string . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . string . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInitializer < SocketChannel > { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 0
<a> ChannelPipeline pipeline = ch . pipeline ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> [ 0 ] ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> , String <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> System . <RARE_TOKEN> . println ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> [ 0 ] . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> , String <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> System . <RARE_TOKEN> . println ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> [ 0 ] . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public static <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> [ ] { <RARE_TOKEN> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) </a> 0
<a> throws <RARE_TOKEN> { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import java . util . logging . Level ; </a> 1
<a> import java . util . logging . Logger ; </a> 1
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < String > { </a> 1
<a> private static final Logger logger = Logger . getLogger ( </a> 0
<a> <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , String msg ) throws Exception { </a> 1
<a> System . <RARE_TOKEN> . println ( msg ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> logger . log ( </a> 1
<a> Level . <RARE_TOKEN> , </a> 1
<a> "Unexpected exception from <RARE_TOKEN> , cause ) ; </a> 1
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . string . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . string . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelInitializer < SocketChannel > { </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 1
<a> ChannelPipeline pipeline = ch . pipeline ( ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final int port ; </a> 1
<a> public <RARE_TOKEN> ( int port ) { </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 0
<a> public void run ( ) throws Exception { </a> 1
<a> ServerBootstrap b = new ServerBootstrap ( ) ; </a> 0
<a> try { </a> 0
<a> b . group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( port ) </a> 0
<a> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> b . bind ( ) . sync ( ) . channel ( ) . <RARE_TOKEN> ( ) . sync ( ) ; </a> 0
<a> } finally { </a> 0
<a> b . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 1
<a> int port ; </a> 1
<a> if ( args . length > 0 ) { </a> 1
<a> port = Integer . parseInt ( args [ 0 ] ) ; </a> 1
<a> } else { </a> 1
<a> port = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> new <RARE_TOKEN> ( port ) . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import java . net . InetAddress ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . logging . Level ; </a> 1
<a> import java . util . logging . Logger ; </a> 1
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < String > { </a> 1
<a> private static final Logger logger = Logger . getLogger ( </a> 0
<a> <RARE_TOKEN> . class . getName ( ) ) ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> ctx . write ( </a> 1
<a> <RARE_TOKEN> to " + InetAddress . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) + <RARE_TOKEN> ) ; </a> 1
<a> ctx . write ( <RARE_TOKEN> is " + new Date ( ) + " <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , String request ) throws Exception { </a> 1
<a> String response ; </a> 0
<a> boolean close = false ; </a> 0
<a> if ( request . length ( ) == 0 ) { </a> 0
<a> response = <RARE_TOKEN> type <RARE_TOKEN> ; </a> 0
<a> } else if ( request . <RARE_TOKEN> ( ) . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> response = <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> close = true ; </a> 0
<a> } else { </a> 0
<a> response = <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + request + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> ChannelFuture future = ctx . write ( response ) ; </a> 0
<a> if ( close ) { </a> 0
<a> future . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> logger . log ( </a> 1
<a> Level . <RARE_TOKEN> , </a> 1
<a> "Unexpected exception from <RARE_TOKEN> , cause ) ; </a> 1
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 1
<a> import io . netty . channel . ChannelPipeline ; </a> 1
<a> import io . netty . channel . socket . SocketChannel ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . string . <RARE_TOKEN> ; </a> 1
<a> import io . netty . handler . codec . string . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> extends ChannelInitializer < SocketChannel > { </a> 1
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 1
<a> ChannelPipeline pipeline = ch . pipeline ( ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . timeout . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> static final int <RARE_TOKEN> = 5 ; </a> 1
<a> private static final int <RARE_TOKEN> = 10 ; </a> 1
<a> private final String host ; </a> 1
<a> private final int port ; </a> 1
<a> private final <RARE_TOKEN> handler = new <RARE_TOKEN> ( this ) ; </a> 1
<a> public <RARE_TOKEN> ( String host , int port ) { </a> 1
<a> this . host = host ; </a> 1
<a> this . port = port ; </a> 1
<a> } </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> ( new Bootstrap ( ) ) . connect ( ) ; </a> 0
<a> } </a> 0
<a> private Bootstrap <RARE_TOKEN> ( Bootstrap b ) { </a> 0
<a> return <RARE_TOKEN> ( b , new NioEventLoopGroup ( ) ) ; </a> 0
<a> } </a> 0
<a> Bootstrap <RARE_TOKEN> ( Bootstrap b , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> b . group ( <RARE_TOKEN> ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . remoteAddress ( host , port ) </a> 1
<a> . handler ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel ch ) throws Exception { </a> 0
<a> ch . pipeline ( ) . addLast ( new <RARE_TOKEN> ( <RARE_TOKEN> , 0 , 0 ) , handler ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> return b ; </a> 0
<a> } </a> 0
<a> public static void <RARE_TOKEN> ( String [ ] args ) throws Exception { </a> 0
<a> if ( args . length != 2 ) { </a> 0
<a> System . <RARE_TOKEN> . println ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> . class . getSimpleName ( ) + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String host = args [ 0 ] ; </a> 0
<a> int port = Integer . parseInt ( args [ 1 ] ) ; </a> 0
<a> new <RARE_TOKEN> ( host , port ) . run ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . example . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . EventLoop ; </a> 0
<a> import io . netty . handler . timeout . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . timeout . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private final <RARE_TOKEN> client ; </a> 1
<a> private long <RARE_TOKEN> = - 1 ; </a> 1
<a> public <RARE_TOKEN> ( <RARE_TOKEN> client ) { </a> 1
<a> this . client = client ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> } </a> 0
<a> println ( <RARE_TOKEN> <RARE_TOKEN> " + ctx . channel ( ) . remoteAddress ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception { </a> 1
<a> in . clear ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object <RARE_TOKEN> ) throws Exception { </a> 1
<a> if ( ! ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> e = ( <RARE_TOKEN> ) <RARE_TOKEN> ; </a> 0
<a> if ( e . state ( ) == <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> println ( <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> println ( <RARE_TOKEN> <RARE_TOKEN> " + ctx . channel ( ) . remoteAddress ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( final ChannelHandlerContext ctx ) </a> 0
<a> throws Exception { </a> 0
<a> println ( <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> . <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 0
<a> final EventLoop loop = ctx . channel ( ) . eventLoop ( ) ; </a> 0
<a> loop . schedule ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> println ( <RARE_TOKEN> <RARE_TOKEN> " + ctx . channel ( ) . remoteAddress ( ) ) ; </a> 1
<a> client . <RARE_TOKEN> ( new Bootstrap ( ) , loop ) . connect ( ) ; </a> 1
<a> } </a> 0
<a> } , <RARE_TOKEN> . <RARE_TOKEN> , TimeUnit . SECONDS ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> if ( cause instanceof <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = - 1 ; </a> 1
<a> println ( "Failed to <RARE_TOKEN> " + cause . getMessage ( ) ) ; </a> 1
<a> } </a> 1
<a> cause . printStackTrace ( ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> void println ( String msg ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> System . <RARE_TOKEN> . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , msg ) ; </a> 0
<a> } else { </a> 0
<a> System . <RARE_TOKEN> . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , ( System . currentTimeMillis ( ) - <RARE_TOKEN> ) / 1000 , msg ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . logging ; </a> 0
<a> import io . netty . logging . <RARE_TOKEN> ; </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) , </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . logging ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . logging . <RARE_TOKEN> ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> @ Sharable </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> protected final InternalLogger logger ; </a> 0
<a> protected final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> level ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> level ) { </a> 1
<a> if ( level == null ) { </a> 1
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> logger = InternalLoggerFactory . getInstance ( getClass ( ) ) ; </a> 1
<a> this . level = level ; </a> 1
<a> <RARE_TOKEN> = level . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( Class < ? > clazz ) { </a> 0
<a> this ( clazz , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Class < ? > clazz , <RARE_TOKEN> level ) { </a> 0
<a> if ( clazz == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( level == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> logger = InternalLoggerFactory . getInstance ( clazz ) ; </a> 0
<a> this . level = level ; </a> 0
<a> <RARE_TOKEN> = level . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String name ) { </a> 0
<a> this ( name , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String name , <RARE_TOKEN> level ) { </a> 0
<a> if ( name == null ) { </a> 0
<a> throw new NullPointerException ( "name" ) ; </a> 0
<a> } </a> 0
<a> if ( level == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> logger = InternalLoggerFactory . getInstance ( name ) ; </a> 0
<a> this . level = level ; </a> 0
<a> <RARE_TOKEN> = level . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> level ( ) { </a> 0
<a> return level ; </a> 0
<a> } </a> 0
<a> protected String format ( ChannelHandlerContext ctx , String message ) { </a> 0
<a> String <RARE_TOKEN> = ctx . channel ( ) . toString ( ) ; </a> 0
<a> StringBuilder buf = new StringBuilder ( <RARE_TOKEN> . length ( ) + message . length ( ) + 1 ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( ' ' ) ; </a> 0
<a> buf . append ( message ) ; </a> 0
<a> return buf . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) </a> 0
<a> throws Exception { </a> 0
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) </a> 0
<a> throws Exception { </a> 0
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) </a> 0
<a> throws Exception { </a> 0
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) </a> 0
<a> throws Exception { </a> 0
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , </a> 0
<a> Throwable cause ) throws Exception { </a> 0
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> " + cause ) , cause ) ; </a> 0
<a> } </a> 0
<a> super . exceptionCaught ( ctx , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , </a> 0
<a> Object <RARE_TOKEN> ) throws Exception { </a> 0
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> " + <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> super . <RARE_TOKEN> ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void bind ( ChannelHandlerContext ctx , </a> 0
<a> SocketAddress localAddress , ChannelFuture future ) throws Exception { </a> 0
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> + localAddress + <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> super . bind ( ctx , localAddress , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void connect ( ChannelHandlerContext ctx , </a> 0
<a> SocketAddress remoteAddress , SocketAddress localAddress , </a> 0
<a> ChannelFuture future ) throws Exception { </a> 0
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> + remoteAddress + ", " + localAddress + <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> super . connect ( ctx , remoteAddress , localAddress , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void disconnect ( ChannelHandlerContext ctx , </a> 0
<a> ChannelFuture future ) throws Exception { </a> 0
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> super . disconnect ( ctx , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ChannelHandlerContext ctx , </a> 0
<a> ChannelFuture future ) throws Exception { </a> 0
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> super . close ( ctx , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , </a> 0
<a> ChannelFuture future ) throws Exception { </a> 0
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> super . <RARE_TOKEN> ( ctx , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ChannelHandlerContext ctx , ChannelFuture future ) </a> 0
<a> throws Exception { </a> 1
<a> ctx . flush ( future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) </a> 0
<a> throws Exception { </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . logging ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> public class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> </a> 1
<a> implements <RARE_TOKEN> < Object > , <RARE_TOKEN> < Object > { </a> 1
<a> public <RARE_TOKEN> ( ) { } </a> 0
<a> public <RARE_TOKEN> ( Class < ? > clazz , <RARE_TOKEN> level ) { </a> 0
<a> super ( clazz , level ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Class < ? > clazz ) { </a> 0
<a> super ( clazz ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> level ) { </a> 0
<a> super ( level ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String name , <RARE_TOKEN> level ) { </a> 0
<a> super ( name , level ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String name ) { </a> 0
<a> super ( name ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public MessageBuf < Object > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public MessageBuf < Object > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) </a> 1
<a> throws Exception { </a> 1
<a> MessageBuf < Object > buf = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 0
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> ( <RARE_TOKEN> , buf ) ) ) ; </a> 1
<a> } </a> 0
<a> MessageBuf < Object > out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> Object o = buf . poll ( ) ; </a> 1
<a> if ( o == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> out . add ( o ) ; </a> 1
<a> } </a> 1
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 1
<a> public void flush ( ChannelHandlerContext ctx , ChannelFuture future ) </a> 0
<a> throws Exception { </a> 1
<a> MessageBuf < Object > buf = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( logger . <RARE_TOKEN> ( <RARE_TOKEN> ) ) { </a> 1
<a> logger . log ( <RARE_TOKEN> , format ( ctx , <RARE_TOKEN> ( <RARE_TOKEN> , buf ) ) ) ; </a> 1
<a> } </a> 1
<a> MessageBuf < Object > out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> Object o = buf . poll ( ) ; </a> 1
<a> if ( o == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 0
<a> out . add ( o ) ; </a> 1
<a> } </a> 0
<a> ctx . flush ( future ) ; </a> 0
<a> } </a> 1
<a> protected String <RARE_TOKEN> ( String message , MessageBuf < Object > buf ) { </a> 1
<a> return message + <RARE_TOKEN> + buf . size ( ) + <RARE_TOKEN> " + buf ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> @ Override </a> 0
<a> public void execute ( Runnable command ) { </a> 0
<a> command . run ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . <RARE_TOKEN> ; </a> 0
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( "" ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . <RARE_TOKEN> ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . stream ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> < ByteBuf > { </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . stream ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import java . io . File ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> file ; </a> 0
<a> private final long <RARE_TOKEN> ; </a> 0
<a> private final long endOffset ; </a> 0
<a> private final int chunkSize ; </a> 0
<a> private long offset ; </a> 0
<a> public <RARE_TOKEN> ( File file ) throws IOException { </a> 0
<a> this ( file , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( File file , int chunkSize ) throws IOException { </a> 0
<a> this ( new <RARE_TOKEN> ( file , <RARE_TOKEN> ) , chunkSize ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> file ) throws IOException { </a> 0
<a> this ( file , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> file , int chunkSize ) throws IOException { </a> 0
<a> this ( file , 0 , file . length ( ) , chunkSize ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> file , long offset , long length , int chunkSize ) throws IOException { </a> 0
<a> if ( file == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( offset < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + offset + " (expected: 0 or <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( length < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + length + " (expected: 0 or <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( chunkSize <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + chunkSize + </a> 0
<a> " (expected: a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . file = file ; </a> 0
<a> this . offset = <RARE_TOKEN> = offset ; </a> 0
<a> endOffset = offset + length ; </a> 0
<a> this . chunkSize = chunkSize ; </a> 0
<a> file . <RARE_TOKEN> ( offset ) ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return endOffset ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return offset ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> return ! ( offset < endOffset && file . <RARE_TOKEN> ( ) . isOpen ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws Exception { </a> 0
<a> file . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer ) throws Exception { </a> 0
<a> long offset = this . offset ; </a> 0
<a> if ( offset >= endOffset ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> int chunkSize = ( int ) Math . min ( this . chunkSize , endOffset - offset ) ; </a> 0
<a> byte [ ] chunk = new byte [ chunkSize ] ; </a> 0
<a> file . <RARE_TOKEN> ( chunk ) ; </a> 0
<a> buffer . writeBytes ( chunk ) ; </a> 0
<a> this . offset = offset + chunkSize ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . stream ; </a> 0
<a> public interface <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> boolean <RARE_TOKEN> ( ) throws Exception ; </a> 0
<a> void close ( ) throws Exception ; </a> 0
<a> boolean <RARE_TOKEN> ( <RARE_TOKEN> buffer ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . stream ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import java . io . File ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> in ; </a> 0
<a> private final long <RARE_TOKEN> ; </a> 0
<a> private final long endOffset ; </a> 0
<a> private final int chunkSize ; </a> 0
<a> private long offset ; </a> 0
<a> public <RARE_TOKEN> ( File in ) throws IOException { </a> 0
<a> this ( new <RARE_TOKEN> ( in ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( File in , int chunkSize ) throws IOException { </a> 0
<a> this ( new <RARE_TOKEN> ( in ) . <RARE_TOKEN> ( ) , chunkSize ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> in ) throws IOException { </a> 0
<a> this ( in , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> in , int chunkSize ) throws IOException { </a> 0
<a> this ( in , 0 , in . size ( ) , chunkSize ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> in , long offset , long length , int chunkSize ) </a> 0
<a> throws IOException { </a> 0
<a> if ( in == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( offset < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + offset + " (expected: 0 or <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( length < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + length + " (expected: 0 or <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( chunkSize <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + chunkSize + </a> 0
<a> " (expected: a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( offset != 0 ) { </a> 0
<a> in . position ( offset ) ; </a> 0
<a> } </a> 0
<a> this . in = in ; </a> 0
<a> this . chunkSize = chunkSize ; </a> 0
<a> this . offset = <RARE_TOKEN> = offset ; </a> 0
<a> endOffset = offset + length ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return endOffset ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return offset ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> return ! ( offset < endOffset && in . isOpen ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws Exception { </a> 0
<a> in . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer ) throws Exception { </a> 0
<a> long offset = this . offset ; </a> 0
<a> if ( offset >= endOffset ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> int chunkSize = ( int ) Math . min ( this . chunkSize , endOffset - offset ) ; </a> 0
<a> int readBytes = 0 ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> int <RARE_TOKEN> = buffer . writeBytes ( in , chunkSize - readBytes ) ; </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> readBytes += <RARE_TOKEN> ; </a> 0
<a> if ( readBytes == chunkSize ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> this . offset += readBytes ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . stream ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> in ; </a> 0
<a> private final int chunkSize ; </a> 0
<a> private long offset ; </a> 0
<a> private final ByteBuffer <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> in ) { </a> 0
<a> this ( in , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> in , int chunkSize ) { </a> 0
<a> if ( in == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( chunkSize <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + chunkSize + </a> 0
<a> " (expected: a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . in = in ; </a> 0
<a> offset = 0 ; </a> 0
<a> this . chunkSize = chunkSize ; </a> 0
<a> <RARE_TOKEN> = ByteBuffer . <RARE_TOKEN> ( chunkSize ) ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return offset ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> if ( <RARE_TOKEN> . position ( ) > 0 ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( in . isOpen ( ) ) { </a> 0
<a> int b = in . read ( <RARE_TOKEN> ) ; </a> 0
<a> if ( b < 0 ) { </a> 0
<a> return true ; </a> 0
<a> } else { </a> 0
<a> offset += b ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws Exception { </a> 0
<a> in . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer ) throws Exception { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> int readBytes = <RARE_TOKEN> . position ( ) ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> int <RARE_TOKEN> = in . read ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> readBytes += <RARE_TOKEN> ; </a> 0
<a> offset += <RARE_TOKEN> ; </a> 0
<a> if ( readBytes == chunkSize ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> buffer . writeBytes ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . stream ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> in ; </a> 0
<a> private final int chunkSize ; </a> 0
<a> private long offset ; </a> 0
<a> public <RARE_TOKEN> ( InputStream in ) { </a> 0
<a> this ( in , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( InputStream in , int chunkSize ) { </a> 0
<a> if ( in == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( chunkSize <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + chunkSize + </a> 0
<a> " (expected: a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( in instanceof <RARE_TOKEN> ) { </a> 0
<a> this . in = ( <RARE_TOKEN> ) in ; </a> 0
<a> } else { </a> 0
<a> this . in = new <RARE_TOKEN> ( in ) ; </a> 0
<a> } </a> 0
<a> this . chunkSize = chunkSize ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return offset ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> int b = in . read ( ) ; </a> 0
<a> if ( b < 0 ) { </a> 0
<a> return true ; </a> 0
<a> } else { </a> 0
<a> in . <RARE_TOKEN> ( b ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws Exception { </a> 0
<a> in . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ByteBuf buffer ) throws Exception { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> final int <RARE_TOKEN> = in . <RARE_TOKEN> ( ) ; </a> 0
<a> final int chunkSize ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> chunkSize = this . chunkSize ; </a> 0
<a> } else { </a> 0
<a> chunkSize = Math . min ( this . chunkSize , in . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> offset += buffer . writeBytes ( in , chunkSize ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . stream ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> implements <RARE_TOKEN> < Object > { </a> 0
<a> private static final InternalLogger logger = </a> 0
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final MessageBuf < Object > queue = Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> private final int <RARE_TOKEN> ; </a> 0
<a> private volatile ChannelHandlerContext ctx ; </a> 0
<a> private final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( ) ; </a> 0
<a> private Object <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( 4 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> " + <RARE_TOKEN> + " (expected: > <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public MessageBuf < Object > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> this . ctx = ctx ; </a> 1
<a> return queue ; </a> 1
<a> } </a> 1
<a> private boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . get ( ) < <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> final ChannelHandlerContext ctx = this . ctx ; </a> 0
<a> if ( ctx == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( ctx . executor ( ) . inEventLoop ( ) ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . warn ( "Unexpected exception while <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> ctx . executor ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . warn ( "Unexpected exception while <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> queue . add ( future ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) || ! ctx . channel ( ) . isActive ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 1
<a> } </a> 0
<a> private void <RARE_TOKEN> ( final ChannelHandlerContext ctx , Throwable cause ) { </a> 0
<a> boolean fireExceptionCaught = false ; </a> 0
<a> boolean success = true ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> Object <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> if ( this . <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = queue . poll ( ) ; </a> 0
<a> } else { </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> < ? > in = ( <RARE_TOKEN> < ? > ) <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> if ( ! in . <RARE_TOKEN> ( ) ) { </a> 0
<a> success = false ; </a> 0
<a> } </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> success = false ; </a> 0
<a> logger . warn ( <RARE_TOKEN> . class . getSimpleName ( ) + <RARE_TOKEN> failed" , e ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( in ) ; </a> 0
<a> } else if ( <RARE_TOKEN> instanceof ChannelFuture ) { </a> 0
<a> ChannelFuture f = ( ChannelFuture ) <RARE_TOKEN> ; </a> 0
<a> if ( ! success ) { </a> 0
<a> fireExceptionCaught = true ; </a> 0
<a> if ( cause == null ) { </a> 0
<a> cause = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> f . setFailure ( cause ) ; </a> 0
<a> } else { </a> 0
<a> f . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( fireExceptionCaught ) { </a> 0
<a> ctx . fireExceptionCaught ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( final ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> Channel channel = ctx . channel ( ) ; </a> 0
<a> if ( ! channel . isActive ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , null ) ; </a> 0
<a> return ; </a> 1
<a> } </a> 0
<a> while ( <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = queue . poll ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> final Object <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> instanceof ChannelFuture ) { </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> ctx . flush ( ( ChannelFuture ) <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> final <RARE_TOKEN> < ? > <RARE_TOKEN> = ( <RARE_TOKEN> < ? > ) <RARE_TOKEN> ; </a> 0
<a> boolean read ; </a> 0
<a> boolean <RARE_TOKEN> ; </a> 0
<a> boolean suspend ; </a> 0
<a> try { </a> 0
<a> read = <RARE_TOKEN> ( ctx , <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! read ) { </a> 0
<a> suspend = ! <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> suspend = false ; </a> 0
<a> } </a> 0
<a> } catch ( final Throwable t ) { </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> if ( ctx . executor ( ) . inEventLoop ( ) ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 0
<a> } else { </a> 0
<a> ctx . executor ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( suspend ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> ChannelFuture f = ctx . flush ( ) ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> f . addListener ( new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture future ) throws Exception { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } else if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> f . addListener ( new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture future ) throws Exception { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! future . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ( <RARE_TOKEN> < ? > ) <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } else { </a> 0
<a> f . addListener ( new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture future ) throws Exception { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! future . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ( <RARE_TOKEN> < ? > ) <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> ctx . <RARE_TOKEN> ( ) . add ( <RARE_TOKEN> ) ; </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> if ( ! channel . isActive ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx , new <RARE_TOKEN> ( ) ) ; </a> 0
<a> return ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> protected boolean <RARE_TOKEN> ( ChannelHandlerContext ctx , <RARE_TOKEN> < ? > <RARE_TOKEN> ) throws Exception { </a> 1
<a> if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> return ( ( <RARE_TOKEN> ) <RARE_TOKEN> ) . <RARE_TOKEN> ( ctx . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } else if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> return ( ( <RARE_TOKEN> < Object > ) <RARE_TOKEN> ) . <RARE_TOKEN> ( ctx . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } else { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> + " not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( <RARE_TOKEN> < ? > <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . warn ( "Failed to close a <RARE_TOKEN> <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> <RARE_TOKEN> ( ctx , new ChannelException ( <RARE_TOKEN> . class . getSimpleName ( ) + " <RARE_TOKEN> from <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . stream ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . timeout ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . timeout ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 1
<a> import io . netty . channel . EventExecutor ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 1
<a> import io . netty . util . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . ScheduledFuture ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private final long <RARE_TOKEN> ; </a> 0
<a> private final long <RARE_TOKEN> ; </a> 0
<a> private final long <RARE_TOKEN> ; </a> 0
<a> volatile ScheduledFuture < ? > <RARE_TOKEN> ; </a> 0
<a> volatile long <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> volatile ScheduledFuture < ? > <RARE_TOKEN> ; </a> 0
<a> volatile long <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> volatile ScheduledFuture < ? > <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> private volatile int state ; </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> int <RARE_TOKEN> , </a> 0
<a> int <RARE_TOKEN> , </a> 0
<a> int <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> TimeUnit . SECONDS ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> long <RARE_TOKEN> , long <RARE_TOKEN> , long <RARE_TOKEN> , </a> 0
<a> TimeUnit unit ) { </a> 0
<a> if ( unit == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = Math . <RARE_TOKEN> ( unit . <RARE_TOKEN> ( <RARE_TOKEN> ) , 1 ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = Math . <RARE_TOKEN> ( unit . <RARE_TOKEN> ( <RARE_TOKEN> ) , 1 ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = Math . <RARE_TOKEN> ( unit . <RARE_TOKEN> ( <RARE_TOKEN> ) , 1 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> if ( ctx . channel ( ) . isActive ( ) & ctx . channel ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } else { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> destroy ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> if ( ctx . channel ( ) . isActive ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> destroy ( ) ; </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> = 0 ; </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( final ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> future . addListener ( new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelFuture future ) throws Exception { </a> 1
<a> <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 1
<a> <RARE_TOKEN> = <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> super . flush ( ctx , future ) ; </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> switch ( state ) { </a> 0
<a> case 1 : </a> 0
<a> case 2 : </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> state = 1 ; </a> 0
<a> EventExecutor loop = ctx . executor ( ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> = loop . schedule ( </a> 0
<a> new <RARE_TOKEN> ( ctx ) , </a> 0
<a> <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> = loop . schedule ( </a> 0
<a> new <RARE_TOKEN> ( ctx ) , </a> 0
<a> <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> = loop . schedule ( </a> 0
<a> new <RARE_TOKEN> ( ctx ) , </a> 0
<a> <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void destroy ( ) { </a> 0
<a> state = 2 ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . cancel ( false ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . cancel ( false ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . cancel ( false ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ChannelHandlerContext ctx , <RARE_TOKEN> <RARE_TOKEN> ) throws Exception { </a> 0
<a> ctx . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> implements Runnable { </a> 0
<a> private final ChannelHandlerContext ctx ; </a> 0
<a> <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> this . ctx = ctx ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( ! ctx . channel ( ) . isOpen ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> long currentTime = System . currentTimeMillis ( ) ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> . this . <RARE_TOKEN> ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> - ( currentTime - <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> <RARE_TOKEN> = </a> 0
<a> ctx . executor ( ) . schedule ( this , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ctx , new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ++ , currentTime - <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = ctx . executor ( ) . schedule ( this , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> implements Runnable { </a> 0
<a> private final ChannelHandlerContext ctx ; </a> 0
<a> <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> this . ctx = ctx ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( ! ctx . channel ( ) . isOpen ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> long currentTime = System . currentTimeMillis ( ) ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> . this . <RARE_TOKEN> ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> - ( currentTime - <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> <RARE_TOKEN> = ctx . executor ( ) . schedule ( </a> 0
<a> this , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ctx , new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ++ , currentTime - <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = ctx . executor ( ) . schedule ( this , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> implements Runnable { </a> 0
<a> private final ChannelHandlerContext ctx ; </a> 0
<a> <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> this . ctx = ctx ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( ! ctx . channel ( ) . isOpen ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> long currentTime = System . currentTimeMillis ( ) ; </a> 0
<a> long <RARE_TOKEN> = Math . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> - ( currentTime - <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> <RARE_TOKEN> = ctx . executor ( ) . schedule ( </a> 0
<a> this , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ctx , new <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ++ , currentTime - <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = ctx . executor ( ) . schedule ( this , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . timeout ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 1
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . util . <RARE_TOKEN> ; </a> 1
<a> import io . netty . util . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . ScheduledFuture ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private final long <RARE_TOKEN> ; </a> 0
<a> private volatile ScheduledFuture < ? > timeout ; </a> 0
<a> private volatile long <RARE_TOKEN> ; </a> 0
<a> private volatile int state ; </a> 0
<a> private boolean closed ; </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> , TimeUnit . SECONDS ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( long timeout , TimeUnit unit ) { </a> 0
<a> if ( unit == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( timeout <= 0 ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = Math . <RARE_TOKEN> ( unit . <RARE_TOKEN> ( timeout ) , 1 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> if ( ctx . channel ( ) . isActive ( ) && ctx . channel ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } else { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> destroy ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> if ( ctx . channel ( ) . isActive ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> destroy ( ) ; </a> 0
<a> super . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> switch ( state ) { </a> 0
<a> case 1 : </a> 0
<a> case 2 : </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> state = 1 ; </a> 0
<a> <RARE_TOKEN> = System . currentTimeMillis ( ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> timeout = ctx . executor ( ) . schedule ( </a> 0
<a> new <RARE_TOKEN> ( ctx ) , </a> 0
<a> <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void destroy ( ) { </a> 0
<a> state = 2 ; </a> 0
<a> if ( timeout != null ) { </a> 0
<a> timeout . cancel ( false ) ; </a> 0
<a> timeout = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> if ( ! closed ) { </a> 0
<a> ctx . fireExceptionCaught ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> closed = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> implements Runnable { </a> 0
<a> private final ChannelHandlerContext ctx ; </a> 0
<a> <RARE_TOKEN> ( ChannelHandlerContext ctx ) { </a> 0
<a> this . ctx = ctx ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( ! ctx . channel ( ) . isOpen ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> long currentTime = System . currentTimeMillis ( ) ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> - ( currentTime - <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> timeout = ctx . executor ( ) . schedule ( this , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> timeout = ctx . executor ( ) . schedule ( this , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . timeout ; </a> 0
<a> public final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> public static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private <RARE_TOKEN> ( ) { } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . timeout ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . ChannelPipeline ; </a> 1
<a> import io . netty . util . <RARE_TOKEN> ; </a> 1
<a> import io . netty . util . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . ScheduledFuture ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private final long <RARE_TOKEN> ; </a> 0
<a> private boolean closed ; </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> , TimeUnit . SECONDS ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( long timeout , TimeUnit unit ) { </a> 0
<a> if ( unit == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( timeout <= 0 ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = Math . <RARE_TOKEN> ( unit . <RARE_TOKEN> ( timeout ) , 1 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( final ChannelHandlerContext ctx , final ChannelFuture future ) throws Exception { </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> final ScheduledFuture < ? > <RARE_TOKEN> = ctx . executor ( ) . schedule ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( future . setFailure ( <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> future . addListener ( new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture future ) throws Exception { </a> 0
<a> <RARE_TOKEN> . cancel ( false ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> super . flush ( ctx , future ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> if ( ! closed ) { </a> 0
<a> ctx . fireExceptionCaught ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> closed = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . timeout ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . handler . <RARE_TOKEN> ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> e = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> long <RARE_TOKEN> = System . <RARE_TOKEN> ( ) ; </a> 1
<a> e . execute ( new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> long <RARE_TOKEN> = System . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> try { </a> 1
<a> Thread . sleep ( 1000 ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 1
<a> } </a> 1
<a> if ( System . <RARE_TOKEN> ( ) - <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> assertTrue ( System . <RARE_TOKEN> ( ) - <RARE_TOKEN> >= <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . <RARE_TOKEN> . transport . socket ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import io . netty . <RARE_TOKEN> . transport . socket . <RARE_TOKEN> . Factory ; </a> 0
<a> import io . netty . <RARE_TOKEN> . util . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> import org . junit . <RARE_TOKEN> ; </a> 0
<a> import org . junit . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public abstract class <RARE_TOKEN> { </a> 0
<a> private static final List < Entry < Factory < ServerBootstrap > , Factory < Bootstrap > > > <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . socket ( ) ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> protected final InternalLogger logger = InternalLoggerFactory . getInstance ( getClass ( ) ) ; </a> 0
<a> protected volatile ServerBootstrap sb ; </a> 0
<a> protected volatile Bootstrap cb ; </a> 0
<a> protected volatile InetSocketAddress <RARE_TOKEN> ; </a> 0
<a> protected volatile Factory < Bootstrap > <RARE_TOKEN> ; </a> 0
<a> protected void run ( ) throws Throwable { </a> 0
<a> int i = 0 ; </a> 0
<a> for ( Entry < Factory < ServerBootstrap > , Factory < Bootstrap > > e : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = e . getValue ( ) ; </a> 0
<a> sb = e . <RARE_TOKEN> ( ) . newInstance ( ) ; </a> 0
<a> cb = e . getValue ( ) . newInstance ( ) ; </a> 0
<a> <RARE_TOKEN> = new InetSocketAddress ( </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> sb . localAddress ( <RARE_TOKEN> ) ; </a> 0
<a> cb . remoteAddress ( <RARE_TOKEN> ) ; </a> 0
<a> logger . info ( String . format ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> of <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) , ++ i , <RARE_TOKEN> . size ( ) ) ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> m = getClass ( ) . <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) , ServerBootstrap . class , Bootstrap . class ) ; </a> 1
<a> m . <RARE_TOKEN> ( this , sb , cb ) ; </a> 0
<a> } catch ( <RARE_TOKEN> ex ) { </a> 0
<a> throw ex . <RARE_TOKEN> ( ) ; </a> 0
<a> } finally { </a> 0
<a> sb . shutdown ( ) ; </a> 0
<a> cb . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . <RARE_TOKEN> . transport . socket ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . channel . ChannelOption ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . util . concurrent . CountDownLatch ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import org . junit . Assert ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> run ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Bootstrap sb , Bootstrap cb ) throws Throwable { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> sb . handler ( new ChannelInboundMessageHandlerAdapter < <RARE_TOKEN> > ( ) { </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx , </a> 1
<a> <RARE_TOKEN> msg ) throws Exception { </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> cb . handler ( <RARE_TOKEN> ) ; </a> 0
<a> sb . option ( ChannelOption . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> sb . option ( ChannelOption . <RARE_TOKEN> , true ) ; </a> 0
<a> cb . option ( ChannelOption . <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> cb . option ( ChannelOption . <RARE_TOKEN> , true ) ; </a> 0
<a> cb . localAddress ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> Channel sc = sb . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) cb . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> String group = <RARE_TOKEN> ; </a> 0
<a> InetSocketAddress <RARE_TOKEN> = new InetSocketAddress ( group , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) . sync ( ) ; </a> 0
<a> sc . write ( new <RARE_TOKEN> ( Unpooled . <RARE_TOKEN> ( 1 ) , <RARE_TOKEN> ) ) . sync ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . await ( ) ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ) . sync ( ) ; </a> 0
<a> Thread . sleep ( 1000 ) ; </a> 0
<a> sc . write ( new <RARE_TOKEN> ( Unpooled . <RARE_TOKEN> ( 1 ) , <RARE_TOKEN> ) ) . sync ( ) ; </a> 0
<a> <RARE_TOKEN> . await ( ) ; </a> 0
<a> sc . close ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < <RARE_TOKEN> > { </a> 0
<a> private final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> private boolean done ; </a> 0
<a> private volatile boolean fail ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx , </a> 1
<a> <RARE_TOKEN> msg ) throws Exception { </a> 1
<a> if ( done ) { </a> 1
<a> fail = true ; </a> 0
<a> } </a> 0
<a> Assert . assertEquals ( 1 , msg . data ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> done = true ; </a> 0
<a> } </a> 0
<a> public boolean await ( ) throws Exception { </a> 0
<a> boolean success = latch . await ( 10 , TimeUnit . SECONDS ) ; </a> 0
<a> if ( fail ) { </a> 0
<a> Assert . fail ( ) ; </a> 0
<a> } </a> 0
<a> return success ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . <RARE_TOKEN> . transport . socket ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . CountDownLatch ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import org . junit . Assert ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> run ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( Bootstrap sb , Bootstrap cb ) throws Throwable { </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> sb . handler ( new ChannelInboundMessageHandlerAdapter < <RARE_TOKEN> > ( ) { </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx , </a> 1
<a> <RARE_TOKEN> msg ) throws Exception { </a> 1
<a> Assert . assertEquals ( 1 , msg . data ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> cb . handler ( new ChannelInboundMessageHandlerAdapter < <RARE_TOKEN> > ( ) { </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx , </a> 1
<a> <RARE_TOKEN> msg ) throws Exception { </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> Channel sc = sb . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> Channel <RARE_TOKEN> = cb . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> <RARE_TOKEN> . write ( new <RARE_TOKEN> ( Unpooled . <RARE_TOKEN> ( 1 ) , <RARE_TOKEN> ) ) . sync ( ) ; </a> 0
<a> assertTrue ( latch . await ( 10 , TimeUnit . SECONDS ) ) ; </a> 0
<a> sc . close ( ) . sync ( ) ; </a> 0
<a> <RARE_TOKEN> . close ( ) . sync ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . <RARE_TOKEN> . transport . socket ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . Random ; </a> 0
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Random random = new Random ( ) ; </a> 0
<a> static final byte [ ] data = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> static { </a> 0
<a> random . <RARE_TOKEN> ( data ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> run ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ServerBootstrap sb , Bootstrap cb ) throws Throwable { </a> 0
<a> final <RARE_TOKEN> sh = new <RARE_TOKEN> ( ) ; </a> 1
<a> final <RARE_TOKEN> ch = new <RARE_TOKEN> ( ) ; </a> 1
<a> sb . <RARE_TOKEN> ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel <RARE_TOKEN> ) throws Exception { </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , sh ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> cb . handler ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel <RARE_TOKEN> ) throws Exception { </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . addLast ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , ch ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Channel sc = sb . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> Channel <RARE_TOKEN> = cb . connect ( ) . sync ( ) . channel ( ) ; </a> 0
<a> for ( int i = 0 ; i < data . length ; ) { </a> 0
<a> int length = Math . min ( random . nextInt ( <RARE_TOKEN> * 3 ) , data . length - i ) ; </a> 0
<a> <RARE_TOKEN> . write ( Unpooled . wrappedBuffer ( data , i , length ) ) ; </a> 0
<a> i += length ; </a> 0
<a> } </a> 0
<a> while ( ch . <RARE_TOKEN> < data . length ) { </a> 0
<a> if ( sh . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 1 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> while ( sh . <RARE_TOKEN> < data . length ) { </a> 0
<a> if ( sh . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 1 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> sh . channel . close ( ) . sync ( ) ; </a> 0
<a> ch . channel . close ( ) . sync ( ) ; </a> 0
<a> sc . close ( ) . sync ( ) ; </a> 0
<a> if ( sh . exception . get ( ) != null && ! ( sh . exception . get ( ) instanceof IOException ) ) { </a> 0
<a> throw sh . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null && ! ( ch . exception . get ( ) instanceof IOException ) ) { </a> 0
<a> throw ch . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( sh . exception . get ( ) != null ) { </a> 0
<a> throw sh . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null ) { </a> 0
<a> throw ch . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < ByteBuf > { </a> 1
<a> volatile Channel channel ; </a> 0
<a> final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; </a> 0
<a> volatile int <RARE_TOKEN> ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) </a> 0
<a> throws Exception { </a> 0
<a> channel = ctx . channel ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx , </a> 1
<a> ByteBuf msg ) throws Exception { </a> 1
<a> assertEquals ( <RARE_TOKEN> , msg . readableBytes ( ) ) ; </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ msg . readableBytes ( ) ] ; </a> 0
<a> msg . getBytes ( 0 , <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> assertEquals ( data [ i + <RARE_TOKEN> ] , <RARE_TOKEN> [ i ] ) ; </a> 0
<a> } </a> 0
<a> if ( channel . parent ( ) != null ) { </a> 0
<a> channel . write ( msg ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> . length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( </a> 0
<a> ChannelHandlerContext ctx , Throwable cause ) </a> 0
<a> throws Exception { </a> 0
<a> if ( exception . <RARE_TOKEN> ( null , cause ) ) { </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . <RARE_TOKEN> . transport . socket ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . Random ; </a> 0
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> static final Random random = new Random ( ) ; </a> 0
<a> static final String [ ] data = new String [ <RARE_TOKEN> ] ; </a> 0
<a> static { </a> 0
<a> for ( int i = 0 ; i < data . length ; i ++ ) { </a> 0
<a> int <RARE_TOKEN> = random . nextInt ( <RARE_TOKEN> ) ; </a> 0
<a> char [ ] e = new char [ <RARE_TOKEN> ] ; </a> 0
<a> for ( int j = 0 ; j < <RARE_TOKEN> ; j ++ ) { </a> 0
<a> e [ j ] = ( char ) ( <RARE_TOKEN> + random . nextInt ( 26 ) ) ; </a> 0
<a> } </a> 0
<a> data [ i ] = new String ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> run ( ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ServerBootstrap sb , Bootstrap cb ) throws Throwable { </a> 0
<a> final <RARE_TOKEN> sh = new <RARE_TOKEN> ( ) ; </a> 1
<a> final <RARE_TOKEN> ch = new <RARE_TOKEN> ( ) ; </a> 1
<a> sb . <RARE_TOKEN> ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel <RARE_TOKEN> ) throws Exception { </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . addLast ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( getClass ( ) . <RARE_TOKEN> ( ) ) ) , </a> 0
<a> new <RARE_TOKEN> ( ) , </a> 0
<a> sh ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> cb . handler ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel <RARE_TOKEN> ) throws Exception { </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . addLast ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( getClass ( ) . <RARE_TOKEN> ( ) ) ) , </a> 0
<a> new <RARE_TOKEN> ( ) , </a> 0
<a> ch ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Channel sc = sb . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> Channel <RARE_TOKEN> = cb . connect ( ) . sync ( ) . channel ( ) ; </a> 0
<a> for ( String <RARE_TOKEN> : data ) { </a> 0
<a> <RARE_TOKEN> . write ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> while ( ch . <RARE_TOKEN> < data . length ) { </a> 0
<a> if ( sh . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 1 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> while ( sh . <RARE_TOKEN> < data . length ) { </a> 0
<a> if ( sh . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 1 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> sh . channel . close ( ) . sync ( ) ; </a> 0
<a> ch . channel . close ( ) . sync ( ) ; </a> 0
<a> sc . close ( ) . sync ( ) ; </a> 0
<a> if ( sh . exception . get ( ) != null && ! ( sh . exception . get ( ) instanceof IOException ) ) { </a> 0
<a> throw sh . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null && ! ( ch . exception . get ( ) instanceof IOException ) ) { </a> 0
<a> throw ch . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( sh . exception . get ( ) != null ) { </a> 0
<a> throw sh . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null ) { </a> 0
<a> throw ch . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < String > { </a> 1
<a> volatile Channel channel ; </a> 0
<a> final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; </a> 0
<a> volatile int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) </a> 0
<a> throws Exception { </a> 0
<a> channel = ctx . channel ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , </a> 1
<a> String msg ) throws Exception { </a> 1
<a> assertEquals ( data [ <RARE_TOKEN> ] , msg ) ; </a> 0
<a> if ( channel . parent ( ) != null ) { </a> 0
<a> channel . write ( msg ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , </a> 0
<a> Throwable cause ) throws Exception { </a> 0
<a> if ( exception . <RARE_TOKEN> ( null , cause ) ) { </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . <RARE_TOKEN> . transport . socket ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . codec . spdy . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . spdy . <RARE_TOKEN> ; </a> 0
<a> import io . netty . handler . codec . spdy . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . util . Random ; </a> 0
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Random random = new Random ( ) ; </a> 0
<a> static final int <RARE_TOKEN> = 20 ; </a> 0
<a> private static ByteBuf <RARE_TOKEN> ( int version ) { </a> 0
<a> int length = version < 3 ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> ByteBuf frames = Unpooled . buffer ( length ) ; </a> 0
<a> frames . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> frames . writeByte ( version ) ; </a> 0
<a> frames . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> frames . writeByte ( 0xFF ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 4 ) ; </a> 0
<a> frames . writeInt ( random . nextInt ( ) ) ; </a> 0
<a> frames . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> frames . writeByte ( version ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 5 ) ; </a> 0
<a> frames . writeInt ( 0 ) ; </a> 0
<a> frames . writeInt ( random . nextInt ( ) & <RARE_TOKEN> | 0x01 ) ; </a> 0
<a> frames . writeByte ( 0x01 ) ; </a> 0
<a> frames . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> frames . writeInt ( random . nextInt ( ) ) ; </a> 0
<a> } </a> 0
<a> frames . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> frames . writeByte ( version ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> frames . writeByte ( 0x03 ) ; </a> 0
<a> if ( version < 3 ) { </a> 0
<a> frames . <RARE_TOKEN> ( 12 ) ; </a> 0
<a> } else { </a> 0
<a> frames . <RARE_TOKEN> ( 10 ) ; </a> 0
<a> } </a> 0
<a> frames . writeInt ( random . nextInt ( ) & <RARE_TOKEN> | 0x01 ) ; </a> 0
<a> frames . writeInt ( random . nextInt ( ) & <RARE_TOKEN> ) ; </a> 0
<a> frames . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( version < 3 ) { </a> 0
<a> frames . <RARE_TOKEN> ( 0 ) ; </a> 0
<a> } </a> 0
<a> frames . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> frames . writeByte ( version ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 2 ) ; </a> 0
<a> frames . writeByte ( 0x01 ) ; </a> 0
<a> if ( version < 3 ) { </a> 0
<a> frames . <RARE_TOKEN> ( 8 ) ; </a> 0
<a> } else { </a> 0
<a> frames . <RARE_TOKEN> ( 4 ) ; </a> 0
<a> } </a> 0
<a> frames . writeInt ( random . nextInt ( ) & <RARE_TOKEN> | 0x01 ) ; </a> 0
<a> if ( version < 3 ) { </a> 0
<a> frames . writeInt ( 0 ) ; </a> 0
<a> } </a> 0
<a> frames . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> frames . writeByte ( version ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 3 ) ; </a> 0
<a> frames . writeInt ( 8 ) ; </a> 0
<a> frames . writeInt ( random . nextInt ( ) & <RARE_TOKEN> | 0x01 ) ; </a> 0
<a> frames . writeInt ( random . nextInt ( ) | 0x01 ) ; </a> 0
<a> frames . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> frames . writeByte ( version ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 4 ) ; </a> 0
<a> frames . writeByte ( 0x01 ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 12 ) ; </a> 0
<a> frames . writeInt ( 1 ) ; </a> 0
<a> if ( version < 3 ) { </a> 0
<a> frames . <RARE_TOKEN> ( random . nextInt ( ) ) ; </a> 0
<a> frames . writeByte ( 0x03 ) ; </a> 0
<a> } else { </a> 0
<a> frames . writeByte ( 0x03 ) ; </a> 0
<a> frames . <RARE_TOKEN> ( random . nextInt ( ) ) ; </a> 0
<a> } </a> 0
<a> frames . writeInt ( random . nextInt ( ) ) ; </a> 0
<a> frames . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> frames . writeByte ( version ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 6 ) ; </a> 0
<a> frames . writeInt ( 4 ) ; </a> 0
<a> frames . writeInt ( random . nextInt ( ) ) ; </a> 0
<a> frames . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> frames . writeByte ( version ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 7 ) ; </a> 0
<a> if ( version < 3 ) { </a> 0
<a> frames . writeInt ( 4 ) ; </a> 0
<a> } else { </a> 0
<a> frames . writeInt ( 8 ) ; </a> 0
<a> } </a> 0
<a> frames . writeInt ( random . nextInt ( ) & <RARE_TOKEN> ) ; </a> 0
<a> if ( version >= 3 ) { </a> 0
<a> frames . writeInt ( random . nextInt ( ) | 0x01 ) ; </a> 0
<a> } </a> 0
<a> frames . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> frames . writeByte ( version ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 8 ) ; </a> 0
<a> frames . writeByte ( 0x01 ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 4 ) ; </a> 0
<a> frames . writeInt ( random . nextInt ( ) & <RARE_TOKEN> | 0x01 ) ; </a> 0
<a> frames . writeByte ( <RARE_TOKEN> ) ; </a> 0
<a> frames . writeByte ( version ) ; </a> 0
<a> frames . <RARE_TOKEN> ( 9 ) ; </a> 0
<a> frames . writeInt ( 8 ) ; </a> 0
<a> frames . writeInt ( random . nextInt ( ) & <RARE_TOKEN> | 0x01 ) ; </a> 0
<a> frames . writeInt ( random . nextInt ( ) & <RARE_TOKEN> | 0x01 ) ; </a> 0
<a> return frames ; </a> 0
<a> } </a> 0
<a> private int version ; </a> 0
<a> @ Test ( timeout = <RARE_TOKEN> ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> for ( version = <RARE_TOKEN> . <RARE_TOKEN> ; version <= <RARE_TOKEN> . <RARE_TOKEN> ; version ++ ) { </a> 0
<a> logger . info ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> + version ) ; </a> 0
<a> run ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ServerBootstrap sb , Bootstrap cb ) throws Throwable { </a> 1
<a> ByteBuf frames = <RARE_TOKEN> ( version ) ; </a> 0
<a> final <RARE_TOKEN> sh = new <RARE_TOKEN> ( ) ; </a> 1
<a> final <RARE_TOKEN> ch = new <RARE_TOKEN> ( frames ) ; </a> 0
<a> sb . <RARE_TOKEN> ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel channel ) throws Exception { </a> 0
<a> channel . pipeline ( ) . addLast ( </a> 0
<a> new <RARE_TOKEN> ( version ) , </a> 0
<a> new <RARE_TOKEN> ( version ) , </a> 0
<a> sh ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> cb . handler ( ch ) ; </a> 0
<a> Channel sc = sb . localAddress ( 0 ) . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> int port = ( ( InetSocketAddress ) sc . localAddress ( ) ) . <RARE_TOKEN> ( ) ; </a> 0
<a> Channel <RARE_TOKEN> = cb . remoteAddress ( <RARE_TOKEN> . <RARE_TOKEN> , port ) . connect ( ) . sync ( ) . channel ( ) ; </a> 0
<a> <RARE_TOKEN> . write ( frames ) ; </a> 0
<a> while ( ch . <RARE_TOKEN> < frames . writerIndex ( ) - <RARE_TOKEN> ) { </a> 0
<a> if ( sh . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 1 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( sh . exception . get ( ) != null && ! ( sh . exception . get ( ) instanceof IOException ) ) { </a> 0
<a> throw sh . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null && ! ( ch . exception . get ( ) instanceof IOException ) ) { </a> 0
<a> throw ch . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( sh . exception . get ( ) != null ) { </a> 0
<a> throw sh . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null ) { </a> 0
<a> throw ch . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < Object > { </a> 0
<a> final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object msg ) throws Exception { </a> 1
<a> ctx . write ( msg ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 0
<a> if ( exception . <RARE_TOKEN> ( null , cause ) ) { </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; </a> 0
<a> final ByteBuf frames ; </a> 0
<a> volatile int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ByteBuf frames ) { </a> 1
<a> this . frames = frames ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception { </a> 1
<a> byte [ ] <RARE_TOKEN> = new byte [ in . readableBytes ( ) ] ; </a> 0
<a> in . readBytes ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> assertEquals ( frames . getByte ( <RARE_TOKEN> + i + <RARE_TOKEN> ) , <RARE_TOKEN> [ i ] ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> . length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 0
<a> if ( exception . <RARE_TOKEN> ( null , cause ) ) { </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . <RARE_TOKEN> . transport . socket ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 1
<a> import io . netty . channel . ChannelFutureListener ; </a> 1
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . handler . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . io . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . Random ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 1
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import javax . net . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final Random random = new Random ( ) ; </a> 0
<a> static final byte [ ] data = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> static { </a> 0
<a> random . <RARE_TOKEN> ( data ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 1
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 1
<a> run ( ) ; </a> 1
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ServerBootstrap sb , Bootstrap cb ) throws Throwable { </a> 1
<a> final <RARE_TOKEN> sh = new <RARE_TOKEN> ( true ) ; </a> 0
<a> final <RARE_TOKEN> ch = new <RARE_TOKEN> ( false ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( false ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( true ) ; </a> 0
<a> sb . <RARE_TOKEN> ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel <RARE_TOKEN> ) throws Exception { </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . addLast ( <RARE_TOKEN> , sh ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> cb . handler ( new ChannelInitializer < SocketChannel > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( SocketChannel <RARE_TOKEN> ) throws Exception { </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . addLast ( <RARE_TOKEN> , ch ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Channel sc = sb . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> Channel <RARE_TOKEN> = cb . connect ( ) . sync ( ) . channel ( ) ; </a> 0
<a> ChannelFuture <RARE_TOKEN> = <RARE_TOKEN> . pipeline ( ) . get ( <RARE_TOKEN> . class ) . <RARE_TOKEN> ( ) ; </a> 1
<a> final ChannelFuture <RARE_TOKEN> = </a> 0
<a> <RARE_TOKEN> . write ( Unpooled . wrappedBuffer ( data , 0 , <RARE_TOKEN> ) ) ; </a> 0
<a> final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( ) ; </a> 0
<a> <RARE_TOKEN> . addListener ( new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture future ) throws Exception { </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . sync ( ) ; </a> 0
<a> assertFalse ( <RARE_TOKEN> . get ( ) ) ; </a> 0
<a> for ( int i = <RARE_TOKEN> ; i < data . length ; ) { </a> 0
<a> int length = Math . min ( random . nextInt ( <RARE_TOKEN> * <RARE_TOKEN> ) , data . length - i ) ; </a> 0
<a> <RARE_TOKEN> . write ( Unpooled . wrappedBuffer ( data , i , length ) ) ; </a> 0
<a> i += length ; </a> 0
<a> } </a> 0
<a> while ( ch . <RARE_TOKEN> < data . length ) { </a> 0
<a> if ( sh . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 1 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> while ( sh . <RARE_TOKEN> < data . length ) { </a> 0
<a> if ( sh . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 1 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> sh . channel . close ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> ch . channel . close ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> sc . close ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( sh . exception . get ( ) != null && ! ( sh . exception . get ( ) instanceof IOException ) ) { </a> 0
<a> throw sh . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null && ! ( ch . exception . get ( ) instanceof IOException ) ) { </a> 0
<a> throw ch . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( sh . exception . get ( ) != null ) { </a> 0
<a> throw sh . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( ch . exception . get ( ) != null ) { </a> 0
<a> throw ch . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> volatile Channel channel ; </a> 0
<a> final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; </a> 0
<a> volatile int <RARE_TOKEN> ; </a> 0
<a> private final boolean server ; </a> 0
<a> <RARE_TOKEN> ( boolean server ) { </a> 0
<a> this . server = server ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) </a> 1
<a> throws Exception { </a> 1
<a> channel = ctx . channel ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( </a> 1
<a> ChannelHandlerContext ctx , ByteBuf in ) </a> 1
<a> throws Exception { </a> 1
<a> byte [ ] <RARE_TOKEN> = new byte [ in . readableBytes ( ) ] ; </a> 0
<a> in . readBytes ( <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> . length ; i ++ ) { </a> 0
<a> assertEquals ( data [ i + <RARE_TOKEN> ] , <RARE_TOKEN> [ i ] ) ; </a> 0
<a> } </a> 0
<a> if ( channel . parent ( ) != null ) { </a> 0
<a> channel . write ( Unpooled . wrappedBuffer ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> += <RARE_TOKEN> . length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , </a> 1
<a> Throwable cause ) throws Exception { </a> 1
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . warn ( </a> 0
<a> "Unexpected exception from the " + </a> 0
<a> ( server ? <RARE_TOKEN> : <RARE_TOKEN> ) + " <RARE_TOKEN> , cause ) ; </a> 0
<a> } </a> 0
<a> exception . <RARE_TOKEN> ( null , cause ) ; </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> { </a> 1
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> static { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . getProperty ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . init ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . init ( <RARE_TOKEN> . <RARE_TOKEN> ( ) , null , null ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new Error ( </a> 0
<a> "Failed to <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . getInstance ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . init ( null , <RARE_TOKEN> . <RARE_TOKEN> ( ) , null ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new Error ( </a> 0
<a> "Failed to <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) { </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> [ 0 ] ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> , String <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> , String <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public static <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> [ ] { <RARE_TOKEN> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws <RARE_TOKEN> { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) </a> 0
<a> throws <RARE_TOKEN> { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static final class <RARE_TOKEN> { </a> 0
<a> private static final short [ ] <RARE_TOKEN> = { </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x00 , 0x00 , 0x00 , <RARE_TOKEN> , </a> 0
<a> 0x00 , 0x00 , 0x00 , <RARE_TOKEN> , 0x00 , 0x00 , 0x00 , 0x01 , </a> 0
<a> 0x00 , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x65 , 0x00 , 0x00 , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x00 , 0x00 , 0x01 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x01 , </a> 0
<a> <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , <RARE_TOKEN> , <RARE_TOKEN> , 0x06 , 0x01 , </a> 0
<a> <RARE_TOKEN> , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x01 , 0x01 , <RARE_TOKEN> , </a> 0
<a> 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x06 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0xff , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x03 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0xff , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x00 , </a> 0
<a> 0x00 , 0x00 , 0x01 , 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x30 , <RARE_TOKEN> , 0x00 , 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , 0x03 , </a> 0
<a> <RARE_TOKEN> , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x01 , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , 0x00 , </a> 0
<a> 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , </a> 0
<a> 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , 0x06 , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x31 , 0x13 , 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , 0x30 , </a> 0
<a> <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , </a> 0
<a> 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , 0x74 , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , 0x74 , 0x31 , </a> 0
<a> <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x31 , 0x30 , 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x03 , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , 0x65 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x65 , 0x74 , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x65 , 0x74 , 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x30 , </a> 0
<a> <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x31 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , 0x31 , <RARE_TOKEN> , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x31 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x06 , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , 0x13 , 0x30 , </a> 0
<a> <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x31 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x65 , 0x74 , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , 0x74 , 0x31 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , </a> 0
<a> 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , 0x30 , </a> 0
<a> 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , 0x03 , 0x13 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , 0x74 , 0x74 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , 0x74 , </a> 0
<a> 0x30 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x01 , 0x01 , 0x01 , <RARE_TOKEN> , </a> 0
<a> 0x00 , 0x03 , <RARE_TOKEN> , 0x00 , 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x06 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x03 , 0x01 , 0x00 , 0x01 , 0x30 , <RARE_TOKEN> , </a> 0
<a> 0x06 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x01 , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , 0x00 , 0x03 , <RARE_TOKEN> , 0x00 , </a> 0
<a> 0x65 , <RARE_TOKEN> , 0x30 , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x00 , 0x00 , 0x00 , 0x01 , 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , 0x00 , 0x00 , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x00 , 0x00 , 0x01 , <RARE_TOKEN> , 0x30 , </a> 0
<a> <RARE_TOKEN> , 0x01 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x06 , 0x01 , <RARE_TOKEN> , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x01 , </a> 0
<a> 0x01 , <RARE_TOKEN> , 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , </a> 0
<a> 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x30 , 0x31 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x13 , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x01 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x03 , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x03 , 0x74 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x06 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x00 , 0x00 , 0x00 , 0x01 , 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x00 , 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , 0x30 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x30 , 0x30 , <RARE_TOKEN> , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x03 , <RARE_TOKEN> , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x01 , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x00 , 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , </a> 0
<a> 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , 0x06 , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x31 , 0x13 , 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , </a> 0
<a> 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , </a> 0
<a> 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , 0x74 , 0x74 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , 0x74 , </a> 0
<a> 0x31 , <RARE_TOKEN> , 0x30 , 0x13 , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , </a> 0
<a> 0x30 , 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , 0x03 , </a> 0
<a> 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , 0x74 , </a> 0
<a> 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , </a> 0
<a> 0x74 , 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x30 , </a> 0
<a> <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x31 , 0x31 , <RARE_TOKEN> , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , </a> 0
<a> 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , 0x06 , 0x13 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , 0x13 , 0x30 , <RARE_TOKEN> , 0x06 , </a> 0
<a> 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x31 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x31 , <RARE_TOKEN> , </a> 0
<a> 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , 0x74 , </a> 0
<a> 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , </a> 0
<a> <RARE_TOKEN> , 0x74 , 0x31 , <RARE_TOKEN> , 0x30 , 0x13 , 0x06 , 0x03 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x31 , 0x30 , 0x30 , <RARE_TOKEN> , 0x06 , 0x03 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x03 , 0x13 , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x74 , <RARE_TOKEN> , 0x65 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> 0x65 , 0x74 , 0x74 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x65 , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x65 , 0x74 , 0x30 , <RARE_TOKEN> , 0x30 , <RARE_TOKEN> , 0x06 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x01 , </a> 0
<a> 0x01 , 0x01 , <RARE_TOKEN> , 0x00 , 0x03 , <RARE_TOKEN> , 0x00 , 0x30 , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , 0x03 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x03 , 0x01 , 0x00 , </a> 0
<a> 0x01 , 0x30 , <RARE_TOKEN> , 0x06 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , 0x01 , 0x01 , <RARE_TOKEN> , <RARE_TOKEN> , 0x00 , </a> 0
<a> 0x03 , <RARE_TOKEN> , 0x00 , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> } ; </a> 0
<a> public static InputStream <RARE_TOKEN> ( ) { </a> 0
<a> byte [ ] data = new byte [ <RARE_TOKEN> . length ] ; </a> 0
<a> for ( int i = 0 ; i < data . length ; i ++ ) { </a> 0
<a> data [ i ] = ( byte ) <RARE_TOKEN> [ i ] ; </a> 0
<a> } </a> 0
<a> return new <RARE_TOKEN> ( data ) ; </a> 0
<a> } </a> 0
<a> public static char [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public static char [ ] <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . <RARE_TOKEN> . transport . socket ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import io . netty . bootstrap . Bootstrap ; </a> 1
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . channel . Channel ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 1
<a> import io . netty . channel . ChannelHandler ; </a> 1
<a> import io . netty . channel . ChannelHandlerContext ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . channel . group . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . group . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . socket . SocketChannel ; </a> 1
<a> import java . io . IOException ; </a> 1
<a> import java . util . Random ; </a> 1
<a> import java . util . concurrent . TimeUnit ; </a> 1
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 1
<a> import org . junit . <RARE_TOKEN> ; </a> 1
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private static final Random random = new Random ( ) ; </a> 1
<a> static final byte [ ] data = new byte [ <RARE_TOKEN> ] ; </a> 1
<a> static { </a> 1
<a> random . <RARE_TOKEN> ( data ) ; </a> 1
<a> } </a> 1
<a> @ <RARE_TOKEN> </a> 1
<a> @ Test </a> 1
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 1
<a> run ( ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( ServerBootstrap sb , Bootstrap cb ) throws Throwable { </a> 1
<a> <RARE_TOKEN> handler = new <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> sh = new <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> ch = new <RARE_TOKEN> ( ) ; </a> 1
<a> sb . handler ( handler ) ; </a> 1
<a> sb . <RARE_TOKEN> ( sh ) ; </a> 1
<a> Channel sc = sb . bind ( ) . sync ( ) . channel ( ) ; </a> 1
<a> cb . handler ( ch ) ; </a> 1
<a> cb . connect ( ) . sync ( ) ; </a> 1
<a> Thread . sleep ( 1000 ) ; </a> 1
<a> Bootstrap <RARE_TOKEN> = <RARE_TOKEN> . newInstance ( ) ; </a> 1
<a> <RARE_TOKEN> . handler ( ch ) ; </a> 1
<a> <RARE_TOKEN> . remoteAddress ( <RARE_TOKEN> ) ; </a> 1
<a> ChannelFuture <RARE_TOKEN> = <RARE_TOKEN> . connect ( ) ; </a> 1
<a> assertFalse ( <RARE_TOKEN> . await ( 2 , TimeUnit . SECONDS ) ) ; </a> 1
<a> sc . pipeline ( ) . context ( handler ) . readable ( true ) ; </a> 1
<a> assertTrue ( <RARE_TOKEN> . await ( 2 , TimeUnit . SECONDS ) ) ; </a> 1
<a> sh . group . close ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> ch . group . close ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> sc . close ( ) . sync ( ) ; </a> 1
<a> if ( sh . exception . get ( ) != null && ! ( sh . exception . get ( ) instanceof IOException ) ) { </a> 1
<a> throw sh . exception . get ( ) ; </a> 1
<a> } </a> 1
<a> if ( ch . exception . get ( ) != null && ! ( ch . exception . get ( ) instanceof IOException ) ) { </a> 1
<a> throw ch . exception . get ( ) ; </a> 1
<a> } </a> 1
<a> if ( sh . exception . get ( ) != null ) { </a> 1
<a> throw sh . exception . get ( ) ; </a> 1
<a> } </a> 1
<a> if ( ch . exception . get ( ) != null ) { </a> 1
<a> throw ch . exception . get ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private static class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < SocketChannel > { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , SocketChannel msg ) throws Exception { </a> 1
<a> ctx . <RARE_TOKEN> ( ) . add ( msg ) ; </a> 1
<a> ctx . readable ( false ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ ChannelHandler . Sharable </a> 1
<a> private static class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> final <RARE_TOKEN> group = new <RARE_TOKEN> ( ) ; </a> 1
<a> final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) </a> 1
<a> throws Exception { </a> 1
<a> group . add ( ctx . channel ( ) ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void exceptionCaught ( ChannelHandlerContext ctx , </a> 1
<a> Throwable cause ) throws Exception { </a> 1
<a> if ( exception . <RARE_TOKEN> ( null , cause ) ) { </a> 1
<a> ctx . close ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception { </a> 1
<a> in . clear ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . <RARE_TOKEN> . transport . socket ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . nio . NioEventLoopGroup ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 1
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> static List < Entry < Factory < ServerBootstrap > , Factory < Bootstrap > > > socket ( ) { </a> 0
<a> List < Entry < Factory < ServerBootstrap > , Factory < Bootstrap > > > list = </a> 0
<a> new ArrayList < Entry < Factory < ServerBootstrap > , Factory < Bootstrap > > > ( ) ; </a> 0
<a> List < Factory < ServerBootstrap > > <RARE_TOKEN> = </a> 1
<a> new ArrayList < Factory < ServerBootstrap > > ( ) ; </a> 1
<a> <RARE_TOKEN> . add ( new Factory < ServerBootstrap > ( ) { </a> 1
<a> @ Override </a> 1
<a> public ServerBootstrap newInstance ( ) { </a> 1
<a> return new ServerBootstrap ( ) . </a> 1
<a> group ( new NioEventLoopGroup ( ) , new NioEventLoopGroup ( ) ) . </a> 1
<a> channel ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> <RARE_TOKEN> . add ( new Factory < ServerBootstrap > ( ) { </a> 1
<a> @ Override </a> 1
<a> public ServerBootstrap newInstance ( ) { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> return new ServerBootstrap ( ) . </a> 1
<a> group ( <RARE_TOKEN> , <RARE_TOKEN> ) . </a> 1
<a> channel ( new <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . add ( new Factory < ServerBootstrap > ( ) { </a> 0
<a> @ Override </a> 0
<a> public ServerBootstrap newInstance ( ) { </a> 0
<a> return new ServerBootstrap ( ) . </a> 1
<a> group ( new <RARE_TOKEN> ( ) , new <RARE_TOKEN> ( ) ) . </a> 1
<a> channel ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> List < Factory < Bootstrap > > <RARE_TOKEN> = </a> 0
<a> new ArrayList < Factory < Bootstrap > > ( ) ; </a> 0
<a> <RARE_TOKEN> . add ( new Factory < Bootstrap > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Bootstrap newInstance ( ) { </a> 0
<a> return new Bootstrap ( ) . group ( new NioEventLoopGroup ( ) ) . channel ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . add ( new Factory < Bootstrap > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Bootstrap newInstance ( ) { </a> 0
<a> <RARE_TOKEN> loop = new <RARE_TOKEN> ( ) ; </a> 0
<a> return new Bootstrap ( ) . group ( loop ) . channel ( new <RARE_TOKEN> ( loop ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . add ( new Factory < Bootstrap > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Bootstrap newInstance ( ) { </a> 0
<a> return new Bootstrap ( ) . group ( new <RARE_TOKEN> ( ) ) . channel ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> for ( Factory < ServerBootstrap > <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> for ( Factory < Bootstrap > <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> final Factory < ServerBootstrap > <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> final Factory < Bootstrap > <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> list . add ( new Entry < Factory < ServerBootstrap > , Factory < Bootstrap > > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Factory < ServerBootstrap > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Factory < Bootstrap > getValue ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Factory < Bootstrap > <RARE_TOKEN> ( Factory < Bootstrap > value ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> list . remove ( list . size ( ) - 1 ) ; </a> 0
<a> return list ; </a> 0
<a> } </a> 0
<a> static List < Entry < Factory < Bootstrap > , Factory < Bootstrap > > > <RARE_TOKEN> ( ) { </a> 0
<a> List < Entry < Factory < Bootstrap > , Factory < Bootstrap > > > list = </a> 0
<a> new ArrayList < Entry < Factory < Bootstrap > , Factory < Bootstrap > > > ( ) ; </a> 0
<a> List < Factory < Bootstrap > > <RARE_TOKEN> = </a> 0
<a> new ArrayList < Factory < Bootstrap > > ( ) ; </a> 0
<a> <RARE_TOKEN> . add ( new Factory < Bootstrap > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Bootstrap newInstance ( ) { </a> 0
<a> return new Bootstrap ( ) . group ( new NioEventLoopGroup ( ) ) . channel ( </a> 0
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> . add ( new Factory < Bootstrap > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Bootstrap newInstance ( ) { </a> 0
<a> return new Bootstrap ( ) . group ( new <RARE_TOKEN> ( ) ) . channel ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> for ( Factory < Bootstrap > <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> for ( Factory < Bootstrap > <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> final Factory < Bootstrap > <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> final Factory < Bootstrap > <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> list . add ( new Entry < Factory < Bootstrap > , Factory < Bootstrap > > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Factory < Bootstrap > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Factory < Bootstrap > getValue ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Factory < Bootstrap > <RARE_TOKEN> ( Factory < Bootstrap > value ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return list ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { } </a> 0
<a> interface Factory < T > { </a> 0
<a> T newInstance ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . <RARE_TOKEN> . util ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> { </a> 1
<a> private final static int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private final static int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> public static int <RARE_TOKEN> ( ) { </a> 0
<a> for ( int start = <RARE_TOKEN> ; start <= <RARE_TOKEN> ; start ++ ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> socket = new <RARE_TOKEN> ( start ) ; </a> 0
<a> socket . <RARE_TOKEN> ( true ) ; </a> 0
<a> socket . close ( ) ; </a> 0
<a> return start ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> } </a> 0
<a> } </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> to <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . bootstrap ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> import io . netty . channel . ChannelOption ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . net . InetAddress ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> public class Bootstrap { </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( Bootstrap . class ) ; </a> 0
<a> private final Map < ChannelOption < ? > , Object > <RARE_TOKEN> = new <RARE_TOKEN> < ChannelOption < ? > , Object > ( ) ; </a> 0
<a> private <RARE_TOKEN> group ; </a> 0
<a> private Channel channel ; </a> 0
<a> private ChannelHandler handler ; </a> 0
<a> private SocketAddress localAddress ; </a> 0
<a> private SocketAddress remoteAddress ; </a> 0
<a> public Bootstrap group ( <RARE_TOKEN> group ) { </a> 0
<a> if ( group == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( this . group != null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> set <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . group = group ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Bootstrap channel ( Channel channel ) { </a> 0
<a> if ( channel == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( this . channel != null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> set <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . channel = channel ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public < T > Bootstrap option ( ChannelOption < T > option , T value ) { </a> 0
<a> if ( option == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( value == null ) { </a> 0
<a> <RARE_TOKEN> . remove ( option ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . put ( option , value ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Bootstrap handler ( ChannelHandler handler ) { </a> 0
<a> if ( handler == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . handler = handler ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Bootstrap localAddress ( SocketAddress localAddress ) { </a> 0
<a> this . localAddress = localAddress ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Bootstrap localAddress ( int port ) { </a> 0
<a> localAddress = new InetSocketAddress ( port ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Bootstrap localAddress ( String host , int port ) { </a> 0
<a> localAddress = new InetSocketAddress ( host , port ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Bootstrap localAddress ( InetAddress host , int port ) { </a> 0
<a> localAddress = new InetSocketAddress ( host , port ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Bootstrap remoteAddress ( SocketAddress remoteAddress ) { </a> 0
<a> this . remoteAddress = remoteAddress ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Bootstrap remoteAddress ( String host , int port ) { </a> 0
<a> remoteAddress = new InetSocketAddress ( host , port ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Bootstrap remoteAddress ( InetAddress host , int port ) { </a> 0
<a> remoteAddress = new InetSocketAddress ( host , port ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public ChannelFuture bind ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return bind ( channel . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public ChannelFuture bind ( ChannelFuture future ) { </a> 0
<a> <RARE_TOKEN> ( future ) ; </a> 0
<a> if ( localAddress == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> init ( ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> future . setFailure ( t ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( future ) ) { </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> return channel . bind ( localAddress , future ) . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> public ChannelFuture connect ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return connect ( channel . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public ChannelFuture connect ( ChannelFuture future ) { </a> 0
<a> <RARE_TOKEN> ( future ) ; </a> 0
<a> if ( remoteAddress == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> init ( ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> future . setFailure ( t ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( future ) ) { </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> if ( localAddress == null ) { </a> 0
<a> channel . connect ( remoteAddress , future ) ; </a> 0
<a> } else { </a> 0
<a> channel . connect ( remoteAddress , localAddress , future ) ; </a> 0
<a> } </a> 0
<a> return future . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void init ( ) throws Exception { </a> 0
<a> if ( channel . isActive ( ) ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + channel ) ; </a> 0
<a> } </a> 0
<a> if ( channel . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + channel ) ; </a> 0
<a> } </a> 0
<a> if ( ! channel . isOpen ( ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> ChannelPipeline p = channel . pipeline ( ) ; </a> 0
<a> p . addLast ( handler ) ; </a> 0
<a> for ( Entry < ChannelOption < ? > , Object > e : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> try { </a> 0
<a> if ( ! channel . config ( ) . <RARE_TOKEN> ( ( ChannelOption < Object > ) e . <RARE_TOKEN> ( ) , e . getValue ( ) ) ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> channel <RARE_TOKEN> " + e ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( "Failed to set a channel <RARE_TOKEN> " + channel , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> group . <RARE_TOKEN> ( channel ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private static boolean <RARE_TOKEN> ( ChannelFuture future ) { </a> 0
<a> if ( ! future . channel ( ) . isOpen ( ) ) { </a> 0
<a> future . setFailure ( new ChannelException ( <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public void shutdown ( ) { </a> 0
<a> if ( group != null ) { </a> 0
<a> group . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( group == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( channel == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( handler == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelFuture future ) { </a> 0
<a> if ( future == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( future . channel ( ) != channel ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> must be the <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . bootstrap ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . ChannelOption ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import java . net . InetAddress ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> public class ServerBootstrap { </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( ServerBootstrap . class ) ; </a> 0
<a> private static final InetSocketAddress <RARE_TOKEN> = new InetSocketAddress ( <RARE_TOKEN> . <RARE_TOKEN> , 0 ) ; </a> 0
<a> private final ChannelHandler <RARE_TOKEN> = new ChannelInitializer < Channel > ( ) { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( Channel ch ) throws Exception { </a> 1
<a> ch . pipeline ( ) . addLast ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> private final Map < ChannelOption < ? > , Object > <RARE_TOKEN> = new <RARE_TOKEN> < ChannelOption < ? > , Object > ( ) ; </a> 0
<a> private final Map < ChannelOption < ? > , Object > <RARE_TOKEN> = new <RARE_TOKEN> < ChannelOption < ? > , Object > ( ) ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> private <RARE_TOKEN> channel ; </a> 0
<a> private ChannelHandler handler ; </a> 0
<a> private ChannelHandler <RARE_TOKEN> ; </a> 1
<a> private SocketAddress localAddress ; </a> 0
<a> public ServerBootstrap group ( <RARE_TOKEN> group ) { </a> 0
<a> if ( group == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> set <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = group ; </a> 0
<a> <RARE_TOKEN> = group ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public ServerBootstrap group ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( this . <RARE_TOKEN> != null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> set <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public ServerBootstrap channel ( <RARE_TOKEN> channel ) { </a> 0
<a> if ( channel == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> if ( this . channel != null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> set <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> this . channel = channel ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public < T > ServerBootstrap option ( ChannelOption < T > <RARE_TOKEN> , T value ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( value == null ) { </a> 0
<a> <RARE_TOKEN> . remove ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , value ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 1
<a> public < T > ServerBootstrap <RARE_TOKEN> ( ChannelOption < T > <RARE_TOKEN> , T value ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( value == null ) { </a> 0
<a> <RARE_TOKEN> . remove ( <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , value ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public ServerBootstrap handler ( ChannelHandler handler ) { </a> 0
<a> this . handler = handler ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public ServerBootstrap <RARE_TOKEN> ( ChannelHandler <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public ServerBootstrap localAddress ( SocketAddress localAddress ) { </a> 0
<a> if ( localAddress == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . localAddress = localAddress ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public ServerBootstrap localAddress ( int port ) { </a> 0
<a> localAddress = new InetSocketAddress ( port ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public ServerBootstrap localAddress ( String host , int port ) { </a> 0
<a> localAddress = new InetSocketAddress ( host , port ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public ServerBootstrap localAddress ( InetAddress host , int port ) { </a> 0
<a> localAddress = new InetSocketAddress ( host , port ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public ChannelFuture bind ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return bind ( channel . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public ChannelFuture bind ( ChannelFuture future ) { </a> 0
<a> <RARE_TOKEN> ( future ) ; </a> 0
<a> if ( channel . isActive ( ) ) { </a> 0
<a> future . setFailure ( new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + channel ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> if ( channel . <RARE_TOKEN> ( ) ) { </a> 0
<a> future . setFailure ( new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + channel ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> if ( ! channel . isOpen ( ) ) { </a> 0
<a> future . setFailure ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> try { </a> 1
<a> channel . config ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 1
<a> future . setFailure ( e ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 1
<a> ChannelPipeline p = channel . pipeline ( ) ; </a> 0
<a> if ( handler != null ) { </a> 0
<a> p . addLast ( handler ) ; </a> 0
<a> } </a> 0
<a> p . addLast ( <RARE_TOKEN> ) ; </a> 1
<a> ChannelFuture f = <RARE_TOKEN> . <RARE_TOKEN> ( channel ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! f . <RARE_TOKEN> ( ) ) { </a> 1
<a> future . setFailure ( f . cause ( ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 1
<a> if ( ! channel . isOpen ( ) ) { </a> 0
<a> future . setFailure ( new ChannelException ( <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> channel . bind ( localAddress , future ) . addListener ( ChannelFutureListener . <RARE_TOKEN> ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> public void shutdown ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( channel == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> not <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> is not <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( localAddress == null ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> is not <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> + " <RARE_TOKEN> ) ; </a> 0
<a> localAddress = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelFuture future ) { </a> 0
<a> if ( future == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( future . channel ( ) != channel ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> must be the <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> implements <RARE_TOKEN> < Channel > { </a> 0
<a> @ Override </a> 0
<a> public MessageBuf < Channel > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) { </a> 1
<a> MessageBuf < Channel > in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> Channel <RARE_TOKEN> = in . poll ( ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . pipeline ( ) . addLast ( <RARE_TOKEN> ) ; </a> 0
<a> for ( Entry < ChannelOption < ? > , Object > e : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 1
<a> try { </a> 0
<a> if ( ! <RARE_TOKEN> . config ( ) . <RARE_TOKEN> ( ( ChannelOption < Object > ) e . <RARE_TOKEN> ( ) , e . getValue ( ) ) ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> channel <RARE_TOKEN> " + e ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( "Failed to set a channel <RARE_TOKEN> " + <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( "Failed to <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . bootstrap ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . Random ; </a> 0
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> implements Channel { </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> static final <RARE_TOKEN> < Integer , Channel > <RARE_TOKEN> = new ConcurrentHashMap < Integer , Channel > ( ) ; </a> 1
<a> private static final Random random = new Random ( ) ; </a> 0
<a> private static Integer <RARE_TOKEN> ( Channel channel ) { </a> 1
<a> int <RARE_TOKEN> = random . nextInt ( ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> = - <RARE_TOKEN> ; </a> 0
<a> } else if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = - 1 ; </a> 0
<a> } </a> 0
<a> Integer id ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> id = Integer . valueOf ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( id , channel ) == null ) { </a> 1
<a> return id ; </a> 1
<a> } else { </a> 1
<a> <RARE_TOKEN> -- ; </a> 1
<a> if ( <RARE_TOKEN> >= 0 ) { </a> 1
<a> <RARE_TOKEN> = - 1 ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<a> private final Channel parent ; </a> 0
<a> private final Integer id ; </a> 0
<a> private final <RARE_TOKEN> unsafe ; </a> 0
<a> private final <RARE_TOKEN> pipeline ; </a> 0
<a> private final ChannelFuture <RARE_TOKEN> = new <RARE_TOKEN> ( this ) ; </a> 0
<a> private final ChannelFuture <RARE_TOKEN> = new <RARE_TOKEN> ( this ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( this ) ; </a> 1
<a> protected final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> private volatile SocketAddress localAddress ; </a> 0
<a> private volatile SocketAddress remoteAddress ; </a> 0
<a> private volatile EventLoop eventLoop ; </a> 0
<a> private volatile boolean <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 1
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private String <RARE_TOKEN> ; </a> 0
<a> protected <RARE_TOKEN> ( Channel parent , Integer id ) { </a> 0
<a> if ( id == null ) { </a> 0
<a> id = <RARE_TOKEN> ( this ) ; </a> 0
<a> } else { </a> 0
<a> if ( id . <RARE_TOKEN> ( ) < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + id + " (expected: >= <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( id , this ) != null ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> " + id ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> this . parent = parent ; </a> 0
<a> this . id = id ; </a> 0
<a> unsafe = <RARE_TOKEN> ( ) ; </a> 0
<a> pipeline = new <RARE_TOKEN> ( this ) ; </a> 0
<a> <RARE_TOKEN> ( ) . addListener ( new ChannelFutureListener ( ) { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelFuture future ) { </a> 1
<a> <RARE_TOKEN> . remove ( id ( ) ) ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public final Integer id ( ) { </a> 1
<a> return id ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public Channel parent ( ) { </a> 0
<a> return parent ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelPipeline pipeline ( ) { </a> 0
<a> return pipeline ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public EventLoop eventLoop ( ) { </a> 0
<a> EventLoop eventLoop = this . eventLoop ; </a> 0
<a> if ( eventLoop == null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> not <RARE_TOKEN> to an event <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return eventLoop ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public SocketAddress localAddress ( ) { </a> 0
<a> SocketAddress localAddress = this . localAddress ; </a> 0
<a> if ( localAddress == null ) { </a> 0
<a> try { </a> 0
<a> this . localAddress = localAddress = unsafe ( ) . localAddress ( ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return localAddress ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> localAddress = null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public SocketAddress remoteAddress ( ) { </a> 0
<a> SocketAddress remoteAddress = this . remoteAddress ; </a> 0
<a> if ( remoteAddress == null ) { </a> 0
<a> try { </a> 0
<a> this . remoteAddress = remoteAddress = unsafe ( ) . remoteAddress ( ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return remoteAddress ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> remoteAddress = null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture bind ( SocketAddress localAddress ) { </a> 0
<a> return pipeline . bind ( localAddress ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture connect ( SocketAddress remoteAddress ) { </a> 0
<a> return pipeline . connect ( remoteAddress ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture connect ( SocketAddress remoteAddress , SocketAddress localAddress ) { </a> 0
<a> return pipeline . connect ( remoteAddress , localAddress ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture disconnect ( ) { </a> 0
<a> return pipeline . disconnect ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture close ( ) { </a> 0
<a> return pipeline . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> return pipeline . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture flush ( ) { </a> 1
<a> return pipeline . flush ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture write ( Object message ) { </a> 1
<a> return pipeline . write ( message ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture bind ( SocketAddress localAddress , ChannelFuture future ) { </a> 0
<a> return pipeline . bind ( localAddress , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture connect ( SocketAddress remoteAddress , ChannelFuture future ) { </a> 0
<a> return pipeline . connect ( remoteAddress , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture connect ( SocketAddress remoteAddress , SocketAddress localAddress , ChannelFuture future ) { </a> 0
<a> return pipeline . connect ( remoteAddress , localAddress , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture disconnect ( ChannelFuture future ) { </a> 0
<a> return pipeline . disconnect ( future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture close ( ChannelFuture future ) { </a> 0
<a> return pipeline . close ( future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ChannelFuture future ) { </a> 0
<a> return pipeline . <RARE_TOKEN> ( future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 1
<a> return pipeline . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public MessageBuf < Object > <RARE_TOKEN> ( ) { </a> 1
<a> return pipeline . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelFuture flush ( ChannelFuture future ) { </a> 0
<a> return pipeline . flush ( future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture write ( Object message , ChannelFuture future ) { </a> 0
<a> return pipeline . write ( message , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( this , false ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> return new <RARE_TOKEN> ( this , cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> unsafe ( ) { </a> 0
<a> return unsafe ; </a> 0
<a> } </a> 0
<a> protected abstract <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> @ Override </a> 0
<a> public final int hashCode ( ) { </a> 0
<a> return this . id ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final boolean equals ( Object o ) { </a> 0
<a> return this == o ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final int <RARE_TOKEN> ( Channel o ) { </a> 0
<a> return id ( ) . <RARE_TOKEN> ( o . id ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> boolean <RARE_TOKEN> = isActive ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> && <RARE_TOKEN> != null ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> SocketAddress <RARE_TOKEN> = remoteAddress ( ) ; </a> 0
<a> SocketAddress <RARE_TOKEN> = localAddress ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> SocketAddress <RARE_TOKEN> ; </a> 0
<a> SocketAddress <RARE_TOKEN> ; </a> 0
<a> if ( parent == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , id , <RARE_TOKEN> , <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } else if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> = String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , id , <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = String . format ( <RARE_TOKEN> <RARE_TOKEN> , id ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected abstract class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private final Runnable <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> @ Override </a> 0
<a> public final ChannelHandlerContext <RARE_TOKEN> ( ) { </a> 0
<a> return pipeline . <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public final ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final SocketAddress localAddress ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final SocketAddress remoteAddress ( ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( EventLoop eventLoop , ChannelFuture future ) { </a> 1
<a> if ( eventLoop == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> to an event loop <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ( eventLoop ) ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> event loop <RARE_TOKEN> " + eventLoop . getClass ( ) . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . this . eventLoop = eventLoop ; </a> 0
<a> assert eventLoop ( ) . inEventLoop ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> ( future ) ) { </a> 0
<a> return ; </a> 1
<a> } </a> 1
<a> try { </a> 0
<a> Runnable <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> pipeline . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . run ( ) ; </a> 0
<a> } </a> 0
<a> if ( isActive ( ) ) { </a> 0
<a> pipeline . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> try { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } catch ( Throwable <RARE_TOKEN> ) { </a> 1
<a> logger . warn ( "Failed to close a <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> future . setFailure ( t ) ; </a> 0
<a> pipeline . fireExceptionCaught ( t ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public final void bind ( final SocketAddress localAddress , final ChannelFuture future ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( future ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> boolean <RARE_TOKEN> = isActive ( ) ; </a> 0
<a> <RARE_TOKEN> ( localAddress ) ; </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> && isActive ( ) ) { </a> 0
<a> pipeline . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> future . setFailure ( t ) ; </a> 0
<a> pipeline . fireExceptionCaught ( t ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> bind ( localAddress , future ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void disconnect ( final ChannelFuture future ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> try { </a> 0
<a> boolean <RARE_TOKEN> = isActive ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> && ! isActive ( ) ) { </a> 0
<a> pipeline . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> future . setFailure ( t ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> disconnect ( future ) ; </a> 0
<a> } </a> 1
<a> } ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void close ( final ChannelFuture future ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> boolean <RARE_TOKEN> = isActive ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> future . setFailure ( t ) ; </a> 1
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> && ! isActive ( ) ) { </a> 0
<a> pipeline . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> close ( future ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void <RARE_TOKEN> ( final ChannelFuture future ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( "Unexpected exception <RARE_TOKEN> while <RARE_TOKEN> a <RARE_TOKEN> , t ) ; </a> 0
<a> } finally { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> pipeline . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> ( future ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void flush ( final ChannelFuture future ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> if ( future != <RARE_TOKEN> ) { </a> 0
<a> final int <RARE_TOKEN> ; </a> 1
<a> final ChannelHandlerContext ctx = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ctx . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> = ctx . <RARE_TOKEN> ( ) . readableBytes ( ) ; </a> 1
<a> } else { </a> 1
<a> <RARE_TOKEN> = ctx . <RARE_TOKEN> ( ) . size ( ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( future , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 1
<a> try { </a> 0
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } else { </a> 1
<a> } </a> 1
<a> } catch ( Throwable t ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( t ) ; </a> 1
<a> pipeline . fireExceptionCaught ( t ) ; </a> 0
<a> if ( t instanceof IOException ) { </a> 1
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> if ( ! isActive ( ) ) { </a> 0
<a> close ( unsafe ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } else { </a> 1
<a> if ( ! <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> eventLoop ( ) . execute ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } else { </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> flush ( future ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 1
<a> public final void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> ChannelHandlerContext ctx = <RARE_TOKEN> ( ) ; </a> 0
<a> Throwable cause = null ; </a> 0
<a> try { </a> 0
<a> if ( ctx . <RARE_TOKEN> ( ) ) { </a> 0
<a> ByteBuf out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> int <RARE_TOKEN> = out . readableBytes ( ) ; </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> ( out ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 0
<a> cause = t ; </a> 0
<a> } finally { </a> 0
<a> final int <RARE_TOKEN> = out . readableBytes ( ) ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> - <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 1
<a> out . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> MessageBuf < Object > out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> int <RARE_TOKEN> = out . size ( ) ; </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> ( out ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> cause = t ; </a> 1
<a> } finally { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> - out . size ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> if ( cause == null ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> } else { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( cause ) ; </a> 1
<a> pipeline . fireExceptionCaught ( cause ) ; </a> 0
<a> if ( cause instanceof IOException ) { </a> 1
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } finally { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected final boolean <RARE_TOKEN> ( ChannelFuture future ) { </a> 0
<a> if ( isOpen ( ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> Exception e = new <RARE_TOKEN> ( ) ; </a> 1
<a> future . setFailure ( e ) ; </a> 1
<a> pipeline . fireExceptionCaught ( e ) ; </a> 1
<a> return false ; </a> 0
<a> } </a> 0
<a> protected final void <RARE_TOKEN> ( ) { </a> 0
<a> if ( isOpen ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> implements Runnable { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> = false ; </a> 1
<a> unsafe ( ) . flush ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> protected abstract boolean <RARE_TOKEN> ( EventLoop loop ) ; </a> 0
<a> protected abstract SocketAddress <RARE_TOKEN> ( ) ; </a> 0
<a> protected abstract SocketAddress <RARE_TOKEN> ( ) ; </a> 0
<a> protected abstract Runnable <RARE_TOKEN> ( ) throws Exception ; </a> 0
<a> protected abstract void <RARE_TOKEN> ( SocketAddress localAddress ) throws Exception ; </a> 0
<a> protected abstract void <RARE_TOKEN> ( ) throws Exception ; </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> } </a> 0
<a> protected abstract void <RARE_TOKEN> ( ) throws Exception ; </a> 0
<a> protected abstract void <RARE_TOKEN> ( ) throws Exception ; </a> 0
<a> protected void <RARE_TOKEN> ( ByteBuf buf ) throws Exception { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 0
<a> protected abstract boolean <RARE_TOKEN> ( ) ; </a> 0
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> implements ChannelFuture . <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ch ) { </a> 0
<a> super ( ch , false ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> throw new IllegalStateException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean setFailure ( Throwable cause ) { </a> 0
<a> throw new IllegalStateException ( ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> an <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> return super . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . ChannelBufType ; </a> 1
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import java . net . SocketAddress ; </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final ChannelMetadata <RARE_TOKEN> = new ChannelMetadata ( ChannelBufType . <RARE_TOKEN> , false ) ; </a> 0
<a> protected <RARE_TOKEN> ( Integer id ) { </a> 0
<a> super ( null , id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 1
<a> throw new <RARE_TOKEN> ( String . format ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> . class . getSimpleName ( ) ) ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public MessageBuf < Object > <RARE_TOKEN> ( ) { </a> 1
<a> throw new <RARE_TOKEN> ( String . format ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> . class . getSimpleName ( ) ) ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelMetadata <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public SocketAddress remoteAddress ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ByteBuf buf ) throws Exception { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> protected abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 0
<a> public void flush ( final ChannelFuture future ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> <RARE_TOKEN> ( future ) ; </a> 1
<a> } else { </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> flush ( future ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void connect ( </a> 1
<a> final SocketAddress remoteAddress , final SocketAddress localAddress , </a> 1
<a> final ChannelFuture future ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> <RARE_TOKEN> ( future ) ; </a> 1
<a> } else { </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> connect ( remoteAddress , localAddress , future ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ChannelFuture future ) { </a> 0
<a> Exception cause = new UnsupportedOperationException ( ) ; </a> 1
<a> future . setFailure ( cause ) ; </a> 1
<a> pipeline ( ) . fireExceptionCaught ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> import java . nio . channels . SelectionKey ; </a> 1
<a> public interface Channel extends <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> < Channel > { </a> 1
<a> Integer id ( ) ; </a> 1
<a> EventLoop eventLoop ( ) ; </a> 0
<a> Channel parent ( ) ; </a> 0
<a> <RARE_TOKEN> config ( ) ; </a> 0
<a> ChannelPipeline pipeline ( ) ; </a> 1
<a> boolean isOpen ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean isActive ( ) ; </a> 0
<a> ChannelMetadata <RARE_TOKEN> ( ) ; </a> 0
<a> ByteBuf <RARE_TOKEN> ( ) ; </a> 1
<a> < T > MessageBuf < T > <RARE_TOKEN> ( ) ; </a> 1
<a> SocketAddress localAddress ( ) ; </a> 0
<a> SocketAddress remoteAddress ( ) ; </a> 0
<a> ChannelFuture <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> unsafe ( ) ; </a> 0
<a> interface <RARE_TOKEN> { </a> 0
<a> ChannelHandlerContext <RARE_TOKEN> ( ) ; </a> 0
<a> ChannelFuture <RARE_TOKEN> ( ) ; </a> 0
<a> SocketAddress localAddress ( ) ; </a> 0
<a> SocketAddress remoteAddress ( ) ; </a> 0
<a> void <RARE_TOKEN> ( EventLoop eventLoop , ChannelFuture future ) ; </a> 0
<a> void bind ( SocketAddress localAddress , ChannelFuture future ) ; </a> 0
<a> void connect ( SocketAddress remoteAddress , SocketAddress localAddress , ChannelFuture future ) ; </a> 0
<a> void disconnect ( ChannelFuture future ) ; </a> 0
<a> void close ( ChannelFuture future ) ; </a> 0
<a> void <RARE_TOKEN> ( ChannelFuture future ) ; </a> 0
<a> void flush ( ChannelFuture future ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 1
<a> void <RARE_TOKEN> ( ) ; </a> 1
<a> void <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> Map < ChannelOption < ? > , Object > <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( Map < ChannelOption < ? > , ? > <RARE_TOKEN> ) ; </a> 0
<a> < T > T <RARE_TOKEN> ( ChannelOption < T > option ) ; </a> 0
<a> < T > boolean <RARE_TOKEN> ( ChannelOption < T > option , T value ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public class ChannelException extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public ChannelException ( ) { </a> 0
<a> } </a> 0
<a> public ChannelException ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public ChannelException ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public ChannelException ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . util . concurrent . Future ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public interface ChannelFuture extends Future < Void > { </a> 0
<a> Channel channel ( ) ; </a> 0
<a> @ Override </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> @ Override </a> 0
<a> boolean isCancelled ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> Throwable cause ( ) ; </a> 0
<a> boolean cancel ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean setFailure ( Throwable cause ) ; </a> 0
<a> boolean <RARE_TOKEN> ( long <RARE_TOKEN> , long current , long <RARE_TOKEN> ) ; </a> 0
<a> ChannelFuture addListener ( ChannelFutureListener listener ) ; </a> 0
<a> ChannelFuture <RARE_TOKEN> ( ChannelFutureListener listener ) ; </a> 0
<a> ChannelFuture sync ( ) throws InterruptedException ; </a> 0
<a> ChannelFuture <RARE_TOKEN> ( ) ; </a> 0
<a> ChannelFuture await ( ) throws InterruptedException ; </a> 0
<a> ChannelFuture <RARE_TOKEN> ( ) ; </a> 0
<a> boolean await ( long timeout , TimeUnit unit ) throws InterruptedException ; </a> 0
<a> boolean await ( long <RARE_TOKEN> ) throws InterruptedException ; </a> 0
<a> boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) ; </a> 0
<a> boolean <RARE_TOKEN> ( long <RARE_TOKEN> ) ; </a> 0
<a> interface <RARE_TOKEN> extends ChannelFuture { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . util . HashSet ; </a> 0
<a> import java . util . Set ; </a> 0
<a> public class <RARE_TOKEN> implements ChannelFutureListener { </a> 0
<a> private final ChannelFuture <RARE_TOKEN> ; </a> 0
<a> private Set < ChannelFuture > <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ChannelFuture <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture future ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new HashSet < ChannelFuture > ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( future ) ; </a> 0
<a> } </a> 0
<a> future . addListener ( this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture future ) </a> 1
<a> throws Exception { </a> 1
<a> if ( future . isCancelled ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> synchronized ( this ) { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> . remove ( future ) ; </a> 0
<a> if ( ! future . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . setFailure ( future . cause ( ) ) ; </a> 0
<a> for ( ChannelFuture <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . cancel ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public interface ChannelFutureListener extends <RARE_TOKEN> { </a> 0
<a> ChannelFutureListener <RARE_TOKEN> = new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture future ) { </a> 0
<a> future . channel ( ) . close ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> ChannelFutureListener <RARE_TOKEN> = new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture future ) { </a> 0
<a> if ( ! future . <RARE_TOKEN> ( ) ) { </a> 0
<a> future . channel ( ) . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> void <RARE_TOKEN> ( ChannelFuture future ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public interface <RARE_TOKEN> extends ChannelFutureListener { </a> 0
<a> void <RARE_TOKEN> ( ChannelFuture future , long <RARE_TOKEN> , long current , long <RARE_TOKEN> ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . channel . group . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . lang . annotation . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> public interface ChannelHandler { </a> 0
<a> void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception ; </a> 0
<a> void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object <RARE_TOKEN> ) throws Exception ; </a> 1
<a> @ <RARE_TOKEN> </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . TYPE ) </a> 0
<a> @ <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) </a> 0
<a> @ interface Sharable { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . net . SocketAddress ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void bind ( ChannelHandlerContext ctx , SocketAddress localAddress , ChannelFuture future ) throws Exception { </a> 0
<a> ctx . bind ( localAddress , future ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void connect ( </a> 0
<a> ChannelHandlerContext ctx , SocketAddress remoteAddress , SocketAddress localAddress , </a> 0
<a> ChannelFuture future ) throws Exception { </a> 0
<a> ctx . connect ( remoteAddress , localAddress , future ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void disconnect ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> ctx . disconnect ( future ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void close ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> ctx . close ( future ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> ctx . <RARE_TOKEN> ( future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> if ( this instanceof <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalStateException ( </a> 0
<a> <RARE_TOKEN> must be <RARE_TOKEN> <RARE_TOKEN> " + getClass ( ) . getName ( ) + </a> 0
<a> ", <RARE_TOKEN> implements " + <RARE_TOKEN> . class . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> ctx . flush ( future ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . Set ; </a> 0
<a> public interface ChannelHandlerContext </a> 0
<a> extends <RARE_TOKEN> , <RARE_TOKEN> , </a> 1
<a> <RARE_TOKEN> , <RARE_TOKEN> { </a> 1
<a> Channel channel ( ) ; </a> 0
<a> ChannelPipeline pipeline ( ) ; </a> 1
<a> EventExecutor executor ( ) ; </a> 0
<a> String name ( ) ; </a> 0
<a> ChannelHandler handler ( ) ; </a> 0
<a> Set < <RARE_TOKEN> > type ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> ( ) ; </a> 1
<a> < T > MessageBuf < T > <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> ( ) ; </a> 1
<a> < T > MessageBuf < T > <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> ByteBuf <RARE_TOKEN> ( ) ; </a> 1
<a> MessageBuf < Object > <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> ByteBuf <RARE_TOKEN> ( ) ; </a> 1
<a> MessageBuf < Object > <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> ( ) ; </a> 1
<a> void readable ( boolean readable ) ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( 0 ) , </a> 0
<a> <RARE_TOKEN> ( 0 ) , </a> 0
<a> <RARE_TOKEN> ( 1 ) , </a> 0
<a> <RARE_TOKEN> ( 1 ) ; </a> 0
<a> final int <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> ByteBuf <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> public abstract class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . buffer ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> ByteBuf in = ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> inboundBufferUpdated ( ctx , in ) ; </a> 0
<a> } finally { </a> 0
<a> if ( ! in . readable ( ) ) { </a> 1
<a> in . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<a> public abstract void inboundBufferUpdated ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception ; </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 1
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public abstract class <RARE_TOKEN> </a> 0
<a> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public abstract void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void fireExceptionCaught ( Throwable cause ) ; </a> 0
<a> void <RARE_TOKEN> ( Object event ) ; </a> 0
<a> void fireInboundBufferUpdated ( ) ; </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> public interface <RARE_TOKEN> < <RARE_TOKEN> > extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> MessageBuf < <RARE_TOKEN> > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> public abstract class ChannelInboundMessageHandlerAdapter < <RARE_TOKEN> > </a> 1
<a> extends <RARE_TOKEN> implements <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> @ Override </a> 1
<a> public MessageBuf < <RARE_TOKEN> > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public final void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> MessageBuf < <RARE_TOKEN> > in = ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> <RARE_TOKEN> msg = in . poll ( ) ; </a> 0
<a> if ( msg == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> ( ctx , msg ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> ctx . fireExceptionCaught ( t ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { } </a> 0
<a> public abstract void <RARE_TOKEN> ( ChannelHandlerContext ctx , <RARE_TOKEN> msg ) throws Exception ; </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { } </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> @ Sharable </a> 0
<a> public abstract class ChannelInitializer < <RARE_TOKEN> extends Channel > extends <RARE_TOKEN> { </a> 1
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( ChannelInitializer . class ) ; </a> 0
<a> public abstract void <RARE_TOKEN> ( <RARE_TOKEN> ch ) throws Exception ; </a> 0
<a> @ Override </a> 1
<a> public final void <RARE_TOKEN> ( ChannelHandlerContext ctx ) </a> 1
<a> throws Exception { </a> 1
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ( <RARE_TOKEN> ) ctx . channel ( ) ) ; </a> 0
<a> ctx . pipeline ( ) . remove ( this ) ; </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> ctx . <RARE_TOKEN> ( ) ; </a> 0
<a> success = true ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( "Failed to <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> " + ctx . channel ( ) , t ) ; </a> 0
<a> } finally { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 1
<a> ctx . pipeline ( ) . remove ( this ) ; </a> 1
<a> } </a> 0
<a> if ( ! success ) { </a> 0
<a> ctx . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . ChannelBufType ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> public final class ChannelMetadata { </a> 0
<a> private final ChannelBufType <RARE_TOKEN> ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> public ChannelMetadata ( ChannelBufType <RARE_TOKEN> , boolean <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public ChannelBufType <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> public interface <RARE_TOKEN> extends ChannelHandler { </a> 1
<a> void bind ( ChannelHandlerContext ctx , SocketAddress localAddress , ChannelFuture future ) throws Exception ; </a> 0
<a> void connect ( </a> 1
<a> ChannelHandlerContext ctx , SocketAddress remoteAddress , </a> 1
<a> SocketAddress localAddress , ChannelFuture future ) throws Exception ; </a> 0
<a> void disconnect ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception ; </a> 0
<a> void close ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception ; </a> 0
<a> void <RARE_TOKEN> ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception ; </a> 0
<a> void flush ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception ; </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . net . SocketAddress ; </a> 1
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) </a> 0
<a> throws Exception { </a> 0
<a> ctx . fireExceptionCaught ( cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object <RARE_TOKEN> ) </a> 0
<a> throws Exception { </a> 0
<a> ctx . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void bind ( ChannelHandlerContext ctx , SocketAddress localAddress , </a> 1
<a> ChannelFuture future ) throws Exception { </a> 0
<a> ctx . bind ( localAddress , future ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void connect ( ChannelHandlerContext ctx , SocketAddress remoteAddress , </a> 1
<a> SocketAddress localAddress , ChannelFuture future ) throws Exception { </a> 0
<a> ctx . connect ( remoteAddress , localAddress , future ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void disconnect ( ChannelHandlerContext ctx , ChannelFuture future ) </a> 0
<a> throws Exception { </a> 1
<a> ctx . disconnect ( future ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void close ( ChannelHandlerContext ctx , ChannelFuture future ) </a> 0
<a> throws Exception { </a> 1
<a> ctx . close ( future ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , ChannelFuture future ) </a> 0
<a> throws Exception { </a> 1
<a> ctx . <RARE_TOKEN> ( future ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public void flush ( ChannelHandlerContext ctx , ChannelFuture future ) </a> 0
<a> throws Exception { </a> 0
<a> if ( this instanceof <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalStateException ( </a> 0
<a> <RARE_TOKEN> must be <RARE_TOKEN> <RARE_TOKEN> " + getClass ( ) . getName ( ) + </a> 0
<a> ", <RARE_TOKEN> implements " + <RARE_TOKEN> . class . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> ctx . flush ( future ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> ByteBuf <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> public abstract class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . buffer ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public abstract class <RARE_TOKEN> </a> 0
<a> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public abstract void flush ( ChannelHandlerContext ctx , ChannelFuture future ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . net . SocketAddress ; </a> 1
<a> public interface <RARE_TOKEN> { </a> 0
<a> ChannelFuture bind ( SocketAddress localAddress ) ; </a> 1
<a> ChannelFuture connect ( SocketAddress remoteAddress ) ; </a> 1
<a> ChannelFuture connect ( SocketAddress remoteAddress , SocketAddress localAddress ) ; </a> 1
<a> ChannelFuture disconnect ( ) ; </a> 1
<a> ChannelFuture close ( ) ; </a> 1
<a> ChannelFuture <RARE_TOKEN> ( ) ; </a> 0
<a> ChannelFuture flush ( ) ; </a> 1
<a> ChannelFuture write ( Object message ) ; </a> 1
<a> ChannelFuture bind ( SocketAddress localAddress , ChannelFuture future ) ; </a> 0
<a> ChannelFuture connect ( SocketAddress remoteAddress , ChannelFuture future ) ; </a> 0
<a> ChannelFuture connect ( SocketAddress remoteAddress , SocketAddress localAddress , ChannelFuture future ) ; </a> 0
<a> ChannelFuture disconnect ( ChannelFuture future ) ; </a> 0
<a> ChannelFuture close ( ChannelFuture future ) ; </a> 0
<a> ChannelFuture <RARE_TOKEN> ( ChannelFuture future ) ; </a> 0
<a> ChannelFuture flush ( ChannelFuture future ) ; </a> 0
<a> ChannelFuture write ( Object message , ChannelFuture future ) ; </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> public abstract class <RARE_TOKEN> < <RARE_TOKEN> > </a> 1
<a> extends <RARE_TOKEN> implements <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> @ Override </a> 1
<a> public MessageBuf < <RARE_TOKEN> > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import java . io . InputStream ; </a> 1
<a> import java . io . OutputStream ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public interface ChannelPipeline extends <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> MessageBuf < Object > <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> ( ) ; </a> 1
<a> MessageBuf < Object > <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuf <RARE_TOKEN> ( ) ; </a> 1
<a> ChannelPipeline <RARE_TOKEN> ( String name , ChannelHandler handler ) ; </a> 0
<a> ChannelPipeline <RARE_TOKEN> ( <RARE_TOKEN> group , String name , ChannelHandler handler ) ; </a> 0
<a> ChannelPipeline addLast ( String name , ChannelHandler handler ) ; </a> 0
<a> ChannelPipeline addLast ( <RARE_TOKEN> group , String name , ChannelHandler handler ) ; </a> 0
<a> ChannelPipeline <RARE_TOKEN> ( String <RARE_TOKEN> , String name , ChannelHandler handler ) ; </a> 0
<a> ChannelPipeline <RARE_TOKEN> ( <RARE_TOKEN> group , String <RARE_TOKEN> , String name , ChannelHandler handler ) ; </a> 0
<a> ChannelPipeline <RARE_TOKEN> ( String <RARE_TOKEN> , String name , ChannelHandler handler ) ; </a> 0
<a> ChannelPipeline <RARE_TOKEN> ( <RARE_TOKEN> group , String <RARE_TOKEN> , String name , ChannelHandler handler ) ; </a> 0
<a> ChannelPipeline <RARE_TOKEN> ( ChannelHandler ... <RARE_TOKEN> ) ; </a> 0
<a> ChannelPipeline <RARE_TOKEN> ( <RARE_TOKEN> group , ChannelHandler ... <RARE_TOKEN> ) ; </a> 0
<a> ChannelPipeline addLast ( ChannelHandler ... <RARE_TOKEN> ) ; </a> 0
<a> ChannelPipeline addLast ( <RARE_TOKEN> group , ChannelHandler ... <RARE_TOKEN> ) ; </a> 0
<a> void remove ( ChannelHandler handler ) ; </a> 0
<a> ChannelHandler remove ( String name ) ; </a> 0
<a> < T extends ChannelHandler > T remove ( Class < T > <RARE_TOKEN> ) ; </a> 0
<a> ChannelHandler <RARE_TOKEN> ( ) ; </a> 0
<a> ChannelHandler <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ChannelHandler <RARE_TOKEN> , String <RARE_TOKEN> , ChannelHandler <RARE_TOKEN> ) ; </a> 0
<a> ChannelHandler <RARE_TOKEN> ( String <RARE_TOKEN> , String <RARE_TOKEN> , ChannelHandler <RARE_TOKEN> ) ; </a> 0
<a> < T extends ChannelHandler > T <RARE_TOKEN> ( Class < T > <RARE_TOKEN> , String <RARE_TOKEN> , ChannelHandler <RARE_TOKEN> ) ; </a> 0
<a> ChannelHandler <RARE_TOKEN> ( ) ; </a> 0
<a> ChannelHandler last ( ) ; </a> 0
<a> ChannelHandler get ( String name ) ; </a> 0
<a> < T extends ChannelHandler > T get ( Class < T > <RARE_TOKEN> ) ; </a> 0
<a> ChannelHandlerContext context ( ChannelHandler handler ) ; </a> 0
<a> ChannelHandlerContext context ( String name ) ; </a> 0
<a> ChannelHandlerContext context ( Class < ? extends ChannelHandler > <RARE_TOKEN> ) ; </a> 0
<a> Channel channel ( ) ; </a> 0
<a> List < String > names ( ) ; </a> 0
<a> Map < String , ChannelHandler > <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelException { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public interface <RARE_TOKEN> extends ChannelHandler { </a> 1
<a> void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception ; </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> boolean <RARE_TOKEN> ; </a> 0
<a> final boolean <RARE_TOKEN> ( ) { </a> 0
<a> return getClass ( ) . <RARE_TOKEN> ( Sharable . class ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) </a> 0
<a> throws Exception { </a> 0
<a> ctx . fireExceptionCaught ( cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object <RARE_TOKEN> ) </a> 1
<a> throws Exception { </a> 1
<a> ctx . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> if ( this instanceof <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalStateException ( </a> 0
<a> <RARE_TOKEN> must be <RARE_TOKEN> <RARE_TOKEN> " + getClass ( ) . getName ( ) + </a> 0
<a> ", <RARE_TOKEN> implements " + <RARE_TOKEN> . class . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . util . Iterator ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . ScheduledFuture ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . atomic . <RARE_TOKEN> ; </a> 1
<a> public final class <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = </a> 1
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final long <RARE_TOKEN> = TimeUnit . SECONDS . <RARE_TOKEN> ( 1 ) ; </a> 0
<a> private static final long <RARE_TOKEN> = System . <RARE_TOKEN> ( ) ; </a> 1
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> private static long <RARE_TOKEN> ( ) { </a> 0
<a> return System . <RARE_TOKEN> ( ) - <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private static long <RARE_TOKEN> ( long delay ) { </a> 0
<a> return <RARE_TOKEN> ( ) + delay ; </a> 0
<a> } </a> 0
<a> private final <RARE_TOKEN> < <RARE_TOKEN> < ? > > <RARE_TOKEN> = new <RARE_TOKEN> < <RARE_TOKEN> < ? > > ( ) ; </a> 1
<a> private final Thread <RARE_TOKEN> ; </a> 0
<a> private final Object <RARE_TOKEN> = new Object ( ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 0 ) ; </a> 0
<a> private volatile int state ; </a> 1
<a> public <RARE_TOKEN> ( ThreadFactory threadFactory ) { </a> 0
<a> if ( threadFactory == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = threadFactory . <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 1
<a> for ( ; ; ) { </a> 1
<a> <RARE_TOKEN> < ? > task ; </a> 1
<a> try { </a> 1
<a> task = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> ( task ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) && <RARE_TOKEN> . <RARE_TOKEN> ( ) == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } finally { </a> 0
<a> try { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } finally { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> state = 3 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> assert <RARE_TOKEN> . isEmpty ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> < ? > task ) { </a> 1
<a> EventExecutor executor = task . executor ; </a> 0
<a> if ( executor == null ) { </a> 1
<a> task . run ( ) ; </a> 1
<a> } else { </a> 1
<a> if ( executor . <RARE_TOKEN> ( ) ) { </a> 1
<a> task . cancel ( false ) ; </a> 1
<a> } else { </a> 1
<a> try { </a> 1
<a> task . executor . execute ( task ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 1
<a> task . cancel ( false ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> for ( ; ; ) { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> for ( ; ; ) { </a> 1
<a> final <RARE_TOKEN> < ? > task = <RARE_TOKEN> . poll ( ) ; </a> 1
<a> if ( task == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> ( task ) ; </a> 1
<a> <RARE_TOKEN> = true ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> task <RARE_TOKEN> an <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> && <RARE_TOKEN> . isEmpty ( ) ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> } </a> 1
<a> private boolean <RARE_TOKEN> ( ) { </a> 1
<a> return Thread . currentThread ( ) == <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public void shutdown ( ) { </a> 1
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 1
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> assert state == 1 ; </a> 0
<a> state = 2 ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> switch ( state ) { </a> 0
<a> case 0 : </a> 0
<a> state = 3 ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> break ; </a> 1
<a> case 1 : </a> 1
<a> state = 2 ; </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> && ! <RARE_TOKEN> && <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return state >= 2 ; </a> 1
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return state == 3 ; </a> 1
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) throws InterruptedException { </a> 0
<a> if ( unit == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> throw new IllegalStateException ( <RARE_TOKEN> await <RARE_TOKEN> of the current <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( timeout , unit ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> public ScheduledFuture < ? > schedule ( </a> 1
<a> EventExecutor executor , Runnable command , long delay , TimeUnit unit ) { </a> 1
<a> if ( executor == null ) { </a> 1
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( command == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( unit == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( delay < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> String . format ( <RARE_TOKEN> <RARE_TOKEN> (expected: >= <RARE_TOKEN> , delay ) ) ; </a> 0
<a> } </a> 0
<a> return schedule ( new <RARE_TOKEN> < Void > ( executor , command , null , <RARE_TOKEN> ( unit . <RARE_TOKEN> ( delay ) ) ) ) ; </a> 0
<a> } </a> 1
<a> public < V > ScheduledFuture < V > schedule ( </a> 1
<a> EventExecutor executor , <RARE_TOKEN> < V > <RARE_TOKEN> , long delay , TimeUnit unit ) { </a> 1
<a> if ( executor == null ) { </a> 1
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( unit == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( delay < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> String . format ( <RARE_TOKEN> <RARE_TOKEN> (expected: >= <RARE_TOKEN> , delay ) ) ; </a> 0
<a> } </a> 0
<a> return schedule ( new <RARE_TOKEN> < V > ( executor , <RARE_TOKEN> , <RARE_TOKEN> ( unit . <RARE_TOKEN> ( delay ) ) ) ) ; </a> 0
<a> } </a> 1
<a> public ScheduledFuture < ? > <RARE_TOKEN> ( </a> 1
<a> EventExecutor executor , Runnable command , long <RARE_TOKEN> , long period , TimeUnit unit ) { </a> 1
<a> if ( executor == null ) { </a> 1
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( command == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( unit == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> String . format ( <RARE_TOKEN> <RARE_TOKEN> (expected: >= <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( period <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> String . format ( <RARE_TOKEN> <RARE_TOKEN> (expected: > <RARE_TOKEN> , period ) ) ; </a> 0
<a> } </a> 0
<a> return schedule ( new <RARE_TOKEN> < Void > ( </a> 0
<a> executor , command , null , <RARE_TOKEN> ( unit . <RARE_TOKEN> ( <RARE_TOKEN> ) ) , unit . <RARE_TOKEN> ( period ) ) ) ; </a> 0
<a> } </a> 1
<a> public ScheduledFuture < ? > <RARE_TOKEN> ( </a> 1
<a> EventExecutor executor , Runnable command , long <RARE_TOKEN> , long delay , TimeUnit unit ) { </a> 1
<a> if ( executor == null ) { </a> 1
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> if ( command == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( unit == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> String . format ( <RARE_TOKEN> <RARE_TOKEN> (expected: >= <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( delay <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> String . format ( <RARE_TOKEN> <RARE_TOKEN> (expected: > <RARE_TOKEN> , delay ) ) ; </a> 0
<a> } </a> 0
<a> return schedule ( new <RARE_TOKEN> < Void > ( </a> 0
<a> executor , command , null , <RARE_TOKEN> ( unit . <RARE_TOKEN> ( <RARE_TOKEN> ) ) , - unit . <RARE_TOKEN> ( delay ) ) ) ; </a> 0
<a> } </a> 0
<a> private < V > ScheduledFuture < V > schedule ( <RARE_TOKEN> < V > task ) { </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( task ) ; </a> 1
<a> if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> task . cancel ( false ) ; </a> 1
<a> } </a> 1
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> if ( ! <RARE_TOKEN> ( ) ) { </a> 1
<a> synchronized ( <RARE_TOKEN> ) { </a> 0
<a> if ( state == 0 ) { </a> 0
<a> state = 1 ; </a> 0
<a> <RARE_TOKEN> . start ( ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> schedule ( new <RARE_TOKEN> < Void > ( </a> 0
<a> null , new <RARE_TOKEN> ( ) , null , </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) , - <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 1
<a> return task ; </a> 1
<a> } </a> 1
<a> private static void <RARE_TOKEN> ( ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> executor <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> for ( <RARE_TOKEN> < ? > task : <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> < ? > [ <RARE_TOKEN> . size ( ) ] ) ) { </a> 1
<a> task . cancel ( false ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . clear ( ) ; </a> 1
<a> } </a> 1
<a> private class <RARE_TOKEN> < V > extends <RARE_TOKEN> < V > implements ScheduledFuture < V > { </a> 0
<a> private final EventExecutor executor ; </a> 0
<a> private final long id = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> private long <RARE_TOKEN> ; </a> 0
<a> private final long <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( EventExecutor executor , Runnable <RARE_TOKEN> , V result , long <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> , result ) ; </a> 0
<a> this . executor = executor ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> } </a> 1
<a> <RARE_TOKEN> ( EventExecutor executor , Runnable <RARE_TOKEN> , V result , long <RARE_TOKEN> , long period ) { </a> 0
<a> super ( <RARE_TOKEN> , result ) ; </a> 0
<a> if ( period == 0 ) { </a> 1
<a> throw new IllegalArgumentException ( </a> 0
<a> String . format ( <RARE_TOKEN> <RARE_TOKEN> (expected: != <RARE_TOKEN> , period ) ) ; </a> 0
<a> } </a> 1
<a> this . executor = executor ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> = period ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( EventExecutor executor , <RARE_TOKEN> < V > <RARE_TOKEN> , long <RARE_TOKEN> ) { </a> 0
<a> super ( <RARE_TOKEN> ) ; </a> 0
<a> this . executor = executor ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> = 0 ; </a> 1
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 0
<a> return Math . <RARE_TOKEN> ( 0 , <RARE_TOKEN> ( ) - <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long <RARE_TOKEN> ( TimeUnit unit ) { </a> 0
<a> return unit . <RARE_TOKEN> ( <RARE_TOKEN> ( ) , TimeUnit . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( <RARE_TOKEN> o ) { </a> 0
<a> if ( this == o ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> < ? > that = ( <RARE_TOKEN> < ? > ) o ; </a> 0
<a> long d = <RARE_TOKEN> ( ) - that . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( d < 0 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } else if ( d > 0 ) { </a> 0
<a> return 1 ; </a> 0
<a> } else if ( id < that . id ) { </a> 0
<a> return - 1 ; </a> 0
<a> } else if ( id == that . id ) { </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } else { </a> 0
<a> return 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 1
<a> if ( <RARE_TOKEN> == 0 ) { </a> 1
<a> super . run ( ) ; </a> 0
<a> } else { </a> 1
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> && ! <RARE_TOKEN> ( ) ) { </a> 0
<a> long p = <RARE_TOKEN> ; </a> 0
<a> if ( p > 0 ) { </a> 0
<a> <RARE_TOKEN> += p ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) - p ; </a> 0
<a> } </a> 0
<a> schedule ( this ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private final class <RARE_TOKEN> implements Runnable { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> Iterator < <RARE_TOKEN> < ? > > i = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> while ( i . <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> < ? > task = i . next ( ) ; </a> 0
<a> if ( task . isCancelled ( ) ) { </a> 0
<a> i . remove ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 1
<a> import java . net . SocketAddress ; </a> 0
<a> public class <RARE_TOKEN> </a> 0
<a> extends <RARE_TOKEN> implements <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> out ; </a> 0
<a> private <RARE_TOKEN> in ; </a> 0
<a> protected <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> init ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> protected void init ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must not <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> . class . getSimpleName ( ) + " to get <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must not <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> . class . getSimpleName ( ) + " to get <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( in != null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> be <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> in = <RARE_TOKEN> ; </a> 0
<a> out = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> return in . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> return out . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> if ( in == null ) { </a> 0
<a> throw new IllegalStateException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> - <RARE_TOKEN> <RARE_TOKEN> in the <RARE_TOKEN> of the <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> in . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } finally { </a> 0
<a> out . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> try { </a> 1
<a> in . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } finally { </a> 0
<a> out . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> try { </a> 0
<a> in . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } finally { </a> 0
<a> out . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> try { </a> 0
<a> in . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } finally { </a> 0
<a> out . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> in . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> in . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> in . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> in . <RARE_TOKEN> ( ctx ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 0
<a> in . exceptionCaught ( ctx , cause ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object <RARE_TOKEN> ) throws Exception { </a> 1
<a> in . <RARE_TOKEN> ( ctx , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> in . inboundBufferUpdated ( ctx ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void bind ( </a> 1
<a> ChannelHandlerContext ctx , </a> 1
<a> SocketAddress localAddress , ChannelFuture future ) throws Exception { </a> 0
<a> out . bind ( ctx , localAddress , future ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void connect ( </a> 1
<a> ChannelHandlerContext ctx , </a> 1
<a> SocketAddress remoteAddress , SocketAddress localAddress , </a> 1
<a> ChannelFuture future ) throws Exception { </a> 0
<a> out . connect ( ctx , remoteAddress , localAddress , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void disconnect ( </a> 0
<a> ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> out . disconnect ( ctx , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( </a> 0
<a> ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> out . close ( ctx , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> out . <RARE_TOKEN> ( ctx , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( </a> 0
<a> ChannelHandlerContext ctx , ChannelFuture future ) throws Exception { </a> 0
<a> out . flush ( ctx , future ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public abstract class <RARE_TOKEN> implements ChannelFuture { </a> 0
<a> private final Channel channel ; </a> 0
<a> protected <RARE_TOKEN> ( Channel channel ) { </a> 0
<a> if ( channel == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . channel = channel ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture addListener ( final ChannelFutureListener listener ) { </a> 0
<a> if ( listener == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this , listener ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ChannelFutureListener listener ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture await ( ) throws InterruptedException { </a> 0
<a> if ( Thread . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new InterruptedException ( ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean await ( long timeout , TimeUnit unit ) throws InterruptedException { </a> 0
<a> if ( Thread . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new InterruptedException ( ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean await ( long <RARE_TOKEN> ) throws InterruptedException { </a> 0
<a> if ( Thread . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new InterruptedException ( ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long <RARE_TOKEN> ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Channel channel ( ) { </a> 0
<a> return channel ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long <RARE_TOKEN> , long current , long <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean setFailure ( Throwable cause ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean cancel ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean cancel ( boolean <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isCancelled ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import static io . netty . channel . ChannelOption . * ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private volatile int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> private volatile int <RARE_TOKEN> = 16 ; </a> 0
<a> @ Override </a> 0
<a> public Map < ChannelOption < ? > , Object > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( null , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> protected Map < ChannelOption < ? > , Object > <RARE_TOKEN> ( </a> 0
<a> Map < ChannelOption < ? > , Object > result , ChannelOption < ? > ... <RARE_TOKEN> ) { </a> 0
<a> if ( result == null ) { </a> 0
<a> result = new <RARE_TOKEN> < ChannelOption < ? > , Object > ( ) ; </a> 0
<a> } </a> 0
<a> for ( ChannelOption < ? > o : <RARE_TOKEN> ) { </a> 0
<a> result . put ( o , <RARE_TOKEN> ( o ) ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( Map < ChannelOption < ? > , ? > <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = true ; </a> 0
<a> for ( Entry < ChannelOption < ? > , ? > e : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( ( ChannelOption < Object > ) e . <RARE_TOKEN> ( ) , e . getValue ( ) ) ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public < T > T <RARE_TOKEN> ( ChannelOption < T > option ) { </a> 0
<a> if ( option == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > boolean <RARE_TOKEN> ( ChannelOption < T > option , T value ) { </a> 0
<a> <RARE_TOKEN> ( option , value ) ; </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> protected < T > void <RARE_TOKEN> ( ChannelOption < T > option , T value ) { </a> 0
<a> if ( option == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> option . <RARE_TOKEN> ( value ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( String . format ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> (expected: >= <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> <RARE_TOKEN> must be a <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import static java . util . concurrent . TimeUnit . * ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements ChannelFuture { </a> 0
<a> private static final InternalLogger logger = </a> 0
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final int <RARE_TOKEN> = 8 ; </a> 0
<a> private static final <RARE_TOKEN> < Integer > <RARE_TOKEN> = new <RARE_TOKEN> < Integer > ( ) { </a> 0
<a> @ Override </a> 0
<a> protected Integer <RARE_TOKEN> ( ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private static final Throwable <RARE_TOKEN> = new Throwable ( ) ; </a> 0
<a> private final Channel channel ; </a> 0
<a> private final boolean <RARE_TOKEN> ; </a> 0
<a> private ChannelFutureListener <RARE_TOKEN> ; </a> 0
<a> private List < ChannelFutureListener > <RARE_TOKEN> ; </a> 0
<a> private List < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 0
<a> private boolean done ; </a> 0
<a> private Throwable cause ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private long <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( Channel channel , boolean <RARE_TOKEN> ) { </a> 0
<a> this . channel = channel ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Channel channel ( ) { </a> 0
<a> return channel ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized boolean <RARE_TOKEN> ( ) { </a> 0
<a> return done ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized boolean <RARE_TOKEN> ( ) { </a> 0
<a> return done && cause == null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized Throwable cause ( ) { </a> 0
<a> if ( cause != <RARE_TOKEN> ) { </a> 0
<a> return cause ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized boolean isCancelled ( ) { </a> 0
<a> return cause == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture addListener ( final ChannelFutureListener listener ) { </a> 0
<a> if ( listener == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( done ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = listener ; </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new ArrayList < ChannelFutureListener > ( 1 ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( listener ) ; </a> 0
<a> } </a> 0
<a> if ( listener instanceof <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new ArrayList < <RARE_TOKEN> > ( 1 ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( ( <RARE_TOKEN> ) listener ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( this , listener ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ChannelFutureListener listener ) { </a> 0
<a> if ( listener == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( ! done ) { </a> 0
<a> if ( listener == <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null && ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . remove ( 0 ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . remove ( listener ) ; </a> 0
<a> } </a> 0
<a> if ( listener instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . remove ( listener ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture sync ( ) throws InterruptedException { </a> 0
<a> await ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Void get ( ) throws InterruptedException , <RARE_TOKEN> { </a> 0
<a> await ( ) ; </a> 0
<a> Throwable cause = cause ( ) ; </a> 0
<a> if ( cause == null ) { </a> 0
<a> return null ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Void get ( long timeout , TimeUnit unit ) throws InterruptedException , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> if ( ! await ( timeout , unit ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> Throwable cause = cause ( ) ; </a> 0
<a> if ( cause == null ) { </a> 0
<a> return null ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Throwable cause = cause ( ) ; </a> 0
<a> if ( cause == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( cause instanceof <RARE_TOKEN> ) { </a> 0
<a> throw ( <RARE_TOKEN> ) cause ; </a> 0
<a> } </a> 0
<a> if ( cause instanceof Error ) { </a> 0
<a> throw ( Error ) cause ; </a> 0
<a> } </a> 0
<a> throw new ChannelException ( cause ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture await ( ) throws InterruptedException { </a> 0
<a> if ( Thread . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new InterruptedException ( ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this ) { </a> 0
<a> while ( ! done ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean await ( long timeout , TimeUnit unit ) </a> 0
<a> throws InterruptedException { </a> 0
<a> return <RARE_TOKEN> ( unit . <RARE_TOKEN> ( timeout ) , true ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean await ( long <RARE_TOKEN> ) throws InterruptedException { </a> 0
<a> return <RARE_TOKEN> ( MILLISECONDS . <RARE_TOKEN> ( <RARE_TOKEN> ) , true ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> while ( ! done ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> ( unit . <RARE_TOKEN> ( timeout ) , false ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> ( MILLISECONDS . <RARE_TOKEN> ( <RARE_TOKEN> ) , false ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( long <RARE_TOKEN> , boolean <RARE_TOKEN> ) throws InterruptedException { </a> 0
<a> if ( <RARE_TOKEN> && Thread . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new InterruptedException ( ) ; </a> 0
<a> } </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> <= 0 ? 0 : System . <RARE_TOKEN> ( ) ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> try { </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( done ) { </a> 0
<a> return done ; </a> 0
<a> } else if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> return done ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> try { </a> 0
<a> for ( ; ; ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> / <RARE_TOKEN> , ( int ) ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> throw e ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( done ) { </a> 0
<a> return true ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - ( System . <RARE_TOKEN> ( ) - <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> return done ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( channel ( ) . <RARE_TOKEN> ( ) && channel ( ) . eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( done ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> done = true ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean setFailure ( Throwable cause ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( done ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> this . cause = cause ; </a> 0
<a> done = true ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean cancel ( ) { </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( done ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> cause = <RARE_TOKEN> ; </a> 0
<a> done = true ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean cancel ( boolean <RARE_TOKEN> ) { </a> 0
<a> return cancel ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( channel ( ) . eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> for ( ChannelFutureListener l : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( this , l ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> final ChannelFutureListener <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> final List < ChannelFutureListener > <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> this . <RARE_TOKEN> = null ; </a> 0
<a> channel ( ) . eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . this , <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> for ( ChannelFutureListener l : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> . this , l ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( final ChannelFuture f , final ChannelFutureListener l ) { </a> 0
<a> EventLoop loop = f . channel ( ) . eventLoop ( ) ; </a> 0
<a> if ( loop . inEventLoop ( ) ) { </a> 0
<a> final Integer <RARE_TOKEN> = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> + 1 ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( f , l ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> loop . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> ( f , l ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ChannelFuture f , ChannelFutureListener l ) { </a> 0
<a> try { </a> 0
<a> l . <RARE_TOKEN> ( f ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . warn ( </a> 0
<a> <RARE_TOKEN> exception <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> ChannelFutureListener . class . getSimpleName ( ) + <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long <RARE_TOKEN> , long current , long <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( done ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Collection < <RARE_TOKEN> > <RARE_TOKEN> = </a> 0
<a> this . <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> == null || <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( </a> 0
<a> new <RARE_TOKEN> [ <RARE_TOKEN> . size ( ) ] ) ; </a> 0
<a> } </a> 0
<a> for ( <RARE_TOKEN> <RARE_TOKEN> : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , current , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> l , </a> 0
<a> long <RARE_TOKEN> , long current , long <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> l . <RARE_TOKEN> ( this , <RARE_TOKEN> , current , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . warn ( </a> 0
<a> <RARE_TOKEN> exception <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> . class . getSimpleName ( ) + <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> long <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void <RARE_TOKEN> ( long <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> ChannelFuture future ( ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import static io . netty . channel . <RARE_TOKEN> . * ; </a> 1
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 1
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . util . <RARE_TOKEN> ; </a> 1
<a> import java . net . SocketAddress ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> import java . util . Set ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 1
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 1
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 0
<a> final class <RARE_TOKEN> extends <RARE_TOKEN> implements ChannelHandlerContext { </a> 1
<a> private static final <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . class ) ; </a> 0
<a> static final int <RARE_TOKEN> = 0x00000001 ; </a> 1
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> volatile <RARE_TOKEN> next ; </a> 0
<a> volatile <RARE_TOKEN> prev ; </a> 0
<a> private final Channel channel ; </a> 1
<a> private final <RARE_TOKEN> pipeline ; </a> 0
<a> EventExecutor executor ; </a> 1
<a> private final String name ; </a> 0
<a> private final Set < <RARE_TOKEN> > type ; </a> 0
<a> final int <RARE_TOKEN> ; </a> 1
<a> private final ChannelHandler handler ; </a> 0
<a> final MessageBuf < Object > <RARE_TOKEN> ; </a> 0
<a> final ByteBuf <RARE_TOKEN> ; </a> 0
<a> final MessageBuf < Object > <RARE_TOKEN> ; </a> 0
<a> final ByteBuf <RARE_TOKEN> ; </a> 0
<a> final AtomicReference < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 1
<a> final AtomicReference < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 1
<a> final AtomicReference < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 1
<a> final AtomicReference < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 1
<a> final AtomicBoolean readable = new AtomicBoolean ( true ) ; </a> 1
<a> final Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> ctx = <RARE_TOKEN> . this ; </a> 1
<a> try { </a> 1
<a> ( ( <RARE_TOKEN> ) ctx . handler ) . <RARE_TOKEN> ( ctx ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> pipeline . <RARE_TOKEN> ( t ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> final Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> ctx = <RARE_TOKEN> . this ; </a> 1
<a> try { </a> 1
<a> ( ( <RARE_TOKEN> ) ctx . handler ) . <RARE_TOKEN> ( ctx ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> pipeline . <RARE_TOKEN> ( t ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> final Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> ctx = <RARE_TOKEN> . this ; </a> 1
<a> try { </a> 1
<a> ( ( <RARE_TOKEN> ) ctx . handler ) . <RARE_TOKEN> ( ctx ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> pipeline . <RARE_TOKEN> ( t ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> final Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> ctx = <RARE_TOKEN> . this ; </a> 1
<a> try { </a> 1
<a> ( ( <RARE_TOKEN> ) ctx . handler ) . <RARE_TOKEN> ( ctx ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> pipeline . <RARE_TOKEN> ( t ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> final Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> ctx = <RARE_TOKEN> . this ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> try { </a> 1
<a> ( ( <RARE_TOKEN> ) ctx . handler ) . inboundBufferUpdated ( ctx ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 1
<a> pipeline . <RARE_TOKEN> ( t ) ; </a> 1
<a> } finally { </a> 1
<a> ByteBuf buf = <RARE_TOKEN> ; </a> 0
<a> if ( buf != null ) { </a> 0
<a> if ( ! buf . readable ( ) ) { </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> private final Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> next = <RARE_TOKEN> ( </a> 0
<a> <RARE_TOKEN> . this . next , <RARE_TOKEN> ) ; </a> 1
<a> if ( next != null ) { </a> 1
<a> next . <RARE_TOKEN> ( ) ; </a> 1
<a> EventExecutor executor = next . executor ( ) ; </a> 1
<a> if ( executor . inEventLoop ( ) ) { </a> 1
<a> next . <RARE_TOKEN> . run ( ) ; </a> 1
<a> } else { </a> 1
<a> executor . execute ( next . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> @ SuppressWarnings ( "unchecked" ) </a> 1
<a> <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> pipeline , <RARE_TOKEN> group , </a> 0
<a> <RARE_TOKEN> prev , <RARE_TOKEN> next , </a> 0
<a> String name , ChannelHandler handler ) { </a> 1
<a> if ( name == null ) { </a> 0
<a> throw new NullPointerException ( "name" ) ; </a> 0
<a> } </a> 0
<a> if ( handler == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> int <RARE_TOKEN> = 0 ; </a> 1
<a> <RARE_TOKEN> < <RARE_TOKEN> > type = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( handler instanceof <RARE_TOKEN> ) { </a> 0
<a> type . add ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> |= <RARE_TOKEN> ; </a> 1
<a> if ( handler instanceof <RARE_TOKEN> ) { </a> 0
<a> type . add ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( handler instanceof <RARE_TOKEN> ) { </a> 0
<a> type . add ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> |= <RARE_TOKEN> ; </a> 1
<a> if ( handler instanceof <RARE_TOKEN> ) { </a> 0
<a> type . add ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> this . type = Collections . <RARE_TOKEN> ( type ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> this . prev = prev ; </a> 0
<a> this . next = next ; </a> 0
<a> channel = pipeline . channel ; </a> 1
<a> this . pipeline = pipeline ; </a> 1
<a> this . name = name ; </a> 1
<a> this . handler = handler ; </a> 1
<a> if ( group != null ) { </a> 1
<a> EventExecutor <RARE_TOKEN> = pipeline . <RARE_TOKEN> . get ( group ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> <RARE_TOKEN> = group . next ( ) ; </a> 1
<a> pipeline . <RARE_TOKEN> . put ( group , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> executor = <RARE_TOKEN> ; </a> 1
<a> } else if ( channel . <RARE_TOKEN> ( ) ) { </a> 0
<a> executor = channel . eventLoop ( ) ; </a> 0
<a> } else { </a> 0
<a> executor = null ; </a> 1
<a> } </a> 0
<a> if ( type . contains ( <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 1
<a> <RARE_TOKEN> buf ; </a> 1
<a> try { </a> 1
<a> buf = ( ( <RARE_TOKEN> ) handler ) . <RARE_TOKEN> ( this ) ; </a> 1
<a> } catch ( Exception e ) { </a> 1
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> user handler <RARE_TOKEN> to create a new <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> if ( buf == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> user <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> if ( buf instanceof ByteBuf ) { </a> 1
<a> <RARE_TOKEN> = ( ByteBuf ) buf ; </a> 1
<a> <RARE_TOKEN> = new AtomicReference < <RARE_TOKEN> > ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } else if ( buf instanceof MessageBuf ) { </a> 1
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = ( MessageBuf < Object > ) buf ; </a> 1
<a> <RARE_TOKEN> = new AtomicReference < <RARE_TOKEN> > ( ) ; </a> 0
<a> } else { </a> 1
<a> throw new Error ( ) ; </a> 0
<a> } </a> 1
<a> } else { </a> 0
<a> <RARE_TOKEN> = null ; </a> 1
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 1
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 1
<a> if ( type . contains ( <RARE_TOKEN> . <RARE_TOKEN> ) ) { </a> 1
<a> <RARE_TOKEN> buf ; </a> 1
<a> try { </a> 0
<a> buf = ( ( <RARE_TOKEN> ) handler ) . <RARE_TOKEN> ( this ) ; </a> 1
<a> } catch ( Exception e ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> user handler <RARE_TOKEN> to create a new <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> if ( buf == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> user <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> if ( buf instanceof ByteBuf ) { </a> 1
<a> <RARE_TOKEN> = ( ByteBuf ) buf ; </a> 1
<a> <RARE_TOKEN> = new AtomicReference < <RARE_TOKEN> > ( ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } else if ( buf instanceof MessageBuf ) { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> = ( MessageBuf < Object > ) buf ; </a> 1
<a> <RARE_TOKEN> = new AtomicReference < <RARE_TOKEN> > ( ) ; </a> 0
<a> } else { </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 1
<a> <RARE_TOKEN> = null ; </a> 1
<a> <RARE_TOKEN> = null ; </a> 1
<a> <RARE_TOKEN> = null ; </a> 1
<a> <RARE_TOKEN> = null ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> bridge = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( bridge != null ) { </a> 1
<a> bridge . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } else if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> bridge = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( bridge != null ) { </a> 1
<a> bridge . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> bridge = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( bridge != null ) { </a> 1
<a> bridge . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } else if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> bridge = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( bridge != null ) { </a> 1
<a> bridge . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> bridge = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( bridge != null ) { </a> 1
<a> bridge . flush ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } else if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> bridge = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( bridge != null ) { </a> 1
<a> bridge . flush ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> bridge = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( bridge != null ) { </a> 1
<a> bridge . flush ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } else if ( <RARE_TOKEN> != null ) { </a> 1
<a> <RARE_TOKEN> bridge = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( bridge != null ) { </a> 1
<a> bridge . flush ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public Channel channel ( ) { </a> 0
<a> return channel ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelPipeline pipeline ( ) { </a> 0
<a> return pipeline ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public EventExecutor executor ( ) { </a> 0
<a> if ( executor == null ) { </a> 1
<a> return executor = channel . eventLoop ( ) ; </a> 0
<a> } else { </a> 1
<a> return executor ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelHandler handler ( ) { </a> 0
<a> return handler ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String name ( ) { </a> 0
<a> return name ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Set < <RARE_TOKEN> > type ( ) { </a> 0
<a> return type ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> != null ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> != null ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> if ( handler instanceof <RARE_TOKEN> ) { </a> 1
<a> throw new <RARE_TOKEN> ( String . format ( </a> 0
<a> <RARE_TOKEN> handler <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> byte <RARE_TOKEN> <RARE_TOKEN> implements <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> method <RARE_TOKEN> a <RARE_TOKEN> , </a> 0
<a> name , <RARE_TOKEN> . class . getSimpleName ( ) , </a> 0
<a> MessageBuf . class . getSimpleName ( ) ) ) ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( </a> 1
<a> <RARE_TOKEN> handler <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> byte <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> , </a> 1
<a> name , <RARE_TOKEN> . class . getSimpleName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> @ SuppressWarnings ( "unchecked" ) </a> 1
<a> public < T > MessageBuf < T > <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> if ( handler instanceof <RARE_TOKEN> ) { </a> 1
<a> throw new <RARE_TOKEN> ( String . format ( </a> 0
<a> <RARE_TOKEN> handler <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> message <RARE_TOKEN> <RARE_TOKEN> implements <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> method <RARE_TOKEN> a <RARE_TOKEN> , </a> 0
<a> name , <RARE_TOKEN> . class . getSimpleName ( ) , </a> 0
<a> ByteBuf . class . getSimpleName ( ) ) ) ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( </a> 1
<a> <RARE_TOKEN> handler <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> message <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> , </a> 1
<a> name , <RARE_TOKEN> . class . getSimpleName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> return ( MessageBuf < T > ) <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> != null ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> != null ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> if ( handler instanceof <RARE_TOKEN> ) { </a> 1
<a> throw new <RARE_TOKEN> ( String . format ( </a> 0
<a> <RARE_TOKEN> handler <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> byte <RARE_TOKEN> <RARE_TOKEN> implements <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> method <RARE_TOKEN> a <RARE_TOKEN> , </a> 0
<a> name , <RARE_TOKEN> . class . getSimpleName ( ) , </a> 0
<a> MessageBuf . class . getSimpleName ( ) ) ) ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( </a> 1
<a> <RARE_TOKEN> handler <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> byte <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> , </a> 1
<a> name , <RARE_TOKEN> . class . getSimpleName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> @ SuppressWarnings ( "unchecked" ) </a> 1
<a> public < T > MessageBuf < T > <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> if ( handler instanceof <RARE_TOKEN> ) { </a> 1
<a> throw new <RARE_TOKEN> ( String . format ( </a> 0
<a> <RARE_TOKEN> handler <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> message <RARE_TOKEN> <RARE_TOKEN> implements <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> method <RARE_TOKEN> a <RARE_TOKEN> , </a> 0
<a> name , <RARE_TOKEN> . class . getSimpleName ( ) , </a> 0
<a> ByteBuf . class . getSimpleName ( ) ) ) ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( </a> 1
<a> <RARE_TOKEN> handler <RARE_TOKEN> has <RARE_TOKEN> <RARE_TOKEN> message <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> , </a> 1
<a> name , <RARE_TOKEN> . class . getSimpleName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> return ( MessageBuf < T > ) <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ctx = next ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> if ( ctx == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ctx . <RARE_TOKEN> != null ) { </a> 1
<a> return true ; </a> 0
<a> } </a> 0
<a> ctx = ctx . next ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> ctx = next ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> if ( ctx == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( ctx . <RARE_TOKEN> != null ) { </a> 1
<a> return true ; </a> 0
<a> } </a> 0
<a> ctx = ctx . next ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return pipeline . <RARE_TOKEN> ( prev ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return pipeline . <RARE_TOKEN> ( prev ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> ctx = next ; </a> 1
<a> final Thread currentThread = Thread . currentThread ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> if ( ctx == null ) { </a> 0
<a> if ( prev != null ) { </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( </a> 0
<a> <RARE_TOKEN> handler <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> buffer is <RARE_TOKEN> , </a> 0
<a> name , <RARE_TOKEN> . class . getSimpleName ( ) , </a> 0
<a> ByteBuf . class . getSimpleName ( ) ) ) ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( </a> 0
<a> <RARE_TOKEN> pipeline <RARE_TOKEN> not <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> buffer is <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . class . getSimpleName ( ) , </a> 0
<a> ByteBuf . class . getSimpleName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ctx . <RARE_TOKEN> != null ) { </a> 0
<a> if ( ctx . executor ( ) . inEventLoop ( currentThread ) ) { </a> 0
<a> return ctx . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> bridge = ctx . <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( bridge == null ) { </a> 1
<a> bridge = new <RARE_TOKEN> ( ) ; </a> 1
<a> if ( ! ctx . <RARE_TOKEN> . <RARE_TOKEN> ( null , bridge ) ) { </a> 0
<a> bridge = ctx . <RARE_TOKEN> . get ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> return bridge . byteBuf ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> ctx = ctx . next ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public MessageBuf < Object > <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> ctx = next ; </a> 1
<a> final Thread currentThread = Thread . currentThread ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> if ( ctx == null ) { </a> 0
<a> if ( prev != null ) { </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( </a> 0
<a> <RARE_TOKEN> handler <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> buffer is <RARE_TOKEN> , </a> 0
<a> name , <RARE_TOKEN> . class . getSimpleName ( ) , </a> 0
<a> MessageBuf . class . getSimpleName ( ) ) ) ; </a> 0
<a> } else { </a> 0
<a> throw new <RARE_TOKEN> ( String . format ( </a> 0
<a> <RARE_TOKEN> pipeline <RARE_TOKEN> not <RARE_TOKEN> a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> buffer is <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> . class . getSimpleName ( ) , </a> 0
<a> MessageBuf . class . getSimpleName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ctx . <RARE_TOKEN> != null ) { </a> 0
<a> if ( ctx . executor ( ) . inEventLoop ( currentThread ) ) { </a> 0
<a> return ctx . <RARE_TOKEN> ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> bridge = ctx . <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( bridge == null ) { </a> 1
<a> bridge = new <RARE_TOKEN> ( ) ; </a> 1
<a> if ( ! ctx . <RARE_TOKEN> . <RARE_TOKEN> ( null , bridge ) ) { </a> 0
<a> bridge = ctx . <RARE_TOKEN> . get ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return bridge . <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> ctx = ctx . next ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 1
<a> return pipeline . <RARE_TOKEN> ( prev ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public MessageBuf < Object > <RARE_TOKEN> ( ) { </a> 1
<a> return pipeline . <RARE_TOKEN> ( prev ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> next = <RARE_TOKEN> ( this . next , <RARE_TOKEN> ) ; </a> 1
<a> if ( next != null ) { </a> 0
<a> EventExecutor executor = next . executor ( ) ; </a> 1
<a> if ( executor . inEventLoop ( ) ) { </a> 1
<a> next . <RARE_TOKEN> . run ( ) ; </a> 1
<a> } else { </a> 1
<a> executor . execute ( next . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> next = <RARE_TOKEN> ( this . next , <RARE_TOKEN> ) ; </a> 1
<a> if ( next != null ) { </a> 0
<a> EventExecutor executor = next . executor ( ) ; </a> 0
<a> if ( executor . inEventLoop ( ) ) { </a> 1
<a> next . <RARE_TOKEN> . run ( ) ; </a> 1
<a> } else { </a> 0
<a> executor . execute ( next . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> next = <RARE_TOKEN> ( this . next , <RARE_TOKEN> ) ; </a> 1
<a> if ( next != null ) { </a> 0
<a> EventExecutor executor = next . executor ( ) ; </a> 1
<a> if ( executor . inEventLoop ( ) ) { </a> 1
<a> next . <RARE_TOKEN> . run ( ) ; </a> 1
<a> } else { </a> 1
<a> executor . execute ( next . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> next = <RARE_TOKEN> ( this . next , <RARE_TOKEN> ) ; </a> 1
<a> if ( next != null ) { </a> 0
<a> EventExecutor executor = next . executor ( ) ; </a> 1
<a> if ( executor . inEventLoop ( ) ) { </a> 1
<a> next . <RARE_TOKEN> . run ( ) ; </a> 1
<a> } else { </a> 1
<a> executor . execute ( next . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void fireExceptionCaught ( final Throwable cause ) { </a> 0
<a> if ( cause == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> next = this . next ; </a> 1
<a> if ( next != null ) { </a> 0
<a> EventExecutor executor = next . executor ( ) ; </a> 0
<a> if ( executor . inEventLoop ( ) ) { </a> 1
<a> try { </a> 1
<a> next . handler ( ) . exceptionCaught ( next , cause ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . warn ( </a> 0
<a> <RARE_TOKEN> exception <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> a user <RARE_TOKEN> " + </a> 0
<a> <RARE_TOKEN> method while <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 1
<a> try { </a> 1
<a> executor . execute ( new Runnable ( ) { </a> 1
<a> @ Override </a> 0
<a> public void run ( ) { </a> 1
<a> fireExceptionCaught ( cause ) ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 1
<a> logger . warn ( "Failed to <RARE_TOKEN> an <RARE_TOKEN> <RARE_TOKEN> , t ) ; </a> 1
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> event that <RARE_TOKEN> <RARE_TOKEN> to <RARE_TOKEN> <RARE_TOKEN> , cause ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } else { </a> 0
<a> logger . warn ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> event <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the end of the " + </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the last <RARE_TOKEN> handler in the pipeline <RARE_TOKEN> not " + </a> 0
<a> <RARE_TOKEN> the <RARE_TOKEN> , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( final Object event ) { </a> 0
<a> if ( event == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> next = this . next ; </a> 1
<a> if ( next != null ) { </a> 0
<a> EventExecutor executor = next . executor ( ) ; </a> 1
<a> if ( executor . inEventLoop ( ) ) { </a> 1
<a> try { </a> 1
<a> next . handler ( ) . <RARE_TOKEN> ( next , event ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 0
<a> pipeline . <RARE_TOKEN> ( t ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 1
<a> executor . execute ( new Runnable ( ) { </a> 1
<a> @ Override </a> 0
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> ( event ) ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void fireInboundBufferUpdated ( ) { </a> 0
<a> EventExecutor executor = executor ( ) ; </a> 1
<a> if ( executor . inEventLoop ( ) ) { </a> 1
<a> <RARE_TOKEN> . run ( ) ; </a> 1
<a> } else { </a> 1
<a> executor . execute ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 1
<a> public ChannelFuture bind ( SocketAddress localAddress ) { </a> 0
<a> return bind ( localAddress , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture connect ( SocketAddress remoteAddress ) { </a> 0
<a> return connect ( remoteAddress , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture connect ( SocketAddress remoteAddress , SocketAddress localAddress ) { </a> 0
<a> return connect ( remoteAddress , localAddress , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture disconnect ( ) { </a> 0
<a> return disconnect ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture close ( ) { </a> 0
<a> return close ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture flush ( ) { </a> 1
<a> return flush ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture write ( Object message ) { </a> 1
<a> return write ( message , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture bind ( SocketAddress localAddress , ChannelFuture future ) { </a> 0
<a> return pipeline . bind ( <RARE_TOKEN> ( prev , <RARE_TOKEN> ) , localAddress , future ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public ChannelFuture connect ( SocketAddress remoteAddress , ChannelFuture future ) { </a> 0
<a> return connect ( remoteAddress , null , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture connect ( SocketAddress remoteAddress , SocketAddress localAddress , ChannelFuture future ) { </a> 0
<a> return pipeline . connect ( <RARE_TOKEN> ( prev , <RARE_TOKEN> ) , remoteAddress , localAddress , future ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelFuture disconnect ( ChannelFuture future ) { </a> 0
<a> return pipeline . disconnect ( <RARE_TOKEN> ( prev , <RARE_TOKEN> ) , future ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public ChannelFuture close ( ChannelFuture future ) { </a> 0
<a> return pipeline . close ( <RARE_TOKEN> ( prev , <RARE_TOKEN> ) , future ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ChannelFuture future ) { </a> 0
<a> return pipeline . <RARE_TOKEN> ( <RARE_TOKEN> ( prev , <RARE_TOKEN> ) , future ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public ChannelFuture flush ( final ChannelFuture future ) { </a> 0
<a> EventExecutor executor = executor ( ) ; </a> 1
<a> if ( executor . inEventLoop ( ) ) { </a> 0
<a> <RARE_TOKEN> prev = <RARE_TOKEN> ( this . prev , <RARE_TOKEN> ) ; </a> 1
<a> prev . <RARE_TOKEN> ( ) ; </a> 1
<a> pipeline . flush ( prev , future ) ; </a> 0
<a> } else { </a> 1
<a> executor . execute ( new Runnable ( ) { </a> 1
<a> @ Override </a> 0
<a> public void run ( ) { </a> 1
<a> flush ( future ) ; </a> 0
<a> } </a> 1
<a> } ) ; </a> 1
<a> } </a> 1
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public ChannelFuture write ( Object message , ChannelFuture future ) { </a> 0
<a> return pipeline . write ( prev , message , future ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> return channel . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> return channel . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> return channel . <RARE_TOKEN> ( cause ) ; </a> 1
<a> } </a> 1
<a> static final class <RARE_TOKEN> { </a> 1
<a> final MessageBuf < Object > <RARE_TOKEN> = Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> final <RARE_TOKEN> < Object [ ] > <RARE_TOKEN> = new ConcurrentLinkedQueue < Object [ ] > ( ) ; </a> 1
<a> void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> Object [ ] data = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> . clear ( ) ; </a> 1
<a> <RARE_TOKEN> . add ( data ) ; </a> 1
<a> } </a> 1
<a> void flush ( MessageBuf < Object > out ) { </a> 1
<a> for ( ; ; ) { </a> 1
<a> Object [ ] data = <RARE_TOKEN> . poll ( ) ; </a> 1
<a> if ( data == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> Collections . <RARE_TOKEN> ( out , data ) ; </a> 1
<a> } </a> 0
<a> } </a> 1
<a> } </a> 1
<a> static final class <RARE_TOKEN> { </a> 1
<a> final ByteBuf byteBuf = Unpooled . buffer ( ) ; </a> 1
<a> final <RARE_TOKEN> < ByteBuf > <RARE_TOKEN> = new ConcurrentLinkedQueue < ByteBuf > ( ) ; </a> 1
<a> void <RARE_TOKEN> ( ) { </a> 1
<a> if ( ! byteBuf . readable ( ) ) { </a> 0
<a> return ; </a> 1
<a> } </a> 1
<a> ByteBuf data = byteBuf . readBytes ( byteBuf . readableBytes ( ) ) ; </a> 1
<a> byteBuf . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> . add ( data ) ; </a> 1
<a> } </a> 1
<a> void flush ( ByteBuf out ) { </a> 1
<a> for ( ; ; ) { </a> 1
<a> ByteBuf data = <RARE_TOKEN> . poll ( ) ; </a> 1
<a> if ( data == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> out . writeBytes ( data ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return readable . get ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void readable ( boolean readable ) { </a> 1
<a> pipeline . readable ( this , readable ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> parent , ThreadFactory threadFactory , <RARE_TOKEN> scheduler ) { </a> 0
<a> super ( parent , threadFactory , scheduler ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void run ( ) { </a> 0
<a> for ( ; ; ) { </a> 1
<a> Runnable task ; </a> 1
<a> try { </a> 1
<a> task = <RARE_TOKEN> ( ) ; </a> 1
<a> task . run ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 1
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) && <RARE_TOKEN> ( ) == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( boolean inEventLoop ) { </a> 0
<a> if ( ! inEventLoop && <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> this ( <RARE_TOKEN> , null ) ; </a> 1
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , ThreadFactory threadFactory ) { </a> 1
<a> super ( <RARE_TOKEN> , threadFactory ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected EventExecutor <RARE_TOKEN> ( </a> 0
<a> ThreadFactory threadFactory , <RARE_TOKEN> scheduler , Object ... args ) throws Exception { </a> 0
<a> return new <RARE_TOKEN> ( this , threadFactory , scheduler ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> public interface EventExecutor extends <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> parent ( ) ; </a> 0
<a> boolean inEventLoop ( ) ; </a> 0
<a> boolean inEventLoop ( Thread <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public interface <RARE_TOKEN> { </a> 0
<a> EventExecutor next ( ) ; </a> 0
<a> void shutdown ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) throws InterruptedException ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public interface EventLoop extends EventExecutor , <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> <RARE_TOKEN> parent ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public class <RARE_TOKEN> extends ChannelException { </a> 0
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 1
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 1
<a> public abstract class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) * 2 ; </a> 0
<a> private static final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( ) ; </a> 0
<a> final <RARE_TOKEN> scheduler ; </a> 0
<a> private final EventExecutor [ ] <RARE_TOKEN> ; </a> 0
<a> private final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( ) ; </a> 0
<a> protected <RARE_TOKEN> ( int <RARE_TOKEN> , ThreadFactory threadFactory , Object ... args ) { </a> 1
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( String . format ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> (expected: >= <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> if ( threadFactory == null ) { </a> 0
<a> threadFactory = new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> scheduler = new <RARE_TOKEN> ( threadFactory ) ; </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> [ <RARE_TOKEN> ] ; </a> 1
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 1
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> [ i ] = <RARE_TOKEN> ( threadFactory , scheduler , args ) ; </a> 1
<a> success = true ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new <RARE_TOKEN> ( "failed to create a <RARE_TOKEN> event <RARE_TOKEN> , e ) ; </a> 0
<a> } finally { </a> 0
<a> if ( ! success ) { </a> 0
<a> for ( int j = 0 ; j < i ; j ++ ) { </a> 0
<a> <RARE_TOKEN> [ j ] . shutdown ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public EventExecutor next ( ) { </a> 0
<a> return <RARE_TOKEN> [ Math . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) <RARE_TOKEN> <RARE_TOKEN> . length ) ] ; </a> 0
<a> } </a> 0
<a> protected abstract EventExecutor <RARE_TOKEN> ( </a> 0
<a> ThreadFactory threadFactory , <RARE_TOKEN> scheduler , Object ... args ) throws Exception ; </a> 0
<a> @ Override </a> 0
<a> public void shutdown ( ) { </a> 0
<a> scheduler . shutdown ( ) ; </a> 1
<a> for ( EventExecutor l : <RARE_TOKEN> ) { </a> 0
<a> l . shutdown ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! scheduler . <RARE_TOKEN> ( ) ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> for ( EventExecutor l : <RARE_TOKEN> ) { </a> 0
<a> if ( ! l . <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! scheduler . <RARE_TOKEN> ( ) ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> for ( EventExecutor l : <RARE_TOKEN> ) { </a> 0
<a> if ( ! l . <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) </a> 0
<a> throws InterruptedException { </a> 0
<a> long <RARE_TOKEN> = System . <RARE_TOKEN> ( ) + unit . <RARE_TOKEN> ( timeout ) ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> - System . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> if ( scheduler . <RARE_TOKEN> ( <RARE_TOKEN> , TimeUnit . <RARE_TOKEN> ) ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> loop : for ( EventExecutor l : <RARE_TOKEN> ) { </a> 0
<a> for ( ; ; ) { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> - System . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> break loop ; </a> 0
<a> } </a> 0
<a> if ( l . <RARE_TOKEN> ( <RARE_TOKEN> , TimeUnit . <RARE_TOKEN> ) ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> implements ThreadFactory { </a> 0
<a> private final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( ) ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( ) { </a> 0
<a> String <RARE_TOKEN> = <RARE_TOKEN> . this . getClass ( ) . getSimpleName ( ) ; </a> 0
<a> <RARE_TOKEN> = "" + <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . charAt ( 0 ) ) + <RARE_TOKEN> . substring ( 1 ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Thread <RARE_TOKEN> ( Runnable r ) { </a> 0
<a> Thread t = new Thread ( r , <RARE_TOKEN> + <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> try { </a> 0
<a> if ( t . <RARE_TOKEN> ( ) ) { </a> 0
<a> t . <RARE_TOKEN> ( false ) ; </a> 0
<a> } </a> 0
<a> if ( t . <RARE_TOKEN> ( ) != Thread . <RARE_TOKEN> ) { </a> 0
<a> t . <RARE_TOKEN> ( Thread . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } catch ( Exception <RARE_TOKEN> ) { </a> 0
<a> } </a> 0
<a> return t ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final long serialVersionUID = - <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message , Throwable cause ) { </a> 0
<a> super ( message , cause ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Throwable cause ) { </a> 0
<a> super ( cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> public interface <RARE_TOKEN> extends Channel { </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collections ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ScheduledFuture ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 1
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> implements EventExecutor { </a> 0
<a> private static final InternalLogger logger = </a> 0
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> static final <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = </a> 0
<a> new <RARE_TOKEN> < <RARE_TOKEN> > ( ) ; </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . get ( ) ; </a> 0
<a> } </a> 0
<a> private final <RARE_TOKEN> parent ; </a> 1
<a> private final <RARE_TOKEN> < Runnable > <RARE_TOKEN> ; </a> 0
<a> private final Thread <RARE_TOKEN> ; </a> 0
<a> private final Object <RARE_TOKEN> = new Object ( ) ; </a> 0
<a> private final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 0 ) ; </a> 0
<a> private final <RARE_TOKEN> scheduler ; </a> 0
<a> private final Set < Runnable > <RARE_TOKEN> = new <RARE_TOKEN> < Runnable > ( ) ; </a> 0
<a> private volatile int state ; </a> 1
<a> protected <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> parent , ThreadFactory threadFactory , <RARE_TOKEN> scheduler ) { </a> 0
<a> if ( threadFactory == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( scheduler == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . parent = parent ; </a> 0
<a> this . scheduler = scheduler ; </a> 0
<a> <RARE_TOKEN> = threadFactory . <RARE_TOKEN> ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . set ( <RARE_TOKEN> . this ) ; </a> 0
<a> try { </a> 1
<a> <RARE_TOKEN> . this . run ( ) ; </a> 1
<a> } finally { </a> 1
<a> try { </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } finally { </a> 1
<a> synchronized ( <RARE_TOKEN> ) { </a> 1
<a> state = 3 ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } finally { </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> assert <RARE_TOKEN> . isEmpty ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( ) { </a> 1
<a> for ( ; ; ) { </a> 1
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> <RARE_TOKEN> |= <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> |= <RARE_TOKEN> ( ) ; </a> 1
<a> if ( ! <RARE_TOKEN> && ! <RARE_TOKEN> ( ) ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> < Runnable > <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> < Runnable > ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public <RARE_TOKEN> parent ( ) { </a> 1
<a> return parent ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public EventExecutor next ( ) { </a> 1
<a> return this ; </a> 1
<a> } </a> 1
<a> protected void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> protected Runnable <RARE_TOKEN> ( ) { </a> 0
<a> assert inEventLoop ( ) ; </a> 0
<a> return <RARE_TOKEN> . poll ( ) ; </a> 0
<a> } </a> 0
<a> protected Runnable <RARE_TOKEN> ( ) throws InterruptedException { </a> 1
<a> assert inEventLoop ( ) ; </a> 0
<a> if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 1
<a> return ( ( <RARE_TOKEN> < Runnable > ) <RARE_TOKEN> ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> protected Runnable <RARE_TOKEN> ( ) { </a> 0
<a> assert inEventLoop ( ) ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> assert inEventLoop ( ) ; </a> 0
<a> return ! <RARE_TOKEN> . isEmpty ( ) ; </a> 0
<a> } </a> 0
<a> protected void <RARE_TOKEN> ( Runnable task ) { </a> 0
<a> if ( task == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( task ) ; </a> 0
<a> } </a> 0
<a> protected boolean <RARE_TOKEN> ( Runnable task ) { </a> 0
<a> if ( task == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> . remove ( task ) ; </a> 0
<a> } </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> final Runnable task = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( task == null ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> task . run ( ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> logger . warn ( <RARE_TOKEN> task <RARE_TOKEN> an <RARE_TOKEN> , t ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> protected abstract void run ( ) ; </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> protected abstract void <RARE_TOKEN> ( boolean inEventLoop ) ; </a> 1
<a> @ Override </a> 0
<a> public boolean inEventLoop ( ) { </a> 1
<a> return inEventLoop ( Thread . currentThread ( ) ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean inEventLoop ( Thread <RARE_TOKEN> ) { </a> 1
<a> return <RARE_TOKEN> == this . <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( final Runnable task ) { </a> 0
<a> if ( inEventLoop ( ) ) { </a> 0
<a> <RARE_TOKEN> . add ( task ) ; </a> 0
<a> } else { </a> 0
<a> execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . add ( task ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void <RARE_TOKEN> ( final Runnable task ) { </a> 0
<a> if ( inEventLoop ( ) ) { </a> 0
<a> <RARE_TOKEN> . remove ( task ) ; </a> 0
<a> } else { </a> 0
<a> execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . remove ( task ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( ) { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> while ( ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> List < Runnable > <RARE_TOKEN> = new ArrayList < Runnable > ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> for ( Runnable task : <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> task . run ( ) ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 1
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> an <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void shutdown ( ) { </a> 0
<a> boolean inEventLoop = inEventLoop ( ) ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> if ( inEventLoop ) { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 1
<a> assert state == 1 ; </a> 1
<a> state = 2 ; </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> } </a> 1
<a> } else { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 1
<a> switch ( state ) { </a> 0
<a> case 0 : </a> 0
<a> state = 3 ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> case 1 : </a> 1
<a> state = 2 ; </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( inEventLoop ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public List < Runnable > <RARE_TOKEN> ( ) { </a> 0
<a> shutdown ( ) ; </a> 0
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return state >= 2 ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return state == 3 ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) throws InterruptedException { </a> 0
<a> if ( unit == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( inEventLoop ( ) ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> await <RARE_TOKEN> of the current <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( timeout , unit ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void execute ( Runnable task ) { </a> 0
<a> if ( task == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( inEventLoop ( ) ) { </a> 1
<a> <RARE_TOKEN> ( task ) ; </a> 0
<a> <RARE_TOKEN> ( true ) ; </a> 1
<a> } else { </a> 0
<a> synchronized ( <RARE_TOKEN> ) { </a> 1
<a> if ( state == 0 ) { </a> 1
<a> state = 1 ; </a> 1
<a> <RARE_TOKEN> . start ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( task ) ; </a> 1
<a> if ( <RARE_TOKEN> ( ) && <RARE_TOKEN> ( task ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> ( false ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> private static void <RARE_TOKEN> ( ) { </a> 1
<a> throw new <RARE_TOKEN> ( <RARE_TOKEN> executor <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public ScheduledFuture < ? > schedule ( Runnable command , long delay , TimeUnit unit ) { </a> 0
<a> return scheduler . schedule ( this , command , delay , unit ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < V > ScheduledFuture < V > schedule ( <RARE_TOKEN> < V > <RARE_TOKEN> , long delay , TimeUnit unit ) { </a> 0
<a> return scheduler . schedule ( this , <RARE_TOKEN> , delay , unit ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ScheduledFuture < ? > <RARE_TOKEN> ( Runnable command , long <RARE_TOKEN> , long period , TimeUnit unit ) { </a> 0
<a> return scheduler . <RARE_TOKEN> ( this , command , <RARE_TOKEN> , period , unit ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ScheduledFuture < ? > <RARE_TOKEN> ( Runnable command , long <RARE_TOKEN> , long delay , TimeUnit unit ) { </a> 0
<a> return scheduler . <RARE_TOKEN> ( this , command , <RARE_TOKEN> , delay , unit ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 1
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> implements EventLoop { </a> 0
<a> protected <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> parent , ThreadFactory threadFactory , <RARE_TOKEN> scheduler ) { </a> 1
<a> super ( parent , threadFactory , scheduler ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public <RARE_TOKEN> parent ( ) { </a> 0
<a> return ( <RARE_TOKEN> ) super . parent ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public EventLoop next ( ) { </a> 0
<a> return ( EventLoop ) super . next ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel ) { </a> 1
<a> if ( channel == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( channel , channel . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public ChannelFuture <RARE_TOKEN> ( final Channel channel , final ChannelFuture future ) { </a> 1
<a> if ( inEventLoop ( ) ) { </a> 0
<a> channel . unsafe ( ) . <RARE_TOKEN> ( this , future ) ; </a> 1
<a> } else { </a> 1
<a> execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> channel . unsafe ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . this , future ) ; </a> 0
<a> } </a> 1
<a> } ) ; </a> 1
<a> } </a> 1
<a> return future ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> public <RARE_TOKEN> ( Channel channel ) { </a> 0
<a> super ( channel ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Throwable cause ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture sync ( ) throws InterruptedException { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Void get ( ) throws InterruptedException , <RARE_TOKEN> { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Void get ( long timeout , TimeUnit unit ) throws InterruptedException , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> implements ChannelFuture . <RARE_TOKEN> { </a> 0
<a> private final Channel channel ; </a> 0
<a> public <RARE_TOKEN> ( Channel channel ) { </a> 0
<a> if ( channel == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . channel = channel ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture addListener ( final ChannelFutureListener listener ) { </a> 0
<a> fail ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ChannelFutureListener listener ) { </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture await ( ) throws InterruptedException { </a> 0
<a> if ( Thread . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new InterruptedException ( ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean await ( long timeout , TimeUnit unit ) throws InterruptedException { </a> 0
<a> fail ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean await ( long <RARE_TOKEN> ) throws InterruptedException { </a> 0
<a> fail ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> fail ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) { </a> 0
<a> fail ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long <RARE_TOKEN> ) { </a> 0
<a> fail ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Channel channel ( ) { </a> 0
<a> return channel ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isCancelled ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Throwable cause ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture sync ( ) throws InterruptedException { </a> 0
<a> fail ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> fail ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Void get ( ) throws InterruptedException , <RARE_TOKEN> { </a> 0
<a> fail ( ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Void get ( long timeout , TimeUnit unit ) throws InterruptedException , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> { </a> 0
<a> fail ( ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long <RARE_TOKEN> , long current , long <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean setFailure ( Throwable cause ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean cancel ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean cancel ( boolean <RARE_TOKEN> ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private static void fail ( ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . embedded ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . <RARE_TOKEN> ; </a> 1
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 1
<a> import io . netty . channel . ChannelHandlerContext ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . EventLoop ; </a> 1
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . net . SocketAddress ; </a> 1
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 1
<a> private final <RARE_TOKEN> config = new <RARE_TOKEN> ( ) ; </a> 0
<a> private final SocketAddress localAddress = new <RARE_TOKEN> ( ) ; </a> 1
<a> private final SocketAddress remoteAddress = new <RARE_TOKEN> ( ) ; </a> 1
<a> private final MessageBuf < Object > <RARE_TOKEN> = Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> private final ByteBuf <RARE_TOKEN> = Unpooled . buffer ( ) ; </a> 1
<a> protected final Object <RARE_TOKEN> ; </a> 1
<a> private Throwable <RARE_TOKEN> ; </a> 1
<a> private int state ; </a> 1
<a> <RARE_TOKEN> ( Object <RARE_TOKEN> , ChannelHandler ... <RARE_TOKEN> ) { </a> 1
<a> super ( null , null ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> int <RARE_TOKEN> = 0 ; </a> 1
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> ChannelPipeline p = pipeline ( ) ; </a> 1
<a> for ( ChannelHandler h : <RARE_TOKEN> ) { </a> 1
<a> if ( h == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> ++ ; </a> 1
<a> p . addLast ( h ) ; </a> 0
<a> if ( h instanceof <RARE_TOKEN> || h instanceof <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> is <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! <RARE_TOKEN> ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> not <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> p . addLast ( new <RARE_TOKEN> ( ) , new <RARE_TOKEN> ( ) ) ; </a> 1
<a> new <RARE_TOKEN> ( ) . <RARE_TOKEN> ( this ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> config ( ) { </a> 0
<a> return config ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isOpen ( ) { </a> 0
<a> return state < 2 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isActive ( ) { </a> 0
<a> return state == 1 ; </a> 0
<a> } </a> 0
<a> public MessageBuf < Object > <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public Object <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> . readable ( ) ) { </a> 0
<a> try { </a> 1
<a> return <RARE_TOKEN> . readBytes ( <RARE_TOKEN> . readableBytes ( ) ) ; </a> 1
<a> } finally { </a> 1
<a> <RARE_TOKEN> . clear ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> return <RARE_TOKEN> . poll ( ) ; </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> Throwable t = <RARE_TOKEN> ; </a> 1
<a> if ( t == null ) { </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = null ; </a> 1
<a> if ( t instanceof <RARE_TOKEN> ) { </a> 0
<a> throw ( <RARE_TOKEN> ) t ; </a> 0
<a> } </a> 0
<a> if ( t instanceof Error ) { </a> 0
<a> throw ( Error ) t ; </a> 0
<a> } </a> 0
<a> throw new ChannelException ( t ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( EventLoop loop ) { </a> 0
<a> return loop instanceof <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return isActive ( ) ? localAddress : null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return isActive ( ) ? remoteAddress : null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected Runnable <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> state = 1 ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( SocketAddress localAddress ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> state = 2 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void connect ( SocketAddress remoteAddress , </a> 0
<a> SocketAddress localAddress , ChannelFuture future ) { </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 1
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) </a> 1
<a> throws Exception { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> <RARE_TOKEN> = cause ; </a> 1
<a> } else { </a> 1
<a> logger . warn ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> one exception <RARE_TOKEN> <RARE_TOKEN> " + </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> one <RARE_TOKEN> log <RARE_TOKEN> , cause ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 1
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . embedded ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . ChannelBufType ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . ChannelHandler ; </a> 1
<a> import io . netty . channel . ChannelMetadata ; </a> 0
<a> public class EmbeddedByteChannel extends <RARE_TOKEN> { </a> 0
<a> private static final ChannelMetadata <RARE_TOKEN> = new ChannelMetadata ( ChannelBufType . <RARE_TOKEN> , false ) ; </a> 0
<a> public EmbeddedByteChannel ( ChannelHandler ... <RARE_TOKEN> ) { </a> 1
<a> super ( Unpooled . buffer ( ) , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelMetadata <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 1
<a> return pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> public ByteBuf <RARE_TOKEN> ( ) { </a> 1
<a> return ( ByteBuf ) <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public ByteBuf readOutbound ( ) { </a> 1
<a> if ( ! <RARE_TOKEN> ( ) . readable ( ) ) { </a> 0
<a> return null ; </a> 1
<a> } </a> 1
<a> try { </a> 1
<a> return <RARE_TOKEN> ( ) . readBytes ( <RARE_TOKEN> ( ) . readableBytes ( ) ) ; </a> 1
<a> } finally { </a> 1
<a> <RARE_TOKEN> ( ) . clear ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public boolean writeInbound ( ByteBuf data ) { </a> 0
<a> <RARE_TOKEN> ( ) . writeBytes ( data ) ; </a> 1
<a> pipeline ( ) . fireInboundBufferUpdated ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ( ) . readable ( ) || ! <RARE_TOKEN> ( ) . isEmpty ( ) ; </a> 0
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( Object msg ) { </a> 0
<a> write ( msg ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ( ) . readable ( ) ; </a> 0
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> close ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return <RARE_TOKEN> ( ) . readable ( ) || ! <RARE_TOKEN> ( ) . isEmpty ( ) || </a> 0
<a> <RARE_TOKEN> ( ) . readable ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( ByteBuf buf ) throws Exception { </a> 1
<a> if ( ! <RARE_TOKEN> ( ) . readable ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) . writeBytes ( buf ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . embedded ; </a> 0
<a> import io . netty . channel . Channel ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 1
<a> import io . netty . channel . EventLoop ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import java . util . Collections ; </a> 1
<a> import java . util . List ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ScheduledFuture ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> implements EventLoop { </a> 1
<a> @ Override </a> 0
<a> public ScheduledFuture < ? > schedule ( Runnable command , long delay , </a> 0
<a> TimeUnit unit ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < V > ScheduledFuture < V > schedule ( <RARE_TOKEN> < V > <RARE_TOKEN> , long delay , </a> 0
<a> TimeUnit unit ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ScheduledFuture < ? > <RARE_TOKEN> ( Runnable command , </a> 0
<a> long <RARE_TOKEN> , long period , TimeUnit unit ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ScheduledFuture < ? > <RARE_TOKEN> ( Runnable command , </a> 0
<a> long <RARE_TOKEN> , long delay , TimeUnit unit ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void shutdown ( ) { </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> public List < Runnable > <RARE_TOKEN> ( ) { </a> 1
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) </a> 1
<a> throws InterruptedException { </a> 1
<a> Thread . sleep ( unit . <RARE_TOKEN> ( timeout ) ) ; </a> 1
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void execute ( Runnable command ) { </a> 1
<a> command . run ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel ) { </a> 0
<a> return <RARE_TOKEN> ( channel , channel . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel , ChannelFuture future ) { </a> 0
<a> channel . unsafe ( ) . <RARE_TOKEN> ( this , future ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean inEventLoop ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean inEventLoop ( Thread <RARE_TOKEN> ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public EventLoop next ( ) { </a> 1
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> parent ( ) { </a> 1
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . embedded ; </a> 0
<a> import io . netty . buffer . ChannelBufType ; </a> 1
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . ChannelHandler ; </a> 1
<a> import io . netty . channel . ChannelMetadata ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final ChannelMetadata <RARE_TOKEN> = new ChannelMetadata ( ChannelBufType . <RARE_TOKEN> , false ) ; </a> 0
<a> public <RARE_TOKEN> ( ChannelHandler ... <RARE_TOKEN> ) { </a> 1
<a> super ( Unpooled . <RARE_TOKEN> ( ) , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelMetadata <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> public MessageBuf < Object > <RARE_TOKEN> ( ) { </a> 1
<a> return pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ SuppressWarnings ( "unchecked" ) </a> 1
<a> public MessageBuf < Object > <RARE_TOKEN> ( ) { </a> 1
<a> return ( MessageBuf < Object > ) <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public Object readOutbound ( ) { </a> 1
<a> return <RARE_TOKEN> ( ) . poll ( ) ; </a> 1
<a> } </a> 1
<a> public boolean writeInbound ( Object msg ) { </a> 0
<a> <RARE_TOKEN> ( ) . add ( msg ) ; </a> 0
<a> pipeline ( ) . fireInboundBufferUpdated ( ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> return <RARE_TOKEN> ( ) . readable ( ) || ! <RARE_TOKEN> ( ) . isEmpty ( ) ; </a> 0
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( Object msg ) { </a> 0
<a> write ( msg ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> return ! <RARE_TOKEN> ( ) . isEmpty ( ) ; </a> 1
<a> } </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> close ( ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> return <RARE_TOKEN> ( ) . readable ( ) || ! <RARE_TOKEN> ( ) . isEmpty ( ) || </a> 0
<a> ! <RARE_TOKEN> ( ) . isEmpty ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception { </a> 1
<a> buf . <RARE_TOKEN> ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . embedded ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> class <RARE_TOKEN> extends SocketAddress { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . embedded ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . group ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . CharsetUtil ; </a> 0
<a> import java . util . Set ; </a> 0
<a> public interface <RARE_TOKEN> extends Set < Channel > , <RARE_TOKEN> < <RARE_TOKEN> > { </a> 0
<a> String name ( ) ; </a> 0
<a> Channel <RARE_TOKEN> ( Integer id ) ; </a> 1
<a> <RARE_TOKEN> write ( Object message ) ; </a> 0
<a> <RARE_TOKEN> disconnect ( ) ; </a> 0
<a> <RARE_TOKEN> close ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . group ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelHandler ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> < ChannelFuture > { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> ChannelFuture <RARE_TOKEN> ( Integer <RARE_TOKEN> ) ; </a> 1
<a> ChannelFuture <RARE_TOKEN> ( Channel channel ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> void addListener ( <RARE_TOKEN> listener ) ; </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> listener ) ; </a> 0
<a> <RARE_TOKEN> await ( ) throws InterruptedException ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> boolean await ( long timeout , TimeUnit unit ) throws InterruptedException ; </a> 0
<a> boolean await ( long <RARE_TOKEN> ) throws InterruptedException ; </a> 0
<a> boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) ; </a> 0
<a> boolean <RARE_TOKEN> ( long <RARE_TOKEN> ) ; </a> 0
<a> @ Override </a> 0
<a> Iterator < ChannelFuture > <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . group ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> void <RARE_TOKEN> ( <RARE_TOKEN> future ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . group ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> < E > implements Iterator < E > { </a> 0
<a> private final Iterator < E > <RARE_TOKEN> ; </a> 0
<a> private final Iterator < E > <RARE_TOKEN> ; </a> 0
<a> private Iterator < E > <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( Iterator < E > <RARE_TOKEN> , Iterator < E > <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 1
<a> } else { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public E next ( ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> . next ( ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> if ( <RARE_TOKEN> == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> return next ( ) ; </a> 1
<a> } else { </a> 0
<a> throw e ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void remove ( ) { </a> 0
<a> <RARE_TOKEN> . remove ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . group ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> < Channel > implements <RARE_TOKEN> { </a> 0
<a> private static final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( ) ; </a> 0
<a> private final String name ; </a> 0
<a> private final <RARE_TOKEN> < Integer , Channel > <RARE_TOKEN> = new ConcurrentHashMap < Integer , Channel > ( ) ; </a> 1
<a> private final <RARE_TOKEN> < Integer , Channel > <RARE_TOKEN> = new ConcurrentHashMap < Integer , Channel > ( ) ; </a> 1
<a> private final ChannelFutureListener <RARE_TOKEN> = new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture future ) throws Exception { </a> 0
<a> remove ( future . channel ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 1
<a> this ( <RARE_TOKEN> + Integer . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( String name ) { </a> 1
<a> if ( name == null ) { </a> 0
<a> throw new NullPointerException ( "name" ) ; </a> 0
<a> } </a> 0
<a> this . name = name ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String name ( ) { </a> 0
<a> return name ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isEmpty ( ) { </a> 0
<a> return <RARE_TOKEN> . isEmpty ( ) && <RARE_TOKEN> . isEmpty ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int size ( ) { </a> 0
<a> return <RARE_TOKEN> . size ( ) + <RARE_TOKEN> . size ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Channel <RARE_TOKEN> ( Integer id ) { </a> 1
<a> Channel c = <RARE_TOKEN> . get ( id ) ; </a> 1
<a> if ( c != null ) { </a> 1
<a> return c ; </a> 1
<a> } else { </a> 1
<a> return <RARE_TOKEN> . get ( id ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean contains ( Object o ) { </a> 0
<a> if ( o instanceof Integer ) { </a> 1
<a> return <RARE_TOKEN> . containsKey ( o ) || <RARE_TOKEN> . containsKey ( o ) ; </a> 1
<a> } else if ( o instanceof Channel ) { </a> 1
<a> Channel c = ( Channel ) o ; </a> 0
<a> if ( o instanceof <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> . containsKey ( c . id ( ) ) ; </a> 1
<a> } else { </a> 0
<a> return <RARE_TOKEN> . containsKey ( c . id ( ) ) ; </a> 1
<a> } </a> 0
<a> } else { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean add ( Channel channel ) { </a> 0
<a> <RARE_TOKEN> < Integer , Channel > map = </a> 1
<a> channel instanceof <RARE_TOKEN> ? <RARE_TOKEN> : <RARE_TOKEN> ; </a> 0
<a> boolean <RARE_TOKEN> = map . <RARE_TOKEN> ( channel . id ( ) , channel ) == null ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> channel . <RARE_TOKEN> ( ) . addListener ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean remove ( Object o ) { </a> 0
<a> Channel c = null ; </a> 1
<a> if ( o instanceof Integer ) { </a> 1
<a> c = <RARE_TOKEN> . remove ( o ) ; </a> 1
<a> if ( c == null ) { </a> 1
<a> c = <RARE_TOKEN> . remove ( o ) ; </a> 1
<a> } </a> 1
<a> } else if ( o instanceof Channel ) { </a> 1
<a> c = ( Channel ) o ; </a> 1
<a> if ( c instanceof <RARE_TOKEN> ) { </a> 0
<a> c = <RARE_TOKEN> . remove ( c . id ( ) ) ; </a> 1
<a> } else { </a> 0
<a> c = <RARE_TOKEN> . remove ( c . id ( ) ) ; </a> 1
<a> } </a> 0
<a> } </a> 1
<a> if ( c == null ) { </a> 1
<a> return false ; </a> 0
<a> } </a> 0
<a> c . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Iterator < Channel > <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> < Channel > ( </a> 0
<a> <RARE_TOKEN> . values ( ) . <RARE_TOKEN> ( ) , </a> 1
<a> <RARE_TOKEN> . values ( ) . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object [ ] <RARE_TOKEN> ( ) { </a> 0
<a> Collection < Channel > channels = new ArrayList < Channel > ( size ( ) ) ; </a> 0
<a> channels . <RARE_TOKEN> ( <RARE_TOKEN> . values ( ) ) ; </a> 1
<a> channels . <RARE_TOKEN> ( <RARE_TOKEN> . values ( ) ) ; </a> 1
<a> return channels . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > T [ ] <RARE_TOKEN> ( T [ ] a ) { </a> 0
<a> Collection < Channel > channels = new ArrayList < Channel > ( size ( ) ) ; </a> 0
<a> channels . <RARE_TOKEN> ( <RARE_TOKEN> . values ( ) ) ; </a> 1
<a> channels . <RARE_TOKEN> ( <RARE_TOKEN> . values ( ) ) ; </a> 1
<a> return channels . <RARE_TOKEN> ( a ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> close ( ) { </a> 0
<a> Map < Integer , ChannelFuture > futures = </a> 1
<a> new <RARE_TOKEN> < Integer , ChannelFuture > ( size ( ) ) ; </a> 1
<a> for ( Channel c : <RARE_TOKEN> . values ( ) ) { </a> 1
<a> futures . put ( c . id ( ) , c . close ( ) . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> for ( Channel c : <RARE_TOKEN> . values ( ) ) { </a> 1
<a> futures . put ( c . id ( ) , c . close ( ) ) ; </a> 1
<a> } </a> 0
<a> return new <RARE_TOKEN> ( this , futures ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> disconnect ( ) { </a> 0
<a> Map < Integer , ChannelFuture > futures = </a> 1
<a> new <RARE_TOKEN> < Integer , ChannelFuture > ( size ( ) ) ; </a> 1
<a> for ( Channel c : <RARE_TOKEN> . values ( ) ) { </a> 1
<a> futures . put ( c . id ( ) , c . disconnect ( ) ) ; </a> 1
<a> } </a> 0
<a> for ( Channel c : <RARE_TOKEN> . values ( ) ) { </a> 1
<a> futures . put ( c . id ( ) , c . disconnect ( ) ) ; </a> 1
<a> } </a> 0
<a> return new <RARE_TOKEN> ( this , futures ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> write ( Object message ) { </a> 0
<a> Map < Integer , ChannelFuture > futures = </a> 0
<a> new <RARE_TOKEN> < Integer , ChannelFuture > ( size ( ) ) ; </a> 0
<a> if ( message instanceof ByteBuf ) { </a> 0
<a> ByteBuf buf = ( ByteBuf ) message ; </a> 0
<a> for ( Channel c : <RARE_TOKEN> . values ( ) ) { </a> 0
<a> futures . put ( c . id ( ) , c . write ( buf . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> for ( Channel c : <RARE_TOKEN> . values ( ) ) { </a> 1
<a> futures . put ( c . id ( ) , c . write ( message ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return new <RARE_TOKEN> ( this , futures ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return System . <RARE_TOKEN> ( this ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object o ) { </a> 0
<a> return this == o ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( <RARE_TOKEN> o ) { </a> 0
<a> int v = name ( ) . <RARE_TOKEN> ( o . name ( ) ) ; </a> 0
<a> if ( v != 0 ) { </a> 0
<a> return v ; </a> 0
<a> } </a> 0
<a> return System . <RARE_TOKEN> ( this ) - System . <RARE_TOKEN> ( o ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return getClass ( ) . getSimpleName ( ) + </a> 0
<a> <RARE_TOKEN> " + name ( ) + ", <RARE_TOKEN> " + size ( ) + <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . group ; </a> 0
<a> import static java . util . concurrent . TimeUnit . * ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelFutureListener ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = </a> 0
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final <RARE_TOKEN> group ; </a> 0
<a> final Map < Integer , ChannelFuture > futures ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private List < <RARE_TOKEN> > <RARE_TOKEN> ; </a> 0
<a> private boolean done ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> int <RARE_TOKEN> ; </a> 0
<a> private int <RARE_TOKEN> ; </a> 0
<a> private final ChannelFutureListener <RARE_TOKEN> = new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelFuture future ) throws Exception { </a> 0
<a> boolean success = future . <RARE_TOKEN> ( ) ; </a> 0
<a> boolean <RARE_TOKEN> ; </a> 0
<a> synchronized ( <RARE_TOKEN> . this ) { </a> 0
<a> if ( success ) { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + <RARE_TOKEN> == futures . size ( ) ; </a> 0
<a> assert <RARE_TOKEN> + <RARE_TOKEN> <= futures . size ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> group , Collection < ChannelFuture > futures ) { </a> 0
<a> if ( group == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( futures == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . group = group ; </a> 0
<a> Map < Integer , ChannelFuture > <RARE_TOKEN> = new <RARE_TOKEN> < Integer , ChannelFuture > ( ) ; </a> 1
<a> for ( ChannelFuture f : futures ) { </a> 0
<a> <RARE_TOKEN> . put ( f . channel ( ) . id ( ) , f ) ; </a> 1
<a> } </a> 0
<a> this . futures = Collections . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> for ( ChannelFuture f : this . futures . values ( ) ) { </a> 0
<a> f . addListener ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( this . futures . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> group , Map < Integer , ChannelFuture > futures ) { </a> 0
<a> this . group = group ; </a> 0
<a> this . futures = Collections . <RARE_TOKEN> ( futures ) ; </a> 0
<a> for ( ChannelFuture f : this . futures . values ( ) ) { </a> 0
<a> f . addListener ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( this . futures . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return group ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Integer <RARE_TOKEN> ) { </a> 1
<a> return futures . get ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel ) { </a> 0
<a> return futures . get ( channel . id ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public Iterator < ChannelFuture > <RARE_TOKEN> ( ) { </a> 0
<a> return futures . values ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized boolean <RARE_TOKEN> ( ) { </a> 0
<a> return done ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> == futures . size ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> != 0 && <RARE_TOKEN> != futures . size ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> != 0 && <RARE_TOKEN> != futures . size ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized boolean <RARE_TOKEN> ( ) { </a> 0
<a> int <RARE_TOKEN> = futures . size ( ) ; </a> 0
<a> return <RARE_TOKEN> != 0 && <RARE_TOKEN> == <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void addListener ( <RARE_TOKEN> listener ) { </a> 0
<a> if ( listener == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( done ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = listener ; </a> 0
<a> } else { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new ArrayList < <RARE_TOKEN> > ( 1 ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . add ( listener ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( listener ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> listener ) { </a> 0
<a> if ( listener == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( ! done ) { </a> 0
<a> if ( listener == <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> != null && ! <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . remove ( 0 ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } else if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> . remove ( listener ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> await ( ) throws InterruptedException { </a> 0
<a> if ( Thread . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new InterruptedException ( ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this ) { </a> 0
<a> while ( ! done ) { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean await ( long timeout , TimeUnit unit ) </a> 0
<a> throws InterruptedException { </a> 0
<a> return <RARE_TOKEN> ( unit . <RARE_TOKEN> ( timeout ) , true ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean await ( long <RARE_TOKEN> ) throws InterruptedException { </a> 0
<a> return <RARE_TOKEN> ( MILLISECONDS . <RARE_TOKEN> ( <RARE_TOKEN> ) , true ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> while ( ! done ) { </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> ( unit . <RARE_TOKEN> ( timeout ) , false ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> ( MILLISECONDS . <RARE_TOKEN> ( <RARE_TOKEN> ) , false ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean <RARE_TOKEN> ( long <RARE_TOKEN> , boolean <RARE_TOKEN> ) throws InterruptedException { </a> 0
<a> if ( <RARE_TOKEN> && Thread . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new InterruptedException ( ) ; </a> 0
<a> } </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> <= 0 ? 0 : System . <RARE_TOKEN> ( ) ; </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> boolean <RARE_TOKEN> = false ; </a> 0
<a> try { </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( done ) { </a> 0
<a> return done ; </a> 0
<a> } else if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> return done ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> try { </a> 0
<a> for ( ; ; ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> / <RARE_TOKEN> , ( int ) ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> throw e ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( done ) { </a> 0
<a> return true ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> - ( System . <RARE_TOKEN> ( ) - <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> return done ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> <RARE_TOKEN> -- ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> Thread . currentThread ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void <RARE_TOKEN> ( ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( done ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> done = true ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> for ( <RARE_TOKEN> l : <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( l ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( <RARE_TOKEN> l ) { </a> 0
<a> try { </a> 0
<a> l . <RARE_TOKEN> ( this ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . warn ( </a> 0
<a> <RARE_TOKEN> exception <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + </a> 0
<a> ChannelFutureListener . class . getSimpleName ( ) + <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . group ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> public final class LocalAddress extends SocketAddress implements <RARE_TOKEN> < LocalAddress > { </a> 0
<a> private static final long serialVersionUID = <RARE_TOKEN> ; </a> 0
<a> public static final LocalAddress <RARE_TOKEN> = new LocalAddress ( <RARE_TOKEN> ) ; </a> 0
<a> private final String id ; </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> LocalAddress ( Channel channel ) { </a> 0
<a> StringBuilder buf = new StringBuilder ( 16 ) ; </a> 0
<a> buf . append ( <RARE_TOKEN> ) ; </a> 0
<a> buf . append ( Long . <RARE_TOKEN> ( channel . id ( ) . <RARE_TOKEN> ( ) & <RARE_TOKEN> | <RARE_TOKEN> ) ) ; </a> 1
<a> buf . <RARE_TOKEN> ( 7 , <RARE_TOKEN> ) ; </a> 0
<a> id = buf . substring ( 6 ) ; </a> 0
<a> <RARE_TOKEN> = buf . toString ( ) ; </a> 0
<a> } </a> 0
<a> public LocalAddress ( String id ) { </a> 0
<a> if ( id == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> id = id . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( id . length ( ) == 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . id = id ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> + id ; </a> 0
<a> } </a> 0
<a> public String id ( ) { </a> 0
<a> return id ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return id . hashCode ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object o ) { </a> 0
<a> if ( ! ( o instanceof LocalAddress ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return id . equals ( ( ( LocalAddress ) o ) . id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( LocalAddress o ) { </a> 0
<a> return id . <RARE_TOKEN> ( o . id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ChannelBufType ; </a> 1
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelMetadata ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . EventLoop ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import java . net . SocketAddress ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final ChannelMetadata <RARE_TOKEN> = new ChannelMetadata ( ChannelBufType . <RARE_TOKEN> , false ) ; </a> 0
<a> private final <RARE_TOKEN> config = new <RARE_TOKEN> ( ) ; </a> 0
<a> private final Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> unsafe ( ) . close ( unsafe ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private volatile int state ; </a> 0
<a> private volatile <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private volatile LocalAddress localAddress ; </a> 0
<a> private volatile LocalAddress remoteAddress ; </a> 0
<a> private volatile ChannelFuture <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( null ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Integer id ) { </a> 0
<a> super ( null , id ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> parent , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( parent , null ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> localAddress = parent . localAddress ( ) ; </a> 0
<a> remoteAddress = <RARE_TOKEN> . localAddress ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelMetadata <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> config ( ) { </a> 0
<a> return config ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> parent ( ) { </a> 0
<a> return ( <RARE_TOKEN> ) super . parent ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public LocalAddress localAddress ( ) { </a> 0
<a> return ( LocalAddress ) super . localAddress ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public LocalAddress remoteAddress ( ) { </a> 0
<a> return ( LocalAddress ) super . remoteAddress ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isOpen ( ) { </a> 0
<a> return state < 3 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isActive ( ) { </a> 0
<a> return state == 2 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( EventLoop loop ) { </a> 0
<a> return loop instanceof <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return localAddress ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return remoteAddress ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected Runnable <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> Runnable <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> state = 2 ; </a> 0
<a> <RARE_TOKEN> . remoteAddress = parent ( ) . localAddress ( ) ; </a> 0
<a> <RARE_TOKEN> . state = 2 ; </a> 0
<a> final EventLoop <RARE_TOKEN> = <RARE_TOKEN> . eventLoop ( ) ; </a> 0
<a> <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> ( ( <RARE_TOKEN> ) eventLoop ( ) ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( SocketAddress localAddress ) throws Exception { </a> 0
<a> this . localAddress = </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( this , this . localAddress , </a> 0
<a> localAddress ) ; </a> 0
<a> state = 1 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> if ( state > 2 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( parent ( ) == null ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( localAddress ) ; </a> 0
<a> } </a> 0
<a> localAddress = null ; </a> 0
<a> state = 3 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> if ( <RARE_TOKEN> . isActive ( ) ) { </a> 0
<a> <RARE_TOKEN> . unsafe ( ) . close ( <RARE_TOKEN> . unsafe ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> if ( isOpen ( ) ) { </a> 0
<a> unsafe ( ) . close ( unsafe ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> ( ( <RARE_TOKEN> ) eventLoop ( ) ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception { </a> 1
<a> if ( state < 2 ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( state > 2 ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> assert <RARE_TOKEN> != null ; </a> 1
<a> buf . <RARE_TOKEN> ( <RARE_TOKEN> . pipeline ( ) . <RARE_TOKEN> ( ) ) ; </a> 1
<a> <RARE_TOKEN> . eventLoop ( ) . execute ( new Runnable ( ) { </a> 1
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void connect ( final SocketAddress remoteAddress , </a> 0
<a> SocketAddress localAddress , final ChannelFuture future ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( future ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( state == 2 ) { </a> 0
<a> Exception cause = new <RARE_TOKEN> ( ) ; </a> 0
<a> future . setFailure ( cause ) ; </a> 0
<a> pipeline ( ) . fireExceptionCaught ( cause ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = future ; </a> 0
<a> if ( state != 1 ) { </a> 0
<a> if ( localAddress == null ) { </a> 0
<a> localAddress = new LocalAddress ( <RARE_TOKEN> . this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( localAddress != null ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( localAddress ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> future . setFailure ( t ) ; </a> 0
<a> pipeline ( ) . fireExceptionCaught ( t ) ; </a> 1
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Channel <RARE_TOKEN> = <RARE_TOKEN> . get ( remoteAddress ) ; </a> 0
<a> if ( ! ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) ) { </a> 0
<a> Exception cause = </a> 1
<a> new ChannelException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> future . setFailure ( cause ) ; </a> 0
<a> pipeline ( ) . fireExceptionCaught ( cause ) ; </a> 1
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . this ) ; </a> 0
<a> } else { </a> 0
<a> final SocketAddress <RARE_TOKEN> = localAddress ; </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> connect ( remoteAddress , <RARE_TOKEN> , future ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> private static final <RARE_TOKEN> < LocalAddress , Channel > <RARE_TOKEN> = </a> 1
<a> new ConcurrentHashMap < LocalAddress , Channel > ( ) ; </a> 1
<a> static LocalAddress <RARE_TOKEN> ( </a> 0
<a> Channel channel , LocalAddress <RARE_TOKEN> , SocketAddress localAddress ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> throw new ChannelException ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( ! ( localAddress instanceof LocalAddress ) ) { </a> 0
<a> throw new ChannelException ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> " + localAddress . getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> LocalAddress <RARE_TOKEN> = ( LocalAddress ) localAddress ; </a> 0
<a> if ( LocalAddress . <RARE_TOKEN> . equals ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> = new LocalAddress ( channel ) ; </a> 0
<a> } </a> 0
<a> Channel <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> , channel ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> throw new ChannelException ( <RARE_TOKEN> <RARE_TOKEN> in <RARE_TOKEN> <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> static Channel get ( SocketAddress localAddress ) { </a> 0
<a> return <RARE_TOKEN> . get ( localAddress ) ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( LocalAddress localAddress ) { </a> 0
<a> <RARE_TOKEN> . remove ( localAddress ) ; </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 0
<a> final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> parent , ThreadFactory threadFactory , <RARE_TOKEN> scheduler ) { </a> 0
<a> super ( parent , threadFactory , scheduler ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void run ( ) { </a> 1
<a> for ( ; ; ) { </a> 1
<a> Runnable task ; </a> 1
<a> try { </a> 1
<a> task = <RARE_TOKEN> ( ) ; </a> 1
<a> task . run ( ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> task = <RARE_TOKEN> ( ) ; </a> 1
<a> if ( task == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> task . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( boolean inEventLoop ) { </a> 0
<a> if ( ! inEventLoop && <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . EventExecutor ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> public <RARE_TOKEN> ( ) { </a> 1
<a> this ( 0 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> this ( <RARE_TOKEN> , null ) ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , ThreadFactory threadFactory ) { </a> 1
<a> super ( <RARE_TOKEN> , threadFactory ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected EventExecutor <RARE_TOKEN> ( </a> 1
<a> ThreadFactory threadFactory , <RARE_TOKEN> scheduler , Object ... args ) throws Exception { </a> 0
<a> return new <RARE_TOKEN> ( this , threadFactory , scheduler ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . EventLoop ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import java . net . SocketAddress ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> config = new <RARE_TOKEN> ( ) ; </a> 0
<a> private final Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> unsafe ( ) . close ( unsafe ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private volatile int state ; </a> 0
<a> private volatile LocalAddress localAddress ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( null ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Integer id ) { </a> 0
<a> super ( id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> config ( ) { </a> 0
<a> return config ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public LocalAddress localAddress ( ) { </a> 0
<a> return ( LocalAddress ) super . localAddress ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public LocalAddress remoteAddress ( ) { </a> 0
<a> return ( LocalAddress ) super . remoteAddress ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isOpen ( ) { </a> 0
<a> return state < 2 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isActive ( ) { </a> 0
<a> return state == 1 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( EventLoop loop ) { </a> 0
<a> return loop instanceof <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return localAddress ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected Runnable <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ( ( <RARE_TOKEN> ) eventLoop ( ) ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( SocketAddress localAddress ) throws Exception { </a> 0
<a> this . localAddress = <RARE_TOKEN> . <RARE_TOKEN> ( this , this . localAddress , localAddress ) ; </a> 0
<a> state = 1 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> if ( state > 1 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( localAddress ) ; </a> 0
<a> localAddress = null ; </a> 0
<a> state = 2 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> ( ( <RARE_TOKEN> ) eventLoop ( ) ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ( final <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( final <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> pipeline ( ) . <RARE_TOKEN> ( ) . add ( <RARE_TOKEN> ) ; </a> 1
<a> pipeline ( ) . fireInboundBufferUpdated ( ) ; </a> 1
<a> } else { </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . <RARE_TOKEN> ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private final ByteBuf data ; </a> 0
<a> private final InetSocketAddress remoteAddress ; </a> 1
<a> public <RARE_TOKEN> ( ByteBuf data , InetSocketAddress remoteAddress ) { </a> 1
<a> if ( data == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( remoteAddress == null ) { </a> 1
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> this . data = data ; </a> 0
<a> this . remoteAddress = remoteAddress ; </a> 1
<a> } </a> 1
<a> public ByteBuf data ( ) { </a> 0
<a> return data ; </a> 0
<a> } </a> 0
<a> public InetSocketAddress remoteAddress ( ) { </a> 1
<a> return remoteAddress ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 1
<a> return <RARE_TOKEN> + data . readableBytes ( ) + <RARE_TOKEN> " + remoteAddress + <RARE_TOKEN> ; </a> 0
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket ; </a> 0
<a> import static io . netty . channel . ChannelOption . * ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelOption ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . InetAddress ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . NetworkInterface ; </a> 0
<a> import java . net . SocketException ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> private static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> private final <RARE_TOKEN> socket ; </a> 0
<a> private volatile int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( <RARE_TOKEN> socket ) { </a> 0
<a> if ( socket == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . socket = socket ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Map < ChannelOption < ? > , Object > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( </a> 0
<a> super . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > T <RARE_TOKEN> ( ChannelOption < T > option ) { </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Boolean . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Boolean . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Boolean . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> T i = ( T ) <RARE_TOKEN> ( ) ; </a> 1
<a> return i ; </a> 1
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> T i = ( T ) <RARE_TOKEN> ( ) ; </a> 1
<a> return i ; </a> 1
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> return super . <RARE_TOKEN> ( option ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > boolean <RARE_TOKEN> ( ChannelOption < T > option , T value ) { </a> 0
<a> <RARE_TOKEN> ( option , value ) ; </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Boolean ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Boolean ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Boolean ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( InetAddress ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( NetworkInterface ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else { </a> 0
<a> return super . <RARE_TOKEN> ( option , value ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean broadcast ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( broadcast ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public InetAddress <RARE_TOKEN> ( ) { </a> 0
<a> if ( socket instanceof <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> return ( ( <RARE_TOKEN> ) socket ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( InetAddress <RARE_TOKEN> ) { </a> 0
<a> if ( socket instanceof <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> ( ( <RARE_TOKEN> ) socket ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( socket instanceof <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> return ( ( <RARE_TOKEN> ) socket ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> if ( socket instanceof <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> ( ( <RARE_TOKEN> ) socket ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public NetworkInterface <RARE_TOKEN> ( ) { </a> 0
<a> if ( socket instanceof <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> return ( ( <RARE_TOKEN> ) socket ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( NetworkInterface networkInterface ) { </a> 0
<a> if ( socket instanceof <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> ( ( <RARE_TOKEN> ) socket ) . <RARE_TOKEN> ( networkInterface ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 1
<a> throw new IllegalArgumentException ( </a> 1
<a> String . format ( <RARE_TOKEN> <RARE_TOKEN> (expected: > <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> if ( socket instanceof <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> return ( ( <RARE_TOKEN> ) socket ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( socket instanceof <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> ( ( <RARE_TOKEN> ) socket ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket ; </a> 0
<a> import static io . netty . channel . ChannelOption . * ; </a> 1
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelOption ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . SocketException ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> socket ; </a> 0
<a> private volatile int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> socket ) { </a> 0
<a> if ( socket == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . socket = socket ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Map < ChannelOption < ? > , Object > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( super . <RARE_TOKEN> ( ) , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > T <RARE_TOKEN> ( ChannelOption < T > option ) { </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Boolean . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> return super . <RARE_TOKEN> ( option ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > boolean <RARE_TOKEN> ( ChannelOption < T > option , T value ) { </a> 0
<a> <RARE_TOKEN> ( option , value ) ; </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Boolean ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else { </a> 0
<a> return super . <RARE_TOKEN> ( option , value ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket ; </a> 0
<a> import static io . netty . channel . ChannelOption . * ; </a> 1
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelOption ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . SocketException ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> socket ; </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> socket ) { </a> 0
<a> if ( socket == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . socket = socket ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Map < ChannelOption < ? > , Object > <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ( </a> 0
<a> super . <RARE_TOKEN> ( ) , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > T <RARE_TOKEN> ( ChannelOption < T > option ) { </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Boolean . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Boolean . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Boolean . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> return super . <RARE_TOKEN> ( option ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public < T > boolean <RARE_TOKEN> ( ChannelOption < T > option , T value ) { </a> 0
<a> <RARE_TOKEN> ( option , value ) ; </a> 0
<a> if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Boolean ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Boolean ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Boolean ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else if ( option == <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 0
<a> } else { </a> 0
<a> return super . <RARE_TOKEN> ( option , value ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( </a> 0
<a> int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> socket . <RARE_TOKEN> ( false , 0 ) ; </a> 0
<a> } else { </a> 0
<a> socket . <RARE_TOKEN> ( true , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket ; </a> 0
<a> public enum <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> , </a> 0
<a> <RARE_TOKEN> </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> <RARE_TOKEN> config ( ) ; </a> 0
<a> @ Override </a> 0
<a> InetSocketAddress localAddress ( ) ; </a> 0
<a> @ Override </a> 0
<a> InetSocketAddress remoteAddress ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> public interface SocketChannel extends Channel { </a> 0
<a> @ Override </a> 0
<a> <RARE_TOKEN> config ( ) ; </a> 0
<a> @ Override </a> 0
<a> InetSocketAddress localAddress ( ) ; </a> 0
<a> @ Override </a> 0
<a> InetSocketAddress remoteAddress ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) ; </a> 0
<a> int <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> ) ; </a> 0
<a> boolean <RARE_TOKEN> ( ) ; </a> 0
<a> void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) ; </a> 0
<a> void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . Channel ; </a> 1
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . EventLoop ; </a> 1
<a> import java . net . <RARE_TOKEN> ; </a> 1
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . net . SocketAddress ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . ScheduledFuture ; </a> 1
<a> import java . util . concurrent . TimeUnit ; </a> 1
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected final <RARE_TOKEN> group ; </a> 0
<a> private final <RARE_TOKEN> ch ; </a> 0
<a> protected ChannelFuture <RARE_TOKEN> ; </a> 0
<a> protected ScheduledFuture < ? > <RARE_TOKEN> ; </a> 1
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> protected <RARE_TOKEN> ( Channel parent , Integer id , <RARE_TOKEN> group , <RARE_TOKEN> ch ) { </a> 0
<a> super ( parent , id ) ; </a> 1
<a> this . ch = ch ; </a> 1
<a> this . group = group ; </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> public InetSocketAddress localAddress ( ) { </a> 0
<a> return ( InetSocketAddress ) super . localAddress ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public InetSocketAddress remoteAddress ( ) { </a> 0
<a> return ( InetSocketAddress ) super . remoteAddress ( ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> javaChannel ( ) { </a> 1
<a> return ch ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean isOpen ( ) { </a> 1
<a> return ch . isOpen ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected Runnable <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> if ( ( ( <RARE_TOKEN> ) eventLoop ( ) ) . parent ( ) != group ) { </a> 0
<a> throw new ChannelException ( </a> 0
<a> getClass ( ) . getSimpleName ( ) + " must be <RARE_TOKEN> to the " + </a> 0
<a> <RARE_TOKEN> . class . getSimpleName ( ) + " <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> in the <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( EventLoop loop ) { </a> 1
<a> return loop instanceof <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> protected abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public void connect ( final SocketAddress remoteAddress , </a> 1
<a> final SocketAddress localAddress , final ChannelFuture future ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( future ) ) { </a> 0
<a> return ; </a> 1
<a> } </a> 1
<a> try { </a> 1
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = future ; </a> 0
<a> <RARE_TOKEN> ( remoteAddress , localAddress , future ) ; </a> 0
<a> int <RARE_TOKEN> = config ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> > 0 ) { </a> 1
<a> <RARE_TOKEN> = eventLoop ( ) . schedule ( new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> ChannelFuture <RARE_TOKEN> = <RARE_TOKEN> . this . <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null && </a> 1
<a> <RARE_TOKEN> . setFailure ( <RARE_TOKEN> ) ) { </a> 0
<a> pipeline ( ) . fireExceptionCaught ( <RARE_TOKEN> ) ; </a> 1
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 1
<a> } </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> future . setFailure ( t ) ; </a> 0
<a> pipeline ( ) . fireExceptionCaught ( t ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } else { </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> connect ( remoteAddress , localAddress , future ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> protected final void <RARE_TOKEN> ( Throwable t ) { </a> 1
<a> <RARE_TOKEN> . setFailure ( t ) ; </a> 0
<a> pipeline ( ) . fireExceptionCaught ( t ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> protected final void <RARE_TOKEN> ( ) { </a> 1
<a> assert eventLoop ( ) . inEventLoop ( ) ; </a> 1
<a> assert <RARE_TOKEN> != null ; </a> 0
<a> try { </a> 1
<a> boolean <RARE_TOKEN> = isActive ( ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> && isActive ( ) ) { </a> 1
<a> pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> <RARE_TOKEN> . setFailure ( t ) ; </a> 0
<a> pipeline ( ) . fireExceptionCaught ( t ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } finally { </a> 1
<a> <RARE_TOKEN> . cancel ( false ) ; </a> 1
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> protected abstract void <RARE_TOKEN> ( SocketAddress remoteAddress , </a> 1
<a> SocketAddress localAddress , ChannelFuture <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . Channel ; </a> 1
<a> import io . netty . channel . EventLoop ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> abstract class <RARE_TOKEN> < V , <RARE_TOKEN> extends Channel > implements <RARE_TOKEN> < V , <RARE_TOKEN> > { </a> 0
<a> protected abstract void <RARE_TOKEN> ( V result , <RARE_TOKEN> channel ) ; </a> 1
<a> protected abstract void <RARE_TOKEN> ( Throwable <RARE_TOKEN> , <RARE_TOKEN> channel ) ; </a> 1
<a> private static final int <RARE_TOKEN> = 4 ; </a> 0
<a> private static final <RARE_TOKEN> < Integer > <RARE_TOKEN> = new <RARE_TOKEN> < Integer > ( ) { </a> 0
<a> @ Override </a> 0
<a> protected Integer <RARE_TOKEN> ( ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 1
<a> public final void <RARE_TOKEN> ( final V result , final <RARE_TOKEN> channel ) { </a> 1
<a> EventLoop loop = channel . eventLoop ( ) ; </a> 1
<a> if ( loop . inEventLoop ( ) ) { </a> 1
<a> Integer d = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( d < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . set ( d + 1 ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( result , channel ) ; </a> 1
<a> } finally { </a> 0
<a> <RARE_TOKEN> . set ( d ) ; </a> 0
<a> } </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> loop . execute ( new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> ( result , channel ) ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public final void <RARE_TOKEN> ( final Throwable <RARE_TOKEN> , final <RARE_TOKEN> channel ) { </a> 1
<a> EventLoop loop = channel . eventLoop ( ) ; </a> 1
<a> if ( loop . inEventLoop ( ) ) { </a> 1
<a> Integer d = <RARE_TOKEN> . get ( ) ; </a> 0
<a> if ( d < <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . set ( d + 1 ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , channel ) ; </a> 1
<a> } finally { </a> 0
<a> <RARE_TOKEN> . set ( d ) ; </a> 0
<a> } </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> loop . execute ( new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> , channel ) ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . ThreadFactory ; </a> 1
<a> final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> parent , ThreadFactory threadFactory , <RARE_TOKEN> scheduler ) { </a> 0
<a> super ( parent , threadFactory , scheduler ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void run ( ) { </a> 1
<a> for ( ; ; ) { </a> 1
<a> Runnable task ; </a> 1
<a> try { </a> 1
<a> task = <RARE_TOKEN> ( ) ; </a> 1
<a> task . run ( ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> task = <RARE_TOKEN> ( ) ; </a> 1
<a> if ( task == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> task . run ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( boolean inEventLoop ) { </a> 1
<a> if ( ! inEventLoop && <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . EventExecutor ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 1
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Collections ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . List ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 1
<a> import java . util . concurrent . TimeUnit ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private static final <RARE_TOKEN> < Class < ? > , <RARE_TOKEN> [ ] > <RARE_TOKEN> = new ConcurrentHashMap < Class < ? > , <RARE_TOKEN> [ ] > ( ) ; </a> 0
<a> private static final <RARE_TOKEN> [ ] <RARE_TOKEN> = new <RARE_TOKEN> [ 0 ] ; </a> 0
<a> final <RARE_TOKEN> group ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 1
<a> this ( 0 ) ; </a> 0
<a> } </a> 1
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 1
<a> this ( <RARE_TOKEN> , null ) ; </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , ThreadFactory threadFactory ) { </a> 1
<a> super ( <RARE_TOKEN> , threadFactory ) ; </a> 1
<a> try { </a> 1
<a> group = <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } catch ( IOException e ) { </a> 1
<a> throw new <RARE_TOKEN> ( "Failed to create an <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected EventExecutor <RARE_TOKEN> ( </a> 1
<a> ThreadFactory threadFactory , <RARE_TOKEN> scheduler , Object ... args ) throws Exception { </a> 0
<a> return new <RARE_TOKEN> ( this , threadFactory , scheduler ) ; </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( Runnable command ) { </a> 0
<a> <RARE_TOKEN> ch = null ; </a> 0
<a> try { </a> 0
<a> ch = <RARE_TOKEN> ( command ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> } </a> 0
<a> EventExecutor l ; </a> 0
<a> if ( ch != null ) { </a> 0
<a> l = ch . eventLoop ( ) ; </a> 0
<a> } else { </a> 0
<a> l = next ( ) ; </a> 0
<a> } </a> 0
<a> if ( l . <RARE_TOKEN> ( ) ) { </a> 0
<a> command . run ( ) ; </a> 0
<a> } else { </a> 0
<a> l . execute ( command ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static <RARE_TOKEN> <RARE_TOKEN> ( Runnable command ) throws Exception { </a> 0
<a> Class < ? > <RARE_TOKEN> = command . getClass ( ) ; </a> 1
<a> <RARE_TOKEN> [ ] fields = <RARE_TOKEN> . get ( <RARE_TOKEN> ) ; </a> 1
<a> if ( fields == null ) { </a> 1
<a> try { </a> 1
<a> fields = <RARE_TOKEN> ( command , new <RARE_TOKEN> < <RARE_TOKEN> > ( 2 ) ) ; </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> } </a> 0
<a> if ( fields == null ) { </a> 0
<a> fields = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> . put ( <RARE_TOKEN> , fields ) ; </a> 0
<a> } </a> 0
<a> if ( fields == <RARE_TOKEN> ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> final int <RARE_TOKEN> = fields . length - 1 ; </a> 1
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 1
<a> command = ( Runnable ) fields [ i ] . get ( command ) ; </a> 0
<a> } </a> 0
<a> return ( <RARE_TOKEN> ) fields [ <RARE_TOKEN> ] . get ( command ) ; </a> 0
<a> } </a> 1
<a> private static <RARE_TOKEN> [ ] <RARE_TOKEN> ( Runnable command , <RARE_TOKEN> < <RARE_TOKEN> > fields ) throws Exception { </a> 0
<a> Class < ? > <RARE_TOKEN> = command . getClass ( ) ; </a> 1
<a> for ( <RARE_TOKEN> f : <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( f . getType ( ) == Runnable . class ) { </a> 0
<a> f . <RARE_TOKEN> ( true ) ; </a> 0
<a> fields . addLast ( f ) ; </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> [ ] <RARE_TOKEN> = <RARE_TOKEN> ( ( Runnable ) f . get ( command ) , fields ) ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> } finally { </a> 1
<a> fields . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> if ( f . getType ( ) == Object . class ) { </a> 0
<a> f . <RARE_TOKEN> ( true ) ; </a> 0
<a> fields . addLast ( f ) ; </a> 1
<a> try { </a> 1
<a> Object <RARE_TOKEN> = f . get ( command ) ; </a> 0
<a> if ( <RARE_TOKEN> instanceof <RARE_TOKEN> ) { </a> 0
<a> return fields . <RARE_TOKEN> ( new <RARE_TOKEN> [ fields . size ( ) ] ) ; </a> 1
<a> } </a> 1
<a> } finally { </a> 1
<a> fields . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void shutdown ( ) { </a> 0
<a> <RARE_TOKEN> . this . shutdown ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public List < Runnable > <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> . this . shutdown ( ) ; </a> 0
<a> return Collections . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> . this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> . this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) throws InterruptedException { </a> 0
<a> return <RARE_TOKEN> . this . <RARE_TOKEN> ( timeout , unit ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void execute ( Runnable command ) { </a> 0
<a> Class < ? extends Runnable > <RARE_TOKEN> = command . getClass ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . getName ( ) . startsWith ( <RARE_TOKEN> ) ) { </a> 0
<a> <RARE_TOKEN> ( command ) ; </a> 0
<a> } else { </a> 0
<a> next ( ) . execute ( command ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ChannelBufType ; </a> 1
<a> import io . netty . channel . ChannelException ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelMetadata ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 1
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . io . IOException ; </a> 1
<a> import java . net . SocketAddress ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> private static final ChannelMetadata <RARE_TOKEN> = new ChannelMetadata ( ChannelBufType . <RARE_TOKEN> , false ) ; </a> 1
<a> private static final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> private static final InternalLogger logger = </a> 1
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 1
<a> private final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private final <RARE_TOKEN> config ; </a> 1
<a> private boolean closed ; </a> 1
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( ) ; </a> 1
<a> private final Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> private static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> group ) { </a> 1
<a> try { </a> 1
<a> return <RARE_TOKEN> . open ( group ) ; </a> 1
<a> } catch ( IOException e ) { </a> 1
<a> throw new ChannelException ( "Failed to open a <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public <RARE_TOKEN> ( <RARE_TOKEN> group ) { </a> 0
<a> this ( group , group ) ; </a> 0
<a> } </a> 1
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( null , null , <RARE_TOKEN> , <RARE_TOKEN> ( <RARE_TOKEN> . group ) ) ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> config = new <RARE_TOKEN> ( javaChannel ( ) ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> protected <RARE_TOKEN> javaChannel ( ) { </a> 1
<a> return ( <RARE_TOKEN> ) super . javaChannel ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean isActive ( ) { </a> 1
<a> return javaChannel ( ) . isOpen ( ) && <RARE_TOKEN> ( ) != null ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelMetadata <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 1
<a> return javaChannel ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } catch ( IOException e ) { </a> 1
<a> throw new ChannelException ( e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 1
<a> return null ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( SocketAddress localAddress ) throws Exception { </a> 1
<a> <RARE_TOKEN> ch = javaChannel ( ) ; </a> 1
<a> ch . bind ( localAddress ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> javaChannel ( ) . <RARE_TOKEN> ( this , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> if ( ! closed ) { </a> 1
<a> closed = true ; </a> 1
<a> javaChannel ( ) . close ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected boolean <RARE_TOKEN> ( ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( </a> 1
<a> SocketAddress remoteAddress , SocketAddress localAddress , ChannelFuture future ) { </a> 0
<a> future . setFailure ( new UnsupportedOperationException ( ) ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected Runnable <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> return super . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> private static final class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> < <RARE_TOKEN> , <RARE_TOKEN> > { </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( <RARE_TOKEN> ch , <RARE_TOKEN> channel ) { </a> 1
<a> channel . <RARE_TOKEN> ( ) ; </a> 1
<a> channel . pipeline ( ) . <RARE_TOKEN> ( ) . add ( </a> 1
<a> new <RARE_TOKEN> ( channel , null , channel . <RARE_TOKEN> , ch ) ) ; </a> 0
<a> if ( ! channel . <RARE_TOKEN> . get ( ) ) { </a> 1
<a> channel . pipeline ( ) . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( Throwable t , <RARE_TOKEN> channel ) { </a> 1
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> if ( t instanceof <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> channel . closed = true ; </a> 1
<a> } </a> 1
<a> if ( channel . isOpen ( ) && ! <RARE_TOKEN> ) { </a> 1
<a> logger . warn ( "Failed to create a new channel from an <RARE_TOKEN> <RARE_TOKEN> , t ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public <RARE_TOKEN> config ( ) { </a> 1
<a> return config ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> . set ( true ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( true , false ) ) { </a> 1
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } else { </a> 1
<a> eventLoop ( ) . execute ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import static io . netty . channel . ChannelOption . * ; </a> 1
<a> import io . netty . channel . ChannelException ; </a> 1
<a> import io . netty . channel . ChannelOption ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 1
<a> import io . netty . util . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 1
<a> import java . net . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . util . Map ; </a> 1
<a> final class <RARE_TOKEN> extends <RARE_TOKEN> </a> 1
<a> implements <RARE_TOKEN> { </a> 1
<a> private final <RARE_TOKEN> channel ; </a> 0
<a> private volatile int <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> channel ) { </a> 0
<a> this . channel = channel ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public Map < ChannelOption < ? > , Object > <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ( super . <RARE_TOKEN> ( ) , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> public < T > T <RARE_TOKEN> ( ChannelOption < T > option ) { </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Boolean . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> return super . <RARE_TOKEN> ( option ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public < T > boolean <RARE_TOKEN> ( ChannelOption < T > option , T value ) { </a> 1
<a> <RARE_TOKEN> ( option , value ) ; </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 1
<a> } else if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Boolean ) value ) ; </a> 1
<a> } else if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 1
<a> } else { </a> 1
<a> return super . <RARE_TOKEN> ( option , value ) ; </a> 1
<a> } </a> 1
<a> return true ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 0
<a> return channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> throw new ChannelException ( e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 0
<a> return channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> throw new ChannelException ( e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 1
<a> import io . netty . buffer . ChannelBufType ; </a> 1
<a> import io . netty . channel . ChannelException ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 1
<a> import io . netty . channel . ChannelMetadata ; </a> 1
<a> import io . netty . channel . ChannelPipeline ; </a> 1
<a> import io . netty . channel . socket . SocketChannel ; </a> 1
<a> import java . io . IOException ; </a> 1
<a> import java . net . InetSocketAddress ; </a> 1
<a> import java . net . SocketAddress ; </a> 1
<a> import java . nio . ByteBuffer ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . TimeUnit ; </a> 1
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 1
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements SocketChannel { </a> 1
<a> private static final ChannelMetadata <RARE_TOKEN> = new ChannelMetadata ( ChannelBufType . <RARE_TOKEN> , false ) ; </a> 1
<a> private static final <RARE_TOKEN> < Void , <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> private static final <RARE_TOKEN> < Integer , <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < Integer > ( ) ; </a> 1
<a> private static final <RARE_TOKEN> < Integer , <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < Integer > ( ) ; </a> 1
<a> private static final <RARE_TOKEN> < Long , <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < Long > ( ) ; </a> 1
<a> private static final <RARE_TOKEN> < Long , <RARE_TOKEN> > <RARE_TOKEN> = new <RARE_TOKEN> < Long > ( ) ; </a> 1
<a> private static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> group ) { </a> 1
<a> try { </a> 1
<a> return <RARE_TOKEN> . open ( group ) ; </a> 1
<a> } catch ( IOException e ) { </a> 1
<a> throw new ChannelException ( "Failed to open a <RARE_TOKEN> , e ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> private final <RARE_TOKEN> config ; </a> 1
<a> private boolean <RARE_TOKEN> ; </a> 0
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( ) ; </a> 1
<a> private final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( ) ; </a> 0
<a> private final Runnable <RARE_TOKEN> = new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> . this . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> } ; </a> 1
<a> public <RARE_TOKEN> ( <RARE_TOKEN> eventLoop ) { </a> 0
<a> this ( null , null , eventLoop , <RARE_TOKEN> ( eventLoop . group ) ) ; </a> 0
<a> } </a> 1
<a> <RARE_TOKEN> ( </a> 1
<a> <RARE_TOKEN> parent , Integer id , </a> 0
<a> <RARE_TOKEN> eventLoop , <RARE_TOKEN> ch ) { </a> 0
<a> super ( parent , id , eventLoop , ch ) ; </a> 0
<a> config = new <RARE_TOKEN> ( ch ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean isActive ( ) { </a> 1
<a> return javaChannel ( ) . isOpen ( ) && <RARE_TOKEN> ( ) != null ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> protected <RARE_TOKEN> javaChannel ( ) { </a> 1
<a> return ( <RARE_TOKEN> ) super . javaChannel ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelMetadata <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( SocketAddress remoteAddress , SocketAddress localAddress , final ChannelFuture future ) { </a> 0
<a> if ( localAddress != null ) { </a> 1
<a> try { </a> 1
<a> javaChannel ( ) . bind ( localAddress ) ; </a> 1
<a> } catch ( IOException e ) { </a> 1
<a> future . setFailure ( e ) ; </a> 0
<a> return ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> javaChannel ( ) . connect ( remoteAddress , this , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected InetSocketAddress <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 1
<a> return ( InetSocketAddress ) javaChannel ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } catch ( IOException e ) { </a> 1
<a> return null ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected InetSocketAddress <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 1
<a> return ( InetSocketAddress ) javaChannel ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } catch ( IOException e ) { </a> 1
<a> return null ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected Runnable <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> super . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( remoteAddress ( ) == null ) { </a> 1
<a> return null ; </a> 1
<a> } </a> 1
<a> return new Runnable ( ) { </a> 1
<a> @ Override </a> 1
<a> public void run ( ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } ; </a> 1
<a> } </a> 1
<a> private static void <RARE_TOKEN> ( ByteBuf byteBuf ) { </a> 0
<a> final int writerIndex = byteBuf . writerIndex ( ) ; </a> 0
<a> final int capacity = byteBuf . capacity ( ) ; </a> 0
<a> if ( capacity != writerIndex ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> final int maxCapacity = byteBuf . maxCapacity ( ) ; </a> 0
<a> if ( capacity == maxCapacity ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> if ( writerIndex + <RARE_TOKEN> > maxCapacity ) { </a> 0
<a> byteBuf . capacity ( maxCapacity ) ; </a> 0
<a> } else { </a> 0
<a> byteBuf . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( SocketAddress localAddress ) throws Exception { </a> 1
<a> javaChannel ( ) . bind ( localAddress ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> javaChannel ( ) . close ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected boolean <RARE_TOKEN> ( ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( ByteBuf buf ) throws Exception { </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> return ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> = true ; </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( buf . readable ( ) ) { </a> 0
<a> if ( buf . <RARE_TOKEN> ( ) ) { </a> 1
<a> ByteBuffer [ ] buffers = buf . nioBuffers ( buf . readerIndex ( ) , buf . readableBytes ( ) ) ; </a> 1
<a> javaChannel ( ) . write ( buffers , 0 , buffers . length , config . <RARE_TOKEN> ( ) , </a> 0
<a> TimeUnit . MILLISECONDS , <RARE_TOKEN> . this , <RARE_TOKEN> ) ; </a> 1
<a> } else { </a> 1
<a> javaChannel ( ) . write ( buf . nioBuffer ( ) , config . <RARE_TOKEN> ( ) , TimeUnit . MILLISECONDS , </a> 0
<a> this , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> } else { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> private void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> return ; </a> 1
<a> } </a> 1
<a> if ( ! <RARE_TOKEN> . <RARE_TOKEN> ( false , true ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> ByteBuf byteBuf = pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( ! byteBuf . readable ( ) ) { </a> 0
<a> byteBuf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( byteBuf ) ; </a> 1
<a> if ( byteBuf . <RARE_TOKEN> ( ) ) { </a> 1
<a> ByteBuffer [ ] buffers = byteBuf . nioBuffers ( byteBuf . writerIndex ( ) , byteBuf . <RARE_TOKEN> ( ) ) ; </a> 1
<a> javaChannel ( ) . read ( buffers , 0 , buffers . length , config . <RARE_TOKEN> ( ) , </a> 0
<a> TimeUnit . MILLISECONDS , <RARE_TOKEN> . this , <RARE_TOKEN> ) ; </a> 1
<a> } else { </a> 1
<a> ByteBuffer buffer = byteBuf . nioBuffer ( byteBuf . writerIndex ( ) , byteBuf . <RARE_TOKEN> ( ) ) ; </a> 1
<a> javaChannel ( ) . read ( buffer , config . <RARE_TOKEN> ( ) , TimeUnit . MILLISECONDS , </a> 0
<a> <RARE_TOKEN> . this , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> private static final class <RARE_TOKEN> < T extends <RARE_TOKEN> > extends <RARE_TOKEN> < T , <RARE_TOKEN> > { </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( T result , <RARE_TOKEN> channel ) { </a> 1
<a> ByteBuf buf = channel . unsafe ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> int <RARE_TOKEN> = result . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> > 0 ) { </a> 1
<a> buf . readerIndex ( buf . readerIndex ( ) + <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> boolean <RARE_TOKEN> = ! buf . readable ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = channel . <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> channel . <RARE_TOKEN> = false ; </a> 0
<a> if ( ! channel . isActive ( ) ) { </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> if ( buf . readable ( ) ) { </a> 0
<a> try { </a> 0
<a> channel . <RARE_TOKEN> ( buf ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> <RARE_TOKEN> ( e , channel ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( Throwable cause , <RARE_TOKEN> channel ) { </a> 1
<a> channel . <RARE_TOKEN> . <RARE_TOKEN> ( cause ) ; </a> 1
<a> channel . pipeline ( ) . fireExceptionCaught ( cause ) ; </a> 0
<a> if ( cause instanceof <RARE_TOKEN> ) { </a> 1
<a> channel . unsafe ( ) . close ( channel . unsafe ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> ByteBuf buf = channel . unsafe ( ) . <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! buf . readable ( ) ) { </a> 0
<a> buf . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> channel . <RARE_TOKEN> = false ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> private static final class <RARE_TOKEN> < T extends <RARE_TOKEN> > extends <RARE_TOKEN> < T , <RARE_TOKEN> > { </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( T result , <RARE_TOKEN> channel ) { </a> 1
<a> final ChannelPipeline pipeline = channel . pipeline ( ) ; </a> 0
<a> final ByteBuf byteBuf = pipeline . <RARE_TOKEN> ( ) ; </a> 1
<a> boolean closed = false ; </a> 1
<a> boolean read = false ; </a> 1
<a> try { </a> 1
<a> int <RARE_TOKEN> = result . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> > 0 ) { </a> 1
<a> byteBuf . writerIndex ( byteBuf . writerIndex ( ) + <RARE_TOKEN> ) ; </a> 1
<a> read = true ; </a> 1
<a> } else if ( <RARE_TOKEN> < 0 ) { </a> 1
<a> closed = true ; </a> 1
<a> } </a> 1
<a> } catch ( Throwable t ) { </a> 1
<a> if ( read ) { </a> 1
<a> read = false ; </a> 1
<a> if ( ! channel . <RARE_TOKEN> . get ( ) ) { </a> 1
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> if ( ! ( t instanceof <RARE_TOKEN> ) ) { </a> 1
<a> pipeline . fireExceptionCaught ( t ) ; </a> 1
<a> if ( t instanceof IOException ) { </a> 1
<a> channel . unsafe ( ) . close ( channel . unsafe ( ) . <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } finally { </a> 1
<a> channel . <RARE_TOKEN> . set ( false ) ; </a> 0
<a> if ( read ) { </a> 1
<a> if ( ! channel . <RARE_TOKEN> . get ( ) ) { </a> 1
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> if ( closed && channel . isOpen ( ) ) { </a> 0
<a> channel . unsafe ( ) . close ( channel . unsafe ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 1
<a> channel . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( Throwable t , <RARE_TOKEN> channel ) { </a> 1
<a> if ( t instanceof <RARE_TOKEN> ) { </a> 1
<a> return ; </a> 1
<a> } </a> 1
<a> channel . pipeline ( ) . fireExceptionCaught ( t ) ; </a> 1
<a> if ( t instanceof IOException || t instanceof <RARE_TOKEN> ) { </a> 1
<a> channel . unsafe ( ) . close ( channel . unsafe ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } else { </a> 1
<a> channel . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> private static final class <RARE_TOKEN> extends <RARE_TOKEN> < Void , <RARE_TOKEN> > { </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( Void result , <RARE_TOKEN> channel ) { </a> 1
<a> ( ( <RARE_TOKEN> ) channel . unsafe ( ) ) . <RARE_TOKEN> ( ) ; </a> 1
<a> channel . pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> channel . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( Throwable <RARE_TOKEN> , <RARE_TOKEN> channel ) { </a> 1
<a> ( ( <RARE_TOKEN> ) channel . unsafe ( ) ) . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public <RARE_TOKEN> config ( ) { </a> 0
<a> return config ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> . set ( true ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( true , false ) ) { </a> 1
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } else { </a> 1
<a> eventLoop ( ) . execute ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import static io . netty . channel . ChannelOption . * ; </a> 1
<a> import io . netty . channel . ChannelException ; </a> 1
<a> import io . netty . channel . ChannelOption ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 1
<a> import java . io . IOException ; </a> 1
<a> import java . net . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . Map ; </a> 0
<a> final class <RARE_TOKEN> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private final <RARE_TOKEN> channel ; </a> 0
<a> private volatile long <RARE_TOKEN> ; </a> 1
<a> private volatile long <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> channel ) { </a> 0
<a> if ( channel == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . channel = channel ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public Map < ChannelOption < ? > , Object > <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ( </a> 1
<a> super . <RARE_TOKEN> ( ) , </a> 1
<a> <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> , </a> 1
<a> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> public < T > T <RARE_TOKEN> ( ChannelOption < T > option ) { </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Boolean . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Boolean . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Boolean . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Integer . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Long . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> return ( T ) Long . valueOf ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> return super . <RARE_TOKEN> ( option ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public < T > boolean <RARE_TOKEN> ( ChannelOption < T > option , T value ) { </a> 1
<a> <RARE_TOKEN> ( option , value ) ; </a> 1
<a> if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 1
<a> } else if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 1
<a> } else if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Boolean ) value ) ; </a> 1
<a> } else if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Boolean ) value ) ; </a> 1
<a> } else if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Boolean ) value ) ; </a> 1
<a> } else if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 1
<a> } else if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Integer ) value ) ; </a> 1
<a> } else if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Long ) value ) ; </a> 1
<a> } else if ( option == <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> ( ( Long ) value ) ; </a> 1
<a> } else { </a> 1
<a> return super . <RARE_TOKEN> ( option , value ) ; </a> 1
<a> } </a> 1
<a> return true ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 0
<a> return channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 0
<a> return channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 0
<a> return channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public int <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 0
<a> return channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 0
<a> return channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 0
<a> return channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> throw new ChannelException ( e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 0
<a> return channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( </a> 0
<a> int <RARE_TOKEN> , int <RARE_TOKEN> , int <RARE_TOKEN> ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> try { </a> 1
<a> channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> channel . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 1
<a> throw new ChannelException ( e ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> public void <RARE_TOKEN> ( long <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> public void <RARE_TOKEN> ( long <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 1
<a> throw new IllegalArgumentException ( <RARE_TOKEN> " + <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> public long <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> public long <RARE_TOKEN> ( ) { </a> 1
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . SelectionKey ; </a> 0
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected <RARE_TOKEN> ( </a> 0
<a> Channel parent , Integer id , <RARE_TOKEN> ch ) { </a> 0
<a> super ( parent , id , ch , SelectionKey . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected abstract <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 1
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 0
<a> public void read ( ) { </a> 0
<a> assert eventLoop ( ) . inEventLoop ( ) ; </a> 0
<a> final ChannelPipeline pipeline = pipeline ( ) ; </a> 0
<a> final ByteBuf byteBuf = pipeline . <RARE_TOKEN> ( ) ; </a> 1
<a> boolean closed = false ; </a> 0
<a> boolean read = false ; </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> ( byteBuf ) ; </a> 1
<a> loop : for ( ; ; ) { </a> 1
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( byteBuf ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 1
<a> read = true ; </a> 1
<a> } else if ( <RARE_TOKEN> < 0 ) { </a> 1
<a> closed = true ; </a> 0
<a> break ; </a> 1
<a> } </a> 1
<a> switch ( <RARE_TOKEN> ( byteBuf ) ) { </a> 1
<a> case 0 : </a> 1
<a> break loop ; </a> 1
<a> case 1 : </a> 1
<a> break ; </a> 1
<a> case 2 : </a> 1
<a> if ( read ) { </a> 0
<a> read = false ; </a> 0
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 0
<a> if ( ! byteBuf . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new IllegalStateException ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> handler <RARE_TOKEN> buffer is <RARE_TOKEN> must <RARE_TOKEN> <RARE_TOKEN> " + </a> 1
<a> <RARE_TOKEN> one <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( read ) { </a> 0
<a> read = false ; </a> 0
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 0
<a> } </a> 0
<a> pipeline ( ) . fireExceptionCaught ( t ) ; </a> 0
<a> if ( t instanceof IOException ) { </a> 1
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> } finally { </a> 1
<a> if ( read ) { </a> 1
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> if ( closed && isOpen ( ) ) { </a> 0
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ByteBuf buf ) throws Exception { </a> 1
<a> if ( ! buf . readable ( ) ) { </a> 0
<a> buf . clear ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> for ( int i = config ( ) . <RARE_TOKEN> ( ) - 1 ; i >= 0 ; i -- ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( buf , i == 0 ) ; </a> 1
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( ! buf . readable ( ) ) { </a> 0
<a> buf . clear ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected abstract int <RARE_TOKEN> ( ByteBuf buf ) throws Exception ; </a> 0
<a> protected abstract int <RARE_TOKEN> ( ByteBuf buf , boolean <RARE_TOKEN> ) throws Exception ; </a> 0
<a> private static int <RARE_TOKEN> ( ByteBuf byteBuf ) { </a> 0
<a> final int writerIndex = byteBuf . writerIndex ( ) ; </a> 1
<a> final int capacity = byteBuf . capacity ( ) ; </a> 1
<a> if ( capacity != writerIndex ) { </a> 1
<a> return 0 ; </a> 1
<a> } </a> 1
<a> final int maxCapacity = byteBuf . maxCapacity ( ) ; </a> 1
<a> if ( capacity == maxCapacity ) { </a> 1
<a> return 2 ; </a> 1
<a> } </a> 1
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> if ( writerIndex + <RARE_TOKEN> > maxCapacity ) { </a> 0
<a> byteBuf . capacity ( maxCapacity ) ; </a> 1
<a> } else { </a> 1
<a> byteBuf . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> return 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . EventLoop ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . SelectionKey ; </a> 0
<a> import java . util . concurrent . ScheduledFuture ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = </a> 0
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final <RARE_TOKEN> ch ; </a> 0
<a> private final int <RARE_TOKEN> ; </a> 1
<a> private volatile SelectionKey <RARE_TOKEN> ; </a> 1
<a> private ChannelFuture <RARE_TOKEN> ; </a> 0
<a> private ScheduledFuture < ? > <RARE_TOKEN> ; </a> 0
<a> private <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> protected <RARE_TOKEN> ( </a> 0
<a> Channel parent , Integer id , <RARE_TOKEN> ch , int <RARE_TOKEN> ) { </a> 1
<a> super ( parent , id ) ; </a> 0
<a> this . ch = ch ; </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> try { </a> 0
<a> ch . <RARE_TOKEN> ( false ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> try { </a> 0
<a> ch . close ( ) ; </a> 0
<a> } catch ( IOException <RARE_TOKEN> ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . warn ( </a> 0
<a> "Failed to close a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new ChannelException ( "Failed to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isOpen ( ) { </a> 0
<a> return ch . isOpen ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public InetSocketAddress localAddress ( ) { </a> 0
<a> return ( InetSocketAddress ) super . localAddress ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public InetSocketAddress remoteAddress ( ) { </a> 0
<a> return ( InetSocketAddress ) super . remoteAddress ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> unsafe ( ) { </a> 0
<a> return ( <RARE_TOKEN> ) super . unsafe ( ) ; </a> 0
<a> } </a> 0
<a> protected <RARE_TOKEN> javaChannel ( ) { </a> 0
<a> return ch ; </a> 0
<a> } </a> 0
<a> protected SelectionKey <RARE_TOKEN> ( ) { </a> 0
<a> assert <RARE_TOKEN> != null ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> java . nio . channels . Channel ch ( ) ; </a> 0
<a> void <RARE_TOKEN> ( ) ; </a> 0
<a> void read ( ) ; </a> 0
<a> } </a> 0
<a> protected abstract class <RARE_TOKEN> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public java . nio . channels . Channel ch ( ) { </a> 0
<a> return javaChannel ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void connect ( </a> 0
<a> final SocketAddress remoteAddress , final SocketAddress localAddress , final ChannelFuture future ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( future ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> throw new IllegalStateException ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> boolean <RARE_TOKEN> = isActive ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ( remoteAddress , localAddress ) ) { </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> && isActive ( ) ) { </a> 0
<a> pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = future ; </a> 0
<a> int <RARE_TOKEN> = config ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> <RARE_TOKEN> = eventLoop ( ) . schedule ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = new <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> ChannelFuture <RARE_TOKEN> = <RARE_TOKEN> . this . <RARE_TOKEN> ; </a> 0
<a> if ( <RARE_TOKEN> != null && <RARE_TOKEN> . setFailure ( <RARE_TOKEN> ) ) { </a> 0
<a> pipeline ( ) . fireExceptionCaught ( <RARE_TOKEN> ) ; </a> 0
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> future . setFailure ( t ) ; </a> 0
<a> pipeline ( ) . fireExceptionCaught ( t ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> connect ( remoteAddress , localAddress , future ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> assert eventLoop ( ) . inEventLoop ( ) ; </a> 0
<a> assert <RARE_TOKEN> != null ; </a> 0
<a> try { </a> 0
<a> boolean <RARE_TOKEN> = isActive ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> && isActive ( ) ) { </a> 0
<a> pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> <RARE_TOKEN> . setFailure ( t ) ; </a> 0
<a> pipeline ( ) . fireExceptionCaught ( t ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } finally { </a> 0
<a> <RARE_TOKEN> . cancel ( false ) ; </a> 0
<a> <RARE_TOKEN> = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( EventLoop loop ) { </a> 0
<a> return loop instanceof <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> SelectionKey <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) && ( <RARE_TOKEN> . <RARE_TOKEN> ( ) & SelectionKey . <RARE_TOKEN> ) != 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected Runnable <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> <RARE_TOKEN> loop = ( <RARE_TOKEN> ) eventLoop ( ) ; </a> 1
<a> <RARE_TOKEN> = javaChannel ( ) . <RARE_TOKEN> ( </a> 1
<a> loop . <RARE_TOKEN> , isActive ( ) ? <RARE_TOKEN> : 0 , this ) ; </a> 1
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> ( ( <RARE_TOKEN> ) eventLoop ( ) ) . cancel ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> protected abstract boolean <RARE_TOKEN> ( SocketAddress remoteAddress , SocketAddress localAddress ) throws Exception ; </a> 0
<a> protected abstract void <RARE_TOKEN> ( ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected <RARE_TOKEN> ( </a> 0
<a> Channel parent , Integer id , <RARE_TOKEN> ch , int <RARE_TOKEN> ) { </a> 1
<a> super ( parent , id , ch , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected abstract <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 1
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 0
<a> public void read ( ) { </a> 0
<a> assert eventLoop ( ) . inEventLoop ( ) ; </a> 0
<a> final ChannelPipeline pipeline = pipeline ( ) ; </a> 0
<a> final MessageBuf < Object > <RARE_TOKEN> = pipeline . <RARE_TOKEN> ( ) ; </a> 1
<a> boolean closed = false ; </a> 0
<a> boolean read = false ; </a> 1
<a> try { </a> 0
<a> for ( ; ; ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> read = true ; </a> 0
<a> } else if ( <RARE_TOKEN> == 0 ) { </a> 0
<a> break ; </a> 0
<a> } else if ( <RARE_TOKEN> < 0 ) { </a> 1
<a> closed = true ; </a> 0
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( read ) { </a> 0
<a> read = false ; </a> 0
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 0
<a> } </a> 0
<a> pipeline ( ) . fireExceptionCaught ( t ) ; </a> 1
<a> if ( t instanceof IOException ) { </a> 1
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> } finally { </a> 1
<a> if ( read ) { </a> 1
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> if ( closed && isOpen ( ) ) { </a> 1
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception { </a> 1
<a> final int <RARE_TOKEN> = config ( ) . <RARE_TOKEN> ( ) - 1 ; </a> 0
<a> while ( ! buf . isEmpty ( ) ) { </a> 1
<a> boolean <RARE_TOKEN> = false ; </a> 1
<a> for ( int i = <RARE_TOKEN> ; i >= 0 ; i -- ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( buf , i == 0 ) ; </a> 1
<a> if ( <RARE_TOKEN> > 0 ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> if ( ! <RARE_TOKEN> ) { </a> 1
<a> break ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected abstract int <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception ; </a> 1
<a> protected abstract int <RARE_TOKEN> ( MessageBuf < Object > buf , boolean <RARE_TOKEN> ) throws Exception ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . ChannelBufType ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelMetadata ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> ; </a> 1
<a> import java . io . IOException ; </a> 0
<a> import java . net . InetAddress ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . net . NetworkInterface ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> import java . net . SocketException ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . SelectionKey ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public final class <RARE_TOKEN> </a> 0
<a> extends <RARE_TOKEN> implements io . netty . channel . socket . <RARE_TOKEN> { </a> 0
<a> private static final ChannelMetadata <RARE_TOKEN> = new ChannelMetadata ( ChannelBufType . <RARE_TOKEN> , true ) ; </a> 0
<a> private final <RARE_TOKEN> config ; </a> 0
<a> private final Map < InetAddress , List < <RARE_TOKEN> > > <RARE_TOKEN> = </a> 0
<a> new HashMap < InetAddress , List < <RARE_TOKEN> > > ( ) ; </a> 0
<a> private static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> . open ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( "Failed to open a <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> . open ( <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( "Failed to open a <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> socket ) { </a> 0
<a> this ( null , socket ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Integer id , <RARE_TOKEN> socket ) { </a> 0
<a> super ( null , id , socket , SelectionKey . <RARE_TOKEN> ) ; </a> 0
<a> config = new <RARE_TOKEN> ( socket ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelMetadata <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> config ( ) { </a> 0
<a> return config ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isActive ( ) { </a> 0
<a> <RARE_TOKEN> ch = javaChannel ( ) ; </a> 0
<a> return ch . isOpen ( ) && ch . socket ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return javaChannel ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> javaChannel ( ) { </a> 0
<a> return ( <RARE_TOKEN> ) super . javaChannel ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return javaChannel ( ) . socket ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return javaChannel ( ) . socket ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( SocketAddress localAddress ) throws Exception { </a> 0
<a> javaChannel ( ) . socket ( ) . bind ( localAddress ) ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( SelectionKey . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( SocketAddress remoteAddress , </a> 0
<a> SocketAddress localAddress ) throws Exception { </a> 0
<a> if ( localAddress != null ) { </a> 0
<a> javaChannel ( ) . socket ( ) . bind ( localAddress ) ; </a> 0
<a> } </a> 0
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> javaChannel ( ) . connect ( remoteAddress ) ; </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) | SelectionKey . <RARE_TOKEN> ) ; </a> 0
<a> success = true ; </a> 0
<a> return true ; </a> 0
<a> } finally { </a> 0
<a> if ( ! success ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> javaChannel ( ) . disconnect ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> javaChannel ( ) . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception { </a> 1
<a> <RARE_TOKEN> ch = javaChannel ( ) ; </a> 0
<a> ByteBuffer data = ByteBuffer . <RARE_TOKEN> ( config ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> InetSocketAddress remoteAddress = ( InetSocketAddress ) ch . <RARE_TOKEN> ( data ) ; </a> 1
<a> if ( remoteAddress == null ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> data . <RARE_TOKEN> ( ) ; </a> 0
<a> buf . add ( new <RARE_TOKEN> ( Unpooled . wrappedBuffer ( data ) , remoteAddress ) ) ; </a> 0
<a> return 1 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( MessageBuf < Object > buf , boolean <RARE_TOKEN> ) throws Exception { </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> = ( <RARE_TOKEN> ) buf . <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuf data = <RARE_TOKEN> . data ( ) ; </a> 1
<a> ByteBuffer <RARE_TOKEN> ; </a> 0
<a> if ( data . <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> = data . nioBuffer ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = ByteBuffer . <RARE_TOKEN> ( data . readableBytes ( ) ) ; </a> 0
<a> data . getBytes ( data . readerIndex ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> final int <RARE_TOKEN> = javaChannel ( ) . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> . remoteAddress ( ) ) ; </a> 1
<a> final SelectionKey key = <RARE_TOKEN> ( ) ; </a> 0
<a> final int <RARE_TOKEN> = key . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> if ( ( <RARE_TOKEN> & SelectionKey . <RARE_TOKEN> ) == 0 ) { </a> 0
<a> key . <RARE_TOKEN> ( <RARE_TOKEN> | SelectionKey . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> buf . remove ( ) ; </a> 1
<a> if ( buf . isEmpty ( ) ) { </a> 1
<a> if ( ( <RARE_TOKEN> & SelectionKey . <RARE_TOKEN> ) != 0 ) { </a> 0
<a> key . <RARE_TOKEN> ( <RARE_TOKEN> & ~ SelectionKey . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return 1 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( InetAddress multicastAddress ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( InetAddress multicastAddress , ChannelFuture future ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> ( </a> 0
<a> multicastAddress , </a> 0
<a> NetworkInterface . <RARE_TOKEN> ( localAddress ( ) . <RARE_TOKEN> ( ) ) , </a> 0
<a> null , future ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> future . setFailure ( e ) ; </a> 0
<a> } </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetSocketAddress multicastAddress , NetworkInterface networkInterface ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress , networkInterface , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetSocketAddress multicastAddress , NetworkInterface networkInterface , </a> 0
<a> ChannelFuture future ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress . <RARE_TOKEN> ( ) , networkInterface , null , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetAddress multicastAddress , NetworkInterface networkInterface , InetAddress source ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress , networkInterface , source , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetAddress multicastAddress , NetworkInterface networkInterface , </a> 0
<a> InetAddress source , ChannelFuture future ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } else { </a> 0
<a> if ( multicastAddress == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( networkInterface == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> key ; </a> 0
<a> if ( source == null ) { </a> 0
<a> key = javaChannel ( ) . <RARE_TOKEN> ( multicastAddress , networkInterface ) ; </a> 0
<a> } else { </a> 0
<a> key = javaChannel ( ) . <RARE_TOKEN> ( multicastAddress , networkInterface , source ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this ) { </a> 0
<a> List < <RARE_TOKEN> > keys = <RARE_TOKEN> . get ( multicastAddress ) ; </a> 0
<a> if ( keys == null ) { </a> 0
<a> keys = new ArrayList < <RARE_TOKEN> > ( ) ; </a> 0
<a> <RARE_TOKEN> . put ( multicastAddress , keys ) ; </a> 0
<a> } </a> 0
<a> keys . add ( key ) ; </a> 0
<a> } </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> future . setFailure ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( InetAddress multicastAddress ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( InetAddress multicastAddress , ChannelFuture future ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> ( </a> 0
<a> multicastAddress , NetworkInterface . <RARE_TOKEN> ( localAddress ( ) . <RARE_TOKEN> ( ) ) , null , future ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> future . setFailure ( e ) ; </a> 0
<a> } </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetSocketAddress multicastAddress , NetworkInterface networkInterface ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress , networkInterface , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetSocketAddress multicastAddress , </a> 0
<a> NetworkInterface networkInterface , ChannelFuture future ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress . <RARE_TOKEN> ( ) , networkInterface , null , future ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetAddress multicastAddress , NetworkInterface networkInterface , InetAddress source ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress , networkInterface , source , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetAddress multicastAddress , NetworkInterface networkInterface , InetAddress source , </a> 0
<a> ChannelFuture future ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> if ( multicastAddress == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( networkInterface == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> List < <RARE_TOKEN> > keys = <RARE_TOKEN> . get ( multicastAddress ) ; </a> 0
<a> if ( keys != null ) { </a> 0
<a> Iterator < <RARE_TOKEN> > <RARE_TOKEN> = keys . <RARE_TOKEN> ( ) ; </a> 0
<a> while ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> key = <RARE_TOKEN> . next ( ) ; </a> 0
<a> if ( networkInterface . equals ( key . networkInterface ( ) ) ) { </a> 0
<a> if ( source == null && key . <RARE_TOKEN> ( ) == null || </a> 0
<a> source != null && source . equals ( key . <RARE_TOKEN> ( ) ) ) { </a> 0
<a> key . <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> . remove ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( keys . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> . remove ( multicastAddress ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture block ( </a> 0
<a> InetAddress multicastAddress , NetworkInterface networkInterface , </a> 0
<a> InetAddress <RARE_TOKEN> ) { </a> 0
<a> return block ( multicastAddress , networkInterface , <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture block ( </a> 0
<a> InetAddress multicastAddress , NetworkInterface networkInterface , </a> 0
<a> InetAddress <RARE_TOKEN> , ChannelFuture future ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } else { </a> 0
<a> if ( multicastAddress == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> if ( networkInterface == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> List < <RARE_TOKEN> > keys = <RARE_TOKEN> . get ( multicastAddress ) ; </a> 0
<a> for ( <RARE_TOKEN> key : keys ) { </a> 0
<a> if ( networkInterface . equals ( key . networkInterface ( ) ) ) { </a> 0
<a> try { </a> 0
<a> key . block ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> future . setFailure ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture block ( InetAddress multicastAddress , InetAddress <RARE_TOKEN> ) { </a> 0
<a> return block ( multicastAddress , <RARE_TOKEN> , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture block ( </a> 0
<a> InetAddress multicastAddress , InetAddress <RARE_TOKEN> , ChannelFuture future ) { </a> 0
<a> try { </a> 0
<a> return block ( </a> 0
<a> multicastAddress , </a> 0
<a> NetworkInterface . <RARE_TOKEN> ( localAddress ( ) . <RARE_TOKEN> ( ) ) , </a> 0
<a> <RARE_TOKEN> , future ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> future . setFailure ( e ) ; </a> 0
<a> } </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 1
<a> return new <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) & ~ SelectionKey . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) & ~ SelectionKey . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . util . internal . <RARE_TOKEN> ; </a> 1
<a> import java . lang . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . net . InetAddress ; </a> 0
<a> import java . net . NetworkInterface ; </a> 0
<a> import java . net . SocketException ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> private static final Object <RARE_TOKEN> ; </a> 0
<a> private static final Object <RARE_TOKEN> ; </a> 0
<a> private static final Object <RARE_TOKEN> ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> private static final <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> static { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = <RARE_TOKEN> . class . <RARE_TOKEN> ( ) ; </a> 0
<a> Class < ? > <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = Class . <RARE_TOKEN> ( <RARE_TOKEN> , true , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> Class < ? > <RARE_TOKEN> = null ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = Class . <RARE_TOKEN> ( <RARE_TOKEN> , true , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> Object <RARE_TOKEN> = null ; </a> 0
<a> Object <RARE_TOKEN> = null ; </a> 0
<a> Object <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = null ; </a> 0
<a> if ( <RARE_TOKEN> != null ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) . get ( null ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new Error ( <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) . get ( null ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new Error ( <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) . get ( null ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new Error ( <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . class . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new Error ( <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . class . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , Object . class ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new Error ( <RARE_TOKEN> <RARE_TOKEN> the <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> private final <RARE_TOKEN> channel ; </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> channel ) { </a> 0
<a> super ( channel . socket ( ) ) ; </a> 0
<a> this . channel = channel ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int <RARE_TOKEN> ( ) { </a> 0
<a> return ( Integer ) <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public InetAddress <RARE_TOKEN> ( ) { </a> 0
<a> NetworkInterface <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> return null ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> < InetAddress > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( InetAddress <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> ( NetworkInterface . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public NetworkInterface <RARE_TOKEN> ( ) { </a> 0
<a> return ( NetworkInterface ) <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( NetworkInterface networkInterface ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , networkInterface ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return ( Boolean ) <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( boolean <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> private Object <RARE_TOKEN> ( Object option ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } else { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( channel , option ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( Object option , Object value ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( ) < 7 ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } else { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( channel , option , value ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new ChannelException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . socket . nio . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . SelectionKey ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected static final InternalLogger logger = InternalLoggerFactory </a> 1
<a> . getInstance ( <RARE_TOKEN> . class ) ; </a> 1
<a> static final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> protected final <RARE_TOKEN> <RARE_TOKEN> ; </a> 1
<a> protected final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( ) ; </a> 1
<a> private int <RARE_TOKEN> ; </a> 0
<a> private boolean <RARE_TOKEN> ; </a> 1
<a> <RARE_TOKEN> ( </a> 1
<a> NioEventLoopGroup parent , ThreadFactory threadFactory , </a> 1
<a> <RARE_TOKEN> scheduler , <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> super ( parent , threadFactory , scheduler ) ; </a> 1
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> private static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 1
<a> try { </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( "failed to open a new <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> < Runnable > <RARE_TOKEN> ( ) { </a> 0
<a> return new ConcurrentLinkedQueue < Runnable > ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void run ( ) { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = this . <RARE_TOKEN> ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> <RARE_TOKEN> . set ( false ) ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 1
<a> if ( <RARE_TOKEN> . get ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> ( ) == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( </a> 0
<a> "Unexpected exception in the <RARE_TOKEN> <RARE_TOKEN> , t ) ; </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 1000 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . close ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> logger . warn ( </a> 0
<a> "Failed to close a <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void cancel ( SelectionKey key ) { </a> 0
<a> key . cancel ( ) ; </a> 0
<a> <RARE_TOKEN> ++ ; </a> 0
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> = 0 ; </a> 0
<a> <RARE_TOKEN> = true ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> Set < SelectionKey > <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> Iterator < SelectionKey > i ; </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> boolean <RARE_TOKEN> = true ; </a> 0
<a> try { </a> 0
<a> for ( i = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; i . <RARE_TOKEN> ( ) ; ) { </a> 0
<a> final SelectionKey k = i . next ( ) ; </a> 0
<a> final <RARE_TOKEN> ch = ( <RARE_TOKEN> ) k . <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> unsafe = ch . unsafe ( ) ; </a> 0
<a> try { </a> 0
<a> int <RARE_TOKEN> = k . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ( <RARE_TOKEN> & ( SelectionKey . <RARE_TOKEN> | SelectionKey . <RARE_TOKEN> ) ) != 0 || <RARE_TOKEN> == 0 ) { </a> 0
<a> unsafe . read ( ) ; </a> 0
<a> if ( ! ch . isOpen ( ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ( <RARE_TOKEN> & SelectionKey . <RARE_TOKEN> ) != 0 ) { </a> 0
<a> unsafe . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( ( <RARE_TOKEN> & SelectionKey . <RARE_TOKEN> ) != 0 ) { </a> 0
<a> unsafe . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> unsafe . close ( unsafe . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . isEmpty ( ) ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> break ; </a> 0
<a> } else { </a> 1
<a> i = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> . clear ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> Set < SelectionKey > keys = <RARE_TOKEN> . keys ( ) ; </a> 0
<a> Collection < Channel > channels = new ArrayList < Channel > ( keys . size ( ) ) ; </a> 0
<a> for ( SelectionKey k : keys ) { </a> 0
<a> channels . add ( ( Channel ) k . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> for ( Channel ch : channels ) { </a> 0
<a> ch . unsafe ( ) . close ( ch . unsafe ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( boolean inEventLoop ) { </a> 0
<a> if ( <RARE_TOKEN> . <RARE_TOKEN> ( false , true ) ) { </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<a> import io . netty . channel . EventExecutor ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import java . nio . channels . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 1
<a> public class NioEventLoopGroup extends <RARE_TOKEN> { </a> 0
<a> public NioEventLoopGroup ( ) { </a> 0
<a> this ( 0 ) ; </a> 0
<a> } </a> 0
<a> public NioEventLoopGroup ( int <RARE_TOKEN> ) { </a> 1
<a> this ( <RARE_TOKEN> , null ) ; </a> 0
<a> } </a> 0
<a> public NioEventLoopGroup ( int <RARE_TOKEN> , ThreadFactory threadFactory ) { </a> 1
<a> super ( <RARE_TOKEN> , threadFactory ) ; </a> 1
<a> } </a> 0
<a> public NioEventLoopGroup ( </a> 1
<a> int <RARE_TOKEN> , ThreadFactory threadFactory , final <RARE_TOKEN> <RARE_TOKEN> ) { </a> 1
<a> super ( <RARE_TOKEN> , threadFactory , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected EventExecutor <RARE_TOKEN> ( </a> 1
<a> ThreadFactory threadFactory , <RARE_TOKEN> scheduler , Object ... args ) throws Exception { </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> ; </a> 0
<a> if ( args == null || args . length == 0 || args [ 0 ] == null ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> = ( <RARE_TOKEN> ) args [ 0 ] ; </a> 0
<a> } </a> 0
<a> return new <RARE_TOKEN> ( this , threadFactory , scheduler , <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<a> import io . netty . buffer . ChannelBufType ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelMetadata ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> import java . nio . channels . SelectionKey ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . SocketChannel ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> </a> 0
<a> implements io . netty . channel . socket . <RARE_TOKEN> { </a> 0
<a> private static final ChannelMetadata <RARE_TOKEN> = new ChannelMetadata ( ChannelBufType . <RARE_TOKEN> , false ) ; </a> 0
<a> private static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> . open ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( </a> 0
<a> "Failed to open a server <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final <RARE_TOKEN> config ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> super ( null , null , <RARE_TOKEN> ( ) , 0 ) ; </a> 1
<a> config = new <RARE_TOKEN> ( javaChannel ( ) . socket ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelMetadata <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> config ( ) { </a> 0
<a> return config ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isActive ( ) { </a> 0
<a> return javaChannel ( ) . socket ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public InetSocketAddress remoteAddress ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> javaChannel ( ) { </a> 0
<a> return ( <RARE_TOKEN> ) super . javaChannel ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return javaChannel ( ) . socket ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( SocketAddress localAddress ) throws Exception { </a> 0
<a> javaChannel ( ) . socket ( ) . bind ( localAddress ) ; </a> 1
<a> SelectionKey <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) | SelectionKey . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> javaChannel ( ) . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception { </a> 1
<a> SocketChannel ch = javaChannel ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ch == null ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> buf . add ( new <RARE_TOKEN> ( this , null , ch ) ) ; </a> 0
<a> return 1 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( </a> 0
<a> SocketAddress remoteAddress , SocketAddress localAddress ) throws Exception { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( MessageBuf < Object > buf , boolean <RARE_TOKEN> ) throws Exception { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 1
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 1
<a> return new <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> ( ) . cancel ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> try { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } catch ( Exception e ) { </a> 1
<a> e . printStackTrace ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . ChannelBufType ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelMetadata ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> import java . nio . channels . SelectionKey ; </a> 0
<a> import java . nio . channels . SocketChannel ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> implements io . netty . channel . socket . SocketChannel { </a> 0
<a> private static final ChannelMetadata <RARE_TOKEN> = new ChannelMetadata ( ChannelBufType . <RARE_TOKEN> , false ) ; </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private final <RARE_TOKEN> config ; </a> 0
<a> private static SocketChannel <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return SocketChannel . open ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new ChannelException ( "Failed to open a <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( SocketChannel socket ) { </a> 0
<a> this ( null , null , socket ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Channel parent , Integer id , SocketChannel socket ) { </a> 0
<a> super ( parent , id , socket ) ; </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( false ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> try { </a> 0
<a> socket . close ( ) ; </a> 0
<a> } catch ( IOException <RARE_TOKEN> ) { </a> 0
<a> if ( logger . <RARE_TOKEN> ( ) ) { </a> 0
<a> logger . warn ( </a> 0
<a> "Failed to close a <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new ChannelException ( "Failed to <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> config = new <RARE_TOKEN> ( socket . socket ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelMetadata <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> config ( ) { </a> 0
<a> return config ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketChannel javaChannel ( ) { </a> 0
<a> return ( SocketChannel ) super . javaChannel ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isActive ( ) { </a> 0
<a> SocketChannel ch = javaChannel ( ) ; </a> 0
<a> return ch . isOpen ( ) && ch . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return javaChannel ( ) . socket ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 1
<a> return javaChannel ( ) . socket ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( SocketAddress localAddress ) throws Exception { </a> 1
<a> javaChannel ( ) . socket ( ) . bind ( localAddress ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( SocketAddress remoteAddress , SocketAddress localAddress ) throws Exception { </a> 0
<a> if ( localAddress != null ) { </a> 0
<a> javaChannel ( ) . socket ( ) . bind ( localAddress ) ; </a> 0
<a> } </a> 0
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> boolean <RARE_TOKEN> = javaChannel ( ) . connect ( remoteAddress ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( SelectionKey . <RARE_TOKEN> ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( SelectionKey . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> success = true ; </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } finally { </a> 0
<a> if ( ! success ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> if ( ! javaChannel ( ) . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( SelectionKey . <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> javaChannel ( ) . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( ByteBuf byteBuf ) throws Exception { </a> 0
<a> return byteBuf . writeBytes ( javaChannel ( ) , byteBuf . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( ByteBuf buf , boolean <RARE_TOKEN> ) throws Exception { </a> 0
<a> final int <RARE_TOKEN> = buf . readableBytes ( ) ; </a> 0
<a> final int <RARE_TOKEN> = buf . readBytes ( javaChannel ( ) , <RARE_TOKEN> ) ; </a> 1
<a> final SelectionKey key = <RARE_TOKEN> ( ) ; </a> 1
<a> final int <RARE_TOKEN> = key . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> >= <RARE_TOKEN> ) { </a> 0
<a> if ( ( <RARE_TOKEN> & SelectionKey . <RARE_TOKEN> ) != 0 ) { </a> 1
<a> key . <RARE_TOKEN> ( <RARE_TOKEN> & ~ SelectionKey . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } else { </a> 1
<a> if ( <RARE_TOKEN> > 0 || <RARE_TOKEN> ) { </a> 0
<a> if ( ( <RARE_TOKEN> & SelectionKey . <RARE_TOKEN> ) == 0 ) { </a> 1
<a> key . <RARE_TOKEN> ( <RARE_TOKEN> | SelectionKey . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> @ Override </a> 1
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 1
<a> return new <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) & ~ SelectionKey . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> ( ) . <RARE_TOKEN> ( <RARE_TOKEN> ( ) . <RARE_TOKEN> ( ) | SelectionKey . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> public static <RARE_TOKEN> <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> switch ( <RARE_TOKEN> ) { </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> case <RARE_TOKEN> : </a> 0
<a> return <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> default : </a> 0
<a> throw new IllegalArgumentException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> final class <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = </a> 0
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> static final long <RARE_TOKEN> = 10 ; </a> 0
<a> static final long <RARE_TOKEN> ; </a> 0
<a> static { </a> 0
<a> String key = <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> String <RARE_TOKEN> = System . getProperty ( key ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> System . setProperty ( key , "" ) ; </a> 0
<a> } </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> if ( logger . isDebugEnabled ( ) ) { </a> 0
<a> logger . debug ( <RARE_TOKEN> to <RARE_TOKEN> System <RARE_TOKEN> <RARE_TOKEN> + key + <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> long <RARE_TOKEN> ; </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> = Long . <RARE_TOKEN> ( System . getProperty ( <RARE_TOKEN> , </a> 0
<a> String . valueOf ( <RARE_TOKEN> ) ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> logger . debug ( <RARE_TOKEN> <RARE_TOKEN> timeout of " + <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) throws IOException { </a> 1
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> if ( logger . isDebugEnabled ( ) ) { </a> 0
<a> logger . debug ( </a> 0
<a> <RARE_TOKEN> . class . getSimpleName ( ) + </a> 0
<a> " <RARE_TOKEN> <RARE_TOKEN> a <RARE_TOKEN> - <RARE_TOKEN> <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static void <RARE_TOKEN> ( <RARE_TOKEN> <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( "Failed to <RARE_TOKEN> <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private <RARE_TOKEN> ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . nio ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected <RARE_TOKEN> ( Channel parent , Integer id ) { </a> 0
<a> super ( parent , id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected abstract <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void read ( ) { </a> 0
<a> assert eventLoop ( ) . inEventLoop ( ) ; </a> 0
<a> final ChannelPipeline pipeline = pipeline ( ) ; </a> 0
<a> final ByteBuf byteBuf = pipeline . <RARE_TOKEN> ( ) ; </a> 1
<a> boolean closed = false ; </a> 0
<a> boolean read = false ; </a> 0
<a> try { </a> 0
<a> for ( ; ; ) { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( byteBuf ) ; </a> 1
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> read = true ; </a> 0
<a> } else if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> closed = true ; </a> 0
<a> } </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> if ( byteBuf . <RARE_TOKEN> ( ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> final int capacity = byteBuf . capacity ( ) ; </a> 0
<a> final int maxCapacity = byteBuf . maxCapacity ( ) ; </a> 0
<a> if ( capacity == maxCapacity ) { </a> 0
<a> if ( read ) { </a> 0
<a> read = false ; </a> 0
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 1
<a> if ( ! byteBuf . <RARE_TOKEN> ( ) ) { </a> 0
<a> throw new IllegalStateException ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> handler <RARE_TOKEN> buffer is <RARE_TOKEN> must <RARE_TOKEN> <RARE_TOKEN> " + </a> 1
<a> <RARE_TOKEN> one <RARE_TOKEN> ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } else { </a> 0
<a> final int writerIndex = byteBuf . writerIndex ( ) ; </a> 0
<a> if ( writerIndex + <RARE_TOKEN> > maxCapacity ) { </a> 0
<a> byteBuf . capacity ( maxCapacity ) ; </a> 0
<a> } else { </a> 0
<a> byteBuf . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( read ) { </a> 0
<a> read = false ; </a> 0
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> pipeline ( ) . fireExceptionCaught ( t ) ; </a> 1
<a> if ( t instanceof IOException ) { </a> 0
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> } finally { </a> 0
<a> if ( read ) { </a> 0
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> if ( closed && isOpen ( ) ) { </a> 0
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ByteBuf buf ) throws Exception { </a> 1
<a> while ( buf . readable ( ) ) { </a> 0
<a> <RARE_TOKEN> ( buf ) ; </a> 0
<a> } </a> 0
<a> buf . clear ( ) ; </a> 1
<a> } </a> 0
<a> protected abstract int <RARE_TOKEN> ( ) ; </a> 0
<a> protected abstract int <RARE_TOKEN> ( ByteBuf buf ) throws Exception ; </a> 0
<a> protected abstract void <RARE_TOKEN> ( ByteBuf buf ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . EventLoop ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 1
<a> import java . net . SocketAddress ; </a> 0
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> static final int <RARE_TOKEN> = 1000 ; </a> 0
<a> protected <RARE_TOKEN> ( Channel parent , Integer id ) { </a> 0
<a> super ( parent , id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public InetSocketAddress localAddress ( ) { </a> 0
<a> return ( InetSocketAddress ) super . localAddress ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public InetSocketAddress remoteAddress ( ) { </a> 0
<a> return ( InetSocketAddress ) super . remoteAddress ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> unsafe ( ) { </a> 1
<a> return ( <RARE_TOKEN> ) super . unsafe ( ) ; </a> 1
<a> } </a> 1
<a> public interface <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> void read ( ) ; </a> 1
<a> } </a> 0
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> @ Override </a> 0
<a> public void connect ( </a> 0
<a> final SocketAddress remoteAddress , </a> 0
<a> final SocketAddress localAddress , final ChannelFuture future ) { </a> 0
<a> if ( eventLoop ( ) . inEventLoop ( ) ) { </a> 0
<a> if ( ! <RARE_TOKEN> ( future ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> boolean <RARE_TOKEN> = isActive ( ) ; </a> 0
<a> <RARE_TOKEN> ( remoteAddress , localAddress ) ; </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( ! <RARE_TOKEN> && isActive ( ) ) { </a> 0
<a> pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> future . setFailure ( t ) ; </a> 0
<a> pipeline ( ) . fireExceptionCaught ( t ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> } else { </a> 0
<a> eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> connect ( remoteAddress , localAddress , future ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( EventLoop loop ) { </a> 0
<a> return loop instanceof <RARE_TOKEN> ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected Runnable <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean <RARE_TOKEN> ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> protected abstract void <RARE_TOKEN> ( </a> 0
<a> SocketAddress remoteAddress , SocketAddress localAddress ) throws Exception ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelPipeline ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> protected <RARE_TOKEN> ( Channel parent , Integer id ) { </a> 0
<a> super ( parent , id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected abstract <RARE_TOKEN> <RARE_TOKEN> ( ) ; </a> 0
<a> abstract class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void read ( ) { </a> 0
<a> assert eventLoop ( ) . inEventLoop ( ) ; </a> 0
<a> final ChannelPipeline pipeline = pipeline ( ) ; </a> 0
<a> final MessageBuf < Object > <RARE_TOKEN> = pipeline . <RARE_TOKEN> ( ) ; </a> 1
<a> boolean closed = false ; </a> 0
<a> boolean read = false ; </a> 1
<a> try { </a> 0
<a> int <RARE_TOKEN> = <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> if ( <RARE_TOKEN> > 0 ) { </a> 0
<a> read = true ; </a> 0
<a> } else if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> closed = true ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> if ( read ) { </a> 0
<a> read = false ; </a> 0
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 0
<a> } </a> 0
<a> pipeline ( ) . fireExceptionCaught ( t ) ; </a> 1
<a> if ( t instanceof IOException ) { </a> 1
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 0
<a> } finally { </a> 0
<a> if ( read ) { </a> 0
<a> pipeline . fireInboundBufferUpdated ( ) ; </a> 0
<a> } </a> 0
<a> if ( closed && isOpen ( ) ) { </a> 0
<a> close ( <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception { </a> 1
<a> while ( ! buf . isEmpty ( ) ) { </a> 1
<a> <RARE_TOKEN> ( buf ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> protected abstract int <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception ; </a> 1
<a> protected abstract void <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception ; </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . ChannelBufType ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . ChannelMetadata ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . InetAddress ; </a> 0
<a> import java . net . InetSocketAddress ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . NetworkInterface ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> import java . net . SocketException ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> { </a> 0
<a> private static final InternalLogger logger = InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final ChannelMetadata <RARE_TOKEN> = new ChannelMetadata ( ChannelBufType . <RARE_TOKEN> , true ) ; </a> 0
<a> private static final byte [ ] <RARE_TOKEN> = new byte [ 0 ] ; </a> 0
<a> private final <RARE_TOKEN> socket ; </a> 0
<a> private final <RARE_TOKEN> config ; </a> 0
<a> private final java . net . <RARE_TOKEN> <RARE_TOKEN> = new java . net . <RARE_TOKEN> ( <RARE_TOKEN> , 0 ) ; </a> 0
<a> private volatile boolean <RARE_TOKEN> ; </a> 0
<a> private static <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return new <RARE_TOKEN> ( null ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new ChannelException ( "failed to create a new <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> socket ) { </a> 0
<a> this ( null , socket ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Integer id , <RARE_TOKEN> socket ) { </a> 0
<a> super ( null , id ) ; </a> 0
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> socket . <RARE_TOKEN> ( false ) ; </a> 0
<a> success = true ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> throw new ChannelException ( </a> 0
<a> "Failed to <RARE_TOKEN> the <RARE_TOKEN> socket <RARE_TOKEN> , e ) ; </a> 0
<a> } finally { </a> 0
<a> if ( ! success ) { </a> 0
<a> socket . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> this . socket = socket ; </a> 0
<a> config = new <RARE_TOKEN> ( socket ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelMetadata <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> config ( ) { </a> 0
<a> return config ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isOpen ( ) { </a> 0
<a> return ! socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isActive ( ) { </a> 0
<a> return isOpen ( ) && socket . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( SocketAddress localAddress ) throws Exception { </a> 0
<a> socket . bind ( localAddress ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( SocketAddress remoteAddress , </a> 0
<a> SocketAddress localAddress ) throws Exception { </a> 0
<a> if ( localAddress != null ) { </a> 0
<a> socket . bind ( localAddress ) ; </a> 0
<a> } </a> 0
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> socket . connect ( remoteAddress ) ; </a> 0
<a> success = true ; </a> 0
<a> } finally { </a> 0
<a> if ( ! success ) { </a> 0
<a> try { </a> 0
<a> socket . close ( ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> logger . warn ( "Failed to close a <RARE_TOKEN> , t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> socket . disconnect ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> socket . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception { </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> try { </a> 1
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 1
<a> } </a> 1
<a> return 0 ; </a> 1
<a> } </a> 1
<a> int <RARE_TOKEN> = config ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> byte [ ] data = new byte [ <RARE_TOKEN> ] ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( data ) ; </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> InetSocketAddress <RARE_TOKEN> = ( InetSocketAddress ) <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 1
<a> <RARE_TOKEN> = remoteAddress ( ) ; </a> 1
<a> } </a> 1
<a> buf . add ( new <RARE_TOKEN> ( Unpooled . wrappedBuffer ( </a> 0
<a> data , <RARE_TOKEN> . <RARE_TOKEN> ( ) , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) , <RARE_TOKEN> ) ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> return 0 ; </a> 1
<a> } else { </a> 1
<a> return 1 ; </a> 0
<a> } </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> return 0 ; </a> 0
<a> } catch ( SocketException e ) { </a> 0
<a> if ( ! e . getMessage ( ) . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) . contains ( <RARE_TOKEN> <RARE_TOKEN> ) ) { </a> 0
<a> throw e ; </a> 0
<a> } </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( MessageBuf < Object > buf ) throws Exception { </a> 1
<a> <RARE_TOKEN> p = ( <RARE_TOKEN> ) buf . poll ( ) ; </a> 1
<a> ByteBuf data = p . data ( ) ; </a> 1
<a> int length = data . readableBytes ( ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( p . remoteAddress ( ) ) ; </a> 0
<a> if ( data . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( data . array ( ) , data . <RARE_TOKEN> ( ) + data . readerIndex ( ) , length ) ; </a> 0
<a> } else { </a> 0
<a> byte [ ] <RARE_TOKEN> = new byte [ length ] ; </a> 0
<a> data . getBytes ( data . readerIndex ( ) , <RARE_TOKEN> ) ; </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( InetAddress multicastAddress ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( InetAddress multicastAddress , ChannelFuture future ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( multicastAddress ) ; </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> future . setFailure ( e ) ; </a> 0
<a> } </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( InetSocketAddress multicastAddress , NetworkInterface networkInterface ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress , networkInterface , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetSocketAddress multicastAddress , NetworkInterface networkInterface , </a> 0
<a> ChannelFuture future ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( multicastAddress , networkInterface ) ; </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> future . setFailure ( e ) ; </a> 0
<a> } </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetAddress multicastAddress , NetworkInterface networkInterface , InetAddress source ) { </a> 0
<a> return <RARE_TOKEN> ( new UnsupportedOperationException ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetAddress multicastAddress , NetworkInterface networkInterface , InetAddress source , </a> 0
<a> ChannelFuture future ) { </a> 0
<a> future . setFailure ( new UnsupportedOperationException ( ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! isActive ( ) ) { </a> 0
<a> throw new IllegalStateException ( </a> 0
<a> <RARE_TOKEN> . class . getName ( ) + </a> 0
<a> " must be <RARE_TOKEN> to <RARE_TOKEN> a <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( InetAddress multicastAddress ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( InetAddress multicastAddress , ChannelFuture future ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( multicastAddress ) ; </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> future . setFailure ( e ) ; </a> 0
<a> } </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetSocketAddress multicastAddress , NetworkInterface networkInterface ) { </a> 0
<a> return <RARE_TOKEN> ( multicastAddress , networkInterface , <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetSocketAddress multicastAddress , NetworkInterface networkInterface , </a> 0
<a> ChannelFuture future ) { </a> 0
<a> try { </a> 0
<a> socket . <RARE_TOKEN> ( multicastAddress , networkInterface ) ; </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> future . setFailure ( e ) ; </a> 0
<a> } </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetAddress multicastAddress , NetworkInterface networkInterface , InetAddress source ) { </a> 0
<a> return <RARE_TOKEN> ( new UnsupportedOperationException ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( </a> 0
<a> InetAddress multicastAddress , NetworkInterface networkInterface , InetAddress source , </a> 0
<a> ChannelFuture future ) { </a> 0
<a> future . setFailure ( new UnsupportedOperationException ( ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture block ( InetAddress multicastAddress , </a> 0
<a> NetworkInterface networkInterface , InetAddress <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( new UnsupportedOperationException ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture block ( InetAddress multicastAddress , </a> 0
<a> NetworkInterface networkInterface , InetAddress <RARE_TOKEN> , </a> 0
<a> ChannelFuture future ) { </a> 0
<a> future . setFailure ( new UnsupportedOperationException ( ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture block ( InetAddress multicastAddress , </a> 0
<a> InetAddress <RARE_TOKEN> ) { </a> 0
<a> return <RARE_TOKEN> ( new UnsupportedOperationException ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture block ( InetAddress multicastAddress , </a> 0
<a> InetAddress <RARE_TOKEN> , ChannelFuture future ) { </a> 0
<a> future . setFailure ( new UnsupportedOperationException ( ) ) ; </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> = false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . Channel ; </a> 1
<a> import io . netty . channel . ChannelFuture ; </a> 1
<a> import io . netty . channel . ChannelFutureListener ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> private final <RARE_TOKEN> parent ; </a> 1
<a> private <RARE_TOKEN> ch ; </a> 1
<a> <RARE_TOKEN> ( <RARE_TOKEN> parent ) { </a> 1
<a> super ( parent , parent . threadFactory , parent . scheduler ) ; </a> 1
<a> this . parent = parent ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel , ChannelFuture future ) { </a> 0
<a> return super . <RARE_TOKEN> ( channel , future ) . addListener ( new ChannelFutureListener ( ) { </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelFuture future ) throws Exception { </a> 0
<a> if ( future . <RARE_TOKEN> ( ) ) { </a> 0
<a> ch = ( <RARE_TOKEN> ) future . channel ( ) ; </a> 0
<a> } else { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> protected void run ( ) { </a> 1
<a> for ( ; ; ) { </a> 1
<a> <RARE_TOKEN> ch = this . ch ; </a> 0
<a> if ( ch == null || ! ch . isActive ( ) ) { </a> 0
<a> Runnable task ; </a> 1
<a> try { </a> 1
<a> task = <RARE_TOKEN> ( ) ; </a> 1
<a> task . run ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 1
<a> } </a> 1
<a> } else { </a> 1
<a> long <RARE_TOKEN> = System . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> final Runnable task = <RARE_TOKEN> ( ) ; </a> 1
<a> if ( task == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> task . run ( ) ; </a> 1
<a> if ( System . <RARE_TOKEN> ( ) - <RARE_TOKEN> > <RARE_TOKEN> . <RARE_TOKEN> * <RARE_TOKEN> ) { </a> 1
<a> break ; </a> 1
<a> } </a> 0
<a> } </a> 1
<a> ch . unsafe ( ) . read ( ) ; </a> 1
<a> if ( ! ch . <RARE_TOKEN> ( ) ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> if ( <RARE_TOKEN> ( ) ) { </a> 0
<a> if ( ch != null ) { </a> 0
<a> ch . unsafe ( ) . close ( ch . unsafe ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 1
<a> if ( <RARE_TOKEN> ( ) == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( boolean inEventLoop ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> private void <RARE_TOKEN> ( ) { </a> 0
<a> ch = null ; </a> 0
<a> parent . <RARE_TOKEN> . remove ( this ) ; </a> 0
<a> parent . <RARE_TOKEN> . add ( this ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 1
<a> import io . netty . channel . EventLoop ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import java . util . Collections ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 1
<a> import java . util . Set ; </a> 1
<a> import java . util . concurrent . ConcurrentHashMap ; </a> 1
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ThreadFactory ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 1
<a> public class <RARE_TOKEN> implements <RARE_TOKEN> { </a> 1
<a> private final int <RARE_TOKEN> ; </a> 1
<a> final <RARE_TOKEN> scheduler ; </a> 0
<a> final ThreadFactory threadFactory ; </a> 1
<a> final Set < <RARE_TOKEN> > <RARE_TOKEN> = Collections . <RARE_TOKEN> ( </a> 1
<a> new ConcurrentHashMap < <RARE_TOKEN> , Boolean > ( ) ) ; </a> 1
<a> final <RARE_TOKEN> < <RARE_TOKEN> > <RARE_TOKEN> = new ConcurrentLinkedQueue < <RARE_TOKEN> > ( ) ; </a> 1
<a> private final ChannelException <RARE_TOKEN> ; </a> 1
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( 0 ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> ) { </a> 0
<a> this ( <RARE_TOKEN> , <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( int <RARE_TOKEN> , ThreadFactory threadFactory ) { </a> 0
<a> if ( <RARE_TOKEN> < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( String . format ( </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> (expected: >= <RARE_TOKEN> , <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> if ( threadFactory == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> this . threadFactory = threadFactory ; </a> 0
<a> scheduler = new <RARE_TOKEN> ( threadFactory ) ; </a> 0
<a> <RARE_TOKEN> = new ChannelException ( <RARE_TOKEN> <RARE_TOKEN> channels <RARE_TOKEN> " + <RARE_TOKEN> + <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( new <RARE_TOKEN> [ 0 ] ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public EventLoop next ( ) { </a> 1
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void shutdown ( ) { </a> 0
<a> scheduler . shutdown ( ) ; </a> 1
<a> for ( EventLoop l : <RARE_TOKEN> ) { </a> 0
<a> l . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> for ( EventLoop l : <RARE_TOKEN> ) { </a> 0
<a> l . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 1
<a> if ( ! scheduler . <RARE_TOKEN> ( ) ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> for ( EventLoop l : <RARE_TOKEN> ) { </a> 0
<a> if ( ! l . <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( EventLoop l : <RARE_TOKEN> ) { </a> 0
<a> if ( ! l . <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! scheduler . <RARE_TOKEN> ( ) ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 1
<a> for ( EventLoop l : <RARE_TOKEN> ) { </a> 0
<a> if ( ! l . <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( EventLoop l : <RARE_TOKEN> ) { </a> 0
<a> if ( ! l . <RARE_TOKEN> ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( long timeout , TimeUnit unit ) </a> 0
<a> throws InterruptedException { </a> 0
<a> long <RARE_TOKEN> = System . <RARE_TOKEN> ( ) + unit . <RARE_TOKEN> ( timeout ) ; </a> 0
<a> for ( ; ; ) { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> - System . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( scheduler . <RARE_TOKEN> ( <RARE_TOKEN> , TimeUnit . <RARE_TOKEN> ) ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> for ( EventLoop l : <RARE_TOKEN> ) { </a> 0
<a> for ( ; ; ) { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> - System . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( l . <RARE_TOKEN> ( <RARE_TOKEN> , TimeUnit . <RARE_TOKEN> ) ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( EventLoop l : <RARE_TOKEN> ) { </a> 0
<a> for ( ; ; ) { </a> 0
<a> long <RARE_TOKEN> = <RARE_TOKEN> - System . <RARE_TOKEN> ( ) ; </a> 0
<a> if ( <RARE_TOKEN> <= 0 ) { </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> if ( l . <RARE_TOKEN> ( <RARE_TOKEN> , TimeUnit . <RARE_TOKEN> ) ) { </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel ) { </a> 0
<a> if ( channel == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( channel ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 0
<a> return channel . <RARE_TOKEN> ( t ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel , ChannelFuture future ) { </a> 0
<a> if ( channel == null ) { </a> 0
<a> throw new NullPointerException ( <RARE_TOKEN> ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> return <RARE_TOKEN> ( ) . <RARE_TOKEN> ( channel , future ) ; </a> 0
<a> } catch ( Throwable t ) { </a> 1
<a> return channel . <RARE_TOKEN> ( t ) ; </a> 0
<a> } </a> 1
<a> } </a> 1
<a> private EventLoop <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> loop = <RARE_TOKEN> . poll ( ) ; </a> 1
<a> if ( loop == null ) { </a> 0
<a> if ( <RARE_TOKEN> > 0 && <RARE_TOKEN> . size ( ) >= <RARE_TOKEN> ) { </a> 0
<a> throw <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> loop = new <RARE_TOKEN> ( this ) ; </a> 1
<a> } </a> 1
<a> <RARE_TOKEN> . add ( loop ) ; </a> 1
<a> return loop ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . ChannelBufType ; </a> 0
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelException ; </a> 0
<a> import io . netty . channel . ChannelMetadata ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . socket . SocketChannel ; </a> 0
<a> import io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<a> import io . netty . logging . InternalLogger ; </a> 1
<a> import io . netty . logging . InternalLoggerFactory ; </a> 1
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . net . SocketAddress ; </a> 0
<a> import java . net . <RARE_TOKEN> ; </a> 0
<a> import java . nio . channels . <RARE_TOKEN> ; </a> 0
<a> public class <RARE_TOKEN> extends <RARE_TOKEN> </a> 0
<a> implements SocketChannel { </a> 0
<a> private static final InternalLogger logger = </a> 0
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 0
<a> private static final ChannelMetadata <RARE_TOKEN> = new ChannelMetadata ( ChannelBufType . <RARE_TOKEN> , false ) ; </a> 0
<a> private final <RARE_TOKEN> socket ; </a> 0
<a> private final <RARE_TOKEN> config ; </a> 0
<a> private InputStream is ; </a> 0
<a> private OutputStream os ; </a> 0
<a> private volatile boolean <RARE_TOKEN> ; </a> 0
<a> public <RARE_TOKEN> ( ) { </a> 0
<a> this ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( <RARE_TOKEN> socket ) { </a> 0
<a> this ( null , null , socket ) ; </a> 0
<a> } </a> 0
<a> public <RARE_TOKEN> ( Channel parent , Integer id , <RARE_TOKEN> socket ) { </a> 0
<a> super ( parent , id ) ; </a> 0
<a> this . socket = socket ; </a> 0
<a> config = new <RARE_TOKEN> ( socket ) ; </a> 0
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> if ( socket . <RARE_TOKEN> ( ) ) { </a> 0
<a> is = socket . <RARE_TOKEN> ( ) ; </a> 0
<a> os = socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> socket . <RARE_TOKEN> ( <RARE_TOKEN> ) ; </a> 0
<a> success = true ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> throw new ChannelException ( "failed to <RARE_TOKEN> a <RARE_TOKEN> , e ) ; </a> 0
<a> } finally { </a> 0
<a> if ( ! success ) { </a> 0
<a> try { </a> 0
<a> socket . close ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> logger . warn ( "Failed to close a <RARE_TOKEN> , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelMetadata <RARE_TOKEN> ( ) { </a> 0
<a> return <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public <RARE_TOKEN> config ( ) { </a> 0
<a> return config ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean isOpen ( ) { </a> 1
<a> return ! socket . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public boolean isActive ( ) { </a> 1
<a> return ! socket . <RARE_TOKEN> ( ) && socket . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected SocketAddress <RARE_TOKEN> ( ) { </a> 0
<a> return socket . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( SocketAddress localAddress ) throws Exception { </a> 0
<a> socket . bind ( localAddress ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( SocketAddress remoteAddress , </a> 0
<a> SocketAddress localAddress ) throws Exception { </a> 0
<a> if ( localAddress != null ) { </a> 0
<a> socket . bind ( localAddress ) ; </a> 0
<a> } </a> 0
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> socket . connect ( remoteAddress , config ( ) . <RARE_TOKEN> ( ) ) ; </a> 0
<a> is = socket . <RARE_TOKEN> ( ) ; </a> 0
<a> os = socket . <RARE_TOKEN> ( ) ; </a> 0
<a> success = true ; </a> 0
<a> } finally { </a> 0
<a> if ( ! success ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> socket . close ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( ) { </a> 0
<a> try { </a> 0
<a> return is . <RARE_TOKEN> ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int <RARE_TOKEN> ( ByteBuf buf ) throws Exception { </a> 0
<a> if ( socket . <RARE_TOKEN> ( ) ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 1
<a> try { </a> 1
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 1
<a> } </a> 1
<a> return 0 ; </a> 1
<a> } </a> 1
<a> try { </a> 0
<a> int read = buf . writeBytes ( is , buf . <RARE_TOKEN> ( ) ) ; </a> 1
<a> if ( read > 0 && ! <RARE_TOKEN> ) { </a> 1
<a> return read ; </a> 1
<a> } else { </a> 1
<a> return 0 ; </a> 1
<a> } </a> 1
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ByteBuf buf ) throws Exception { </a> 0
<a> OutputStream os = this . os ; </a> 0
<a> if ( os == null ) { </a> 0
<a> throw new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> buf . readBytes ( os , buf . readableBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected <RARE_TOKEN> <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> private final class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> = true ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ) { </a> 1
<a> <RARE_TOKEN> = false ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket . <RARE_TOKEN> ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . socket ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import static org . <RARE_TOKEN> . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import org . junit . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private final Channel channel = <RARE_TOKEN> ( Channel . class ) ; </a> 0
<a> private <RARE_TOKEN> future ; </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public void init ( ) { </a> 0
<a> future = new <RARE_TOKEN> ( channel ) ; </a> 0
<a> } </a> 0
<a> @ Test ( expected = NullPointerException . class ) </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> new <RARE_TOKEN> ( null ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> ChannelFutureListener l = createStrictMock ( ChannelFutureListener . class ) ; </a> 0
<a> replay ( l ) ; </a> 0
<a> future . <RARE_TOKEN> ( l ) ; </a> 0
<a> verify ( l ) ; </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws InterruptedException { </a> 0
<a> assertSame ( channel , future . channel ( ) ) ; </a> 0
<a> assertTrue ( future . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertFalse ( future . cancel ( ) ) ; </a> 0
<a> assertFalse ( future . isCancelled ( ) ) ; </a> 0
<a> assertSame ( future , future . await ( ) ) ; </a> 0
<a> assertTrue ( future . await ( 1 ) ) ; </a> 0
<a> assertTrue ( future . await ( 1 , TimeUnit . <RARE_TOKEN> ) ) ; </a> 0
<a> assertSame ( future , future . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertTrue ( future . <RARE_TOKEN> ( 1 ) ) ; </a> 0
<a> assertTrue ( future . <RARE_TOKEN> ( 1 , TimeUnit . <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> <RARE_TOKEN> ( Channel channel ) { </a> 0
<a> super ( channel ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Throwable cause ( ) { </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean <RARE_TOKEN> ( ) { </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture sync ( ) throws InterruptedException { </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ChannelFuture <RARE_TOKEN> ( ) { </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Void get ( ) throws InterruptedException , <RARE_TOKEN> { </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Void get ( long timeout , TimeUnit unit ) throws InterruptedException , </a> 0
<a> <RARE_TOKEN> , <RARE_TOKEN> { </a> 0
<a> throw new Error ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import io . netty . channel . ChannelHandler . Sharable ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> pipeline = new <RARE_TOKEN> ( new <RARE_TOKEN> ( ) ) ; </a> 0
<a> ChannelHandler <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> pipeline . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( pipeline . get ( <RARE_TOKEN> ) == <RARE_TOKEN> ) ; </a> 1
<a> assertTrue ( pipeline . get ( <RARE_TOKEN> ) == <RARE_TOKEN> ) ; </a> 1
<a> assertTrue ( pipeline . get ( <RARE_TOKEN> ) == <RARE_TOKEN> ) ; </a> 1
<a> ChannelHandler <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> pipeline . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( pipeline . get ( <RARE_TOKEN> ) == <RARE_TOKEN> ) ; </a> 1
<a> ChannelHandler <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> pipeline . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( pipeline . get ( <RARE_TOKEN> ) == <RARE_TOKEN> ) ; </a> 1
<a> ChannelHandler <RARE_TOKEN> = <RARE_TOKEN> ( ) ; </a> 0
<a> pipeline . <RARE_TOKEN> ( <RARE_TOKEN> , <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( pipeline . get ( <RARE_TOKEN> ) == <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> private static ChannelHandler <RARE_TOKEN> ( ) { </a> 0
<a> return new <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Sharable </a> 0
<a> private static class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 0
<a> } </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import static org . junit . Assert . * ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . CountDownLatch ; </a> 0
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 1
<a> import java . util . concurrent . <RARE_TOKEN> ; </a> 0
<a> import java . util . concurrent . ScheduledFuture ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 1
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> import java . util . concurrent . atomic . <RARE_TOKEN> ; </a> 0
<a> import org . junit . <RARE_TOKEN> ; </a> 0
<a> import org . junit . <RARE_TOKEN> ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private <RARE_TOKEN> loop ; </a> 1
<a> @ <RARE_TOKEN> </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> loop = new <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> if ( ! loop . <RARE_TOKEN> ( ) ) { </a> 1
<a> loop . shutdown ( ) ; </a> 1
<a> } </a> 0
<a> while ( ! loop . <RARE_TOKEN> ( ) ) { </a> 1
<a> try { </a> 0
<a> loop . <RARE_TOKEN> ( 1 , TimeUnit . <RARE_TOKEN> ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> assertEquals ( 1 , loop . <RARE_TOKEN> . get ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> loop . shutdown ( ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> final AtomicBoolean <RARE_TOKEN> = new AtomicBoolean ( ) ; </a> 1
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> loop . execute ( new Runnable ( ) { </a> 1
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> latch . countDown ( ) ; </a> 0
<a> try { </a> 1
<a> Thread . sleep ( Integer . MAX_VALUE ) ; </a> 1
<a> } catch ( InterruptedException <RARE_TOKEN> ) { </a> 1
<a> <RARE_TOKEN> . set ( true ) ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> latch . await ( ) ; </a> 0
<a> loop . shutdown ( ) ; </a> 1
<a> while ( ! loop . <RARE_TOKEN> ( ) ) { </a> 1
<a> loop . <RARE_TOKEN> ( 1 , TimeUnit . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> assertTrue ( <RARE_TOKEN> . get ( ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> long <RARE_TOKEN> = System . <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> loop . schedule ( new Runnable ( ) { </a> 1
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . set ( System . <RARE_TOKEN> ( ) ) ; </a> 0
<a> } </a> 0
<a> } , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) . get ( ) ; </a> 0
<a> assertTrue ( <RARE_TOKEN> . get ( ) - <RARE_TOKEN> >= TimeUnit . MILLISECONDS . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 1
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> final <RARE_TOKEN> < Long > <RARE_TOKEN> = new <RARE_TOKEN> < Long > ( ) ; </a> 0
<a> ScheduledFuture < ? > f = loop . <RARE_TOKEN> ( new Runnable ( ) { </a> 1
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . add ( System . <RARE_TOKEN> ( ) ) ; </a> 0
<a> try { </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , <RARE_TOKEN> , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( f . cancel ( true ) ) ; </a> 0
<a> assertEquals ( 5 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> Long <RARE_TOKEN> = null ; </a> 0
<a> for ( Long t : <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = t ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> assertTrue ( t . <RARE_TOKEN> ( ) - <RARE_TOKEN> . <RARE_TOKEN> ( ) >= TimeUnit . MILLISECONDS . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = t ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> final <RARE_TOKEN> < Long > <RARE_TOKEN> = new <RARE_TOKEN> < Long > ( ) ; </a> 0
<a> ScheduledFuture < ? > f = loop . <RARE_TOKEN> ( new Runnable ( ) { </a> 1
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> boolean <RARE_TOKEN> = <RARE_TOKEN> . isEmpty ( ) ; </a> 0
<a> <RARE_TOKEN> . add ( System . <RARE_TOKEN> ( ) ) ; </a> 0
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> try { </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , <RARE_TOKEN> , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( f . cancel ( true ) ) ; </a> 0
<a> assertEquals ( 5 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> int i = 0 ; </a> 0
<a> Long <RARE_TOKEN> = null ; </a> 0
<a> for ( Long t : <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = t ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> long <RARE_TOKEN> = t . <RARE_TOKEN> ( ) - <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( i == 0 ) { </a> 0
<a> assertTrue ( <RARE_TOKEN> >= TimeUnit . MILLISECONDS . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 1
<a> } else { </a> 0
<a> assertTrue ( <RARE_TOKEN> <= TimeUnit . MILLISECONDS . <RARE_TOKEN> ( 10 ) ) ; </a> 1
<a> } </a> 0
<a> <RARE_TOKEN> = t ; </a> 0
<a> i ++ ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> final <RARE_TOKEN> < Long > <RARE_TOKEN> = new <RARE_TOKEN> < Long > ( ) ; </a> 0
<a> ScheduledFuture < ? > f = loop . <RARE_TOKEN> ( new Runnable ( ) { </a> 1
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . add ( System . <RARE_TOKEN> ( ) ) ; </a> 0
<a> try { </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 1
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } , <RARE_TOKEN> , <RARE_TOKEN> , TimeUnit . MILLISECONDS ) ; </a> 0
<a> Thread . sleep ( <RARE_TOKEN> ) ; </a> 0
<a> assertTrue ( f . cancel ( true ) ) ; </a> 0
<a> assertEquals ( 3 , <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> Long <RARE_TOKEN> = null ; </a> 0
<a> for ( Long t : <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> == null ) { </a> 0
<a> <RARE_TOKEN> = t ; </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> assertTrue ( t . <RARE_TOKEN> ( ) - <RARE_TOKEN> . <RARE_TOKEN> ( ) >= TimeUnit . MILLISECONDS . <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> = t ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 0
<a> final int <RARE_TOKEN> = 3 ; </a> 0
<a> final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( ) ; </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 0
<a> final Runnable task = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> while ( latch . <RARE_TOKEN> ( ) > 0 ) { </a> 0
<a> try { </a> 0
<a> latch . await ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; i ++ ) { </a> 0
<a> loop . execute ( task ) ; </a> 1
<a> } </a> 0
<a> while ( <RARE_TOKEN> . get ( ) == 0 ) { </a> 0
<a> Thread . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> assertEquals ( 1 , <RARE_TOKEN> . get ( ) ) ; </a> 0
<a> loop . shutdown ( ) ; </a> 1
<a> latch . countDown ( ) ; </a> 0
<a> while ( ! loop . <RARE_TOKEN> ( ) ) { </a> 1
<a> loop . <RARE_TOKEN> ( 1 , TimeUnit . <RARE_TOKEN> ) ; </a> 1
<a> } </a> 0
<a> assertEquals ( <RARE_TOKEN> , <RARE_TOKEN> . get ( ) ) ; </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> extends <RARE_TOKEN> { </a> 1
<a> final AtomicInteger <RARE_TOKEN> = new AtomicInteger ( ) ; </a> 0
<a> <RARE_TOKEN> ( ) { </a> 1
<a> super ( null , <RARE_TOKEN> . <RARE_TOKEN> ( ) , </a> 1
<a> new <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void run ( ) { </a> 0
<a> for ( ; ; ) { </a> 1
<a> Runnable task ; </a> 1
<a> try { </a> 1
<a> task = <RARE_TOKEN> ( ) ; </a> 1
<a> task . run ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 1
<a> } </a> 1
<a> if ( <RARE_TOKEN> ( ) && <RARE_TOKEN> ( ) == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( ) { </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void <RARE_TOKEN> ( boolean inEventLoop ) { </a> 1
<a> if ( ! inEventLoop && <RARE_TOKEN> ( ) ) { </a> 1
<a> <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ChannelFuture <RARE_TOKEN> ( Channel channel , ChannelFuture future ) { </a> 0
<a> return future ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel ; </a> 0
<a> import static org . <RARE_TOKEN> . <RARE_TOKEN> . * ; </a> 0
<a> import static org . junit . Assert . * ; </a> 0
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> @ Test </a> 0
<a> public void <RARE_TOKEN> ( ) { </a> 0
<a> Channel channel = <RARE_TOKEN> ( Channel . class ) ; </a> 0
<a> <RARE_TOKEN> future = new <RARE_TOKEN> ( channel ) ; </a> 0
<a> assertTrue ( future . <RARE_TOKEN> ( ) ) ; </a> 0
<a> assertNull ( future . cause ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . Bootstrap ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 1
<a> import io . netty . channel . Channel ; </a> 1
<a> import io . netty . channel . ChannelHandlerContext ; </a> 1
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . channel . ChannelInitializer ; </a> 1
<a> import io . netty . logging . InternalLogger ; </a> 0
<a> import io . netty . logging . InternalLoggerFactory ; </a> 0
<a> import org . junit . Assert ; </a> 1
<a> import org . junit . Test ; </a> 1
<a> public class <RARE_TOKEN> { </a> 1
<a> private static final InternalLogger logger = </a> 1
<a> InternalLoggerFactory . getInstance ( <RARE_TOKEN> . class ) ; </a> 1
<a> private static final String <RARE_TOKEN> = <RARE_TOKEN> ; </a> 1
<a> @ Test </a> 1
<a> public void <RARE_TOKEN> ( ) throws Exception { </a> 1
<a> for ( int i = 0 ; i < 2 ; i ++ ) { </a> 1
<a> LocalAddress <RARE_TOKEN> = new LocalAddress ( <RARE_TOKEN> ) ; </a> 1
<a> Bootstrap cb = new Bootstrap ( ) ; </a> 0
<a> ServerBootstrap sb = new ServerBootstrap ( ) ; </a> 1
<a> cb . group ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . remoteAddress ( <RARE_TOKEN> ) </a> 0
<a> . handler ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> sb . group ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( new ChannelInitializer < <RARE_TOKEN> > ( ) { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> ch ) throws Exception { </a> 1
<a> ch . pipeline ( ) . addLast ( new <RARE_TOKEN> ( ) ) ; </a> 1
<a> } </a> 1
<a> } ) ; </a> 1
<a> Channel sc = sb . bind ( ) . sync ( ) . channel ( ) ; </a> 0
<a> Channel <RARE_TOKEN> = cb . connect ( ) . sync ( ) . channel ( ) ; </a> 0
<a> <RARE_TOKEN> . pipeline ( ) . <RARE_TOKEN> ( ) . add ( <RARE_TOKEN> <RARE_TOKEN> ) ; </a> 1
<a> <RARE_TOKEN> . pipeline ( ) . fireInboundBufferUpdated ( ) ; </a> 1
<a> <RARE_TOKEN> . close ( ) . sync ( ) ; </a> 1
<a> sb . shutdown ( ) ; </a> 0
<a> cb . shutdown ( ) ; </a> 0
<a> sc . <RARE_TOKEN> ( ) . sync ( ) ; </a> 1
<a> Assert . assertTrue ( String . format ( </a> 1
<a> <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> channel <RARE_TOKEN> for <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , </a> 1
<a> <RARE_TOKEN> . get ( <RARE_TOKEN> ) , <RARE_TOKEN> ) , </a> 1
<a> <RARE_TOKEN> . get ( <RARE_TOKEN> ) == null ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> static class <RARE_TOKEN> extends ChannelInboundMessageHandlerAdapter < String > { </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , String msg ) throws Exception { </a> 1
<a> logger . info ( String . format ( <RARE_TOKEN> <RARE_TOKEN> <RARE_TOKEN> , msg ) ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> } </a> 1
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . bootstrap . ServerBootstrap ; </a> 0
<a> import io . netty . buffer . ByteBuf ; </a> 0
<a> import io . netty . buffer . MessageBuf ; </a> 1
<a> import io . netty . buffer . Unpooled ; </a> 1
<a> import io . netty . channel . Channel ; </a> 0
<a> import io . netty . channel . ChannelFuture ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . ChannelHandlerContext ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . ChannelInboundMessageHandlerAdapter ; </a> 1
<a> import io . netty . channel . ChannelInitializer ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 1
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import io . netty . channel . <RARE_TOKEN> ; </a> 0
<a> import java . util . HashSet ; </a> 1
<a> import java . util . <RARE_TOKEN> ; </a> 0
<a> import java . util . Set ; </a> 1
<a> import java . util . concurrent . ConcurrentLinkedQueue ; </a> 0
<a> import java . util . concurrent . CountDownLatch ; </a> 1
<a> import java . util . concurrent . ThreadFactory ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 1
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> import java . util . concurrent . atomic . AtomicReference ; </a> 0
<a> import org . junit . <RARE_TOKEN> ; </a> 1
<a> import org . junit . Assert ; </a> 1
<a> import org . junit . <RARE_TOKEN> ; </a> 1
<a> import org . junit . Test ; </a> 0
<a> public class <RARE_TOKEN> { </a> 0
<a> private static ServerBootstrap sb ; </a> 0
<a> private static LocalAddress <RARE_TOKEN> ; </a> 1
<a> @ <RARE_TOKEN> </a> 0
<a> public static void init ( ) { </a> 0
<a> sb = new ServerBootstrap ( ) ; </a> 0
<a> sb . group ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . channel ( new <RARE_TOKEN> ( ) ) </a> 0
<a> . localAddress ( LocalAddress . <RARE_TOKEN> ) </a> 0
<a> . <RARE_TOKEN> ( new ChannelInitializer < <RARE_TOKEN> > ( ) { </a> 0
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( <RARE_TOKEN> ch ) throws Exception { </a> 0
<a> ch . pipeline ( ) . addLast ( new ChannelInboundMessageHandlerAdapter < Object > ( ) { </a> 1
<a> @ Override </a> 0
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx , Object msg ) { </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> <RARE_TOKEN> = ( LocalAddress ) sb . bind ( ) . <RARE_TOKEN> ( ) . channel ( ) . localAddress ( ) ; </a> 1
<a> } </a> 0
<a> @ <RARE_TOKEN> </a> 0
<a> public static void destroy ( ) { </a> 1
<a> sb . shutdown ( ) ; </a> 0
<a> } </a> 0
<a> @ Test ( timeout = <RARE_TOKEN> ) </a> 1
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> for ( int i = 0 ; i < 10 ; i ++ ) { </a> 0
<a> <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Test ( timeout = <RARE_TOKEN> ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> <RARE_TOKEN> l = new <RARE_TOKEN> ( 4 , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 4 , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 4 , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> Channel ch = new <RARE_TOKEN> ( ) ; </a> 0
<a> ch . pipeline ( ) . addLast ( <RARE_TOKEN> ) ; </a> 0
<a> ch . pipeline ( ) . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> ch . pipeline ( ) . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> l . <RARE_TOKEN> ( ch ) . sync ( ) . channel ( ) . connect ( <RARE_TOKEN> ) . sync ( ) ; </a> 1
<a> ch . pipeline ( ) . fireInboundBufferUpdated ( ) ; </a> 1
<a> ch . pipeline ( ) . context ( <RARE_TOKEN> ) . fireInboundBufferUpdated ( ) ; </a> 1
<a> ch . pipeline ( ) . context ( <RARE_TOKEN> ) . fireInboundBufferUpdated ( ) ; </a> 1
<a> ch . pipeline ( ) . context ( <RARE_TOKEN> ) . fireInboundBufferUpdated ( ) ; </a> 1
<a> ch . pipeline ( ) . flush ( ) ; </a> 1
<a> ch . pipeline ( ) . context ( <RARE_TOKEN> ) . flush ( ) ; </a> 1
<a> ch . pipeline ( ) . context ( <RARE_TOKEN> ) . flush ( ) ; </a> 1
<a> ch . pipeline ( ) . context ( <RARE_TOKEN> ) . flush ( ) . sync ( ) ; </a> 1
<a> while ( <RARE_TOKEN> . <RARE_TOKEN> . size ( ) < 3 || <RARE_TOKEN> . <RARE_TOKEN> . size ( ) < 3 ) { </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> Thread . sleep ( 10 ) ; </a> 0
<a> } </a> 0
<a> String <RARE_TOKEN> = Thread . currentThread ( ) . getName ( ) ; </a> 0
<a> try { </a> 0
<a> Assert . assertFalse ( <RARE_TOKEN> . <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertFalse ( <RARE_TOKEN> . <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertFalse ( <RARE_TOKEN> . <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertFalse ( <RARE_TOKEN> . <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertFalse ( <RARE_TOKEN> . <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> Assert . assertFalse ( <RARE_TOKEN> . <RARE_TOKEN> . contains ( <RARE_TOKEN> ) ) ; </a> 0
<a> for ( String name : <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> Assert . assertTrue ( name . startsWith ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> for ( String name : <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> Assert . assertTrue ( name . startsWith ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> for ( String name : <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> Assert . assertTrue ( name . startsWith ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> for ( String name : <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> Assert . assertTrue ( name . startsWith ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> for ( String name : <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> Assert . assertTrue ( name . startsWith ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> for ( String name : <RARE_TOKEN> . <RARE_TOKEN> ) { </a> 0
<a> Assert . assertTrue ( name . startsWith ( <RARE_TOKEN> ) ) ; </a> 0
<a> } </a> 0
<a> Set < String > names = new HashSet < String > ( ) ; </a> 1
<a> names . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> names . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> Assert . assertEquals ( 1 , names . size ( ) ) ; </a> 1
<a> names . clear ( ) ; </a> 1
<a> names . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> names . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> Assert . assertEquals ( 1 , names . size ( ) ) ; </a> 1
<a> names . clear ( ) ; </a> 1
<a> names . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> names . <RARE_TOKEN> ( <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 1
<a> Assert . assertEquals ( 1 , names . size ( ) ) ; </a> 1
<a> Assert . assertEquals ( 1 , <RARE_TOKEN> . <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> Assert . assertEquals ( 2 , <RARE_TOKEN> . <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> Assert . assertEquals ( 3 , <RARE_TOKEN> . <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> Assert . assertEquals ( 3 , <RARE_TOKEN> . <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> Assert . assertEquals ( 2 , <RARE_TOKEN> . <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> Assert . assertEquals ( 1 , <RARE_TOKEN> . <RARE_TOKEN> . size ( ) ) ; </a> 0
<a> } catch ( <RARE_TOKEN> e ) { </a> 0
<a> System . out . println ( <RARE_TOKEN> " + <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> " + <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> " + <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> " + <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> " + <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> System . out . println ( <RARE_TOKEN> " + <RARE_TOKEN> . <RARE_TOKEN> ) ; </a> 0
<a> throw e ; </a> 0
<a> } finally { </a> 0
<a> l . shutdown ( ) ; </a> 1
<a> l . <RARE_TOKEN> ( 5 , TimeUnit . SECONDS ) ; </a> 0
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 5 , TimeUnit . SECONDS ) ; </a> 0
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 1
<a> <RARE_TOKEN> . <RARE_TOKEN> ( 5 , TimeUnit . SECONDS ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Test ( timeout = <RARE_TOKEN> ) </a> 0
<a> public void <RARE_TOKEN> ( ) throws Throwable { </a> 0
<a> <RARE_TOKEN> l = new <RARE_TOKEN> ( 4 , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 4 , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 4 , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 4 , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 4 , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( 4 , new <RARE_TOKEN> ( <RARE_TOKEN> ) ) ; </a> 0
<a> try { </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 1
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final <RARE_TOKEN> <RARE_TOKEN> = new <RARE_TOKEN> ( ) ; </a> 0
<a> final Channel ch = new <RARE_TOKEN> ( ) ; </a> 0
<a> ch . pipeline ( ) . addLast ( <RARE_TOKEN> ) </a> 0
<a> . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) </a> 0
<a> . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) </a> 0
<a> . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) </a> 0
<a> . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) </a> 0
<a> . addLast ( <RARE_TOKEN> , <RARE_TOKEN> ) ; </a> 0
<a> l . <RARE_TOKEN> ( ch ) . sync ( ) . channel ( ) . connect ( <RARE_TOKEN> ) . sync ( ) ; </a> 1
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> final int <RARE_TOKEN> = <RARE_TOKEN> * <RARE_TOKEN> ; </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; ) { </a> 0
<a> final int start = i ; </a> 0
<a> final int end = i + <RARE_TOKEN> ; </a> 0
<a> i = end ; </a> 0
<a> ch . eventLoop ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> MessageBuf < Object > buf = ch . pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( int j = start ; j < end ; j ++ ) { </a> 0
<a> buf . add ( Integer . valueOf ( j ) ) ; </a> 1
<a> } </a> 0
<a> ch . pipeline ( ) . fireInboundBufferUpdated ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> while ( <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> || <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> || <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> || <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> || <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> Thread . sleep ( 10 ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < <RARE_TOKEN> ; ) { </a> 0
<a> final int start = i ; </a> 0
<a> final int end = i + <RARE_TOKEN> ; </a> 0
<a> i = end ; </a> 0
<a> ch . pipeline ( ) . context ( <RARE_TOKEN> ) . executor ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> MessageBuf < Object > buf = ch . pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( int j = start ; j < end ; j ++ ) { </a> 0
<a> buf . add ( Integer . valueOf ( j ) ) ; </a> 1
<a> } </a> 0
<a> ch . pipeline ( ) . flush ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> while ( <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> || <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> || <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> || </a> 0
<a> <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> || <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> || <RARE_TOKEN> . <RARE_TOKEN> < <RARE_TOKEN> ) { </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> if ( <RARE_TOKEN> . exception . get ( ) != null ) { </a> 0
<a> throw <RARE_TOKEN> . exception . get ( ) ; </a> 0
<a> } </a> 0
<a> Thread . sleep ( 10 ) ; </a> 0
<a> } </a> 0
<a> ch . close ( ) . sync ( ) ; </a> 0
<a> <RARE_TOKEN> . latch . await ( ) ; </a> 1
<a> } finally { </a> 0
<a> l . shutdown ( ) ; </a> 1
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 1
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 1
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 1
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 1
<a> <RARE_TOKEN> . shutdown ( ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> < Object > , </a> 1
<a> <RARE_TOKEN> < Object > { </a> 1
<a> private final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; </a> 0
<a> private final <RARE_TOKEN> < String > <RARE_TOKEN> = new ConcurrentLinkedQueue < String > ( ) ; </a> 0
<a> private final <RARE_TOKEN> < String > <RARE_TOKEN> = new ConcurrentLinkedQueue < String > ( ) ; </a> 0
<a> @ Override </a> 0
<a> public MessageBuf < Object > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public MessageBuf < Object > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( </a> 1
<a> ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> ctx . <RARE_TOKEN> ( ) . clear ( ) ; </a> 1
<a> <RARE_TOKEN> . add ( Thread . currentThread ( ) . getName ( ) ) ; </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void flush ( ChannelHandlerContext ctx , </a> 1
<a> ChannelFuture future ) throws Exception { </a> 0
<a> ctx . <RARE_TOKEN> ( ) . clear ( ) ; </a> 1
<a> <RARE_TOKEN> . add ( Thread . currentThread ( ) . getName ( ) ) ; </a> 0
<a> ctx . flush ( future ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 0
<a> exception . <RARE_TOKEN> ( null , cause ) ; </a> 0
<a> System . <RARE_TOKEN> . print ( <RARE_TOKEN> + Thread . currentThread ( ) . getName ( ) + <RARE_TOKEN> " ) ; </a> 0
<a> cause . printStackTrace ( ) ; </a> 0
<a> super . exceptionCaught ( ctx , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> </a> 0
<a> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> < Integer > , <RARE_TOKEN> { </a> 1
<a> private final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private volatile Thread t ; </a> 0
<a> @ Override </a> 0
<a> public MessageBuf < Integer > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public ByteBuf <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . buffer ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( </a> 1
<a> ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> Thread t = this . t ; </a> 0
<a> if ( t == null ) { </a> 0
<a> this . t = Thread . currentThread ( ) ; </a> 0
<a> } else { </a> 0
<a> Assert . assertSame ( t , Thread . currentThread ( ) ) ; </a> 1
<a> } </a> 0
<a> MessageBuf < Integer > in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuf out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> Integer msg = in . poll ( ) ; </a> 1
<a> if ( msg == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> int expected = <RARE_TOKEN> ++ ; </a> 0
<a> Assert . assertEquals ( expected , msg . <RARE_TOKEN> ( ) ) ; </a> 1
<a> out . writeInt ( msg ) ; </a> 1
<a> } </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ChannelHandlerContext ctx , </a> 1
<a> ChannelFuture future ) throws Exception { </a> 0
<a> Assert . assertSame ( t , Thread . currentThread ( ) ) ; </a> 1
<a> boolean <RARE_TOKEN> = this == ctx . pipeline ( ) . <RARE_TOKEN> ( ) ; </a> 0
<a> ByteBuf in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> MessageBuf < Object > out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> while ( in . readableBytes ( ) >= 4 ) { </a> 1
<a> int msg = in . <RARE_TOKEN> ( ) ; </a> 1
<a> int expected = <RARE_TOKEN> ++ ; </a> 0
<a> Assert . assertEquals ( expected , msg ) ; </a> 1
<a> if ( ! <RARE_TOKEN> ) { </a> 0
<a> out . add ( msg ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> in . unsafe ( ) . <RARE_TOKEN> ( ) ; </a> 1
<a> if ( <RARE_TOKEN> ) { </a> 0
<a> future . <RARE_TOKEN> ( ) ; </a> 0
<a> } else { </a> 0
<a> ctx . flush ( future ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 0
<a> exception . <RARE_TOKEN> ( null , cause ) ; </a> 0
<a> super . exceptionCaught ( ctx , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> , <RARE_TOKEN> < Integer > { </a> 1
<a> private final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private volatile Thread t ; </a> 0
<a> @ Override </a> 0
<a> public ByteBuf <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . buffer ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public MessageBuf < Integer > <RARE_TOKEN> ( </a> 1
<a> ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( </a> 1
<a> ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> Thread t = this . t ; </a> 0
<a> if ( t == null ) { </a> 0
<a> this . t = Thread . currentThread ( ) ; </a> 0
<a> } else { </a> 0
<a> Assert . assertSame ( t , Thread . currentThread ( ) ) ; </a> 1
<a> } </a> 0
<a> ByteBuf in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> MessageBuf < Object > out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> while ( in . readableBytes ( ) >= 4 ) { </a> 1
<a> int msg = in . <RARE_TOKEN> ( ) ; </a> 1
<a> int expected = <RARE_TOKEN> ++ ; </a> 0
<a> Assert . assertEquals ( expected , msg ) ; </a> 1
<a> out . add ( msg ) ; </a> 1
<a> } </a> 0
<a> in . <RARE_TOKEN> ( ) ; </a> 1
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 1
<a> public void flush ( ChannelHandlerContext ctx , </a> 1
<a> ChannelFuture future ) throws Exception { </a> 0
<a> Assert . assertSame ( t , Thread . currentThread ( ) ) ; </a> 1
<a> MessageBuf < Integer > in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> ByteBuf out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> Integer msg = in . poll ( ) ; </a> 1
<a> if ( msg == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> int expected = <RARE_TOKEN> ++ ; </a> 0
<a> Assert . assertEquals ( expected , msg . <RARE_TOKEN> ( ) ) ; </a> 1
<a> out . writeInt ( msg ) ; </a> 1
<a> } </a> 0
<a> ctx . flush ( future ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 0
<a> exception . <RARE_TOKEN> ( null , cause ) ; </a> 0
<a> super . exceptionCaught ( ctx , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> < Object > , <RARE_TOKEN> < Object > { </a> 1
<a> private final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private volatile Thread t ; </a> 0
<a> @ Override </a> 0
<a> public MessageBuf < Object > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public MessageBuf < Object > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> Thread t = this . t ; </a> 0
<a> if ( t == null ) { </a> 0
<a> this . t = Thread . currentThread ( ) ; </a> 0
<a> } else { </a> 0
<a> Assert . assertSame ( t , Thread . currentThread ( ) ) ; </a> 1
<a> } </a> 0
<a> MessageBuf < Object > in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> MessageBuf < Object > out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> Object msg = in . poll ( ) ; </a> 1
<a> if ( msg == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> int expected = <RARE_TOKEN> ++ ; </a> 0
<a> Assert . assertEquals ( expected , msg ) ; </a> 1
<a> out . add ( msg ) ; </a> 1
<a> } </a> 0
<a> ctx . fireInboundBufferUpdated ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ChannelHandlerContext ctx , </a> 1
<a> ChannelFuture future ) throws Exception { </a> 0
<a> Assert . assertSame ( t , Thread . currentThread ( ) ) ; </a> 1
<a> MessageBuf < Object > in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> MessageBuf < Object > out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> Object msg = in . poll ( ) ; </a> 1
<a> if ( msg == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> int expected = <RARE_TOKEN> ++ ; </a> 0
<a> Assert . assertEquals ( expected , msg ) ; </a> 1
<a> out . add ( msg ) ; </a> 1
<a> } </a> 0
<a> ctx . flush ( future ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 0
<a> exception . <RARE_TOKEN> ( null , cause ) ; </a> 0
<a> System . <RARE_TOKEN> . print ( <RARE_TOKEN> + Thread . currentThread ( ) . getName ( ) + <RARE_TOKEN> " ) ; </a> 0
<a> cause . printStackTrace ( ) ; </a> 0
<a> super . exceptionCaught ( ctx , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> </a> 1
<a> extends <RARE_TOKEN> </a> 0
<a> implements <RARE_TOKEN> < Object > , <RARE_TOKEN> < Object > { </a> 1
<a> private final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private volatile int <RARE_TOKEN> ; </a> 0
<a> private volatile Thread t ; </a> 0
<a> final CountDownLatch latch = new CountDownLatch ( 1 ) ; </a> 1
<a> @ Override </a> 0
<a> public MessageBuf < Object > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public MessageBuf < Object > <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 0
<a> return Unpooled . <RARE_TOKEN> ( ) ; </a> 0
<a> } </a> 1
<a> @ Override </a> 1
<a> public void inboundBufferUpdated ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> Thread t = this . t ; </a> 0
<a> if ( t == null ) { </a> 0
<a> this . t = Thread . currentThread ( ) ; </a> 0
<a> } else { </a> 0
<a> Assert . assertSame ( t , Thread . currentThread ( ) ) ; </a> 1
<a> } </a> 0
<a> MessageBuf < Object > in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> Object msg = in . poll ( ) ; </a> 1
<a> if ( msg == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> int expected = <RARE_TOKEN> ++ ; </a> 0
<a> Assert . assertEquals ( expected , msg ) ; </a> 1
<a> } </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void flush ( ChannelHandlerContext ctx , </a> 1
<a> ChannelFuture future ) throws Exception { </a> 0
<a> Assert . assertSame ( t , Thread . currentThread ( ) ) ; </a> 1
<a> MessageBuf < Object > in = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> MessageBuf < Object > out = ctx . <RARE_TOKEN> ( ) ; </a> 1
<a> for ( ; ; ) { </a> 1
<a> Object msg = in . poll ( ) ; </a> 1
<a> if ( msg == null ) { </a> 1
<a> break ; </a> 1
<a> } </a> 1
<a> int expected = <RARE_TOKEN> ++ ; </a> 0
<a> Assert . assertEquals ( expected , msg ) ; </a> 1
<a> out . add ( msg ) ; </a> 1
<a> } </a> 0
<a> ctx . flush ( future ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void <RARE_TOKEN> ( ChannelHandlerContext ctx ) throws Exception { </a> 1
<a> latch . countDown ( ) ; </a> 1
<a> } </a> 1
<a> @ Override </a> 1
<a> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { </a> 1
<a> exception . <RARE_TOKEN> ( null , cause ) ; </a> 0
<a> super . exceptionCaught ( ctx , cause ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class <RARE_TOKEN> implements ThreadFactory { </a> 0
<a> private final String <RARE_TOKEN> ; </a> 0
<a> private final AtomicInteger id = new AtomicInteger ( ) ; </a> 0
<a> public <RARE_TOKEN> ( String <RARE_TOKEN> ) { </a> 0
<a> this . <RARE_TOKEN> = <RARE_TOKEN> ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Thread <RARE_TOKEN> ( Runnable r ) { </a> 0
<a> Thread t = new Thread ( r ) ; </a> 0
<a> t . <RARE_TOKEN> ( <RARE_TOKEN> + <RARE_TOKEN> + id . <RARE_TOKEN> ( ) ) ; </a> 0
<a> t . <RARE_TOKEN> ( true ) ; </a> 0
<a> return t ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
