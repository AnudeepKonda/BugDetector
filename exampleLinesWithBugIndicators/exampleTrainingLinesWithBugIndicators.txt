<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . annotation . SuppressLint ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import java . io . InvalidObjectException ; </a> 0
<a> import java . io . ObjectInputStream ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public final class AccessToken implements Serializable { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> static final String ACCESS_TOKEN_KEY = "access_token" ; </a> 0
<a> static final String EXPIRES_IN_KEY = "expires_in" ; </a> 0
<a> private static final Date MIN_DATE = new Date ( Long . MIN_VALUE ) ; </a> 0
<a> private static final Date MAX_DATE = new Date ( Long . MAX_VALUE ) ; </a> 0
<a> private static final Date DEFAULT_EXPIRATION_TIME = MAX_DATE ; </a> 0
<a> private static final Date DEFAULT_LAST_REFRESH_TIME = new Date ( ) ; </a> 0
<a> private static final AccessTokenSource DEFAULT_ACCESS_TOKEN_SOURCE = AccessTokenSource . FACEBOOK_APPLICATION_WEB ; </a> 0
<a> private static final Date ALREADY_EXPIRED_EXPIRATION_TIME = MIN_DATE ; </a> 0
<a> private final Date expires ; </a> 0
<a> private final List < String > permissions ; </a> 0
<a> private final String token ; </a> 0
<a> private final AccessTokenSource source ; </a> 0
<a> private final Date lastRefresh ; </a> 0
<a> AccessToken ( String token , Date expires , List < String > permissions , AccessTokenSource source , Date lastRefresh ) { </a> 0
<a> if ( permissions == null ) { </a> 0
<a> permissions = Collections . emptyList ( ) ; </a> 0
<a> } </a> 0
<a> this . expires = expires ; </a> 0
<a> this . permissions = Collections . unmodifiableList ( permissions ) ; </a> 0
<a> this . token = token ; </a> 0
<a> this . source = source ; </a> 0
<a> this . lastRefresh = lastRefresh ; </a> 0
<a> } </a> 0
<a> public String getToken ( ) { </a> 0
<a> return this . token ; </a> 0
<a> } </a> 0
<a> public Date getExpires ( ) { </a> 0
<a> return this . expires ; </a> 0
<a> } </a> 0
<a> public List < String > getPermissions ( ) { </a> 0
<a> return this . permissions ; </a> 0
<a> } </a> 0
<a> public AccessTokenSource getSource ( ) { </a> 0
<a> return source ; </a> 0
<a> } </a> 0
<a> public Date getLastRefresh ( ) { </a> 0
<a> return this . lastRefresh ; </a> 0
<a> } </a> 0
<a> public static AccessToken createFromExistingAccessToken ( String accessToken , Date expirationTime , </a> 0
<a> Date lastRefreshTime , AccessTokenSource accessTokenSource , List < String > permissions ) { </a> 0
<a> if ( expirationTime == null ) { </a> 0
<a> expirationTime = DEFAULT_EXPIRATION_TIME ; </a> 0
<a> } </a> 0
<a> if ( lastRefreshTime == null ) { </a> 0
<a> lastRefreshTime = DEFAULT_LAST_REFRESH_TIME ; </a> 0
<a> } </a> 0
<a> if ( accessTokenSource == null ) { </a> 0
<a> accessTokenSource = DEFAULT_ACCESS_TOKEN_SOURCE ; </a> 0
<a> } </a> 0
<a> return new AccessToken ( accessToken , expirationTime , permissions , accessTokenSource , lastRefreshTime ) ; </a> 0
<a> } </a> 0
<a> public static AccessToken createFromNativeLinkingIntent ( Intent intent ) { </a> 0
<a> Validate . notNull ( intent , "intent" ) ; </a> 0
<a> if ( intent . getExtras ( ) == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return createFromBundle ( null , intent . getExtras ( ) , AccessTokenSource . FACEBOOK_APPLICATION_WEB , new Date ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> StringBuilder builder = new StringBuilder ( ) ; </a> 0
<a> builder . append ( "{AccessToken" ) ; </a> 0
<a> builder . append ( " token:" ) . append ( tokenToString ( ) ) ; </a> 0
<a> appendPermissions ( builder ) ; </a> 0
<a> builder . append ( "}" ) ; </a> 0
<a> return builder . toString ( ) ; </a> 0
<a> } </a> 0
<a> static AccessToken createEmptyToken ( List < String > permissions ) { </a> 0
<a> return new AccessToken ( "" , ALREADY_EXPIRED_EXPIRATION_TIME , permissions , AccessTokenSource . NONE , </a> 0
<a> DEFAULT_LAST_REFRESH_TIME ) ; </a> 0
<a> } </a> 0
<a> static AccessToken createFromString ( String token , List < String > permissions , AccessTokenSource source ) { </a> 0
<a> return new AccessToken ( token , DEFAULT_EXPIRATION_TIME , permissions , source , DEFAULT_LAST_REFRESH_TIME ) ; </a> 0
<a> } </a> 0
<a> static AccessToken createFromNativeLogin ( Bundle bundle , AccessTokenSource source ) { </a> 0
<a> Date expires = getBundleLongAsDate ( </a> 0
<a> bundle , NativeProtocol . EXTRA_EXPIRES_SECONDS_SINCE_EPOCH , new Date ( 0 ) ) ; </a> 0
<a> ArrayList < String > permissions = bundle . getStringArrayList ( NativeProtocol . EXTRA_PERMISSIONS ) ; </a> 0
<a> String token = bundle . getString ( NativeProtocol . EXTRA_ACCESS_TOKEN ) ; </a> 0
<a> return createNew ( permissions , token , expires , source ) ; </a> 0
<a> } </a> 0
<a> static AccessToken createFromWebBundle ( List < String > requestedPermissions , Bundle bundle , AccessTokenSource source ) { </a> 0
<a> Date expires = getBundleLongAsDate ( bundle , EXPIRES_IN_KEY , new Date ( ) ) ; </a> 0
<a> String token = bundle . getString ( ACCESS_TOKEN_KEY ) ; </a> 0
<a> return createNew ( requestedPermissions , token , expires , source ) ; </a> 0
<a> } </a> 0
<a> @ SuppressLint ( "FieldGetter" ) </a> 0
<a> static AccessToken createFromRefresh ( AccessToken current , Bundle bundle ) { </a> 0
<a> assert ( current . source == AccessTokenSource . FACEBOOK_APPLICATION_WEB || </a> 0
<a> current . source == AccessTokenSource . FACEBOOK_APPLICATION_NATIVE || </a> 0
<a> current . source == AccessTokenSource . FACEBOOK_APPLICATION_SERVICE ) ; </a> 0
<a> Date expires = getBundleLongAsDate ( bundle , EXPIRES_IN_KEY , new Date ( 0 ) ) ; </a> 0
<a> String token = bundle . getString ( ACCESS_TOKEN_KEY ) ; </a> 0
<a> return createNew ( current . getPermissions ( ) , token , expires , current . source ) ; </a> 0
<a> } </a> 0
<a> static AccessToken createFromTokenWithRefreshedPermissions ( AccessToken token , List < String > permissions ) { </a> 0
<a> return new AccessToken ( token . token , token . expires , permissions , token . source , token . lastRefresh ) ; </a> 0
<a> } </a> 0
<a> private static AccessToken createNew ( </a> 0
<a> List < String > requestedPermissions , String accessToken , Date expires , AccessTokenSource source ) { </a> 0
<a> if ( Utility . isNullOrEmpty ( accessToken ) || ( expires == null ) ) { </a> 0
<a> return createEmptyToken ( requestedPermissions ) ; </a> 0
<a> } else { </a> 0
<a> return new AccessToken ( accessToken , expires , requestedPermissions , source , new Date ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static AccessToken createFromCache ( Bundle bundle ) { </a> 0
<a> List < String > originalPermissions = bundle . getStringArrayList ( TokenCachingStrategy . PERMISSIONS_KEY ) ; </a> 0
<a> List < String > permissions ; </a> 0
<a> if ( originalPermissions == null ) { </a> 0
<a> permissions = Collections . emptyList ( ) ; </a> 0
<a> } else { </a> 0
<a> permissions = Collections . unmodifiableList ( new ArrayList < String > ( originalPermissions ) ) ; </a> 0
<a> } </a> 0
<a> return new AccessToken ( bundle . getString ( TokenCachingStrategy . TOKEN_KEY ) , TokenCachingStrategy . getDate ( bundle , </a> 0
<a> TokenCachingStrategy . EXPIRATION_DATE_KEY ) , permissions , TokenCachingStrategy . getSource ( bundle ) , </a> 0
<a> TokenCachingStrategy . getDate ( bundle , TokenCachingStrategy . LAST_REFRESH_DATE_KEY ) ) ; </a> 0
<a> } </a> 0
<a> Bundle toCacheBundle ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( TokenCachingStrategy . TOKEN_KEY , this . token ) ; </a> 0
<a> TokenCachingStrategy . putDate ( bundle , TokenCachingStrategy . EXPIRATION_DATE_KEY , expires ) ; </a> 0
<a> bundle . putStringArrayList ( TokenCachingStrategy . PERMISSIONS_KEY , new ArrayList < String > ( permissions ) ) ; </a> 0
<a> bundle . putSerializable ( TokenCachingStrategy . TOKEN_SOURCE_KEY , source ) ; </a> 0
<a> TokenCachingStrategy . putDate ( bundle , TokenCachingStrategy . LAST_REFRESH_DATE_KEY , lastRefresh ) ; </a> 0
<a> return bundle ; </a> 0
<a> } </a> 0
<a> boolean isInvalid ( ) { </a> 0
<a> return Utility . isNullOrEmpty ( this . token ) || new Date ( ) . after ( this . expires ) ; </a> 0
<a> } </a> 0
<a> private static AccessToken createFromBundle ( List < String > requestedPermissions , Bundle bundle , </a> 0
<a> AccessTokenSource source , </a> 0
<a> Date expirationBase ) { </a> 0
<a> String token = bundle . getString ( ACCESS_TOKEN_KEY ) ; </a> 0
<a> Date expires = getBundleLongAsDate ( bundle , EXPIRES_IN_KEY , expirationBase ) ; </a> 0
<a> if ( Utility . isNullOrEmpty ( token ) || ( expires == null ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return new AccessToken ( token , expires , requestedPermissions , source , new Date ( ) ) ; </a> 0
<a> } </a> 0
<a> private String tokenToString ( ) { </a> 0
<a> if ( this . token == null ) { </a> 0
<a> return "null" ; </a> 0
<a> } else if ( Settings . isLoggingBehaviorEnabled ( LoggingBehavior . INCLUDE_ACCESS_TOKENS ) ) { </a> 0
<a> return this . token ; </a> 0
<a> } else { </a> 0
<a> return "ACCESS_TOKEN_REMOVED" ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void appendPermissions ( StringBuilder builder ) { </a> 0
<a> builder . append ( " permissions:" ) ; </a> 0
<a> if ( this . permissions == null ) { </a> 0
<a> builder . append ( "null" ) ; </a> 0
<a> } else { </a> 0
<a> builder . append ( "[" ) ; </a> 0
<a> builder . append ( TextUtils . join ( ", " , permissions ) ) ; </a> 0
<a> builder . append ( "]" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class SerializationProxyV1 implements Serializable { </a> 0
<a> private static final long serialVersionUID = - 2488473066578201069L ; </a> 0
<a> private final Date expires ; </a> 0
<a> private final List < String > permissions ; </a> 0
<a> private final String token ; </a> 0
<a> private final AccessTokenSource source ; </a> 0
<a> private final Date lastRefresh ; </a> 0
<a> private SerializationProxyV1 ( String token , Date expires , </a> 0
<a> List < String > permissions , AccessTokenSource source , Date lastRefresh ) { </a> 0
<a> this . expires = expires ; </a> 0
<a> this . permissions = permissions ; </a> 0
<a> this . token = token ; </a> 0
<a> this . source = source ; </a> 0
<a> this . lastRefresh = lastRefresh ; </a> 0
<a> } </a> 0
<a> private Object readResolve ( ) { </a> 0
<a> return new AccessToken ( token , expires , permissions , source , lastRefresh ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private Object writeReplace ( ) { </a> 0
<a> return new SerializationProxyV1 ( token , expires , permissions , source , lastRefresh ) ; </a> 0
<a> } </a> 0
<a> private void readObject ( ObjectInputStream stream ) throws InvalidObjectException { </a> 0
<a> throw new InvalidObjectException ( "Cannot readObject, serialization proxy required" ) ; </a> 0
<a> } </a> 0
<a> private static Date getBundleLongAsDate ( Bundle bundle , String key , Date dateBase ) { </a> 0
<a> if ( bundle == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> long secondsFromBase = Long . MIN_VALUE ; </a> 0
<a> Object secondsObject = bundle . get ( key ) ; </a> 0
<a> if ( secondsObject instanceof Long ) { </a> 0
<a> secondsFromBase = ( Long ) secondsObject ; </a> 0
<a> } else if ( secondsObject instanceof String ) { </a> 0
<a> try { </a> 0
<a> secondsFromBase = Long . parseLong ( ( String ) secondsObject ) ; </a> 0
<a> } catch ( NumberFormatException e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( secondsFromBase == 0 ) { </a> 0
<a> return new Date ( Long . MAX_VALUE ) ; </a> 0
<a> } else { </a> 0
<a> return new Date ( dateBase . getTime ( ) + ( secondsFromBase * 1000L ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public enum AccessTokenSource { </a> 0
<a> NONE ( false ) , </a> 0
<a> FACEBOOK_APPLICATION_WEB ( true ) , </a> 0
<a> FACEBOOK_APPLICATION_NATIVE ( true ) , </a> 0
<a> FACEBOOK_APPLICATION_SERVICE ( true ) , </a> 0
<a> WEB_VIEW ( false ) , </a> 0
<a> TEST_USER ( true ) ; </a> 0
<a> private final boolean canExtendToken ; </a> 0
<a> AccessTokenSource ( boolean canExtendToken ) { </a> 0
<a> this . canExtendToken = canExtendToken ; </a> 0
<a> } </a> 0
<a> boolean canExtendToken ( ) { </a> 0
<a> return canExtendToken ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public class FacebookAuthorizationException extends FacebookException { </a> 0
<a> static final long serialVersionUID = 1 ; </a> 0
<a> public FacebookAuthorizationException ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> } </a> 0
<a> public FacebookAuthorizationException ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public FacebookAuthorizationException ( String message , Throwable throwable ) { </a> 0
<a> super ( message , throwable ) ; </a> 0
<a> } </a> 0
<a> public FacebookAuthorizationException ( Throwable throwable ) { </a> 0
<a> super ( throwable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public class FacebookException extends RuntimeException { </a> 0
<a> static final long serialVersionUID = 1 ; </a> 0
<a> public FacebookException ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> } </a> 0
<a> public FacebookException ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public FacebookException ( String message , Throwable throwable ) { </a> 0
<a> super ( message , throwable ) ; </a> 0
<a> } </a> 0
<a> public FacebookException ( Throwable throwable ) { </a> 0
<a> super ( throwable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public class FacebookGraphObjectException extends FacebookException { </a> 0
<a> static final long serialVersionUID = 1 ; </a> 0
<a> public FacebookGraphObjectException ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> } </a> 0
<a> public FacebookGraphObjectException ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public FacebookGraphObjectException ( String message , Throwable throwable ) { </a> 0
<a> super ( message , throwable ) ; </a> 0
<a> } </a> 0
<a> public FacebookGraphObjectException ( Throwable throwable ) { </a> 0
<a> super ( throwable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> public final class FacebookRequestError { </a> 0
<a> public static final int INVALID_ERROR_CODE = - 1 ; </a> 0
<a> public static final int INVALID_HTTP_STATUS_CODE = - 1 ; </a> 0
<a> private static final int INVALID_MESSAGE_ID = 0 ; </a> 0
<a> private static final String CODE_KEY = "code" ; </a> 0
<a> private static final String BODY_KEY = "body" ; </a> 0
<a> private static final String ERROR_KEY = "error" ; </a> 0
<a> private static final String ERROR_TYPE_FIELD_KEY = "type" ; </a> 0
<a> private static final String ERROR_CODE_FIELD_KEY = "code" ; </a> 0
<a> private static final String ERROR_MESSAGE_FIELD_KEY = "message" ; </a> 0
<a> private static final String ERROR_CODE_KEY = "error_code" ; </a> 0
<a> private static final String ERROR_SUB_CODE_KEY = "error_subcode" ; </a> 0
<a> private static final String ERROR_MSG_KEY = "error_msg" ; </a> 0
<a> private static final String ERROR_REASON_KEY = "error_reason" ; </a> 0
<a> private static class Range { </a> 0
<a> private final int start , end ; </a> 0
<a> private Range ( int start , int end ) { </a> 0
<a> this . start = start ; </a> 0
<a> this . end = end ; </a> 0
<a> } </a> 0
<a> boolean contains ( int value ) { </a> 0
<a> return start <= value && value <= end ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static final int EC_UNKNOWN_ERROR = 1 ; </a> 0
<a> private static final int EC_SERVICE_UNAVAILABLE = 2 ; </a> 0
<a> private static final int EC_APP_TOO_MANY_CALLS = 4 ; </a> 0
<a> private static final int EC_USER_TOO_MANY_CALLS = 17 ; </a> 0
<a> private static final int EC_PERMISSION_DENIED = 10 ; </a> 0
<a> private static final int EC_INVALID_SESSION = 102 ; </a> 0
<a> private static final int EC_INVALID_TOKEN = 190 ; </a> 0
<a> private static final Range EC_RANGE_PERMISSION = new Range ( 200 , 299 ) ; </a> 0
<a> private static final int EC_APP_NOT_INSTALLED = 458 ; </a> 0
<a> private static final int EC_USER_CHECKPOINTED = 459 ; </a> 0
<a> private static final int EC_PASSWORD_CHANGED = 460 ; </a> 0
<a> private static final int EC_UNCONFIRMED_USER = 464 ; </a> 0
<a> private static final Range HTTP_RANGE_SUCCESS = new Range ( 200 , 299 ) ; </a> 0
<a> private static final Range HTTP_RANGE_CLIENT_ERROR = new Range ( 400 , 499 ) ; </a> 0
<a> private static final Range HTTP_RANGE_SERVER_ERROR = new Range ( 500 , 599 ) ; </a> 0
<a> private final int userActionMessageId ; </a> 0
<a> private final boolean shouldNotifyUser ; </a> 0
<a> private final Category category ; </a> 0
<a> private final int requestStatusCode ; </a> 0
<a> private final int errorCode ; </a> 0
<a> private final int subErrorCode ; </a> 0
<a> private final String errorType ; </a> 0
<a> private final String errorMessage ; </a> 0
<a> private final JSONObject requestResult ; </a> 0
<a> private final JSONObject requestResultBody ; </a> 0
<a> private final Object batchRequestResult ; </a> 0
<a> private final HttpURLConnection connection ; </a> 0
<a> private final FacebookException exception ; </a> 0
<a> private FacebookRequestError ( int requestStatusCode , int errorCode , </a> 0
<a> int subErrorCode , String errorType , String errorMessage , JSONObject requestResultBody , </a> 0
<a> JSONObject requestResult , Object batchRequestResult , HttpURLConnection connection , </a> 0
<a> FacebookException exception ) { </a> 0
<a> this . requestStatusCode = requestStatusCode ; </a> 0
<a> this . errorCode = errorCode ; </a> 0
<a> this . subErrorCode = subErrorCode ; </a> 0
<a> this . errorType = errorType ; </a> 0
<a> this . errorMessage = errorMessage ; </a> 0
<a> this . requestResultBody = requestResultBody ; </a> 0
<a> this . requestResult = requestResult ; </a> 0
<a> this . batchRequestResult = batchRequestResult ; </a> 0
<a> this . connection = connection ; </a> 0
<a> boolean isLocalException = false ; </a> 0
<a> if ( exception != null ) { </a> 0
<a> this . exception = exception ; </a> 0
<a> isLocalException = true ; </a> 0
<a> } else { </a> 0
<a> this . exception = new FacebookServiceException ( this , errorMessage ) ; </a> 0
<a> } </a> 0
<a> Category errorCategory = null ; </a> 0
<a> int messageId = INVALID_MESSAGE_ID ; </a> 0
<a> boolean shouldNotify = false ; </a> 0
<a> if ( isLocalException ) { </a> 0
<a> errorCategory = Category . CLIENT ; </a> 0
<a> messageId = INVALID_MESSAGE_ID ; </a> 0
<a> } else { </a> 0
<a> if ( errorCode == EC_UNKNOWN_ERROR || errorCode == EC_SERVICE_UNAVAILABLE ) { </a> 0
<a> errorCategory = Category . SERVER ; </a> 0
<a> } else if ( errorCode == EC_APP_TOO_MANY_CALLS || errorCode == EC_USER_TOO_MANY_CALLS ) { </a> 0
<a> errorCategory = Category . THROTTLING ; </a> 0
<a> } else if ( errorCode == EC_PERMISSION_DENIED || EC_RANGE_PERMISSION . contains ( errorCode ) ) { </a> 0
<a> errorCategory = Category . PERMISSION ; </a> 0
<a> messageId = R . string . com_facebook_requesterror_permissions ; </a> 0
<a> } else if ( errorCode == EC_INVALID_SESSION || errorCode == EC_INVALID_TOKEN ) { </a> 0
<a> if ( subErrorCode == EC_USER_CHECKPOINTED || subErrorCode == EC_UNCONFIRMED_USER ) { </a> 0
<a> errorCategory = Category . AUTHENTICATION_RETRY ; </a> 0
<a> messageId = R . string . com_facebook_requesterror_web_login ; </a> 0
<a> shouldNotify = true ; </a> 0
<a> } else { </a> 0
<a> errorCategory = Category . AUTHENTICATION_REOPEN_SESSION ; </a> 0
<a> if ( subErrorCode == EC_APP_NOT_INSTALLED ) { </a> 1
<a> messageId = R . string . com_facebook_requesterror_relogin ; </a> 0
<a> } else if ( subErrorCode == EC_PASSWORD_CHANGED ) { </a> 0
<a> messageId = R . string . com_facebook_requesterror_password_changed ; </a> 0
<a> } else { </a> 0
<a> messageId = R . string . com_facebook_requesterror_reconnect ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( errorCategory == null ) { </a> 0
<a> if ( HTTP_RANGE_CLIENT_ERROR . contains ( requestStatusCode ) ) { </a> 0
<a> errorCategory = Category . BAD_REQUEST ; </a> 0
<a> } else if ( HTTP_RANGE_SERVER_ERROR . contains ( requestStatusCode ) ) { </a> 0
<a> errorCategory = Category . SERVER ; </a> 0
<a> } else { </a> 0
<a> errorCategory = Category . OTHER ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> this . category = errorCategory ; </a> 0
<a> this . userActionMessageId = messageId ; </a> 0
<a> this . shouldNotifyUser = shouldNotify ; </a> 0
<a> } </a> 0
<a> private FacebookRequestError ( int requestStatusCode , int errorCode , </a> 0
<a> int subErrorCode , String errorType , String errorMessage , JSONObject requestResultBody , </a> 0
<a> JSONObject requestResult , Object batchRequestResult , HttpURLConnection connection ) { </a> 0
<a> this ( requestStatusCode , errorCode , subErrorCode , errorType , errorMessage , </a> 0
<a> requestResultBody , requestResult , batchRequestResult , connection , null ) ; </a> 0
<a> } </a> 0
<a> FacebookRequestError ( HttpURLConnection connection , Exception exception ) { </a> 0
<a> this ( INVALID_HTTP_STATUS_CODE , INVALID_ERROR_CODE , INVALID_ERROR_CODE , </a> 0
<a> null , null , null , null , null , connection , </a> 0
<a> ( exception instanceof FacebookException ) ? </a> 0
<a> ( FacebookException ) exception : new FacebookException ( exception ) ) ; </a> 0
<a> } </a> 0
<a> public FacebookRequestError ( int errorCode , String errorType , String errorMessage ) { </a> 0
<a> this ( INVALID_HTTP_STATUS_CODE , errorCode , INVALID_ERROR_CODE , errorType , errorMessage , </a> 0
<a> null , null , null , null , null ) ; </a> 0
<a> } </a> 0
<a> public int getUserActionMessageId ( ) { </a> 0
<a> return userActionMessageId ; </a> 0
<a> } </a> 0
<a> public boolean shouldNotifyUser ( ) { </a> 0
<a> return shouldNotifyUser ; </a> 0
<a> } </a> 0
<a> public Category getCategory ( ) { </a> 0
<a> return category ; </a> 0
<a> } </a> 0
<a> public int getRequestStatusCode ( ) { </a> 0
<a> return requestStatusCode ; </a> 0
<a> } </a> 0
<a> public int getErrorCode ( ) { </a> 0
<a> return errorCode ; </a> 0
<a> } </a> 0
<a> public int getSubErrorCode ( ) { </a> 0
<a> return subErrorCode ; </a> 0
<a> } </a> 0
<a> public String getErrorType ( ) { </a> 0
<a> return errorType ; </a> 0
<a> } </a> 0
<a> public String getErrorMessage ( ) { </a> 0
<a> if ( errorMessage != null ) { </a> 0
<a> return errorMessage ; </a> 0
<a> } else { </a> 0
<a> return exception . getLocalizedMessage ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public JSONObject getRequestResultBody ( ) { </a> 0
<a> return requestResultBody ; </a> 0
<a> } </a> 0
<a> public JSONObject getRequestResult ( ) { </a> 0
<a> return requestResult ; </a> 0
<a> } </a> 0
<a> public Object getBatchRequestResult ( ) { </a> 0
<a> return batchRequestResult ; </a> 0
<a> } </a> 0
<a> public HttpURLConnection getConnection ( ) { </a> 0
<a> return connection ; </a> 0
<a> } </a> 0
<a> public FacebookException getException ( ) { </a> 0
<a> return exception ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return new StringBuilder ( "{HttpStatus: " ) </a> 0
<a> . append ( requestStatusCode ) </a> 0
<a> . append ( ", errorCode: " ) </a> 0
<a> . append ( errorCode ) </a> 0
<a> . append ( ", errorType: " ) </a> 0
<a> . append ( errorType ) </a> 0
<a> . append ( ", errorMessage: " ) </a> 0
<a> . append ( errorMessage ) </a> 0
<a> . append ( "}" ) </a> 0
<a> . toString ( ) ; </a> 0
<a> } </a> 0
<a> static FacebookRequestError checkResponseAndCreateError ( JSONObject singleResult , </a> 0
<a> Object batchResult , HttpURLConnection connection ) { </a> 0
<a> try { </a> 0
<a> if ( singleResult . has ( CODE_KEY ) ) { </a> 0
<a> int responseCode = singleResult . getInt ( CODE_KEY ) ; </a> 0
<a> Object body = Utility . getStringPropertyAsJSON ( singleResult , BODY_KEY , </a> 0
<a> Response . NON_JSON_RESPONSE_PROPERTY ) ; </a> 0
<a> if ( body != null && body instanceof JSONObject ) { </a> 0
<a> JSONObject jsonBody = ( JSONObject ) body ; </a> 0
<a> String errorType = null ; </a> 0
<a> String errorMessage = null ; </a> 0
<a> int errorCode = INVALID_ERROR_CODE ; </a> 0
<a> int errorSubCode = INVALID_ERROR_CODE ; </a> 0
<a> boolean hasError = false ; </a> 0
<a> if ( jsonBody . has ( ERROR_KEY ) ) { </a> 0
<a> JSONObject error = ( JSONObject ) Utility . getStringPropertyAsJSON ( jsonBody , ERROR_KEY , null ) ; </a> 0
<a> errorType = error . optString ( ERROR_TYPE_FIELD_KEY , null ) ; </a> 0
<a> errorMessage = error . optString ( ERROR_MESSAGE_FIELD_KEY , null ) ; </a> 0
<a> errorCode = error . optInt ( ERROR_CODE_FIELD_KEY , INVALID_ERROR_CODE ) ; </a> 0
<a> errorSubCode = error . optInt ( ERROR_SUB_CODE_KEY , INVALID_ERROR_CODE ) ; </a> 0
<a> hasError = true ; </a> 0
<a> } else if ( jsonBody . has ( ERROR_CODE_KEY ) || jsonBody . has ( ERROR_MSG_KEY ) </a> 0
<a> || jsonBody . has ( ERROR_REASON_KEY ) ) { </a> 0
<a> errorType = jsonBody . optString ( ERROR_REASON_KEY , null ) ; </a> 0
<a> errorMessage = jsonBody . optString ( ERROR_MSG_KEY , null ) ; </a> 0
<a> errorCode = jsonBody . optInt ( ERROR_CODE_KEY , INVALID_ERROR_CODE ) ; </a> 0
<a> errorSubCode = jsonBody . optInt ( ERROR_SUB_CODE_KEY , INVALID_ERROR_CODE ) ; </a> 0
<a> hasError = true ; </a> 0
<a> } </a> 0
<a> if ( hasError ) { </a> 0
<a> return new FacebookRequestError ( responseCode , errorCode , errorSubCode , </a> 0
<a> errorType , errorMessage , jsonBody , singleResult , batchResult , connection ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! HTTP_RANGE_SUCCESS . contains ( responseCode ) ) { </a> 0
<a> return new FacebookRequestError ( responseCode , INVALID_ERROR_CODE , </a> 0
<a> INVALID_ERROR_CODE , null , null , </a> 0
<a> singleResult . has ( BODY_KEY ) ? </a> 0
<a> ( JSONObject ) Utility . getStringPropertyAsJSON ( </a> 0
<a> singleResult , BODY_KEY , Response . NON_JSON_RESPONSE_PROPERTY ) : null , </a> 0
<a> singleResult , batchResult , connection ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public enum Category { </a> 0
<a> AUTHENTICATION_RETRY , </a> 0
<a> AUTHENTICATION_REOPEN_SESSION , </a> 0
<a> PERMISSION , </a> 0
<a> SERVER , </a> 0
<a> THROTTLING , </a> 0
<a> OTHER , </a> 0
<a> BAD_REQUEST , </a> 0
<a> CLIENT </a> 0
<a> } ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> final class FacebookSdkVersion { </a> 0
<a> public static final String BUILD = "3.0.0" ; </a> 0
<a> public static final String MIGRATION_BUNDLE = "fbsdk:20121026" ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . ComponentName ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . ServiceConnection ; </a> 0
<a> import android . os . * ; </a> 0
<a> final class GetTokenClient implements ServiceConnection { </a> 0
<a> final Context context ; </a> 0
<a> final String applicationId ; </a> 0
<a> final Handler handler ; </a> 0
<a> CompletedListener listener ; </a> 0
<a> boolean running ; </a> 0
<a> Messenger sender ; </a> 0
<a> GetTokenClient ( Context context , String applicationId ) { </a> 0
<a> Context applicationContext = context . getApplicationContext ( ) ; </a> 0
<a> this . context = ( applicationContext != null ) ? applicationContext : context ; </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> handler = new Handler ( ) { </a> 0
<a> @ Override </a> 0
<a> public void handleMessage ( Message message ) { </a> 0
<a> GetTokenClient . this . handleMessage ( message ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> void setCompletedListener ( CompletedListener listener ) { </a> 0
<a> this . listener = listener ; </a> 0
<a> } </a> 0
<a> boolean start ( ) { </a> 0
<a> Intent intent = new Intent ( NativeProtocol . INTENT_ACTION_PLATFORM_SERVICE ) ; </a> 0
<a> intent . addCategory ( Intent . CATEGORY_DEFAULT ) ; </a> 0
<a> intent = NativeProtocol . validateKatanaServiceIntent ( context , intent ) ; </a> 0
<a> if ( intent == null ) { </a> 0
<a> callback ( null ) ; </a> 0
<a> return false ; </a> 0
<a> } else { </a> 0
<a> running = true ; </a> 0
<a> context . bindService ( intent , this , Context . BIND_AUTO_CREATE ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void cancel ( ) { </a> 0
<a> running = false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onServiceConnected ( ComponentName name , IBinder service ) { </a> 0
<a> sender = new Messenger ( service ) ; </a> 0
<a> getToken ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onServiceDisconnected ( ComponentName name ) { </a> 0
<a> sender = null ; </a> 0
<a> context . unbindService ( this ) ; </a> 0
<a> callback ( null ) ; </a> 0
<a> } </a> 0
<a> private void getToken ( ) { </a> 0
<a> Bundle data = new Bundle ( ) ; </a> 0
<a> data . putString ( NativeProtocol . EXTRA_APPLICATION_ID , applicationId ) ; </a> 0
<a> Message request = Message . obtain ( null , NativeProtocol . MESSAGE_GET_ACCESS_TOKEN_REQUEST ) ; </a> 0
<a> request . arg1 = NativeProtocol . PROTOCOL_VERSION_20121101 ; </a> 0
<a> request . setData ( data ) ; </a> 0
<a> request . replyTo = new Messenger ( handler ) ; </a> 0
<a> try { </a> 0
<a> sender . send ( request ) ; </a> 0
<a> } catch ( RemoteException e ) { </a> 0
<a> callback ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void handleMessage ( Message message ) { </a> 0
<a> if ( message . what == NativeProtocol . MESSAGE_GET_ACCESS_TOKEN_REPLY ) { </a> 0
<a> Bundle extras = message . getData ( ) ; </a> 0
<a> String errorType = extras . getString ( NativeProtocol . STATUS_ERROR_TYPE ) ; </a> 0
<a> if ( errorType != null ) { </a> 0
<a> callback ( null ) ; </a> 0
<a> } else { </a> 0
<a> callback ( extras ) ; </a> 0
<a> } </a> 0
<a> context . unbindService ( this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void callback ( Bundle result ) { </a> 0
<a> if ( ! running ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> running = false ; </a> 0
<a> CompletedListener callback = listener ; </a> 0
<a> if ( callback != null ) { </a> 0
<a> callback . completed ( result ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> interface CompletedListener { </a> 0
<a> void completed ( Bundle result ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public enum HttpMethod { </a> 0
<a> GET , </a> 0
<a> POST , </a> 0
<a> DELETE , </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> public class LegacyHelper { </a> 0
<a> @ Deprecated </a> 0
<a> public static void extendTokenCompleted ( Session session , Bundle bundle ) { </a> 0
<a> session . extendTokenCompleted ( bundle ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public enum LoggingBehavior { </a> 0
<a> REQUESTS , </a> 0
<a> INCLUDE_ACCESS_TOKENS , </a> 0
<a> INCLUDE_RAW_RESPONSES , </a> 0
<a> CACHE </a> 1
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> public class LoginActivity extends Activity { </a> 0
<a> static final String RESULT_KEY = "com.facebook.LoginActivity:Result" ; </a> 0
<a> private static final String NULL_CALLING_PKG_ERROR_MSG = </a> 0
<a> "Cannot call LoginActivity with a null calling package. " + </a> 0
<a> "This can occur if the launchMode of the caller is singleInstance." ; </a> 0
<a> private static final String SAVED_CALLING_PKG_KEY = "callingPackage" ; </a> 0
<a> private static final String SAVED_AUTH_CLIENT = "authorizationClient" ; </a> 0
<a> private static final String EXTRA_REQUEST = "request" ; </a> 0
<a> private String callingPackage ; </a> 0
<a> private AuthorizationClient authorizationClient ; </a> 0
<a> private AuthorizationClient . AuthorizationRequest request ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . com_facebook_login_activity_layout ) ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> callingPackage = savedInstanceState . getString ( SAVED_CALLING_PKG_KEY ) ; </a> 0
<a> authorizationClient = ( AuthorizationClient ) savedInstanceState . getSerializable ( SAVED_AUTH_CLIENT ) ; </a> 0
<a> } else { </a> 0
<a> callingPackage = getCallingPackage ( ) ; </a> 0
<a> authorizationClient = new AuthorizationClient ( ) ; </a> 0
<a> request = ( AuthorizationClient . AuthorizationRequest ) getIntent ( ) . getSerializableExtra ( EXTRA_REQUEST ) ; </a> 0
<a> } </a> 0
<a> authorizationClient . setContext ( this ) ; </a> 0
<a> authorizationClient . setOnCompletedListener ( new AuthorizationClient . OnCompletedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( AuthorizationClient . Result outcome ) { </a> 0
<a> onAuthClientCompleted ( outcome ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> authorizationClient . setBackgroundProcessingListener ( new AuthorizationClient . BackgroundProcessingListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onBackgroundProcessingStarted ( ) { </a> 0
<a> findViewById ( R . id . com_facebook_login_activity_progress_bar ) . setVisibility ( View . VISIBLE ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onBackgroundProcessingStopped ( ) { </a> 0
<a> findViewById ( R . id . com_facebook_login_activity_progress_bar ) . setVisibility ( View . GONE ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void onAuthClientCompleted ( AuthorizationClient . Result outcome ) { </a> 0
<a> request = null ; </a> 0
<a> int resultCode = ( outcome . code == AuthorizationClient . Result . Code . CANCEL ) ? </a> 0
<a> RESULT_CANCELED : RESULT_OK ; </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putSerializable ( RESULT_KEY , outcome ) ; </a> 0
<a> Intent resultIntent = new Intent ( ) ; </a> 0
<a> resultIntent . putExtras ( bundle ) ; </a> 0
<a> setResult ( resultCode , resultIntent ) ; </a> 0
<a> finish ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onResume ( ) { </a> 0
<a> super . onResume ( ) ; </a> 0
<a> if ( callingPackage == null ) { </a> 0
<a> throw new FacebookException ( NULL_CALLING_PKG_ERROR_MSG ) ; </a> 0
<a> } </a> 0
<a> authorizationClient . startOrContinueAuth ( request ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onPause ( ) { </a> 0
<a> super . onPause ( ) ; </a> 0
<a> authorizationClient . cancelCurrentHandler ( ) ; </a> 0
<a> findViewById ( R . id . com_facebook_login_activity_progress_bar ) . setVisibility ( View . GONE ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . putString ( SAVED_CALLING_PKG_KEY , callingPackage ) ; </a> 0
<a> outState . putSerializable ( SAVED_AUTH_CLIENT , authorizationClient ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> authorizationClient . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> static Bundle populateIntentExtras ( AuthorizationClient . AuthorizationRequest request ) { </a> 0
<a> Bundle extras = new Bundle ( ) ; </a> 0
<a> extras . putSerializable ( EXTRA_REQUEST , request ) ; </a> 0
<a> return extras ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . pm . PackageInfo ; </a> 0
<a> import android . content . pm . PackageManager ; </a> 0
<a> import android . content . pm . ResolveInfo ; </a> 0
<a> import android . content . pm . Signature ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> final class NativeProtocol { </a> 0
<a> static final String KATANA_PACKAGE = "com.facebook.katana" ; </a> 0
<a> static final String KATANA_PROXY_AUTH_ACTIVITY = "com.facebook.katana.ProxyAuth" ; </a> 0
<a> static final String KATANA_TOKEN_REFRESH_ACTIVITY = "com.facebook.katana.platform.TokenRefreshService" ; </a> 0
<a> static final String KATANA_SIGNATURE = </a> 0
<a> "30820268308201d102044a9c4610300d06092a864886f70d0101040500307a310" </a> 0
<a> + "b3009060355040613025553310b30090603550408130243413112301006035504" </a> 0
<a> + "07130950616c6f20416c746f31183016060355040a130f46616365626f6f6b204" </a> 0
<a> + "d6f62696c653111300f060355040b130846616365626f6f6b311d301b06035504" </a> 0
<a> + "03131446616365626f6f6b20436f72706f726174696f6e3020170d30393038333" </a> 0
<a> + "13231353231365a180f32303530303932353231353231365a307a310b30090603" </a> 0
<a> + "55040613025553310b30090603550408130243413112301006035504071309506" </a> 0
<a> + "16c6f20416c746f31183016060355040a130f46616365626f6f6b204d6f62696c" </a> 0
<a> + "653111300f060355040b130846616365626f6f6b311d301b06035504031314466" </a> 0
<a> + "16365626f6f6b20436f72706f726174696f6e30819f300d06092a864886f70d01" </a> 0
<a> + "0101050003818d0030818902818100c207d51df8eb8c97d93ba0c8c1002c928fa" </a> 0
<a> + "b00dc1b42fca5e66e99cc3023ed2d214d822bc59e8e35ddcf5f44c7ae8ade50d7" </a> 0
<a> + "e0c434f500e6c131f4a2834f987fc46406115de2018ebbb0d5a3c261bd97581cc" </a> 0
<a> + "fef76afc7135a6d59e8855ecd7eacc8f8737e794c60a761c536b72b11fac8e603" </a> 0
<a> + "f5da1a2d54aa103b8a13c0dbc10203010001300d06092a864886f70d010104050" </a> 0
<a> + "0038181005ee9be8bcbb250648d3b741290a82a1c9dc2e76a0af2f2228f1d9f9c" </a> 0
<a> + "4007529c446a70175c5a900d5141812866db46be6559e2141616483998211f4a6" </a> 0
<a> + "73149fb2232a10d247663b26a9031e15f84bc1c74d141ff98a02d76f85b2c8ab2" </a> 0
<a> + "571b6469b232d8e768a7f7ca04f7abe4a775615916c07940656b58717457b42bd" </a> 0
<a> + "928a2" ; </a> 0
<a> private static final String BASIC_INFO = "basic_info" ; </a> 0
<a> public static final String KATANA_PROXY_AUTH_PERMISSIONS_KEY = "scope" ; </a> 0
<a> public static final String KATANA_PROXY_AUTH_APP_ID_KEY = "client_id" ; </a> 0
<a> static final boolean validateSignature ( Context context , String packageName ) { </a> 0
<a> PackageInfo packageInfo = null ; </a> 0
<a> try { </a> 0
<a> packageInfo = context . getPackageManager ( ) . getPackageInfo ( packageName , </a> 0
<a> PackageManager . GET_SIGNATURES ) ; </a> 0
<a> } catch ( PackageManager . NameNotFoundException e ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> for ( Signature signature : packageInfo . signatures ) { </a> 0
<a> if ( signature . toCharsString ( ) . equals ( KATANA_SIGNATURE ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> static Intent validateKatanaActivityIntent ( Context context , Intent intent ) { </a> 0
<a> if ( intent == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> ResolveInfo resolveInfo = context . getPackageManager ( ) . resolveActivity ( intent , 0 ) ; </a> 0
<a> if ( resolveInfo == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( ! validateSignature ( context , resolveInfo . activityInfo . packageName ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return intent ; </a> 0
<a> } </a> 0
<a> static Intent validateKatanaServiceIntent ( Context context , Intent intent ) { </a> 0
<a> if ( intent == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> ResolveInfo resolveInfo = context . getPackageManager ( ) . resolveService ( intent , 0 ) ; </a> 0
<a> if ( resolveInfo == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( ! validateSignature ( context , resolveInfo . serviceInfo . packageName ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return intent ; </a> 0
<a> } </a> 0
<a> static Intent createProxyAuthIntent ( Context context , String applicationId , List < String > permissions ) { </a> 0
<a> Intent intent = new Intent ( ) </a> 0
<a> . setClassName ( KATANA_PACKAGE , KATANA_PROXY_AUTH_ACTIVITY ) </a> 0
<a> . putExtra ( KATANA_PROXY_AUTH_APP_ID_KEY , applicationId ) ; </a> 0
<a> if ( ! Utility . isNullOrEmpty ( permissions ) ) { </a> 0
<a> intent . putExtra ( KATANA_PROXY_AUTH_PERMISSIONS_KEY , TextUtils . join ( "," , permissions ) ) ; </a> 0
<a> } </a> 0
<a> return validateKatanaActivityIntent ( context , intent ) ; </a> 0
<a> } </a> 0
<a> static Intent createTokenRefreshIntent ( Context context ) { </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . setClassName ( KATANA_PACKAGE , KATANA_TOKEN_REFRESH_ACTIVITY ) ; </a> 0
<a> return validateKatanaServiceIntent ( context , intent ) ; </a> 0
<a> } </a> 0
<a> static final String INTENT_ACTION_PLATFORM_ACTIVITY = "com.facebook.platform.PLATFORM_ACTIVITY" ; </a> 0
<a> static final String INTENT_ACTION_PLATFORM_SERVICE = "com.facebook.platform.PLATFORM_SERVICE" ; </a> 0
<a> static final int PROTOCOL_VERSION_20121101 = 20121101 ; </a> 0
<a> static final String EXTRA_PROTOCOL_VERSION = "com.facebook.platform.protocol.PROTOCOL_VERSION" ; </a> 0
<a> static final String EXTRA_PROTOCOL_ACTION = "com.facebook.platform.protocol.PROTOCOL_ACTION" ; </a> 0
<a> static final int MESSAGE_GET_ACCESS_TOKEN_REQUEST = 0x10000 ; </a> 0
<a> static final int MESSAGE_GET_ACCESS_TOKEN_REPLY = 0x10001 ; </a> 0
<a> static final String ACTION_LOGIN_DIALOG = "com.facebook.platform.action.request.LOGIN_DIALOG" ; </a> 0
<a> static final String ACTION_LOGIN_DIALOG_REPLY = </a> 0
<a> "com.facebook.platform.action.reply.LOGIN_DIALOG" ; </a> 0
<a> static final String EXTRA_PERMISSIONS = "com.facebook.platform.extra.PERMISSIONS" ; </a> 0
<a> static final String EXTRA_WRITE_PRIVACY = "com.facebook.platform.extra.WRITE_PRIVACY" ; </a> 0
<a> static final String EXTRA_APPLICATION_ID = "com.facebook.platform.extra.APPLICATION_ID" ; </a> 0
<a> static final String EXTRA_ACCESS_TOKEN = "com.facebook.platform.extra.ACCESS_TOKEN" ; </a> 0
<a> static final String EXTRA_EXPIRES_SECONDS_SINCE_EPOCH = </a> 0
<a> "com.facebook.platform.extra.EXPIRES_SECONDS_SINCE_EPOCH" ; </a> 0
<a> static final String STATUS_ERROR_TYPE = "com.facebook.platform.status.ERROR_TYPE" ; </a> 0
<a> static final String STATUS_ERROR_DESCRIPTION = </a> 0
<a> "com.facebook.platform.status.ERROR_DESCRIPTION" ; </a> 0
<a> static final String STATUS_ERROR_CODE = "com.facebook.platform.status.ERROR_CODE" ; </a> 0
<a> static final String STATUS_ERROR_SUBCODE = "com.facebook.platform.status.ERROR_SUBCODE" ; </a> 0
<a> static final String STATUS_ERROR_JSON = "com.facebook.platform.status.ERROR_JSON" ; </a> 0
<a> static final String ERROR_UNKNOWN_ERROR = "UnknownError" ; </a> 0
<a> static final String ERROR_PROTOCOL_ERROR = "ProtocolError" ; </a> 0
<a> static final String ERROR_USER_CANCELED = "UserCanceled" ; </a> 0
<a> static final String ERROR_APPLICATION_ERROR = "ApplicationError" ; </a> 0
<a> static final String ERROR_NETWORK_ERROR = "NetworkError" ; </a> 0
<a> static final String ERROR_PERMISSION_DENIED = "PermissionDenied" ; </a> 0
<a> static final String ERROR_SERVICE_DISABLED = "ServiceDisabled" ; </a> 0
<a> static final String AUDIENCE_ME = "SELF" ; </a> 0
<a> static final String AUDIENCE_FRIENDS = "ALL_FRIENDS" ; </a> 0
<a> static final String AUDIENCE_EVERYONE = "EVERYONE" ; </a> 0
<a> static Intent createLoginDialog20121101Intent ( Context context , String applicationId , ArrayList < String > permissions , </a> 0
<a> String audience ) { </a> 0
<a> Intent intent = new Intent ( ) </a> 0
<a> . setAction ( INTENT_ACTION_PLATFORM_ACTIVITY ) </a> 0
<a> . addCategory ( Intent . CATEGORY_DEFAULT ) </a> 0
<a> . putExtra ( EXTRA_PROTOCOL_VERSION , PROTOCOL_VERSION_20121101 ) </a> 0
<a> . putExtra ( EXTRA_PROTOCOL_ACTION , ACTION_LOGIN_DIALOG ) </a> 0
<a> . putExtra ( EXTRA_APPLICATION_ID , applicationId ) </a> 0
<a> . putStringArrayListExtra ( EXTRA_PERMISSIONS , ensureDefaultPermissions ( permissions ) ) </a> 0
<a> . putExtra ( EXTRA_WRITE_PRIVACY , ensureDefaultAudience ( audience ) ) ; </a> 0
<a> return validateKatanaActivityIntent ( context , intent ) ; </a> 0
<a> } </a> 0
<a> private static String ensureDefaultAudience ( String audience ) { </a> 0
<a> if ( Utility . isNullOrEmpty ( audience ) ) { </a> 0
<a> return AUDIENCE_ME ; </a> 0
<a> } else { </a> 0
<a> return audience ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static ArrayList < String > ensureDefaultPermissions ( ArrayList < String > permissions ) { </a> 0
<a> ArrayList < String > updated ; </a> 0
<a> if ( Utility . isNullOrEmpty ( permissions ) ) { </a> 0
<a> updated = new ArrayList < String > ( ) ; </a> 0
<a> } else { </a> 0
<a> for ( String permission : permissions ) { </a> 0
<a> if ( Session . isPublishPermission ( permission ) || BASIC_INFO . equals ( permission ) ) { </a> 0
<a> return permissions ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> updated = new ArrayList < String > ( permissions ) ; </a> 0
<a> } </a> 0
<a> updated . add ( BASIC_INFO ) ; </a> 0
<a> return updated ; </a> 0
<a> } </a> 0
<a> static boolean isServiceDisabledResult20121101 ( Intent data ) { </a> 0
<a> int protocolVersion = data . getIntExtra ( EXTRA_PROTOCOL_VERSION , 0 ) ; </a> 0
<a> String errorType = data . getStringExtra ( STATUS_ERROR_TYPE ) ; </a> 0
<a> return ( ( PROTOCOL_VERSION_20121101 == protocolVersion ) && ERROR_SERVICE_DISABLED . equals ( errorType ) ) ; </a> 0
<a> } </a> 0
<a> static AccessTokenSource getAccessTokenSourceFromNative ( Bundle extras ) { </a> 0
<a> long expected = PROTOCOL_VERSION_20121101 ; </a> 0
<a> long actual = extras . getInt ( EXTRA_PROTOCOL_VERSION , 0 ) ; </a> 0
<a> if ( expected == actual ) { </a> 0
<a> return AccessTokenSource . FACEBOOK_APPLICATION_NATIVE ; </a> 0
<a> } else { </a> 0
<a> return AccessTokenSource . FACEBOOK_APPLICATION_WEB ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> public class NonCachingTokenCachingStrategy extends TokenCachingStrategy { </a> 0
<a> @ Override </a> 0
<a> public Bundle load ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void save ( Bundle bundle ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . os . ParcelFileDescriptor ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . util . Pair ; </a> 0
<a> import com . facebook . internal . ServerProtocol ; </a> 0
<a> import com . facebook . model . * ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . MalformedURLException ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . net . URLEncoder ; </a> 0
<a> import java . text . SimpleDateFormat ; </a> 0
<a> import java . util . * ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> public class Request { </a> 0
<a> public static final int MAXIMUM_BATCH_SIZE = 50 ; </a> 0
<a> private static final String ME = "me" ; </a> 0
<a> private static final String MY_FRIENDS = "me/friends" ; </a> 0
<a> private static final String MY_PHOTOS = "me/photos" ; </a> 0
<a> private static final String MY_VIDEOS = "me/videos" ; </a> 0
<a> private static final String SEARCH = "search" ; </a> 0
<a> private static final String MY_FEED = "me/feed" ; </a> 0
<a> private static final String USER_AGENT_BASE = "FBAndroidSDK" ; </a> 0
<a> private static final String USER_AGENT_HEADER = "User-Agent" ; </a> 0
<a> private static final String CONTENT_TYPE_HEADER = "Content-Type" ; </a> 0
<a> private static final String PICTURE_PARAM = "picture" ; </a> 0
<a> private static final String FORMAT_PARAM = "format" ; </a> 0
<a> private static final String FORMAT_JSON = "json" ; </a> 0
<a> private static final String SDK_PARAM = "sdk" ; </a> 0
<a> private static final String SDK_ANDROID = "android" ; </a> 0
<a> private static final String ACCESS_TOKEN_PARAM = "access_token" ; </a> 0
<a> private static final String BATCH_ENTRY_NAME_PARAM = "name" ; </a> 0
<a> private static final String BATCH_ENTRY_OMIT_RESPONSE_ON_SUCCESS_PARAM = "omit_response_on_success" ; </a> 0
<a> private static final String BATCH_ENTRY_DEPENDS_ON_PARAM = "depends_on" ; </a> 0
<a> private static final String BATCH_APP_ID_PARAM = "batch_app_id" ; </a> 0
<a> private static final String BATCH_RELATIVE_URL_PARAM = "relative_url" ; </a> 0
<a> private static final String BATCH_BODY_PARAM = "body" ; </a> 0
<a> private static final String BATCH_METHOD_PARAM = "method" ; </a> 0
<a> private static final String BATCH_PARAM = "batch" ; </a> 0
<a> private static final String ATTACHMENT_FILENAME_PREFIX = "file" ; </a> 0
<a> private static final String ATTACHED_FILES_PARAM = "attached_files" ; </a> 0
<a> private static final String MIGRATION_BUNDLE_PARAM = "migration_bundle" ; </a> 0
<a> private static final String ISO_8601_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ssZ" ; </a> 0
<a> private static final String MIME_BOUNDARY = "3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f" ; </a> 0
<a> private static String defaultBatchApplicationId ; </a> 0
<a> private Session session ; </a> 0
<a> private HttpMethod httpMethod ; </a> 0
<a> private String graphPath ; </a> 0
<a> private GraphObject graphObject ; </a> 0
<a> private String restMethod ; </a> 0
<a> private String batchEntryName ; </a> 0
<a> private String batchEntryDependsOn ; </a> 0
<a> private boolean batchEntryOmitResultOnSuccess = true ; </a> 0
<a> private Bundle parameters ; </a> 0
<a> private Callback callback ; </a> 0
<a> private String overriddenURL ; </a> 0
<a> public Request ( ) { </a> 0
<a> this ( null , null , null , null , null ) ; </a> 0
<a> } </a> 0
<a> public Request ( Session session , String graphPath ) { </a> 0
<a> this ( session , graphPath , null , null , null ) ; </a> 0
<a> } </a> 0
<a> public Request ( Session session , String graphPath , Bundle parameters , HttpMethod httpMethod ) { </a> 0
<a> this ( session , graphPath , parameters , httpMethod , null ) ; </a> 0
<a> } </a> 0
<a> public Request ( Session session , String graphPath , Bundle parameters , HttpMethod httpMethod , Callback callback ) { </a> 0
<a> this . session = session ; </a> 0
<a> this . graphPath = graphPath ; </a> 0
<a> this . callback = callback ; </a> 0
<a> setHttpMethod ( httpMethod ) ; </a> 0
<a> if ( parameters != null ) { </a> 0
<a> this . parameters = new Bundle ( parameters ) ; </a> 0
<a> } else { </a> 0
<a> this . parameters = new Bundle ( ) ; </a> 0
<a> } </a> 0
<a> if ( ! this . parameters . containsKey ( MIGRATION_BUNDLE_PARAM ) ) { </a> 0
<a> this . parameters . putString ( MIGRATION_BUNDLE_PARAM , FacebookSdkVersion . MIGRATION_BUNDLE ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Request ( Session session , URL overriddenURL ) { </a> 0
<a> this . session = session ; </a> 0
<a> this . overriddenURL = overriddenURL . toString ( ) ; </a> 0
<a> setHttpMethod ( HttpMethod . GET ) ; </a> 0
<a> this . parameters = new Bundle ( ) ; </a> 0
<a> } </a> 0
<a> public static Request newPostRequest ( Session session , String graphPath , GraphObject graphObject , Callback callback ) { </a> 0
<a> Request request = new Request ( session , graphPath , null , HttpMethod . POST , callback ) ; </a> 0
<a> request . setGraphObject ( graphObject ) ; </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> public static Request newRestRequest ( Session session , String restMethod , Bundle parameters , HttpMethod httpMethod ) { </a> 0
<a> Request request = new Request ( session , null , parameters , httpMethod ) ; </a> 0
<a> request . setRestMethod ( restMethod ) ; </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> public static Request newMeRequest ( Session session , final GraphUserCallback callback ) { </a> 0
<a> Callback wrapper = new Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> if ( callback != null ) { </a> 0
<a> callback . onCompleted ( response . getGraphObjectAs ( GraphUser . class ) , response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> return new Request ( session , ME , null , null , wrapper ) ; </a> 0
<a> } </a> 0
<a> public static Request newMyFriendsRequest ( Session session , final GraphUserListCallback callback ) { </a> 0
<a> Callback wrapper = new Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> if ( callback != null ) { </a> 0
<a> callback . onCompleted ( typedListFromResponse ( response , GraphUser . class ) , response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> return new Request ( session , MY_FRIENDS , null , null , wrapper ) ; </a> 0
<a> } </a> 0
<a> public static Request newUploadPhotoRequest ( Session session , Bitmap image , Callback callback ) { </a> 0
<a> Bundle parameters = new Bundle ( 1 ) ; </a> 0
<a> parameters . putParcelable ( PICTURE_PARAM , image ) ; </a> 0
<a> return new Request ( session , MY_PHOTOS , parameters , HttpMethod . POST , callback ) ; </a> 0
<a> } </a> 0
<a> public static Request newUploadPhotoRequest ( Session session , File file , </a> 0
<a> Callback callback ) throws FileNotFoundException { </a> 0
<a> ParcelFileDescriptor descriptor = ParcelFileDescriptor . open ( file , ParcelFileDescriptor . MODE_READ_ONLY ) ; </a> 0
<a> Bundle parameters = new Bundle ( 1 ) ; </a> 0
<a> parameters . putParcelable ( PICTURE_PARAM , descriptor ) ; </a> 0
<a> return new Request ( session , MY_PHOTOS , parameters , HttpMethod . POST , callback ) ; </a> 0
<a> } </a> 0
<a> public static Request newUploadVideoRequest ( Session session , File file , </a> 0
<a> Callback callback ) throws FileNotFoundException { </a> 0
<a> ParcelFileDescriptor descriptor = ParcelFileDescriptor . open ( file , ParcelFileDescriptor . MODE_READ_ONLY ) ; </a> 0
<a> Bundle parameters = new Bundle ( 1 ) ; </a> 0
<a> parameters . putParcelable ( file . getName ( ) , descriptor ) ; </a> 0
<a> return new Request ( session , MY_VIDEOS , parameters , HttpMethod . POST , callback ) ; </a> 0
<a> } </a> 0
<a> public static Request newGraphPathRequest ( Session session , String graphPath , Callback callback ) { </a> 0
<a> return new Request ( session , graphPath , null , null , callback ) ; </a> 0
<a> } </a> 0
<a> public static Request newPlacesSearchRequest ( Session session , Location location , int radiusInMeters , </a> 0
<a> int resultsLimit , String searchText , final GraphPlaceListCallback callback ) { </a> 0
<a> if ( location == null && Utility . isNullOrEmpty ( searchText ) ) { </a> 0
<a> throw new FacebookException ( "Either location or searchText must be specified." ) ; </a> 0
<a> } </a> 0
<a> Bundle parameters = new Bundle ( 5 ) ; </a> 0
<a> parameters . putString ( "type" , "place" ) ; </a> 0
<a> parameters . putInt ( "limit" , resultsLimit ) ; </a> 0
<a> if ( location != null ) { </a> 0
<a> parameters . putString ( "center" , </a> 0
<a> String . format ( Locale . US , "%f,%f" , location . getLatitude ( ) , location . getLongitude ( ) ) ) ; </a> 0
<a> parameters . putInt ( "distance" , radiusInMeters ) ; </a> 0
<a> } </a> 0
<a> if ( ! Utility . isNullOrEmpty ( searchText ) ) { </a> 0
<a> parameters . putString ( "q" , searchText ) ; </a> 0
<a> } </a> 0
<a> Callback wrapper = new Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> if ( callback != null ) { </a> 0
<a> callback . onCompleted ( typedListFromResponse ( response , GraphPlace . class ) , response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> return new Request ( session , SEARCH , parameters , HttpMethod . GET , wrapper ) ; </a> 0
<a> } </a> 0
<a> public static Request newStatusUpdateRequest ( Session session , String message , Callback callback ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "message" , message ) ; </a> 0
<a> return new Request ( session , MY_FEED , parameters , HttpMethod . POST , callback ) ; </a> 0
<a> } </a> 0
<a> public final GraphObject getGraphObject ( ) { </a> 0
<a> return this . graphObject ; </a> 0
<a> } </a> 0
<a> public final void setGraphObject ( GraphObject graphObject ) { </a> 0
<a> this . graphObject = graphObject ; </a> 0
<a> } </a> 0
<a> public final String getGraphPath ( ) { </a> 0
<a> return this . graphPath ; </a> 0
<a> } </a> 0
<a> public final void setGraphPath ( String graphPath ) { </a> 0
<a> this . graphPath = graphPath ; </a> 0
<a> } </a> 0
<a> public final HttpMethod getHttpMethod ( ) { </a> 0
<a> return this . httpMethod ; </a> 0
<a> } </a> 0
<a> public final void setHttpMethod ( HttpMethod httpMethod ) { </a> 0
<a> if ( overriddenURL != null && httpMethod != HttpMethod . GET ) { </a> 0
<a> throw new FacebookException ( "Can't change HTTP method on request with overridden URL." ) ; </a> 0
<a> } </a> 0
<a> this . httpMethod = ( httpMethod != null ) ? httpMethod : HttpMethod . GET ; </a> 0
<a> } </a> 0
<a> public final Bundle getParameters ( ) { </a> 0
<a> return this . parameters ; </a> 0
<a> } </a> 0
<a> public final void setParameters ( Bundle parameters ) { </a> 0
<a> this . parameters = parameters ; </a> 0
<a> } </a> 0
<a> public final String getRestMethod ( ) { </a> 0
<a> return this . restMethod ; </a> 0
<a> } </a> 0
<a> public final void setRestMethod ( String restMethod ) { </a> 0
<a> this . restMethod = restMethod ; </a> 0
<a> } </a> 0
<a> public final Session getSession ( ) { </a> 0
<a> return this . session ; </a> 0
<a> } </a> 0
<a> public final void setSession ( Session session ) { </a> 0
<a> this . session = session ; </a> 0
<a> } </a> 0
<a> public final String getBatchEntryName ( ) { </a> 0
<a> return this . batchEntryName ; </a> 0
<a> } </a> 0
<a> public final void setBatchEntryName ( String batchEntryName ) { </a> 0
<a> this . batchEntryName = batchEntryName ; </a> 0
<a> } </a> 0
<a> public final String getBatchEntryDependsOn ( ) { </a> 0
<a> return this . batchEntryDependsOn ; </a> 0
<a> } </a> 0
<a> public final void setBatchEntryDependsOn ( String batchEntryDependsOn ) { </a> 0
<a> this . batchEntryDependsOn = batchEntryDependsOn ; </a> 0
<a> } </a> 0
<a> public final boolean getBatchEntryOmitResultOnSuccess ( ) { </a> 0
<a> return this . batchEntryOmitResultOnSuccess ; </a> 0
<a> } </a> 0
<a> public final void setBatchEntryOmitResultOnSuccess ( boolean batchEntryOmitResultOnSuccess ) { </a> 0
<a> this . batchEntryOmitResultOnSuccess = batchEntryOmitResultOnSuccess ; </a> 0
<a> } </a> 0
<a> public static final String getDefaultBatchApplicationId ( ) { </a> 0
<a> return Request . defaultBatchApplicationId ; </a> 0
<a> } </a> 0
<a> public static final void setDefaultBatchApplicationId ( String applicationId ) { </a> 0
<a> Request . defaultBatchApplicationId = applicationId ; </a> 0
<a> } </a> 0
<a> public final Callback getCallback ( ) { </a> 0
<a> return callback ; </a> 0
<a> } </a> 0
<a> public final void setCallback ( Callback callback ) { </a> 0
<a> this . callback = callback ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executePostRequestAsync ( Session session , String graphPath , GraphObject graphObject , </a> 0
<a> Callback callback ) { </a> 0
<a> return newPostRequest ( session , graphPath , graphObject , callback ) . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeRestRequestAsync ( Session session , String restMethod , Bundle parameters , </a> 0
<a> HttpMethod httpMethod ) { </a> 0
<a> return newRestRequest ( session , restMethod , parameters , httpMethod ) . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeMeRequestAsync ( Session session , GraphUserCallback callback ) { </a> 0
<a> return newMeRequest ( session , callback ) . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeMyFriendsRequestAsync ( Session session , GraphUserListCallback callback ) { </a> 0
<a> return newMyFriendsRequest ( session , callback ) . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeUploadPhotoRequestAsync ( Session session , Bitmap image , Callback callback ) { </a> 0
<a> return newUploadPhotoRequest ( session , image , callback ) . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeUploadPhotoRequestAsync ( Session session , File file , </a> 0
<a> Callback callback ) throws FileNotFoundException { </a> 0
<a> return newUploadPhotoRequest ( session , file , callback ) . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeGraphPathRequestAsync ( Session session , String graphPath , Callback callback ) { </a> 0
<a> return newGraphPathRequest ( session , graphPath , callback ) . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executePlacesSearchRequestAsync ( Session session , Location location , int radiusInMeters , </a> 0
<a> int resultsLimit , String searchText , GraphPlaceListCallback callback ) { </a> 0
<a> return newPlacesSearchRequest ( session , location , radiusInMeters , resultsLimit , searchText , callback ) . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeStatusUpdateRequestAsync ( Session session , String message , Callback callback ) { </a> 0
<a> return newStatusUpdateRequest ( session , message , callback ) . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> public final Response executeAndWait ( ) { </a> 0
<a> return Request . executeAndWait ( this ) ; </a> 0
<a> } </a> 0
<a> public final RequestAsyncTask executeAsync ( ) { </a> 0
<a> return Request . executeBatchAsync ( this ) ; </a> 0
<a> } </a> 0
<a> public static HttpURLConnection toHttpConnection ( Request ... requests ) { </a> 0
<a> return toHttpConnection ( Arrays . asList ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static HttpURLConnection toHttpConnection ( Collection < Request > requests ) { </a> 0
<a> Validate . notEmptyAndContainsNoNulls ( requests , "requests" ) ; </a> 0
<a> return toHttpConnection ( new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static HttpURLConnection toHttpConnection ( RequestBatch requests ) { </a> 0
<a> for ( Request request : requests ) { </a> 0
<a> request . validate ( ) ; </a> 0
<a> } </a> 0
<a> URL url = null ; </a> 0
<a> try { </a> 0
<a> if ( requests . size ( ) == 1 ) { </a> 0
<a> Request request = requests . get ( 0 ) ; </a> 0
<a> url = new URL ( request . getUrlForSingleRequest ( ) ) ; </a> 0
<a> } else { </a> 0
<a> url = new URL ( ServerProtocol . GRAPH_URL ) ; </a> 0
<a> } </a> 0
<a> } catch ( MalformedURLException e ) { </a> 0
<a> throw new FacebookException ( "could not construct URL for request" , e ) ; </a> 0
<a> } </a> 0
<a> HttpURLConnection connection ; </a> 0
<a> try { </a> 0
<a> connection = createConnection ( url ) ; </a> 0
<a> serializeToUrlConnection ( requests , connection ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new FacebookException ( "could not construct request body" , e ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> throw new FacebookException ( "could not construct request body" , e ) ; </a> 0
<a> } </a> 0
<a> return connection ; </a> 0
<a> } </a> 0
<a> public static Response executeAndWait ( Request request ) { </a> 0
<a> List < Response > responses = executeBatchAndWait ( request ) ; </a> 0
<a> if ( responses == null || responses . size ( ) != 1 ) { </a> 0
<a> throw new FacebookException ( "invalid state: expected a single response" ) ; </a> 0
<a> } </a> 0
<a> return responses . get ( 0 ) ; </a> 0
<a> } </a> 0
<a> public static List < Response > executeBatchAndWait ( Request ... requests ) { </a> 0
<a> Validate . notNull ( requests , "requests" ) ; </a> 0
<a> return executeBatchAndWait ( Arrays . asList ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static List < Response > executeBatchAndWait ( Collection < Request > requests ) { </a> 0
<a> return executeBatchAndWait ( new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static List < Response > executeBatchAndWait ( RequestBatch requests ) { </a> 0
<a> Validate . notEmptyAndContainsNoNulls ( requests , "requests" ) ; </a> 0
<a> HttpURLConnection connection = null ; </a> 0
<a> try { </a> 0
<a> connection = toHttpConnection ( requests ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> List < Response > responses = Response . constructErrorResponses ( requests . getRequests ( ) , null , new FacebookException ( ex ) ) ; </a> 0
<a> runCallbacks ( requests , responses ) ; </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> List < Response > responses = executeConnectionAndWait ( connection , requests ) ; </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeBatchAsync ( Request ... requests ) { </a> 0
<a> Validate . notNull ( requests , "requests" ) ; </a> 0
<a> return executeBatchAsync ( Arrays . asList ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeBatchAsync ( Collection < Request > requests ) { </a> 0
<a> return executeBatchAsync ( new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeBatchAsync ( RequestBatch requests ) { </a> 0
<a> Validate . notEmptyAndContainsNoNulls ( requests , "requests" ) ; </a> 0
<a> RequestAsyncTask asyncTask = new RequestAsyncTask ( requests ) ; </a> 0
<a> asyncTask . executeOnSettingsExecutor ( ) ; </a> 0
<a> return asyncTask ; </a> 0
<a> } </a> 0
<a> public static List < Response > executeConnectionAndWait ( HttpURLConnection connection , Collection < Request > requests ) { </a> 0
<a> return executeConnectionAndWait ( connection , new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public static List < Response > executeConnectionAndWait ( HttpURLConnection connection , RequestBatch requests ) { </a> 0
<a> List < Response > responses = Response . fromHttpConnection ( connection , requests ) ; </a> 0
<a> Utility . disconnectQuietly ( connection ) ; </a> 0
<a> int numRequests = requests . size ( ) ; </a> 0
<a> if ( numRequests != responses . size ( ) ) { </a> 0
<a> throw new FacebookException ( String . format ( "Received %d responses while expecting %d" , responses . size ( ) , </a> 0
<a> numRequests ) ) ; </a> 0
<a> } </a> 0
<a> runCallbacks ( requests , responses ) ; </a> 0
<a> HashSet < Session > sessions = new HashSet < Session > ( ) ; </a> 0
<a> for ( Request request : requests ) { </a> 0
<a> if ( request . session != null ) { </a> 0
<a> sessions . add ( request . session ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( Session session : sessions ) { </a> 0
<a> session . extendAccessTokenIfNeeded ( ) ; </a> 0
<a> } </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeConnectionAsync ( HttpURLConnection connection , RequestBatch requests ) { </a> 0
<a> return executeConnectionAsync ( null , connection , requests ) ; </a> 0
<a> } </a> 0
<a> public static RequestAsyncTask executeConnectionAsync ( Handler callbackHandler , HttpURLConnection connection , </a> 0
<a> RequestBatch requests ) { </a> 0
<a> Validate . notNull ( connection , "connection" ) ; </a> 0
<a> RequestAsyncTask asyncTask = new RequestAsyncTask ( connection , requests ) ; </a> 0
<a> requests . setCallbackHandler ( callbackHandler ) ; </a> 0
<a> asyncTask . executeOnSettingsExecutor ( ) ; </a> 0
<a> return asyncTask ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return new StringBuilder ( ) . append ( "{Request: " ) . append ( " session: " ) . append ( session ) . append ( ", graphPath: " ) </a> 0
<a> . append ( graphPath ) . append ( ", graphObject: " ) . append ( graphObject ) . append ( ", restMethod: " ) </a> 0
<a> . append ( restMethod ) . append ( ", httpMethod: " ) . append ( httpMethod ) . append ( ", parameters: " ) </a> 0
<a> . append ( parameters ) . append ( "}" ) . toString ( ) ; </a> 0
<a> } </a> 0
<a> static void runCallbacks ( final RequestBatch requests , List < Response > responses ) { </a> 0
<a> int numRequests = requests . size ( ) ; </a> 0
<a> final ArrayList < Pair < Callback , Response > > callbacks = new ArrayList < Pair < Callback , Response > > ( ) ; </a> 0
<a> for ( int i = 0 ; i < numRequests ; ++ i ) { </a> 0
<a> Request request = requests . get ( i ) ; </a> 0
<a> if ( request . callback != null ) { </a> 0
<a> callbacks . add ( new Pair < Callback , Response > ( request . callback , responses . get ( i ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( callbacks . size ( ) > 0 ) { </a> 0
<a> Runnable runnable = new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> for ( Pair < Callback , Response > pair : callbacks ) { </a> 0
<a> pair . first . onCompleted ( pair . second ) ; </a> 0
<a> } </a> 0
<a> List < RequestBatch . Callback > batchCallbacks = requests . getCallbacks ( ) ; </a> 0
<a> for ( RequestBatch . Callback batchCallback : batchCallbacks ) { </a> 0
<a> batchCallback . onBatchCompleted ( requests ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Handler callbackHandler = requests . getCallbackHandler ( ) ; </a> 0
<a> if ( callbackHandler == null ) { </a> 0
<a> runnable . run ( ) ; </a> 0
<a> } else { </a> 0
<a> callbackHandler . post ( runnable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static HttpURLConnection createConnection ( URL url ) throws IOException { </a> 0
<a> HttpURLConnection connection ; </a> 0
<a> connection = ( HttpURLConnection ) url . openConnection ( ) ; </a> 0
<a> connection . setRequestProperty ( USER_AGENT_HEADER , getUserAgent ( ) ) ; </a> 0
<a> connection . setRequestProperty ( CONTENT_TYPE_HEADER , getMimeContentType ( ) ) ; </a> 0
<a> connection . setChunkedStreamingMode ( 0 ) ; </a> 0
<a> return connection ; </a> 0
<a> } </a> 0
<a> private void addCommonParameters ( ) { </a> 0
<a> if ( this . session != null ) { </a> 0
<a> if ( ! this . session . isOpened ( ) ) { </a> 0
<a> throw new FacebookException ( "Session provided to a Request in un-opened state." ) ; </a> 0
<a> } else if ( ! this . parameters . containsKey ( ACCESS_TOKEN_PARAM ) ) { </a> 0
<a> String accessToken = this . session . getAccessToken ( ) ; </a> 0
<a> Logger . registerAccessToken ( accessToken ) ; </a> 0
<a> this . parameters . putString ( ACCESS_TOKEN_PARAM , accessToken ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> this . parameters . putString ( SDK_PARAM , SDK_ANDROID ) ; </a> 0
<a> this . parameters . putString ( FORMAT_PARAM , FORMAT_JSON ) ; </a> 0
<a> } </a> 0
<a> private String appendParametersToBaseUrl ( String baseUrl ) { </a> 0
<a> Uri . Builder uriBuilder = new Uri . Builder ( ) . encodedPath ( baseUrl ) ; </a> 0
<a> Set < String > keys = this . parameters . keySet ( ) ; </a> 0
<a> for ( String key : keys ) { </a> 0
<a> Object value = this . parameters . get ( key ) ; </a> 0
<a> if ( value == null ) { </a> 0
<a> value = "" ; </a> 0
<a> } </a> 0
<a> if ( isSupportedParameterType ( value ) ) { </a> 0
<a> value = parameterToString ( value ) ; </a> 0
<a> } else { </a> 0
<a> if ( httpMethod == HttpMethod . GET ) { </a> 0
<a> throw new IllegalArgumentException ( String . format ( "Unsupported parameter type for GET request: %s" , </a> 0
<a> value . getClass ( ) . getSimpleName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> uriBuilder . appendQueryParameter ( key , value . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> return uriBuilder . toString ( ) ; </a> 0
<a> } </a> 0
<a> final String getUrlForBatchedRequest ( ) { </a> 0
<a> if ( overriddenURL != null ) { </a> 0
<a> throw new FacebookException ( "Can't override URL for a batch request" ) ; </a> 0
<a> } </a> 0
<a> String baseUrl ; </a> 0
<a> if ( this . restMethod != null ) { </a> 0
<a> baseUrl = ServerProtocol . BATCHED_REST_METHOD_URL_BASE + this . restMethod ; </a> 0
<a> } else { </a> 0
<a> baseUrl = this . graphPath ; </a> 0
<a> } </a> 0
<a> addCommonParameters ( ) ; </a> 0
<a> return appendParametersToBaseUrl ( baseUrl ) ; </a> 0
<a> } </a> 0
<a> final String getUrlForSingleRequest ( ) { </a> 0
<a> if ( overriddenURL != null ) { </a> 0
<a> return overriddenURL . toString ( ) ; </a> 0
<a> } </a> 0
<a> String baseUrl ; </a> 0
<a> if ( this . restMethod != null ) { </a> 0
<a> baseUrl = ServerProtocol . REST_URL_BASE + this . restMethod ; </a> 0
<a> } else { </a> 0
<a> baseUrl = ServerProtocol . GRAPH_URL_BASE + this . graphPath ; </a> 0
<a> } </a> 0
<a> addCommonParameters ( ) ; </a> 0
<a> return appendParametersToBaseUrl ( baseUrl ) ; </a> 0
<a> } </a> 0
<a> private void serializeToBatch ( JSONArray batch , Bundle attachments ) throws JSONException , IOException { </a> 0
<a> JSONObject batchEntry = new JSONObject ( ) ; </a> 0
<a> if ( this . batchEntryName != null ) { </a> 0
<a> batchEntry . put ( BATCH_ENTRY_NAME_PARAM , this . batchEntryName ) ; </a> 0
<a> batchEntry . put ( BATCH_ENTRY_OMIT_RESPONSE_ON_SUCCESS_PARAM , this . batchEntryOmitResultOnSuccess ) ; </a> 0
<a> } </a> 0
<a> if ( this . batchEntryDependsOn != null ) { </a> 0
<a> batchEntry . put ( BATCH_ENTRY_DEPENDS_ON_PARAM , this . batchEntryDependsOn ) ; </a> 0
<a> } </a> 0
<a> String relativeURL = getUrlForBatchedRequest ( ) ; </a> 0
<a> batchEntry . put ( BATCH_RELATIVE_URL_PARAM , relativeURL ) ; </a> 0
<a> batchEntry . put ( BATCH_METHOD_PARAM , httpMethod ) ; </a> 0
<a> if ( this . session != null ) { </a> 0
<a> String accessToken = this . session . getAccessToken ( ) ; </a> 0
<a> Logger . registerAccessToken ( accessToken ) ; </a> 0
<a> } </a> 0
<a> ArrayList < String > attachmentNames = new ArrayList < String > ( ) ; </a> 0
<a> Set < String > keys = this . parameters . keySet ( ) ; </a> 0
<a> for ( String key : keys ) { </a> 0
<a> Object value = this . parameters . get ( key ) ; </a> 0
<a> if ( isSupportedAttachmentType ( value ) ) { </a> 0
<a> String name = String . format ( "%s%d" , ATTACHMENT_FILENAME_PREFIX , attachments . size ( ) ) ; </a> 0
<a> attachmentNames . add ( name ) ; </a> 0
<a> Utility . putObjectInBundle ( attachments , name , value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! attachmentNames . isEmpty ( ) ) { </a> 0
<a> String attachmentNamesString = TextUtils . join ( "," , attachmentNames ) ; </a> 0
<a> batchEntry . put ( ATTACHED_FILES_PARAM , attachmentNamesString ) ; </a> 0
<a> } </a> 0
<a> if ( this . graphObject != null ) { </a> 0
<a> final ArrayList < String > keysAndValues = new ArrayList < String > ( ) ; </a> 0
<a> processGraphObject ( this . graphObject , relativeURL , new KeyValueSerializer ( ) { </a> 0
<a> @ Override </a> 0
<a> public void writeString ( String key , String value ) throws IOException { </a> 0
<a> keysAndValues . add ( String . format ( "%s=%s" , key , URLEncoder . encode ( value , "UTF-8" ) ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> String bodyValue = TextUtils . join ( "&" , keysAndValues ) ; </a> 0
<a> batchEntry . put ( BATCH_BODY_PARAM , bodyValue ) ; </a> 0
<a> } </a> 0
<a> batch . put ( batchEntry ) ; </a> 0
<a> } </a> 0
<a> private void validate ( ) { </a> 0
<a> if ( graphPath != null && restMethod != null ) { </a> 0
<a> throw new IllegalArgumentException ( "Only one of a graph path or REST method may be specified per request." ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> final static void serializeToUrlConnection ( RequestBatch requests , HttpURLConnection connection ) </a> 0
<a> throws IOException , JSONException { </a> 0
<a> Logger logger = new Logger ( LoggingBehavior . REQUESTS , "Request" ) ; </a> 0
<a> int numRequests = requests . size ( ) ; </a> 0
<a> HttpMethod connectionHttpMethod = ( numRequests == 1 ) ? requests . get ( 0 ) . httpMethod : HttpMethod . POST ; </a> 0
<a> connection . setRequestMethod ( connectionHttpMethod . name ( ) ) ; </a> 0
<a> URL url = connection . getURL ( ) ; </a> 0
<a> logger . append ( "Request:\n" ) ; </a> 0
<a> logger . appendKeyValue ( "Id" , requests . getId ( ) ) ; </a> 0
<a> logger . appendKeyValue ( "URL" , url ) ; </a> 0
<a> logger . appendKeyValue ( "Method" , connection . getRequestMethod ( ) ) ; </a> 0
<a> logger . appendKeyValue ( "User-Agent" , connection . getRequestProperty ( "User-Agent" ) ) ; </a> 0
<a> logger . appendKeyValue ( "Content-Type" , connection . getRequestProperty ( "Content-Type" ) ) ; </a> 0
<a> connection . setConnectTimeout ( requests . getTimeout ( ) ) ; </a> 0
<a> connection . setReadTimeout ( requests . getTimeout ( ) ) ; </a> 0
<a> boolean isPost = ( connectionHttpMethod == HttpMethod . POST ) ; </a> 0
<a> if ( ! isPost ) { </a> 0
<a> logger . log ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> connection . setDoOutput ( true ) ; </a> 0
<a> BufferedOutputStream outputStream = new BufferedOutputStream ( connection . getOutputStream ( ) ) ; </a> 0
<a> try { </a> 0
<a> Serializer serializer = new Serializer ( outputStream , logger ) ; </a> 0
<a> if ( numRequests == 1 ) { </a> 0
<a> Request request = requests . get ( 0 ) ; </a> 0
<a> logger . append ( " Parameters:\n" ) ; </a> 0
<a> serializeParameters ( request . parameters , serializer ) ; </a> 0
<a> logger . append ( " Attachments:\n" ) ; </a> 0
<a> serializeAttachments ( request . parameters , serializer ) ; </a> 0
<a> if ( request . graphObject != null ) { </a> 0
<a> processGraphObject ( request . graphObject , url . getPath ( ) , serializer ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> String batchAppID = getBatchAppId ( requests ) ; </a> 0
<a> if ( Utility . isNullOrEmpty ( batchAppID ) ) { </a> 0
<a> throw new FacebookException ( "At least one request in a batch must have an open Session, or a " </a> 0
<a> + "default app ID must be specified." ) ; </a> 0
<a> } </a> 0
<a> serializer . writeString ( BATCH_APP_ID_PARAM , batchAppID ) ; </a> 0
<a> Bundle attachments = new Bundle ( ) ; </a> 0
<a> serializeRequestsAsJSON ( serializer , requests , attachments ) ; </a> 0
<a> logger . append ( " Attachments:\n" ) ; </a> 0
<a> serializeAttachments ( attachments , serializer ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> outputStream . close ( ) ; </a> 0
<a> } </a> 0
<a> logger . log ( ) ; </a> 0
<a> } </a> 0
<a> private static void processGraphObject ( GraphObject graphObject , String path , KeyValueSerializer serializer ) </a> 0
<a> throws IOException { </a> 0
<a> boolean isOGAction = false ; </a> 0
<a> if ( path . startsWith ( "me/" ) || path . startsWith ( "/me/" ) ) { </a> 0
<a> int colonLocation = path . indexOf ( ":" ) ; </a> 0
<a> int questionMarkLocation = path . indexOf ( "?" ) ; </a> 0
<a> isOGAction = colonLocation > 3 && ( questionMarkLocation == - 1 || colonLocation < questionMarkLocation ) ; </a> 0
<a> } </a> 0
<a> Set < Entry < String , Object > > entries = graphObject . asMap ( ) . entrySet ( ) ; </a> 0
<a> for ( Entry < String , Object > entry : entries ) { </a> 0
<a> boolean passByValue = isOGAction && entry . getKey ( ) . equalsIgnoreCase ( "image" ) ; </a> 0
<a> processGraphObjectProperty ( entry . getKey ( ) , entry . getValue ( ) , serializer , passByValue ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void processGraphObjectProperty ( String key , Object value , KeyValueSerializer serializer , </a> 0
<a> boolean passByValue ) throws IOException { </a> 0
<a> Class < ? > valueClass = value . getClass ( ) ; </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( valueClass ) ) { </a> 0
<a> value = ( ( GraphObject ) value ) . getInnerJSONObject ( ) ; </a> 0
<a> valueClass = value . getClass ( ) ; </a> 0
<a> } else if ( GraphObjectList . class . isAssignableFrom ( valueClass ) ) { </a> 0
<a> value = ( ( GraphObjectList < ? > ) value ) . getInnerJSONArray ( ) ; </a> 0
<a> valueClass = value . getClass ( ) ; </a> 0
<a> } </a> 0
<a> if ( JSONObject . class . isAssignableFrom ( valueClass ) ) { </a> 0
<a> JSONObject jsonObject = ( JSONObject ) value ; </a> 0
<a> if ( passByValue ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = jsonObject . keys ( ) ; </a> 0
<a> while ( keys . hasNext ( ) ) { </a> 0
<a> String propertyName = keys . next ( ) ; </a> 0
<a> String subKey = String . format ( "%s[%s]" , key , propertyName ) ; </a> 0
<a> processGraphObjectProperty ( subKey , jsonObject . opt ( propertyName ) , serializer , passByValue ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( jsonObject . has ( "id" ) ) { </a> 0
<a> processGraphObjectProperty ( key , jsonObject . optString ( "id" ) , serializer , passByValue ) ; </a> 0
<a> } else if ( jsonObject . has ( "url" ) ) { </a> 0
<a> processGraphObjectProperty ( key , jsonObject . optString ( "url" ) , serializer , passByValue ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else if ( JSONArray . class . isAssignableFrom ( valueClass ) ) { </a> 0
<a> JSONArray jsonArray = ( JSONArray ) value ; </a> 0
<a> int length = jsonArray . length ( ) ; </a> 0
<a> for ( int i = 0 ; i < length ; ++ i ) { </a> 0
<a> String subKey = String . format ( "%s[%d]" , key , i ) ; </a> 0
<a> processGraphObjectProperty ( subKey , jsonArray . opt ( i ) , serializer , passByValue ) ; </a> 0
<a> } </a> 0
<a> } else if ( String . class . isAssignableFrom ( valueClass ) || </a> 0
<a> Number . class . isAssignableFrom ( valueClass ) || </a> 0
<a> Boolean . class . isAssignableFrom ( valueClass ) ) { </a> 0
<a> serializer . writeString ( key , value . toString ( ) ) ; </a> 0
<a> } else if ( Date . class . isAssignableFrom ( valueClass ) ) { </a> 0
<a> Date date = ( Date ) value ; </a> 0
<a> final SimpleDateFormat iso8601DateFormat = new SimpleDateFormat ( ISO_8601_FORMAT_STRING , Locale . US ) ; </a> 0
<a> serializer . writeString ( key , iso8601DateFormat . format ( date ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void serializeParameters ( Bundle bundle , Serializer serializer ) throws IOException { </a> 0
<a> Set < String > keys = bundle . keySet ( ) ; </a> 0
<a> for ( String key : keys ) { </a> 0
<a> Object value = bundle . get ( key ) ; </a> 0
<a> if ( isSupportedParameterType ( value ) ) { </a> 0
<a> serializer . writeObject ( key , value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void serializeAttachments ( Bundle bundle , Serializer serializer ) throws IOException { </a> 0
<a> Set < String > keys = bundle . keySet ( ) ; </a> 0
<a> for ( String key : keys ) { </a> 0
<a> Object value = bundle . get ( key ) ; </a> 0
<a> if ( isSupportedAttachmentType ( value ) ) { </a> 0
<a> serializer . writeObject ( key , value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void serializeRequestsAsJSON ( Serializer serializer , Collection < Request > requests , Bundle attachments ) </a> 0
<a> throws JSONException , IOException { </a> 0
<a> JSONArray batch = new JSONArray ( ) ; </a> 0
<a> for ( Request request : requests ) { </a> 0
<a> request . serializeToBatch ( batch , attachments ) ; </a> 0
<a> } </a> 0
<a> String batchAsString = batch . toString ( ) ; </a> 0
<a> serializer . writeString ( BATCH_PARAM , batchAsString ) ; </a> 0
<a> } </a> 0
<a> private static String getMimeContentType ( ) { </a> 0
<a> return String . format ( "multipart/form-data; boundary=%s" , MIME_BOUNDARY ) ; </a> 0
<a> } </a> 0
<a> private static volatile String userAgent ; </a> 0
<a> private static String getUserAgent ( ) { </a> 0
<a> if ( userAgent == null ) { </a> 0
<a> userAgent = String . format ( "%s.%s" , USER_AGENT_BASE , FacebookSdkVersion . BUILD ) ; </a> 0
<a> } </a> 0
<a> return userAgent ; </a> 0
<a> } </a> 0
<a> private static String getBatchAppId ( RequestBatch batch ) { </a> 0
<a> if ( ! Utility . isNullOrEmpty ( batch . getBatchApplicationId ( ) ) ) { </a> 0
<a> return batch . getBatchApplicationId ( ) ; </a> 0
<a> } </a> 0
<a> for ( Request request : batch ) { </a> 0
<a> Session session = request . session ; </a> 0
<a> if ( session != null ) { </a> 0
<a> return session . getApplicationId ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return Request . defaultBatchApplicationId ; </a> 0
<a> } </a> 0
<a> private static < T extends GraphObject > List < T > typedListFromResponse ( Response response , Class < T > clazz ) { </a> 0
<a> GraphMultiResult multiResult = response . getGraphObjectAs ( GraphMultiResult . class ) ; </a> 0
<a> if ( multiResult == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> GraphObjectList < GraphObject > data = multiResult . getData ( ) ; </a> 0
<a> if ( data == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return data . castToListOf ( clazz ) ; </a> 0
<a> } </a> 0
<a> private static boolean isSupportedAttachmentType ( Object value ) { </a> 0
<a> return value instanceof Bitmap || value instanceof byte [ ] || value instanceof ParcelFileDescriptor ; </a> 0
<a> } </a> 0
<a> private static boolean isSupportedParameterType ( Object value ) { </a> 0
<a> return value instanceof String || value instanceof Boolean || value instanceof Number || </a> 0
<a> value instanceof Date ; </a> 0
<a> } </a> 0
<a> private static String parameterToString ( Object value ) { </a> 0
<a> if ( value instanceof String ) { </a> 0
<a> return ( String ) value ; </a> 0
<a> } else if ( value instanceof Boolean || value instanceof Number ) { </a> 0
<a> return value . toString ( ) ; </a> 0
<a> } else if ( value instanceof Date ) { </a> 0
<a> final SimpleDateFormat iso8601DateFormat = new SimpleDateFormat ( ISO_8601_FORMAT_STRING , Locale . US ) ; </a> 0
<a> return iso8601DateFormat . format ( value ) ; </a> 0
<a> } </a> 0
<a> throw new IllegalArgumentException ( "Unsupported parameter type." ) ; </a> 0
<a> } </a> 0
<a> private interface KeyValueSerializer { </a> 0
<a> void writeString ( String key , String value ) throws IOException ; </a> 0
<a> } </a> 0
<a> private static class Serializer implements KeyValueSerializer { </a> 0
<a> private final BufferedOutputStream outputStream ; </a> 0
<a> private final Logger logger ; </a> 0
<a> private boolean firstWrite = true ; </a> 0
<a> public Serializer ( BufferedOutputStream outputStream , Logger logger ) { </a> 0
<a> this . outputStream = outputStream ; </a> 0
<a> this . logger = logger ; </a> 0
<a> } </a> 0
<a> public void writeObject ( String key , Object value ) throws IOException { </a> 0
<a> if ( isSupportedParameterType ( value ) ) { </a> 0
<a> writeString ( key , parameterToString ( value ) ) ; </a> 0
<a> } else if ( value instanceof Bitmap ) { </a> 0
<a> writeBitmap ( key , ( Bitmap ) value ) ; </a> 0
<a> } else if ( value instanceof byte [ ] ) { </a> 0
<a> writeBytes ( key , ( byte [ ] ) value ) ; </a> 0
<a> } else if ( value instanceof ParcelFileDescriptor ) { </a> 0
<a> writeFile ( key , ( ParcelFileDescriptor ) value ) ; </a> 0
<a> } else { </a> 0
<a> throw new IllegalArgumentException ( "value is not a supported type: String, Bitmap, byte[]" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void writeString ( String key , String value ) throws IOException { </a> 0
<a> writeContentDisposition ( key , null , null ) ; </a> 0
<a> writeLine ( "%s" , value ) ; </a> 0
<a> writeRecordBoundary ( ) ; </a> 0
<a> if ( logger != null ) { </a> 0
<a> logger . appendKeyValue ( " " + key , value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void writeBitmap ( String key , Bitmap bitmap ) throws IOException { </a> 0
<a> writeContentDisposition ( key , key , "image/png" ) ; </a> 0
<a> bitmap . compress ( Bitmap . CompressFormat . PNG , 100 , outputStream ) ; </a> 0
<a> writeLine ( "" ) ; </a> 0
<a> writeRecordBoundary ( ) ; </a> 0
<a> logger . appendKeyValue ( " " + key , "<Image>" ) ; </a> 0
<a> } </a> 0
<a> public void writeBytes ( String key , byte [ ] bytes ) throws IOException { </a> 0
<a> writeContentDisposition ( key , key , "content/unknown" ) ; </a> 0
<a> this . outputStream . write ( bytes ) ; </a> 0
<a> writeLine ( "" ) ; </a> 0
<a> writeRecordBoundary ( ) ; </a> 0
<a> logger . appendKeyValue ( " " + key , String . format ( "<Data: %d>" , bytes . length ) ) ; </a> 0
<a> } </a> 0
<a> public void writeFile ( String key , ParcelFileDescriptor descriptor ) throws IOException { </a> 0
<a> writeContentDisposition ( key , key , "content/unknown" ) ; </a> 0
<a> ParcelFileDescriptor . AutoCloseInputStream inputStream = null ; </a> 0
<a> BufferedInputStream bufferedInputStream = null ; </a> 0
<a> int totalBytes = 0 ; </a> 0
<a> try { </a> 0
<a> inputStream = new ParcelFileDescriptor . AutoCloseInputStream ( descriptor ) ; </a> 0
<a> bufferedInputStream = new BufferedInputStream ( inputStream ) ; </a> 0
<a> byte [ ] buffer = new byte [ 8192 ] ; </a> 0
<a> int bytesRead ; </a> 0
<a> while ( ( bytesRead = bufferedInputStream . read ( buffer ) ) != - 1 ) { </a> 0
<a> this . outputStream . write ( buffer , 0 , bytesRead ) ; </a> 0
<a> totalBytes += bytesRead ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> if ( bufferedInputStream != null ) { </a> 0
<a> bufferedInputStream . close ( ) ; </a> 0
<a> } </a> 0
<a> if ( inputStream != null ) { </a> 0
<a> inputStream . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> writeLine ( "" ) ; </a> 0
<a> writeRecordBoundary ( ) ; </a> 0
<a> logger . appendKeyValue ( " " + key , String . format ( "<Data: %d>" , totalBytes ) ) ; </a> 0
<a> } </a> 0
<a> public void writeRecordBoundary ( ) throws IOException { </a> 0
<a> writeLine ( "--%s" , MIME_BOUNDARY ) ; </a> 0
<a> } </a> 0
<a> public void writeContentDisposition ( String name , String filename , String contentType ) throws IOException { </a> 0
<a> write ( "Content-Disposition: form-data; name=\"%s\"" , name ) ; </a> 0
<a> if ( filename != null ) { </a> 0
<a> write ( "; filename=\"%s\"" , filename ) ; </a> 0
<a> } </a> 0
<a> writeLine ( "" ) ; </a> 0
<a> if ( contentType != null ) { </a> 0
<a> writeLine ( "%s: %s" , CONTENT_TYPE_HEADER , contentType ) ; </a> 0
<a> } </a> 0
<a> writeLine ( "" ) ; </a> 0
<a> } </a> 0
<a> public void write ( String format , Object ... args ) throws IOException { </a> 0
<a> if ( firstWrite ) { </a> 0
<a> this . outputStream . write ( "--" . getBytes ( ) ) ; </a> 0
<a> this . outputStream . write ( MIME_BOUNDARY . getBytes ( ) ) ; </a> 0
<a> this . outputStream . write ( "\r\n" . getBytes ( ) ) ; </a> 0
<a> firstWrite = false ; </a> 0
<a> } </a> 0
<a> this . outputStream . write ( String . format ( format , args ) . getBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> public void writeLine ( String format , Object ... args ) throws IOException { </a> 0
<a> write ( format , args ) ; </a> 0
<a> write ( "\r\n" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface Callback { </a> 0
<a> void onCompleted ( Response response ) ; </a> 0
<a> } </a> 0
<a> public interface GraphUserCallback { </a> 0
<a> void onCompleted ( GraphUser user , Response response ) ; </a> 0
<a> } </a> 0
<a> public interface GraphUserListCallback { </a> 0
<a> void onCompleted ( List < GraphUser > users , Response response ) ; </a> 0
<a> } </a> 0
<a> public interface GraphPlaceListCallback { </a> 0
<a> void onCompleted ( List < GraphPlace > places , Response response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . annotation . TargetApi ; </a> 0
<a> import android . os . AsyncTask ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import java . lang . reflect . InvocationTargetException ; </a> 0
<a> import java . lang . reflect . Method ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . Executor ; </a> 0
<a> @ TargetApi ( 3 ) </a> 0
<a> public class RequestAsyncTask extends AsyncTask < Void , Void , List < Response > > { </a> 0
<a> private static final String TAG = RequestAsyncTask . class . getCanonicalName ( ) ; </a> 0
<a> private static Method executeOnExecutorMethod ; </a> 0
<a> private final HttpURLConnection connection ; </a> 0
<a> private final RequestBatch requests ; </a> 0
<a> private Exception exception ; </a> 0
<a> static { </a> 0
<a> for ( Method method : AsyncTask . class . getMethods ( ) ) { </a> 0
<a> if ( "executeOnExecutor" . equals ( method . getName ( ) ) ) { </a> 0
<a> Class < ? > [ ] parameters = method . getParameterTypes ( ) ; </a> 0
<a> if ( ( parameters . length == 2 ) && ( parameters [ 0 ] == Executor . class ) && parameters [ 1 ] . isArray ( ) ) { </a> 0
<a> executeOnExecutorMethod = method ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public RequestAsyncTask ( Request ... requests ) { </a> 0
<a> this ( null , new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public RequestAsyncTask ( Collection < Request > requests ) { </a> 0
<a> this ( null , new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public RequestAsyncTask ( RequestBatch requests ) { </a> 0
<a> this ( null , requests ) ; </a> 0
<a> } </a> 0
<a> public RequestAsyncTask ( HttpURLConnection connection , Request ... requests ) { </a> 0
<a> this ( connection , new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public RequestAsyncTask ( HttpURLConnection connection , Collection < Request > requests ) { </a> 0
<a> this ( connection , new RequestBatch ( requests ) ) ; </a> 0
<a> } </a> 0
<a> public RequestAsyncTask ( HttpURLConnection connection , RequestBatch requests ) { </a> 0
<a> this . requests = requests ; </a> 0
<a> this . connection = connection ; </a> 0
<a> } </a> 0
<a> protected final Exception getException ( ) { </a> 0
<a> return exception ; </a> 0
<a> } </a> 0
<a> protected final RequestBatch getRequests ( ) { </a> 0
<a> return requests ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return new StringBuilder ( ) . append ( "{RequestAsyncTask: " ) . append ( " connection: " ) . append ( connection ) </a> 0
<a> . append ( ", requests: " ) . append ( requests ) . append ( "}" ) . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onPreExecute ( ) { </a> 0
<a> super . onPreExecute ( ) ; </a> 0
<a> if ( requests . getCallbackHandler ( ) == null ) { </a> 0
<a> requests . setCallbackHandler ( new Handler ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onPostExecute ( List < Response > result ) { </a> 0
<a> super . onPostExecute ( result ) ; </a> 0
<a> if ( exception != null ) { </a> 0
<a> Log . d ( TAG , String . format ( "onPostExecute: exception encountered during request: %s" , exception . getMessage ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected List < Response > doInBackground ( Void ... params ) { </a> 0
<a> try { </a> 0
<a> if ( connection == null ) { </a> 0
<a> return requests . executeAndWait ( ) ; </a> 0
<a> } else { </a> 0
<a> return Request . executeConnectionAndWait ( connection , requests ) ; </a> 0
<a> } </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> exception = e ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> RequestAsyncTask executeOnSettingsExecutor ( ) { </a> 0
<a> try { </a> 0
<a> if ( executeOnExecutorMethod != null ) { </a> 0
<a> executeOnExecutorMethod . invoke ( this , Settings . getExecutor ( ) , null ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } catch ( InvocationTargetException e ) { </a> 0
<a> } catch ( IllegalAccessException e ) { </a> 0
<a> } </a> 0
<a> this . execute ( ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import java . util . * ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public class RequestBatch extends AbstractList < Request > { </a> 0
<a> private static AtomicInteger idGenerator = new AtomicInteger ( ) ; </a> 0
<a> private Handler callbackHandler ; </a> 0
<a> private List < Request > requests = new ArrayList < Request > ( ) ; </a> 0
<a> private int timeoutInMilliseconds = 0 ; </a> 0
<a> private final String id = Integer . valueOf ( idGenerator . incrementAndGet ( ) ) . toString ( ) ; </a> 0
<a> private List < Callback > callbacks = new ArrayList < Callback > ( ) ; </a> 0
<a> private String batchApplicationId ; </a> 0
<a> public RequestBatch ( ) { </a> 0
<a> this . requests = new ArrayList < Request > ( ) ; </a> 0
<a> } </a> 0
<a> public RequestBatch ( Collection < Request > requests ) { </a> 0
<a> this . requests = new ArrayList < Request > ( requests ) ; </a> 0
<a> } </a> 0
<a> public RequestBatch ( Request ... requests ) { </a> 0
<a> this . requests = Arrays . asList ( requests ) ; </a> 0
<a> } </a> 0
<a> public RequestBatch ( RequestBatch requests ) { </a> 0
<a> this . requests = new ArrayList < Request > ( requests ) ; </a> 0
<a> this . callbackHandler = requests . callbackHandler ; </a> 0
<a> this . timeoutInMilliseconds = requests . timeoutInMilliseconds ; </a> 0
<a> this . callbacks = new ArrayList < Callback > ( requests . callbacks ) ; </a> 0
<a> } </a> 0
<a> public int getTimeout ( ) { </a> 0
<a> return timeoutInMilliseconds ; </a> 0
<a> } </a> 0
<a> public void setTimeout ( int timeoutInMilliseconds ) { </a> 0
<a> if ( timeoutInMilliseconds < 0 ) { </a> 0
<a> throw new IllegalArgumentException ( "Argument timeoutInMilliseconds must be >= 0." ) ; </a> 0
<a> } </a> 0
<a> this . timeoutInMilliseconds = timeoutInMilliseconds ; </a> 0
<a> } </a> 0
<a> public void addCallback ( Callback callback ) { </a> 0
<a> if ( ! callbacks . contains ( callback ) ) { </a> 0
<a> callbacks . add ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void removeCallback ( Callback callback ) { </a> 0
<a> callbacks . remove ( callback ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final boolean add ( Request request ) { </a> 0
<a> return requests . add ( request ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void add ( int location , Request request ) { </a> 0
<a> requests . add ( location , request ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final void clear ( ) { </a> 0
<a> requests . clear ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final Request get ( int i ) { </a> 0
<a> return requests . get ( i ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final Request remove ( int location ) { </a> 0
<a> return requests . remove ( location ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final Request set ( int location , Request request ) { </a> 0
<a> return requests . set ( location , request ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final int size ( ) { </a> 0
<a> return requests . size ( ) ; </a> 0
<a> } </a> 0
<a> final String getId ( ) { </a> 0
<a> return id ; </a> 0
<a> } </a> 0
<a> final Handler getCallbackHandler ( ) { </a> 0
<a> return callbackHandler ; </a> 0
<a> } </a> 0
<a> final void setCallbackHandler ( Handler callbackHandler ) { </a> 0
<a> this . callbackHandler = callbackHandler ; </a> 0
<a> } </a> 0
<a> final List < Request > getRequests ( ) { </a> 0
<a> return requests ; </a> 0
<a> } </a> 0
<a> final List < Callback > getCallbacks ( ) { </a> 0
<a> return callbacks ; </a> 0
<a> } </a> 0
<a> final String getBatchApplicationId ( ) { </a> 0
<a> return batchApplicationId ; </a> 0
<a> } </a> 0
<a> final void setBatchApplicationId ( String batchApplicationId ) { </a> 0
<a> this . batchApplicationId = batchApplicationId ; </a> 0
<a> } </a> 0
<a> public final List < Response > executeAndWait ( ) { </a> 0
<a> return executeAndWaitImpl ( ) ; </a> 0
<a> } </a> 0
<a> public final RequestAsyncTask executeAsync ( ) { </a> 0
<a> return executeAsyncImpl ( ) ; </a> 0
<a> } </a> 0
<a> public interface Callback { </a> 0
<a> void onBatchCompleted ( RequestBatch batch ) ; </a> 0
<a> } </a> 0
<a> List < Response > executeAndWaitImpl ( ) { </a> 0
<a> return Request . executeBatchAndWait ( this ) ; </a> 0
<a> } </a> 0
<a> RequestAsyncTask executeAsyncImpl ( ) { </a> 0
<a> return Request . executeBatchAsync ( this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import com . facebook . internal . * ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphObjectList ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import org . json . JSONTokener ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . MalformedURLException ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class Response { </a> 0
<a> private final HttpURLConnection connection ; </a> 0
<a> private final GraphObject graphObject ; </a> 0
<a> private final GraphObjectList < GraphObject > graphObjectList ; </a> 0
<a> private final boolean isFromCache ; </a> 0
<a> private final FacebookRequestError error ; </a> 0
<a> private final Request request ; </a> 0
<a> public static final String NON_JSON_RESPONSE_PROPERTY = "FACEBOOK_NON_JSON_RESULT" ; </a> 0
<a> private static final int INVALID_SESSION_FACEBOOK_ERROR_CODE = 190 ; </a> 0
<a> private static final String CODE_KEY = "code" ; </a> 0
<a> private static final String BODY_KEY = "body" ; </a> 0
<a> private static final String RESPONSE_LOG_TAG = "Response" ; </a> 0
<a> private static final String RESPONSE_CACHE_TAG = "ResponseCache" ; </a> 0
<a> private static FileLruCache responseCache ; </a> 0
<a> Response ( Request request , HttpURLConnection connection , GraphObject graphObject , boolean isFromCache ) { </a> 0
<a> this . request = request ; </a> 0
<a> this . connection = connection ; </a> 0
<a> this . graphObject = graphObject ; </a> 0
<a> this . graphObjectList = null ; </a> 0
<a> this . isFromCache = isFromCache ; </a> 0
<a> this . error = null ; </a> 0
<a> } </a> 0
<a> Response ( Request request , HttpURLConnection connection , GraphObjectList < GraphObject > graphObjects , </a> 0
<a> boolean isFromCache ) { </a> 0
<a> this . request = request ; </a> 0
<a> this . connection = connection ; </a> 0
<a> this . graphObject = null ; </a> 0
<a> this . graphObjectList = graphObjects ; </a> 0
<a> this . isFromCache = isFromCache ; </a> 0
<a> this . error = null ; </a> 0
<a> } </a> 0
<a> Response ( Request request , HttpURLConnection connection , FacebookRequestError error ) { </a> 0
<a> this . request = request ; </a> 0
<a> this . connection = connection ; </a> 0
<a> this . graphObject = null ; </a> 0
<a> this . graphObjectList = null ; </a> 0
<a> this . isFromCache = false ; </a> 0
<a> this . error = error ; </a> 0
<a> } </a> 0
<a> public final FacebookRequestError getError ( ) { </a> 0
<a> return error ; </a> 0
<a> } </a> 0
<a> public final GraphObject getGraphObject ( ) { </a> 0
<a> return graphObject ; </a> 0
<a> } </a> 0
<a> public final < T extends GraphObject > T getGraphObjectAs ( Class < T > graphObjectClass ) { </a> 0
<a> if ( graphObject == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( graphObjectClass == null ) { </a> 0
<a> throw new NullPointerException ( "Must pass in a valid interface that extends GraphObject" ) ; </a> 0
<a> } </a> 0
<a> return graphObject . cast ( graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> public final GraphObjectList < GraphObject > getGraphObjectList ( ) { </a> 0
<a> return graphObjectList ; </a> 0
<a> } </a> 0
<a> public final < T extends GraphObject > GraphObjectList < T > getGraphObjectListAs ( Class < T > graphObjectClass ) { </a> 0
<a> if ( graphObjectList == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return graphObjectList . castToListOf ( graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> public final HttpURLConnection getConnection ( ) { </a> 0
<a> return connection ; </a> 0
<a> } </a> 0
<a> public Request getRequest ( ) { </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> public enum PagingDirection { </a> 0
<a> NEXT , </a> 0
<a> PREVIOUS </a> 0
<a> } </a> 0
<a> public Request getRequestForPagedResults ( PagingDirection direction ) { </a> 0
<a> String link = null ; </a> 0
<a> if ( graphObject != null ) { </a> 0
<a> PagedResults pagedResults = graphObject . cast ( PagedResults . class ) ; </a> 0
<a> PagingInfo pagingInfo = pagedResults . getPaging ( ) ; </a> 0
<a> if ( pagingInfo != null ) { </a> 0
<a> if ( direction == PagingDirection . NEXT ) { </a> 0
<a> link = pagingInfo . getNext ( ) ; </a> 0
<a> } else { </a> 0
<a> link = pagingInfo . getPrevious ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( Utility . isNullOrEmpty ( link ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( link != null && link . equals ( request . getUrlForSingleRequest ( ) ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> Request pagingRequest ; </a> 0
<a> try { </a> 0
<a> pagingRequest = new Request ( request . getSession ( ) , new URL ( link ) ) ; </a> 0
<a> } catch ( MalformedURLException e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return pagingRequest ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> String responseCode ; </a> 0
<a> try { </a> 0
<a> responseCode = String . format ( "%d" , ( connection != null ) ? connection . getResponseCode ( ) : 200 ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> responseCode = "unknown" ; </a> 0
<a> } </a> 0
<a> return new StringBuilder ( ) . append ( "{Response: " ) . append ( " responseCode: " ) . append ( responseCode ) </a> 0
<a> . append ( ", graphObject: " ) . append ( graphObject ) . append ( ", error: " ) . append ( error ) </a> 0
<a> . append ( ", isFromCache:" ) . append ( isFromCache ) . append ( "}" ) </a> 0
<a> . toString ( ) ; </a> 0
<a> } </a> 0
<a> public final boolean getIsFromCache ( ) { </a> 0
<a> return isFromCache ; </a> 0
<a> } </a> 0
<a> static FileLruCache getResponseCache ( ) { </a> 0
<a> if ( responseCache == null ) { </a> 0
<a> Context applicationContext = Session . getStaticContext ( ) ; </a> 0
<a> if ( applicationContext != null ) { </a> 0
<a> responseCache = new FileLruCache ( applicationContext , RESPONSE_CACHE_TAG , new FileLruCache . Limits ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return responseCache ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "resource" ) </a> 0
<a> static List < Response > fromHttpConnection ( HttpURLConnection connection , RequestBatch requests ) { </a> 0
<a> InputStream stream = null ; </a> 0
<a> FileLruCache cache = null ; </a> 0
<a> String cacheKey = null ; </a> 0
<a> if ( requests instanceof CacheableRequestBatch ) { </a> 0
<a> CacheableRequestBatch cacheableRequestBatch = ( CacheableRequestBatch ) requests ; </a> 0
<a> cache = getResponseCache ( ) ; </a> 0
<a> cacheKey = cacheableRequestBatch . getCacheKeyOverride ( ) ; </a> 0
<a> if ( Utility . isNullOrEmpty ( cacheKey ) ) { </a> 0
<a> if ( requests . size ( ) == 1 ) { </a> 0
<a> cacheKey = requests . get ( 0 ) . getUrlForSingleRequest ( ) ; </a> 0
<a> } else { </a> 0
<a> Logger . log ( LoggingBehavior . REQUESTS , RESPONSE_CACHE_TAG , </a> 0
<a> "Not using cache for cacheable request because no key was specified" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! cacheableRequestBatch . getForceRoundTrip ( ) && cache != null && ! Utility . isNullOrEmpty ( cacheKey ) ) { </a> 0
<a> try { </a> 0
<a> stream = cache . get ( cacheKey ) ; </a> 0
<a> if ( stream != null ) { </a> 0
<a> return createResponsesFromStream ( stream , null , requests , true ) ; </a> 0
<a> } </a> 0
<a> } catch ( FacebookException exception ) { </a> 0
<a> } catch ( JSONException exception ) { </a> 0
<a> } catch ( IOException exception ) { </a> 0
<a> } finally { </a> 0
<a> Utility . closeQuietly ( stream ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> if ( connection . getResponseCode ( ) >= 400 ) { </a> 0
<a> stream = connection . getErrorStream ( ) ; </a> 0
<a> } else { </a> 0
<a> stream = connection . getInputStream ( ) ; </a> 0
<a> if ( ( cache != null ) && ( cacheKey != null ) && ( stream != null ) ) { </a> 0
<a> InputStream interceptStream = cache . interceptAndPut ( cacheKey , stream ) ; </a> 0
<a> if ( interceptStream != null ) { </a> 0
<a> stream = interceptStream ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return createResponsesFromStream ( stream , connection , requests , false ) ; </a> 0
<a> } catch ( FacebookException facebookException ) { </a> 0
<a> Logger . log ( LoggingBehavior . REQUESTS , RESPONSE_LOG_TAG , "Response <Error>: %s" , facebookException ) ; </a> 0
<a> return constructErrorResponses ( requests , connection , facebookException ) ; </a> 0
<a> } catch ( JSONException exception ) { </a> 0
<a> Logger . log ( LoggingBehavior . REQUESTS , RESPONSE_LOG_TAG , "Response <Error>: %s" , exception ) ; </a> 0
<a> return constructErrorResponses ( requests , connection , new FacebookException ( exception ) ) ; </a> 0
<a> } catch ( IOException exception ) { </a> 0
<a> Logger . log ( LoggingBehavior . REQUESTS , RESPONSE_LOG_TAG , "Response <Error>: %s" , exception ) ; </a> 0
<a> return constructErrorResponses ( requests , connection , new FacebookException ( exception ) ) ; </a> 0
<a> } finally { </a> 0
<a> Utility . closeQuietly ( stream ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static List < Response > createResponsesFromStream ( InputStream stream , HttpURLConnection connection , </a> 0
<a> RequestBatch requests , boolean isFromCache ) throws FacebookException , JSONException , IOException { </a> 0
<a> String responseString = Utility . readStreamToString ( stream ) ; </a> 0
<a> Logger . log ( LoggingBehavior . INCLUDE_RAW_RESPONSES , RESPONSE_LOG_TAG , </a> 0
<a> "Response (raw)\n Size: %d\n Response:\n%s\n" , responseString . length ( ) , </a> 0
<a> responseString ) ; </a> 0
<a> JSONTokener tokener = new JSONTokener ( responseString ) ; </a> 0
<a> Object resultObject = tokener . nextValue ( ) ; </a> 0
<a> List < Response > responses = createResponsesFromObject ( connection , requests , resultObject , isFromCache ) ; </a> 0
<a> Logger . log ( LoggingBehavior . REQUESTS , RESPONSE_LOG_TAG , "Response\n Id: %s\n Size: %d\n Responses:\n%s\n" , </a> 0
<a> requests . getId ( ) , responseString . length ( ) , responses ) ; </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> private static List < Response > createResponsesFromObject ( HttpURLConnection connection , List < Request > requests , </a> 0
<a> Object object , boolean isFromCache ) throws FacebookException , JSONException { </a> 0
<a> assert ( connection != null ) || isFromCache ; </a> 0
<a> int numRequests = requests . size ( ) ; </a> 0
<a> List < Response > responses = new ArrayList < Response > ( numRequests ) ; </a> 0
<a> Object originalResult = object ; </a> 0
<a> if ( numRequests == 1 ) { </a> 0
<a> Request request = requests . get ( 0 ) ; </a> 0
<a> try { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( BODY_KEY , object ) ; </a> 0
<a> int responseCode = ( connection != null ) ? connection . getResponseCode ( ) : 200 ; </a> 0
<a> jsonObject . put ( CODE_KEY , responseCode ) ; </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> jsonArray . put ( jsonObject ) ; </a> 0
<a> object = jsonArray ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> responses . add ( new Response ( request , connection , new FacebookRequestError ( connection , e ) ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> responses . add ( new Response ( request , connection , new FacebookRequestError ( connection , e ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! ( object instanceof JSONArray ) || ( ( JSONArray ) object ) . length ( ) != numRequests ) { </a> 0
<a> FacebookException exception = new FacebookException ( "Unexpected number of results" ) ; </a> 0
<a> throw exception ; </a> 0
<a> } </a> 0
<a> JSONArray jsonArray = ( JSONArray ) object ; </a> 0
<a> for ( int i = 0 ; i < jsonArray . length ( ) ; ++ i ) { </a> 0
<a> Request request = requests . get ( i ) ; </a> 0
<a> try { </a> 0
<a> Object obj = jsonArray . get ( i ) ; </a> 0
<a> responses . add ( createResponseFromObject ( request , connection , obj , isFromCache , originalResult ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> responses . add ( new Response ( request , connection , new FacebookRequestError ( connection , e ) ) ) ; </a> 0
<a> } catch ( FacebookException e ) { </a> 0
<a> responses . add ( new Response ( request , connection , new FacebookRequestError ( connection , e ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> private static Response createResponseFromObject ( Request request , HttpURLConnection connection , Object object , </a> 0
<a> boolean isFromCache , Object originalResult ) throws JSONException { </a> 0
<a> if ( object instanceof JSONObject ) { </a> 0
<a> JSONObject jsonObject = ( JSONObject ) object ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . checkResponseAndCreateError ( jsonObject , originalResult , connection ) ; </a> 0
<a> if ( error != null ) { </a> 0
<a> if ( error . getErrorCode ( ) == INVALID_SESSION_FACEBOOK_ERROR_CODE ) { </a> 0
<a> Session session = request . getSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return new Response ( request , connection , error ) ; </a> 0
<a> } </a> 0
<a> Object body = Utility . getStringPropertyAsJSON ( jsonObject , BODY_KEY , NON_JSON_RESPONSE_PROPERTY ) ; </a> 0
<a> if ( body instanceof JSONObject ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ( JSONObject ) body ) ; </a> 0
<a> return new Response ( request , connection , graphObject , isFromCache ) ; </a> 0
<a> } else if ( body instanceof JSONArray ) { </a> 0
<a> GraphObjectList < GraphObject > graphObjectList = GraphObject . Factory . createList ( </a> 0
<a> ( JSONArray ) body , GraphObject . class ) ; </a> 0
<a> return new Response ( request , connection , graphObjectList , isFromCache ) ; </a> 0
<a> } </a> 0
<a> object = JSONObject . NULL ; </a> 0
<a> } </a> 0
<a> if ( object == JSONObject . NULL ) { </a> 0
<a> return new Response ( request , connection , ( GraphObject ) null , isFromCache ) ; </a> 0
<a> } else { </a> 0
<a> throw new FacebookException ( "Got unexpected object type in response, class: " </a> 0
<a> + object . getClass ( ) . getSimpleName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static List < Response > constructErrorResponses ( List < Request > requests , HttpURLConnection connection , </a> 0
<a> FacebookException error ) { </a> 0
<a> int count = requests . size ( ) ; </a> 0
<a> List < Response > responses = new ArrayList < Response > ( count ) ; </a> 0
<a> for ( int i = 0 ; i < count ; ++ i ) { </a> 0
<a> Response response = new Response ( requests . get ( i ) , connection , new FacebookRequestError ( connection , error ) ) ; </a> 0
<a> responses . add ( response ) ; </a> 0
<a> } </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> interface PagingInfo extends GraphObject { </a> 0
<a> String getNext ( ) ; </a> 0
<a> String getPrevious ( ) ; </a> 0
<a> } </a> 0
<a> interface PagedResults extends GraphObject { </a> 0
<a> GraphObjectList < GraphObject > getData ( ) ; </a> 0
<a> PagingInfo getPaging ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public enum SessionLoginBehavior { </a> 0
<a> SSO_WITH_FALLBACK ( true , true ) , </a> 0
<a> SSO_ONLY ( true , false ) , </a> 0
<a> SUPPRESS_SSO ( false , true ) ; </a> 0
<a> private final boolean allowsKatanaAuth ; </a> 0
<a> private final boolean allowsWebViewAuth ; </a> 0
<a> private SessionLoginBehavior ( boolean allowsKatanaAuth , boolean allowsWebViewAuth ) { </a> 0
<a> this . allowsKatanaAuth = allowsKatanaAuth ; </a> 0
<a> this . allowsWebViewAuth = allowsWebViewAuth ; </a> 0
<a> } </a> 0
<a> boolean allowsKatanaAuth ( ) { </a> 0
<a> return allowsKatanaAuth ; </a> 0
<a> } </a> 0
<a> boolean allowsWebViewAuth ( ) { </a> 0
<a> return allowsWebViewAuth ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . ContentResolver ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . SharedPreferences ; </a> 0
<a> import android . database . Cursor ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . os . AsyncTask ; </a> 0
<a> import android . os . Bundle ; </a> 1
<a> import com . facebook . android . BuildConfig ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import java . lang . reflect . Field ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . HashSet ; </a> 0
<a> import java . util . Set ; </a> 0
<a> import java . util . concurrent . * ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public final class Settings { </a> 0
<a> private static final HashSet < LoggingBehavior > loggingBehaviors = new HashSet < LoggingBehavior > ( ) ; </a> 1
<a> private static volatile Executor executor ; </a> 0
<a> private static volatile boolean shouldAutoPublishInstall ; </a> 0
<a> private static final int DEFAULT_CORE_POOL_SIZE = 5 ; </a> 0
<a> private static final int DEFAULT_MAXIMUM_POOL_SIZE = 128 ; </a> 0
<a> private static final int DEFAULT_KEEP_ALIVE = 1 ; </a> 0
<a> private static final Object LOCK = new Object ( ) ; </a> 0
<a> private static final Uri ATTRIBUTION_ID_CONTENT_URI = </a> 0
<a> Uri . parse ( "content://com.facebook.katana.provider.AttributionIdProvider" ) ; </a> 0
<a> private static final String ATTRIBUTION_ID_COLUMN_NAME = "aid" ; </a> 0
<a> private static final String ATTRIBUTION_PREFERENCES = "com.facebook.sdk.attributionTracking" ; </a> 0
<a> private static final String PUBLISH_ACTIVITY_PATH = "%s/activities" ; </a> 0
<a> private static final String MOBILE_INSTALL_EVENT = "MOBILE_APP_INSTALL" ; </a> 0
<a> private static final String SUPPORTS_ATTRIBUTION = "supports_attribution" ; </a> 1
<a> private static final String APPLICATION_FIELDS = "fields" ; </a> 1
<a> private static final String ANALYTICS_EVENT = "event" ; </a> 0
<a> private static final String ATTRIBUTION_KEY = "attribution" ; </a> 1
<a> private static final BlockingQueue < Runnable > DEFAULT_WORK_QUEUE = new LinkedBlockingQueue < Runnable > ( 10 ) ; </a> 0
<a> private static final ThreadFactory DEFAULT_THREAD_FACTORY = new ThreadFactory ( ) { </a> 0
<a> private final AtomicInteger counter = new AtomicInteger ( 0 ) ; </a> 0
<a> public Thread newThread ( Runnable runnable ) { </a> 0
<a> return new Thread ( runnable , "FacebookSdk #" + counter . incrementAndGet ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public static final Set < LoggingBehavior > getLoggingBehaviors ( ) { </a> 0
<a> synchronized ( loggingBehaviors ) { </a> 0
<a> return Collections . unmodifiableSet ( new HashSet < LoggingBehavior > ( loggingBehaviors ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final void addLoggingBehavior ( LoggingBehavior behavior ) { </a> 0
<a> synchronized ( loggingBehaviors ) { </a> 0
<a> loggingBehaviors . add ( behavior ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final void removeLoggingBehavior ( LoggingBehavior behavior ) { </a> 0
<a> synchronized ( loggingBehaviors ) { </a> 0
<a> loggingBehaviors . remove ( behavior ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final void clearLoggingBehaviors ( ) { </a> 0
<a> synchronized ( loggingBehaviors ) { </a> 0
<a> loggingBehaviors . clear ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final boolean isLoggingBehaviorEnabled ( LoggingBehavior behavior ) { </a> 0
<a> synchronized ( loggingBehaviors ) { </a> 0
<a> return BuildConfig . DEBUG && loggingBehaviors . contains ( behavior ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static Executor getExecutor ( ) { </a> 0
<a> synchronized ( LOCK ) { </a> 0
<a> if ( Settings . executor == null ) { </a> 0
<a> Executor executor = getAsyncTaskExecutor ( ) ; </a> 0
<a> if ( executor == null ) { </a> 0
<a> executor = new ThreadPoolExecutor ( DEFAULT_CORE_POOL_SIZE , DEFAULT_MAXIMUM_POOL_SIZE , </a> 0
<a> DEFAULT_KEEP_ALIVE , TimeUnit . SECONDS , DEFAULT_WORK_QUEUE , DEFAULT_THREAD_FACTORY ) ; </a> 0
<a> } </a> 0
<a> Settings . executor = executor ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return Settings . executor ; </a> 0
<a> } </a> 0
<a> public static void setExecutor ( Executor executor ) { </a> 0
<a> Validate . notNull ( executor , "executor" ) ; </a> 0
<a> synchronized ( LOCK ) { </a> 0
<a> Settings . executor = executor ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static Executor getAsyncTaskExecutor ( ) { </a> 0
<a> Field executorField = null ; </a> 0
<a> try { </a> 0
<a> executorField = AsyncTask . class . getField ( "THREAD_POOL_EXECUTOR" ) ; </a> 0
<a> } catch ( NoSuchFieldException e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( executorField == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> Object executorObject = null ; </a> 0
<a> try { </a> 0
<a> executorObject = executorField . get ( null ) ; </a> 0
<a> } catch ( IllegalAccessException e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( executorObject == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> if ( ! ( executorObject instanceof Executor ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return ( Executor ) executorObject ; </a> 0
<a> } </a> 0
<a> public static void publishInstallAsync ( final Context context , final String applicationId ) { </a> 0
<a> final Context applicationContext = context . getApplicationContext ( ) ; </a> 0
<a> Settings . getExecutor ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Settings . publishInstallAndWait ( applicationContext , applicationId ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public static void setShouldAutoPublishInstall ( boolean shouldAutoPublishInstall ) { </a> 0
<a> Settings . shouldAutoPublishInstall = shouldAutoPublishInstall ; </a> 0
<a> } </a> 0
<a> public static boolean getShouldAutoPublishInstall ( ) { </a> 0
<a> return shouldAutoPublishInstall ; </a> 0
<a> } </a> 0
<a> public static boolean publishInstallAndWait ( final Context context , final String applicationId ) { </a> 0
<a> try { </a> 0
<a> if ( applicationId == null ) { </a> 1
<a> return false ; </a> 1
<a> } </a> 0
<a> String attributionId = Settings . getAttributionId ( context . getContentResolver ( ) ) ; </a> 0
<a> SharedPreferences preferences = context . getSharedPreferences ( ATTRIBUTION_PREFERENCES , Context . MODE_PRIVATE ) ; </a> 0
<a> String pingKey = applicationId + "ping" ; </a> 0
<a> long lastPing = preferences . getLong ( pingKey , 0 ) ; </a> 0
<a> if ( lastPing == 0 && attributionId != null ) { </a> 0
<a> Bundle supportsAttributionParams = new Bundle ( ) ; </a> 0
<a> supportsAttributionParams . putString ( APPLICATION_FIELDS , SUPPORTS_ATTRIBUTION ) ; </a> 0
<a> Request pingRequest = Request . newGraphPathRequest ( null , applicationId , null ) ; </a> 1
<a> pingRequest . setParameters ( supportsAttributionParams ) ; </a> 1
<a> GraphObject supportResponse = pingRequest . executeAndWait ( ) . getGraphObject ( ) ; </a> 1
<a> Object doesSupportAttribution = supportResponse . getProperty ( SUPPORTS_ATTRIBUTION ) ; </a> 1
<a> if ( ! ( doesSupportAttribution instanceof Boolean ) ) { </a> 0
<a> throw new JSONException ( String . format ( </a> 0
<a> "%s contains %s instead of a Boolean" , SUPPORTS_ATTRIBUTION , doesSupportAttribution ) ) ; </a> 0
<a> } </a> 0
<a> if ( ( Boolean ) doesSupportAttribution ) { </a> 1
<a> GraphObject publishParams = GraphObject . Factory . create ( ) ; </a> 0
<a> publishParams . setProperty ( ANALYTICS_EVENT , MOBILE_INSTALL_EVENT ) ; </a> 0
<a> publishParams . setProperty ( ATTRIBUTION_KEY , attributionId ) ; </a> 1
<a> String publishUrl = String . format ( PUBLISH_ACTIVITY_PATH , applicationId ) ; </a> 0
<a> Request publishRequest = Request . newPostRequest ( null , publishUrl , publishParams , null ) ; </a> 1
<a> publishRequest . executeAndWait ( ) ; </a> 1
<a> SharedPreferences . Editor editor = preferences . edit ( ) ; </a> 0
<a> lastPing = System . currentTimeMillis ( ) ; </a> 0
<a> editor . putLong ( pingKey , lastPing ) ; </a> 0
<a> editor . commit ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> return lastPing != 0 ; </a> 1
<a> } catch ( Exception e ) { </a> 0
<a> Utility . logd ( "Facebook-publish" , e . getMessage ( ) ) ; </a> 1
<a> } </a> 0
<a> return false ; </a> 1
<a> } </a> 0
<a> public static String getAttributionId ( ContentResolver contentResolver ) { </a> 0
<a> String [ ] projection = { ATTRIBUTION_ID_COLUMN_NAME } ; </a> 0
<a> Cursor c = contentResolver . query ( ATTRIBUTION_ID_CONTENT_URI , projection , null , null , null ) ; </a> 1
<a> if ( c == null || ! c . moveToFirst ( ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String attributionId = c . getString ( c . getColumnIndex ( ATTRIBUTION_ID_COLUMN_NAME ) ) ; </a> 0
<a> c . close ( ) ; </a> 1
<a> return attributionId ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public abstract class TokenCachingStrategy { </a> 0
<a> public static final String TOKEN_KEY = "com.facebook.TokenCachingStrategy.Token" ; </a> 0
<a> public static final String EXPIRATION_DATE_KEY = "com.facebook.TokenCachingStrategy.ExpirationDate" ; </a> 0
<a> public static final String LAST_REFRESH_DATE_KEY = "com.facebook.TokenCachingStrategy.LastRefreshDate" ; </a> 0
<a> public static final String USER_FBID_KEY = "com.facebook.TokenCachingStrategy.UserFBID" ; </a> 0
<a> public static final String TOKEN_SOURCE_KEY = "com.facebook.TokenCachingStrategy.AccessTokenSource" ; </a> 0
<a> public static final String PERMISSIONS_KEY = "com.facebook.TokenCachingStrategy.Permissions" ; </a> 0
<a> private static final long INVALID_BUNDLE_MILLISECONDS = Long . MIN_VALUE ; </a> 0
<a> private static final String IS_SSO_KEY = "com.facebook.TokenCachingStrategy.IsSSO" ; </a> 0
<a> public abstract Bundle load ( ) ; </a> 0
<a> public abstract void save ( Bundle bundle ) ; </a> 0
<a> public abstract void clear ( ) ; </a> 0
<a> public static boolean hasTokenInformation ( Bundle bundle ) { </a> 0
<a> if ( bundle == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> String token = bundle . getString ( TOKEN_KEY ) ; </a> 0
<a> if ( ( token == null ) || ( token . length ( ) == 0 ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> long expiresMilliseconds = bundle . getLong ( EXPIRATION_DATE_KEY , 0L ) ; </a> 0
<a> if ( expiresMilliseconds == 0L ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public static String getToken ( Bundle bundle ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> return bundle . getString ( TOKEN_KEY ) ; </a> 0
<a> } </a> 0
<a> public static void putToken ( Bundle bundle , String value ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> Validate . notNull ( value , "value" ) ; </a> 0
<a> bundle . putString ( TOKEN_KEY , value ) ; </a> 0
<a> } </a> 0
<a> public static Date getExpirationDate ( Bundle bundle ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> return getDate ( bundle , EXPIRATION_DATE_KEY ) ; </a> 0
<a> } </a> 0
<a> public static void putExpirationDate ( Bundle bundle , Date value ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> Validate . notNull ( value , "value" ) ; </a> 0
<a> putDate ( bundle , EXPIRATION_DATE_KEY , value ) ; </a> 0
<a> } </a> 0
<a> public static long getExpirationMilliseconds ( Bundle bundle ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> return bundle . getLong ( EXPIRATION_DATE_KEY ) ; </a> 0
<a> } </a> 0
<a> public static void putExpirationMilliseconds ( Bundle bundle , long value ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> bundle . putLong ( EXPIRATION_DATE_KEY , value ) ; </a> 0
<a> } </a> 0
<a> public static List < String > getPermissions ( Bundle bundle ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> return bundle . getStringArrayList ( PERMISSIONS_KEY ) ; </a> 0
<a> } </a> 0
<a> public static void putPermissions ( Bundle bundle , List < String > value ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> Validate . notNull ( value , "value" ) ; </a> 0
<a> ArrayList < String > arrayList ; </a> 0
<a> if ( value instanceof ArrayList < ? > ) { </a> 0
<a> arrayList = ( ArrayList < String > ) value ; </a> 0
<a> } else { </a> 0
<a> arrayList = new ArrayList < String > ( value ) ; </a> 0
<a> } </a> 0
<a> bundle . putStringArrayList ( PERMISSIONS_KEY , arrayList ) ; </a> 0
<a> } </a> 0
<a> public static AccessTokenSource getSource ( Bundle bundle ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> if ( bundle . containsKey ( TokenCachingStrategy . TOKEN_SOURCE_KEY ) ) { </a> 0
<a> return ( AccessTokenSource ) bundle . getSerializable ( TokenCachingStrategy . TOKEN_SOURCE_KEY ) ; </a> 0
<a> } else { </a> 0
<a> boolean isSSO = bundle . getBoolean ( TokenCachingStrategy . IS_SSO_KEY ) ; </a> 0
<a> return isSSO ? AccessTokenSource . FACEBOOK_APPLICATION_WEB : AccessTokenSource . WEB_VIEW ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void putSource ( Bundle bundle , AccessTokenSource value ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> bundle . putSerializable ( TOKEN_SOURCE_KEY , value ) ; </a> 0
<a> } </a> 0
<a> public static Date getLastRefreshDate ( Bundle bundle ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> return getDate ( bundle , LAST_REFRESH_DATE_KEY ) ; </a> 0
<a> } </a> 0
<a> public static void putLastRefreshDate ( Bundle bundle , Date value ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> Validate . notNull ( value , "value" ) ; </a> 0
<a> putDate ( bundle , LAST_REFRESH_DATE_KEY , value ) ; </a> 0
<a> } </a> 0
<a> public static long getLastRefreshMilliseconds ( Bundle bundle ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> return bundle . getLong ( LAST_REFRESH_DATE_KEY ) ; </a> 0
<a> } </a> 0
<a> public static void putLastRefreshMilliseconds ( Bundle bundle , long value ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> bundle . putLong ( LAST_REFRESH_DATE_KEY , value ) ; </a> 0
<a> } </a> 0
<a> static Date getDate ( Bundle bundle , String key ) { </a> 0
<a> if ( bundle == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> long n = bundle . getLong ( key , INVALID_BUNDLE_MILLISECONDS ) ; </a> 0
<a> if ( n == INVALID_BUNDLE_MILLISECONDS ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return new Date ( n ) ; </a> 0
<a> } </a> 0
<a> static void putDate ( Bundle bundle , String key , Date date ) { </a> 0
<a> bundle . putLong ( key , date . getTime ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . BroadcastReceiver ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . IntentFilter ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . content . LocalBroadcastManager ; </a> 0
<a> public class UiLifecycleHelper { </a> 0
<a> private final static String ACTIVITY_NULL_MESSAGE = "activity cannot be null" ; </a> 0
<a> private final Activity activity ; </a> 0
<a> private final Session . StatusCallback callback ; </a> 0
<a> private final BroadcastReceiver receiver ; </a> 0
<a> private final LocalBroadcastManager broadcastManager ; </a> 0
<a> public UiLifecycleHelper ( Activity activity , Session . StatusCallback callback ) { </a> 0
<a> if ( activity == null ) { </a> 0
<a> throw new IllegalArgumentException ( ACTIVITY_NULL_MESSAGE ) ; </a> 0
<a> } </a> 0
<a> this . activity = activity ; </a> 0
<a> this . callback = callback ; </a> 0
<a> this . receiver = new ActiveSessionBroadcastReceiver ( ) ; </a> 0
<a> this . broadcastManager = LocalBroadcastManager . getInstance ( activity ) ; </a> 0
<a> } </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session == null ) { </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> session = Session . restoreSession ( activity , null , callback , savedInstanceState ) ; </a> 0
<a> } </a> 0
<a> if ( session == null ) { </a> 0
<a> session = new Session ( activity ) ; </a> 0
<a> } </a> 0
<a> Session . setActiveSession ( session ) ; </a> 0
<a> } </a> 0
<a> IntentFilter filter = new IntentFilter ( ) ; </a> 1
<a> filter . addAction ( Session . ACTION_ACTIVE_SESSION_SET ) ; </a> 1
<a> filter . addAction ( Session . ACTION_ACTIVE_SESSION_UNSET ) ; </a> 1
<a> broadcastManager . registerReceiver ( receiver , filter ) ; </a> 1
<a> } </a> 0
<a> public void onResume ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> if ( callback != null ) { </a> 0
<a> session . addCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> if ( SessionState . CREATED_TOKEN_LOADED . equals ( session . getState ( ) ) ) { </a> 0
<a> session . openForRead ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> session . onActivityResult ( activity , requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> Session . saveSession ( Session . getActiveSession ( ) , outState ) ; </a> 0
<a> } </a> 0
<a> public void onPause ( ) { </a> 0
<a> if ( callback != null ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> session . removeCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onDestroy ( ) { </a> 0
<a> broadcastManager . unregisterReceiver ( receiver ) ; </a> 1
<a> } </a> 0
<a> private class ActiveSessionBroadcastReceiver extends BroadcastReceiver { </a> 0
<a> @ Override </a> 0
<a> public void onReceive ( Context context , Intent intent ) { </a> 0
<a> if ( Session . ACTION_ACTIVE_SESSION_SET . equals ( intent . getAction ( ) ) ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && callback != null ) { </a> 0
<a> session . addCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> } else if ( Session . ACTION_ACTIVE_SESSION_UNSET . equals ( intent . getAction ( ) ) ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && callback != null ) { </a> 0
<a> session . removeCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> public class FacebookError extends RuntimeException { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> private int mErrorCode = 0 ; </a> 0
<a> private String mErrorType ; </a> 0
<a> @ Deprecated </a> 0
<a> public FacebookError ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public FacebookError ( String message , String type , int code ) { </a> 0
<a> super ( message ) ; </a> 0
<a> mErrorType = type ; </a> 0
<a> mErrorCode = code ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public int getErrorCode ( ) { </a> 0
<a> return mErrorCode ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String getErrorType ( ) { </a> 0
<a> return mErrorType ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . Facebook . DialogListener ; </a> 0
<a> import com . facebook . widget . WebDialog ; </a> 0
<a> @ Deprecated </a> 0
<a> public class FbDialog extends WebDialog { </a> 0
<a> private DialogListener mListener ; </a> 0
<a> public FbDialog ( Context context , String url , DialogListener listener ) { </a> 0
<a> this ( context , url , listener , DEFAULT_THEME ) ; </a> 0
<a> } </a> 0
<a> public FbDialog ( Context context , String url , DialogListener listener , int theme ) { </a> 0
<a> super ( context , url , theme ) ; </a> 0
<a> setDialogListener ( listener ) ; </a> 0
<a> } </a> 0
<a> public FbDialog ( Context context , String action , Bundle parameters , DialogListener listener ) { </a> 0
<a> super ( context , action , parameters , DEFAULT_THEME , null ) ; </a> 0
<a> setDialogListener ( listener ) ; </a> 0
<a> } </a> 0
<a> public FbDialog ( Context context , String action , Bundle parameters , DialogListener listener , </a> 0
<a> int theme ) { </a> 0
<a> super ( context , action , parameters , theme , null ) ; </a> 0
<a> setDialogListener ( listener ) ; </a> 0
<a> } </a> 0
<a> private void setDialogListener ( DialogListener listener ) { </a> 0
<a> this . mListener = listener ; </a> 0
<a> setOnCompleteListener ( new OnCompleteListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( Bundle values , FacebookException error ) { </a> 0
<a> callDialogListener ( values , error ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void callDialogListener ( Bundle values , FacebookException error ) { </a> 0
<a> if ( mListener == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( values != null ) { </a> 0
<a> mListener . onComplete ( values ) ; </a> 0
<a> } else { </a> 0
<a> if ( error instanceof FacebookDialogException ) { </a> 0
<a> FacebookDialogException facebookDialogException = ( FacebookDialogException ) error ; </a> 0
<a> DialogError dialogError = new DialogError ( facebookDialogException . getMessage ( ) , </a> 0
<a> facebookDialogException . getErrorCode ( ) , facebookDialogException . getFailingUrl ( ) ) ; </a> 0
<a> mListener . onError ( dialogError ) ; </a> 0
<a> } else if ( error instanceof FacebookOperationCanceledException ) { </a> 0
<a> mListener . onCancel ( ) ; </a> 0
<a> } else { </a> 0
<a> FacebookError facebookError = new FacebookError ( error . getMessage ( ) ) ; </a> 0
<a> mListener . onFacebookError ( facebookError ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import com . facebook . Request ; </a> 0
<a> import com . facebook . RequestBatch ; </a> 0
<a> public class CacheableRequestBatch extends RequestBatch { </a> 0
<a> private String cacheKey ; </a> 0
<a> private boolean forceRoundTrip ; </a> 0
<a> public CacheableRequestBatch ( ) { </a> 0
<a> } </a> 0
<a> public CacheableRequestBatch ( Request ... requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> public final String getCacheKeyOverride ( ) { </a> 0
<a> return cacheKey ; </a> 0
<a> } </a> 0
<a> public final void setCacheKeyOverride ( String cacheKey ) { </a> 0
<a> this . cacheKey = cacheKey ; </a> 0
<a> } </a> 0
<a> public final boolean getForceRoundTrip ( ) { </a> 0
<a> return forceRoundTrip ; </a> 0
<a> } </a> 0
<a> public final void setForceRoundTrip ( boolean forceRoundTrip ) { </a> 0
<a> this . forceRoundTrip = forceRoundTrip ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . LoggingBehavior ; </a> 0
<a> import com . facebook . Settings ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import org . json . JSONTokener ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . security . InvalidParameterException ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . PriorityQueue ; </a> 0
<a> import java . util . concurrent . atomic . AtomicLong ; </a> 0
<a> public final class FileLruCache { </a> 0
<a> static final String TAG = FileLruCache . class . getSimpleName ( ) ; </a> 0
<a> private static final String HEADER_CACHEKEY_KEY = "key" ; </a> 0
<a> private static final String HEADER_CACHE_CONTENT_TAG_KEY = "tag" ; </a> 0
<a> private static final AtomicLong bufferIndex = new AtomicLong ( ) ; </a> 0
<a> private final String tag ; </a> 0
<a> private final Limits limits ; </a> 0
<a> private final File directory ; </a> 0
<a> private boolean isTrimPending ; </a> 0
<a> private final Object lock ; </a> 0
<a> public FileLruCache ( Context context , String tag , Limits limits ) { </a> 0
<a> this . tag = tag ; </a> 0
<a> this . limits = limits ; </a> 0
<a> this . directory = new File ( context . getCacheDir ( ) , tag ) ; </a> 0
<a> this . lock = new Object ( ) ; </a> 0
<a> this . directory . mkdirs ( ) ; </a> 0
<a> BufferFile . deleteAll ( this . directory ) ; </a> 0
<a> } </a> 0
<a> public void clearForTest ( ) throws IOException { </a> 0
<a> for ( File file : this . directory . listFiles ( ) ) { </a> 0
<a> file . delete ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> long sizeInBytesForTest ( ) { </a> 0
<a> synchronized ( lock ) { </a> 0
<a> while ( isTrimPending ) { </a> 0
<a> try { </a> 0
<a> lock . wait ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> File [ ] files = this . directory . listFiles ( ) ; </a> 0
<a> long total = 0 ; </a> 0
<a> for ( File file : files ) { </a> 0
<a> total += file . length ( ) ; </a> 0
<a> } </a> 0
<a> return total ; </a> 0
<a> } </a> 0
<a> public InputStream get ( String key ) throws IOException { </a> 0
<a> return get ( key , null ) ; </a> 0
<a> } </a> 0
<a> public InputStream get ( String key , String contentTag ) throws IOException { </a> 0
<a> File file = new File ( this . directory , Utility . md5hash ( key ) ) ; </a> 0
<a> FileInputStream input = null ; </a> 0
<a> try { </a> 0
<a> input = new FileInputStream ( file ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> BufferedInputStream buffered = new BufferedInputStream ( input , Utility . DEFAULT_STREAM_BUFFER_SIZE ) ; </a> 0
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> JSONObject header = StreamHeader . readHeader ( buffered ) ; </a> 0
<a> if ( header == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String foundKey = header . optString ( HEADER_CACHEKEY_KEY ) ; </a> 0
<a> if ( ( foundKey == null ) || ! foundKey . equals ( key ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String headerContentTag = header . optString ( HEADER_CACHE_CONTENT_TAG_KEY , null ) ; </a> 0
<a> if ( ( contentTag == null && headerContentTag != null ) || </a> 0
<a> ( contentTag != null && ! contentTag . equals ( headerContentTag ) ) ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> long accessTime = new Date ( ) . getTime ( ) ; </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , TAG , "Setting lastModified to " + Long . valueOf ( accessTime ) + " for " </a> 0
<a> + file . getName ( ) ) ; </a> 0
<a> file . setLastModified ( accessTime ) ; </a> 0
<a> success = true ; </a> 0
<a> return buffered ; </a> 0
<a> } finally { </a> 0
<a> if ( ! success ) { </a> 0
<a> buffered . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> OutputStream openPutStream ( final String key ) throws IOException { </a> 0
<a> return openPutStream ( key , null ) ; </a> 0
<a> } </a> 0
<a> public OutputStream openPutStream ( final String key , String contentTag ) throws IOException { </a> 0
<a> final File buffer = BufferFile . newFile ( this . directory ) ; </a> 0
<a> buffer . delete ( ) ; </a> 0
<a> if ( ! buffer . createNewFile ( ) ) { </a> 0
<a> throw new IOException ( "Could not create file at " + buffer . getAbsolutePath ( ) ) ; </a> 0
<a> } </a> 0
<a> FileOutputStream file = null ; </a> 0
<a> try { </a> 0
<a> file = new FileOutputStream ( buffer ) ; </a> 0
<a> } catch ( FileNotFoundException e ) { </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , Log . WARN , TAG , "Error creating buffer output stream: " + e ) ; </a> 0
<a> throw new IOException ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> StreamCloseCallback renameToTargetCallback = new StreamCloseCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClose ( ) { </a> 0
<a> renameToTargetAndTrim ( key , buffer ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> CloseCallbackOutputStream cleanup = new CloseCallbackOutputStream ( file , renameToTargetCallback ) ; </a> 0
<a> BufferedOutputStream buffered = new BufferedOutputStream ( cleanup , Utility . DEFAULT_STREAM_BUFFER_SIZE ) ; </a> 0
<a> boolean success = false ; </a> 0
<a> try { </a> 0
<a> JSONObject header = new JSONObject ( ) ; </a> 0
<a> header . put ( HEADER_CACHEKEY_KEY , key ) ; </a> 0
<a> if ( ! Utility . isNullOrEmpty ( contentTag ) ) { </a> 0
<a> header . put ( HEADER_CACHE_CONTENT_TAG_KEY , contentTag ) ; </a> 0
<a> } </a> 0
<a> StreamHeader . writeHeader ( buffered , header ) ; </a> 0
<a> success = true ; </a> 0
<a> return buffered ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , Log . WARN , TAG , "Error creating JSON header for cache file: " + e ) ; </a> 0
<a> throw new IOException ( e . getMessage ( ) ) ; </a> 0
<a> } finally { </a> 0
<a> if ( ! success ) { </a> 0
<a> buffered . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void renameToTargetAndTrim ( String key , File buffer ) { </a> 0
<a> final File target = new File ( directory , Utility . md5hash ( key ) ) ; </a> 0
<a> if ( ! buffer . renameTo ( target ) ) { </a> 0
<a> buffer . delete ( ) ; </a> 0
<a> } </a> 0
<a> postTrim ( ) ; </a> 0
<a> } </a> 0
<a> public InputStream interceptAndPut ( String key , InputStream input ) throws IOException { </a> 0
<a> OutputStream output = openPutStream ( key ) ; </a> 0
<a> return new CopyingInputStream ( input , output ) ; </a> 0
<a> } </a> 0
<a> public String toString ( ) { </a> 0
<a> return "{FileLruCache:" + " tag:" + this . tag + " file:" + this . directory . getName ( ) + "}" ; </a> 0
<a> } </a> 0
<a> private void postTrim ( ) { </a> 0
<a> synchronized ( lock ) { </a> 0
<a> if ( ! isTrimPending ) { </a> 0
<a> isTrimPending = true ; </a> 0
<a> Settings . getExecutor ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> trim ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void trim ( ) { </a> 0
<a> try { </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , TAG , "trim started" ) ; </a> 0
<a> PriorityQueue < ModifiedFile > heap = new PriorityQueue < ModifiedFile > ( ) ; </a> 0
<a> long size = 0 ; </a> 0
<a> long count = 0 ; </a> 0
<a> for ( File file : this . directory . listFiles ( BufferFile . excludeBufferFiles ( ) ) ) { </a> 0
<a> ModifiedFile modified = new ModifiedFile ( file ) ; </a> 0
<a> heap . add ( modified ) ; </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , TAG , " trim considering time=" + Long . valueOf ( modified . getModified ( ) ) </a> 0
<a> + " name=" + modified . getFile ( ) . getName ( ) ) ; </a> 0
<a> size += file . length ( ) ; </a> 0
<a> count ++ ; </a> 0
<a> } </a> 0
<a> while ( ( size > limits . getByteCount ( ) ) || ( count > limits . getFileCount ( ) ) ) { </a> 0
<a> File file = heap . remove ( ) . getFile ( ) ; </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , TAG , " trim removing " + file . getName ( ) ) ; </a> 0
<a> size -= file . length ( ) ; </a> 0
<a> count -- ; </a> 0
<a> file . delete ( ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> synchronized ( lock ) { </a> 0
<a> isTrimPending = false ; </a> 0
<a> lock . notifyAll ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class BufferFile { </a> 0
<a> private static final String FILE_NAME_PREFIX = "buffer" ; </a> 0
<a> private static final FilenameFilter filterExcludeBufferFiles = new FilenameFilter ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean accept ( File dir , String filename ) { </a> 0
<a> return ! filename . startsWith ( FILE_NAME_PREFIX ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private static final FilenameFilter filterExcludeNonBufferFiles = new FilenameFilter ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean accept ( File dir , String filename ) { </a> 0
<a> return filename . startsWith ( FILE_NAME_PREFIX ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> static void deleteAll ( final File root ) { </a> 0
<a> for ( File file : root . listFiles ( excludeNonBufferFiles ( ) ) ) { </a> 0
<a> file . delete ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static FilenameFilter excludeBufferFiles ( ) { </a> 0
<a> return filterExcludeBufferFiles ; </a> 0
<a> } </a> 0
<a> static FilenameFilter excludeNonBufferFiles ( ) { </a> 0
<a> return filterExcludeNonBufferFiles ; </a> 0
<a> } </a> 0
<a> static File newFile ( final File root ) { </a> 0
<a> String name = FILE_NAME_PREFIX + Long . valueOf ( bufferIndex . incrementAndGet ( ) ) . toString ( ) ; </a> 0
<a> return new File ( root , name ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static final class StreamHeader { </a> 0
<a> private static final int HEADER_VERSION = 0 ; </a> 0
<a> static void writeHeader ( OutputStream stream , JSONObject header ) throws IOException { </a> 0
<a> String headerString = header . toString ( ) ; </a> 0
<a> byte [ ] headerBytes = headerString . getBytes ( ) ; </a> 0
<a> stream . write ( HEADER_VERSION ) ; </a> 0
<a> stream . write ( ( headerBytes . length > > 16 ) & 0xff ) ; </a> 0
<a> stream . write ( ( headerBytes . length > > 8 ) & 0xff ) ; </a> 0
<a> stream . write ( ( headerBytes . length > > 0 ) & 0xff ) ; </a> 0
<a> stream . write ( headerBytes ) ; </a> 0
<a> } </a> 0
<a> static JSONObject readHeader ( InputStream stream ) throws IOException { </a> 0
<a> int version = stream . read ( ) ; </a> 0
<a> if ( version != HEADER_VERSION ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> int headerSize = 0 ; </a> 0
<a> for ( int i = 0 ; i < 3 ; i ++ ) { </a> 0
<a> int b = stream . read ( ) ; </a> 0
<a> if ( b == - 1 ) { </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , TAG , </a> 0
<a> "readHeader: stream.read returned -1 while reading header size" ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> headerSize <<= 8 ; </a> 0
<a> headerSize += b & 0xff ; </a> 0
<a> } </a> 0
<a> byte [ ] headerBytes = new byte [ headerSize ] ; </a> 0
<a> int count = 0 ; </a> 0
<a> while ( count < headerBytes . length ) { </a> 0
<a> int readCount = stream . read ( headerBytes , count , headerBytes . length - count ) ; </a> 0
<a> if ( readCount < 1 ) { </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , TAG , </a> 0
<a> "readHeader: stream.read stopped at " + Integer . valueOf ( count ) + " when expected " </a> 0
<a> + headerBytes . length ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> count += readCount ; </a> 0
<a> } </a> 0
<a> String headerString = new String ( headerBytes ) ; </a> 0
<a> JSONObject header = null ; </a> 0
<a> JSONTokener tokener = new JSONTokener ( headerString ) ; </a> 0
<a> try { </a> 0
<a> Object parsed = tokener . nextValue ( ) ; </a> 0
<a> if ( ! ( parsed instanceof JSONObject ) ) { </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , TAG , "readHeader: expected JSONObject, got " + parsed . getClass ( ) . getCanonicalName ( ) ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> header = ( JSONObject ) parsed ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> throw new IOException ( e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> return header ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class CloseCallbackOutputStream extends OutputStream { </a> 0
<a> final OutputStream innerStream ; </a> 0
<a> final StreamCloseCallback callback ; </a> 0
<a> CloseCallbackOutputStream ( OutputStream innerStream , StreamCloseCallback callback ) { </a> 0
<a> this . innerStream = innerStream ; </a> 0
<a> this . callback = callback ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> try { </a> 0
<a> this . innerStream . close ( ) ; </a> 0
<a> } finally { </a> 0
<a> this . callback . onClose ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void flush ( ) throws IOException { </a> 0
<a> this . innerStream . flush ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] buffer , int offset , int count ) throws IOException { </a> 0
<a> this . innerStream . write ( buffer , offset , count ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( byte [ ] buffer ) throws IOException { </a> 0
<a> this . innerStream . write ( buffer ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void write ( int oneByte ) throws IOException { </a> 0
<a> this . innerStream . write ( oneByte ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static final class CopyingInputStream extends InputStream { </a> 0
<a> final InputStream input ; </a> 0
<a> final OutputStream output ; </a> 0
<a> CopyingInputStream ( final InputStream input , final OutputStream output ) { </a> 0
<a> this . input = input ; </a> 0
<a> this . output = output ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int available ( ) throws IOException { </a> 0
<a> return input . available ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> try { </a> 0
<a> this . input . close ( ) ; </a> 0
<a> } finally { </a> 0
<a> this . output . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void mark ( int readlimit ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean markSupported ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( byte [ ] buffer ) throws IOException { </a> 0
<a> int count = input . read ( buffer ) ; </a> 0
<a> if ( count > 0 ) { </a> 0
<a> output . write ( buffer , 0 , count ) ; </a> 0
<a> } </a> 0
<a> return count ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( ) throws IOException { </a> 0
<a> int b = input . read ( ) ; </a> 0
<a> if ( b >= 0 ) { </a> 0
<a> output . write ( b ) ; </a> 0
<a> } </a> 0
<a> return b ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int read ( byte [ ] buffer , int offset , int length ) throws IOException { </a> 0
<a> int count = input . read ( buffer , offset , length ) ; </a> 0
<a> if ( count > 0 ) { </a> 0
<a> output . write ( buffer , offset , count ) ; </a> 0
<a> } </a> 0
<a> return count ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public synchronized void reset ( ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long skip ( long byteCount ) throws IOException { </a> 0
<a> byte [ ] buffer = new byte [ 1024 ] ; </a> 0
<a> long total = 0 ; </a> 0
<a> while ( total < byteCount ) { </a> 0
<a> int count = read ( buffer , 0 , ( int ) Math . min ( byteCount - total , buffer . length ) ) ; </a> 0
<a> if ( count < 0 ) { </a> 0
<a> return total ; </a> 0
<a> } </a> 0
<a> total += count ; </a> 0
<a> } </a> 0
<a> return total ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final class Limits { </a> 0
<a> private int byteCount ; </a> 0
<a> private int fileCount ; </a> 0
<a> public Limits ( ) { </a> 0
<a> this . fileCount = 1024 ; </a> 0
<a> this . byteCount = 1024 * 1024 ; </a> 0
<a> } </a> 0
<a> int getByteCount ( ) { </a> 0
<a> return byteCount ; </a> 0
<a> } </a> 0
<a> int getFileCount ( ) { </a> 0
<a> return fileCount ; </a> 0
<a> } </a> 0
<a> void setByteCount ( int n ) { </a> 0
<a> if ( n < 0 ) { </a> 0
<a> throw new InvalidParameterException ( "Cache byte-count limit must be >= 0" ) ; </a> 0
<a> } </a> 0
<a> byteCount = n ; </a> 0
<a> } </a> 0
<a> void setFileCount ( int n ) { </a> 0
<a> if ( n < 0 ) { </a> 0
<a> throw new InvalidParameterException ( "Cache file count limit must be >= 0" ) ; </a> 0
<a> } </a> 0
<a> fileCount = n ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final static class ModifiedFile implements Comparable < ModifiedFile > { </a> 0
<a> private final File file ; </a> 0
<a> private final long modified ; </a> 0
<a> ModifiedFile ( File file ) { </a> 0
<a> this . file = file ; </a> 0
<a> this . modified = file . lastModified ( ) ; </a> 0
<a> } </a> 0
<a> File getFile ( ) { </a> 0
<a> return file ; </a> 0
<a> } </a> 0
<a> long getModified ( ) { </a> 0
<a> return modified ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int compareTo ( ModifiedFile another ) { </a> 0
<a> if ( getModified ( ) < another . getModified ( ) ) { </a> 0
<a> return - 1 ; </a> 0
<a> } else if ( getModified ( ) > another . getModified ( ) ) { </a> 0
<a> return 1 ; </a> 0
<a> } else { </a> 0
<a> return getFile ( ) . compareTo ( another . getFile ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object another ) { </a> 0
<a> return </a> 0
<a> ( another instanceof ModifiedFile ) && </a> 0
<a> ( compareTo ( ( ModifiedFile ) another ) == 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface StreamCloseCallback { </a> 0
<a> void onClose ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public final class ServerProtocol { </a> 0
<a> static final String FACEBOOK_COM = "facebook.com" ; </a> 0
<a> public static final String DIALOG_AUTHORITY = "m." + FACEBOOK_COM ; </a> 0
<a> public static final String DIALOG_PATH = "dialog/" ; </a> 0
<a> public static final String DIALOG_PARAM_SCOPE = "scope" ; </a> 0
<a> public static final String DIALOG_PARAM_CLIENT_ID = "client_id" ; </a> 0
<a> public static final String DIALOG_PARAM_DISPLAY = "display" ; </a> 0
<a> public static final String DIALOG_PARAM_REDIRECT_URI = "redirect_uri" ; </a> 0
<a> public static final String DIALOG_PARAM_TYPE = "type" ; </a> 0
<a> public static final String GRAPH_URL = "https://graph." + FACEBOOK_COM ; </a> 0
<a> public static final String GRAPH_URL_BASE = "https://graph." + FACEBOOK_COM + "/" ; </a> 0
<a> public static final String REST_URL_BASE = "https://api." + FACEBOOK_COM + "/method/" ; </a> 0
<a> public static final String BATCHED_REST_METHOD_URL_BASE = "method/" ; </a> 0
<a> public static final Collection < String > errorsProxyAuthDisabled = </a> 0
<a> Utility . unmodifiableCollection ( "service_disabled" , "AndroidAuthKillSwitchException" ) ; </a> 0
<a> public static final Collection < String > errorsUserCanceled = </a> 0
<a> Utility . unmodifiableCollection ( "access_denied" , "OAuthAccessDeniedException" ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . content . BroadcastReceiver ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . IntentFilter ; </a> 0
<a> import android . support . v4 . content . LocalBroadcastManager ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> public class SessionTracker { </a> 0
<a> private Session session ; </a> 0
<a> private final Session . StatusCallback callback ; </a> 0
<a> private final BroadcastReceiver receiver ; </a> 0
<a> private final LocalBroadcastManager broadcastManager ; </a> 0
<a> private boolean isTracking = false ; </a> 0
<a> public SessionTracker ( Context context , Session . StatusCallback callback ) { </a> 0
<a> this ( context , callback , null ) ; </a> 0
<a> } </a> 0
<a> SessionTracker ( Context context , Session . StatusCallback callback , Session session ) { </a> 0
<a> this ( context , callback , session , true ) ; </a> 0
<a> } </a> 0
<a> public SessionTracker ( Context context , Session . StatusCallback callback , Session session , boolean startTracking ) { </a> 0
<a> this . callback = new CallbackWrapper ( callback ) ; </a> 0
<a> this . session = session ; </a> 0
<a> this . receiver = new ActiveSessionBroadcastReceiver ( ) ; </a> 0
<a> this . broadcastManager = LocalBroadcastManager . getInstance ( context ) ; </a> 0
<a> if ( startTracking ) { </a> 0
<a> startTracking ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Session getSession ( ) { </a> 0
<a> return ( session == null ) ? Session . getActiveSession ( ) : session ; </a> 0
<a> } </a> 0
<a> public Session getOpenSession ( ) { </a> 0
<a> Session openSession = getSession ( ) ; </a> 0
<a> if ( openSession != null && openSession . isOpened ( ) ) { </a> 0
<a> return openSession ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public void setSession ( Session newSession ) { </a> 0
<a> if ( newSession == null ) { </a> 0
<a> if ( session != null ) { </a> 0
<a> session . removeCallback ( callback ) ; </a> 0
<a> session = null ; </a> 0
<a> addBroadcastReceiver ( ) ; </a> 0
<a> if ( getSession ( ) != null ) { </a> 0
<a> getSession ( ) . addCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( session == null ) { </a> 0
<a> Session activeSession = Session . getActiveSession ( ) ; </a> 0
<a> if ( activeSession != null ) { </a> 0
<a> activeSession . removeCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> broadcastManager . unregisterReceiver ( receiver ) ; </a> 0
<a> } else { </a> 0
<a> session . removeCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> session = newSession ; </a> 0
<a> session . addCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void startTracking ( ) { </a> 0
<a> if ( isTracking ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( this . session == null ) { </a> 0
<a> addBroadcastReceiver ( ) ; </a> 0
<a> } </a> 0
<a> if ( getSession ( ) != null ) { </a> 0
<a> getSession ( ) . addCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> isTracking = true ; </a> 0
<a> } </a> 0
<a> public void stopTracking ( ) { </a> 0
<a> if ( ! isTracking ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> Session session = getSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> session . removeCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> broadcastManager . unregisterReceiver ( receiver ) ; </a> 0
<a> isTracking = false ; </a> 0
<a> } </a> 0
<a> public boolean isTracking ( ) { </a> 0
<a> return isTracking ; </a> 0
<a> } </a> 0
<a> public boolean isTrackingActiveSession ( ) { </a> 0
<a> return session == null ; </a> 0
<a> } </a> 0
<a> private void addBroadcastReceiver ( ) { </a> 0
<a> IntentFilter filter = new IntentFilter ( ) ; </a> 0
<a> filter . addAction ( Session . ACTION_ACTIVE_SESSION_SET ) ; </a> 0
<a> filter . addAction ( Session . ACTION_ACTIVE_SESSION_UNSET ) ; </a> 0
<a> broadcastManager . registerReceiver ( receiver , filter ) ; </a> 0
<a> } </a> 0
<a> private class ActiveSessionBroadcastReceiver extends BroadcastReceiver { </a> 0
<a> @ Override </a> 0
<a> public void onReceive ( Context context , Intent intent ) { </a> 0
<a> if ( Session . ACTION_ACTIVE_SESSION_SET . equals ( intent . getAction ( ) ) ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> session . addCallback ( SessionTracker . this . callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class CallbackWrapper implements Session . StatusCallback { </a> 0
<a> private final Session . StatusCallback wrapped ; </a> 0
<a> public CallbackWrapper ( Session . StatusCallback wrapped ) { </a> 0
<a> this . wrapped = wrapped ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( wrapped != null && isTracking ( ) ) { </a> 0
<a> wrapped . call ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> if ( session == SessionTracker . this . session && state . isClosed ( ) ) { </a> 0
<a> setSession ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . pm . ApplicationInfo ; </a> 0
<a> import android . content . pm . PackageManager ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Parcelable ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import android . webkit . CookieManager ; </a> 0
<a> import android . webkit . CookieSyncManager ; </a> 0
<a> import com . facebook . FacebookException ; </a> 1
<a> import com . facebook . Session ; </a> 1
<a> import com . facebook . android . BuildConfig ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import org . json . JSONTokener ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . URLConnection ; </a> 0
<a> import java . security . MessageDigest ; </a> 0
<a> import java . security . NoSuchAlgorithmException ; </a> 0
<a> import java . util . * ; </a> 0
<a> public final class Utility { </a> 0
<a> static final String LOG_TAG = "FacebookSDK" ; </a> 0
<a> private static final String HASH_ALGORITHM_MD5 = "MD5" ; </a> 0
<a> private static final String URL_SCHEME = "https" ; </a> 0
<a> public static final int DEFAULT_STREAM_BUFFER_SIZE = 8192 ; </a> 0
<a> public static < T > boolean isSubset ( Collection < T > subset , Collection < T > superset ) { </a> 0
<a> if ( ( superset == null ) || ( superset . size ( ) == 0 ) ) { </a> 0
<a> return ( ( subset == null ) || ( subset . size ( ) == 0 ) ) ; </a> 0
<a> } </a> 0
<a> HashSet < T > hash = new HashSet < T > ( superset ) ; </a> 0
<a> for ( T t : subset ) { </a> 0
<a> if ( ! hash . contains ( t ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public static < T > boolean isNullOrEmpty ( Collection < T > c ) { </a> 0
<a> return ( c == null ) || ( c . size ( ) == 0 ) ; </a> 0
<a> } </a> 0
<a> public static boolean isNullOrEmpty ( String s ) { </a> 0
<a> return ( s == null ) || ( s . length ( ) == 0 ) ; </a> 0
<a> } </a> 0
<a> public static < T > Collection < T > unmodifiableCollection ( T ... ts ) { </a> 0
<a> return Collections . unmodifiableCollection ( Arrays . asList ( ts ) ) ; </a> 0
<a> } </a> 0
<a> public static < T > ArrayList < T > arrayList ( T ... ts ) { </a> 0
<a> ArrayList < T > arrayList = new ArrayList < T > ( ts . length ) ; </a> 0
<a> for ( T t : ts ) { </a> 0
<a> arrayList . add ( t ) ; </a> 0
<a> } </a> 0
<a> return arrayList ; </a> 0
<a> } </a> 0
<a> static String md5hash ( String key ) { </a> 0
<a> MessageDigest hash = null ; </a> 0
<a> try { </a> 0
<a> hash = MessageDigest . getInstance ( HASH_ALGORITHM_MD5 ) ; </a> 1
<a> } catch ( NoSuchAlgorithmException e ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> hash . update ( key . getBytes ( ) ) ; </a> 0
<a> byte [ ] digest = hash . digest ( ) ; </a> 0
<a> StringBuilder builder = new StringBuilder ( ) ; </a> 0
<a> for ( int b : digest ) { </a> 0
<a> builder . append ( Integer . toHexString ( ( b > > 4 ) & 0xf ) ) ; </a> 0
<a> builder . append ( Integer . toHexString ( ( b > > 0 ) & 0xf ) ) ; </a> 0
<a> } </a> 0
<a> return builder . toString ( ) ; </a> 0
<a> } </a> 0
<a> public static Uri buildUri ( String authority , String path , Bundle parameters ) { </a> 0
<a> Uri . Builder builder = new Uri . Builder ( ) ; </a> 0
<a> builder . scheme ( URL_SCHEME ) ; </a> 0
<a> builder . authority ( authority ) ; </a> 0
<a> builder . path ( path ) ; </a> 0
<a> for ( String key : parameters . keySet ( ) ) { </a> 0
<a> Object parameter = parameters . get ( key ) ; </a> 0
<a> if ( parameter instanceof String ) { </a> 0
<a> builder . appendQueryParameter ( key , ( String ) parameter ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return builder . build ( ) ; </a> 0
<a> } </a> 0
<a> public static void putObjectInBundle ( Bundle bundle , String key , Object value ) { </a> 0
<a> if ( value instanceof String ) { </a> 0
<a> bundle . putString ( key , ( String ) value ) ; </a> 0
<a> } else if ( value instanceof Parcelable ) { </a> 0
<a> bundle . putParcelable ( key , ( Parcelable ) value ) ; </a> 0
<a> } else if ( value instanceof byte [ ] ) { </a> 0
<a> bundle . putByteArray ( key , ( byte [ ] ) value ) ; </a> 0
<a> } else { </a> 0
<a> throw new FacebookException ( "attempted to add unsupported type to Bundle" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void closeQuietly ( Closeable closeable ) { </a> 0
<a> try { </a> 0
<a> if ( closeable != null ) { </a> 0
<a> closeable . close ( ) ; </a> 0
<a> } </a> 0
<a> } catch ( IOException ioe ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void disconnectQuietly ( URLConnection connection ) { </a> 0
<a> if ( connection instanceof HttpURLConnection ) { </a> 0
<a> ( ( HttpURLConnection ) connection ) . disconnect ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static String getMetadataApplicationId ( Context context ) { </a> 0
<a> try { </a> 0
<a> ApplicationInfo ai = context . getPackageManager ( ) . getApplicationInfo ( </a> 0
<a> context . getPackageName ( ) , PackageManager . GET_META_DATA ) ; </a> 0
<a> if ( ai . metaData != null ) { </a> 0
<a> return ai . metaData . getString ( Session . APPLICATION_ID_PROPERTY ) ; </a> 0
<a> } </a> 0
<a> } catch ( PackageManager . NameNotFoundException e ) { </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> static Map < String , Object > convertJSONObjectToHashMap ( JSONObject jsonObject ) { </a> 0
<a> HashMap < String , Object > map = new HashMap < String , Object > ( ) ; </a> 0
<a> JSONArray keys = jsonObject . names ( ) ; </a> 0
<a> for ( int i = 0 ; i < keys . length ( ) ; ++ i ) { </a> 0
<a> String key ; </a> 0
<a> try { </a> 0
<a> key = keys . getString ( i ) ; </a> 0
<a> Object value = jsonObject . get ( key ) ; </a> 0
<a> if ( value instanceof JSONObject ) { </a> 0
<a> value = convertJSONObjectToHashMap ( ( JSONObject ) value ) ; </a> 0
<a> } </a> 0
<a> map . put ( key , value ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return map ; </a> 0
<a> } </a> 0
<a> public static Object getStringPropertyAsJSON ( JSONObject jsonObject , String key , String nonJSONPropertyKey ) </a> 0
<a> throws JSONException { </a> 0
<a> Object value = jsonObject . opt ( key ) ; </a> 0
<a> if ( value != null && value instanceof String ) { </a> 0
<a> JSONTokener tokener = new JSONTokener ( ( String ) value ) ; </a> 0
<a> value = tokener . nextValue ( ) ; </a> 0
<a> } </a> 0
<a> if ( value != null && ! ( value instanceof JSONObject || value instanceof JSONArray ) ) { </a> 0
<a> if ( nonJSONPropertyKey != null ) { </a> 0
<a> jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . putOpt ( nonJSONPropertyKey , value ) ; </a> 0
<a> return jsonObject ; </a> 0
<a> } else { </a> 0
<a> throw new FacebookException ( "Got an unexpected non-JSON object." ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return value ; </a> 0
<a> } </a> 0
<a> public static String readStreamToString ( InputStream inputStream ) throws IOException { </a> 0
<a> BufferedInputStream bufferedInputStream = null ; </a> 0
<a> InputStreamReader reader = null ; </a> 0
<a> try { </a> 0
<a> bufferedInputStream = new BufferedInputStream ( inputStream ) ; </a> 0
<a> reader = new InputStreamReader ( bufferedInputStream ) ; </a> 0
<a> StringBuilder stringBuilder = new StringBuilder ( ) ; </a> 0
<a> final int bufferSize = 1024 * 2 ; </a> 0
<a> char [ ] buffer = new char [ bufferSize ] ; </a> 0
<a> int n = 0 ; </a> 0
<a> while ( ( n = reader . read ( buffer ) ) != - 1 ) { </a> 0
<a> stringBuilder . append ( buffer , 0 , n ) ; </a> 0
<a> } </a> 0
<a> return stringBuilder . toString ( ) ; </a> 0
<a> } finally { </a> 0
<a> closeQuietly ( bufferedInputStream ) ; </a> 0
<a> closeQuietly ( reader ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static boolean stringsEqualOrEmpty ( String a , String b ) { </a> 0
<a> boolean aEmpty = TextUtils . isEmpty ( a ) ; </a> 0
<a> boolean bEmpty = TextUtils . isEmpty ( b ) ; </a> 0
<a> if ( aEmpty && bEmpty ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( ! aEmpty && ! bEmpty ) { </a> 0
<a> return a . equals ( b ) ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private static void clearCookiesForDomain ( Context context , String domain ) { </a> 0
<a> CookieSyncManager syncManager = CookieSyncManager . createInstance ( context ) ; </a> 0
<a> syncManager . sync ( ) ; </a> 0
<a> CookieManager cookieManager = CookieManager . getInstance ( ) ; </a> 0
<a> String cookies = cookieManager . getCookie ( domain ) ; </a> 0
<a> if ( cookies == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String [ ] splitCookies = cookies . split ( ";" ) ; </a> 0
<a> for ( String cookie : splitCookies ) { </a> 0
<a> String [ ] cookieParts = cookie . split ( "=" ) ; </a> 0
<a> if ( cookieParts . length > 0 ) { </a> 0
<a> String newCookie = cookieParts [ 0 ] . trim ( ) + "=;expires=Sat, 1 Jan 2000 00:00:01 UTC;" ; </a> 0
<a> cookieManager . setCookie ( domain , newCookie ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> cookieManager . removeExpiredCookie ( ) ; </a> 0
<a> } </a> 0
<a> public static void clearFacebookCookies ( Context context ) { </a> 0
<a> clearCookiesForDomain ( context , "facebook.com" ) ; </a> 0
<a> clearCookiesForDomain ( context , ".facebook.com" ) ; </a> 0
<a> clearCookiesForDomain ( context , "https://facebook.com" ) ; </a> 0
<a> clearCookiesForDomain ( context , "https://.facebook.com" ) ; </a> 0
<a> } </a> 0
<a> public static void logd ( String tag , String msg ) { </a> 0
<a> if ( BuildConfig . DEBUG ) { </a> 1
<a> Log . d ( tag , msg ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public final class Validate { </a> 0
<a> public static void notNull ( Object arg , String name ) { </a> 0
<a> if ( arg == null ) { </a> 0
<a> throw new NullPointerException ( "Argument " + name + " cannot be null" ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> public static < T > void notEmpty ( Collection < T > container , String name ) { </a> 0
<a> if ( container . isEmpty ( ) ) { </a> 0
<a> throw new IllegalArgumentException ( "Container '" + name + "' cannot be empty" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static < T > void containsNoNulls ( Collection < T > container , String name ) { </a> 0
<a> Validate . notNull ( container , name ) ; </a> 0
<a> for ( T item : container ) { </a> 0
<a> if ( item == null ) { </a> 0
<a> throw new NullPointerException ( "Container '" + name + "' cannot contain null values" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static < T > void notEmptyAndContainsNoNulls ( Collection < T > container , String name ) { </a> 0
<a> Validate . containsNoNulls ( container , name ) ; </a> 0
<a> Validate . notEmpty ( container , name ) ; </a> 0
<a> } </a> 0
<a> public static void notNullOrEmpty ( String arg , String name ) { </a> 0
<a> if ( Utility . isNullOrEmpty ( arg ) ) { </a> 0
<a> throw new IllegalArgumentException ( "Argument " + name + " cannot be null or empty" ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> public static void oneOf ( Object arg , String name , Object ... values ) { </a> 0
<a> for ( Object value : values ) { </a> 0
<a> if ( value != null ) { </a> 0
<a> if ( value . equals ( arg ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( arg == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new IllegalArgumentException ( "Argument " + name + " was not one of the allowed values" ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> public interface GraphLocation extends GraphObject { </a> 0
<a> public String getStreet ( ) ; </a> 0
<a> public void setStreet ( String street ) ; </a> 0
<a> public String getCity ( ) ; </a> 0
<a> public void setCity ( String city ) ; </a> 0
<a> public String getState ( ) ; </a> 0
<a> public void setState ( String state ) ; </a> 0
<a> public String getCountry ( ) ; </a> 0
<a> public void setCountry ( String country ) ; </a> 0
<a> public String getZip ( ) ; </a> 0
<a> public void setZip ( String zip ) ; </a> 0
<a> public double getLatitude ( ) ; </a> 0
<a> public void setLatitude ( double latitude ) ; </a> 0
<a> public double getLongitude ( ) ; </a> 0
<a> public void setLongitude ( double longitude ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> public interface GraphMultiResult extends GraphObject { </a> 0
<a> public GraphObjectList < GraphObject > getData ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import com . facebook . FacebookGraphObjectException ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . lang . reflect . * ; </a> 0
<a> import java . text . ParseException ; </a> 0
<a> import java . text . SimpleDateFormat ; </a> 0
<a> import java . util . * ; </a> 0
<a> public interface GraphObject { </a> 0
<a> public < T extends GraphObject > T cast ( Class < T > graphObjectClass ) ; </a> 0
<a> public Map < String , Object > asMap ( ) ; </a> 0
<a> public JSONObject getInnerJSONObject ( ) ; </a> 0
<a> public Object getProperty ( String propertyName ) ; </a> 0
<a> public void setProperty ( String propertyName , Object propertyValue ) ; </a> 0
<a> public void removeProperty ( String propertyName ) ; </a> 0
<a> final class Factory { </a> 0
<a> private static final HashSet < Class < ? > > verifiedGraphObjectClasses = new HashSet < Class < ? > > ( ) ; </a> 0
<a> private static final SimpleDateFormat [ ] dateFormats = new SimpleDateFormat [ ] { </a> 0
<a> new SimpleDateFormat ( "yyyy-MM-dd'T'HH:mm:ssZ" , Locale . US ) , </a> 0
<a> new SimpleDateFormat ( "yyyy-MM-dd'T'HH:mm:ss" , Locale . US ) , new SimpleDateFormat ( "yyyy-MM-dd" , Locale . US ) , } ; </a> 0
<a> private Factory ( ) { </a> 0
<a> } </a> 0
<a> public static GraphObject create ( JSONObject json ) { </a> 0
<a> return create ( json , GraphObject . class ) ; </a> 0
<a> } </a> 0
<a> public static < T extends GraphObject > T create ( JSONObject json , Class < T > graphObjectClass ) { </a> 0
<a> return createGraphObjectProxy ( graphObjectClass , json ) ; </a> 0
<a> } </a> 0
<a> public static GraphObject create ( ) { </a> 0
<a> return create ( GraphObject . class ) ; </a> 0
<a> } </a> 0
<a> public static < T extends GraphObject > T create ( Class < T > graphObjectClass ) { </a> 0
<a> return createGraphObjectProxy ( graphObjectClass , new JSONObject ( ) ) ; </a> 0
<a> } </a> 0
<a> public static boolean hasSameId ( GraphObject a , GraphObject b ) { </a> 0
<a> if ( a == null || b == null || ! a . asMap ( ) . containsKey ( "id" ) || ! b . asMap ( ) . containsKey ( "id" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( a . equals ( b ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> Object idA = a . getProperty ( "id" ) ; </a> 0
<a> Object idB = b . getProperty ( "id" ) ; </a> 0
<a> if ( idA == null || idB == null || ! ( idA instanceof String ) || ! ( idB instanceof String ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return idA . equals ( idB ) ; </a> 0
<a> } </a> 0
<a> public static < T > GraphObjectList < T > createList ( JSONArray array , Class < T > graphObjectClass ) { </a> 0
<a> return new GraphObjectListImpl < T > ( array , graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> public static < T > GraphObjectList < T > createList ( Class < T > graphObjectClass ) { </a> 0
<a> return createList ( new JSONArray ( ) , graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> private static < T extends GraphObject > T createGraphObjectProxy ( Class < T > graphObjectClass , JSONObject state ) { </a> 0
<a> verifyCanProxyClass ( graphObjectClass ) ; </a> 0
<a> Class < ? > [ ] interfaces = new Class [ ] { graphObjectClass } ; </a> 0
<a> GraphObjectProxy graphObjectProxy = new GraphObjectProxy ( state , graphObjectClass ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> T graphObject = ( T ) Proxy . newProxyInstance ( GraphObject . class . getClassLoader ( ) , interfaces , graphObjectProxy ) ; </a> 0
<a> return graphObject ; </a> 0
<a> } </a> 0
<a> private static Map < String , Object > createGraphObjectProxyForMap ( JSONObject state ) { </a> 0
<a> Class < ? > [ ] interfaces = new Class [ ] { Map . class } ; </a> 0
<a> GraphObjectProxy graphObjectProxy = new GraphObjectProxy ( state , Map . class ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Map < String , Object > graphObject = ( Map < String , Object > ) Proxy </a> 0
<a> . newProxyInstance ( GraphObject . class . getClassLoader ( ) , interfaces , graphObjectProxy ) ; </a> 0
<a> return graphObject ; </a> 0
<a> } </a> 0
<a> private static synchronized < T extends GraphObject > boolean hasClassBeenVerified ( Class < T > graphObjectClass ) { </a> 0
<a> return verifiedGraphObjectClasses . contains ( graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> private static synchronized < T extends GraphObject > void recordClassHasBeenVerified ( Class < T > graphObjectClass ) { </a> 0
<a> verifiedGraphObjectClasses . add ( graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> private static < T extends GraphObject > void verifyCanProxyClass ( Class < T > graphObjectClass ) { </a> 0
<a> if ( hasClassBeenVerified ( graphObjectClass ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( ! graphObjectClass . isInterface ( ) ) { </a> 0
<a> throw new FacebookGraphObjectException ( "Factory can only wrap interfaces, not class: " </a> 0
<a> + graphObjectClass . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> Method [ ] methods = graphObjectClass . getMethods ( ) ; </a> 0
<a> for ( Method method : methods ) { </a> 0
<a> String methodName = method . getName ( ) ; </a> 0
<a> int parameterCount = method . getParameterTypes ( ) . length ; </a> 0
<a> Class < ? > returnType = method . getReturnType ( ) ; </a> 0
<a> boolean hasPropertyNameOverride = method . isAnnotationPresent ( PropertyName . class ) ; </a> 0
<a> if ( method . getDeclaringClass ( ) . isAssignableFrom ( GraphObject . class ) ) { </a> 0
<a> continue ; </a> 0
<a> } else if ( parameterCount == 1 && returnType == Void . TYPE ) { </a> 0
<a> if ( hasPropertyNameOverride ) { </a> 0
<a> if ( ! Utility . isNullOrEmpty ( method . getAnnotation ( PropertyName . class ) . value ( ) ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> } else if ( methodName . startsWith ( "set" ) && methodName . length ( ) > 3 ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> } else if ( parameterCount == 0 && returnType != Void . TYPE ) { </a> 0
<a> if ( hasPropertyNameOverride ) { </a> 0
<a> if ( ! Utility . isNullOrEmpty ( method . getAnnotation ( PropertyName . class ) . value ( ) ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> } else if ( methodName . startsWith ( "get" ) && methodName . length ( ) > 3 ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new FacebookGraphObjectException ( "Factory can't proxy method: " + method . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> recordClassHasBeenVerified ( graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> static < U > U coerceValueToExpectedType ( Object value , Class < U > expectedType , </a> 0
<a> ParameterizedType expectedTypeAsParameterizedType ) { </a> 0
<a> if ( value == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> Class < ? > valueType = value . getClass ( ) ; </a> 0
<a> if ( expectedType . isAssignableFrom ( valueType ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) value ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> if ( expectedType . isPrimitive ( ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) value ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( expectedType ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Class < ? extends GraphObject > graphObjectClass = ( Class < ? extends GraphObject > ) expectedType ; </a> 0
<a> if ( JSONObject . class . isAssignableFrom ( valueType ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) createGraphObjectProxy ( graphObjectClass , ( JSONObject ) value ) ; </a> 0
<a> return result ; </a> 0
<a> } else if ( GraphObject . class . isAssignableFrom ( valueType ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) ( ( GraphObject ) value ) . cast ( graphObjectClass ) ; </a> 0
<a> return result ; </a> 0
<a> } else { </a> 0
<a> throw new FacebookGraphObjectException ( "Can't create GraphObject from " + valueType . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( Iterable . class . equals ( expectedType ) || Collection . class . equals ( expectedType ) </a> 0
<a> || List . class . equals ( expectedType ) || GraphObjectList . class . equals ( expectedType ) ) { </a> 0
<a> if ( expectedTypeAsParameterizedType == null ) { </a> 0
<a> throw new FacebookGraphObjectException ( "can't infer generic type of: " + expectedType . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> Type [ ] actualTypeArguments = expectedTypeAsParameterizedType . getActualTypeArguments ( ) ; </a> 0
<a> if ( actualTypeArguments == null || actualTypeArguments . length != 1 </a> 0
<a> || ! ( actualTypeArguments [ 0 ] instanceof Class < ? > ) ) { </a> 0
<a> throw new FacebookGraphObjectException ( </a> 0
<a> "Expect collection properties to be of a type with exactly one generic parameter." ) ; </a> 0
<a> } </a> 0
<a> Class < ? > collectionGenericArgument = ( Class < ? > ) actualTypeArguments [ 0 ] ; </a> 0
<a> if ( JSONArray . class . isAssignableFrom ( valueType ) ) { </a> 0
<a> JSONArray jsonArray = ( JSONArray ) value ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) createList ( jsonArray , collectionGenericArgument ) ; </a> 0
<a> return result ; </a> 0
<a> } else { </a> 0
<a> throw new FacebookGraphObjectException ( "Can't create Collection from " + valueType . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( String . class . equals ( expectedType ) ) { </a> 0
<a> if ( Double . class . isAssignableFrom ( valueType ) || </a> 0
<a> Float . class . isAssignableFrom ( valueType ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) String . format ( "%f" , value ) ; </a> 0
<a> return result ; </a> 0
<a> } else if ( Number . class . isAssignableFrom ( valueType ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) String . format ( "%d" , value ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> } else if ( Date . class . equals ( expectedType ) ) { </a> 0
<a> if ( String . class . isAssignableFrom ( valueType ) ) { </a> 0
<a> for ( SimpleDateFormat format : dateFormats ) { </a> 0
<a> try { </a> 0
<a> Date date = format . parse ( ( String ) value ) ; </a> 0
<a> if ( date != null ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> U result = ( U ) date ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> } catch ( ParseException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new FacebookGraphObjectException ( "Can't convert type" + valueType . getName ( ) + " to " </a> 0
<a> + expectedType . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> static String convertCamelCaseToLowercaseWithUnderscores ( String string ) { </a> 0
<a> string = string . replaceAll ( "([a-z])([A-Z])" , "$1_$2" ) ; </a> 0
<a> return string . toLowerCase ( Locale . US ) ; </a> 0
<a> } </a> 0
<a> private static Object getUnderlyingJSONObject ( Object obj ) { </a> 0
<a> Class < ? > objClass = obj . getClass ( ) ; </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( objClass ) ) { </a> 0
<a> GraphObject graphObject = ( GraphObject ) obj ; </a> 0
<a> return graphObject . getInnerJSONObject ( ) ; </a> 0
<a> } else if ( GraphObjectList . class . isAssignableFrom ( objClass ) ) { </a> 0
<a> GraphObjectList < ? > graphObjectList = ( GraphObjectList < ? > ) obj ; </a> 0
<a> return graphObjectList . getInnerJSONArray ( ) ; </a> 0
<a> } </a> 0
<a> return obj ; </a> 0
<a> } </a> 0
<a> private abstract static class ProxyBase < STATE > implements InvocationHandler { </a> 0
<a> private static final String EQUALS_METHOD = "equals" ; </a> 0
<a> private static final String TOSTRING_METHOD = "toString" ; </a> 0
<a> protected final STATE state ; </a> 0
<a> protected ProxyBase ( STATE state ) { </a> 0
<a> this . state = state ; </a> 0
<a> } </a> 0
<a> protected final Object throwUnexpectedMethodSignature ( Method method ) { </a> 0
<a> throw new FacebookGraphObjectException ( getClass ( ) . getName ( ) + " got an unexpected method signature: " </a> 0
<a> + method . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> protected final Object proxyObjectMethods ( Object proxy , Method method , Object [ ] args ) throws Throwable { </a> 0
<a> String methodName = method . getName ( ) ; </a> 0
<a> if ( methodName . equals ( EQUALS_METHOD ) ) { </a> 0
<a> Object other = args [ 0 ] ; </a> 0
<a> if ( other == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> InvocationHandler handler = Proxy . getInvocationHandler ( other ) ; </a> 0
<a> if ( ! ( handler instanceof GraphObjectProxy ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> GraphObjectProxy otherProxy = ( GraphObjectProxy ) handler ; </a> 0
<a> return this . state . equals ( otherProxy . state ) ; </a> 0
<a> } else if ( methodName . equals ( TOSTRING_METHOD ) ) { </a> 0
<a> return toString ( ) ; </a> 0
<a> } </a> 0
<a> return method . invoke ( this . state , args ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final static class GraphObjectProxy extends ProxyBase < JSONObject > { </a> 0
<a> private static final String CLEAR_METHOD = "clear" ; </a> 0
<a> private static final String CONTAINSKEY_METHOD = "containsKey" ; </a> 0
<a> private static final String CONTAINSVALUE_METHOD = "containsValue" ; </a> 0
<a> private static final String ENTRYSET_METHOD = "entrySet" ; </a> 0
<a> private static final String GET_METHOD = "get" ; </a> 0
<a> private static final String ISEMPTY_METHOD = "isEmpty" ; </a> 0
<a> private static final String KEYSET_METHOD = "keySet" ; </a> 0
<a> private static final String PUT_METHOD = "put" ; </a> 0
<a> private static final String PUTALL_METHOD = "putAll" ; </a> 0
<a> private static final String REMOVE_METHOD = "remove" ; </a> 0
<a> private static final String SIZE_METHOD = "size" ; </a> 0
<a> private static final String VALUES_METHOD = "values" ; </a> 0
<a> private static final String CAST_METHOD = "cast" ; </a> 0
<a> private static final String CASTTOMAP_METHOD = "asMap" ; </a> 0
<a> private static final String GETPROPERTY_METHOD = "getProperty" ; </a> 0
<a> private static final String SETPROPERTY_METHOD = "setProperty" ; </a> 0
<a> private static final String REMOVEPROPERTY_METHOD = "removeProperty" ; </a> 0
<a> private static final String GETINNERJSONOBJECT_METHOD = "getInnerJSONObject" ; </a> 0
<a> private final Class < ? > graphObjectClass ; </a> 0
<a> public GraphObjectProxy ( JSONObject state , Class < ? > graphObjectClass ) { </a> 0
<a> super ( state ) ; </a> 0
<a> this . graphObjectClass = graphObjectClass ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return String . format ( "GraphObject{graphObjectClass=%s, state=%s}" , graphObjectClass . getSimpleName ( ) , state ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { </a> 0
<a> Class < ? > declaringClass = method . getDeclaringClass ( ) ; </a> 0
<a> if ( declaringClass == Object . class ) { </a> 0
<a> return proxyObjectMethods ( proxy , method , args ) ; </a> 0
<a> } else if ( declaringClass == Map . class ) { </a> 0
<a> return proxyMapMethods ( method , args ) ; </a> 0
<a> } else if ( declaringClass == GraphObject . class ) { </a> 0
<a> return proxyGraphObjectMethods ( proxy , method , args ) ; </a> 0
<a> } else if ( GraphObject . class . isAssignableFrom ( declaringClass ) ) { </a> 0
<a> return proxyGraphObjectGettersAndSetters ( method , args ) ; </a> 0
<a> } </a> 0
<a> return throwUnexpectedMethodSignature ( method ) ; </a> 0
<a> } </a> 0
<a> private final Object proxyMapMethods ( Method method , Object [ ] args ) { </a> 0
<a> String methodName = method . getName ( ) ; </a> 0
<a> if ( methodName . equals ( CLEAR_METHOD ) ) { </a> 0
<a> JsonUtil . jsonObjectClear ( this . state ) ; </a> 0
<a> return null ; </a> 0
<a> } else if ( methodName . equals ( CONTAINSKEY_METHOD ) ) { </a> 0
<a> return this . state . has ( ( String ) args [ 0 ] ) ; </a> 0
<a> } else if ( methodName . equals ( CONTAINSVALUE_METHOD ) ) { </a> 0
<a> return JsonUtil . jsonObjectContainsValue ( this . state , args [ 0 ] ) ; </a> 0
<a> } else if ( methodName . equals ( ENTRYSET_METHOD ) ) { </a> 0
<a> return JsonUtil . jsonObjectEntrySet ( this . state ) ; </a> 0
<a> } else if ( methodName . equals ( GET_METHOD ) ) { </a> 0
<a> return this . state . opt ( ( String ) args [ 0 ] ) ; </a> 0
<a> } else if ( methodName . equals ( ISEMPTY_METHOD ) ) { </a> 0
<a> return this . state . length ( ) == 0 ; </a> 0
<a> } else if ( methodName . equals ( KEYSET_METHOD ) ) { </a> 0
<a> return JsonUtil . jsonObjectKeySet ( this . state ) ; </a> 0
<a> } else if ( methodName . equals ( PUT_METHOD ) ) { </a> 0
<a> return setJSONProperty ( args ) ; </a> 0
<a> } else if ( methodName . equals ( PUTALL_METHOD ) ) { </a> 0
<a> Map < String , Object > map = null ; </a> 0
<a> if ( args [ 0 ] instanceof Map < ? , ? > ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Map < String , Object > castMap = ( Map < String , Object > ) args [ 0 ] ; </a> 0
<a> map = castMap ; </a> 0
<a> } else if ( args [ 0 ] instanceof GraphObject ) { </a> 0
<a> map = ( ( GraphObject ) args [ 0 ] ) . asMap ( ) ; </a> 0
<a> } </a> 0
<a> JsonUtil . jsonObjectPutAll ( this . state , map ) ; </a> 0
<a> return null ; </a> 0
<a> } else if ( methodName . equals ( REMOVE_METHOD ) ) { </a> 0
<a> this . state . remove ( ( String ) args [ 0 ] ) ; </a> 0
<a> return null ; </a> 0
<a> } else if ( methodName . equals ( SIZE_METHOD ) ) { </a> 0
<a> return this . state . length ( ) ; </a> 0
<a> } else if ( methodName . equals ( VALUES_METHOD ) ) { </a> 0
<a> return JsonUtil . jsonObjectValues ( this . state ) ; </a> 0
<a> } </a> 0
<a> return throwUnexpectedMethodSignature ( method ) ; </a> 0
<a> } </a> 0
<a> private final Object proxyGraphObjectMethods ( Object proxy , Method method , Object [ ] args ) { </a> 0
<a> String methodName = method . getName ( ) ; </a> 0
<a> if ( methodName . equals ( CAST_METHOD ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Class < ? extends GraphObject > graphObjectClass = ( Class < ? extends GraphObject > ) args [ 0 ] ; </a> 0
<a> if ( graphObjectClass != null && </a> 0
<a> graphObjectClass . isAssignableFrom ( this . graphObjectClass ) ) { </a> 0
<a> return proxy ; </a> 0
<a> } </a> 0
<a> return Factory . createGraphObjectProxy ( graphObjectClass , this . state ) ; </a> 0
<a> } else if ( methodName . equals ( GETINNERJSONOBJECT_METHOD ) ) { </a> 0
<a> InvocationHandler handler = Proxy . getInvocationHandler ( proxy ) ; </a> 0
<a> GraphObjectProxy otherProxy = ( GraphObjectProxy ) handler ; </a> 0
<a> return otherProxy . state ; </a> 0
<a> } else if ( methodName . equals ( CASTTOMAP_METHOD ) ) { </a> 0
<a> return Factory . createGraphObjectProxyForMap ( this . state ) ; </a> 0
<a> } else if ( methodName . equals ( GETPROPERTY_METHOD ) ) { </a> 0
<a> return state . opt ( ( String ) args [ 0 ] ) ; </a> 0
<a> } else if ( methodName . equals ( SETPROPERTY_METHOD ) ) { </a> 0
<a> return setJSONProperty ( args ) ; </a> 0
<a> } else if ( methodName . equals ( REMOVEPROPERTY_METHOD ) ) { </a> 0
<a> this . state . remove ( ( String ) args [ 0 ] ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return throwUnexpectedMethodSignature ( method ) ; </a> 0
<a> } </a> 0
<a> private final Object proxyGraphObjectGettersAndSetters ( Method method , Object [ ] args ) throws JSONException { </a> 0
<a> String methodName = method . getName ( ) ; </a> 0
<a> int parameterCount = method . getParameterTypes ( ) . length ; </a> 0
<a> PropertyName propertyNameOverride = method . getAnnotation ( PropertyName . class ) ; </a> 0
<a> String key = propertyNameOverride != null ? propertyNameOverride . value ( ) : </a> 0
<a> convertCamelCaseToLowercaseWithUnderscores ( methodName . substring ( 3 ) ) ; </a> 0
<a> if ( parameterCount == 0 ) { </a> 0
<a> Object value = this . state . opt ( key ) ; </a> 0
<a> Class < ? > expectedType = method . getReturnType ( ) ; </a> 0
<a> Type genericReturnType = method . getGenericReturnType ( ) ; </a> 0
<a> ParameterizedType parameterizedReturnType = null ; </a> 0
<a> if ( genericReturnType instanceof ParameterizedType ) { </a> 0
<a> parameterizedReturnType = ( ParameterizedType ) genericReturnType ; </a> 0
<a> } </a> 0
<a> value = coerceValueToExpectedType ( value , expectedType , parameterizedReturnType ) ; </a> 0
<a> return value ; </a> 0
<a> } else if ( parameterCount == 1 ) { </a> 0
<a> Object value = args [ 0 ] ; </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( value . getClass ( ) ) ) { </a> 0
<a> value = ( ( GraphObject ) value ) . getInnerJSONObject ( ) ; </a> 0
<a> } else if ( GraphObjectList . class . isAssignableFrom ( value . getClass ( ) ) ) { </a> 0
<a> value = ( ( GraphObjectList < ? > ) value ) . getInnerJSONArray ( ) ; </a> 0
<a> } else if ( Iterable . class . isAssignableFrom ( value . getClass ( ) ) ) { </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> Iterable < ? > iterable = ( Iterable < ? > ) value ; </a> 0
<a> for ( Object o : iterable ) { </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( o . getClass ( ) ) ) { </a> 0
<a> jsonArray . put ( ( ( GraphObject ) o ) . getInnerJSONObject ( ) ) ; </a> 0
<a> } else { </a> 0
<a> jsonArray . put ( o ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> value = jsonArray ; </a> 0
<a> } </a> 0
<a> this . state . putOpt ( key , value ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> return throwUnexpectedMethodSignature ( method ) ; </a> 0
<a> } </a> 0
<a> private Object setJSONProperty ( Object [ ] args ) { </a> 0
<a> String name = ( String ) args [ 0 ] ; </a> 0
<a> Object property = args [ 1 ] ; </a> 0
<a> Object value = getUnderlyingJSONObject ( property ) ; </a> 0
<a> try { </a> 0
<a> state . putOpt ( name , value ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> throw new IllegalArgumentException ( e ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final static class GraphObjectListImpl < T > extends AbstractList < T > implements GraphObjectList < T > { </a> 0
<a> private final JSONArray state ; </a> 0
<a> private final Class < ? > itemType ; </a> 0
<a> public GraphObjectListImpl ( JSONArray state , Class < ? > itemType ) { </a> 0
<a> Validate . notNull ( state , "state" ) ; </a> 0
<a> Validate . notNull ( itemType , "itemType" ) ; </a> 0
<a> this . state = state ; </a> 0
<a> this . itemType = itemType ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return String . format ( "GraphObjectList{itemType=%s, state=%s}" , itemType . getSimpleName ( ) , state ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void add ( int location , T object ) { </a> 0
<a> if ( location < 0 ) { </a> 0
<a> throw new IndexOutOfBoundsException ( ) ; </a> 0
<a> } else if ( location < size ( ) ) { </a> 0
<a> throw new UnsupportedOperationException ( "Only adding items at the end of the list is supported." ) ; </a> 0
<a> } </a> 0
<a> put ( location , object ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public T set ( int location , T object ) { </a> 0
<a> checkIndex ( location ) ; </a> 0
<a> T result = get ( location ) ; </a> 0
<a> put ( location , object ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return state . hashCode ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object obj ) { </a> 0
<a> if ( this == obj ) </a> 0
<a> return true ; </a> 0
<a> if ( getClass ( ) != obj . getClass ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> GraphObjectListImpl < T > other = ( GraphObjectListImpl < T > ) obj ; </a> 0
<a> return state . equals ( other . state ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> @ Override </a> 0
<a> public T get ( int location ) { </a> 0
<a> checkIndex ( location ) ; </a> 0
<a> Object value = state . opt ( location ) ; </a> 0
<a> T result = ( T ) coerceValueToExpectedType ( value , itemType , null ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int size ( ) { </a> 0
<a> return state . length ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final < U extends GraphObject > GraphObjectList < U > castToListOf ( Class < U > graphObjectClass ) { </a> 0
<a> if ( GraphObject . class . isAssignableFrom ( itemType ) ) { </a> 0
<a> if ( graphObjectClass . isAssignableFrom ( itemType ) ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> GraphObjectList < U > result = ( GraphObjectList < U > ) this ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> return createList ( state , graphObjectClass ) ; </a> 0
<a> } else { </a> 0
<a> throw new FacebookGraphObjectException ( "Can't cast GraphObjectCollection of non-GraphObject type " </a> 0
<a> + itemType ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final JSONArray getInnerJSONArray ( ) { </a> 0
<a> return state ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean remove ( Object o ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean removeAll ( Collection < ? > c ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean retainAll ( Collection < ? > c ) { </a> 0
<a> throw new UnsupportedOperationException ( ) ; </a> 0
<a> } </a> 0
<a> private void checkIndex ( int index ) { </a> 0
<a> if ( index < 0 || index >= state . length ( ) ) { </a> 0
<a> throw new IndexOutOfBoundsException ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void put ( int index , T obj ) { </a> 0
<a> Object underlyingObject = getUnderlyingJSONObject ( obj ) ; </a> 0
<a> try { </a> 0
<a> state . put ( index , underlyingObject ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> throw new IllegalArgumentException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import java . util . List ; </a> 0
<a> public interface GraphObjectList < T > extends List < T > { </a> 0
<a> public < U extends GraphObject > GraphObjectList < U > castToListOf ( Class < U > graphObjectClass ) ; </a> 0
<a> public JSONArray getInnerJSONArray ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> public interface GraphPlace extends GraphObject { </a> 0
<a> public String getId ( ) ; </a> 0
<a> public void setId ( String id ) ; </a> 0
<a> public String getName ( ) ; </a> 0
<a> public void setName ( String name ) ; </a> 0
<a> public String getCategory ( ) ; </a> 0
<a> public void setCategory ( String category ) ; </a> 0
<a> public GraphLocation getLocation ( ) ; </a> 0
<a> public void setLocation ( GraphLocation location ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> public interface GraphUser extends GraphObject { </a> 0
<a> public String getId ( ) ; </a> 0
<a> public void setId ( String id ) ; </a> 0
<a> public String getName ( ) ; </a> 0
<a> public void setName ( String name ) ; </a> 0
<a> public String getFirstName ( ) ; </a> 0
<a> public void setFirstName ( String firstName ) ; </a> 0
<a> public String getMiddleName ( ) ; </a> 0
<a> public void setMiddleName ( String middleName ) ; </a> 0
<a> public String getLastName ( ) ; </a> 0
<a> public void setLastName ( String lastName ) ; </a> 0
<a> public String getLink ( ) ; </a> 0
<a> public void setLink ( String link ) ; </a> 0
<a> public String getUsername ( ) ; </a> 0
<a> public void setUsername ( String username ) ; </a> 0
<a> public String getBirthday ( ) ; </a> 0
<a> public void setBirthday ( String birthday ) ; </a> 0
<a> public GraphLocation getLocation ( ) ; </a> 0
<a> public void setLocation ( GraphLocation location ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import android . annotation . SuppressLint ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . * ; </a> 0
<a> class JsonUtil { </a> 0
<a> static void jsonObjectClear ( JSONObject jsonObject ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = ( Iterator < String > ) jsonObject . keys ( ) ; </a> 0
<a> while ( keys . hasNext ( ) ) { </a> 0
<a> keys . next ( ) ; </a> 0
<a> keys . remove ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static boolean jsonObjectContainsValue ( JSONObject jsonObject , Object value ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = ( Iterator < String > ) jsonObject . keys ( ) ; </a> 0
<a> while ( keys . hasNext ( ) ) { </a> 0
<a> Object thisValue = jsonObject . opt ( keys . next ( ) ) ; </a> 0
<a> if ( thisValue != null && thisValue . equals ( value ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private final static class JSONObjectEntry implements Map . Entry < String , Object > { </a> 0
<a> private final String key ; </a> 0
<a> private final Object value ; </a> 0
<a> JSONObjectEntry ( String key , Object value ) { </a> 0
<a> this . key = key ; </a> 0
<a> this . value = value ; </a> 0
<a> } </a> 0
<a> @ SuppressLint ( "FieldGetter" ) </a> 0
<a> @ Override </a> 0
<a> public String getKey ( ) { </a> 0
<a> return this . key ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object getValue ( ) { </a> 0
<a> return this . value ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object setValue ( Object object ) { </a> 0
<a> throw new UnsupportedOperationException ( "JSONObjectEntry is immutable" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static Set < Map . Entry < String , Object > > jsonObjectEntrySet ( JSONObject jsonObject ) { </a> 0
<a> HashSet < Map . Entry < String , Object > > result = new HashSet < Map . Entry < String , Object > > ( ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = ( Iterator < String > ) jsonObject . keys ( ) ; </a> 0
<a> while ( keys . hasNext ( ) ) { </a> 0
<a> String key = keys . next ( ) ; </a> 0
<a> Object value = jsonObject . opt ( key ) ; </a> 0
<a> result . add ( new JSONObjectEntry ( key , value ) ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> static Set < String > jsonObjectKeySet ( JSONObject jsonObject ) { </a> 0
<a> HashSet < String > result = new HashSet < String > ( ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = ( Iterator < String > ) jsonObject . keys ( ) ; </a> 0
<a> while ( keys . hasNext ( ) ) { </a> 0
<a> result . add ( keys . next ( ) ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> static void jsonObjectPutAll ( JSONObject jsonObject , Map < String , Object > map ) { </a> 0
<a> Set < Map . Entry < String , Object > > entrySet = map . entrySet ( ) ; </a> 0
<a> for ( Map . Entry < String , Object > entry : entrySet ) { </a> 0
<a> try { </a> 0
<a> jsonObject . putOpt ( entry . getKey ( ) , entry . getValue ( ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> throw new IllegalArgumentException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static Collection < Object > jsonObjectValues ( JSONObject jsonObject ) { </a> 0
<a> ArrayList < Object > result = new ArrayList < Object > ( ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Iterator < String > keys = ( Iterator < String > ) jsonObject . keys ( ) ; </a> 0
<a> while ( keys . hasNext ( ) ) { </a> 0
<a> result . add ( jsonObject . opt ( keys . next ( ) ) ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public interface OpenGraphAction extends GraphObject { </a> 0
<a> public String getId ( ) ; </a> 0
<a> public void setId ( String id ) ; </a> 0
<a> public Date getStartTime ( ) ; </a> 0
<a> public void setStartTime ( Date startTime ) ; </a> 0
<a> public Date getEndTime ( ) ; </a> 0
<a> public void setEndTime ( Date endTime ) ; </a> 0
<a> public Date getPublishTime ( ) ; </a> 0
<a> public void setPublishTime ( Date publishTime ) ; </a> 0
<a> public Date getCreatedTime ( ) ; </a> 0
<a> public void setCreatedTime ( Date createdTime ) ; </a> 0
<a> public Date getExpiresTime ( ) ; </a> 0
<a> public void setExpiresTime ( Date expiresTime ) ; </a> 0
<a> public String getRef ( ) ; </a> 0
<a> public void setRef ( String ref ) ; </a> 0
<a> public String getMessage ( ) ; </a> 0
<a> public void setMessage ( String message ) ; </a> 0
<a> public GraphPlace getPlace ( ) ; </a> 0
<a> public void setPlace ( GraphPlace place ) ; </a> 0
<a> public List < GraphObject > getTags ( ) ; </a> 0
<a> public void setTags ( List < ? extends GraphObject > tags ) ; </a> 0
<a> public List < JSONObject > getImage ( ) ; </a> 0
<a> public void setImage ( List < JSONObject > image ) ; </a> 0
<a> public GraphUser getFrom ( ) ; </a> 0
<a> public void setFrom ( GraphUser from ) ; </a> 0
<a> public JSONObject getLikes ( ) ; </a> 0
<a> public void setLikes ( JSONObject likes ) ; </a> 0
<a> public GraphObject getApplication ( ) ; </a> 0
<a> public void setApplication ( GraphObject application ) ; </a> 0
<a> public JSONObject getComments ( ) ; </a> 0
<a> public void setComments ( JSONObject comments ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import java . lang . annotation . Retention ; </a> 0
<a> import java . lang . annotation . RetentionPolicy ; </a> 0
<a> @ Retention ( RetentionPolicy . RUNTIME ) </a> 0
<a> public @ interface PropertyName { </a> 0
<a> String value ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionLoginBehavior ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> import com . facebook . internal . SessionAuthorizationType ; </a> 0
<a> import com . facebook . internal . SessionTracker ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> class FacebookFragment extends Fragment { </a> 0
<a> private SessionTracker sessionTracker ; </a> 0
<a> @ Override </a> 0
<a> public void onActivityCreated ( Bundle savedInstanceState ) { </a> 0
<a> super . onActivityCreated ( savedInstanceState ) ; </a> 0
<a> sessionTracker = new SessionTracker ( getActivity ( ) , new DefaultSessionStatusCallback ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> sessionTracker . getSession ( ) . onActivityResult ( this . getActivity ( ) , requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onDestroy ( ) { </a> 0
<a> super . onDestroy ( ) ; </a> 0
<a> sessionTracker . stopTracking ( ) ; </a> 0
<a> } </a> 0
<a> public void setSession ( Session newSession ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> sessionTracker . setSession ( newSession ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void onSessionStateChange ( SessionState state , Exception exception ) { </a> 0
<a> } </a> 0
<a> protected final Session getSession ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> return sessionTracker . getSession ( ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected final boolean isSessionOpen ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> return sessionTracker . getOpenSession ( ) != null ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> protected final SessionState getSessionState ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . getSession ( ) ; </a> 0
<a> return ( currentSession != null ) ? currentSession . getState ( ) : null ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected final String getAccessToken ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . getOpenSession ( ) ; </a> 0
<a> return ( currentSession != null ) ? currentSession . getAccessToken ( ) : null ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected final Date getExpirationDate ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . getOpenSession ( ) ; </a> 0
<a> return ( currentSession != null ) ? currentSession . getExpirationDate ( ) : null ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected final void closeSession ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . getOpenSession ( ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected final void closeSessionAndClearTokenInformation ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . getOpenSession ( ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . closeAndClearTokenInformation ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected final List < String > getSessionPermissions ( ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . getSession ( ) ; </a> 0
<a> return ( currentSession != null ) ? currentSession . getPermissions ( ) : null ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected final void openSession ( ) { </a> 0
<a> openSessionForRead ( null , null ) ; </a> 0
<a> } </a> 0
<a> protected final void openSessionForRead ( String applicationId , List < String > permissions ) { </a> 0
<a> openSessionForRead ( applicationId , permissions , SessionLoginBehavior . SSO_WITH_FALLBACK , </a> 0
<a> Session . DEFAULT_AUTHORIZE_ACTIVITY_CODE ) ; </a> 0
<a> } </a> 0
<a> protected final void openSessionForRead ( String applicationId , List < String > permissions , </a> 0
<a> SessionLoginBehavior behavior , int activityCode ) { </a> 0
<a> openSession ( applicationId , permissions , behavior , activityCode , SessionAuthorizationType . READ ) ; </a> 0
<a> } </a> 0
<a> protected final void openSessionForPublish ( String applicationId , List < String > permissions ) { </a> 0
<a> openSessionForPublish ( applicationId , permissions , SessionLoginBehavior . SSO_WITH_FALLBACK , </a> 0
<a> Session . DEFAULT_AUTHORIZE_ACTIVITY_CODE ) ; </a> 0
<a> } </a> 0
<a> protected final void openSessionForPublish ( String applicationId , List < String > permissions , </a> 0
<a> SessionLoginBehavior behavior , int activityCode ) { </a> 0
<a> openSession ( applicationId , permissions , behavior , activityCode , SessionAuthorizationType . PUBLISH ) ; </a> 0
<a> } </a> 0
<a> private void openSession ( String applicationId , List < String > permissions , </a> 0
<a> SessionLoginBehavior behavior , int activityCode , SessionAuthorizationType authType ) { </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> Session currentSession = sessionTracker . getSession ( ) ; </a> 0
<a> if ( currentSession == null || currentSession . getState ( ) . isClosed ( ) ) { </a> 0
<a> Session session = new Session . Builder ( getActivity ( ) ) . setApplicationId ( applicationId ) . build ( ) ; </a> 0
<a> Session . setActiveSession ( session ) ; </a> 0
<a> currentSession = session ; </a> 0
<a> } </a> 0
<a> if ( ! currentSession . isOpened ( ) ) { </a> 0
<a> Session . OpenRequest openRequest = new Session . OpenRequest ( this ) . </a> 0
<a> setPermissions ( permissions ) . </a> 0
<a> setLoginBehavior ( behavior ) . </a> 0
<a> setRequestCode ( activityCode ) ; </a> 0
<a> if ( SessionAuthorizationType . PUBLISH . equals ( authType ) ) { </a> 0
<a> currentSession . openForPublish ( openRequest ) ; </a> 0
<a> } else { </a> 0
<a> currentSession . openForRead ( openRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class DefaultSessionStatusCallback implements Session . StatusCallback { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , </a> 0
<a> SessionState state , </a> 0
<a> Exception exception ) { </a> 0
<a> FacebookFragment . this . onSessionStateChange ( state , exception ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . annotation . SuppressLint ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . res . TypedArray ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . util . AttributeSet ; </a> 0
<a> import com . facebook . * ; </a> 1
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import java . util . Arrays ; </a> 1
<a> import java . util . HashSet ; </a> 1
<a> import java . util . List ; </a> 1
<a> import java . util . Set ; </a> 1
<a> public class FriendPickerFragment extends PickerFragment < GraphUser > { </a> 0
<a> public static final String USER_ID_BUNDLE_KEY = "com.facebook.widget.FriendPickerFragment.UserId" ; </a> 0
<a> public static final String MULTI_SELECT_BUNDLE_KEY = "com.facebook.widget.FriendPickerFragment.MultiSelect" ; </a> 0
<a> private static final String ID = "id" ; </a> 0
<a> private static final String NAME = "name" ; </a> 0
<a> private String userId ; </a> 0
<a> private boolean multiSelect = true ; </a> 0
<a> public FriendPickerFragment ( ) { </a> 0
<a> this ( null ) ; </a> 0
<a> } </a> 0
<a> @ SuppressLint ( "ValidFragment" ) </a> 0
<a> public FriendPickerFragment ( Bundle args ) { </a> 0
<a> super ( GraphUser . class , R . layout . com_facebook_friendpickerfragment , args ) ; </a> 0
<a> setFriendPickerSettingsFromBundle ( args ) ; </a> 0
<a> } </a> 0
<a> public String getUserId ( ) { </a> 0
<a> return userId ; </a> 0
<a> } </a> 0
<a> public void setUserId ( String userId ) { </a> 0
<a> this . userId = userId ; </a> 0
<a> } </a> 0
<a> public boolean getMultiSelect ( ) { </a> 0
<a> return multiSelect ; </a> 0
<a> } </a> 0
<a> public void setMultiSelect ( boolean multiSelect ) { </a> 0
<a> if ( this . multiSelect != multiSelect ) { </a> 0
<a> this . multiSelect = multiSelect ; </a> 0
<a> setSelectionStrategy ( createSelectionStrategy ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public List < GraphUser > getSelection ( ) { </a> 0
<a> return getSelectedGraphObjects ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onInflate ( Activity activity , AttributeSet attrs , Bundle savedInstanceState ) { </a> 0
<a> super . onInflate ( activity , attrs , savedInstanceState ) ; </a> 0
<a> TypedArray a = activity . obtainStyledAttributes ( attrs , R . styleable . com_facebook_friend_picker_fragment ) ; </a> 0
<a> setMultiSelect ( a . getBoolean ( R . styleable . com_facebook_friend_picker_fragment_multi_select , multiSelect ) ) ; </a> 0
<a> a . recycle ( ) ; </a> 0
<a> } </a> 0
<a> public void setSettingsFromBundle ( Bundle inState ) { </a> 0
<a> super . setSettingsFromBundle ( inState ) ; </a> 0
<a> setFriendPickerSettingsFromBundle ( inState ) ; </a> 0
<a> } </a> 0
<a> void saveSettingsToBundle ( Bundle outState ) { </a> 0
<a> super . saveSettingsToBundle ( outState ) ; </a> 0
<a> outState . putString ( USER_ID_BUNDLE_KEY , userId ) ; </a> 0
<a> outState . putBoolean ( MULTI_SELECT_BUNDLE_KEY , multiSelect ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> PickerFragmentAdapter < GraphUser > createAdapter ( ) { </a> 0
<a> PickerFragmentAdapter < GraphUser > adapter = new PickerFragmentAdapter < GraphUser > ( </a> 0
<a> this . getActivity ( ) ) { </a> 0
<a> @ Override </a> 0
<a> protected int getGraphObjectRowLayoutId ( GraphUser graphObject ) { </a> 0
<a> return R . layout . com_facebook_picker_list_row ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int getDefaultPicture ( ) { </a> 0
<a> return R . drawable . com_facebook_profile_default_icon ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> adapter . setShowCheckbox ( true ) ; </a> 0
<a> adapter . setShowPicture ( getShowPictures ( ) ) ; </a> 0
<a> adapter . setSortFields ( Arrays . asList ( new String [ ] { NAME } ) ) ; </a> 0
<a> adapter . setGroupByField ( NAME ) ; </a> 0
<a> return adapter ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> LoadingStrategy createLoadingStrategy ( ) { </a> 0
<a> return new ImmediateLoadingStrategy ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> SelectionStrategy createSelectionStrategy ( ) { </a> 0
<a> return multiSelect ? new MultiSelectionStrategy ( ) : new SingleSelectionStrategy ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> Request getRequestForLoadData ( Session session ) { </a> 0
<a> if ( adapter == null ) { </a> 0
<a> throw new FacebookException ( "Can't issue requests until Fragment has been created." ) ; </a> 0
<a> } </a> 0
<a> String userToFetch = ( userId != null ) ? userId : "me" ; </a> 0
<a> return createRequest ( userToFetch , extraFields , session ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> String getDefaultTitleText ( ) { </a> 0
<a> return getString ( R . string . com_facebook_choose_friends ) ; </a> 0
<a> } </a> 0
<a> private Request createRequest ( String userID , Set < String > extraFields , Session session ) { </a> 0
<a> Request request = Request . newGraphPathRequest ( session , userID + "/friends" , null ) ; </a> 0
<a> Set < String > fields = new HashSet < String > ( extraFields ) ; </a> 0
<a> String [ ] requiredFields = new String [ ] { </a> 0
<a> ID , </a> 0
<a> NAME </a> 0
<a> } ; </a> 0
<a> fields . addAll ( Arrays . asList ( requiredFields ) ) ; </a> 0
<a> String pictureField = adapter . getPictureFieldSpecifier ( ) ; </a> 0
<a> if ( pictureField != null ) { </a> 0
<a> fields . add ( pictureField ) ; </a> 0
<a> } </a> 0
<a> Bundle parameters = request . getParameters ( ) ; </a> 0
<a> parameters . putString ( "fields" , TextUtils . join ( "," , fields ) ) ; </a> 0
<a> request . setParameters ( parameters ) ; </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> private void setFriendPickerSettingsFromBundle ( Bundle inState ) { </a> 0
<a> if ( inState != null ) { </a> 0
<a> if ( inState . containsKey ( USER_ID_BUNDLE_KEY ) ) { </a> 0
<a> setUserId ( inState . getString ( USER_ID_BUNDLE_KEY ) ) ; </a> 0
<a> } </a> 0
<a> setMultiSelect ( inState . getBoolean ( MULTI_SELECT_BUNDLE_KEY , multiSelect ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class ImmediateLoadingStrategy extends LoadingStrategy { </a> 0
<a> @ Override </a> 0
<a> protected void onLoadFinished ( GraphObjectPagingLoader < GraphUser > loader , </a> 0
<a> SimpleGraphObjectCursor < GraphUser > data ) { </a> 0
<a> super . onLoadFinished ( loader , data ) ; </a> 0
<a> if ( data == null || loader . isLoading ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( data . areMoreObjectsAvailable ( ) ) { </a> 0
<a> followNextLink ( ) ; </a> 0
<a> } else { </a> 0
<a> hideActivityCircle ( ) ; </a> 0
<a> if ( data . isFromCache ( ) ) { </a> 0
<a> loader . refreshOriginalRequest ( data . getCount ( ) == 0 ? CACHED_RESULT_REFRESH_DELAY : 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void followNextLink ( ) { </a> 0
<a> displayActivityCircle ( ) ; </a> 0
<a> loader . followNextLink ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . view . ViewStub ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . net . MalformedURLException ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . text . Collator ; </a> 0
<a> import java . util . * ; </a> 0
<a> class GraphObjectAdapter < T extends GraphObject > extends BaseAdapter implements SectionIndexer { </a> 0
<a> private static final int DISPLAY_SECTIONS_THRESHOLD = 1 ; </a> 0
<a> private static final int HEADER_VIEW_TYPE = 0 ; </a> 0
<a> private static final int GRAPH_OBJECT_VIEW_TYPE = 1 ; </a> 0
<a> private static final int ACTIVITY_CIRCLE_VIEW_TYPE = 2 ; </a> 0
<a> private static final int MAX_PREFETCHED_PICTURES = 20 ; </a> 0
<a> private static final String ID = "id" ; </a> 0
<a> private static final String NAME = "name" ; </a> 0
<a> private static final String PICTURE = "picture" ; </a> 0
<a> private final Map < String , ImageRequest > pendingRequests = new HashMap < String , ImageRequest > ( ) ; </a> 0
<a> private final LayoutInflater inflater ; </a> 0
<a> private List < String > sectionKeys = new ArrayList < String > ( ) ; </a> 0
<a> private Map < String , ArrayList < T > > graphObjectsBySection = new HashMap < String , ArrayList < T > > ( ) ; </a> 0
<a> private Map < String , T > graphObjectsById = new HashMap < String , T > ( ) ; </a> 0
<a> private boolean displaySections ; </a> 0
<a> private List < String > sortFields ; </a> 0
<a> private String groupByField ; </a> 0
<a> private boolean showPicture ; </a> 0
<a> private boolean showCheckbox ; </a> 0
<a> private Filter < T > filter ; </a> 0
<a> private DataNeededListener dataNeededListener ; </a> 0
<a> private GraphObjectCursor < T > cursor ; </a> 0
<a> private Context context ; </a> 0
<a> private Map < String , ImageResponse > prefetchedPictureCache = new HashMap < String , ImageResponse > ( ) ; </a> 0
<a> private ArrayList < String > prefetchedProfilePictureIds = new ArrayList < String > ( ) ; </a> 0
<a> public interface DataNeededListener { </a> 0
<a> public void onDataNeeded ( ) ; </a> 0
<a> } </a> 0
<a> public static class SectionAndItem < T extends GraphObject > { </a> 0
<a> public String sectionKey ; </a> 0
<a> public T graphObject ; </a> 0
<a> public enum Type { </a> 0
<a> GRAPH_OBJECT , </a> 0
<a> SECTION_HEADER , </a> 0
<a> ACTIVITY_CIRCLE </a> 0
<a> } </a> 0
<a> public SectionAndItem ( String sectionKey , T graphObject ) { </a> 0
<a> this . sectionKey = sectionKey ; </a> 0
<a> this . graphObject = graphObject ; </a> 0
<a> } </a> 0
<a> public Type getType ( ) { </a> 0
<a> if ( sectionKey == null ) { </a> 0
<a> return Type . ACTIVITY_CIRCLE ; </a> 0
<a> } else if ( graphObject == null ) { </a> 0
<a> return Type . SECTION_HEADER ; </a> 0
<a> } else { </a> 0
<a> return Type . GRAPH_OBJECT ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> interface Filter < T > { </a> 0
<a> boolean includeItem ( T graphObject ) ; </a> 0
<a> } </a> 0
<a> public GraphObjectAdapter ( Context context ) { </a> 0
<a> this . context = context ; </a> 0
<a> this . inflater = LayoutInflater . from ( context ) ; </a> 0
<a> } </a> 0
<a> public List < String > getSortFields ( ) { </a> 0
<a> return sortFields ; </a> 0
<a> } </a> 0
<a> public void setSortFields ( List < String > sortFields ) { </a> 0
<a> this . sortFields = sortFields ; </a> 0
<a> } </a> 0
<a> public String getGroupByField ( ) { </a> 0
<a> return groupByField ; </a> 0
<a> } </a> 0
<a> public void setGroupByField ( String groupByField ) { </a> 0
<a> this . groupByField = groupByField ; </a> 0
<a> } </a> 0
<a> public boolean getShowPicture ( ) { </a> 0
<a> return showPicture ; </a> 0
<a> } </a> 0
<a> public void setShowPicture ( boolean showPicture ) { </a> 0
<a> this . showPicture = showPicture ; </a> 0
<a> } </a> 0
<a> public boolean getShowCheckbox ( ) { </a> 0
<a> return showCheckbox ; </a> 0
<a> } </a> 0
<a> public void setShowCheckbox ( boolean showCheckbox ) { </a> 0
<a> this . showCheckbox = showCheckbox ; </a> 0
<a> } </a> 0
<a> public DataNeededListener getDataNeededListener ( ) { </a> 0
<a> return dataNeededListener ; </a> 0
<a> } </a> 0
<a> public void setDataNeededListener ( DataNeededListener dataNeededListener ) { </a> 0
<a> this . dataNeededListener = dataNeededListener ; </a> 0
<a> } </a> 0
<a> public GraphObjectCursor < T > getCursor ( ) { </a> 0
<a> return cursor ; </a> 0
<a> } </a> 0
<a> public boolean changeCursor ( GraphObjectCursor < T > cursor ) { </a> 0
<a> if ( this . cursor == cursor ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( this . cursor != null ) { </a> 0
<a> this . cursor . close ( ) ; </a> 0
<a> } </a> 0
<a> this . cursor = cursor ; </a> 0
<a> rebuildAndNotify ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public void rebuildAndNotify ( ) { </a> 0
<a> rebuildSections ( ) ; </a> 0
<a> notifyDataSetChanged ( ) ; </a> 0
<a> } </a> 0
<a> public void prioritizeViewRange ( int firstVisibleItem , int lastVisibleItem , int prefetchBuffer ) { </a> 0
<a> if ( lastVisibleItem < firstVisibleItem ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> for ( int i = lastVisibleItem ; i >= 0 ; i -- ) { </a> 0
<a> SectionAndItem < T > sectionAndItem = getSectionAndItem ( i ) ; </a> 0
<a> if ( sectionAndItem . graphObject != null ) { </a> 0
<a> String id = getIdOfGraphObject ( sectionAndItem . graphObject ) ; </a> 0
<a> ImageRequest request = pendingRequests . get ( id ) ; </a> 0
<a> if ( request != null ) { </a> 0
<a> ImageDownloader . prioritizeRequest ( request ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int start = Math . max ( 0 , firstVisibleItem - prefetchBuffer ) ; </a> 0
<a> int end = Math . min ( lastVisibleItem + prefetchBuffer , getCount ( ) - 1 ) ; </a> 0
<a> ArrayList < T > graphObjectsToPrefetchPicturesFor = new ArrayList < T > ( ) ; </a> 0
<a> for ( int i = start ; i < firstVisibleItem ; ++ i ) { </a> 0
<a> SectionAndItem < T > sectionAndItem = getSectionAndItem ( i ) ; </a> 0
<a> if ( sectionAndItem . graphObject != null ) { </a> 0
<a> graphObjectsToPrefetchPicturesFor . add ( sectionAndItem . graphObject ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( int i = lastVisibleItem + 1 ; i <= end ; ++ i ) { </a> 0
<a> SectionAndItem < T > sectionAndItem = getSectionAndItem ( i ) ; </a> 0
<a> if ( sectionAndItem . graphObject != null ) { </a> 0
<a> graphObjectsToPrefetchPicturesFor . add ( sectionAndItem . graphObject ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> for ( T graphObject : graphObjectsToPrefetchPicturesFor ) { </a> 0
<a> URL url = getPictureUrlOfGraphObject ( graphObject ) ; </a> 0
<a> final String id = getIdOfGraphObject ( graphObject ) ; </a> 0
<a> boolean alreadyPrefetching = prefetchedProfilePictureIds . remove ( id ) ; </a> 0
<a> prefetchedProfilePictureIds . add ( id ) ; </a> 0
<a> if ( ! alreadyPrefetching ) { </a> 0
<a> downloadProfilePicture ( id , url , null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected String getSectionKeyOfGraphObject ( T graphObject ) { </a> 0
<a> String result = null ; </a> 0
<a> if ( groupByField != null ) { </a> 0
<a> result = ( String ) graphObject . getProperty ( groupByField ) ; </a> 0
<a> if ( result != null && result . length ( ) > 0 ) { </a> 0
<a> result = result . substring ( 0 , 1 ) . toUpperCase ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return ( result != null ) ? result : "" ; </a> 0
<a> } </a> 0
<a> protected CharSequence getTitleOfGraphObject ( T graphObject ) { </a> 0
<a> return ( String ) graphObject . getProperty ( NAME ) ; </a> 0
<a> } </a> 0
<a> protected CharSequence getSubTitleOfGraphObject ( T graphObject ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected URL getPictureUrlOfGraphObject ( T graphObject ) { </a> 0
<a> String url = null ; </a> 0
<a> Object o = graphObject . getProperty ( PICTURE ) ; </a> 0
<a> if ( o instanceof String ) { </a> 0
<a> url = ( String ) o ; </a> 0
<a> } else if ( o instanceof JSONObject ) { </a> 0
<a> ItemPicture itemPicture = GraphObject . Factory . create ( ( JSONObject ) o ) . cast ( ItemPicture . class ) ; </a> 0
<a> ItemPictureData data = itemPicture . getData ( ) ; </a> 0
<a> if ( data != null ) { </a> 0
<a> url = data . getUrl ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( url != null ) { </a> 0
<a> try { </a> 0
<a> return new URL ( url ) ; </a> 0
<a> } catch ( MalformedURLException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> protected View getSectionHeaderView ( String sectionHeader , View convertView , ViewGroup parent ) { </a> 0
<a> TextView result = ( TextView ) convertView ; </a> 0
<a> if ( result == null ) { </a> 0
<a> result = ( TextView ) inflater . inflate ( R . layout . com_facebook_picker_list_section_header , null ) ; </a> 0
<a> } </a> 0
<a> result . setText ( sectionHeader ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> protected View getGraphObjectView ( T graphObject , View convertView , ViewGroup parent ) { </a> 0
<a> View result = convertView ; </a> 0
<a> if ( result == null ) { </a> 0
<a> result = createGraphObjectView ( graphObject , convertView ) ; </a> 0
<a> } </a> 0
<a> populateGraphObjectView ( result , graphObject ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> private View getActivityCircleView ( View convertView , ViewGroup parent ) { </a> 0
<a> View result = convertView ; </a> 0
<a> if ( result == null ) { </a> 0
<a> result = inflater . inflate ( R . layout . com_facebook_picker_activity_circle_row , null ) ; </a> 0
<a> } </a> 0
<a> ProgressBar activityCircle = ( ProgressBar ) result . findViewById ( R . id . com_facebook_picker_row_activity_circle ) ; </a> 0
<a> activityCircle . setVisibility ( View . VISIBLE ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> protected int getGraphObjectRowLayoutId ( T graphObject ) { </a> 0
<a> return R . layout . com_facebook_picker_list_row ; </a> 0
<a> } </a> 0
<a> protected int getDefaultPicture ( ) { </a> 0
<a> return R . drawable . com_facebook_profile_default_icon ; </a> 0
<a> } </a> 0
<a> protected View createGraphObjectView ( T graphObject , View convertView ) { </a> 0
<a> View result = inflater . inflate ( getGraphObjectRowLayoutId ( graphObject ) , null ) ; </a> 0
<a> ViewStub checkboxStub = ( ViewStub ) result . findViewById ( R . id . com_facebook_picker_checkbox_stub ) ; </a> 0
<a> if ( checkboxStub != null ) { </a> 0
<a> if ( ! getShowCheckbox ( ) ) { </a> 0
<a> checkboxStub . setVisibility ( View . GONE ) ; </a> 0
<a> } else { </a> 0
<a> CheckBox checkBox = ( CheckBox ) checkboxStub . inflate ( ) ; </a> 0
<a> updateCheckboxState ( checkBox , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> ViewStub profilePicStub = ( ViewStub ) result . findViewById ( R . id . com_facebook_picker_profile_pic_stub ) ; </a> 0
<a> if ( ! getShowPicture ( ) ) { </a> 0
<a> profilePicStub . setVisibility ( View . GONE ) ; </a> 0
<a> } else { </a> 0
<a> ImageView imageView = ( ImageView ) profilePicStub . inflate ( ) ; </a> 0
<a> imageView . setVisibility ( View . VISIBLE ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> protected void populateGraphObjectView ( View view , T graphObject ) { </a> 0
<a> String id = getIdOfGraphObject ( graphObject ) ; </a> 0
<a> view . setTag ( id ) ; </a> 0
<a> CharSequence title = getTitleOfGraphObject ( graphObject ) ; </a> 0
<a> TextView titleView = ( TextView ) view . findViewById ( R . id . com_facebook_picker_title ) ; </a> 0
<a> if ( titleView != null ) { </a> 0
<a> titleView . setText ( title , TextView . BufferType . SPANNABLE ) ; </a> 0
<a> } </a> 0
<a> CharSequence subtitle = getSubTitleOfGraphObject ( graphObject ) ; </a> 0
<a> TextView subtitleView = ( TextView ) view . findViewById ( R . id . picker_subtitle ) ; </a> 0
<a> if ( subtitleView != null ) { </a> 0
<a> if ( subtitle != null ) { </a> 0
<a> subtitleView . setText ( subtitle , TextView . BufferType . SPANNABLE ) ; </a> 0
<a> subtitleView . setVisibility ( View . VISIBLE ) ; </a> 0
<a> } else { </a> 0
<a> subtitleView . setVisibility ( View . GONE ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( getShowCheckbox ( ) ) { </a> 0
<a> CheckBox checkBox = ( CheckBox ) view . findViewById ( R . id . com_facebook_picker_checkbox ) ; </a> 0
<a> updateCheckboxState ( checkBox , isGraphObjectSelected ( id ) ) ; </a> 0
<a> } </a> 0
<a> if ( getShowPicture ( ) ) { </a> 0
<a> URL pictureURL = getPictureUrlOfGraphObject ( graphObject ) ; </a> 0
<a> if ( pictureURL != null ) { </a> 0
<a> ImageView profilePic = ( ImageView ) view . findViewById ( R . id . com_facebook_picker_image ) ; </a> 0
<a> if ( prefetchedPictureCache . containsKey ( id ) ) { </a> 0
<a> ImageResponse response = prefetchedPictureCache . get ( id ) ; </a> 0
<a> profilePic . setImageBitmap ( response . getBitmap ( ) ) ; </a> 0
<a> profilePic . setTag ( response . getRequest ( ) . getImageUrl ( ) ) ; </a> 0
<a> } else { </a> 0
<a> downloadProfilePicture ( id , pictureURL , profilePic ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> String getIdOfGraphObject ( T graphObject ) { </a> 0
<a> if ( graphObject . asMap ( ) . containsKey ( ID ) ) { </a> 0
<a> Object obj = graphObject . getProperty ( ID ) ; </a> 0
<a> if ( obj instanceof String ) { </a> 0
<a> return ( String ) obj ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> throw new FacebookException ( "Received an object without an ID." ) ; </a> 0
<a> } </a> 0
<a> boolean filterIncludesItem ( T graphObject ) { </a> 0
<a> return filter == null || filter . includeItem ( graphObject ) ; </a> 0
<a> } </a> 0
<a> Filter < T > getFilter ( ) { </a> 0
<a> return filter ; </a> 0
<a> } </a> 0
<a> void setFilter ( Filter < T > filter ) { </a> 0
<a> this . filter = filter ; </a> 0
<a> } </a> 0
<a> boolean isGraphObjectSelected ( String graphObjectId ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> void updateCheckboxState ( CheckBox checkBox , boolean graphObjectSelected ) { </a> 0
<a> } </a> 0
<a> String getPictureFieldSpecifier ( ) { </a> 0
<a> View view = createGraphObjectView ( null , null ) ; </a> 0
<a> ImageView picture = ( ImageView ) view . findViewById ( R . id . com_facebook_picker_image ) ; </a> 0
<a> if ( picture == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> ViewGroup . LayoutParams layoutParams = picture . getLayoutParams ( ) ; </a> 0
<a> return String . format ( "picture.height(%d).width(%d)" , layoutParams . height , layoutParams . width ) ; </a> 0
<a> } </a> 0
<a> private boolean shouldShowActivityCircleCell ( ) { </a> 0
<a> return ( cursor != null ) && cursor . areMoreObjectsAvailable ( ) && ( dataNeededListener != null ) && ! isEmpty ( ) ; </a> 0
<a> } </a> 0
<a> private void rebuildSections ( ) { </a> 0
<a> sectionKeys = new ArrayList < String > ( ) ; </a> 0
<a> graphObjectsBySection = new HashMap < String , ArrayList < T > > ( ) ; </a> 0
<a> graphObjectsById = new HashMap < String , T > ( ) ; </a> 0
<a> displaySections = false ; </a> 0
<a> if ( cursor == null || cursor . getCount ( ) == 0 ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> int objectsAdded = 0 ; </a> 0
<a> cursor . moveToFirst ( ) ; </a> 0
<a> do { </a> 0
<a> T graphObject = cursor . getGraphObject ( ) ; </a> 0
<a> if ( ! filterIncludesItem ( graphObject ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> objectsAdded ++ ; </a> 0
<a> String sectionKeyOfItem = getSectionKeyOfGraphObject ( graphObject ) ; </a> 0
<a> if ( ! graphObjectsBySection . containsKey ( sectionKeyOfItem ) ) { </a> 0
<a> sectionKeys . add ( sectionKeyOfItem ) ; </a> 0
<a> graphObjectsBySection . put ( sectionKeyOfItem , new ArrayList < T > ( ) ) ; </a> 0
<a> } </a> 0
<a> List < T > section = graphObjectsBySection . get ( sectionKeyOfItem ) ; </a> 0
<a> section . add ( graphObject ) ; </a> 0
<a> graphObjectsById . put ( getIdOfGraphObject ( graphObject ) , graphObject ) ; </a> 0
<a> } while ( cursor . moveToNext ( ) ) ; </a> 0
<a> if ( sortFields != null ) { </a> 0
<a> final Collator collator = Collator . getInstance ( ) ; </a> 0
<a> for ( List < T > section : graphObjectsBySection . values ( ) ) { </a> 0
<a> Collections . sort ( section , new Comparator < GraphObject > ( ) { </a> 0
<a> @ Override </a> 0
<a> public int compare ( GraphObject a , GraphObject b ) { </a> 0
<a> return compareGraphObjects ( a , b , sortFields , collator ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Collections . sort ( sectionKeys , Collator . getInstance ( ) ) ; </a> 0
<a> displaySections = sectionKeys . size ( ) > 1 && objectsAdded > DISPLAY_SECTIONS_THRESHOLD ; </a> 0
<a> } </a> 0
<a> SectionAndItem < T > getSectionAndItem ( int position ) { </a> 0
<a> if ( sectionKeys . size ( ) == 0 ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String sectionKey = null ; </a> 0
<a> T graphObject = null ; </a> 0
<a> if ( ! displaySections ) { </a> 0
<a> sectionKey = sectionKeys . get ( 0 ) ; </a> 0
<a> List < T > section = graphObjectsBySection . get ( sectionKey ) ; </a> 0
<a> if ( position >= 0 && position < section . size ( ) ) { </a> 0
<a> graphObject = graphObjectsBySection . get ( sectionKey ) . get ( position ) ; </a> 0
<a> } else { </a> 0
<a> assert dataNeededListener != null && cursor . areMoreObjectsAvailable ( ) ; </a> 0
<a> return new SectionAndItem < T > ( null , null ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> for ( String key : sectionKeys ) { </a> 0
<a> if ( position -- == 0 ) { </a> 0
<a> sectionKey = key ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> List < T > section = graphObjectsBySection . get ( key ) ; </a> 0
<a> if ( position < section . size ( ) ) { </a> 0
<a> sectionKey = key ; </a> 0
<a> graphObject = section . get ( position ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> position -= section . size ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( sectionKey != null ) { </a> 0
<a> return new SectionAndItem < T > ( sectionKey , graphObject ) ; </a> 0
<a> } else { </a> 0
<a> throw new IndexOutOfBoundsException ( "position" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int getPosition ( String sectionKey , T graphObject ) { </a> 0
<a> int position = 0 ; </a> 0
<a> boolean found = false ; </a> 0
<a> for ( String key : sectionKeys ) { </a> 0
<a> if ( displaySections ) { </a> 0
<a> position ++ ; </a> 0
<a> } </a> 0
<a> if ( key . equals ( sectionKey ) ) { </a> 0
<a> found = true ; </a> 0
<a> break ; </a> 0
<a> } else { </a> 0
<a> position += graphObjectsBySection . get ( key ) . size ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! found ) { </a> 0
<a> return - 1 ; </a> 0
<a> } else if ( graphObject == null ) { </a> 0
<a> return position - ( displaySections ? 1 : 0 ) ; </a> 0
<a> } </a> 0
<a> for ( T t : graphObjectsBySection . get ( sectionKey ) ) { </a> 0
<a> if ( GraphObject . Factory . hasSameId ( t , graphObject ) ) { </a> 0
<a> return position ; </a> 0
<a> } </a> 0
<a> position ++ ; </a> 0
<a> } </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isEmpty ( ) { </a> 0
<a> return sectionKeys . size ( ) == 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getCount ( ) { </a> 0
<a> if ( sectionKeys . size ( ) == 0 ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> int count = ( displaySections ) ? sectionKeys . size ( ) : 0 ; </a> 0
<a> for ( List < T > section : graphObjectsBySection . values ( ) ) { </a> 0
<a> count += section . size ( ) ; </a> 0
<a> } </a> 0
<a> if ( shouldShowActivityCircleCell ( ) ) { </a> 0
<a> ++ count ; </a> 0
<a> } </a> 0
<a> return count ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean areAllItemsEnabled ( ) { </a> 0
<a> return displaySections ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean hasStableIds ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isEnabled ( int position ) { </a> 0
<a> SectionAndItem < T > sectionAndItem = getSectionAndItem ( position ) ; </a> 0
<a> return sectionAndItem . getType ( ) == SectionAndItem . Type . GRAPH_OBJECT ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object getItem ( int position ) { </a> 0
<a> SectionAndItem < T > sectionAndItem = getSectionAndItem ( position ) ; </a> 0
<a> return ( sectionAndItem . getType ( ) == SectionAndItem . Type . GRAPH_OBJECT ) ? sectionAndItem . graphObject : null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getItemId ( int position ) { </a> 0
<a> SectionAndItem < T > sectionAndItem = getSectionAndItem ( position ) ; </a> 0
<a> if ( sectionAndItem != null && sectionAndItem . graphObject != null ) { </a> 0
<a> String id = getIdOfGraphObject ( sectionAndItem . graphObject ) ; </a> 0
<a> if ( id != null ) { </a> 0
<a> return Long . parseLong ( id ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getViewTypeCount ( ) { </a> 0
<a> return 3 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getItemViewType ( int position ) { </a> 0
<a> SectionAndItem < T > sectionAndItem = getSectionAndItem ( position ) ; </a> 0
<a> switch ( sectionAndItem . getType ( ) ) { </a> 0
<a> case SECTION_HEADER : </a> 0
<a> return HEADER_VIEW_TYPE ; </a> 0
<a> case GRAPH_OBJECT : </a> 0
<a> return GRAPH_OBJECT_VIEW_TYPE ; </a> 0
<a> case ACTIVITY_CIRCLE : </a> 0
<a> return ACTIVITY_CIRCLE_VIEW_TYPE ; </a> 0
<a> default : </a> 0
<a> throw new FacebookException ( "Unexpected type of section and item." ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View getView ( int position , View convertView , ViewGroup parent ) { </a> 0
<a> SectionAndItem < T > sectionAndItem = getSectionAndItem ( position ) ; </a> 0
<a> switch ( sectionAndItem . getType ( ) ) { </a> 0
<a> case SECTION_HEADER : </a> 0
<a> return getSectionHeaderView ( sectionAndItem . sectionKey , convertView , parent ) ; </a> 0
<a> case GRAPH_OBJECT : </a> 0
<a> return getGraphObjectView ( sectionAndItem . graphObject , convertView , parent ) ; </a> 0
<a> case ACTIVITY_CIRCLE : </a> 0
<a> assert cursor . areMoreObjectsAvailable ( ) && ( dataNeededListener != null ) ; </a> 0
<a> dataNeededListener . onDataNeeded ( ) ; </a> 0
<a> return getActivityCircleView ( convertView , parent ) ; </a> 0
<a> default : </a> 0
<a> throw new FacebookException ( "Unexpected type of section and item." ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object [ ] getSections ( ) { </a> 0
<a> if ( displaySections ) { </a> 0
<a> return sectionKeys . toArray ( ) ; </a> 0
<a> } else { </a> 0
<a> return new Object [ 0 ] ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getPositionForSection ( int section ) { </a> 0
<a> if ( displaySections ) { </a> 0
<a> section = Math . max ( 0 , Math . min ( section , sectionKeys . size ( ) - 1 ) ) ; </a> 0
<a> if ( section < sectionKeys . size ( ) ) { </a> 0
<a> return getPosition ( sectionKeys . get ( section ) , null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getSectionForPosition ( int position ) { </a> 0
<a> SectionAndItem < T > sectionAndItem = getSectionAndItem ( position ) ; </a> 0
<a> if ( sectionAndItem != null && </a> 0
<a> sectionAndItem . getType ( ) != SectionAndItem . Type . ACTIVITY_CIRCLE ) { </a> 0
<a> return Math . max ( 0 , Math . min ( sectionKeys . indexOf ( sectionAndItem . sectionKey ) , sectionKeys . size ( ) - 1 ) ) ; </a> 0
<a> } </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> public List < T > getGraphObjectsById ( Collection < String > ids ) { </a> 0
<a> Set < String > idSet = new HashSet < String > ( ) ; </a> 0
<a> idSet . addAll ( ids ) ; </a> 0
<a> ArrayList < T > result = new ArrayList < T > ( idSet . size ( ) ) ; </a> 0
<a> for ( String id : idSet ) { </a> 0
<a> T graphObject = graphObjectsById . get ( id ) ; </a> 0
<a> if ( graphObject != null ) { </a> 0
<a> result . add ( graphObject ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> private void downloadProfilePicture ( final String profileId , URL pictureURL , final ImageView imageView ) { </a> 0
<a> if ( pictureURL == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> boolean prefetching = imageView == null ; </a> 0
<a> if ( prefetching || ! pictureURL . equals ( imageView . getTag ( ) ) ) { </a> 0
<a> if ( ! prefetching ) { </a> 0
<a> imageView . setTag ( profileId ) ; </a> 0
<a> imageView . setImageResource ( getDefaultPicture ( ) ) ; </a> 0
<a> } </a> 0
<a> ImageRequest . Builder builder = new ImageRequest . Builder ( context . getApplicationContext ( ) , pictureURL ) </a> 0
<a> . setCallerTag ( this ) </a> 0
<a> . setCallback ( </a> 0
<a> new ImageRequest . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( ImageResponse response ) { </a> 0
<a> processImageResponse ( response , profileId , imageView ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> ImageRequest newRequest = builder . build ( ) ; </a> 0
<a> pendingRequests . put ( profileId , newRequest ) ; </a> 0
<a> ImageDownloader . downloadAsync ( newRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void processImageResponse ( ImageResponse response , String graphObjectId , ImageView imageView ) { </a> 0
<a> pendingRequests . remove ( graphObjectId ) ; </a> 0
<a> if ( imageView == null ) { </a> 0
<a> if ( response . getBitmap ( ) != null ) { </a> 0
<a> if ( prefetchedPictureCache . size ( ) >= MAX_PREFETCHED_PICTURES ) { </a> 0
<a> String oldestId = prefetchedProfilePictureIds . remove ( 0 ) ; </a> 0
<a> prefetchedPictureCache . remove ( oldestId ) ; </a> 0
<a> } </a> 0
<a> prefetchedPictureCache . put ( graphObjectId , response ) ; </a> 0
<a> } </a> 0
<a> } else if ( imageView != null && graphObjectId . equals ( imageView . getTag ( ) ) ) { </a> 0
<a> Exception error = response . getError ( ) ; </a> 0
<a> Bitmap bitmap = response . getBitmap ( ) ; </a> 0
<a> if ( error == null && bitmap != null ) { </a> 0
<a> imageView . setImageBitmap ( bitmap ) ; </a> 0
<a> imageView . setTag ( response . getRequest ( ) . getImageUrl ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static int compareGraphObjects ( GraphObject a , GraphObject b , Collection < String > sortFields , </a> 0
<a> Collator collator ) { </a> 0
<a> for ( String sortField : sortFields ) { </a> 0
<a> String sa = ( String ) a . getProperty ( sortField ) ; </a> 0
<a> String sb = ( String ) b . getProperty ( sortField ) ; </a> 0
<a> if ( sa != null && sb != null ) { </a> 0
<a> int result = collator . compare ( sa , sb ) ; </a> 0
<a> if ( result != 0 ) { </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> } else if ( ! ( sa == null && sb == null ) ) { </a> 0
<a> return ( sa == null ) ? - 1 : 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> private interface ItemPicture extends GraphObject { </a> 0
<a> ItemPictureData getData ( ) ; </a> 0
<a> } </a> 0
<a> private interface ItemPictureData extends GraphObject { </a> 0
<a> String getUrl ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> interface GraphObjectCursor < T extends GraphObject > { </a> 0
<a> boolean isFromCache ( ) ; </a> 0
<a> boolean areMoreObjectsAvailable ( ) ; </a> 0
<a> int getCount ( ) ; </a> 0
<a> int getPosition ( ) ; </a> 0
<a> boolean move ( int offset ) ; </a> 0
<a> boolean moveToPosition ( int position ) ; </a> 0
<a> boolean moveToFirst ( ) ; </a> 0
<a> boolean moveToLast ( ) ; </a> 0
<a> boolean moveToNext ( ) ; </a> 0
<a> boolean moveToPrevious ( ) ; </a> 0
<a> boolean isFirst ( ) ; </a> 0
<a> boolean isLast ( ) ; </a> 0
<a> boolean isBeforeFirst ( ) ; </a> 0
<a> boolean isAfterLast ( ) ; </a> 0
<a> T getGraphObject ( ) ; </a> 0
<a> void close ( ) ; </a> 0
<a> boolean isClosed ( ) ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . support . v4 . content . Loader ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphObjectList ; </a> 0
<a> import com . facebook . internal . CacheableRequestBatch ; </a> 0
<a> class GraphObjectPagingLoader < T extends GraphObject > extends Loader < SimpleGraphObjectCursor < T > > { </a> 0
<a> private final Class < T > graphObjectClass ; </a> 0
<a> private boolean skipRoundtripIfCached ; </a> 0
<a> private Request originalRequest ; </a> 0
<a> private Request currentRequest ; </a> 0
<a> private Request nextRequest ; </a> 0
<a> private OnErrorListener onErrorListener ; </a> 0
<a> private SimpleGraphObjectCursor < T > cursor ; </a> 0
<a> private boolean appendResults = false ; </a> 0
<a> private boolean loading = false ; </a> 0
<a> public interface OnErrorListener { </a> 0
<a> public void onError ( FacebookException error , GraphObjectPagingLoader < ? > loader ) ; </a> 0
<a> } </a> 0
<a> public GraphObjectPagingLoader ( Context context , Class < T > graphObjectClass ) { </a> 0
<a> super ( context ) ; </a> 0
<a> this . graphObjectClass = graphObjectClass ; </a> 0
<a> } </a> 0
<a> public OnErrorListener getOnErrorListener ( ) { </a> 0
<a> return onErrorListener ; </a> 0
<a> } </a> 0
<a> public void setOnErrorListener ( OnErrorListener listener ) { </a> 0
<a> this . onErrorListener = listener ; </a> 0
<a> } </a> 0
<a> public SimpleGraphObjectCursor < T > getCursor ( ) { </a> 0
<a> return cursor ; </a> 0
<a> } </a> 0
<a> public void clearResults ( ) { </a> 0
<a> nextRequest = null ; </a> 0
<a> originalRequest = null ; </a> 0
<a> currentRequest = null ; </a> 0
<a> deliverResult ( null ) ; </a> 0
<a> } </a> 0
<a> public boolean isLoading ( ) { </a> 0
<a> return loading ; </a> 0
<a> } </a> 0
<a> public void startLoading ( Request request , boolean skipRoundtripIfCached ) { </a> 0
<a> originalRequest = request ; </a> 0
<a> startLoading ( request , skipRoundtripIfCached , 0 ) ; </a> 0
<a> } </a> 0
<a> public void refreshOriginalRequest ( long afterDelay ) { </a> 0
<a> if ( originalRequest == null ) { </a> 0
<a> throw new FacebookException ( </a> 0
<a> "refreshOriginalRequest may not be called until after startLoading has been called." ) ; </a> 0
<a> } </a> 0
<a> startLoading ( originalRequest , false , afterDelay ) ; </a> 0
<a> } </a> 0
<a> public void followNextLink ( ) { </a> 0
<a> if ( nextRequest != null ) { </a> 0
<a> appendResults = true ; </a> 0
<a> currentRequest = nextRequest ; </a> 0
<a> currentRequest . setCallback ( new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> requestCompleted ( response ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> loading = true ; </a> 0
<a> CacheableRequestBatch batch = putRequestIntoBatch ( currentRequest , skipRoundtripIfCached ) ; </a> 0
<a> Request . executeBatchAsync ( batch ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void deliverResult ( SimpleGraphObjectCursor < T > cursor ) { </a> 0
<a> SimpleGraphObjectCursor < T > oldCursor = this . cursor ; </a> 0
<a> this . cursor = cursor ; </a> 0
<a> if ( isStarted ( ) ) { </a> 0
<a> super . deliverResult ( cursor ) ; </a> 0
<a> if ( oldCursor != null && oldCursor != cursor && ! oldCursor . isClosed ( ) ) { </a> 0
<a> oldCursor . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onStartLoading ( ) { </a> 0
<a> super . onStartLoading ( ) ; </a> 0
<a> if ( cursor != null ) { </a> 0
<a> deliverResult ( cursor ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void startLoading ( Request request , boolean skipRoundtripIfCached , long afterDelay ) { </a> 0
<a> this . skipRoundtripIfCached = skipRoundtripIfCached ; </a> 0
<a> appendResults = false ; </a> 0
<a> nextRequest = null ; </a> 0
<a> currentRequest = request ; </a> 0
<a> currentRequest . setCallback ( new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> requestCompleted ( response ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> loading = true ; </a> 0
<a> final RequestBatch batch = putRequestIntoBatch ( request , skipRoundtripIfCached ) ; </a> 0
<a> Runnable r = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Request . executeBatchAsync ( batch ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> if ( afterDelay == 0 ) { </a> 0
<a> r . run ( ) ; </a> 0
<a> } else { </a> 0
<a> Handler handler = new Handler ( ) ; </a> 0
<a> handler . postDelayed ( r , afterDelay ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private CacheableRequestBatch putRequestIntoBatch ( Request request , boolean skipRoundtripIfCached ) { </a> 0
<a> CacheableRequestBatch batch = new CacheableRequestBatch ( request ) ; </a> 0
<a> batch . setForceRoundTrip ( ! skipRoundtripIfCached ) ; </a> 0
<a> return batch ; </a> 0
<a> } </a> 0
<a> private void requestCompleted ( Response response ) { </a> 0
<a> Request request = response . getRequest ( ) ; </a> 0
<a> if ( request != currentRequest ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> loading = false ; </a> 0
<a> currentRequest = null ; </a> 0
<a> FacebookRequestError requestError = response . getError ( ) ; </a> 0
<a> FacebookException exception = ( requestError == null ) ? null : requestError . getException ( ) ; </a> 0
<a> if ( response . getGraphObject ( ) == null && exception == null ) { </a> 0
<a> exception = new FacebookException ( "GraphObjectPagingLoader received neither a result nor an error." ) ; </a> 0
<a> } </a> 0
<a> if ( exception != null ) { </a> 0
<a> nextRequest = null ; </a> 0
<a> if ( onErrorListener != null ) { </a> 0
<a> onErrorListener . onError ( exception , this ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> addResults ( response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void addResults ( Response response ) { </a> 0
<a> SimpleGraphObjectCursor < T > cursorToModify = ( cursor == null || ! appendResults ) ? new SimpleGraphObjectCursor < T > ( ) : </a> 0
<a> new SimpleGraphObjectCursor < T > ( cursor ) ; </a> 0
<a> PagedResults result = response . getGraphObjectAs ( PagedResults . class ) ; </a> 0
<a> boolean fromCache = response . getIsFromCache ( ) ; </a> 0
<a> GraphObjectList < T > data = result . getData ( ) . castToListOf ( graphObjectClass ) ; </a> 0
<a> boolean haveData = data . size ( ) > 0 ; </a> 0
<a> if ( haveData ) { </a> 0
<a> nextRequest = response . getRequestForPagedResults ( Response . PagingDirection . NEXT ) ; </a> 0
<a> cursorToModify . addGraphObjects ( data , fromCache ) ; </a> 0
<a> cursorToModify . setMoreObjectsAvailable ( true ) ; </a> 0
<a> } </a> 0
<a> if ( ! haveData ) { </a> 0
<a> cursorToModify . setMoreObjectsAvailable ( false ) ; </a> 0
<a> cursorToModify . setFromCache ( fromCache ) ; </a> 0
<a> nextRequest = null ; </a> 0
<a> } </a> 0
<a> if ( ! fromCache ) { </a> 0
<a> skipRoundtripIfCached = false ; </a> 0
<a> } </a> 0
<a> deliverResult ( cursorToModify ) ; </a> 0
<a> } </a> 0
<a> interface PagedResults extends GraphObject { </a> 0
<a> GraphObjectList < GraphObject > getData ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . graphics . BitmapFactory ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import com . facebook . FacebookException ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . InputStreamReader ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . util . * ; </a> 0
<a> class ImageDownloader { </a> 0
<a> private static final int DOWNLOAD_QUEUE_MAX_CONCURRENT = WorkQueue . DEFAULT_MAX_CONCURRENT ; </a> 0
<a> private static final int CACHE_READ_QUEUE_MAX_CONCURRENT = 2 ; </a> 0
<a> private static final Handler handler = new Handler ( ) ; </a> 0
<a> private static WorkQueue downloadQueue = new WorkQueue ( DOWNLOAD_QUEUE_MAX_CONCURRENT ) ; </a> 0
<a> private static WorkQueue cacheReadQueue = new WorkQueue ( CACHE_READ_QUEUE_MAX_CONCURRENT ) ; </a> 0
<a> private static final Map < RequestKey , DownloaderContext > pendingRequests = new HashMap < RequestKey , DownloaderContext > ( ) ; </a> 0
<a> static void downloadAsync ( ImageRequest request ) { </a> 0
<a> if ( request == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> RequestKey key = new RequestKey ( request . getImageUrl ( ) , request . getCallerTag ( ) ) ; </a> 0
<a> synchronized ( pendingRequests ) { </a> 0
<a> DownloaderContext downloaderContext = pendingRequests . get ( key ) ; </a> 0
<a> if ( downloaderContext != null ) { </a> 0
<a> downloaderContext . request = request ; </a> 0
<a> downloaderContext . isCancelled = false ; </a> 0
<a> downloaderContext . workItem . moveToFront ( ) ; </a> 0
<a> } else { </a> 0
<a> enqueueCacheRead ( request , key , request . isCachedRedirectAllowed ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static boolean cancelRequest ( ImageRequest request ) { </a> 0
<a> boolean cancelled = false ; </a> 0
<a> RequestKey key = new RequestKey ( request . getImageUrl ( ) , request . getCallerTag ( ) ) ; </a> 0
<a> synchronized ( pendingRequests ) { </a> 0
<a> DownloaderContext downloaderContext = pendingRequests . get ( key ) ; </a> 0
<a> if ( downloaderContext != null ) { </a> 0
<a> cancelled = true ; </a> 0
<a> if ( downloaderContext . workItem . cancel ( ) ) { </a> 0
<a> pendingRequests . remove ( key ) ; </a> 0
<a> } else { </a> 0
<a> downloaderContext . isCancelled = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return cancelled ; </a> 0
<a> } </a> 0
<a> static void prioritizeRequest ( ImageRequest request ) { </a> 0
<a> RequestKey key = new RequestKey ( request . getImageUrl ( ) , request . getCallerTag ( ) ) ; </a> 0
<a> synchronized ( pendingRequests ) { </a> 0
<a> DownloaderContext downloaderContext = pendingRequests . get ( key ) ; </a> 0
<a> if ( downloaderContext != null ) { </a> 0
<a> downloaderContext . workItem . moveToFront ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void enqueueCacheRead ( ImageRequest request , RequestKey key , boolean allowCachedRedirects ) { </a> 0
<a> enqueueRequest ( </a> 0
<a> request , </a> 0
<a> key , </a> 0
<a> cacheReadQueue , </a> 0
<a> new CacheReadWorkItem ( request . getContext ( ) , key , allowCachedRedirects ) ) ; </a> 0
<a> } </a> 0
<a> private static void enqueueDownload ( ImageRequest request , RequestKey key ) { </a> 0
<a> enqueueRequest ( </a> 0
<a> request , </a> 0
<a> key , </a> 0
<a> downloadQueue , </a> 0
<a> new DownloadImageWorkItem ( request . getContext ( ) , key ) ) ; </a> 0
<a> } </a> 0
<a> private static void enqueueRequest ( </a> 0
<a> ImageRequest request , </a> 0
<a> RequestKey key , </a> 0
<a> WorkQueue workQueue , </a> 0
<a> Runnable workItem ) { </a> 0
<a> synchronized ( pendingRequests ) { </a> 0
<a> DownloaderContext downloaderContext = new DownloaderContext ( ) ; </a> 0
<a> downloaderContext . request = request ; </a> 0
<a> pendingRequests . put ( key , downloaderContext ) ; </a> 0
<a> downloaderContext . workItem = workQueue . addActiveWorkItem ( workItem ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void issueResponse ( </a> 0
<a> RequestKey key , </a> 0
<a> final Exception error , </a> 0
<a> final Bitmap bitmap , </a> 0
<a> final boolean isCachedRedirect ) { </a> 0
<a> DownloaderContext completedRequestContext = removePendingRequest ( key ) ; </a> 0
<a> if ( completedRequestContext != null && ! completedRequestContext . isCancelled ) { </a> 0
<a> final ImageRequest request = completedRequestContext . request ; </a> 0
<a> final ImageRequest . Callback callback = request . getCallback ( ) ; </a> 0
<a> if ( callback != null ) { </a> 0
<a> handler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> ImageResponse response = new ImageResponse ( </a> 0
<a> request , </a> 0
<a> error , </a> 0
<a> isCachedRedirect , </a> 0
<a> bitmap ) ; </a> 0
<a> callback . onCompleted ( response ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void readFromCache ( RequestKey key , Context context , boolean allowCachedRedirects ) { </a> 0
<a> InputStream cachedStream = null ; </a> 0
<a> boolean isCachedRedirect = false ; </a> 0
<a> if ( allowCachedRedirects ) { </a> 0
<a> URL redirectUrl = UrlRedirectCache . getRedirectedUrl ( context , key . url ) ; </a> 0
<a> if ( redirectUrl != null ) { </a> 0
<a> cachedStream = ImageResponseCache . getCachedImageStream ( redirectUrl , context ) ; </a> 0
<a> isCachedRedirect = cachedStream != null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! isCachedRedirect ) { </a> 0
<a> cachedStream = ImageResponseCache . getCachedImageStream ( key . url , context ) ; </a> 0
<a> } </a> 0
<a> if ( cachedStream != null ) { </a> 0
<a> Bitmap bitmap = BitmapFactory . decodeStream ( cachedStream ) ; </a> 0
<a> Utility . closeQuietly ( cachedStream ) ; </a> 0
<a> issueResponse ( key , null , bitmap , isCachedRedirect ) ; </a> 0
<a> } else { </a> 0
<a> DownloaderContext downloaderContext = removePendingRequest ( key ) ; </a> 0
<a> if ( downloaderContext != null && ! downloaderContext . isCancelled ) { </a> 0
<a> enqueueDownload ( downloaderContext . request , key ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void download ( RequestKey key , Context context ) { </a> 0
<a> HttpURLConnection connection = null ; </a> 0
<a> InputStream stream = null ; </a> 0
<a> Exception error = null ; </a> 0
<a> Bitmap bitmap = null ; </a> 0
<a> boolean issueResponse = true ; </a> 0
<a> try { </a> 0
<a> connection = ( HttpURLConnection ) key . url . openConnection ( ) ; </a> 0
<a> connection . setInstanceFollowRedirects ( false ) ; </a> 0
<a> switch ( connection . getResponseCode ( ) ) { </a> 0
<a> case HttpURLConnection . HTTP_MOVED_PERM : </a> 0
<a> case HttpURLConnection . HTTP_MOVED_TEMP : </a> 0
<a> issueResponse = false ; </a> 0
<a> String redirectLocation = connection . getHeaderField ( "location" ) ; </a> 0
<a> if ( ! Utility . isNullOrEmpty ( redirectLocation ) ) { </a> 0
<a> URL redirectUrl = new URL ( redirectLocation ) ; </a> 0
<a> UrlRedirectCache . cacheUrlRedirect ( context , key . url , redirectUrl ) ; </a> 0
<a> DownloaderContext downloaderContext = removePendingRequest ( key ) ; </a> 0
<a> if ( downloaderContext != null && ! downloaderContext . isCancelled ) { </a> 0
<a> enqueueCacheRead ( </a> 0
<a> downloaderContext . request , </a> 0
<a> new RequestKey ( redirectUrl , key . tag ) , </a> 0
<a> false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> case HttpURLConnection . HTTP_OK : </a> 0
<a> stream = ImageResponseCache . interceptAndCacheImageStream ( context , connection ) ; </a> 0
<a> bitmap = BitmapFactory . decodeStream ( stream ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> stream = connection . getErrorStream ( ) ; </a> 0
<a> InputStreamReader reader = new InputStreamReader ( stream ) ; </a> 0
<a> char [ ] buffer = new char [ 128 ] ; </a> 0
<a> int bufferLength ; </a> 0
<a> StringBuilder errorMessageBuilder = new StringBuilder ( ) ; </a> 1
<a> while ( ( bufferLength = reader . read ( buffer , 0 , buffer . length ) ) > 0 ) { </a> 0
<a> errorMessageBuilder . append ( buffer , 0 , bufferLength ) ; </a> 0
<a> } </a> 0
<a> Utility . closeQuietly ( reader ) ; </a> 0
<a> error = new FacebookException ( errorMessageBuilder . toString ( ) ) ; </a> 1
<a> break ; </a> 0
<a> } </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> error = e ; </a> 0
<a> } finally { </a> 0
<a> Utility . closeQuietly ( stream ) ; </a> 0
<a> Utility . disconnectQuietly ( connection ) ; </a> 0
<a> } </a> 0
<a> if ( issueResponse ) { </a> 0
<a> issueResponse ( key , error , bitmap , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static DownloaderContext removePendingRequest ( RequestKey key ) { </a> 0
<a> synchronized ( pendingRequests ) { </a> 0
<a> return pendingRequests . remove ( key ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class RequestKey { </a> 0
<a> private static final int HASH_SEED = 29 ; </a> 0
<a> private static final int HASH_MULTIPLIER = 37 ; </a> 0
<a> URL url ; </a> 0
<a> Object tag ; </a> 0
<a> RequestKey ( URL url , Object tag ) { </a> 0
<a> this . url = url ; </a> 0
<a> this . tag = tag ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> int result = HASH_SEED ; </a> 0
<a> result = ( result * HASH_MULTIPLIER ) + url . hashCode ( ) ; </a> 0
<a> result = ( result * HASH_MULTIPLIER ) + tag . hashCode ( ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object o ) { </a> 0
<a> boolean isEqual = false ; </a> 0
<a> if ( o != null && o instanceof RequestKey ) { </a> 0
<a> RequestKey compareTo = ( RequestKey ) o ; </a> 0
<a> isEqual = compareTo . url == url && compareTo . tag == tag ; </a> 0
<a> } </a> 0
<a> return isEqual ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class DownloaderContext { </a> 0
<a> WorkQueue . WorkItem workItem ; </a> 0
<a> ImageRequest request ; </a> 0
<a> boolean isCancelled ; </a> 0
<a> } </a> 0
<a> private static class CacheReadWorkItem implements Runnable { </a> 0
<a> private Context context ; </a> 0
<a> private RequestKey key ; </a> 0
<a> private boolean allowCachedRedirects ; </a> 0
<a> CacheReadWorkItem ( Context context , RequestKey key , boolean allowCachedRedirects ) { </a> 0
<a> this . context = context ; </a> 0
<a> this . key = key ; </a> 0
<a> this . allowCachedRedirects = allowCachedRedirects ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> readFromCache ( key , context , allowCachedRedirects ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class DownloadImageWorkItem implements Runnable { </a> 0
<a> private Context context ; </a> 0
<a> private RequestKey key ; </a> 0
<a> DownloadImageWorkItem ( Context context , RequestKey key ) { </a> 0
<a> this . context = context ; </a> 0
<a> this . key = key ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> download ( key , context ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import java . net . MalformedURLException ; </a> 0
<a> import java . net . URL ; </a> 0
<a> class ImageRequest { </a> 0
<a> interface Callback { </a> 0
<a> void onCompleted ( ImageResponse response ) ; </a> 0
<a> } </a> 0
<a> static final int UNSPECIFIED_DIMENSION = 0 ; </a> 0
<a> private static final String PROFILEPIC_URL_FORMAT = </a> 0
<a> "https://graph.facebook.com/%s/picture" ; </a> 0
<a> private static final String HEIGHT_PARAM = "height" ; </a> 0
<a> private static final String WIDTH_PARAM = "width" ; </a> 0
<a> private static final String MIGRATION_PARAM = "migration_overrides" ; </a> 0
<a> private static final String MIGRATION_VALUE = "{october_2012:true}" ; </a> 0
<a> private Context context ; </a> 0
<a> private URL imageUrl ; </a> 0
<a> private Callback callback ; </a> 0
<a> private boolean allowCachedRedirects ; </a> 0
<a> private Object callerTag ; </a> 0
<a> static URL getProfilePictureUrl ( </a> 0
<a> String userId , </a> 0
<a> int width , </a> 0
<a> int height ) </a> 0
<a> throws MalformedURLException { </a> 0
<a> Validate . notNullOrEmpty ( userId , "userId" ) ; </a> 0
<a> width = Math . max ( width , UNSPECIFIED_DIMENSION ) ; </a> 0
<a> height = Math . max ( height , UNSPECIFIED_DIMENSION ) ; </a> 0
<a> if ( width == UNSPECIFIED_DIMENSION && height == UNSPECIFIED_DIMENSION ) { </a> 0
<a> throw new IllegalArgumentException ( "Either width or height must be greater than 0" ) ; </a> 0
<a> } </a> 0
<a> Uri . Builder builder = new Uri . Builder ( ) . encodedPath ( String . format ( PROFILEPIC_URL_FORMAT , userId ) ) ; </a> 0
<a> if ( height != UNSPECIFIED_DIMENSION ) { </a> 0
<a> builder . appendQueryParameter ( HEIGHT_PARAM , String . valueOf ( height ) ) ; </a> 0
<a> } </a> 0
<a> if ( width != UNSPECIFIED_DIMENSION ) { </a> 0
<a> builder . appendQueryParameter ( WIDTH_PARAM , String . valueOf ( width ) ) ; </a> 0
<a> } </a> 0
<a> builder . appendQueryParameter ( MIGRATION_PARAM , MIGRATION_VALUE ) ; </a> 0
<a> return new URL ( builder . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> private ImageRequest ( Builder builder ) { </a> 0
<a> this . context = builder . context ; </a> 0
<a> this . imageUrl = builder . imageUrl ; </a> 0
<a> this . callback = builder . callback ; </a> 0
<a> this . allowCachedRedirects = builder . allowCachedRedirects ; </a> 0
<a> this . callerTag = builder . callerTag == null ? new Object ( ) : builder . callerTag ; </a> 0
<a> } </a> 0
<a> Context getContext ( ) { </a> 0
<a> return context ; </a> 0
<a> } </a> 0
<a> URL getImageUrl ( ) { </a> 0
<a> return imageUrl ; </a> 0
<a> } </a> 0
<a> Callback getCallback ( ) { </a> 0
<a> return callback ; </a> 0
<a> } </a> 0
<a> boolean isCachedRedirectAllowed ( ) { </a> 0
<a> return allowCachedRedirects ; </a> 0
<a> } </a> 0
<a> Object getCallerTag ( ) { </a> 0
<a> return callerTag ; </a> 0
<a> } </a> 0
<a> static class Builder { </a> 0
<a> private Context context ; </a> 0
<a> private URL imageUrl ; </a> 0
<a> private Callback callback ; </a> 0
<a> private boolean allowCachedRedirects ; </a> 0
<a> private Object callerTag ; </a> 0
<a> Builder ( Context context , URL imageUrl ) { </a> 0
<a> Validate . notNull ( imageUrl , "imageUrl" ) ; </a> 0
<a> this . context = context ; </a> 0
<a> this . imageUrl = imageUrl ; </a> 0
<a> } </a> 0
<a> Builder setCallback ( Callback callback ) { </a> 0
<a> this . callback = callback ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> Builder setCallerTag ( Object callerTag ) { </a> 0
<a> this . callerTag = callerTag ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> Builder setAllowCachedRedirects ( boolean allowCachedRedirects ) { </a> 0
<a> this . allowCachedRedirects = allowCachedRedirects ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> ImageRequest build ( ) { </a> 0
<a> return new ImageRequest ( this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . LoggingBehavior ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . FileLruCache ; </a> 0
<a> import java . io . BufferedInputStream ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . URL ; </a> 0
<a> class ImageResponseCache { </a> 0
<a> static final String TAG = ImageResponseCache . class . getSimpleName ( ) ; </a> 0
<a> private volatile static FileLruCache imageCache ; </a> 0
<a> synchronized static FileLruCache getCache ( Context context ) throws IOException { </a> 0
<a> if ( imageCache == null ) { </a> 0
<a> imageCache = new FileLruCache ( context . getApplicationContext ( ) , TAG , new FileLruCache . Limits ( ) ) ; </a> 0
<a> } </a> 0
<a> return imageCache ; </a> 0
<a> } </a> 0
<a> static InputStream getCachedImageStream ( URL url , Context context ) { </a> 0
<a> InputStream imageStream = null ; </a> 0
<a> if ( url != null ) { </a> 0
<a> if ( isCDNURL ( url ) ) { </a> 0
<a> try { </a> 0
<a> FileLruCache cache = getCache ( context ) ; </a> 0
<a> imageStream = cache . get ( url . toString ( ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , Log . WARN , TAG , e . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return imageStream ; </a> 0
<a> } </a> 0
<a> static InputStream interceptAndCacheImageStream ( Context context , HttpURLConnection connection ) throws IOException { </a> 0
<a> InputStream stream = null ; </a> 0
<a> if ( connection . getResponseCode ( ) == HttpURLConnection . HTTP_OK ) { </a> 0
<a> URL url = connection . getURL ( ) ; </a> 0
<a> stream = connection . getInputStream ( ) ; </a> 0
<a> if ( isCDNURL ( url ) ) { </a> 0
<a> try { </a> 0
<a> FileLruCache cache = getCache ( context ) ; </a> 0
<a> stream = cache . interceptAndPut ( </a> 0
<a> url . toString ( ) , </a> 0
<a> new BufferedHttpInputStream ( stream , connection ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return stream ; </a> 0
<a> } </a> 0
<a> private static boolean isCDNURL ( URL url ) { </a> 0
<a> if ( url != null ) { </a> 0
<a> String uriHost = url . getHost ( ) ; </a> 0
<a> if ( uriHost . endsWith ( "fbcdn.net" ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> if ( uriHost . startsWith ( "fbcdn" ) && uriHost . endsWith ( "akamaihd.net" ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private static class BufferedHttpInputStream extends BufferedInputStream { </a> 0
<a> HttpURLConnection connection ; </a> 0
<a> BufferedHttpInputStream ( InputStream stream , HttpURLConnection connection ) { </a> 0
<a> super ( stream , Utility . DEFAULT_STREAM_BUFFER_SIZE ) ; </a> 0
<a> this . connection = connection ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) throws IOException { </a> 0
<a> super . close ( ) ; </a> 0
<a> Utility . disconnectQuietly ( connection ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . AlertDialog ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . res . TypedArray ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . util . AttributeSet ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import android . util . TypedValue ; </a> 0
<a> import android . view . Gravity ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . internal . SessionAuthorizationType ; </a> 0
<a> import com . facebook . internal . SessionTracker ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class LoginButton extends Button { </a> 0
<a> private static final String TAG = LoginButton . class . getName ( ) ; </a> 0
<a> private String applicationId = null ; </a> 0
<a> private SessionTracker sessionTracker ; </a> 0
<a> private GraphUser user = null ; </a> 0
<a> private Session userInfoSession = null ; </a> 0
<a> private boolean confirmLogout ; </a> 0
<a> private boolean fetchUserInfo ; </a> 0
<a> private String loginText ; </a> 0
<a> private String logoutText ; </a> 0
<a> private UserInfoChangedCallback userInfoChangedCallback ; </a> 0
<a> private Fragment parentFragment ; </a> 0
<a> private LoginButtonProperties properties = new LoginButtonProperties ( ) ; </a> 0
<a> static class LoginButtonProperties { </a> 0
<a> private SessionDefaultAudience defaultAudience = SessionDefaultAudience . FRIENDS ; </a> 0
<a> private List < String > permissions = Collections . < String > emptyList ( ) ; </a> 0
<a> private SessionAuthorizationType authorizationType = null ; </a> 0
<a> private OnErrorListener onErrorListener ; </a> 0
<a> private SessionLoginBehavior loginBehavior = SessionLoginBehavior . SSO_WITH_FALLBACK ; </a> 0
<a> private Session . StatusCallback sessionStatusCallback ; </a> 0
<a> public void setOnErrorListener ( OnErrorListener onErrorListener ) { </a> 0
<a> this . onErrorListener = onErrorListener ; </a> 0
<a> } </a> 0
<a> public OnErrorListener getOnErrorListener ( ) { </a> 0
<a> return onErrorListener ; </a> 0
<a> } </a> 0
<a> public void setDefaultAudience ( SessionDefaultAudience defaultAudience ) { </a> 0
<a> this . defaultAudience = defaultAudience ; </a> 0
<a> } </a> 0
<a> public SessionDefaultAudience getDefaultAudience ( ) { </a> 0
<a> return defaultAudience ; </a> 0
<a> } </a> 0
<a> public void setReadPermissions ( List < String > permissions , Session session ) { </a> 0
<a> if ( SessionAuthorizationType . PUBLISH . equals ( authorizationType ) ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> "Cannot call setReadPermissions after setPublishPermissions has been called." ) ; </a> 0
<a> } </a> 0
<a> if ( validatePermissions ( permissions , SessionAuthorizationType . READ , session ) ) { </a> 0
<a> this . permissions = permissions ; </a> 0
<a> authorizationType = SessionAuthorizationType . READ ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setPublishPermissions ( List < String > permissions , Session session ) { </a> 0
<a> if ( SessionAuthorizationType . READ . equals ( authorizationType ) ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> "Cannot call setPublishPermissions after setReadPermissions has been called." ) ; </a> 0
<a> } </a> 0
<a> if ( validatePermissions ( permissions , SessionAuthorizationType . PUBLISH , session ) ) { </a> 0
<a> this . permissions = permissions ; </a> 0
<a> authorizationType = SessionAuthorizationType . PUBLISH ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean validatePermissions ( List < String > permissions , </a> 0
<a> SessionAuthorizationType authType , Session currentSession ) { </a> 0
<a> if ( SessionAuthorizationType . PUBLISH . equals ( authType ) ) { </a> 0
<a> if ( Utility . isNullOrEmpty ( permissions ) ) { </a> 0
<a> throw new IllegalArgumentException ( "Permissions for publish actions cannot be null or empty." ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( currentSession != null && currentSession . isOpened ( ) ) { </a> 0
<a> if ( ! Utility . isSubset ( permissions , currentSession . getPermissions ( ) ) ) { </a> 0
<a> Log . e ( TAG , "Cannot set additional permissions when session is already open." ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> List < String > getPermissions ( ) { </a> 0
<a> return permissions ; </a> 0
<a> } </a> 0
<a> public void clearPermissions ( ) { </a> 0
<a> permissions = null ; </a> 0
<a> authorizationType = null ; </a> 0
<a> } </a> 0
<a> public void setLoginBehavior ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> this . loginBehavior = loginBehavior ; </a> 0
<a> } </a> 0
<a> public SessionLoginBehavior getLoginBehavior ( ) { </a> 0
<a> return loginBehavior ; </a> 0
<a> } </a> 0
<a> public void setSessionStatusCallback ( Session . StatusCallback callback ) { </a> 0
<a> this . sessionStatusCallback = callback ; </a> 0
<a> } </a> 0
<a> public Session . StatusCallback getSessionStatusCallback ( ) { </a> 0
<a> return sessionStatusCallback ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface UserInfoChangedCallback { </a> 0
<a> void onUserInfoFetched ( GraphUser user ) ; </a> 0
<a> } </a> 0
<a> public interface OnErrorListener { </a> 0
<a> void onError ( FacebookException error ) ; </a> 0
<a> } </a> 0
<a> public LoginButton ( Context context ) { </a> 0
<a> super ( context ) ; </a> 0
<a> initializeActiveSessionWithCachedToken ( context ) ; </a> 0
<a> finishInit ( ) ; </a> 0
<a> } </a> 0
<a> public LoginButton ( Context context , AttributeSet attrs ) { </a> 0
<a> super ( context , attrs ) ; </a> 0
<a> if ( attrs . getStyleAttribute ( ) == 0 ) { </a> 0
<a> this . setTextColor ( getResources ( ) . getColor ( R . color . com_facebook_loginview_text_color ) ) ; </a> 0
<a> this . setTextSize ( TypedValue . COMPLEX_UNIT_PX , </a> 0
<a> getResources ( ) . getDimension ( R . dimen . com_facebook_loginview_text_size ) ) ; </a> 0
<a> this . setPadding ( getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_loginview_padding_left ) , </a> 0
<a> getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_loginview_padding_top ) , </a> 0
<a> getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_loginview_padding_right ) , </a> 0
<a> getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_loginview_padding_bottom ) ) ; </a> 0
<a> this . setWidth ( getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_loginview_width ) ) ; </a> 0
<a> this . setHeight ( getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_loginview_height ) ) ; </a> 0
<a> this . setGravity ( Gravity . CENTER ) ; </a> 0
<a> parseAttributes ( attrs ) ; </a> 1
<a> if ( isInEditMode ( ) ) { </a> 0
<a> this . setBackgroundColor ( getResources ( ) . getColor ( R . color . com_facebook_blue ) ) ; </a> 0
<a> loginText = "Log in" ; </a> 0
<a> } else { </a> 0
<a> this . setBackgroundResource ( R . drawable . com_facebook_loginbutton_blue ) ; </a> 0
<a> initializeActiveSessionWithCachedToken ( context ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 1
<a> public LoginButton ( Context context , AttributeSet attrs , int defStyle ) { </a> 0
<a> super ( context , attrs , defStyle ) ; </a> 0
<a> parseAttributes ( attrs ) ; </a> 0
<a> initializeActiveSessionWithCachedToken ( context ) ; </a> 0
<a> } </a> 0
<a> public void setOnErrorListener ( OnErrorListener onErrorListener ) { </a> 0
<a> properties . setOnErrorListener ( onErrorListener ) ; </a> 0
<a> } </a> 0
<a> public OnErrorListener getOnErrorListener ( ) { </a> 0
<a> return properties . getOnErrorListener ( ) ; </a> 0
<a> } </a> 0
<a> public void setDefaultAudience ( SessionDefaultAudience defaultAudience ) { </a> 0
<a> properties . setDefaultAudience ( defaultAudience ) ; </a> 0
<a> } </a> 0
<a> public SessionDefaultAudience getDefaultAudience ( ) { </a> 0
<a> return properties . getDefaultAudience ( ) ; </a> 0
<a> } </a> 0
<a> public void setReadPermissions ( List < String > permissions ) { </a> 0
<a> properties . setReadPermissions ( permissions , sessionTracker . getSession ( ) ) ; </a> 0
<a> } </a> 0
<a> public void setPublishPermissions ( List < String > permissions ) { </a> 0
<a> properties . setPublishPermissions ( permissions , sessionTracker . getSession ( ) ) ; </a> 0
<a> } </a> 0
<a> public void clearPermissions ( ) { </a> 0
<a> properties . clearPermissions ( ) ; </a> 0
<a> } </a> 0
<a> public void setLoginBehavior ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> properties . setLoginBehavior ( loginBehavior ) ; </a> 0
<a> } </a> 0
<a> public SessionLoginBehavior getLoginBehavior ( ) { </a> 0
<a> return properties . getLoginBehavior ( ) ; </a> 0
<a> } </a> 0
<a> public void setApplicationId ( String applicationId ) { </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> } </a> 0
<a> public UserInfoChangedCallback getUserInfoChangedCallback ( ) { </a> 0
<a> return userInfoChangedCallback ; </a> 0
<a> } </a> 0
<a> public void setUserInfoChangedCallback ( UserInfoChangedCallback userInfoChangedCallback ) { </a> 0
<a> this . userInfoChangedCallback = userInfoChangedCallback ; </a> 0
<a> } </a> 0
<a> public void setSessionStatusCallback ( Session . StatusCallback callback ) { </a> 0
<a> properties . setSessionStatusCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> public Session . StatusCallback getSessionStatusCallback ( ) { </a> 0
<a> return properties . getSessionStatusCallback ( ) ; </a> 0
<a> } </a> 0
<a> public boolean onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> Session session = sessionTracker . getSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> return session . onActivityResult ( ( Activity ) getContext ( ) , requestCode , </a> 0
<a> resultCode , data ) ; </a> 0
<a> } else { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setSession ( Session newSession ) { </a> 0
<a> sessionTracker . setSession ( newSession ) ; </a> 0
<a> fetchUserInfo ( ) ; </a> 0
<a> setButtonText ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onFinishInflate ( ) { </a> 0
<a> super . onFinishInflate ( ) ; </a> 0
<a> finishInit ( ) ; </a> 0
<a> } </a> 0
<a> private void finishInit ( ) { </a> 0
<a> setOnClickListener ( new LoginClickListener ( ) ) ; </a> 0
<a> setButtonText ( ) ; </a> 0
<a> if ( ! isInEditMode ( ) ) { </a> 0
<a> sessionTracker = new SessionTracker ( getContext ( ) , new LoginButtonCallback ( ) , null , false ) ; </a> 0
<a> fetchUserInfo ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setFragment ( Fragment fragment ) { </a> 0
<a> parentFragment = fragment ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onAttachedToWindow ( ) { </a> 0
<a> super . onAttachedToWindow ( ) ; </a> 0
<a> if ( sessionTracker != null && ! sessionTracker . isTracking ( ) ) { </a> 0
<a> sessionTracker . startTracking ( ) ; </a> 0
<a> fetchUserInfo ( ) ; </a> 0
<a> setButtonText ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onDetachedFromWindow ( ) { </a> 0
<a> super . onDetachedFromWindow ( ) ; </a> 0
<a> if ( sessionTracker != null ) { </a> 0
<a> sessionTracker . stopTracking ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> List < String > getPermissions ( ) { </a> 0
<a> return properties . getPermissions ( ) ; </a> 0
<a> } </a> 0
<a> void setProperties ( LoginButtonProperties properties ) { </a> 0
<a> this . properties = properties ; </a> 0
<a> } </a> 0
<a> private void parseAttributes ( AttributeSet attrs ) { </a> 0
<a> TypedArray a = getContext ( ) . obtainStyledAttributes ( attrs , R . styleable . com_facebook_login_view ) ; </a> 0
<a> confirmLogout = a . getBoolean ( R . styleable . com_facebook_login_view_confirm_logout , true ) ; </a> 0
<a> fetchUserInfo = a . getBoolean ( R . styleable . com_facebook_login_view_fetch_user_info , true ) ; </a> 0
<a> loginText = a . getString ( R . styleable . com_facebook_login_view_login_text ) ; </a> 0
<a> logoutText = a . getString ( R . styleable . com_facebook_login_view_logout_text ) ; </a> 0
<a> a . recycle ( ) ; </a> 0
<a> } </a> 0
<a> private void setButtonText ( ) { </a> 0
<a> if ( sessionTracker != null && sessionTracker . getOpenSession ( ) != null ) { </a> 0
<a> setText ( ( logoutText != null ) ? logoutText : </a> 0
<a> getResources ( ) . getString ( R . string . com_facebook_loginview_log_out_button ) ) ; </a> 0
<a> } else { </a> 0
<a> setText ( ( loginText != null ) ? loginText : </a> 0
<a> getResources ( ) . getString ( R . string . com_facebook_loginview_log_in_button ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean initializeActiveSessionWithCachedToken ( Context context ) { </a> 0
<a> if ( context == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> return session . isOpened ( ) ; </a> 0
<a> } </a> 0
<a> String applicationId = Utility . getMetadataApplicationId ( context ) ; </a> 0
<a> if ( applicationId == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return Session . openActiveSessionFromCache ( context ) != null ; </a> 0
<a> } </a> 0
<a> private void fetchUserInfo ( ) { </a> 0
<a> if ( fetchUserInfo ) { </a> 0
<a> final Session currentSession = sessionTracker . getOpenSession ( ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> if ( currentSession != userInfoSession ) { </a> 0
<a> Request request = Request . newMeRequest ( currentSession , new Request . GraphUserCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( GraphUser me , Response response ) { </a> 0
<a> if ( currentSession == sessionTracker . getOpenSession ( ) ) { </a> 0
<a> user = me ; </a> 0
<a> if ( userInfoChangedCallback != null ) { </a> 0
<a> userInfoChangedCallback . onUserInfoFetched ( user ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( response . getError ( ) != null ) { </a> 0
<a> handleError ( response . getError ( ) . getException ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Request . executeBatchAsync ( request ) ; </a> 0
<a> userInfoSession = currentSession ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> user = null ; </a> 0
<a> if ( userInfoChangedCallback != null ) { </a> 0
<a> userInfoChangedCallback . onUserInfoFetched ( user ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class LoginClickListener implements OnClickListener { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Context context = getContext ( ) ; </a> 0
<a> final Session openSession = sessionTracker . getOpenSession ( ) ; </a> 0
<a> if ( openSession != null ) { </a> 0
<a> if ( confirmLogout ) { </a> 0
<a> String logout = getResources ( ) . getString ( R . string . com_facebook_loginview_log_out_action ) ; </a> 0
<a> String cancel = getResources ( ) . getString ( R . string . com_facebook_loginview_cancel_action ) ; </a> 0
<a> String message ; </a> 0
<a> if ( user != null && user . getName ( ) != null ) { </a> 0
<a> message = String . format ( getResources ( ) . getString ( R . string . com_facebook_loginview_logged_in_as ) , user . getName ( ) ) ; </a> 0
<a> } else { </a> 0
<a> message = getResources ( ) . getString ( R . string . com_facebook_loginview_logged_in_using_facebook ) ; </a> 0
<a> } </a> 0
<a> AlertDialog . Builder builder = new AlertDialog . Builder ( context ) ; </a> 0
<a> builder . setMessage ( message ) </a> 0
<a> . setCancelable ( true ) </a> 0
<a> . setPositiveButton ( logout , new DialogInterface . OnClickListener ( ) { </a> 0
<a> public void onClick ( DialogInterface dialog , int which ) { </a> 0
<a> openSession . closeAndClearTokenInformation ( ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . setNegativeButton ( cancel , null ) ; </a> 0
<a> builder . create ( ) . show ( ) ; </a> 0
<a> } else { </a> 0
<a> openSession . closeAndClearTokenInformation ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> Session currentSession = sessionTracker . getSession ( ) ; </a> 0
<a> if ( currentSession == null || currentSession . getState ( ) . isClosed ( ) ) { </a> 0
<a> sessionTracker . setSession ( null ) ; </a> 0
<a> Session session = new Session . Builder ( context ) . setApplicationId ( applicationId ) . build ( ) ; </a> 0
<a> Session . setActiveSession ( session ) ; </a> 0
<a> currentSession = session ; </a> 0
<a> } </a> 0
<a> if ( ! currentSession . isOpened ( ) ) { </a> 0
<a> Session . OpenRequest openRequest = null ; </a> 0
<a> if ( parentFragment != null ) { </a> 0
<a> openRequest = new Session . OpenRequest ( parentFragment ) ; </a> 0
<a> } else if ( context instanceof Activity ) { </a> 0
<a> openRequest = new Session . OpenRequest ( ( Activity ) context ) ; </a> 0
<a> } </a> 0
<a> if ( openRequest != null ) { </a> 0
<a> openRequest . setDefaultAudience ( properties . defaultAudience ) ; </a> 0
<a> openRequest . setPermissions ( properties . permissions ) ; </a> 0
<a> openRequest . setLoginBehavior ( properties . loginBehavior ) ; </a> 0
<a> if ( SessionAuthorizationType . PUBLISH . equals ( properties . authorizationType ) ) { </a> 0
<a> currentSession . openForPublish ( openRequest ) ; </a> 0
<a> } else { </a> 0
<a> currentSession . openForRead ( openRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class LoginButtonCallback implements Session . StatusCallback { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , </a> 0
<a> Exception exception ) { </a> 0
<a> fetchUserInfo ( ) ; </a> 0
<a> setButtonText ( ) ; </a> 0
<a> if ( exception != null ) { </a> 0
<a> handleError ( exception ) ; </a> 0
<a> } </a> 0
<a> if ( properties . sessionStatusCallback != null ) { </a> 0
<a> properties . sessionStatusCallback . call ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> void handleError ( Exception exception ) { </a> 0
<a> if ( properties . onErrorListener != null ) { </a> 0
<a> if ( exception instanceof FacebookException ) { </a> 0
<a> properties . onErrorListener . onError ( ( FacebookException ) exception ) ; </a> 0
<a> } else { </a> 0
<a> properties . onErrorListener . onError ( new FacebookException ( exception ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . res . TypedArray ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . os . Looper ; </a> 0
<a> import android . text . Editable ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . text . TextWatcher ; </a> 0
<a> import android . util . AttributeSet ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . view . ViewStub ; </a> 0
<a> import android . view . inputmethod . InputMethodManager ; </a> 0
<a> import android . widget . EditText ; </a> 0
<a> import android . widget . ListView ; </a> 0
<a> import android . widget . RelativeLayout ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . util . * ; </a> 0
<a> public class PlacePickerFragment extends PickerFragment < GraphPlace > { </a> 0
<a> public static final String RADIUS_IN_METERS_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.RadiusInMeters" ; </a> 0
<a> public static final String RESULTS_LIMIT_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.ResultsLimit" ; </a> 0
<a> public static final String SEARCH_TEXT_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.SearchText" ; </a> 0
<a> public static final String LOCATION_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.Location" ; </a> 0
<a> public static final String SHOW_SEARCH_BOX_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.ShowSearchBox" ; </a> 0
<a> public static final int DEFAULT_RADIUS_IN_METERS = 1000 ; </a> 0
<a> public static final int DEFAULT_RESULTS_LIMIT = 100 ; </a> 0
<a> private static final int searchTextTimerDelayInMilliseconds = 2 * 1000 ; </a> 0
<a> private static final String ID = "id" ; </a> 0
<a> private static final String NAME = "name" ; </a> 0
<a> private static final String LOCATION = "location" ; </a> 0
<a> private static final String CATEGORY = "category" ; </a> 0
<a> private static final String WERE_HERE_COUNT = "were_here_count" ; </a> 0
<a> private static final String TAG = "PlacePickerFragment" ; </a> 0
<a> private Location location ; </a> 0
<a> private int radiusInMeters = DEFAULT_RADIUS_IN_METERS ; </a> 0
<a> private int resultsLimit = DEFAULT_RESULTS_LIMIT ; </a> 0
<a> private String searchText ; </a> 0
<a> private Timer searchTextTimer ; </a> 0
<a> private boolean hasSearchTextChangedSinceLastQuery ; </a> 0
<a> private boolean showSearchBox = true ; </a> 0
<a> private EditText searchBox ; </a> 0
<a> public PlacePickerFragment ( ) { </a> 0
<a> this ( null ) ; </a> 0
<a> } </a> 0
<a> public PlacePickerFragment ( Bundle args ) { </a> 0
<a> super ( GraphPlace . class , R . layout . com_facebook_placepickerfragment , args ) ; </a> 0
<a> setPlacePickerSettingsFromBundle ( args ) ; </a> 0
<a> } </a> 0
<a> public Location getLocation ( ) { </a> 0
<a> return location ; </a> 0
<a> } </a> 0
<a> public void setLocation ( Location location ) { </a> 0
<a> this . location = location ; </a> 0
<a> } </a> 0
<a> public int getRadiusInMeters ( ) { </a> 0
<a> return radiusInMeters ; </a> 0
<a> } </a> 0
<a> public void setRadiusInMeters ( int radiusInMeters ) { </a> 0
<a> this . radiusInMeters = radiusInMeters ; </a> 0
<a> } </a> 0
<a> public int getResultsLimit ( ) { </a> 0
<a> return resultsLimit ; </a> 0
<a> } </a> 0
<a> public void setResultsLimit ( int resultsLimit ) { </a> 0
<a> this . resultsLimit = resultsLimit ; </a> 0
<a> } </a> 0
<a> public String getSearchText ( ) { </a> 0
<a> return searchText ; </a> 0
<a> } </a> 0
<a> public void setSearchText ( String searchText ) { </a> 0
<a> if ( TextUtils . isEmpty ( searchText ) ) { </a> 0
<a> searchText = null ; </a> 0
<a> } </a> 0
<a> this . searchText = searchText ; </a> 0
<a> if ( this . searchBox != null ) { </a> 0
<a> this . searchBox . setText ( searchText ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onSearchBoxTextChanged ( String searchText , boolean forceReloadEventIfSameText ) { </a> 0
<a> if ( ! forceReloadEventIfSameText && Utility . stringsEqualOrEmpty ( this . searchText , searchText ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( TextUtils . isEmpty ( searchText ) ) { </a> 0
<a> searchText = null ; </a> 0
<a> } </a> 0
<a> this . searchText = searchText ; </a> 0
<a> hasSearchTextChangedSinceLastQuery = true ; </a> 0
<a> if ( searchTextTimer == null ) { </a> 0
<a> searchTextTimer = createSearchTextTimer ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public GraphPlace getSelection ( ) { </a> 0
<a> Collection < GraphPlace > selection = getSelectedGraphObjects ( ) ; </a> 0
<a> return ( selection != null && selection . size ( ) > 0 ) ? selection . iterator ( ) . next ( ) : null ; </a> 0
<a> } </a> 0
<a> public void setSettingsFromBundle ( Bundle inState ) { </a> 0
<a> super . setSettingsFromBundle ( inState ) ; </a> 0
<a> setPlacePickerSettingsFromBundle ( inState ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onInflate ( Activity activity , AttributeSet attrs , Bundle savedInstanceState ) { </a> 0
<a> super . onInflate ( activity , attrs , savedInstanceState ) ; </a> 0
<a> TypedArray a = activity . obtainStyledAttributes ( attrs , R . styleable . com_facebook_place_picker_fragment ) ; </a> 0
<a> setRadiusInMeters ( a . getInt ( R . styleable . com_facebook_place_picker_fragment_radius_in_meters , radiusInMeters ) ) ; </a> 0
<a> setResultsLimit ( a . getInt ( R . styleable . com_facebook_place_picker_fragment_results_limit , resultsLimit ) ) ; </a> 0
<a> if ( a . hasValue ( R . styleable . com_facebook_place_picker_fragment_results_limit ) ) { </a> 0
<a> setSearchText ( a . getString ( R . styleable . com_facebook_place_picker_fragment_search_text ) ) ; </a> 0
<a> } </a> 0
<a> showSearchBox = a . getBoolean ( R . styleable . com_facebook_place_picker_fragment_show_search_box , showSearchBox ) ; </a> 0
<a> a . recycle ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityCreated ( final Bundle savedInstanceState ) { </a> 0
<a> super . onActivityCreated ( savedInstanceState ) ; </a> 0
<a> ViewGroup view = ( ViewGroup ) getView ( ) ; </a> 0
<a> if ( showSearchBox ) { </a> 0
<a> ViewStub stub = ( ViewStub ) view . findViewById ( R . id . com_facebook_placepickerfragment_search_box_stub ) ; </a> 0
<a> if ( stub != null ) { </a> 0
<a> searchBox = ( EditText ) stub . inflate ( ) ; </a> 0
<a> RelativeLayout . LayoutParams layoutParams = new RelativeLayout . LayoutParams ( </a> 0
<a> RelativeLayout . LayoutParams . FILL_PARENT , </a> 0
<a> RelativeLayout . LayoutParams . FILL_PARENT ) ; </a> 0
<a> layoutParams . addRule ( RelativeLayout . BELOW , R . id . search_box ) ; </a> 0
<a> ListView listView = ( ListView ) view . findViewById ( R . id . com_facebook_picker_list_view ) ; </a> 0
<a> listView . setLayoutParams ( layoutParams ) ; </a> 0
<a> if ( view . findViewById ( R . id . com_facebook_picker_title_bar ) != null ) { </a> 0
<a> layoutParams = new RelativeLayout . LayoutParams ( </a> 0
<a> RelativeLayout . LayoutParams . FILL_PARENT , </a> 0
<a> RelativeLayout . LayoutParams . WRAP_CONTENT ) ; </a> 0
<a> layoutParams . addRule ( RelativeLayout . BELOW , R . id . com_facebook_picker_title_bar ) ; </a> 0
<a> searchBox . setLayoutParams ( layoutParams ) ; </a> 0
<a> } </a> 0
<a> searchBox . addTextChangedListener ( new SearchTextWatcher ( ) ) ; </a> 0
<a> if ( ! TextUtils . isEmpty ( searchText ) ) { </a> 0
<a> searchBox . setText ( searchText ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onAttach ( Activity activity ) { </a> 0
<a> super . onAttach ( activity ) ; </a> 0
<a> if ( searchBox != null ) { </a> 0
<a> InputMethodManager imm = ( InputMethodManager ) getActivity ( ) . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; </a> 0
<a> imm . showSoftInput ( searchBox , InputMethodManager . SHOW_IMPLICIT ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onDetach ( ) { </a> 0
<a> super . onDetach ( ) ; </a> 0
<a> if ( searchBox != null ) { </a> 0
<a> InputMethodManager imm = ( InputMethodManager ) getActivity ( ) . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; </a> 0
<a> imm . hideSoftInputFromWindow ( searchBox . getWindowToken ( ) , 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void saveSettingsToBundle ( Bundle outState ) { </a> 0
<a> super . saveSettingsToBundle ( outState ) ; </a> 0
<a> outState . putInt ( RADIUS_IN_METERS_BUNDLE_KEY , radiusInMeters ) ; </a> 0
<a> outState . putInt ( RESULTS_LIMIT_BUNDLE_KEY , resultsLimit ) ; </a> 0
<a> outState . putString ( SEARCH_TEXT_BUNDLE_KEY , searchText ) ; </a> 0
<a> outState . putParcelable ( LOCATION_BUNDLE_KEY , location ) ; </a> 0
<a> outState . putBoolean ( SHOW_SEARCH_BOX_BUNDLE_KEY , showSearchBox ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void onLoadingData ( ) { </a> 0
<a> hasSearchTextChangedSinceLastQuery = false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> Request getRequestForLoadData ( Session session ) { </a> 0
<a> return createRequest ( location , radiusInMeters , resultsLimit , searchText , extraFields , session ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> String getDefaultTitleText ( ) { </a> 0
<a> return getString ( R . string . com_facebook_nearby ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> PickerFragmentAdapter < GraphPlace > createAdapter ( ) { </a> 0
<a> PickerFragmentAdapter < GraphPlace > adapter = new PickerFragmentAdapter < GraphPlace > ( </a> 0
<a> this . getActivity ( ) ) { </a> 0
<a> @ Override </a> 0
<a> protected CharSequence getSubTitleOfGraphObject ( GraphPlace graphObject ) { </a> 0
<a> String category = graphObject . getCategory ( ) ; </a> 0
<a> Integer wereHereCount = ( Integer ) graphObject . getProperty ( WERE_HERE_COUNT ) ; </a> 0
<a> String result = null ; </a> 0
<a> if ( category != null && wereHereCount != null ) { </a> 0
<a> result = getString ( R . string . com_facebook_placepicker_subtitle_format , category , wereHereCount ) ; </a> 0
<a> } else if ( category == null && wereHereCount != null ) { </a> 0
<a> result = getString ( R . string . com_facebook_placepicker_subtitle_were_here_only_format , wereHereCount ) ; </a> 0
<a> } else if ( category != null && wereHereCount == null ) { </a> 0
<a> result = getString ( R . string . com_facebook_placepicker_subtitle_catetory_only_format , category ) ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int getGraphObjectRowLayoutId ( GraphPlace graphObject ) { </a> 0
<a> return R . layout . com_facebook_placepickerfragment_list_row ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected int getDefaultPicture ( ) { </a> 0
<a> return R . drawable . com_facebook_place_default_icon ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> adapter . setShowCheckbox ( false ) ; </a> 0
<a> adapter . setShowPicture ( getShowPictures ( ) ) ; </a> 0
<a> return adapter ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> LoadingStrategy createLoadingStrategy ( ) { </a> 0
<a> return new AsNeededLoadingStrategy ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> SelectionStrategy createSelectionStrategy ( ) { </a> 0
<a> return new SingleSelectionStrategy ( ) ; </a> 0
<a> } </a> 0
<a> private Request createRequest ( Location location , int radiusInMeters , int resultsLimit , String searchText , </a> 0
<a> Set < String > extraFields , </a> 0
<a> Session session ) { </a> 0
<a> Request request = Request . newPlacesSearchRequest ( session , location , radiusInMeters , resultsLimit , searchText , </a> 0
<a> null ) ; </a> 0
<a> Set < String > fields = new HashSet < String > ( extraFields ) ; </a> 0
<a> String [ ] requiredFields = new String [ ] { </a> 0
<a> ID , </a> 0
<a> NAME , </a> 0
<a> LOCATION , </a> 0
<a> CATEGORY , </a> 0
<a> WERE_HERE_COUNT </a> 0
<a> } ; </a> 0
<a> fields . addAll ( Arrays . asList ( requiredFields ) ) ; </a> 0
<a> String pictureField = adapter . getPictureFieldSpecifier ( ) ; </a> 0
<a> if ( pictureField != null ) { </a> 0
<a> fields . add ( pictureField ) ; </a> 0
<a> } </a> 0
<a> Bundle parameters = request . getParameters ( ) ; </a> 0
<a> parameters . putString ( "fields" , TextUtils . join ( "," , fields ) ) ; </a> 0
<a> request . setParameters ( parameters ) ; </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> private void setPlacePickerSettingsFromBundle ( Bundle inState ) { </a> 0
<a> if ( inState != null ) { </a> 0
<a> setRadiusInMeters ( inState . getInt ( RADIUS_IN_METERS_BUNDLE_KEY , radiusInMeters ) ) ; </a> 0
<a> setResultsLimit ( inState . getInt ( RESULTS_LIMIT_BUNDLE_KEY , resultsLimit ) ) ; </a> 0
<a> if ( inState . containsKey ( SEARCH_TEXT_BUNDLE_KEY ) ) { </a> 0
<a> setSearchText ( inState . getString ( SEARCH_TEXT_BUNDLE_KEY ) ) ; </a> 0
<a> } </a> 0
<a> if ( inState . containsKey ( LOCATION_BUNDLE_KEY ) ) { </a> 0
<a> Location location = inState . getParcelable ( LOCATION_BUNDLE_KEY ) ; </a> 0
<a> setLocation ( location ) ; </a> 0
<a> } </a> 0
<a> showSearchBox = inState . getBoolean ( SHOW_SEARCH_BOX_BUNDLE_KEY , showSearchBox ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private Timer createSearchTextTimer ( ) { </a> 0
<a> Timer timer = new Timer ( ) ; </a> 0
<a> timer . schedule ( new TimerTask ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> onSearchTextTimerTriggered ( ) ; </a> 0
<a> } </a> 0
<a> } , 0 , searchTextTimerDelayInMilliseconds ) ; </a> 0
<a> return timer ; </a> 0
<a> } </a> 0
<a> private void onSearchTextTimerTriggered ( ) { </a> 0
<a> if ( hasSearchTextChangedSinceLastQuery ) { </a> 0
<a> Handler handler = new Handler ( Looper . getMainLooper ( ) ) ; </a> 0
<a> handler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> FacebookException error = null ; </a> 0
<a> try { </a> 0
<a> loadData ( true ) ; </a> 0
<a> } catch ( FacebookException fe ) { </a> 0
<a> error = fe ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> error = new FacebookException ( e ) ; </a> 0
<a> } finally { </a> 0
<a> if ( error != null ) { </a> 0
<a> OnErrorListener onErrorListener = getOnErrorListener ( ) ; </a> 0
<a> if ( onErrorListener != null ) { </a> 0
<a> onErrorListener . onError ( PlacePickerFragment . this , error ) ; </a> 0
<a> } else { </a> 0
<a> Logger . log ( LoggingBehavior . REQUESTS , TAG , "Error loading data : %s" , error ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } else { </a> 0
<a> searchTextTimer . cancel ( ) ; </a> 0
<a> searchTextTimer = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class AsNeededLoadingStrategy extends LoadingStrategy { </a> 0
<a> @ Override </a> 0
<a> public void attach ( GraphObjectAdapter < GraphPlace > adapter ) { </a> 0
<a> super . attach ( adapter ) ; </a> 0
<a> this . adapter . setDataNeededListener ( new GraphObjectAdapter . DataNeededListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onDataNeeded ( ) { </a> 0
<a> if ( ! loader . isLoading ( ) ) { </a> 0
<a> loader . followNextLink ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onLoadFinished ( GraphObjectPagingLoader < GraphPlace > loader , </a> 0
<a> SimpleGraphObjectCursor < GraphPlace > data ) { </a> 0
<a> super . onLoadFinished ( loader , data ) ; </a> 0
<a> if ( data == null || loader . isLoading ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> hideActivityCircle ( ) ; </a> 0
<a> if ( data . isFromCache ( ) ) { </a> 0
<a> loader . refreshOriginalRequest ( data . areMoreObjectsAvailable ( ) ? CACHED_RESULT_REFRESH_DELAY : 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class SearchTextWatcher implements TextWatcher { </a> 0
<a> @ Override </a> 0
<a> public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onTextChanged ( CharSequence s , int start , int before , int count ) { </a> 0
<a> onSearchBoxTextChanged ( s . toString ( ) , false ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void afterTextChanged ( Editable s ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . res . TypedArray ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . graphics . BitmapFactory ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Parcelable ; </a> 0
<a> import android . util . AttributeSet ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . FrameLayout ; </a> 0
<a> import android . widget . ImageView ; </a> 0
<a> import com . facebook . FacebookException ; </a> 0
<a> import com . facebook . LoggingBehavior ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . net . MalformedURLException ; </a> 0
<a> public class ProfilePictureView extends FrameLayout { </a> 0
<a> public interface OnErrorListener { </a> 0
<a> void onError ( FacebookException error ) ; </a> 0
<a> } </a> 0
<a> public static final String TAG = ProfilePictureView . class . getSimpleName ( ) ; </a> 0
<a> public static final int CUSTOM = - 1 ; </a> 0
<a> public static final int SMALL = - 2 ; </a> 0
<a> public static final int NORMAL = - 3 ; </a> 0
<a> public static final int LARGE = - 4 ; </a> 0
<a> private static final int MIN_SIZE = 1 ; </a> 0
<a> private static final boolean IS_CROPPED_DEFAULT_VALUE = true ; </a> 0
<a> private static final String SUPER_STATE_KEY = "ProfilePictureView_superState" ; </a> 0
<a> private static final String PROFILE_ID_KEY = "ProfilePictureView_profileId" ; </a> 0
<a> private static final String PRESET_SIZE_KEY = "ProfilePictureView_presetSize" ; </a> 0
<a> private static final String IS_CROPPED_KEY = "ProfilePictureView_isCropped" ; </a> 0
<a> private static final String BITMAP_KEY = "ProfilePictureView_bitmap" ; </a> 0
<a> private static final String BITMAP_WIDTH_KEY = "ProfilePictureView_width" ; </a> 0
<a> private static final String BITMAP_HEIGHT_KEY = "ProfilePictureView_height" ; </a> 0
<a> private static final String PENDING_REFRESH_KEY = "ProfilePictureView_refresh" ; </a> 0
<a> private String profileId ; </a> 0
<a> private int queryHeight = ImageRequest . UNSPECIFIED_DIMENSION ; </a> 0
<a> private int queryWidth = ImageRequest . UNSPECIFIED_DIMENSION ; </a> 0
<a> private boolean isCropped = IS_CROPPED_DEFAULT_VALUE ; </a> 0
<a> private Bitmap imageContents ; </a> 0
<a> private ImageView image ; </a> 0
<a> private int presetSizeType = CUSTOM ; </a> 0
<a> private ImageRequest lastRequest ; </a> 0
<a> private OnErrorListener onErrorListener ; </a> 0
<a> public ProfilePictureView ( Context context ) { </a> 0
<a> super ( context ) ; </a> 0
<a> initialize ( context ) ; </a> 0
<a> } </a> 0
<a> public ProfilePictureView ( Context context , AttributeSet attrs ) { </a> 0
<a> super ( context , attrs ) ; </a> 0
<a> initialize ( context ) ; </a> 0
<a> parseAttributes ( attrs ) ; </a> 0
<a> } </a> 0
<a> public ProfilePictureView ( Context context , AttributeSet attrs , int defStyle ) { </a> 0
<a> super ( context , attrs , defStyle ) ; </a> 0
<a> initialize ( context ) ; </a> 0
<a> parseAttributes ( attrs ) ; </a> 0
<a> } </a> 0
<a> public final int getPresetSize ( ) { </a> 0
<a> return presetSizeType ; </a> 0
<a> } </a> 0
<a> public final void setPresetSize ( int sizeType ) { </a> 0
<a> switch ( sizeType ) { </a> 0
<a> case SMALL : </a> 0
<a> case NORMAL : </a> 0
<a> case LARGE : </a> 0
<a> case CUSTOM : </a> 0
<a> this . presetSizeType = sizeType ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new IllegalArgumentException ( "Must use a predefined preset size" ) ; </a> 0
<a> } </a> 0
<a> requestLayout ( ) ; </a> 0
<a> } </a> 0
<a> public final boolean isCropped ( ) { </a> 0
<a> return isCropped ; </a> 0
<a> } </a> 0
<a> public final void setCropped ( boolean showCroppedVersion ) { </a> 0
<a> isCropped = showCroppedVersion ; </a> 0
<a> refreshImage ( false ) ; </a> 0
<a> } </a> 0
<a> public final String getProfileId ( ) { </a> 0
<a> return profileId ; </a> 0
<a> } </a> 0
<a> public final void setProfileId ( String profileId ) { </a> 0
<a> boolean force = false ; </a> 0
<a> if ( Utility . isNullOrEmpty ( this . profileId ) || ! this . profileId . equalsIgnoreCase ( profileId ) ) { </a> 0
<a> setBlankProfilePicture ( ) ; </a> 0
<a> force = true ; </a> 0
<a> } </a> 0
<a> this . profileId = profileId ; </a> 0
<a> refreshImage ( force ) ; </a> 0
<a> } </a> 0
<a> public final OnErrorListener getOnErrorListener ( ) { </a> 0
<a> return onErrorListener ; </a> 0
<a> } </a> 0
<a> public final void setOnErrorListener ( OnErrorListener onErrorListener ) { </a> 0
<a> this . onErrorListener = onErrorListener ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { </a> 0
<a> ViewGroup . LayoutParams params = getLayoutParams ( ) ; </a> 0
<a> boolean customMeasure = false ; </a> 0
<a> int newHeight = MeasureSpec . getSize ( heightMeasureSpec ) ; </a> 0
<a> int newWidth = MeasureSpec . getSize ( widthMeasureSpec ) ; </a> 0
<a> if ( MeasureSpec . getMode ( heightMeasureSpec ) != MeasureSpec . EXACTLY && </a> 0
<a> params . height == ViewGroup . LayoutParams . WRAP_CONTENT ) { </a> 0
<a> newHeight = getPresetSizeInPixels ( true ) ; </a> 0
<a> heightMeasureSpec = MeasureSpec . makeMeasureSpec ( newHeight , MeasureSpec . EXACTLY ) ; </a> 0
<a> customMeasure = true ; </a> 0
<a> } </a> 0
<a> if ( MeasureSpec . getMode ( widthMeasureSpec ) != MeasureSpec . EXACTLY && </a> 0
<a> params . width == ViewGroup . LayoutParams . WRAP_CONTENT ) { </a> 0
<a> newWidth = getPresetSizeInPixels ( true ) ; </a> 0
<a> widthMeasureSpec = MeasureSpec . makeMeasureSpec ( newWidth , MeasureSpec . EXACTLY ) ; </a> 0
<a> customMeasure = true ; </a> 0
<a> } </a> 0
<a> if ( customMeasure ) { </a> 0
<a> setMeasuredDimension ( newWidth , newHeight ) ; </a> 0
<a> measureChildren ( widthMeasureSpec , heightMeasureSpec ) ; </a> 0
<a> } else { </a> 0
<a> super . onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onLayout ( boolean changed , int left , int top , int right , int bottom ) { </a> 0
<a> super . onLayout ( changed , left , top , right , bottom ) ; </a> 0
<a> refreshImage ( false ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected Parcelable onSaveInstanceState ( ) { </a> 0
<a> Parcelable superState = super . onSaveInstanceState ( ) ; </a> 0
<a> Bundle instanceState = new Bundle ( ) ; </a> 0
<a> instanceState . putParcelable ( SUPER_STATE_KEY , superState ) ; </a> 0
<a> instanceState . putString ( PROFILE_ID_KEY , profileId ) ; </a> 0
<a> instanceState . putInt ( PRESET_SIZE_KEY , presetSizeType ) ; </a> 0
<a> instanceState . putBoolean ( IS_CROPPED_KEY , isCropped ) ; </a> 0
<a> instanceState . putParcelable ( BITMAP_KEY , imageContents ) ; </a> 0
<a> instanceState . putInt ( BITMAP_WIDTH_KEY , queryWidth ) ; </a> 0
<a> instanceState . putInt ( BITMAP_HEIGHT_KEY , queryHeight ) ; </a> 0
<a> instanceState . putBoolean ( PENDING_REFRESH_KEY , lastRequest != null ) ; </a> 0
<a> return instanceState ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onRestoreInstanceState ( Parcelable state ) { </a> 0
<a> if ( state . getClass ( ) != Bundle . class ) { </a> 0
<a> super . onRestoreInstanceState ( state ) ; </a> 0
<a> } else { </a> 0
<a> Bundle instanceState = ( Bundle ) state ; </a> 0
<a> super . onRestoreInstanceState ( instanceState . getParcelable ( SUPER_STATE_KEY ) ) ; </a> 0
<a> profileId = instanceState . getString ( PROFILE_ID_KEY ) ; </a> 0
<a> presetSizeType = instanceState . getInt ( PRESET_SIZE_KEY ) ; </a> 0
<a> isCropped = instanceState . getBoolean ( IS_CROPPED_KEY ) ; </a> 0
<a> queryWidth = instanceState . getInt ( BITMAP_WIDTH_KEY ) ; </a> 0
<a> queryHeight = instanceState . getInt ( BITMAP_HEIGHT_KEY ) ; </a> 0
<a> setImageBitmap ( ( Bitmap ) instanceState . getParcelable ( BITMAP_KEY ) ) ; </a> 0
<a> if ( instanceState . getBoolean ( PENDING_REFRESH_KEY ) ) { </a> 0
<a> refreshImage ( true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onDetachedFromWindow ( ) { </a> 0
<a> super . onDetachedFromWindow ( ) ; </a> 0
<a> lastRequest = null ; </a> 0
<a> } </a> 0
<a> private void initialize ( Context context ) { </a> 0
<a> removeAllViews ( ) ; </a> 0
<a> image = new ImageView ( context ) ; </a> 0
<a> LayoutParams imageLayout = new LayoutParams ( </a> 0
<a> LayoutParams . MATCH_PARENT , </a> 0
<a> LayoutParams . MATCH_PARENT ) ; </a> 0
<a> image . setLayoutParams ( imageLayout ) ; </a> 0
<a> image . setScaleType ( ImageView . ScaleType . CENTER_INSIDE ) ; </a> 0
<a> addView ( image ) ; </a> 0
<a> } </a> 0
<a> private void parseAttributes ( AttributeSet attrs ) { </a> 0
<a> TypedArray a = getContext ( ) . obtainStyledAttributes ( attrs , R . styleable . com_facebook_profile_picture_view ) ; </a> 0
<a> setPresetSize ( a . getInt ( R . styleable . com_facebook_profile_picture_view_preset_size , CUSTOM ) ) ; </a> 0
<a> isCropped = a . getBoolean ( R . styleable . com_facebook_profile_picture_view_is_cropped , IS_CROPPED_DEFAULT_VALUE ) ; </a> 0
<a> a . recycle ( ) ; </a> 0
<a> } </a> 0
<a> private void refreshImage ( boolean force ) { </a> 0
<a> boolean changed = updateImageQueryParameters ( ) ; </a> 0
<a> if ( profileId == null || profileId . length ( ) == 0 || </a> 0
<a> ( ( queryWidth == ImageRequest . UNSPECIFIED_DIMENSION ) && </a> 0
<a> ( queryHeight == ImageRequest . UNSPECIFIED_DIMENSION ) ) ) { </a> 0
<a> setBlankProfilePicture ( ) ; </a> 0
<a> } else if ( changed || force ) { </a> 0
<a> sendImageRequest ( true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void setBlankProfilePicture ( ) { </a> 0
<a> int blankImageResource = isCropped ( ) ? </a> 0
<a> R . drawable . com_facebook_profile_picture_blank_square : </a> 0
<a> R . drawable . com_facebook_profile_picture_blank_portrait ; </a> 0
<a> setImageBitmap ( BitmapFactory . decodeResource ( getResources ( ) , blankImageResource ) ) ; </a> 0
<a> } </a> 0
<a> private void setImageBitmap ( Bitmap imageBitmap ) { </a> 0
<a> if ( image != null && imageBitmap != null ) { </a> 0
<a> imageContents = imageBitmap ; </a> 0
<a> image . setImageBitmap ( imageBitmap ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void sendImageRequest ( boolean allowCachedResponse ) { </a> 0
<a> try { </a> 0
<a> ImageRequest . Builder requestBuilder = new ImageRequest . Builder ( </a> 0
<a> getContext ( ) , </a> 0
<a> ImageRequest . getProfilePictureUrl ( profileId , queryWidth , queryHeight ) ) ; </a> 0
<a> ImageRequest request = requestBuilder . setAllowCachedRedirects ( allowCachedResponse ) </a> 0
<a> . setCallerTag ( this ) </a> 0
<a> . setCallback ( </a> 0
<a> new ImageRequest . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( ImageResponse response ) { </a> 0
<a> processResponse ( response ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . build ( ) ; </a> 0
<a> if ( lastRequest != null ) { </a> 0
<a> ImageDownloader . cancelRequest ( lastRequest ) ; </a> 0
<a> } </a> 0
<a> lastRequest = request ; </a> 0
<a> ImageDownloader . downloadAsync ( request ) ; </a> 0
<a> } catch ( MalformedURLException e ) { </a> 0
<a> Logger . log ( LoggingBehavior . REQUESTS , Log . ERROR , TAG , e . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void processResponse ( ImageResponse response ) { </a> 0
<a> if ( response . getRequest ( ) == lastRequest ) { </a> 0
<a> lastRequest = null ; </a> 0
<a> Bitmap responseImage = response . getBitmap ( ) ; </a> 0
<a> Exception error = response . getError ( ) ; </a> 0
<a> if ( error != null ) { </a> 0
<a> OnErrorListener listener = onErrorListener ; </a> 0
<a> if ( listener != null ) { </a> 0
<a> listener . onError ( new FacebookException ( </a> 0
<a> "Error in downloading profile picture for profileId: " + getProfileId ( ) , error ) ) ; </a> 0
<a> } else { </a> 0
<a> Logger . log ( LoggingBehavior . REQUESTS , Log . ERROR , TAG , error . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( responseImage != null ) { </a> 0
<a> setImageBitmap ( responseImage ) ; </a> 0
<a> if ( response . isCachedRedirect ( ) ) { </a> 0
<a> sendImageRequest ( false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean updateImageQueryParameters ( ) { </a> 0
<a> int newHeightPx = getHeight ( ) ; </a> 0
<a> int newWidthPx = getWidth ( ) ; </a> 0
<a> if ( newWidthPx < MIN_SIZE || newHeightPx < MIN_SIZE ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> int presetSize = getPresetSizeInPixels ( false ) ; </a> 0
<a> if ( presetSize != ImageRequest . UNSPECIFIED_DIMENSION ) { </a> 0
<a> newWidthPx = presetSize ; </a> 0
<a> newHeightPx = presetSize ; </a> 0
<a> } </a> 0
<a> if ( newWidthPx <= newHeightPx ) { </a> 0
<a> newHeightPx = isCropped ( ) ? newWidthPx : ImageRequest . UNSPECIFIED_DIMENSION ; </a> 0
<a> } else { </a> 0
<a> newWidthPx = isCropped ( ) ? newHeightPx : ImageRequest . UNSPECIFIED_DIMENSION ; </a> 0
<a> } </a> 0
<a> boolean changed = ( newWidthPx != queryWidth ) || ( newHeightPx != queryHeight ) ; </a> 0
<a> queryWidth = newWidthPx ; </a> 0
<a> queryHeight = newHeightPx ; </a> 0
<a> return changed ; </a> 0
<a> } </a> 0
<a> private int getPresetSizeInPixels ( boolean forcePreset ) { </a> 0
<a> int dimensionId ; </a> 0
<a> switch ( presetSizeType ) { </a> 0
<a> case SMALL : </a> 0
<a> dimensionId = R . dimen . com_facebook_profilepictureview_preset_size_small ; </a> 0
<a> break ; </a> 0
<a> case NORMAL : </a> 0
<a> dimensionId = R . dimen . com_facebook_profilepictureview_preset_size_normal ; </a> 0
<a> break ; </a> 0
<a> case LARGE : </a> 0
<a> dimensionId = R . dimen . com_facebook_profilepictureview_preset_size_large ; </a> 0
<a> break ; </a> 0
<a> case CUSTOM : </a> 0
<a> if ( ! forcePreset ) { </a> 0
<a> return ImageRequest . UNSPECIFIED_DIMENSION ; </a> 0
<a> } else { </a> 0
<a> dimensionId = R . dimen . com_facebook_profilepictureview_preset_size_normal ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> default : </a> 0
<a> return ImageRequest . UNSPECIFIED_DIMENSION ; </a> 0
<a> } </a> 0
<a> return getResources ( ) . getDimensionPixelSize ( dimensionId ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . database . CursorIndexOutOfBoundsException ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> class SimpleGraphObjectCursor < T extends GraphObject > implements GraphObjectCursor < T > { </a> 0
<a> private int pos = - 1 ; </a> 0
<a> private boolean closed = false ; </a> 0
<a> private ArrayList < T > graphObjects = new ArrayList < T > ( ) ; </a> 0
<a> private boolean moreObjectsAvailable = false ; </a> 0
<a> private boolean fromCache = false ; </a> 0
<a> SimpleGraphObjectCursor ( ) { </a> 0
<a> } </a> 0
<a> SimpleGraphObjectCursor ( SimpleGraphObjectCursor < T > other ) { </a> 0
<a> pos = other . pos ; </a> 0
<a> closed = other . closed ; </a> 0
<a> graphObjects = new ArrayList < T > ( ) ; </a> 0
<a> graphObjects . addAll ( other . graphObjects ) ; </a> 0
<a> fromCache = other . fromCache ; </a> 0
<a> } </a> 0
<a> public void addGraphObjects ( Collection < T > graphObjects , boolean fromCache ) { </a> 0
<a> this . graphObjects . addAll ( graphObjects ) ; </a> 0
<a> this . fromCache |= fromCache ; </a> 0
<a> } </a> 0
<a> public boolean isFromCache ( ) { </a> 0
<a> return fromCache ; </a> 0
<a> } </a> 0
<a> public void setFromCache ( boolean fromCache ) { </a> 0
<a> this . fromCache = fromCache ; </a> 0
<a> } </a> 0
<a> public boolean areMoreObjectsAvailable ( ) { </a> 0
<a> return moreObjectsAvailable ; </a> 0
<a> } </a> 0
<a> public void setMoreObjectsAvailable ( boolean moreObjectsAvailable ) { </a> 0
<a> this . moreObjectsAvailable = moreObjectsAvailable ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getCount ( ) { </a> 0
<a> return graphObjects . size ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getPosition ( ) { </a> 0
<a> return pos ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean move ( int offset ) { </a> 0
<a> return moveToPosition ( pos + offset ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean moveToPosition ( int position ) { </a> 0
<a> final int count = getCount ( ) ; </a> 0
<a> if ( position >= count ) { </a> 0
<a> pos = count ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> if ( position < 0 ) { </a> 0
<a> pos = - 1 ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> pos = position ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean moveToFirst ( ) { </a> 0
<a> return moveToPosition ( 0 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean moveToLast ( ) { </a> 0
<a> return moveToPosition ( getCount ( ) - 1 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean moveToNext ( ) { </a> 0
<a> return moveToPosition ( pos + 1 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean moveToPrevious ( ) { </a> 0
<a> return moveToPosition ( pos - 1 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isFirst ( ) { </a> 0
<a> return ( pos == 0 ) && ( getCount ( ) != 0 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isLast ( ) { </a> 0
<a> final int count = getCount ( ) ; </a> 0
<a> return ( pos == ( count - 1 ) ) && ( count != 0 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isBeforeFirst ( ) { </a> 0
<a> return ( getCount ( ) == 0 ) || ( pos == - 1 ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isAfterLast ( ) { </a> 0
<a> final int count = getCount ( ) ; </a> 0
<a> return ( count == 0 ) || ( pos == count ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public T getGraphObject ( ) { </a> 0
<a> if ( pos < 0 ) { </a> 0
<a> throw new CursorIndexOutOfBoundsException ( "Before first object." ) ; </a> 0
<a> } </a> 0
<a> if ( pos >= graphObjects . size ( ) ) { </a> 0
<a> throw new CursorIndexOutOfBoundsException ( "After last object." ) ; </a> 0
<a> } </a> 0
<a> return graphObjects . get ( pos ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void close ( ) { </a> 0
<a> closed = true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isClosed ( ) { </a> 0
<a> return closed ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import com . facebook . internal . FileLruCache ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . InputStreamReader ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . net . MalformedURLException ; </a> 0
<a> import java . net . URL ; </a> 0
<a> class UrlRedirectCache { </a> 0
<a> static final String TAG = UrlRedirectCache . class . getSimpleName ( ) ; </a> 0
<a> private static final String REDIRECT_CONTENT_TAG = TAG + "_Redirect" ; </a> 0
<a> private volatile static FileLruCache urlRedirectCache ; </a> 0
<a> synchronized static FileLruCache getCache ( Context context ) throws IOException { </a> 0
<a> if ( urlRedirectCache == null ) { </a> 0
<a> urlRedirectCache = new FileLruCache ( context . getApplicationContext ( ) , TAG , new FileLruCache . Limits ( ) ) ; </a> 0
<a> } </a> 0
<a> return urlRedirectCache ; </a> 0
<a> } </a> 0
<a> static URL getRedirectedUrl ( Context context , URL url ) { </a> 0
<a> if ( url == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String urlString = url . toString ( ) ; </a> 0
<a> URL finalUrl = null ; </a> 0
<a> InputStreamReader reader = null ; </a> 0
<a> try { </a> 0
<a> InputStream stream ; </a> 0
<a> FileLruCache cache = getCache ( context ) ; </a> 0
<a> boolean redirectExists = false ; </a> 0
<a> while ( ( stream = cache . get ( urlString , REDIRECT_CONTENT_TAG ) ) != null ) { </a> 0
<a> redirectExists = true ; </a> 0
<a> reader = new InputStreamReader ( stream ) ; </a> 0
<a> char [ ] buffer = new char [ 128 ] ; </a> 0
<a> int bufferLength ; </a> 0
<a> StringBuilder urlBuilder = new StringBuilder ( ) ; </a> 0
<a> while ( ( bufferLength = reader . read ( buffer , 0 , buffer . length ) ) > 0 ) { </a> 0
<a> urlBuilder . append ( buffer , 0 , bufferLength ) ; </a> 0
<a> } </a> 0
<a> Utility . closeQuietly ( reader ) ; </a> 0
<a> urlString = urlBuilder . toString ( ) ; </a> 0
<a> } </a> 0
<a> if ( redirectExists ) { </a> 0
<a> finalUrl = new URL ( urlString ) ; </a> 0
<a> } </a> 0
<a> } catch ( MalformedURLException e ) { </a> 0
<a> } catch ( IOException ioe ) { </a> 0
<a> } finally { </a> 0
<a> Utility . closeQuietly ( reader ) ; </a> 0
<a> } </a> 0
<a> return finalUrl ; </a> 0
<a> } </a> 0
<a> static void cacheUrlRedirect ( Context context , URL fromUrl , URL toUrl ) { </a> 0
<a> if ( fromUrl == null || toUrl == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> OutputStream redirectStream = null ; </a> 0
<a> try { </a> 0
<a> FileLruCache cache = getCache ( context ) ; </a> 0
<a> redirectStream = cache . openPutStream ( fromUrl . toString ( ) , REDIRECT_CONTENT_TAG ) ; </a> 0
<a> redirectStream . write ( toUrl . toString ( ) . getBytes ( ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> } finally { </a> 0
<a> Utility . closeQuietly ( redirectStream ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . graphics . drawable . BitmapDrawable ; </a> 0
<a> import android . graphics . drawable . Drawable ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import java . net . MalformedURLException ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class UserSettingsFragment extends FacebookFragment { </a> 0
<a> private static final String NAME = "name" ; </a> 0
<a> private static final String ID = "id" ; </a> 0
<a> private static final String PICTURE = "picture" ; </a> 0
<a> private static final String FIELDS = "fields" ; </a> 0
<a> private static final String REQUEST_FIELDS = TextUtils . join ( "," , new String [ ] { ID , NAME , PICTURE } ) ; </a> 0
<a> private LoginButton loginButton ; </a> 0
<a> private LoginButton . LoginButtonProperties loginButtonProperties = new LoginButton . LoginButtonProperties ( ) ; </a> 0
<a> private TextView connectedStateLabel ; </a> 0
<a> private GraphUser user ; </a> 0
<a> private Session userInfoSession ; </a> 0
<a> private Drawable userProfilePic ; </a> 0
<a> private String userProfilePicID ; </a> 0
<a> private Session . StatusCallback sessionStatusCallback ; </a> 0
<a> @ Override </a> 0
<a> public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { </a> 0
<a> View view = inflater . inflate ( R . layout . com_facebook_usersettingsfragment , container , false ) ; </a> 0
<a> loginButton = ( LoginButton ) view . findViewById ( R . id . com_facebook_usersettingsfragment_login_button ) ; </a> 0
<a> loginButton . setProperties ( loginButtonProperties ) ; </a> 0
<a> loginButton . setFragment ( this ) ; </a> 0
<a> Session session = getSession ( ) ; </a> 0
<a> if ( session != null && ! session . equals ( Session . getActiveSession ( ) ) ) { </a> 0
<a> loginButton . setSession ( session ) ; </a> 0
<a> } </a> 0
<a> connectedStateLabel = ( TextView ) view . findViewById ( R . id . com_facebook_usersettingsfragment_profile_name ) ; </a> 0
<a> if ( view . getBackground ( ) == null ) { </a> 0
<a> view . setBackgroundColor ( getResources ( ) . getColor ( R . color . com_facebook_blue ) ) ; </a> 0
<a> } else { </a> 0
<a> view . getBackground ( ) . setDither ( true ) ; </a> 0
<a> } </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setRetainInstance ( true ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onResume ( ) { </a> 0
<a> super . onResume ( ) ; </a> 0
<a> fetchUserInfo ( ) ; </a> 0
<a> updateUI ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setSession ( Session newSession ) { </a> 0
<a> super . setSession ( newSession ) ; </a> 0
<a> if ( loginButton != null ) { </a> 0
<a> loginButton . setSession ( newSession ) ; </a> 0
<a> } </a> 0
<a> fetchUserInfo ( ) ; </a> 0
<a> updateUI ( ) ; </a> 0
<a> } </a> 0
<a> public void setDefaultAudience ( SessionDefaultAudience defaultAudience ) { </a> 0
<a> loginButtonProperties . setDefaultAudience ( defaultAudience ) ; </a> 0
<a> } </a> 0
<a> public SessionDefaultAudience getDefaultAudience ( ) { </a> 0
<a> return loginButtonProperties . getDefaultAudience ( ) ; </a> 0
<a> } </a> 0
<a> public void setReadPermissions ( List < String > permissions ) { </a> 0
<a> loginButtonProperties . setReadPermissions ( permissions , getSession ( ) ) ; </a> 0
<a> } </a> 0
<a> public void setPublishPermissions ( List < String > permissions ) { </a> 0
<a> loginButtonProperties . setPublishPermissions ( permissions , getSession ( ) ) ; </a> 0
<a> } </a> 0
<a> public void clearPermissions ( ) { </a> 0
<a> loginButtonProperties . clearPermissions ( ) ; </a> 0
<a> } </a> 0
<a> public void setLoginBehavior ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> loginButtonProperties . setLoginBehavior ( loginBehavior ) ; </a> 0
<a> } </a> 0
<a> public SessionLoginBehavior getLoginBehavior ( ) { </a> 0
<a> return loginButtonProperties . getLoginBehavior ( ) ; </a> 0
<a> } </a> 0
<a> public void setOnErrorListener ( LoginButton . OnErrorListener onErrorListener ) { </a> 0
<a> loginButtonProperties . setOnErrorListener ( onErrorListener ) ; </a> 0
<a> } </a> 0
<a> public LoginButton . OnErrorListener getOnErrorListener ( ) { </a> 0
<a> return loginButtonProperties . getOnErrorListener ( ) ; </a> 0
<a> } </a> 0
<a> public void setSessionStatusCallback ( Session . StatusCallback callback ) { </a> 0
<a> this . sessionStatusCallback = callback ; </a> 0
<a> } </a> 0
<a> public Session . StatusCallback getSessionStatusCallback ( ) { </a> 0
<a> return sessionStatusCallback ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSessionStateChange ( SessionState state , Exception exception ) { </a> 0
<a> fetchUserInfo ( ) ; </a> 0
<a> updateUI ( ) ; </a> 0
<a> if ( sessionStatusCallback != null ) { </a> 0
<a> sessionStatusCallback . call ( getSession ( ) , state , exception ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> List < String > getPermissions ( ) { </a> 0
<a> return loginButtonProperties . getPermissions ( ) ; </a> 0
<a> } </a> 0
<a> private void fetchUserInfo ( ) { </a> 0
<a> final Session currentSession = getSession ( ) ; </a> 0
<a> if ( currentSession != null && currentSession . isOpened ( ) ) { </a> 0
<a> if ( currentSession != userInfoSession ) { </a> 0
<a> Request request = Request . newMeRequest ( currentSession , new Request . GraphUserCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( GraphUser me , Response response ) { </a> 0
<a> if ( currentSession == getSession ( ) ) { </a> 0
<a> user = me ; </a> 0
<a> updateUI ( ) ; </a> 0
<a> } </a> 0
<a> if ( response . getError ( ) != null ) { </a> 0
<a> loginButton . handleError ( response . getError ( ) . getException ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( FIELDS , REQUEST_FIELDS ) ; </a> 0
<a> request . setParameters ( parameters ) ; </a> 0
<a> Request . executeBatchAsync ( request ) ; </a> 0
<a> userInfoSession = currentSession ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> user = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void updateUI ( ) { </a> 0
<a> if ( ! isAdded ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( isSessionOpen ( ) ) { </a> 0
<a> connectedStateLabel . setTextColor ( getResources ( ) . getColor ( R . color . com_facebook_usersettingsfragment_connected_text_color ) ) ; </a> 0
<a> connectedStateLabel . setShadowLayer ( 1f , 0f , - 1f , </a> 0
<a> getResources ( ) . getColor ( R . color . com_facebook_usersettingsfragment_connected_shadow_color ) ) ; </a> 0
<a> if ( user != null ) { </a> 0
<a> ImageRequest request = getImageRequest ( ) ; </a> 0
<a> if ( request != null ) { </a> 0
<a> URL requestUrl = request . getImageUrl ( ) ; </a> 0
<a> if ( ! requestUrl . equals ( connectedStateLabel . getTag ( ) ) ) { </a> 0
<a> if ( user . getId ( ) . equals ( userProfilePicID ) ) { </a> 0
<a> connectedStateLabel . setCompoundDrawables ( null , userProfilePic , null , null ) ; </a> 0
<a> connectedStateLabel . setTag ( requestUrl ) ; </a> 0
<a> } else { </a> 0
<a> ImageDownloader . downloadAsync ( request ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> connectedStateLabel . setText ( user . getName ( ) ) ; </a> 0
<a> } else { </a> 0
<a> connectedStateLabel . setText ( getResources ( ) . getString ( </a> 0
<a> R . string . com_facebook_usersettingsfragment_logged_in ) ) ; </a> 0
<a> Drawable noProfilePic = getResources ( ) . getDrawable ( R . drawable . com_facebook_profile_default_icon ) ; </a> 0
<a> noProfilePic . setBounds ( 0 , 0 , </a> 0
<a> getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_usersettingsfragment_profile_picture_width ) , </a> 0
<a> getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_usersettingsfragment_profile_picture_height ) ) ; </a> 0
<a> connectedStateLabel . setCompoundDrawables ( null , noProfilePic , null , null ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> int textColor = getResources ( ) . getColor ( R . color . com_facebook_usersettingsfragment_not_connected_text_color ) ; </a> 0
<a> connectedStateLabel . setTextColor ( textColor ) ; </a> 0
<a> connectedStateLabel . setShadowLayer ( 0f , 0f , 0f , textColor ) ; </a> 0
<a> connectedStateLabel . setText ( getResources ( ) . getString ( </a> 0
<a> R . string . com_facebook_usersettingsfragment_not_logged_in ) ) ; </a> 0
<a> connectedStateLabel . setCompoundDrawables ( null , null , null , null ) ; </a> 0
<a> connectedStateLabel . setTag ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private ImageRequest getImageRequest ( ) { </a> 0
<a> ImageRequest request = null ; </a> 0
<a> try { </a> 0
<a> ImageRequest . Builder requestBuilder = new ImageRequest . Builder ( </a> 0
<a> getActivity ( ) , </a> 0
<a> ImageRequest . getProfilePictureUrl ( </a> 0
<a> user . getId ( ) , </a> 0
<a> getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_usersettingsfragment_profile_picture_width ) , </a> 0
<a> getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_usersettingsfragment_profile_picture_height ) ) ) ; </a> 0
<a> request = requestBuilder . setCallerTag ( this ) </a> 0
<a> . setCallback ( </a> 0
<a> new ImageRequest . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( ImageResponse response ) { </a> 0
<a> processImageResponse ( user . getId ( ) , response ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . build ( ) ; </a> 0
<a> } catch ( MalformedURLException e ) { </a> 0
<a> } </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> private void processImageResponse ( String id , ImageResponse response ) { </a> 0
<a> if ( response != null ) { </a> 0
<a> Bitmap bitmap = response . getBitmap ( ) ; </a> 0
<a> if ( bitmap != null ) { </a> 0
<a> BitmapDrawable drawable = new BitmapDrawable ( UserSettingsFragment . this . getResources ( ) , bitmap ) ; </a> 0
<a> drawable . setBounds ( 0 , 0 , </a> 0
<a> getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_usersettingsfragment_profile_picture_width ) , </a> 0
<a> getResources ( ) . getDimensionPixelSize ( R . dimen . com_facebook_usersettingsfragment_profile_picture_height ) ) ; </a> 0
<a> userProfilePic = drawable ; </a> 0
<a> userProfilePicID = id ; </a> 0
<a> connectedStateLabel . setCompoundDrawables ( null , drawable , null , null ) ; </a> 0
<a> connectedStateLabel . setTag ( response . getRequest ( ) . getImageUrl ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . annotation . SuppressLint ; </a> 0
<a> import android . app . Dialog ; </a> 0
<a> import android . app . ProgressDialog ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . graphics . Color ; </a> 0
<a> import android . graphics . drawable . Drawable ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . net . http . SslError ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . view . Window ; </a> 0
<a> import android . webkit . SslErrorHandler ; </a> 0
<a> import android . webkit . WebView ; </a> 0
<a> import android . webkit . WebViewClient ; </a> 0
<a> import android . widget . FrameLayout ; </a> 0
<a> import android . widget . ImageView ; </a> 0
<a> import android . widget . LinearLayout ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . * ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . internal . ServerProtocol ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> public class WebDialog extends Dialog { </a> 0
<a> private static final String LOG_TAG = Logger . LOG_TAG_BASE + "WebDialog" ; </a> 0
<a> private static final String DISPLAY_TOUCH = "touch" ; </a> 0
<a> private static final String USER_AGENT = "user_agent" ; </a> 0
<a> static final String REDIRECT_URI = "fbconnect://success" ; </a> 0
<a> static final String CANCEL_URI = "fbconnect://cancel" ; </a> 0
<a> public static final int DEFAULT_THEME = android . R . style . Theme_Translucent_NoTitleBar ; </a> 0
<a> private String url ; </a> 0
<a> private OnCompleteListener onCompleteListener ; </a> 0
<a> private WebView webView ; </a> 0
<a> private ProgressDialog spinner ; </a> 0
<a> private ImageView crossImageView ; </a> 0
<a> private FrameLayout contentFrameLayout ; </a> 0
<a> private boolean listenerCalled = false ; </a> 0
<a> private boolean isDetached = false ; </a> 0
<a> public interface OnCompleteListener { </a> 0
<a> void onComplete ( Bundle values , FacebookException error ) ; </a> 0
<a> } </a> 0
<a> public WebDialog ( Context context , String url ) { </a> 0
<a> this ( context , url , DEFAULT_THEME ) ; </a> 0
<a> } </a> 0
<a> public WebDialog ( Context context , String url , int theme ) { </a> 0
<a> super ( context , theme ) ; </a> 0
<a> this . url = url ; </a> 0
<a> } </a> 0
<a> public WebDialog ( Context context , String action , Bundle parameters , int theme , OnCompleteListener listener ) { </a> 0
<a> super ( context , theme ) ; </a> 0
<a> if ( parameters == null ) { </a> 0
<a> parameters = new Bundle ( ) ; </a> 0
<a> } </a> 0
<a> parameters . putString ( ServerProtocol . DIALOG_PARAM_DISPLAY , DISPLAY_TOUCH ) ; </a> 0
<a> parameters . putString ( ServerProtocol . DIALOG_PARAM_TYPE , USER_AGENT ) ; </a> 0
<a> Uri uri = Utility . buildUri ( ServerProtocol . DIALOG_AUTHORITY , ServerProtocol . DIALOG_PATH + action , parameters ) ; </a> 0
<a> this . url = uri . toString ( ) ; </a> 0
<a> onCompleteListener = listener ; </a> 0
<a> } </a> 0
<a> public void setOnCompleteListener ( OnCompleteListener listener ) { </a> 0
<a> onCompleteListener = listener ; </a> 0
<a> } </a> 0
<a> public OnCompleteListener getOnCompleteListener ( ) { </a> 0
<a> return onCompleteListener ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void dismiss ( ) { </a> 0
<a> if ( webView != null ) { </a> 0
<a> webView . stopLoading ( ) ; </a> 0
<a> } </a> 0
<a> if ( ! isDetached ) { </a> 0
<a> if ( spinner . isShowing ( ) ) { </a> 0
<a> spinner . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> super . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onDetachedFromWindow ( ) { </a> 0
<a> isDetached = true ; </a> 0
<a> super . onDetachedFromWindow ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onAttachedToWindow ( ) { </a> 0
<a> isDetached = false ; </a> 0
<a> super . onAttachedToWindow ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setOnCancelListener ( new OnCancelListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCancel ( DialogInterface dialogInterface ) { </a> 0
<a> sendCancelToListener ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> spinner = new ProgressDialog ( getContext ( ) ) ; </a> 0
<a> spinner . requestWindowFeature ( Window . FEATURE_NO_TITLE ) ; </a> 0
<a> spinner . setMessage ( getContext ( ) . getString ( R . string . com_facebook_loading ) ) ; </a> 0
<a> spinner . setOnCancelListener ( new OnCancelListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCancel ( DialogInterface dialogInterface ) { </a> 0
<a> sendCancelToListener ( ) ; </a> 0
<a> WebDialog . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> requestWindowFeature ( Window . FEATURE_NO_TITLE ) ; </a> 0
<a> contentFrameLayout = new FrameLayout ( getContext ( ) ) ; </a> 0
<a> createCrossImage ( ) ; </a> 0
<a> int crossWidth = crossImageView . getDrawable ( ) . getIntrinsicWidth ( ) ; </a> 0
<a> setUpWebView ( crossWidth / 2 ) ; </a> 0
<a> contentFrameLayout . addView ( crossImageView , new ViewGroup . LayoutParams ( </a> 0
<a> ViewGroup . LayoutParams . WRAP_CONTENT , ViewGroup . LayoutParams . WRAP_CONTENT ) ) ; </a> 0
<a> addContentView ( contentFrameLayout , </a> 1
<a> new ViewGroup . LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , ViewGroup . LayoutParams . MATCH_PARENT ) ) ; </a> 1
<a> } </a> 0
<a> private void sendSuccessToListener ( Bundle values ) { </a> 0
<a> if ( onCompleteListener != null && ! listenerCalled ) { </a> 0
<a> listenerCalled = true ; </a> 0
<a> onCompleteListener . onComplete ( values , null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void sendErrorToListener ( Throwable error ) { </a> 0
<a> if ( onCompleteListener != null && ! listenerCalled ) { </a> 0
<a> listenerCalled = true ; </a> 0
<a> FacebookException facebookException = null ; </a> 0
<a> if ( error instanceof FacebookException ) { </a> 0
<a> facebookException = ( FacebookException ) error ; </a> 0
<a> } else { </a> 0
<a> facebookException = new FacebookException ( error ) ; </a> 0
<a> } </a> 0
<a> onCompleteListener . onComplete ( null , facebookException ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void sendCancelToListener ( ) { </a> 0
<a> sendErrorToListener ( new FacebookOperationCanceledException ( ) ) ; </a> 0
<a> } </a> 0
<a> private void createCrossImage ( ) { </a> 0
<a> crossImageView = new ImageView ( getContext ( ) ) ; </a> 0
<a> crossImageView . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> sendCancelToListener ( ) ; </a> 0
<a> WebDialog . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Drawable crossDrawable = getContext ( ) . getResources ( ) . getDrawable ( R . drawable . com_facebook_close ) ; </a> 0
<a> crossImageView . setImageDrawable ( crossDrawable ) ; </a> 0
<a> crossImageView . setVisibility ( View . INVISIBLE ) ; </a> 0
<a> } </a> 0
<a> @ SuppressLint ( "SetJavaScriptEnabled" ) </a> 0
<a> private void setUpWebView ( int margin ) { </a> 0
<a> LinearLayout webViewContainer = new LinearLayout ( getContext ( ) ) ; </a> 0
<a> webView = new WebView ( getContext ( ) ) ; </a> 0
<a> webView . setVerticalScrollBarEnabled ( false ) ; </a> 0
<a> webView . setHorizontalScrollBarEnabled ( false ) ; </a> 0
<a> webView . setWebViewClient ( new DialogWebViewClient ( ) ) ; </a> 0
<a> webView . getSettings ( ) . setJavaScriptEnabled ( true ) ; </a> 0
<a> webView . loadUrl ( url ) ; </a> 0
<a> webView . setLayoutParams ( new FrameLayout . LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , </a> 0
<a> ViewGroup . LayoutParams . MATCH_PARENT ) ) ; </a> 0
<a> webView . setVisibility ( View . INVISIBLE ) ; </a> 0
<a> webView . getSettings ( ) . setSavePassword ( false ) ; </a> 0
<a> webViewContainer . setPadding ( margin , margin , margin , margin ) ; </a> 0
<a> webViewContainer . addView ( webView ) ; </a> 0
<a> contentFrameLayout . addView ( webViewContainer ) ; </a> 0
<a> } </a> 0
<a> private class DialogWebViewClient extends WebViewClient { </a> 0
<a> @ Override </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public boolean shouldOverrideUrlLoading ( WebView view , String url ) { </a> 0
<a> Utility . logd ( LOG_TAG , "Redirect URL: " + url ) ; </a> 0
<a> if ( url . startsWith ( WebDialog . REDIRECT_URI ) ) { </a> 0
<a> Bundle values = Util . parseUrl ( url ) ; </a> 0
<a> String error = values . getString ( "error" ) ; </a> 0
<a> if ( error == null ) { </a> 0
<a> error = values . getString ( "error_type" ) ; </a> 0
<a> } </a> 0
<a> String errorMessage = values . getString ( "error_msg" ) ; </a> 0
<a> if ( errorMessage == null ) { </a> 0
<a> errorMessage = values . getString ( "error_description" ) ; </a> 0
<a> } </a> 0
<a> String errorCodeString = values . getString ( "error_code" ) ; </a> 0
<a> int errorCode = FacebookRequestError . INVALID_ERROR_CODE ; </a> 0
<a> if ( ! Utility . isNullOrEmpty ( errorCodeString ) ) { </a> 0
<a> try { </a> 0
<a> errorCode = Integer . parseInt ( errorCodeString ) ; </a> 0
<a> } catch ( NumberFormatException ex ) { </a> 0
<a> errorCode = FacebookRequestError . INVALID_ERROR_CODE ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( Utility . isNullOrEmpty ( error ) && Utility </a> 0
<a> . isNullOrEmpty ( errorMessage ) && errorCode == FacebookRequestError . INVALID_ERROR_CODE ) { </a> 0
<a> sendSuccessToListener ( values ) ; </a> 0
<a> } else if ( error != null && ( error . equals ( "access_denied" ) || </a> 0
<a> error . equals ( "OAuthAccessDeniedException" ) ) ) { </a> 0
<a> sendCancelToListener ( ) ; </a> 0
<a> } else { </a> 0
<a> FacebookRequestError requestError = new FacebookRequestError ( errorCode , error , errorMessage ) ; </a> 0
<a> sendErrorToListener ( new FacebookServiceException ( requestError , errorMessage ) ) ; </a> 0
<a> } </a> 0
<a> WebDialog . this . dismiss ( ) ; </a> 0
<a> return true ; </a> 0
<a> } else if ( url . startsWith ( WebDialog . CANCEL_URI ) ) { </a> 0
<a> sendCancelToListener ( ) ; </a> 0
<a> WebDialog . this . dismiss ( ) ; </a> 0
<a> return true ; </a> 0
<a> } else if ( url . contains ( DISPLAY_TOUCH ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> getContext ( ) . startActivity ( </a> 0
<a> new Intent ( Intent . ACTION_VIEW , Uri . parse ( url ) ) ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onReceivedError ( WebView view , int errorCode , </a> 0
<a> String description , String failingUrl ) { </a> 0
<a> super . onReceivedError ( view , errorCode , description , failingUrl ) ; </a> 0
<a> sendErrorToListener ( new FacebookDialogException ( description , errorCode , failingUrl ) ) ; </a> 0
<a> WebDialog . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onReceivedSslError ( WebView view , SslErrorHandler handler , SslError error ) { </a> 0
<a> super . onReceivedSslError ( view , handler , error ) ; </a> 0
<a> sendErrorToListener ( new FacebookDialogException ( null , ERROR_FAILED_SSL_HANDSHAKE , null ) ) ; </a> 0
<a> handler . cancel ( ) ; </a> 0
<a> WebDialog . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onPageStarted ( WebView view , String url , Bitmap favicon ) { </a> 0
<a> Utility . logd ( LOG_TAG , "Webview loading URL: " + url ) ; </a> 0
<a> super . onPageStarted ( view , url , favicon ) ; </a> 0
<a> if ( ! isDetached ) { </a> 0
<a> spinner . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onPageFinished ( WebView view , String url ) { </a> 0
<a> super . onPageFinished ( view , url ) ; </a> 0
<a> if ( ! isDetached ) { </a> 0
<a> spinner . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> contentFrameLayout . setBackgroundColor ( Color . TRANSPARENT ) ; </a> 0
<a> webView . setVisibility ( View . VISIBLE ) ; </a> 0
<a> crossImageView . setVisibility ( View . VISIBLE ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class BuilderBase < CONCRETE extends BuilderBase < ? > > { </a> 0
<a> private static final String APP_ID_PARAM = "app_id" ; </a> 1
<a> public static final String ACCESS_TOKEN = "access_token" ; </a> 1
<a> private Context context ; </a> 0
<a> private Session session ; </a> 0
<a> private String applicationId ; </a> 0
<a> private String action ; </a> 0
<a> private int theme = DEFAULT_THEME ; </a> 0
<a> private OnCompleteListener listener ; </a> 0
<a> private Bundle parameters ; </a> 0
<a> protected BuilderBase ( Context context , Session session , String action , Bundle parameters ) { </a> 0
<a> Validate . notNull ( session , "session" ) ; </a> 0
<a> if ( ! session . isOpened ( ) ) { </a> 0
<a> throw new FacebookException ( "Attempted to use a Session that was not open." ) ; </a> 0
<a> } </a> 0
<a> this . session = session ; </a> 0
<a> finishInit ( context , action , parameters ) ; </a> 0
<a> } </a> 0
<a> protected BuilderBase ( Context context , String applicationId , String action , Bundle parameters ) { </a> 0
<a> Validate . notNullOrEmpty ( applicationId , "applicationId" ) ; </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> finishInit ( context , action , parameters ) ; </a> 0
<a> } </a> 0
<a> public CONCRETE setTheme ( int theme ) { </a> 0
<a> this . theme = theme ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> CONCRETE result = ( CONCRETE ) this ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public CONCRETE setOnCompleteListener ( OnCompleteListener listener ) { </a> 0
<a> this . listener = listener ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> CONCRETE result = ( CONCRETE ) this ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> public WebDialog build ( ) { </a> 0
<a> if ( session != null && session . isOpened ( ) ) { </a> 0
<a> parameters . putString ( APP_ID_PARAM , session . getApplicationId ( ) ) ; </a> 1
<a> parameters . putString ( ACCESS_TOKEN , session . getAccessToken ( ) ) ; </a> 1
<a> } else { </a> 0
<a> parameters . putString ( APP_ID_PARAM , applicationId ) ; </a> 1
<a> } </a> 0
<a> if ( ! parameters . containsKey ( ServerProtocol . DIALOG_PARAM_REDIRECT_URI ) ) { </a> 0
<a> parameters . putString ( ServerProtocol . DIALOG_PARAM_REDIRECT_URI , REDIRECT_URI ) ; </a> 0
<a> } </a> 0
<a> return new WebDialog ( context , action , parameters , theme , listener ) ; </a> 0
<a> } </a> 0
<a> protected String getApplicationId ( ) { </a> 0
<a> return applicationId ; </a> 0
<a> } </a> 0
<a> protected Context getContext ( ) { </a> 0
<a> return context ; </a> 0
<a> } </a> 0
<a> protected int getTheme ( ) { </a> 0
<a> return theme ; </a> 0
<a> } </a> 0
<a> protected Bundle getParameters ( ) { </a> 0
<a> return parameters ; </a> 0
<a> } </a> 0
<a> protected WebDialog . OnCompleteListener getListener ( ) { </a> 0
<a> return listener ; </a> 0
<a> } </a> 0
<a> private void finishInit ( Context context , String action , Bundle parameters ) { </a> 0
<a> this . context = context ; </a> 0
<a> this . action = action ; </a> 0
<a> if ( parameters != null ) { </a> 0
<a> this . parameters = parameters ; </a> 0
<a> } else { </a> 0
<a> this . parameters = new Bundle ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class Builder extends BuilderBase < Builder > { </a> 0
<a> public Builder ( Context context , Session session , String action , Bundle parameters ) { </a> 0
<a> super ( context , session , action , parameters ) ; </a> 0
<a> } </a> 0
<a> public Builder ( Context context , String applicationId , String action , Bundle parameters ) { </a> 0
<a> super ( context , applicationId , action , parameters ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class FeedDialogBuilder extends BuilderBase < FeedDialogBuilder > { </a> 0
<a> private static final String FEED_DIALOG = "feed" ; </a> 0
<a> private static final String FROM_PARAM = "from" ; </a> 0
<a> private static final String TO_PARAM = "to" ; </a> 0
<a> private static final String LINK_PARAM = "link" ; </a> 0
<a> private static final String PICTURE_PARAM = "picture" ; </a> 0
<a> private static final String SOURCE_PARAM = "source" ; </a> 0
<a> private static final String NAME_PARAM = "name" ; </a> 0
<a> private static final String CAPTION_PARAM = "caption" ; </a> 0
<a> private static final String DESCRIPTION_PARAM = "description" ; </a> 0
<a> public FeedDialogBuilder ( Context context , Session session ) { </a> 0
<a> super ( context , session , FEED_DIALOG , null ) ; </a> 0
<a> } </a> 0
<a> public FeedDialogBuilder ( Context context , Session session , Bundle parameters ) { </a> 0
<a> super ( context , session , FEED_DIALOG , parameters ) ; </a> 0
<a> } </a> 0
<a> public FeedDialogBuilder setFrom ( String id ) { </a> 0
<a> getParameters ( ) . putString ( FROM_PARAM , id ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public FeedDialogBuilder setTo ( String id ) { </a> 0
<a> getParameters ( ) . putString ( TO_PARAM , id ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public FeedDialogBuilder setLink ( String link ) { </a> 0
<a> getParameters ( ) . putString ( LINK_PARAM , link ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public FeedDialogBuilder setPicture ( String picture ) { </a> 0
<a> getParameters ( ) . putString ( PICTURE_PARAM , picture ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public FeedDialogBuilder setSource ( String source ) { </a> 0
<a> getParameters ( ) . putString ( SOURCE_PARAM , source ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public FeedDialogBuilder setName ( String name ) { </a> 0
<a> getParameters ( ) . putString ( NAME_PARAM , name ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public FeedDialogBuilder setCaption ( String caption ) { </a> 0
<a> getParameters ( ) . putString ( CAPTION_PARAM , caption ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public FeedDialogBuilder setDescription ( String description ) { </a> 0
<a> getParameters ( ) . putString ( DESCRIPTION_PARAM , description ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class RequestsDialogBuilder extends BuilderBase < RequestsDialogBuilder > { </a> 0
<a> private static final String APPREQUESTS_DIALOG = "apprequests" ; </a> 0
<a> private static final String MESSAGE_PARAM = "message" ; </a> 0
<a> private static final String TO_PARAM = "to" ; </a> 0
<a> private static final String DATA_PARAM = "data" ; </a> 0
<a> private static final String TITLE_PARAM = "title" ; </a> 0
<a> public RequestsDialogBuilder ( Context context , Session session ) { </a> 0
<a> super ( context , session , APPREQUESTS_DIALOG , null ) ; </a> 0
<a> } </a> 0
<a> public RequestsDialogBuilder ( Context context , Session session , Bundle parameters ) { </a> 0
<a> super ( context , session , APPREQUESTS_DIALOG , parameters ) ; </a> 0
<a> } </a> 0
<a> public RequestsDialogBuilder setMessage ( String message ) { </a> 0
<a> getParameters ( ) . putString ( MESSAGE_PARAM , message ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public RequestsDialogBuilder setTo ( String id ) { </a> 0
<a> getParameters ( ) . putString ( TO_PARAM , id ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public RequestsDialogBuilder setData ( String data ) { </a> 0
<a> getParameters ( ) . putString ( DATA_PARAM , data ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public RequestsDialogBuilder setTitle ( String title ) { </a> 0
<a> getParameters ( ) . putString ( TITLE_PARAM , title ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . AndroidTestCase ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public final class AccessTokenTests extends AndroidTestCase { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testEmptyToken ( ) { </a> 0
<a> List < String > permissions = Utility . arrayList ( ) ; </a> 0
<a> AccessToken token = AccessToken . createEmptyToken ( permissions ) ; </a> 0
<a> TestUtils . assertSamePermissions ( permissions , token ) ; </a> 0
<a> assertEquals ( "" , token . getToken ( ) ) ; </a> 0
<a> assertTrue ( token . isInvalid ( ) ) ; </a> 0
<a> assertTrue ( token . getExpires ( ) . before ( new Date ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testEmptyTokenWithPermissions ( ) { </a> 0
<a> List < String > permissions = Utility . arrayList ( "stream_publish" ) ; </a> 0
<a> AccessToken token = AccessToken . createEmptyToken ( permissions ) ; </a> 0
<a> TestUtils . assertSamePermissions ( permissions , token ) ; </a> 0
<a> assertEquals ( "" , token . getToken ( ) ) ; </a> 0
<a> assertTrue ( token . isInvalid ( ) ) ; </a> 0
<a> assertTrue ( token . getExpires ( ) . before ( new Date ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testFromDialog ( ) { </a> 0
<a> List < String > permissions = Utility . arrayList ( "stream_publish" , "go_outside_and_play" ) ; </a> 0
<a> String token = "AnImaginaryTokenValue" ; </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( "access_token" , token ) ; </a> 0
<a> bundle . putString ( "expires_in" , "60" ) ; </a> 0
<a> AccessToken accessToken = AccessToken . createFromWebBundle ( permissions , bundle , AccessTokenSource . WEB_VIEW ) ; </a> 0
<a> TestUtils . assertSamePermissions ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . WEB_VIEW , accessToken . getSource ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . isInvalid ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testFromSSOWithExpiresString ( ) { </a> 0
<a> List < String > permissions = Utility . arrayList ( "stream_publish" , "go_outside_and_play" ) ; </a> 0
<a> String token = "AnImaginaryTokenValue" ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . putExtra ( "access_token" , token ) ; </a> 0
<a> intent . putExtra ( "expires_in" , "60" ) ; </a> 0
<a> intent . putExtra ( "extra_extra" , "Something unrelated" ) ; </a> 0
<a> AccessToken accessToken = AccessToken </a> 0
<a> . createFromWebBundle ( permissions , intent . getExtras ( ) , AccessTokenSource . FACEBOOK_APPLICATION_WEB ) ; </a> 0
<a> TestUtils . assertSamePermissions ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . FACEBOOK_APPLICATION_WEB , accessToken . getSource ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . isInvalid ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testFromSSOWithExpiresLong ( ) { </a> 0
<a> List < String > permissions = Utility . arrayList ( "stream_publish" , "go_outside_and_play" ) ; </a> 0
<a> String token = "AnImaginaryTokenValue" ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . putExtra ( "access_token" , token ) ; </a> 0
<a> intent . putExtra ( "expires_in" , 60L ) ; </a> 0
<a> intent . putExtra ( "extra_extra" , "Something unrelated" ) ; </a> 0
<a> AccessToken accessToken = AccessToken </a> 0
<a> . createFromWebBundle ( permissions , intent . getExtras ( ) , AccessTokenSource . FACEBOOK_APPLICATION_WEB ) ; </a> 0
<a> TestUtils . assertSamePermissions ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . FACEBOOK_APPLICATION_WEB , accessToken . getSource ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . isInvalid ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testFromNativeLogin ( ) { </a> 0
<a> ArrayList < String > permissions = Utility . arrayList ( "stream_publish" , "go_outside_and_play" ) ; </a> 0
<a> String token = "AnImaginaryTokenValue" ; </a> 0
<a> long nowSeconds = new Date ( ) . getTime ( ) / 1000 ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . putExtra ( NativeProtocol . EXTRA_ACCESS_TOKEN , token ) ; </a> 0
<a> intent . putExtra ( NativeProtocol . EXTRA_EXPIRES_SECONDS_SINCE_EPOCH , nowSeconds + 60L ) ; </a> 0
<a> intent . putExtra ( NativeProtocol . EXTRA_PERMISSIONS , permissions ) ; </a> 0
<a> AccessToken accessToken = AccessToken . createFromNativeLogin ( </a> 0
<a> intent . getExtras ( ) , AccessTokenSource . FACEBOOK_APPLICATION_NATIVE ) ; </a> 0
<a> TestUtils . assertSamePermissions ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . FACEBOOK_APPLICATION_NATIVE , accessToken . getSource ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . isInvalid ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCacheRoundtrip ( ) { </a> 0
<a> ArrayList < String > permissions = Utility . arrayList ( "stream_publish" , "go_outside_and_play" ) ; </a> 0
<a> String token = "AnImaginaryTokenValue" ; </a> 0
<a> Date later = TestUtils . nowPlusSeconds ( 60 ) ; </a> 0
<a> Date earlier = TestUtils . nowPlusSeconds ( - 60 ) ; </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> TokenCachingStrategy . putToken ( bundle , token ) ; </a> 0
<a> TokenCachingStrategy . putExpirationDate ( bundle , later ) ; </a> 0
<a> TokenCachingStrategy . putSource ( bundle , AccessTokenSource . FACEBOOK_APPLICATION_WEB ) ; </a> 0
<a> TokenCachingStrategy . putLastRefreshDate ( bundle , earlier ) ; </a> 0
<a> TokenCachingStrategy . putPermissions ( bundle , permissions ) ; </a> 0
<a> AccessToken accessToken = AccessToken . createFromCache ( bundle ) ; </a> 0
<a> TestUtils . assertSamePermissions ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . FACEBOOK_APPLICATION_WEB , accessToken . getSource ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . isInvalid ( ) ) ; </a> 0
<a> Bundle cache = accessToken . toCacheBundle ( ) ; </a> 0
<a> TestUtils . assertEqualContents ( bundle , cache ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCachePutGet ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> for ( String token : new String [ ] { "" , "A completely random token value" } ) { </a> 0
<a> TokenCachingStrategy . putToken ( bundle , token ) ; </a> 0
<a> assertEquals ( token , TokenCachingStrategy . getToken ( bundle ) ) ; </a> 0
<a> } </a> 0
<a> for ( Date date : new Date [ ] { new Date ( 42 ) , new Date ( ) } ) { </a> 0
<a> TokenCachingStrategy . putExpirationDate ( bundle , date ) ; </a> 0
<a> assertEquals ( date , TokenCachingStrategy . getExpirationDate ( bundle ) ) ; </a> 0
<a> TokenCachingStrategy . putLastRefreshDate ( bundle , date ) ; </a> 0
<a> assertEquals ( date , TokenCachingStrategy . getLastRefreshDate ( bundle ) ) ; </a> 0
<a> } </a> 0
<a> for ( long milliseconds : new long [ ] { 0 , - 1 , System . currentTimeMillis ( ) } ) { </a> 0
<a> TokenCachingStrategy . putExpirationMilliseconds ( bundle , milliseconds ) ; </a> 0
<a> assertEquals ( milliseconds , TokenCachingStrategy . getExpirationMilliseconds ( bundle ) ) ; </a> 0
<a> TokenCachingStrategy . putLastRefreshMilliseconds ( bundle , milliseconds ) ; </a> 0
<a> assertEquals ( milliseconds , TokenCachingStrategy . getLastRefreshMilliseconds ( bundle ) ) ; </a> 0
<a> } </a> 0
<a> for ( AccessTokenSource source : AccessTokenSource . values ( ) ) { </a> 0
<a> TokenCachingStrategy . putSource ( bundle , source ) ; </a> 0
<a> assertEquals ( source , TokenCachingStrategy . getSource ( bundle ) ) ; </a> 0
<a> } </a> 0
<a> List < String > normalList = Arrays . asList ( "" , "Another completely random token value" ) ; </a> 0
<a> List < String > emptyList = Arrays . asList ( ) ; </a> 0
<a> ArrayList < String > normalArrayList = new ArrayList < String > ( normalList ) ; </a> 0
<a> ArrayList < String > emptyArrayList = new ArrayList < String > ( ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> List < List < String > > permissionLists = Arrays </a> 0
<a> . asList ( normalList , emptyList , normalArrayList , emptyArrayList ) ; </a> 0
<a> for ( List < String > list : permissionLists ) { </a> 0
<a> TokenCachingStrategy . putPermissions ( bundle , list ) ; </a> 0
<a> TestUtils . assertSamePermissions ( list , TokenCachingStrategy . getPermissions ( bundle ) ) ; </a> 0
<a> } </a> 0
<a> normalArrayList . add ( null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testBasicSerialization ( ) throws IOException { </a> 0
<a> AccessToken accessToken = AccessToken . createFromString ( "a token" , </a> 0
<a> Arrays . asList ( "permission_1" , "permission_2" ) , AccessTokenSource . WEB_VIEW ) ; </a> 0
<a> AccessToken res = TestUtils . serializeAndUnserialize ( accessToken ) ; </a> 0
<a> assertEquals ( accessToken . getPermissions ( ) , res . getPermissions ( ) ) ; </a> 0
<a> assertEquals ( accessToken . getToken ( ) , res . getToken ( ) ) ; </a> 0
<a> assertEquals ( accessToken . getSource ( ) , res . getSource ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testPermissionsAreImmutable ( ) { </a> 0
<a> List < String > permissions = Arrays . asList ( "go to Jail" , "do not pass Go" ) ; </a> 0
<a> AccessToken accessToken = new AccessToken ( "some token" , new Date ( ) , permissions , </a> 0
<a> AccessTokenSource . FACEBOOK_APPLICATION_WEB , new Date ( ) ) ; </a> 0
<a> permissions = accessToken . getPermissions ( ) ; </a> 0
<a> try { </a> 0
<a> permissions . add ( "can't touch this" ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( UnsupportedOperationException ex ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreateFromExistingTokenDefaults ( ) { </a> 0
<a> final String token = "A token of my esteem" ; </a> 0
<a> AccessToken accessToken = AccessToken . createFromExistingAccessToken ( token , null , null , null , null ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( new Date ( Long . MAX_VALUE ) , accessToken . getExpires ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . FACEBOOK_APPLICATION_WEB , accessToken . getSource ( ) ) ; </a> 0
<a> assertEquals ( 0 , accessToken . getPermissions ( ) . size ( ) ) ; </a> 0
<a> long delta = accessToken . getLastRefresh ( ) . getTime ( ) - new Date ( ) . getTime ( ) ; </a> 0
<a> assertTrue ( delta < 1000 ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreateFromExistingToken ( ) { </a> 0
<a> final String token = "A token of my esteem" ; </a> 0
<a> final List < String > permissions = Arrays . asList ( "walk" , "chew gum" ) ; </a> 0
<a> final Date expires = new Date ( 2025 , 5 , 3 ) ; </a> 0
<a> final Date lastRefresh = new Date ( 2023 , 8 , 15 ) ; </a> 0
<a> final AccessTokenSource source = AccessTokenSource . WEB_VIEW ; </a> 0
<a> AccessToken accessToken = AccessToken </a> 0
<a> . createFromExistingAccessToken ( token , expires , lastRefresh , source , permissions ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( expires , accessToken . getExpires ( ) ) ; </a> 0
<a> assertEquals ( lastRefresh , accessToken . getLastRefresh ( ) ) ; </a> 0
<a> assertEquals ( source , accessToken . getSource ( ) ) ; </a> 0
<a> assertEquals ( permissions , accessToken . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class AsyncRequestTests extends FacebookTestCase { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanLaunchAsyncRequestFromUiThread ( ) { </a> 0
<a> Request request = Request . newPostRequest ( null , "me/feeds" , null , null ) ; </a> 0
<a> try { </a> 0
<a> TestRequestAsyncTask task = createAsyncTaskOnUiThread ( request ) ; </a> 0
<a> assertNotNull ( task ) ; </a> 0
<a> } catch ( Throwable throwable ) { </a> 0
<a> assertNull ( throwable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteWithNullRequestsThrows ( ) throws Exception { </a> 0
<a> try { </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( ( Request [ ] ) null ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccessOrRethrow ( 1 ) ; </a> 0
<a> fail ( "expected NullPointerException" ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteBatchWithZeroRequestsThrows ( ) throws Exception { </a> 0
<a> try { </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( new Request [ ] { } ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccessOrRethrow ( 1 ) ; </a> 0
<a> fail ( "expected IllegalArgumentException" ) ; </a> 0
<a> } catch ( IllegalArgumentException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteBatchWithNullRequestThrows ( ) throws Exception { </a> 0
<a> try { </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( new Request [ ] { null } ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccessOrRethrow ( 1 ) ; </a> 0
<a> fail ( "expected NullPointerException" ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteSingleGet ( ) { </a> 0
<a> Request request = new Request ( null , "TourEiffel" , null , null , new ExpectSuccessCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> protected void performAsserts ( Response response ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> GraphPlace graphPlace = response . getGraphObjectAs ( GraphPlace . class ) ; </a> 0
<a> assertEquals ( "Paris" , graphPlace . getLocation ( ) . getCity ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( request ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccess ( 2 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteSingleGetUsingHttpURLConnection ( ) { </a> 0
<a> Request request = new Request ( null , "TourEiffel" , null , null , new ExpectSuccessCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> protected void performAsserts ( Response response ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> GraphPlace graphPlace = response . getGraphObjectAs ( GraphPlace . class ) ; </a> 0
<a> assertEquals ( "Paris" , graphPlace . getLocation ( ) . getCity ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> HttpURLConnection connection = Request . toHttpConnection ( request ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( connection , Arrays . asList ( new Request [ ] { request } ) ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccess ( 2 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteSingleGetFailureCase ( ) { </a> 0
<a> Request request = new Request ( null , "-1" , null , null , new ExpectFailureCallback ( ) ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( request ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccess ( 2 ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testBatchWithoutAppIDIsError ( ) throws Throwable { </a> 0
<a> Request request1 = new Request ( null , "TourEiffel" , null , null , new ExpectFailureCallback ( ) ) ; </a> 0
<a> Request request2 = new Request ( null , "SpaceNeedle" , null , null , new ExpectFailureCallback ( ) ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( request1 , request2 ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccessOrRethrow ( 3 ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testMixedSuccessAndFailure ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> final int NUM_REQUESTS = 8 ; </a> 0
<a> Request [ ] requests = new Request [ NUM_REQUESTS ] ; </a> 0
<a> for ( int i = 0 ; i < NUM_REQUESTS ; ++ i ) { </a> 0
<a> boolean shouldSucceed = ( i % 2 ) == 1 ; </a> 0
<a> if ( shouldSucceed ) { </a> 0
<a> requests [ i ] = new Request ( session , "me" , null , null , new ExpectSuccessCallback ( ) ) ; </a> 0
<a> } else { </a> 0
<a> requests [ i ] = new Request ( session , "-1" , null , null , new ExpectFailureCallback ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( requests ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccess ( NUM_REQUESTS + 1 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testStaticExecuteMeAsync ( ) { </a> 0
<a> final TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> class MeCallback extends ExpectSuccessCallback implements Request . GraphUserCallback { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( GraphUser me , Response response ) { </a> 0
<a> assertNotNull ( me ) ; </a> 0
<a> assertEquals ( session . getTestUserId ( ) , me . getId ( ) ) ; </a> 0
<a> RequestTests . validateMeResponse ( session , response ) ; </a> 0
<a> onCompleted ( response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> runOnBlockerThread ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Request . executeMeRequestAsync ( session , new MeCallback ( ) ) ; </a> 0
<a> } </a> 0
<a> } , false ) ; </a> 0
<a> waitAndAssertSuccess ( 1 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testStaticExecuteMyFriendsAsync ( ) { </a> 0
<a> final TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> class FriendsCallback extends ExpectSuccessCallback implements Request . GraphUserListCallback { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( List < GraphUser > friends , Response response ) { </a> 0
<a> assertNotNull ( friends ) ; </a> 0
<a> RequestTests . validateMyFriendsResponse ( session , response ) ; </a> 0
<a> onCompleted ( response ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> runOnBlockerThread ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Request . executeMyFriendsRequestAsync ( session , new FriendsCallback ( ) ) ; </a> 0
<a> } </a> 0
<a> } , false ) ; </a> 0
<a> waitAndAssertSuccess ( 1 ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testBatchUploadPhoto ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUserAndPermissions ( null , "user_photos" ) ; </a> 0
<a> final int image1Size = 120 ; </a> 0
<a> final int image2Size = 150 ; </a> 0
<a> Bitmap bitmap1 = createTestBitmap ( image1Size ) ; </a> 0
<a> Bitmap bitmap2 = createTestBitmap ( image2Size ) ; </a> 0
<a> Request uploadRequest1 = Request . newUploadPhotoRequest ( session , bitmap1 , null ) ; </a> 0
<a> uploadRequest1 . setBatchEntryName ( "uploadRequest1" ) ; </a> 0
<a> Request uploadRequest2 = Request . newUploadPhotoRequest ( session , bitmap2 , null ) ; </a> 0
<a> uploadRequest2 . setBatchEntryName ( "uploadRequest2" ) ; </a> 0
<a> Request getRequest1 = new Request ( session , "{result=uploadRequest1:$.id}" , null , null , </a> 0
<a> new ExpectSuccessCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> protected void performAsserts ( Response response ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> GraphObject retrievedPhoto = response . getGraphObject ( ) ; </a> 0
<a> assertNotNull ( retrievedPhoto ) ; </a> 0
<a> assertEquals ( image1Size , retrievedPhoto . getProperty ( "width" ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Request getRequest2 = new Request ( session , "{result=uploadRequest2:$.id}" , null , null , </a> 0
<a> new ExpectSuccessCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> protected void performAsserts ( Response response ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> GraphObject retrievedPhoto = response . getGraphObject ( ) ; </a> 0
<a> assertNotNull ( retrievedPhoto ) ; </a> 0
<a> assertEquals ( image2Size , retrievedPhoto . getProperty ( "width" ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( uploadRequest1 , uploadRequest2 , getRequest1 , getRequest2 ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccess ( 3 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testShortTimeoutCausesFailure ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = new Request ( session , "me/likes" , null , null , new ExpectFailureCallback ( ) ) ; </a> 0
<a> RequestBatch requestBatch = new RequestBatch ( request ) ; </a> 0
<a> requestBatch . setTimeout ( 1 ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( requestBatch ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccess ( 2 ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testLongTimeoutAllowsSuccess ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = new Request ( session , "me" , null , null , new ExpectSuccessCallback ( ) ) ; </a> 0
<a> RequestBatch requestBatch = new RequestBatch ( request ) ; </a> 0
<a> requestBatch . setTimeout ( 10000 ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( requestBatch ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccess ( 2 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . internal . CacheableRequestBatch ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . atomic . AtomicInteger ; </a> 0
<a> public class BatchRequestTests extends FacebookTestCase { </a> 0
<a> protected void setUp ( ) throws Exception { </a> 0
<a> super . setUp ( ) ; </a> 0
<a> Request . setDefaultBatchApplicationId ( null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreateEmptyRequestBatch ( ) { </a> 0
<a> CacheableRequestBatch batch = new CacheableRequestBatch ( ) ; </a> 0
<a> Request meRequest = Request . newMeRequest ( null , null ) ; </a> 0
<a> assertEquals ( 0 , batch . size ( ) ) ; </a> 0
<a> batch . add ( meRequest ) ; </a> 0
<a> assertEquals ( 1 , batch . size ( ) ) ; </a> 0
<a> assertEquals ( meRequest , batch . get ( 0 ) ) ; </a> 0
<a> String key = "The Key" ; </a> 0
<a> assertNull ( batch . getCacheKeyOverride ( ) ) ; </a> 0
<a> batch . setCacheKeyOverride ( key ) ; </a> 0
<a> assertEquals ( key , batch . getCacheKeyOverride ( ) ) ; </a> 0
<a> assertTrue ( ! batch . getForceRoundTrip ( ) ) ; </a> 0
<a> batch . setForceRoundTrip ( true ) ; </a> 0
<a> assertTrue ( batch . getForceRoundTrip ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreateNonemptyRequestBatch ( ) { </a> 0
<a> Request meRequest = Request . newMeRequest ( null , null ) ; </a> 0
<a> RequestBatch batch = new RequestBatch ( new Request [ ] { meRequest , meRequest } ) ; </a> 0
<a> assertEquals ( 2 , batch . size ( ) ) ; </a> 0
<a> assertEquals ( meRequest , batch . get ( 0 ) ) ; </a> 0
<a> assertEquals ( meRequest , batch . get ( 1 ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testBatchWithoutAppIDIsError ( ) { </a> 0
<a> Request request1 = new Request ( null , "TourEiffel" , null , null , new ExpectFailureCallback ( ) ) ; </a> 0
<a> Request request2 = new Request ( null , "SpaceNeedle" , null , null , new ExpectFailureCallback ( ) ) ; </a> 0
<a> Request . executeBatchAndWait ( request1 , request2 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteBatchedGets ( ) throws IOException { </a> 0
<a> setBatchApplicationIdForTestApp ( ) ; </a> 0
<a> Request request1 = new Request ( null , "TourEiffel" ) ; </a> 0
<a> Request request2 = new Request ( null , "SpaceNeedle" ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( request1 , request2 ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> assertTrue ( responses . get ( 0 ) . getError ( ) == null ) ; </a> 0
<a> assertTrue ( responses . get ( 1 ) . getError ( ) == null ) ; </a> 0
<a> GraphPlace eiffelTower = responses . get ( 0 ) . getGraphObjectAs ( GraphPlace . class ) ; </a> 0
<a> GraphPlace spaceNeedle = responses . get ( 1 ) . getGraphObjectAs ( GraphPlace . class ) ; </a> 0
<a> assertTrue ( eiffelTower != null ) ; </a> 0
<a> assertTrue ( spaceNeedle != null ) ; </a> 0
<a> assertEquals ( "Paris" , eiffelTower . getLocation ( ) . getCity ( ) ) ; </a> 0
<a> assertEquals ( "Seattle" , spaceNeedle . getLocation ( ) . getCity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testFacebookErrorResponsesCreateErrors ( ) { </a> 0
<a> setBatchApplicationIdForTestApp ( ) ; </a> 0
<a> Request request1 = new Request ( null , "somestringthatshouldneverbeavalidfobjectid" ) ; </a> 0
<a> Request request2 = new Request ( null , "someotherstringthatshouldneverbeavalidfobjectid" ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( request1 , request2 ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> assertTrue ( responses . get ( 0 ) . getError ( ) != null ) ; </a> 0
<a> assertTrue ( responses . get ( 1 ) . getError ( ) != null ) ; </a> 0
<a> FacebookRequestError error = responses . get ( 0 ) . getError ( ) ; </a> 0
<a> assertTrue ( error . getException ( ) instanceof FacebookServiceException ) ; </a> 0
<a> assertTrue ( error . getErrorType ( ) != null ) ; </a> 0
<a> assertTrue ( error . getErrorCode ( ) != FacebookRequestError . INVALID_ERROR_CODE ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testBatchPostStatusUpdate ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> GraphObject statusUpdate1 = createStatusUpdate ( ) ; </a> 0
<a> GraphObject statusUpdate2 = createStatusUpdate ( ) ; </a> 0
<a> Request postRequest1 = Request . newPostRequest ( session , "me/feed" , statusUpdate1 , null ) ; </a> 0
<a> postRequest1 . setBatchEntryName ( "postRequest1" ) ; </a> 0
<a> Request postRequest2 = Request . newPostRequest ( session , "me/feed" , statusUpdate2 , null ) ; </a> 0
<a> postRequest2 . setBatchEntryName ( "postRequest2" ) ; </a> 0
<a> Request getRequest1 = new Request ( session , "{result=postRequest1:$.id}" ) ; </a> 0
<a> Request getRequest2 = new Request ( session , "{result=postRequest2:$.id}" ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( postRequest1 , postRequest2 , getRequest1 , getRequest2 ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 4 , responses . size ( ) ) ; </a> 0
<a> assertNoErrors ( responses ) ; </a> 0
<a> GraphObject retrievedStatusUpdate1 = responses . get ( 2 ) . getGraphObject ( ) ; </a> 0
<a> GraphObject retrievedStatusUpdate2 = responses . get ( 3 ) . getGraphObject ( ) ; </a> 0
<a> assertNotNull ( retrievedStatusUpdate1 ) ; </a> 0
<a> assertNotNull ( retrievedStatusUpdate2 ) ; </a> 0
<a> assertEquals ( statusUpdate1 . getProperty ( "message" ) , retrievedStatusUpdate1 . getProperty ( "message" ) ) ; </a> 0
<a> assertEquals ( statusUpdate2 . getProperty ( "message" ) , retrievedStatusUpdate2 . getProperty ( "message" ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testTwoDifferentAccessTokens ( ) { </a> 0
<a> TestSession session1 = openTestSessionWithSharedUser ( ) ; </a> 0
<a> TestSession session2 = openTestSessionWithSharedUser ( SECOND_TEST_USER_TAG ) ; </a> 0
<a> Request request1 = Request . newMeRequest ( session1 , null ) ; </a> 0
<a> Request request2 = Request . newMeRequest ( session2 , null ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( request1 , request2 ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> GraphUser user1 = responses . get ( 0 ) . getGraphObjectAs ( GraphUser . class ) ; </a> 0
<a> GraphUser user2 = responses . get ( 1 ) . getGraphObjectAs ( GraphUser . class ) ; </a> 0
<a> assertNotNull ( user1 ) ; </a> 0
<a> assertNotNull ( user2 ) ; </a> 0
<a> assertFalse ( user1 . getId ( ) . equals ( user2 . getId ( ) ) ) ; </a> 0
<a> assertEquals ( session1 . getTestUserId ( ) , user1 . getId ( ) ) ; </a> 0
<a> assertEquals ( session2 . getTestUserId ( ) , user2 . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testBatchWithValidSessionAndNoSession ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request1 = new Request ( session , "me" ) ; </a> 0
<a> Request request2 = new Request ( null , "zuck" ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( request1 , request2 ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> GraphUser user1 = responses . get ( 0 ) . getGraphObjectAs ( GraphUser . class ) ; </a> 0
<a> GraphUser user2 = responses . get ( 1 ) . getGraphObjectAs ( GraphUser . class ) ; </a> 0
<a> assertNotNull ( user1 ) ; </a> 0
<a> assertNotNull ( user2 ) ; </a> 0
<a> assertFalse ( user1 . getId ( ) . equals ( user2 . getId ( ) ) ) ; </a> 0
<a> assertEquals ( session . getTestUserId ( ) , user1 . getId ( ) ) ; </a> 0
<a> assertEquals ( "4" , user2 . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testBatchWithNoSessionAndValidSession ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request1 = new Request ( null , "zuck" ) ; </a> 0
<a> Request request2 = new Request ( session , "me" ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( request1 , request2 ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> GraphUser user1 = responses . get ( 0 ) . getGraphObjectAs ( GraphUser . class ) ; </a> 0
<a> GraphUser user2 = responses . get ( 1 ) . getGraphObjectAs ( GraphUser . class ) ; </a> 0
<a> assertNotNull ( user1 ) ; </a> 0
<a> assertNotNull ( user2 ) ; </a> 0
<a> assertFalse ( user1 . getId ( ) . equals ( user2 . getId ( ) ) ) ; </a> 0
<a> assertEquals ( "4" , user1 . getId ( ) ) ; </a> 0
<a> assertEquals ( session . getTestUserId ( ) , user2 . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testBatchWithTwoSessionlessRequestsAndDefaultAppID ( ) { </a> 0
<a> TestSession session = getTestSessionWithSharedUser ( null ) ; </a> 0
<a> String appId = session . getApplicationId ( ) ; </a> 0
<a> Request . setDefaultBatchApplicationId ( appId ) ; </a> 0
<a> Request request1 = new Request ( null , "zuck" ) ; </a> 0
<a> Request request2 = new Request ( null , "zuck" ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( request1 , request2 ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> GraphUser user1 = responses . get ( 0 ) . getGraphObjectAs ( GraphUser . class ) ; </a> 0
<a> GraphUser user2 = responses . get ( 1 ) . getGraphObjectAs ( GraphUser . class ) ; </a> 0
<a> assertNotNull ( user1 ) ; </a> 0
<a> assertNotNull ( user2 ) ; </a> 0
<a> assertEquals ( "4" , user1 . getId ( ) ) ; </a> 0
<a> assertEquals ( "4" , user2 . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testMixedSuccessAndFailure ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> final int NUM_REQUESTS = 8 ; </a> 0
<a> Request [ ] requests = new Request [ NUM_REQUESTS ] ; </a> 0
<a> for ( int i = 0 ; i < NUM_REQUESTS ; ++ i ) { </a> 0
<a> boolean shouldSucceed = ( i % 2 ) == 1 ; </a> 0
<a> requests [ i ] = new Request ( session , shouldSucceed ? "me" : "-1" ) ; </a> 0
<a> } </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( requests ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( NUM_REQUESTS , responses . size ( ) ) ; </a> 0
<a> for ( int i = 0 ; i < NUM_REQUESTS ; ++ i ) { </a> 0
<a> boolean shouldSucceed = ( i % 2 ) == 1 ; </a> 0
<a> Response response = responses . get ( i ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> if ( shouldSucceed ) { </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertNotNull ( response . getGraphObject ( ) ) ; </a> 0
<a> } else { </a> 0
<a> assertNotNull ( response . getError ( ) ) ; </a> 0
<a> assertNull ( response . getGraphObject ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testClosedSessionDoesntAppendAccessToken ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> Request request1 = new Request ( session , "me" , null , null , new ExpectFailureCallback ( ) ) ; </a> 0
<a> Request request2 = new Request ( session , "me" , null , null , new ExpectFailureCallback ( ) ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( request1 , request2 ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccess ( 2 ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testBatchUploadPhoto ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUserAndPermissions ( null , "user_photos" ) ; </a> 0
<a> final int image1Size = 120 ; </a> 0
<a> final int image2Size = 150 ; </a> 0
<a> Bitmap bitmap1 = createTestBitmap ( image1Size ) ; </a> 0
<a> Bitmap bitmap2 = createTestBitmap ( image2Size ) ; </a> 0
<a> Request uploadRequest1 = Request . newUploadPhotoRequest ( session , bitmap1 , null ) ; </a> 0
<a> uploadRequest1 . setBatchEntryName ( "uploadRequest1" ) ; </a> 0
<a> Request uploadRequest2 = Request . newUploadPhotoRequest ( session , bitmap2 , null ) ; </a> 0
<a> uploadRequest2 . setBatchEntryName ( "uploadRequest2" ) ; </a> 0
<a> Request getRequest1 = new Request ( session , "{result=uploadRequest1:$.id}" ) ; </a> 0
<a> Request getRequest2 = new Request ( session , "{result=uploadRequest2:$.id}" ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( uploadRequest1 , uploadRequest2 , getRequest1 , getRequest2 ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 4 , responses . size ( ) ) ; </a> 0
<a> assertNoErrors ( responses ) ; </a> 0
<a> GraphObject retrievedPhoto1 = responses . get ( 2 ) . getGraphObject ( ) ; </a> 0
<a> GraphObject retrievedPhoto2 = responses . get ( 3 ) . getGraphObject ( ) ; </a> 0
<a> assertNotNull ( retrievedPhoto1 ) ; </a> 0
<a> assertNotNull ( retrievedPhoto2 ) ; </a> 0
<a> assertEquals ( image1Size , retrievedPhoto1 . getProperty ( "width" ) ) ; </a> 0
<a> assertEquals ( image2Size , retrievedPhoto2 . getProperty ( "width" ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCallbacksAreCalled ( ) { </a> 0
<a> setBatchApplicationIdForTestApp ( ) ; </a> 0
<a> ArrayList < Request > requests = new ArrayList < Request > ( ) ; </a> 0
<a> final ArrayList < Boolean > calledBack = new ArrayList < Boolean > ( ) ; </a> 0
<a> final int NUM_REQUESTS = 4 ; </a> 0
<a> for ( int i = 0 ; i < NUM_REQUESTS ; ++ i ) { </a> 0
<a> Request request = new Request ( null , "4" ) ; </a> 0
<a> request . setCallback ( new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> calledBack . add ( true ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> requests . add ( request ) ; </a> 0
<a> } </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( requests ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertTrue ( calledBack . size ( ) == NUM_REQUESTS ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCacheMyFriendsRequest ( ) throws IOException { </a> 0
<a> Response . getResponseCache ( ) . clearForTest ( ) ; </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = Request . newMyFriendsRequest ( session , null ) ; </a> 0
<a> CacheableRequestBatch batch = new CacheableRequestBatch ( request ) ; </a> 0
<a> batch . setCacheKeyOverride ( "MyFriends" ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 1 , responses . size ( ) ) ; </a> 0
<a> Response response = responses . get ( 0 ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( ! response . getIsFromCache ( ) ) ; </a> 0
<a> responses = Request . executeBatchAndWait ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 1 , responses . size ( ) ) ; </a> 0
<a> response = responses . get ( 0 ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( response . getIsFromCache ( ) ) ; </a> 0
<a> batch . setForceRoundTrip ( true ) ; </a> 0
<a> responses = Request . executeBatchAndWait ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 1 , responses . size ( ) ) ; </a> 0
<a> response = responses . get ( 0 ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( ! response . getIsFromCache ( ) ) ; </a> 0
<a> Response . getResponseCache ( ) . clearForTest ( ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCacheMeAndMyFriendsRequest ( ) throws IOException { </a> 0
<a> Response . getResponseCache ( ) . clearForTest ( ) ; </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request requestMe = Request . newMeRequest ( session , null ) ; </a> 0
<a> Request requestMyFriends = Request . newMyFriendsRequest ( session , null ) ; </a> 0
<a> CacheableRequestBatch batch = new CacheableRequestBatch ( new Request [ ] { requestMyFriends , requestMe } ) ; </a> 0
<a> batch . setCacheKeyOverride ( "MyFriends" ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> for ( Response response : responses ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( ! response . getIsFromCache ( ) ) ; </a> 0
<a> } </a> 0
<a> responses = Request . executeBatchAndWait ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> for ( Response response : responses ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( response . getIsFromCache ( ) ) ; </a> 0
<a> } </a> 0
<a> batch . setForceRoundTrip ( true ) ; </a> 0
<a> responses = Request . executeBatchAndWait ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> for ( Response response : responses ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertTrue ( ! response . getIsFromCache ( ) ) ; </a> 0
<a> } </a> 0
<a> Response . getResponseCache ( ) . clearForTest ( ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExplicitDependencyDefaultsToOmitFirstResponse ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request requestMe = Request . newMeRequest ( session , null ) ; </a> 0
<a> requestMe . setBatchEntryName ( "me_request" ) ; </a> 0
<a> Request requestMyFriends = Request . newMyFriendsRequest ( session , null ) ; </a> 0
<a> requestMyFriends . setBatchEntryDependsOn ( "me_request" ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( requestMe , requestMyFriends ) ; </a> 0
<a> Response meResponse = responses . get ( 0 ) ; </a> 0
<a> Response myFriendsResponse = responses . get ( 1 ) ; </a> 0
<a> assertNull ( meResponse . getGraphObject ( ) ) ; </a> 0
<a> assertNotNull ( myFriendsResponse . getGraphObject ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExplicitDependencyCanIncludeFirstResponse ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request requestMe = Request . newMeRequest ( session , null ) ; </a> 0
<a> requestMe . setBatchEntryName ( "me_request" ) ; </a> 0
<a> requestMe . setBatchEntryOmitResultOnSuccess ( false ) ; </a> 0
<a> Request requestMyFriends = Request . newMyFriendsRequest ( session , null ) ; </a> 0
<a> requestMyFriends . setBatchEntryDependsOn ( "me_request" ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( requestMe , requestMyFriends ) ; </a> 0
<a> Response meResponse = responses . get ( 0 ) ; </a> 0
<a> Response myFriendsResponse = responses . get ( 1 ) ; </a> 0
<a> assertNotNull ( meResponse . getGraphObject ( ) ) ; </a> 0
<a> assertNotNull ( myFriendsResponse . getGraphObject ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testAddAndRemoveBatchCallbacks ( ) { </a> 0
<a> RequestBatch batch = new RequestBatch ( ) ; </a> 0
<a> RequestBatch . Callback callback1 = new RequestBatch . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onBatchCompleted ( RequestBatch batch ) { </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> RequestBatch . Callback callback2 = new RequestBatch . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onBatchCompleted ( RequestBatch batch ) { </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> batch . addCallback ( callback1 ) ; </a> 0
<a> batch . addCallback ( callback2 ) ; </a> 0
<a> assertEquals ( 2 , batch . getCallbacks ( ) . size ( ) ) ; </a> 0
<a> batch . removeCallback ( callback1 ) ; </a> 0
<a> batch . removeCallback ( callback2 ) ; </a> 0
<a> assertEquals ( 0 , batch . getCallbacks ( ) . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testBatchCallbackIsCalled ( ) { </a> 0
<a> final AtomicInteger count = new AtomicInteger ( ) ; </a> 0
<a> Request request1 = Request . newGraphPathRequest ( null , "4" , new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> count . incrementAndGet ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Request request2 = Request . newGraphPathRequest ( null , "4" , new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> count . incrementAndGet ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> RequestBatch batch = new RequestBatch ( request1 , request2 ) ; </a> 0
<a> batch . addCallback ( new RequestBatch . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onBatchCompleted ( RequestBatch batch ) { </a> 0
<a> count . incrementAndGet ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> batch . executeAndWait ( ) ; </a> 0
<a> assertEquals ( 3 , count . get ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . res . AssetManager ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . graphics . Color ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . ConditionVariable ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . test . ActivityInstrumentationTestCase2 ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import junit . framework . AssertionFailedError ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import org . json . JSONTokener ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> public class FacebookActivityTestCase < T extends Activity > extends ActivityInstrumentationTestCase2 < T > { </a> 0
<a> private static final String TAG = FacebookActivityTestCase . class . getSimpleName ( ) ; </a> 0
<a> private static String applicationId ; </a> 0
<a> private static String applicationSecret ; </a> 0
<a> public final static String SECOND_TEST_USER_TAG = "Second" ; </a> 0
<a> public final static String THIRD_TEST_USER_TAG = "Third" ; </a> 0
<a> private TestBlocker testBlocker ; </a> 0
<a> protected synchronized TestBlocker getTestBlocker ( ) { </a> 0
<a> if ( testBlocker == null ) { </a> 0
<a> testBlocker = TestBlocker . createTestBlocker ( ) ; </a> 0
<a> } </a> 0
<a> return testBlocker ; </a> 0
<a> } </a> 0
<a> public FacebookActivityTestCase ( Class < T > activityClass ) { </a> 0
<a> super ( "" , activityClass ) ; </a> 0
<a> } </a> 0
<a> protected TestSession getTestSessionWithSharedUser ( ) { </a> 0
<a> return getTestSessionWithSharedUser ( null ) ; </a> 0
<a> } </a> 0
<a> protected TestSession getTestSessionWithSharedUser ( String sessionUniqueUserTag ) { </a> 0
<a> return getTestSessionWithSharedUserAndPermissions ( sessionUniqueUserTag , new ArrayList < String > ( ) ) ; </a> 0
<a> } </a> 0
<a> protected TestSession getTestSessionWithSharedUserAndPermissions ( String sessionUniqueUserTag , </a> 0
<a> List < String > permissions ) { </a> 0
<a> return TestSession . createSessionWithSharedUser ( getActivity ( ) , permissions , sessionUniqueUserTag ) ; </a> 0
<a> } </a> 0
<a> protected TestSession getTestSessionWithPrivateUser ( TestBlocker testBlocker ) { </a> 0
<a> return TestSession . createSessionWithPrivateUser ( getActivity ( ) , null ) ; </a> 0
<a> } </a> 0
<a> protected TestSession openTestSessionWithSharedUser ( final TestBlocker blocker ) { </a> 0
<a> return openTestSessionWithSharedUser ( blocker , null ) ; </a> 0
<a> } </a> 0
<a> protected TestSession openTestSessionWithSharedUser ( final TestBlocker blocker , String sessionUniqueUserTag ) { </a> 0
<a> TestSession session = getTestSessionWithSharedUser ( ) ; </a> 0
<a> openSession ( getActivity ( ) , session , blocker ) ; </a> 0
<a> return session ; </a> 0
<a> } </a> 0
<a> protected TestSession openTestSessionWithSharedUser ( ) { </a> 0
<a> return openTestSessionWithSharedUser ( ( String ) null ) ; </a> 0
<a> } </a> 0
<a> protected TestSession openTestSessionWithSharedUser ( String sessionUniqueUserTag ) { </a> 0
<a> return openTestSessionWithSharedUserAndPermissions ( sessionUniqueUserTag , ( String [ ] ) null ) ; </a> 0
<a> } </a> 0
<a> protected TestSession openTestSessionWithSharedUserAndPermissions ( String sessionUniqueUserTag , </a> 0
<a> String ... permissions ) { </a> 0
<a> List < String > permissionList = ( permissions != null ) ? Arrays . asList ( permissions ) : null ; </a> 0
<a> return openTestSessionWithSharedUserAndPermissions ( sessionUniqueUserTag , permissionList ) ; </a> 0
<a> } </a> 0
<a> protected TestSession openTestSessionWithSharedUserAndPermissions ( String sessionUniqueUserTag , </a> 0
<a> List < String > permissions ) { </a> 0
<a> final TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> TestSession session = getTestSessionWithSharedUserAndPermissions ( sessionUniqueUserTag , permissions ) ; </a> 0
<a> openSession ( getActivity ( ) , session , blocker ) ; </a> 0
<a> return session ; </a> 0
<a> } </a> 0
<a> protected void waitAndAssertSuccess ( TestBlocker testBlocker , int numSignals ) { </a> 0
<a> try { </a> 0
<a> testBlocker . waitForSignalsAndAssertSuccess ( numSignals ) ; </a> 0
<a> } catch ( AssertionFailedError e ) { </a> 0
<a> throw e ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> fail ( "Got exception: " + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void waitAndAssertSuccess ( int numSignals ) { </a> 0
<a> waitAndAssertSuccess ( getTestBlocker ( ) , numSignals ) ; </a> 0
<a> } </a> 0
<a> protected void waitAndAssertSuccessOrRethrow ( int numSignals ) throws Exception { </a> 0
<a> getTestBlocker ( ) . waitForSignalsAndAssertSuccess ( numSignals ) ; </a> 0
<a> } </a> 0
<a> protected void runAndBlockOnUiThread ( final int expectedSignals , final Runnable runnable ) throws Throwable { </a> 0
<a> final TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> runTestOnUiThread ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> runnable . run ( ) ; </a> 0
<a> blocker . signal ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> blocker . waitForSignals ( 1 + expectedSignals ) ; </a> 0
<a> getInstrumentation ( ) . waitForIdleSync ( ) ; </a> 0
<a> } </a> 0
<a> protected synchronized void readApplicationIdAndSecret ( ) { </a> 0
<a> synchronized ( FacebookTestCase . class ) { </a> 0
<a> if ( applicationId != null && applicationSecret != null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> AssetManager assets = getInstrumentation ( ) . getContext ( ) . getResources ( ) . getAssets ( ) ; </a> 0
<a> InputStream stream = null ; </a> 0
<a> final String errorMessage = "could not read applicationId and applicationSecret from config.json; ensure " </a> 0
<a> + "you have run 'configure_unit_tests.sh'. Error: " ; </a> 0
<a> try { </a> 0
<a> stream = assets . open ( "config.json" ) ; </a> 0
<a> String string = Utility . readStreamToString ( stream ) ; </a> 0
<a> JSONTokener tokener = new JSONTokener ( string ) ; </a> 0
<a> Object obj = tokener . nextValue ( ) ; </a> 0
<a> if ( ! ( obj instanceof JSONObject ) ) { </a> 0
<a> fail ( errorMessage + "could not deserialize a JSONObject" ) ; </a> 0
<a> } </a> 0
<a> JSONObject jsonObject = ( JSONObject ) obj ; </a> 0
<a> applicationId = jsonObject . optString ( "applicationId" ) ; </a> 0
<a> applicationSecret = jsonObject . optString ( "applicationSecret" ) ; </a> 0
<a> if ( Utility . isNullOrEmpty ( applicationId ) || Utility . isNullOrEmpty ( applicationSecret ) ) { </a> 0
<a> fail ( errorMessage + "one or both config values are missing" ) ; </a> 0
<a> } </a> 0
<a> TestSession . setTestApplicationId ( applicationId ) ; </a> 0
<a> TestSession . setTestApplicationSecret ( applicationSecret ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> fail ( errorMessage + e . toString ( ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> fail ( errorMessage + e . toString ( ) ) ; </a> 0
<a> } finally { </a> 0
<a> if ( stream != null ) { </a> 0
<a> try { </a> 0
<a> stream . close ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> fail ( errorMessage + e . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void openSession ( Activity activity , TestSession session ) { </a> 0
<a> final TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> openSession ( activity , session , blocker ) ; </a> 0
<a> } </a> 0
<a> protected void openSession ( Activity activity , TestSession session , final TestBlocker blocker ) { </a> 0
<a> Session . OpenRequest openRequest = new Session . OpenRequest ( activity ) . </a> 0
<a> setCallback ( new Session . StatusCallback ( ) { </a> 0
<a> boolean signaled = false ; </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( exception != null ) { </a> 0
<a> Log . w ( TAG , </a> 0
<a> "openSession: received an error opening session: " + exception . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> assertTrue ( exception == null ) ; </a> 0
<a> if ( ! signaled ) { </a> 0
<a> blocker . signal ( ) ; </a> 0
<a> signaled = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> session . openForRead ( openRequest ) ; </a> 0
<a> waitAndAssertSuccess ( blocker , 1 ) ; </a> 0
<a> } </a> 0
<a> protected void setUp ( ) throws Exception { </a> 0
<a> super . setUp ( ) ; </a> 0
<a> readApplicationIdAndSecret ( ) ; </a> 0
<a> Settings . addLoggingBehavior ( LoggingBehavior . REQUESTS ) ; </a> 0
<a> Settings . addLoggingBehavior ( LoggingBehavior . INCLUDE_ACCESS_TOKENS ) ; </a> 0
<a> turnOnStrictModeForUiThread ( ) ; </a> 0
<a> } </a> 0
<a> protected void tearDown ( ) throws Exception { </a> 0
<a> super . tearDown ( ) ; </a> 0
<a> if ( testBlocker != null ) { </a> 0
<a> testBlocker . quit ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected Bundle getNativeLinkingExtras ( String token ) { </a> 0
<a> Bundle extras = new Bundle ( ) ; </a> 0
<a> String extraLaunchUriString = String </a> 0
<a> . format ( "fbrpc://facebook/nativethirdparty?app_id=%s&package_name=com.facebook.sdk.tests&class_name=com.facebook.FacebookActivityTests$FacebookTestActivity&access_token=%s" , </a> 0
<a> TestSession . getTestApplicationId ( ) , token ) ; </a> 0
<a> extras . putString ( "extra_launch_uri" , extraLaunchUriString ) ; </a> 0
<a> extras . putString ( "expires_in" , "3600" ) ; </a> 0
<a> extras . putLong ( "app_id" , Long . parseLong ( TestSession . getTestApplicationId ( ) ) ) ; </a> 0
<a> extras . putString ( "access_token" , token ) ; </a> 0
<a> return extras ; </a> 0
<a> } </a> 0
<a> interface GraphObjectPostResult extends GraphObject { </a> 0
<a> String getId ( ) ; </a> 0
<a> } </a> 0
<a> protected GraphObject getAndAssert ( Session session , String id ) { </a> 0
<a> Request request = new Request ( session , id ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphObject result = response . getGraphObject ( ) ; </a> 0
<a> assertNotNull ( result ) ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> protected GraphObject postGetAndAssert ( Session session , String path , GraphObject graphObject ) { </a> 0
<a> Request request = Request . newPostRequest ( session , path , graphObject , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphObjectPostResult result = response . getGraphObjectAs ( GraphObjectPostResult . class ) ; </a> 0
<a> assertNotNull ( result ) ; </a> 0
<a> assertNotNull ( result . getId ( ) ) ; </a> 0
<a> return getAndAssert ( session , result . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> protected void setBatchApplicationIdForTestApp ( ) { </a> 0
<a> String appId = TestSession . getTestApplicationId ( ) ; </a> 0
<a> Request . setDefaultBatchApplicationId ( appId ) ; </a> 0
<a> } </a> 0
<a> protected < U extends GraphObject > U batchCreateAndGet ( Session session , String graphPath , GraphObject graphObject , </a> 0
<a> String fields , Class < U > resultClass ) { </a> 0
<a> Request create = Request . newPostRequest ( session , graphPath , graphObject , new ExpectSuccessCallback ( ) ) ; </a> 0
<a> create . setBatchEntryName ( "create" ) ; </a> 0
<a> Request get = Request . newGraphPathRequest ( session , "{result=create:$.id}" , new ExpectSuccessCallback ( ) ) ; </a> 0
<a> if ( fields != null ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "fields" , fields ) ; </a> 0
<a> get . setParameters ( parameters ) ; </a> 0
<a> } </a> 0
<a> return batchPostAndGet ( create , get , resultClass ) ; </a> 0
<a> } </a> 0
<a> protected < U extends GraphObject > U batchUpdateAndGet ( Session session , String graphPath , GraphObject graphObject , </a> 0
<a> String fields , Class < U > resultClass ) { </a> 0
<a> Request update = Request . newPostRequest ( session , graphPath , graphObject , new ExpectSuccessCallback ( ) ) ; </a> 0
<a> Request get = Request . newGraphPathRequest ( session , graphPath , new ExpectSuccessCallback ( ) ) ; </a> 0
<a> if ( fields != null ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "fields" , fields ) ; </a> 0
<a> get . setParameters ( parameters ) ; </a> 0
<a> } </a> 0
<a> return batchPostAndGet ( update , get , resultClass ) ; </a> 0
<a> } </a> 0
<a> protected < U extends GraphObject > U batchPostAndGet ( Request post , Request get , Class < U > resultClass ) { </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( post , get ) ; </a> 0
<a> assertEquals ( 2 , responses . size ( ) ) ; </a> 0
<a> U resultGraphObject = responses . get ( 1 ) . getGraphObjectAs ( resultClass ) ; </a> 0
<a> assertNotNull ( resultGraphObject ) ; </a> 0
<a> return resultGraphObject ; </a> 0
<a> } </a> 0
<a> protected GraphObject createStatusUpdate ( ) { </a> 0
<a> GraphObject statusUpdate = GraphObject . Factory . create ( ) ; </a> 0
<a> String message = String . format ( </a> 0
<a> "Check out my awesome new status update posted at: %s. Some chars for you: +\"[]:," , new Date ( ) ) ; </a> 0
<a> statusUpdate . setProperty ( "message" , message ) ; </a> 0
<a> return statusUpdate ; </a> 0
<a> } </a> 0
<a> protected Bitmap createTestBitmap ( int size ) { </a> 0
<a> Bitmap image = Bitmap . createBitmap ( size , size , Bitmap . Config . RGB_565 ) ; </a> 0
<a> image . eraseColor ( Color . BLUE ) ; </a> 0
<a> return image ; </a> 0
<a> } </a> 0
<a> protected void issueFriendRequest ( TestSession session , String targetUserId ) { </a> 0
<a> String graphPath = "me/friends/" + targetUserId ; </a> 0
<a> Request request = Request . newPostRequest ( session , graphPath , null , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> assertTrue ( error == null || error . getRequestStatusCode ( ) == 400 ) ; </a> 0
<a> } </a> 0
<a> protected void makeTestUsersFriends ( TestSession session1 , TestSession session2 ) { </a> 0
<a> issueFriendRequest ( session1 , session2 . getTestUserId ( ) ) ; </a> 0
<a> issueFriendRequest ( session2 , session1 . getTestUserId ( ) ) ; </a> 0
<a> } </a> 0
<a> protected void assertDateEqualsWithinDelta ( Date expected , Date actual , long deltaInMsec ) { </a> 0
<a> long delta = Math . abs ( expected . getTime ( ) - actual . getTime ( ) ) ; </a> 0
<a> assertTrue ( delta < deltaInMsec ) ; </a> 0
<a> } </a> 0
<a> protected void assertDateDiffersWithinDelta ( Date expected , Date actual , long expectedDifference , long deltaInMsec ) { </a> 0
<a> long delta = Math . abs ( expected . getTime ( ) - actual . getTime ( ) ) - expectedDifference ; </a> 0
<a> assertTrue ( delta < deltaInMsec ) ; </a> 0
<a> } </a> 0
<a> protected void assertNoErrors ( List < Response > responses ) { </a> 0
<a> for ( int i = 0 ; i < responses . size ( ) ; ++ i ) { </a> 0
<a> Response response = responses . get ( i ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected File createTempFileFromAsset ( String assetPath ) throws IOException { </a> 0
<a> InputStream inputStream = null ; </a> 0
<a> FileOutputStream outStream = null ; </a> 0
<a> try { </a> 0
<a> AssetManager assets = getInstrumentation ( ) . getContext ( ) . getResources ( ) . getAssets ( ) ; </a> 0
<a> inputStream = assets . open ( assetPath ) ; </a> 0
<a> File outputDir = getActivity ( ) . getCacheDir ( ) ; </a> 0
<a> File outputFile = File . createTempFile ( "prefix" , assetPath , outputDir ) ; </a> 0
<a> outStream = new FileOutputStream ( outputFile ) ; </a> 0
<a> final int bufferSize = 1024 * 2 ; </a> 0
<a> byte [ ] buffer = new byte [ bufferSize ] ; </a> 0
<a> int n = 0 ; </a> 0
<a> while ( ( n = inputStream . read ( buffer ) ) != - 1 ) { </a> 0
<a> outStream . write ( buffer , 0 , n ) ; </a> 0
<a> } </a> 0
<a> return outputFile ; </a> 0
<a> } finally { </a> 0
<a> Utility . closeQuietly ( outStream ) ; </a> 0
<a> Utility . closeQuietly ( inputStream ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void runOnBlockerThread ( final Runnable runnable , boolean waitForCompletion ) { </a> 0
<a> Runnable runnableToPost = runnable ; </a> 0
<a> final ConditionVariable condition = waitForCompletion ? new ConditionVariable ( ! waitForCompletion ) : null ; </a> 0
<a> if ( waitForCompletion ) { </a> 0
<a> runnableToPost = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> runnable . run ( ) ; </a> 0
<a> condition . open ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> Handler handler = blocker . getHandler ( ) ; </a> 0
<a> handler . post ( runnableToPost ) ; </a> 0
<a> if ( waitForCompletion ) { </a> 0
<a> boolean success = condition . block ( 10000 ) ; </a> 0
<a> assertTrue ( success ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void closeBlockerAndAssertSuccess ( ) { </a> 0
<a> TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> testBlocker = null ; </a> 0
<a> blocker . quit ( ) ; </a> 0
<a> boolean joined = false ; </a> 0
<a> while ( ! joined ) { </a> 0
<a> try { </a> 0
<a> blocker . join ( ) ; </a> 0
<a> joined = true ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> blocker . assertSuccess ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> fail ( e . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected TestRequestAsyncTask createAsyncTaskOnUiThread ( final Request ... requests ) throws Throwable { </a> 0
<a> final ArrayList < TestRequestAsyncTask > result = new ArrayList < TestRequestAsyncTask > ( ) ; </a> 0
<a> runTestOnUiThread ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> result . add ( new TestRequestAsyncTask ( requests ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> return result . isEmpty ( ) ? null : result . get ( 0 ) ; </a> 0
<a> } </a> 0
<a> protected class TestRequestAsyncTask extends RequestAsyncTask { </a> 0
<a> private final TestBlocker blocker = FacebookActivityTestCase . this . getTestBlocker ( ) ; </a> 0
<a> public TestRequestAsyncTask ( Request ... requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> public TestRequestAsyncTask ( List < Request > requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> public TestRequestAsyncTask ( RequestBatch requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> public TestRequestAsyncTask ( HttpURLConnection connection , Request ... requests ) { </a> 0
<a> super ( connection , requests ) ; </a> 0
<a> } </a> 0
<a> public TestRequestAsyncTask ( HttpURLConnection connection , List < Request > requests ) { </a> 0
<a> super ( connection , requests ) ; </a> 0
<a> } </a> 0
<a> public TestRequestAsyncTask ( HttpURLConnection connection , RequestBatch requests ) { </a> 0
<a> super ( connection , requests ) ; </a> 0
<a> } </a> 0
<a> public final TestBlocker getBlocker ( ) { </a> 0
<a> return blocker ; </a> 0
<a> } </a> 0
<a> public final Exception getThrowable ( ) { </a> 0
<a> return getException ( ) ; </a> 0
<a> } </a> 0
<a> protected void onPostExecute ( List < Response > result ) { </a> 0
<a> try { </a> 0
<a> super . onPostExecute ( result ) ; </a> 0
<a> if ( getException ( ) != null ) { </a> 0
<a> blocker . setException ( getException ( ) ) ; </a> 0
<a> } </a> 0
<a> } finally { </a> 0
<a> Log . d ( "TestRequestAsyncTask" , "signaling blocker" ) ; </a> 0
<a> blocker . signal ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void executeOnBlockerThread ( ) { </a> 0
<a> ensureAsyncTaskLoaded ( ) ; </a> 0
<a> Runnable runnable = new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> execute ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Handler handler = new Handler ( blocker . getLooper ( ) ) ; </a> 0
<a> handler . post ( runnable ) ; </a> 0
<a> } </a> 0
<a> private void ensureAsyncTaskLoaded ( ) { </a> 0
<a> try { </a> 0
<a> runAndBlockOnUiThread ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 0
<a> Class . forName ( "android.os.AsyncTask" ) ; </a> 0
<a> } catch ( ClassNotFoundException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } catch ( Throwable throwable ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected class TestCallback implements Request . Callback { </a> 0
<a> private final TestBlocker blocker ; </a> 0
<a> private final boolean expectSuccess ; </a> 0
<a> public TestCallback ( TestBlocker blocker , boolean expectSuccess ) { </a> 0
<a> this . blocker = blocker ; </a> 0
<a> this . expectSuccess = expectSuccess ; </a> 0
<a> } </a> 0
<a> public TestCallback ( boolean expectSuccess ) { </a> 0
<a> this ( FacebookActivityTestCase . this . getTestBlocker ( ) , expectSuccess ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> try { </a> 0
<a> if ( Thread . currentThread ( ) != blocker ) { </a> 0
<a> throw new FacebookException ( "Invalid thread " + Thread . currentThread ( ) . getId ( ) </a> 0
<a> + "; expected to be called on thread " + blocker . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( expectSuccess && response . getError ( ) != null ) { </a> 0
<a> throw response . getError ( ) . getException ( ) ; </a> 0
<a> } else if ( ! expectSuccess && response . getError ( ) == null ) { </a> 0
<a> throw new FacebookException ( "Expected failure case, received no error" ) ; </a> 0
<a> } </a> 0
<a> performAsserts ( response ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> blocker . setException ( e ) ; </a> 0
<a> } finally { </a> 0
<a> blocker . signal ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void performAsserts ( Response response ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected class ExpectSuccessCallback extends TestCallback { </a> 0
<a> public ExpectSuccessCallback ( ) { </a> 0
<a> super ( true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected class ExpectFailureCallback extends TestCallback { </a> 0
<a> public ExpectFailureCallback ( ) { </a> 0
<a> super ( false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static abstract class MockRequest extends Request { </a> 0
<a> public abstract Response createResponse ( ) ; </a> 0
<a> } </a> 0
<a> public static class MockRequestBatch extends RequestBatch { </a> 0
<a> public MockRequestBatch ( MockRequest ... requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> public MockRequestBatch ( RequestBatch requests ) { </a> 0
<a> super ( requests ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> List < Response > executeAndWaitImpl ( ) { </a> 0
<a> List < Request > requests = getRequests ( ) ; </a> 0
<a> List < Response > responses = new ArrayList < Response > ( ) ; </a> 0
<a> for ( Request request : requests ) { </a> 0
<a> MockRequest mockRequest = ( MockRequest ) request ; </a> 0
<a> responses . add ( mockRequest . createResponse ( ) ) ; </a> 0
<a> } </a> 0
<a> Request . runCallbacks ( this , responses ) ; </a> 0
<a> return responses ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private AtomicBoolean strictModeOnForUiThread = new AtomicBoolean ( ) ; </a> 0
<a> protected void turnOnStrictModeForUiThread ( ) { </a> 0
<a> if ( strictModeOnForUiThread . get ( ) == false ) { </a> 0
<a> try { </a> 0
<a> runTestOnUiThread ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( strictModeOnForUiThread . compareAndSet ( false , true ) ) { </a> 0
<a> turnOnStrictModeForThisThread ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } catch ( Throwable throwable ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void turnOnStrictModeForThisThread ( ) { </a> 0
<a> try { </a> 0
<a> ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; </a> 0
<a> Class < ? > strictModeClass = Class . forName ( "android.os.StrictMode" , true , loader ) ; </a> 0
<a> Class < ? > threadPolicyClass = Class . forName ( "android.os.StrictMode$ThreadPolicy" , true , loader ) ; </a> 0
<a> Class < ? > threadPolicyBuilderClass = Class . forName ( "android.os.StrictMode$ThreadPolicy$Builder" , true , </a> 0
<a> loader ) ; </a> 0
<a> Object threadPolicyBuilder = threadPolicyBuilderClass . getConstructor ( ) . newInstance ( ) ; </a> 0
<a> threadPolicyBuilder = threadPolicyBuilderClass . getMethod ( "detectAll" ) . invoke ( threadPolicyBuilder ) ; </a> 0
<a> threadPolicyBuilder = threadPolicyBuilderClass . getMethod ( "penaltyDeath" ) . invoke ( threadPolicyBuilder ) ; </a> 0
<a> Object threadPolicy = threadPolicyBuilderClass . getMethod ( "build" ) . invoke ( threadPolicyBuilder ) ; </a> 0
<a> strictModeClass . getMethod ( "setThreadPolicy" , threadPolicyClass ) . invoke ( strictModeClass , threadPolicy ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> public class FacebookActivityTests extends FacebookActivityTestCase < FacebookActivityTests . FacebookTestActivity > { </a> 0
<a> public FacebookActivityTests ( ) { </a> 0
<a> super ( FacebookActivityTests . FacebookTestActivity . class ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void setUp ( ) throws Exception { </a> 0
<a> super . setUp ( ) ; </a> 0
<a> Session activeSession = Session . getActiveSession ( ) ; </a> 0
<a> if ( activeSession != null ) { </a> 0
<a> activeSession . closeAndClearTokenInformation ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testLaunchingWithEmptyIntent ( ) { </a> 0
<a> Intent intent = new Intent ( Intent . ACTION_MAIN ) ; </a> 0
<a> setActivityIntent ( intent ) ; </a> 0
<a> FacebookTestActivity activity = getActivity ( ) ; </a> 0
<a> assertNull ( Session . getActiveSession ( ) ) ; </a> 0
<a> assertFalse ( activity . hasNativeLinkIntentForTesting ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testLaunchingWithValidNativeLinkingIntent ( ) { </a> 0
<a> final String token = "A token less unique than most" ; </a> 0
<a> Intent intent = new Intent ( Intent . ACTION_MAIN ) ; </a> 0
<a> intent . putExtras ( getNativeLinkingExtras ( token ) ) ; </a> 0
<a> setActivityIntent ( intent ) ; </a> 0
<a> assertNull ( Session . getActiveSession ( ) ) ; </a> 0
<a> FacebookTestActivity activity = getActivity ( ) ; </a> 0
<a> Session activeSession = Session . getActiveSession ( ) ; </a> 0
<a> assertNull ( activeSession ) ; </a> 0
<a> assertTrue ( activity . hasNativeLinkIntentForTesting ( ) ) ; </a> 0
<a> } </a> 0
<a> public static class FacebookTestActivity extends Activity { </a> 0
<a> public boolean hasNativeLinkIntentForTesting ( ) { </a> 0
<a> return AccessToken . createFromNativeLinkingIntent ( getIntent ( ) ) != null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> public class FacebookTestCase extends FacebookActivityTestCase < FacebookTestCase . FacebookTestActivity > { </a> 0
<a> public FacebookTestCase ( ) { </a> 0
<a> super ( FacebookTestCase . FacebookTestActivity . class ) ; </a> 0
<a> Settings . addLoggingBehavior ( LoggingBehavior . REQUESTS ) ; </a> 0
<a> Settings . addLoggingBehavior ( LoggingBehavior . INCLUDE_RAW_RESPONSES ) ; </a> 0
<a> } </a> 0
<a> public static class FacebookTestActivity extends Activity { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import java . util . Date ; </a> 0
<a> public class GraphRequestTests extends FacebookTestCase { </a> 0
<a> @ LargeTest </a> 0
<a> public void testCommentRoundTrip ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> GraphObject status = createStatusUpdate ( ) ; </a> 0
<a> GraphObject createdStatus = batchCreateAndGet ( session , "me/feed" , status , null , GraphObject . class ) ; </a> 0
<a> String statusID = ( String ) createdStatus . getProperty ( "id" ) ; </a> 0
<a> GraphObject comment = GraphObject . Factory . create ( ) ; </a> 0
<a> final String commentMessage = "It truly is a wonderful status update." ; </a> 0
<a> comment . setProperty ( "message" , commentMessage ) ; </a> 0
<a> GraphObject createdComment1 = batchCreateAndGet ( session , statusID + "/comments" , comment , null , </a> 0
<a> GraphObject . class ) ; </a> 0
<a> assertNotNull ( createdComment1 ) ; </a> 0
<a> String comment1ID = ( String ) createdComment1 . getProperty ( "id" ) ; </a> 0
<a> String comment1Message = ( String ) createdComment1 . getProperty ( "message" ) ; </a> 0
<a> assertNotNull ( comment1ID ) ; </a> 0
<a> assertNotNull ( comment1Message ) ; </a> 0
<a> assertEquals ( commentMessage , comment1Message ) ; </a> 0
<a> createdComment1 . removeProperty ( "id" ) ; </a> 0
<a> GraphObject createdComment2 = batchCreateAndGet ( session , statusID + "/comments" , createdComment1 , null , </a> 0
<a> GraphObject . class ) ; </a> 0
<a> assertNotNull ( createdComment2 ) ; </a> 0
<a> String comment2ID = ( String ) createdComment2 . getProperty ( "id" ) ; </a> 0
<a> String comment2Message = ( String ) createdComment2 . getProperty ( "message" ) ; </a> 0
<a> assertNotNull ( comment2ID ) ; </a> 0
<a> assertFalse ( comment1ID . equals ( comment2ID ) ) ; </a> 0
<a> assertNotNull ( comment2Message ) ; </a> 0
<a> assertEquals ( commentMessage , comment2Message ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testEventRoundTrip ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUserAndPermissions ( null , "create_event" ) ; </a> 0
<a> GraphObject event = GraphObject . Factory . create ( ) ; </a> 0
<a> Date startTime = new Date ( 130 , 2 , 17 , 12 , 34 , 56 ) ; </a> 0
<a> event . setProperty ( "name" , "My awesome St. Patrick's Day party on " + startTime . toString ( ) ) ; </a> 0
<a> final String eventDescription = "This is a great event. You should all come." ; </a> 0
<a> event . setProperty ( "description" , eventDescription ) ; </a> 0
<a> Date endTime = new Date ( startTime . getTime ( ) + 3600 * 1000 ) ; </a> 0
<a> event . setProperty ( "start_time" , startTime ) ; </a> 0
<a> event . setProperty ( "end_time" , endTime ) ; </a> 0
<a> event . setProperty ( "location" , "My house" ) ; </a> 0
<a> GraphObject event1 = batchCreateAndGet ( session , "me/events" , event , null , GraphObject . class ) ; </a> 0
<a> assertNotNull ( event1 ) ; </a> 0
<a> assertEquals ( eventDescription , event1 . getProperty ( "description" ) ) ; </a> 0
<a> event1 . removeProperty ( "id" ) ; </a> 0
<a> GraphObject event2 = batchCreateAndGet ( session , "me/events" , event1 , null , GraphObject . class ) ; </a> 0
<a> assertNotNull ( event2 ) ; </a> 0
<a> assertEquals ( eventDescription , event2 . getProperty ( "description" ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . IntentFilter ; </a> 0
<a> import android . support . v4 . content . LocalBroadcastManager ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class SessionTests extends SessionTestsBase { </a> 0
<a> @ Override </a> 0
<a> protected void setUp ( ) throws Exception { </a> 0
<a> super . setUp ( ) ; </a> 0
<a> new SharedPreferencesTokenCachingStrategy ( getActivity ( ) ) . clear ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testFailNullArguments ( ) { </a> 0
<a> try { </a> 0
<a> new Session ( null ) ; </a> 0
<a> assertFalse ( true ) ; </a> 0
<a> } catch ( NullPointerException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testActiveSessionChangeRegistration ( ) { </a> 0
<a> final WaitForBroadcastReceiver receiver0 = new WaitForBroadcastReceiver ( ) ; </a> 0
<a> final WaitForBroadcastReceiver receiver1 = new WaitForBroadcastReceiver ( ) ; </a> 0
<a> final WaitForBroadcastReceiver receiver2 = new WaitForBroadcastReceiver ( ) ; </a> 0
<a> final LocalBroadcastManager broadcastManager = LocalBroadcastManager . getInstance ( getActivity ( ) ) ; </a> 0
<a> try { </a> 0
<a> Runnable initialize0 = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> broadcastManager . registerReceiver ( receiver0 , getActiveSessionAllFilter ( ) ) ; </a> 0
<a> broadcastManager . registerReceiver ( receiver1 , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_SET ) ) ; </a> 0
<a> broadcastManager . registerReceiver ( receiver1 , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_OPENED ) ) ; </a> 0
<a> broadcastManager . registerReceiver ( receiver1 , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_CLOSED ) ) ; </a> 0
<a> broadcastManager . registerReceiver ( receiver2 , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_OPENED ) ) ; </a> 0
<a> broadcastManager . registerReceiver ( receiver2 , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_CLOSED ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> runOnBlockerThread ( initialize0 , true ) ; </a> 0
<a> WaitForBroadcastReceiver . incrementExpectCounts ( receiver0 , receiver1 , receiver2 ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_OPENED ) ; </a> 0
<a> WaitForBroadcastReceiver . waitForExpectedCalls ( receiver0 , receiver1 , receiver2 ) ; </a> 0
<a> WaitForBroadcastReceiver . incrementExpectCounts ( receiver0 , receiver1 , receiver2 ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_CLOSED ) ; </a> 0
<a> WaitForBroadcastReceiver . waitForExpectedCalls ( receiver0 , receiver1 , receiver2 ) ; </a> 0
<a> WaitForBroadcastReceiver . incrementExpectCounts ( receiver0 , receiver1 ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_SET ) ; </a> 0
<a> WaitForBroadcastReceiver . waitForExpectedCalls ( receiver0 , receiver1 ) ; </a> 0
<a> receiver0 . incrementExpectCount ( ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_UNSET ) ; </a> 0
<a> receiver0 . waitForExpectedCalls ( ) ; </a> 0
<a> broadcastManager . unregisterReceiver ( receiver1 ) ; </a> 0
<a> WaitForBroadcastReceiver . incrementExpectCounts ( receiver0 , receiver2 ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_OPENED ) ; </a> 0
<a> WaitForBroadcastReceiver . waitForExpectedCalls ( receiver0 , receiver2 ) ; </a> 0
<a> WaitForBroadcastReceiver . incrementExpectCounts ( receiver0 , receiver2 ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_CLOSED ) ; </a> 0
<a> WaitForBroadcastReceiver . waitForExpectedCalls ( receiver0 , receiver2 ) ; </a> 0
<a> receiver0 . incrementExpectCount ( ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_SET ) ; </a> 0
<a> receiver0 . waitForExpectedCalls ( ) ; </a> 0
<a> receiver0 . incrementExpectCount ( ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_UNSET ) ; </a> 0
<a> receiver0 . waitForExpectedCalls ( ) ; </a> 0
<a> broadcastManager . unregisterReceiver ( receiver0 ) ; </a> 0
<a> Runnable initialize1 = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> broadcastManager . registerReceiver ( receiver1 , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_OPENED ) ) ; </a> 0
<a> broadcastManager . registerReceiver ( receiver1 , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_OPENED ) ) ; </a> 0
<a> broadcastManager . registerReceiver ( receiver1 , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_OPENED ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> runOnBlockerThread ( initialize1 , true ) ; </a> 0
<a> receiver1 . incrementExpectCount ( 3 ) ; </a> 0
<a> receiver2 . incrementExpectCount ( ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_OPENED ) ; </a> 0
<a> receiver1 . waitForExpectedCalls ( ) ; </a> 0
<a> receiver2 . waitForExpectedCalls ( ) ; </a> 0
<a> receiver2 . incrementExpectCount ( ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_CLOSED ) ; </a> 0
<a> receiver2 . waitForExpectedCalls ( ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_SET ) ; </a> 0
<a> Session . postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_UNSET ) ; </a> 0
<a> closeBlockerAndAssertSuccess ( ) ; </a> 0
<a> } finally { </a> 0
<a> broadcastManager . unregisterReceiver ( receiver0 ) ; </a> 0
<a> broadcastManager . unregisterReceiver ( receiver1 ) ; </a> 0
<a> broadcastManager . unregisterReceiver ( receiver2 ) ; </a> 0
<a> Session . setActiveSession ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testSetActiveSession ( ) { </a> 0
<a> Session . setActiveSession ( null ) ; </a> 0
<a> final WaitForBroadcastReceiver receiverOpened = new WaitForBroadcastReceiver ( ) ; </a> 0
<a> final WaitForBroadcastReceiver receiverClosed = new WaitForBroadcastReceiver ( ) ; </a> 0
<a> final WaitForBroadcastReceiver receiverSet = new WaitForBroadcastReceiver ( ) ; </a> 0
<a> final WaitForBroadcastReceiver receiverUnset = new WaitForBroadcastReceiver ( ) ; </a> 0
<a> final LocalBroadcastManager broadcastManager = LocalBroadcastManager . getInstance ( getActivity ( ) ) ; </a> 0
<a> try { </a> 0
<a> Runnable initializeOnBlockerThread = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> broadcastManager . registerReceiver ( receiverOpened , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_OPENED ) ) ; </a> 0
<a> broadcastManager . registerReceiver ( receiverClosed , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_CLOSED ) ) ; </a> 0
<a> broadcastManager . registerReceiver ( receiverSet , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_SET ) ) ; </a> 0
<a> broadcastManager . registerReceiver ( receiverUnset , </a> 0
<a> getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_UNSET ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> runOnBlockerThread ( initializeOnBlockerThread , true ) ; </a> 0
<a> assertEquals ( null , Session . getActiveSession ( ) ) ; </a> 0
<a> Session . setActiveSession ( null ) ; </a> 0
<a> assertEquals ( null , Session . getActiveSession ( ) ) ; </a> 0
<a> Session session0 = new Session . Builder ( getActivity ( ) ) . </a> 0
<a> setApplicationId ( "FakeAppId" ) . </a> 0
<a> setTokenCachingStrategy ( new MockTokenCachingStrategy ( ) ) . </a> 0
<a> build ( ) ; </a> 0
<a> assertEquals ( SessionState . CREATED_TOKEN_LOADED , session0 . getState ( ) ) ; </a> 0
<a> receiverSet . incrementExpectCount ( ) ; </a> 0
<a> Session . setActiveSession ( session0 ) ; </a> 0
<a> assertEquals ( session0 , Session . getActiveSession ( ) ) ; </a> 0
<a> receiverSet . waitForExpectedCalls ( ) ; </a> 0
<a> receiverOpened . incrementExpectCount ( ) ; </a> 0
<a> session0 . openForRead ( null ) ; </a> 0
<a> receiverOpened . waitForExpectedCalls ( ) ; </a> 0
<a> Session . setActiveSession ( session0 ) ; </a> 0
<a> assertEquals ( session0 , Session . getActiveSession ( ) ) ; </a> 0
<a> WaitForBroadcastReceiver . incrementExpectCounts ( receiverClosed , receiverUnset , receiverSet , receiverOpened ) ; </a> 0
<a> Session session1 = new Session . Builder ( getActivity ( ) ) . </a> 0
<a> setApplicationId ( "FakeAppId" ) . </a> 0
<a> setTokenCachingStrategy ( new MockTokenCachingStrategy ( ) ) . </a> 0
<a> build ( ) ; </a> 0
<a> assertEquals ( SessionState . CREATED_TOKEN_LOADED , session1 . getState ( ) ) ; </a> 0
<a> session1 . openForRead ( null ) ; </a> 0
<a> assertEquals ( SessionState . OPENED , session1 . getState ( ) ) ; </a> 0
<a> Session . setActiveSession ( session1 ) ; </a> 0
<a> WaitForBroadcastReceiver . waitForExpectedCalls ( receiverClosed , receiverUnset , receiverSet , receiverOpened ) ; </a> 0
<a> assertEquals ( SessionState . CLOSED , session0 . getState ( ) ) ; </a> 0
<a> assertEquals ( session1 , Session . getActiveSession ( ) ) ; </a> 0
<a> closeBlockerAndAssertSuccess ( ) ; </a> 0
<a> } finally { </a> 0
<a> broadcastManager . unregisterReceiver ( receiverOpened ) ; </a> 0
<a> broadcastManager . unregisterReceiver ( receiverClosed ) ; </a> 0
<a> broadcastManager . unregisterReceiver ( receiverSet ) ; </a> 0
<a> broadcastManager . unregisterReceiver ( receiverUnset ) ; </a> 0
<a> Session . setActiveSession ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpenSuccess ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> AccessToken openToken = AccessToken </a> 0
<a> . createFromString ( "A token of thanks" , permissions , AccessTokenSource . TEST_USER ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> session . addAuthorizeResult ( openToken ) ; </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> verifySessionHasToken ( session , openToken ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) != null ) ; </a> 0
<a> assertEquals ( openToken . getToken ( ) , TokenCachingStrategy . getToken ( cache . getSavedState ( ) ) ) ; </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpenForPublishSuccess ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> AccessToken openToken = AccessToken </a> 0
<a> . createFromString ( "A token of thanks" , permissions , AccessTokenSource . TEST_USER ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> session . addAuthorizeResult ( openToken ) ; </a> 0
<a> session . openForPublish ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) . </a> 0
<a> setPermissions ( Arrays . asList ( new String [ ] { </a> 0
<a> "publish_something" , </a> 0
<a> "manage_something" , </a> 0
<a> "ads_management" , </a> 0
<a> "create_event" , </a> 0
<a> "rsvp_event" </a> 0
<a> } ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> verifySessionHasToken ( session , openToken ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) != null ) ; </a> 0
<a> assertEquals ( openToken . getToken ( ) , TokenCachingStrategy . getToken ( cache . getSavedState ( ) ) ) ; </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpenForPublishSuccessWithReadPermissions ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> AccessToken openToken = AccessToken </a> 0
<a> . createFromString ( "A token of thanks" , permissions , AccessTokenSource . TEST_USER ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> session . addAuthorizeResult ( openToken ) ; </a> 0
<a> session . openForPublish ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) . </a> 0
<a> setPermissions ( Arrays . asList ( new String [ ] { </a> 0
<a> "publish_something" , </a> 0
<a> "manage_something" , </a> 0
<a> "ads_management" , </a> 0
<a> "create_event" , </a> 0
<a> "rsvp_event" , </a> 0
<a> "read_something" </a> 0
<a> } ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> verifySessionHasToken ( session , openToken ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) != null ) ; </a> 0
<a> assertEquals ( openToken . getToken ( ) , TokenCachingStrategy . getToken ( cache . getSavedState ( ) ) ) ; </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpenFromTokenCache ( ) { </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> String token = "A token less unique than most" ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( token , DEFAULT_TIMEOUT_MILLISECONDS ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( "app-id" , cache ) ; </a> 0
<a> assertEquals ( SessionState . CREATED_TOKEN_LOADED , session . getState ( ) ) ; </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpenActiveFromEmptyTokenCache ( ) { </a> 0
<a> new SharedPreferencesTokenCachingStrategy ( getActivity ( ) ) . clear ( ) ; </a> 0
<a> assertNull ( Session . openActiveSessionFromCache ( getActivity ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpenFailure ( ) { </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> Exception openException = new Exception ( ) ; </a> 0
<a> session . addAuthorizeResult ( openException ) ; </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED_LOGIN_FAILED , openException ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpenForReadFailure ( ) { </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> try { </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) . </a> 0
<a> setPermissions ( Arrays . asList ( new String [ ] { "publish_something" } ) ) ) ; </a> 0
<a> fail ( "should not reach here without an exception" ) ; </a> 0
<a> } catch ( FacebookException e ) { </a> 0
<a> assertTrue ( e . getMessage ( ) . contains ( "Cannot pass a publish or manage permission" ) ) ; </a> 0
<a> } finally { </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testRequestNewReadPermissionsSuccess ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> final AccessToken openToken = AccessToken </a> 0
<a> . createFromString ( "Allows playing outside" , permissions , AccessTokenSource . TEST_USER ) ; </a> 0
<a> permissions . add ( "play_outside" ) ; </a> 0
<a> session . addAuthorizeResult ( openToken , "play_outside" ) ; </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> verifySessionHasToken ( session , openToken ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) != null ) ; </a> 0
<a> assertEquals ( openToken . getToken ( ) , TokenCachingStrategy . getToken ( cache . getSavedState ( ) ) ) ; </a> 0
<a> final AccessToken reauthorizeToken = AccessToken . createFromString ( </a> 0
<a> "Allows playing outside and eating ice cream" , permissions , AccessTokenSource . TEST_USER ) ; </a> 0
<a> permissions . add ( "eat_ice_cream" ) ; </a> 0
<a> session . addAuthorizeResult ( reauthorizeToken , "play_outside" , "eat_ice_cream" ) ; </a> 0
<a> session . requestNewReadPermissions ( new Session . NewPermissionsRequest ( getActivity ( ) , permissions ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED_TOKEN_UPDATED , null ) ; </a> 0
<a> verifySessionHasToken ( session , reauthorizeToken ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) != null ) ; </a> 0
<a> assertEquals ( reauthorizeToken . getToken ( ) , TokenCachingStrategy . getToken ( cache . getSavedState ( ) ) ) ; </a> 0
<a> final Exception reauthorizeException = new Exception ( "Don't run with scissors" ) ; </a> 0
<a> permissions . add ( "run_with_scissors" ) ; </a> 0
<a> session . addAuthorizeResult ( reauthorizeException ) ; </a> 0
<a> session . requestNewReadPermissions ( new Session . NewPermissionsRequest ( getActivity ( ) , permissions ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED_TOKEN_UPDATED , reauthorizeException ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) != null ) ; </a> 0
<a> assertEquals ( reauthorizeToken . getToken ( ) , TokenCachingStrategy . getToken ( cache . getSavedState ( ) ) ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testRequestNewPublishPermissionsSuccess ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> final AccessToken openToken = AccessToken </a> 0
<a> . createFromString ( "Allows playing outside" , permissions , AccessTokenSource . TEST_USER ) ; </a> 0
<a> permissions . add ( "play_outside" ) ; </a> 0
<a> session . addAuthorizeResult ( openToken , "play_outside" ) ; </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> verifySessionHasToken ( session , openToken ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) != null ) ; </a> 0
<a> assertEquals ( openToken . getToken ( ) , TokenCachingStrategy . getToken ( cache . getSavedState ( ) ) ) ; </a> 0
<a> final AccessToken reauthorizeToken = AccessToken . createFromString ( </a> 0
<a> "Allows playing outside and publish eating ice cream" , permissions , AccessTokenSource . TEST_USER ) ; </a> 0
<a> permissions . add ( "publish_eat_ice_cream" ) ; </a> 0
<a> session . addAuthorizeResult ( reauthorizeToken , "play_outside" , "publish_eat_ice_cream" ) ; </a> 0
<a> session . requestNewPublishPermissions ( new Session . NewPermissionsRequest ( getActivity ( ) , permissions ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED_TOKEN_UPDATED , null ) ; </a> 0
<a> verifySessionHasToken ( session , reauthorizeToken ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) != null ) ; </a> 0
<a> assertEquals ( reauthorizeToken . getToken ( ) , TokenCachingStrategy . getToken ( cache . getSavedState ( ) ) ) ; </a> 0
<a> permissions . add ( "publish_run_with_scissors" ) ; </a> 0
<a> try { </a> 0
<a> session . requestNewReadPermissions ( new Session . NewPermissionsRequest ( getActivity ( ) , permissions ) ) ; </a> 0
<a> fail ( "Should not reach here without an exception" ) ; </a> 0
<a> } catch ( FacebookException e ) { </a> 0
<a> assertTrue ( e . getMessage ( ) . contains ( "Cannot pass a publish or manage permission" ) ) ; </a> 0
<a> } finally { </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpenWithAccessToken ( ) { </a> 0
<a> String token = "This is a fake token." ; </a> 0
<a> Date expirationDate = new Date ( new Date ( ) . getTime ( ) + 3600 * 1000 ) ; </a> 0
<a> Date lastRefreshDate = new Date ( ) ; </a> 0
<a> List < String > permissions = Arrays . asList ( new String [ ] { "email" , "publish_stream" } ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> AccessToken accessToken = AccessToken . createFromExistingAccessToken ( token , expirationDate , lastRefreshDate , </a> 0
<a> AccessTokenSource . FACEBOOK_APPLICATION_WEB , permissions ) ; </a> 0
<a> session . open ( accessToken , statusRecorder ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> AccessToken expectedToken = new AccessToken ( token , expirationDate , permissions , </a> 0
<a> AccessTokenSource . FACEBOOK_APPLICATION_WEB , lastRefreshDate ) ; </a> 0
<a> verifySessionHasToken ( session , expectedToken ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) != null ) ; </a> 0
<a> assertEquals ( expectedToken . getToken ( ) , TokenCachingStrategy . getToken ( cache . getSavedState ( ) ) ) ; </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpenWithAccessTokenWithDefaults ( ) { </a> 0
<a> String token = "This is a fake token." ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> AccessToken accessToken = AccessToken . createFromExistingAccessToken ( token , null , null , null , null ) ; </a> 0
<a> session . open ( accessToken , statusRecorder ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> assertEquals ( token , session . getAccessToken ( ) ) ; </a> 0
<a> assertEquals ( new Date ( Long . MAX_VALUE ) , session . getExpirationDate ( ) ) ; </a> 0
<a> assertEquals ( 0 , session . getPermissions ( ) . size ( ) ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) != null ) ; </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testSessionWillExtendTokenIfNeeded ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> session . forceExtendAccessToken ( true ) ; </a> 0
<a> Request request = Request . newMeRequest ( session , null ) ; </a> 0
<a> request . executeAndWait ( ) ; </a> 0
<a> assertTrue ( session . getWasAskedToExtendAccessToken ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testSessionWillNotExtendTokenIfCurrentlyAttempting ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> session . forceExtendAccessToken ( true ) ; </a> 0
<a> session . fakeTokenRefreshAttempt ( ) ; </a> 0
<a> Request request = Request . newMeRequest ( session , null ) ; </a> 0
<a> request . executeAndWait ( ) ; </a> 0
<a> assertFalse ( session . getWasAskedToExtendAccessToken ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testBasicSerialization ( ) throws IOException , ClassNotFoundException { </a> 0
<a> Session session0 = new Session . Builder ( getActivity ( ) ) . setApplicationId ( "fakeID" ) . build ( ) ; </a> 0
<a> Session session1 = TestUtils . serializeAndUnserialize ( session0 ) ; </a> 0
<a> assertNotNull ( session0 . getAccessToken ( ) ) ; </a> 0
<a> assertEquals ( session0 , session1 ) ; </a> 0
<a> Session . AuthorizationRequest authRequest0 = </a> 0
<a> new Session . OpenRequest ( getActivity ( ) ) . </a> 0
<a> setRequestCode ( 123 ) . </a> 0
<a> setLoginBehavior ( SessionLoginBehavior . SSO_ONLY ) ; </a> 0
<a> Session . AuthorizationRequest authRequest1 = TestUtils . serializeAndUnserialize ( authRequest0 ) ; </a> 0
<a> assertEquals ( authRequest0 . getLoginBehavior ( ) , authRequest1 . getLoginBehavior ( ) ) ; </a> 0
<a> assertEquals ( authRequest0 . getRequestCode ( ) , authRequest1 . getRequestCode ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpenSessionWithNativeLinkingIntent ( ) { </a> 0
<a> String token = "A token less unique than most" ; </a> 0
<a> Intent intent = new Intent ( Intent . ACTION_MAIN ) ; </a> 0
<a> intent . putExtras ( getNativeLinkingExtras ( token ) ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , DEFAULT_TIMEOUT_MILLISECONDS ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> AccessToken accessToken = AccessToken . createFromNativeLinkingIntent ( intent ) ; </a> 0
<a> assertNotNull ( accessToken ) ; </a> 0
<a> session . open ( accessToken , statusRecorder ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> assertEquals ( token , session . getAccessToken ( ) ) ; </a> 0
<a> long delta = session . getExpirationDate ( ) . getTime ( ) - new Date ( ) . getTime ( ) ; </a> 0
<a> assertTrue ( Math . abs ( delta - 3600 * 1000 ) < 5000 ) ; </a> 0
<a> assertEquals ( 0 , session . getPermissions ( ) . size ( ) ) ; </a> 0
<a> assertEquals ( Utility . getMetadataApplicationId ( getActivity ( ) ) , session . getApplicationId ( ) ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> assertFalse ( cache . getSavedState ( ) == null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpenActiveSessionWithNativeLinkingIntent ( ) { </a> 0
<a> Session activeSession = Session . getActiveSession ( ) ; </a> 0
<a> if ( activeSession != null ) { </a> 0
<a> activeSession . closeAndClearTokenInformation ( ) ; </a> 0
<a> } </a> 0
<a> SharedPreferencesTokenCachingStrategy tokenCache = new SharedPreferencesTokenCachingStrategy ( getActivity ( ) ) ; </a> 0
<a> assertEquals ( 0 , tokenCache . load ( ) . size ( ) ) ; </a> 0
<a> String token = "A token less unique than most" ; </a> 0
<a> Intent intent = new Intent ( Intent . ACTION_MAIN ) ; </a> 0
<a> intent . putExtras ( getNativeLinkingExtras ( token ) ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> AccessToken accessToken = AccessToken . createFromNativeLinkingIntent ( intent ) ; </a> 0
<a> assertNotNull ( accessToken ) ; </a> 0
<a> Session session = Session . openActiveSessionWithAccessToken ( getActivity ( ) , accessToken , statusRecorder ) ; </a> 0
<a> assertEquals ( session , Session . getActiveSession ( ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> assertNotSame ( 0 , tokenCache . load ( ) . size ( ) ) ; </a> 0
<a> assertEquals ( token , session . getAccessToken ( ) ) ; </a> 0
<a> long delta = session . getExpirationDate ( ) . getTime ( ) - new Date ( ) . getTime ( ) ; </a> 0
<a> assertTrue ( Math . abs ( delta - 3600 * 1000 ) < 5000 ) ; </a> 0
<a> assertEquals ( 0 , session . getPermissions ( ) . size ( ) ) ; </a> 0
<a> assertEquals ( Utility . getMetadataApplicationId ( getActivity ( ) ) , session . getApplicationId ( ) ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testOpeningSessionWithPendingRequestResultsInExceptionCallback ( ) { </a> 0
<a> ArrayList < String > permissions = new ArrayList < String > ( ) ; </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> AccessToken openToken = AccessToken </a> 0
<a> . createFromString ( "A token of thanks" , permissions , AccessTokenSource . TEST_USER ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> session . addPendingAuthorizeResult ( ) ; </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) . setCallback ( statusRecorder ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , new UnsupportedOperationException ( ) ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> static IntentFilter getActiveSessionFilter ( String ... actions ) { </a> 0
<a> IntentFilter filter = new IntentFilter ( ) ; </a> 0
<a> for ( String action : actions ) { </a> 0
<a> filter . addAction ( action ) ; </a> 0
<a> } </a> 0
<a> return filter ; </a> 0
<a> } </a> 0
<a> static IntentFilter getActiveSessionAllFilter ( ) { </a> 0
<a> return getActiveSessionFilter ( Session . ACTION_ACTIVE_SESSION_CLOSED , Session . ACTION_ACTIVE_SESSION_OPENED , </a> 0
<a> Session . ACTION_ACTIVE_SESSION_SET , Session . ACTION_ACTIVE_SESSION_UNSET ) ; </a> 0
<a> } </a> 0
<a> private void verifySessionHasToken ( Session session , AccessToken token ) { </a> 0
<a> assertEquals ( token . getToken ( ) , session . getAccessToken ( ) ) ; </a> 0
<a> assertEquals ( token . getExpires ( ) , session . getExpirationDate ( ) ) ; </a> 0
<a> TestUtils . assertAtLeastExpectedPermissions ( token . getPermissions ( ) , session . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . BroadcastReceiver ; </a> 1
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 1
<a> import android . os . Bundle ; </a> 0
<a> import android . os . ConditionVariable ; </a> 1
<a> import android . os . Looper ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . model . GraphMultiResult ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphObjectList ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import java . util . * ; </a> 0
<a> import java . util . concurrent . BlockingQueue ; </a> 0
<a> import java . util . concurrent . LinkedBlockingQueue ; </a> 0
<a> import java . util . concurrent . TimeUnit ; </a> 0
<a> public class SessionTestsBase extends FacebookTestCase { </a> 0
<a> public static final int DEFAULT_TIMEOUT_MILLISECONDS = 10 * 1000 ; </a> 0
<a> static final int SIMULATED_WORKING_MILLISECONDS = 20 ; </a> 0
<a> public static final int STRAY_CALLBACK_WAIT_MILLISECONDS = 50 ; </a> 0
<a> public ScriptedSession createScriptedSessionOnBlockerThread ( TokenCachingStrategy cachingStrategy ) { </a> 0
<a> return createScriptedSessionOnBlockerThread ( Utility . getMetadataApplicationId ( getActivity ( ) ) , cachingStrategy ) ; </a> 0
<a> } </a> 0
<a> ScriptedSession createScriptedSessionOnBlockerThread ( final String applicationId , </a> 0
<a> final TokenCachingStrategy cachingStrategy ) { </a> 0
<a> class MutableState { </a> 0
<a> ScriptedSession session ; </a> 0
<a> } </a> 0
<a> ; </a> 0
<a> final MutableState mutable = new MutableState ( ) ; </a> 0
<a> runOnBlockerThread ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> mutable . session = new ScriptedSession ( getActivity ( ) , applicationId , cachingStrategy ) ; </a> 0
<a> } </a> 0
<a> } , true ) ; </a> 0
<a> return mutable . session ; </a> 0
<a> } </a> 0
<a> public static void stall ( int stallMsec ) { </a> 0
<a> try { </a> 0
<a> Thread . sleep ( stallMsec ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( "InterruptedException while stalling" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class ScriptedSession extends Session { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> private final LinkedList < AuthorizeResult > pendingAuthorizations = new LinkedList < AuthorizeResult > ( ) ; </a> 0
<a> private AuthorizationRequest lastRequest ; </a> 0
<a> private AuthorizeResult currentAuthorization = null ; </a> 0
<a> public ScriptedSession ( Context currentContext , String applicationId , TokenCachingStrategy tokenCachingStrategy ) { </a> 0
<a> super ( currentContext , applicationId , tokenCachingStrategy ) ; </a> 0
<a> } </a> 0
<a> public void addAuthorizeResult ( String token , List < String > permissions , AccessTokenSource source ) { </a> 0
<a> addAuthorizeResult ( AccessToken . createFromString ( token , permissions , source ) ) ; </a> 0
<a> } </a> 0
<a> public void addAuthorizeResult ( AccessToken token ) { </a> 0
<a> pendingAuthorizations . add ( new AuthorizeResult ( token ) ) ; </a> 0
<a> } </a> 0
<a> public void addAuthorizeResult ( AccessToken token , List < String > permissions ) { </a> 0
<a> pendingAuthorizations . add ( new AuthorizeResult ( token , permissions ) ) ; </a> 0
<a> } </a> 0
<a> public void addAuthorizeResult ( AccessToken token , String ... permissions ) { </a> 0
<a> pendingAuthorizations . add ( new AuthorizeResult ( token , Arrays . asList ( permissions ) ) ) ; </a> 0
<a> } </a> 0
<a> public void addAuthorizeResult ( Exception exception ) { </a> 0
<a> pendingAuthorizations . add ( new AuthorizeResult ( exception ) ) ; </a> 0
<a> } </a> 0
<a> public void addPendingAuthorizeResult ( ) { </a> 0
<a> pendingAuthorizations . add ( new AuthorizeResult ( ) ) ; </a> 0
<a> } </a> 0
<a> public AuthorizationRequest getLastRequest ( ) { </a> 0
<a> return lastRequest ; </a> 0
<a> } </a> 0
<a> public SessionDefaultAudience getLastRequestAudience ( ) { </a> 0
<a> return lastRequest . getDefaultAudience ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void authorize ( final AuthorizationRequest request ) { </a> 0
<a> lastRequest = request ; </a> 0
<a> getActivity ( ) . runOnUiThread ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> stall ( SIMULATED_WORKING_MILLISECONDS ) ; </a> 0
<a> currentAuthorization = pendingAuthorizations . poll ( ) ; </a> 0
<a> if ( currentAuthorization == null ) { </a> 0
<a> fail ( "Missing call to addScriptedAuthorization" ) ; </a> 0
<a> } </a> 0
<a> if ( ! currentAuthorization . leaveAsPending ) { </a> 0
<a> finishAuthOrReauth ( currentAuthorization . token , currentAuthorization . exception ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private class AuthorizeResult { </a> 0
<a> final AccessToken token ; </a> 0
<a> final Exception exception ; </a> 0
<a> final List < String > resultingPermissions ; </a> 0
<a> final boolean leaveAsPending ; </a> 0
<a> private AuthorizeResult ( AccessToken token , Exception exception , List < String > permissions ) { </a> 0
<a> this . token = token ; </a> 0
<a> this . exception = exception ; </a> 0
<a> this . resultingPermissions = permissions ; </a> 0
<a> this . leaveAsPending = false ; </a> 0
<a> } </a> 0
<a> private AuthorizeResult ( ) { </a> 0
<a> this . token = null ; </a> 0
<a> this . exception = null ; </a> 0
<a> this . resultingPermissions = null ; </a> 0
<a> this . leaveAsPending = true ; </a> 0
<a> } </a> 0
<a> AuthorizeResult ( AccessToken token , List < String > permissions ) { </a> 0
<a> this ( token , null , permissions ) ; </a> 0
<a> } </a> 0
<a> AuthorizeResult ( AccessToken token ) { </a> 0
<a> this ( token , null , null ) ; </a> 0
<a> } </a> 0
<a> AuthorizeResult ( Exception exception ) { </a> 0
<a> this ( null , exception , null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class SessionStatusCallbackRecorder implements Session . StatusCallback { </a> 0
<a> private final BlockingQueue < Call > calls = new LinkedBlockingQueue < Call > ( ) ; </a> 0
<a> volatile boolean isClosed = false ; </a> 0
<a> public void waitForCall ( Session session , SessionState state , Exception exception ) { </a> 0
<a> Call call = null ; </a> 0
<a> try { </a> 0
<a> call = calls . poll ( DEFAULT_TIMEOUT_MILLISECONDS , TimeUnit . MILLISECONDS ) ; </a> 0
<a> if ( call == null ) { </a> 0
<a> fail ( "Did not get a status callback within timeout." ) ; </a> 0
<a> } </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( "InterruptedException while waiting for status callback: " + e ) ; </a> 0
<a> } </a> 0
<a> assertEquals ( session , call . session ) ; </a> 0
<a> assertEquals ( state , call . state ) ; </a> 0
<a> if ( exception != null && call . exception != null ) { </a> 0
<a> assertEquals ( exception . getClass ( ) , call . exception . getClass ( ) ) ; </a> 0
<a> } else { </a> 0
<a> assertTrue ( exception == call . exception ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void close ( ) { </a> 0
<a> isClosed = true ; </a> 0
<a> assertEquals ( 0 , calls . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> Call call = new Call ( session , state , exception ) ; </a> 0
<a> if ( ! calls . offer ( call ) ) { </a> 0
<a> fail ( "Test Error: Blocking queue ran out of capacity" ) ; </a> 0
<a> } </a> 0
<a> if ( isClosed ) { </a> 0
<a> fail ( "Reauthorize callback called after closed" ) ; </a> 0
<a> } </a> 0
<a> assertEquals ( "Callback should run on main UI thread" , Thread . currentThread ( ) , </a> 0
<a> Looper . getMainLooper ( ) . getThread ( ) ) ; </a> 0
<a> } </a> 0
<a> private static class Call { </a> 0
<a> final Session session ; </a> 0
<a> final SessionState state ; </a> 0
<a> final Exception exception ; </a> 0
<a> Call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> this . session = session ; </a> 0
<a> this . state = state ; </a> 0
<a> this . exception = exception ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class MockTokenCachingStrategy extends TokenCachingStrategy { </a> 0
<a> private final String token ; </a> 0
<a> private final long expires_in ; </a> 0
<a> private Bundle saved ; </a> 0
<a> MockTokenCachingStrategy ( ) { </a> 0
<a> this ( "FakeToken" , DEFAULT_TIMEOUT_MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> public MockTokenCachingStrategy ( String token , long expires_in ) { </a> 0
<a> this . token = token ; </a> 0
<a> this . expires_in = expires_in ; </a> 0
<a> this . saved = null ; </a> 0
<a> } </a> 0
<a> public Bundle getSavedState ( ) { </a> 0
<a> return saved ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Bundle load ( ) { </a> 0
<a> Bundle bundle = null ; </a> 0
<a> if ( token != null ) { </a> 0
<a> bundle = new Bundle ( ) ; </a> 0
<a> TokenCachingStrategy . putToken ( bundle , token ) ; </a> 0
<a> TokenCachingStrategy . putExpirationMilliseconds ( bundle , System . currentTimeMillis ( ) + expires_in ) ; </a> 0
<a> } </a> 0
<a> return bundle ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void save ( Bundle bundle ) { </a> 0
<a> this . saved = bundle ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> this . saved = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static class WaitForBroadcastReceiver extends BroadcastReceiver { </a> 0
<a> static int idGenerator = 0 ; </a> 0
<a> final int id = idGenerator ++ ; </a> 0
<a> ConditionVariable condition = new ConditionVariable ( true ) ; </a> 0
<a> int expectCount ; </a> 0
<a> int actualCount ; </a> 0
<a> public void incrementExpectCount ( ) { </a> 0
<a> incrementExpectCount ( 1 ) ; </a> 0
<a> } </a> 0
<a> public void incrementExpectCount ( int n ) { </a> 0
<a> expectCount += n ; </a> 0
<a> if ( actualCount < expectCount ) { </a> 0
<a> condition . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void waitForExpectedCalls ( ) { </a> 0
<a> if ( ! condition . block ( DEFAULT_TIMEOUT_MILLISECONDS ) ) { </a> 0
<a> assertTrue ( false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void incrementExpectCounts ( WaitForBroadcastReceiver ... receivers ) { </a> 0
<a> for ( WaitForBroadcastReceiver receiver : receivers ) { </a> 0
<a> receiver . incrementExpectCount ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void waitForExpectedCalls ( WaitForBroadcastReceiver ... receivers ) { </a> 0
<a> for ( WaitForBroadcastReceiver receiver : receivers ) { </a> 0
<a> receiver . waitForExpectedCalls ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onReceive ( Context context , Intent intent ) { </a> 0
<a> if ( ++ actualCount == expectCount ) { </a> 0
<a> condition . open ( ) ; </a> 0
<a> } </a> 0
<a> assertTrue ( actualCount <= expectCount ) ; </a> 0
<a> assertEquals ( "BroadcastReceiver should receive on main UI thread" , </a> 0
<a> Thread . currentThread ( ) , Looper . getMainLooper ( ) . getThread ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . ConditionVariable ; </a> 0
<a> import android . test . AndroidTestCase ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import java . util . concurrent . Executor ; </a> 0
<a> public final class SettingsTests extends AndroidTestCase { </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testGetExecutor ( ) { </a> 0
<a> final ConditionVariable condition = new ConditionVariable ( ) ; </a> 0
<a> Settings . getExecutor ( ) . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> condition . open ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> boolean success = condition . block ( 5000 ) ; </a> 0
<a> assertTrue ( success ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testSetExecutor ( ) { </a> 0
<a> final ConditionVariable condition = new ConditionVariable ( ) ; </a> 0
<a> final Runnable runnable = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { } </a> 0
<a> } ; </a> 0
<a> final Executor executor = new Executor ( ) { </a> 0
<a> @ Override </a> 0
<a> public void execute ( Runnable command ) { </a> 0
<a> assertEquals ( runnable , command ) ; </a> 0
<a> command . run ( ) ; </a> 0
<a> condition . open ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Executor original = Settings . getExecutor ( ) ; </a> 0
<a> try { </a> 0
<a> Settings . setExecutor ( executor ) ; </a> 0
<a> Settings . getExecutor ( ) . execute ( runnable ) ; </a> 0
<a> boolean success = condition . block ( 5000 ) ; </a> 0
<a> assertTrue ( success ) ; </a> 0
<a> } finally { </a> 0
<a> Settings . setExecutor ( original ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . AndroidTestCase ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import junit . framework . Assert ; </a> 0
<a> import java . lang . reflect . Array ; </a> 0
<a> import java . util . * ; </a> 0
<a> public final class SharedPreferencesTokenCacheTests extends AndroidTestCase { </a> 0
<a> private static final String BOOLEAN_KEY = "booleanKey" ; </a> 0
<a> private static final String BOOLEAN_ARRAY_KEY = "booleanArrayKey" ; </a> 0
<a> private static final String BYTE_KEY = "byteKey" ; </a> 0
<a> private static final String BYTE_ARRAY_KEY = "byteArrayKey" ; </a> 0
<a> private static final String SHORT_KEY = "shortKey" ; </a> 0
<a> private static final String SHORT_ARRAY_KEY = "shortArrayKey" ; </a> 0
<a> private static final String INT_KEY = "intKey" ; </a> 0
<a> private static final String INT_ARRAY_KEY = "intArrayKey" ; </a> 0
<a> private static final String LONG_KEY = "longKey" ; </a> 0
<a> private static final String LONG_ARRAY_KEY = "longArrayKey" ; </a> 0
<a> private static final String FLOAT_ARRAY_KEY = "floatKey" ; </a> 0
<a> private static final String FLOAT_KEY = "floatArrayKey" ; </a> 0
<a> private static final String DOUBLE_KEY = "doubleKey" ; </a> 0
<a> private static final String DOUBLE_ARRAY_KEY = "doubleArrayKey" ; </a> 0
<a> private static final String CHAR_KEY = "charKey" ; </a> 0
<a> private static final String CHAR_ARRAY_KEY = "charArrayKey" ; </a> 0
<a> private static final String STRING_KEY = "stringKey" ; </a> 0
<a> private static final String STRING_LIST_KEY = "stringListKey" ; </a> 0
<a> private static final String SERIALIZABLE_KEY = "serializableKey" ; </a> 0
<a> private static Random random = new Random ( ( new Date ( ) ) . getTime ( ) ) ; </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testAllTypes ( ) { </a> 0
<a> Bundle originalBundle = new Bundle ( ) ; </a> 0
<a> putBoolean ( BOOLEAN_KEY , originalBundle ) ; </a> 0
<a> putBooleanArray ( BOOLEAN_ARRAY_KEY , originalBundle ) ; </a> 0
<a> putByte ( BYTE_KEY , originalBundle ) ; </a> 0
<a> putByteArray ( BYTE_ARRAY_KEY , originalBundle ) ; </a> 0
<a> putShort ( SHORT_KEY , originalBundle ) ; </a> 0
<a> putShortArray ( SHORT_ARRAY_KEY , originalBundle ) ; </a> 0
<a> putInt ( INT_KEY , originalBundle ) ; </a> 0
<a> putIntArray ( INT_ARRAY_KEY , originalBundle ) ; </a> 0
<a> putLong ( LONG_KEY , originalBundle ) ; </a> 0
<a> putLongArray ( LONG_ARRAY_KEY , originalBundle ) ; </a> 0
<a> putFloat ( FLOAT_KEY , originalBundle ) ; </a> 0
<a> putFloatArray ( FLOAT_ARRAY_KEY , originalBundle ) ; </a> 0
<a> putDouble ( DOUBLE_KEY , originalBundle ) ; </a> 0
<a> putDoubleArray ( DOUBLE_ARRAY_KEY , originalBundle ) ; </a> 0
<a> putChar ( CHAR_KEY , originalBundle ) ; </a> 0
<a> putCharArray ( CHAR_ARRAY_KEY , originalBundle ) ; </a> 0
<a> putString ( STRING_KEY , originalBundle ) ; </a> 0
<a> putStringList ( STRING_LIST_KEY , originalBundle ) ; </a> 0
<a> originalBundle . putSerializable ( SERIALIZABLE_KEY , AccessTokenSource . FACEBOOK_APPLICATION_WEB ) ; </a> 0
<a> ensureApplicationContext ( ) ; </a> 0
<a> SharedPreferencesTokenCachingStrategy cache = new SharedPreferencesTokenCachingStrategy ( getContext ( ) ) ; </a> 0
<a> cache . save ( originalBundle ) ; </a> 0
<a> SharedPreferencesTokenCachingStrategy cache2 = new SharedPreferencesTokenCachingStrategy ( getContext ( ) ) ; </a> 0
<a> Bundle cachedBundle = cache2 . load ( ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getBoolean ( BOOLEAN_KEY ) , cachedBundle . getBoolean ( BOOLEAN_KEY ) ) ; </a> 0
<a> assertArrayEquals ( originalBundle . getBooleanArray ( BOOLEAN_ARRAY_KEY ) , cachedBundle . getBooleanArray ( BOOLEAN_ARRAY_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getByte ( BYTE_KEY ) , cachedBundle . getByte ( BYTE_KEY ) ) ; </a> 0
<a> assertArrayEquals ( originalBundle . getByteArray ( BYTE_ARRAY_KEY ) , cachedBundle . getByteArray ( BYTE_ARRAY_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getShort ( SHORT_KEY ) , cachedBundle . getShort ( SHORT_KEY ) ) ; </a> 0
<a> assertArrayEquals ( originalBundle . getShortArray ( SHORT_ARRAY_KEY ) , cachedBundle . getShortArray ( SHORT_ARRAY_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getInt ( INT_KEY ) , cachedBundle . getInt ( INT_KEY ) ) ; </a> 0
<a> assertArrayEquals ( originalBundle . getIntArray ( INT_ARRAY_KEY ) , cachedBundle . getIntArray ( INT_ARRAY_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getLong ( LONG_KEY ) , cachedBundle . getLong ( LONG_KEY ) ) ; </a> 0
<a> assertArrayEquals ( originalBundle . getLongArray ( LONG_ARRAY_KEY ) , cachedBundle . getLongArray ( LONG_ARRAY_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getFloat ( FLOAT_KEY ) , cachedBundle . getFloat ( FLOAT_KEY ) ) ; </a> 0
<a> assertArrayEquals ( originalBundle . getFloatArray ( FLOAT_ARRAY_KEY ) , cachedBundle . getFloatArray ( FLOAT_ARRAY_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getDouble ( DOUBLE_KEY ) , cachedBundle . getDouble ( DOUBLE_KEY ) ) ; </a> 0
<a> assertArrayEquals ( originalBundle . getDoubleArray ( DOUBLE_ARRAY_KEY ) , cachedBundle . getDoubleArray ( DOUBLE_ARRAY_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getChar ( CHAR_KEY ) , cachedBundle . getChar ( CHAR_KEY ) ) ; </a> 0
<a> assertArrayEquals ( originalBundle . getCharArray ( CHAR_ARRAY_KEY ) , cachedBundle . getCharArray ( CHAR_ARRAY_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getString ( STRING_KEY ) , cachedBundle . getString ( STRING_KEY ) ) ; </a> 0
<a> assertListEquals ( originalBundle . getStringArrayList ( STRING_LIST_KEY ) , cachedBundle . getStringArrayList ( </a> 0
<a> STRING_LIST_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( originalBundle . getSerializable ( SERIALIZABLE_KEY ) , </a> 0
<a> cachedBundle . getSerializable ( SERIALIZABLE_KEY ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMultipleCaches ( ) { </a> 0
<a> Bundle bundle1 = new Bundle ( ) , bundle2 = new Bundle ( ) ; </a> 0
<a> bundle1 . putInt ( INT_KEY , 10 ) ; </a> 0
<a> bundle1 . putString ( STRING_KEY , "ABC" ) ; </a> 0
<a> bundle2 . putInt ( INT_KEY , 100 ) ; </a> 0
<a> bundle2 . putString ( STRING_KEY , "xyz" ) ; </a> 0
<a> ensureApplicationContext ( ) ; </a> 0
<a> SharedPreferencesTokenCachingStrategy cache1 = new SharedPreferencesTokenCachingStrategy ( getContext ( ) ) ; </a> 0
<a> SharedPreferencesTokenCachingStrategy cache2 = new SharedPreferencesTokenCachingStrategy ( getContext ( ) , "CustomCache" ) ; </a> 0
<a> cache1 . save ( bundle1 ) ; </a> 0
<a> cache2 . save ( bundle2 ) ; </a> 0
<a> cache1 = new SharedPreferencesTokenCachingStrategy ( getContext ( ) , "CustomCache" ) ; </a> 0
<a> cache2 = new SharedPreferencesTokenCachingStrategy ( getContext ( ) ) ; </a> 0
<a> Bundle newBundle1 = cache1 . load ( ) , newBundle2 = cache2 . load ( ) ; </a> 0
<a> Assert . assertEquals ( bundle2 . getInt ( INT_KEY ) , newBundle1 . getInt ( INT_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( bundle2 . getString ( STRING_KEY ) , newBundle1 . getString ( STRING_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( bundle1 . getInt ( INT_KEY ) , newBundle2 . getInt ( INT_KEY ) ) ; </a> 0
<a> Assert . assertEquals ( bundle1 . getString ( STRING_KEY ) , newBundle2 . getString ( STRING_KEY ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCacheRoundtrip ( ) { </a> 0
<a> ArrayList < String > permissions = Utility . arrayList ( "stream_publish" , "go_outside_and_play" ) ; </a> 0
<a> String token = "AnImaginaryTokenValue" ; </a> 0
<a> Date later = TestUtils . nowPlusSeconds ( 60 ) ; </a> 0
<a> Date earlier = TestUtils . nowPlusSeconds ( - 60 ) ; </a> 0
<a> SharedPreferencesTokenCachingStrategy cache = new SharedPreferencesTokenCachingStrategy ( getContext ( ) ) ; </a> 0
<a> cache . clear ( ) ; </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> TokenCachingStrategy . putToken ( bundle , token ) ; </a> 0
<a> TokenCachingStrategy . putExpirationDate ( bundle , later ) ; </a> 0
<a> TokenCachingStrategy . putSource ( bundle , AccessTokenSource . FACEBOOK_APPLICATION_NATIVE ) ; </a> 0
<a> TokenCachingStrategy . putLastRefreshDate ( bundle , earlier ) ; </a> 0
<a> TokenCachingStrategy . putPermissions ( bundle , permissions ) ; </a> 0
<a> cache . save ( bundle ) ; </a> 0
<a> bundle = cache . load ( ) ; </a> 0
<a> AccessToken accessToken = AccessToken . createFromCache ( bundle ) ; </a> 0
<a> TestUtils . assertSamePermissions ( permissions , accessToken ) ; </a> 0
<a> assertEquals ( token , accessToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( AccessTokenSource . FACEBOOK_APPLICATION_NATIVE , accessToken . getSource ( ) ) ; </a> 0
<a> assertTrue ( ! accessToken . isInvalid ( ) ) ; </a> 0
<a> Bundle cachedBundle = accessToken . toCacheBundle ( ) ; </a> 0
<a> TestUtils . assertEqualContents ( bundle , cachedBundle ) ; </a> 0
<a> } </a> 0
<a> private static void assertArrayEquals ( Object a1 , Object a2 ) { </a> 0
<a> Assert . assertNotNull ( a1 ) ; </a> 0
<a> Assert . assertNotNull ( a2 ) ; </a> 0
<a> Assert . assertEquals ( a1 . getClass ( ) , a2 . getClass ( ) ) ; </a> 0
<a> Assert . assertTrue ( "Not an array" , a1 . getClass ( ) . isArray ( ) ) ; </a> 0
<a> int length = Array . getLength ( a1 ) ; </a> 0
<a> Assert . assertEquals ( length , Array . getLength ( a2 ) ) ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> Object a1Value = Array . get ( a1 , i ) ; </a> 0
<a> Object a2Value = Array . get ( a2 , i ) ; </a> 0
<a> Assert . assertEquals ( a1Value , a2Value ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void assertListEquals ( List < ? > l1 , List < ? > l2 ) { </a> 0
<a> Assert . assertNotNull ( l1 ) ; </a> 0
<a> Assert . assertNotNull ( l2 ) ; </a> 0
<a> Iterator < ? > i1 = l1 . iterator ( ) , i2 = l2 . iterator ( ) ; </a> 0
<a> while ( i1 . hasNext ( ) && i2 . hasNext ( ) ) { </a> 0
<a> Assert . assertEquals ( i1 . next ( ) , i2 . next ( ) ) ; </a> 0
<a> } </a> 0
<a> Assert . assertTrue ( "Lists not of the same length" , ! i1 . hasNext ( ) ) ; </a> 0
<a> Assert . assertTrue ( "Lists not of the same length" , ! i2 . hasNext ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void putInt ( String key , Bundle bundle ) { </a> 0
<a> bundle . putInt ( key , random . nextInt ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void putIntArray ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( 50 ) ; </a> 0
<a> int [ ] array = new int [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = random . nextInt ( ) ; </a> 0
<a> } </a> 0
<a> bundle . putIntArray ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void putShort ( String key , Bundle bundle ) { </a> 0
<a> bundle . putShort ( key , ( short ) random . nextInt ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void putShortArray ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( 50 ) ; </a> 0
<a> short [ ] array = new short [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = ( short ) random . nextInt ( ) ; </a> 0
<a> } </a> 0
<a> bundle . putShortArray ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void putByte ( String key , Bundle bundle ) { </a> 0
<a> bundle . putByte ( key , ( byte ) random . nextInt ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void putByteArray ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( 50 ) ; </a> 0
<a> byte [ ] array = new byte [ length ] ; </a> 0
<a> random . nextBytes ( array ) ; </a> 0
<a> bundle . putByteArray ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void putBoolean ( String key , Bundle bundle ) { </a> 0
<a> bundle . putBoolean ( key , random . nextBoolean ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void putBooleanArray ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( 50 ) ; </a> 0
<a> boolean [ ] array = new boolean [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = random . nextBoolean ( ) ; </a> 0
<a> } </a> 0
<a> bundle . putBooleanArray ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void putLong ( String key , Bundle bundle ) { </a> 0
<a> bundle . putLong ( key , random . nextLong ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void putLongArray ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( 50 ) ; </a> 0
<a> long [ ] array = new long [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = random . nextLong ( ) ; </a> 0
<a> } </a> 0
<a> bundle . putLongArray ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void putFloat ( String key , Bundle bundle ) { </a> 0
<a> bundle . putFloat ( key , random . nextFloat ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void putFloatArray ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( 50 ) ; </a> 0
<a> float [ ] array = new float [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = random . nextFloat ( ) ; </a> 0
<a> } </a> 0
<a> bundle . putFloatArray ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void putDouble ( String key , Bundle bundle ) { </a> 0
<a> bundle . putDouble ( key , random . nextDouble ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void putDoubleArray ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( 50 ) ; </a> 0
<a> double [ ] array = new double [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = random . nextDouble ( ) ; </a> 0
<a> } </a> 0
<a> bundle . putDoubleArray ( key , array ) ; </a> 0
<a> } </a> 0
<a> private static void putChar ( String key , Bundle bundle ) { </a> 0
<a> bundle . putChar ( key , getChar ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void putCharArray ( String key , Bundle bundle ) { </a> 0
<a> bundle . putCharArray ( key , getCharArray ( ) ) ; </a> 0
<a> } </a> 0
<a> private static void putString ( String key , Bundle bundle ) { </a> 0
<a> bundle . putString ( key , new String ( getCharArray ( ) ) ) ; </a> 0
<a> } </a> 0
<a> private static void putStringList ( String key , Bundle bundle ) { </a> 0
<a> int length = random . nextInt ( 50 ) ; </a> 0
<a> ArrayList < String > stringList = new ArrayList < String > ( length ) ; </a> 0
<a> while ( 0 < length -- ) { </a> 0
<a> if ( length == 0 ) { </a> 0
<a> stringList . add ( null ) ; </a> 0
<a> } else { </a> 0
<a> stringList . add ( new String ( getCharArray ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> bundle . putStringArrayList ( key , stringList ) ; </a> 0
<a> } </a> 0
<a> private static char [ ] getCharArray ( ) { </a> 0
<a> int length = random . nextInt ( 50 ) ; </a> 0
<a> char [ ] array = new char [ length ] ; </a> 0
<a> for ( int i = 0 ; i < length ; i ++ ) { </a> 0
<a> array [ i ] = getChar ( ) ; </a> 0
<a> } </a> 0
<a> return array ; </a> 0
<a> } </a> 0
<a> private static char getChar ( ) { </a> 0
<a> return ( char ) random . nextInt ( 255 ) ; </a> 0
<a> } </a> 0
<a> private void ensureApplicationContext ( ) { </a> 0
<a> long waitedFor = 0 ; </a> 0
<a> try { </a> 0
<a> while ( getContext ( ) . getApplicationContext ( ) == null && waitedFor <= 2000 ) { </a> 0
<a> Thread . sleep ( 50 ) ; </a> 0
<a> waitedFor += 50 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . os . HandlerThread ; </a> 0
<a> public class TestBlocker extends HandlerThread { </a> 0
<a> private Exception exception ; </a> 0
<a> public int signals ; </a> 0
<a> private volatile Handler handler ; </a> 0
<a> private TestBlocker ( ) { </a> 0
<a> super ( "TestBlocker" ) ; </a> 0
<a> } </a> 0
<a> public synchronized static TestBlocker createTestBlocker ( ) { </a> 0
<a> TestBlocker blocker = new TestBlocker ( ) ; </a> 0
<a> blocker . start ( ) ; </a> 0
<a> synchronized ( blocker ) { </a> 0
<a> while ( blocker . handler == null ) { </a> 0
<a> try { </a> 0
<a> blocker . wait ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return blocker ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 0
<a> super . run ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> setException ( e ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this ) { </a> 0
<a> notifyAll ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public Handler getHandler ( ) { </a> 0
<a> return handler ; </a> 0
<a> } </a> 0
<a> public void assertSuccess ( ) throws Exception { </a> 0
<a> Exception e = getException ( ) ; </a> 0
<a> if ( e != null ) { </a> 0
<a> throw e ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public synchronized void signal ( ) { </a> 0
<a> ++ signals ; </a> 0
<a> notifyAll ( ) ; </a> 0
<a> } </a> 0
<a> public void waitForSignals ( int numSignals ) throws Exception { </a> 0
<a> assertSuccess ( ) ; </a> 0
<a> setException ( null ) ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> while ( getException ( ) == null && signals < numSignals ) { </a> 0
<a> try { </a> 0
<a> wait ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> signals = 0 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void waitForSignalsAndAssertSuccess ( int numSignals ) throws Exception { </a> 0
<a> waitForSignals ( numSignals ) ; </a> 0
<a> assertSuccess ( ) ; </a> 0
<a> } </a> 0
<a> public synchronized Exception getException ( ) { </a> 0
<a> return exception ; </a> 0
<a> } </a> 0
<a> public synchronized void setException ( Exception e ) { </a> 0
<a> exception = e ; </a> 0
<a> notifyAll ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onLooperPrepared ( ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> handler = new Handler ( getLooper ( ) ) ; </a> 0
<a> notifyAll ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> public class TestSessionTests extends FacebookTestCase { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanCreateWithPrivateUser ( ) { </a> 0
<a> TestSession session = TestSession . createSessionWithPrivateUser ( getActivity ( ) , null ) ; </a> 0
<a> assertTrue ( session != null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanCreateWithSharedUser ( ) { </a> 0
<a> TestSession session = TestSession . createSessionWithSharedUser ( getActivity ( ) , null ) ; </a> 0
<a> assertTrue ( session != null ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanOpenWithSharedUser ( ) throws Throwable { </a> 0
<a> final TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> TestSession session = getTestSessionWithSharedUser ( ) ; </a> 0
<a> Session . OpenRequest openRequest = new Session . OpenRequest ( getActivity ( ) ) . </a> 0
<a> setCallback ( </a> 0
<a> new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> assertTrue ( exception == null ) ; </a> 0
<a> blocker . signal ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> session . openForRead ( openRequest ) ; </a> 0
<a> waitAndAssertSuccess ( blocker , 1 ) ; </a> 0
<a> assertTrue ( session . getState ( ) . isOpened ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testSharedUserDoesntCreateUnnecessaryUsers ( ) throws Throwable { </a> 0
<a> TestSession session = getTestSessionWithSharedUser ( ) ; </a> 0
<a> openSession ( getActivity ( ) , session ) ; </a> 0
<a> int startingUserCount = countTestUsers ( ) ; </a> 0
<a> session = getTestSessionWithSharedUser ( ) ; </a> 0
<a> openSession ( getActivity ( ) , session ) ; </a> 0
<a> int endingUserCount = countTestUsers ( ) ; </a> 0
<a> assertSame ( startingUserCount , endingUserCount ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void failing_testPrivateUserIsDeletedOnSessionClose ( ) throws Throwable { </a> 0
<a> final TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> int startingUserCount = countTestUsers ( ) ; </a> 0
<a> TestSession session = getTestSessionWithPrivateUser ( blocker ) ; </a> 0
<a> openSession ( getActivity ( ) , session ) ; </a> 0
<a> int sessionOpenUserCount = countTestUsers ( ) ; </a> 0
<a> assertSame ( startingUserCount + 1 , sessionOpenUserCount ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> int endingUserCount = countTestUsers ( ) ; </a> 0
<a> assertSame ( startingUserCount , endingUserCount ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCannotChangeTestApplicationIdOnceSet ( ) { </a> 0
<a> try { </a> 0
<a> TestSession . setTestApplicationId ( "hello" ) ; </a> 0
<a> TestSession . setTestApplicationId ( "world" ) ; </a> 0
<a> fail ( "expected exception" ) ; </a> 0
<a> } catch ( FacebookException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCannotChangeTestApplicationSecretOnceSet ( ) { </a> 0
<a> try { </a> 0
<a> TestSession . setTestApplicationSecret ( "hello" ) ; </a> 0
<a> TestSession . setTestApplicationSecret ( "world" ) ; </a> 0
<a> fail ( "expected exception" ) ; </a> 0
<a> } catch ( FacebookException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private int countTestUsers ( ) { </a> 0
<a> TestSession session = getTestSessionWithSharedUser ( null ) ; </a> 0
<a> String appAccessToken = TestSession . getAppAccessToken ( ) ; </a> 0
<a> assertNotNull ( appAccessToken ) ; </a> 0
<a> String applicationId = session . getApplicationId ( ) ; </a> 0
<a> assertNotNull ( applicationId ) ; </a> 0
<a> String fqlQuery = String . format ( "SELECT id FROM test_account WHERE app_id = %s" , applicationId ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "q" , fqlQuery ) ; </a> 0
<a> parameters . putString ( "access_token" , appAccessToken ) ; </a> 0
<a> Request request = new Request ( null , "fql" , parameters , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> JSONArray data = ( JSONArray ) response . getGraphObject ( ) . getProperty ( "data" ) ; </a> 0
<a> return data . length ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import junit . framework . Assert ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class TestUtils { </a> 0
<a> public static < T extends Serializable > T serializeAndUnserialize ( T t ) { </a> 0
<a> try { </a> 0
<a> ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ; </a> 0
<a> new ObjectOutputStream ( os ) . writeObject ( t ) ; </a> 0
<a> ByteArrayInputStream is = new ByteArrayInputStream ( os . toByteArray ( ) ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> T ret = ( T ) ( new ObjectInputStream ( is ) ) . readObject ( ) ; </a> 0
<a> return ret ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new RuntimeException ( e ) ; </a> 0
<a> } catch ( ClassNotFoundException e ) { </a> 0
<a> throw new RuntimeException ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static Date nowPlusSeconds ( long offset ) { </a> 0
<a> return new Date ( new Date ( ) . getTime ( ) + ( offset * 1000L ) ) ; </a> 0
<a> } </a> 0
<a> static void assertSamePermissions ( List < String > expected , AccessToken actual ) { </a> 0
<a> if ( expected == null ) { </a> 0
<a> Assert . assertEquals ( null , actual . getPermissions ( ) ) ; </a> 0
<a> } else { </a> 0
<a> for ( String p : expected ) { </a> 0
<a> Assert . assertTrue ( actual . getPermissions ( ) . contains ( p ) ) ; </a> 0
<a> } </a> 0
<a> for ( String p : actual . getPermissions ( ) ) { </a> 0
<a> Assert . assertTrue ( expected . contains ( p ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static void assertSamePermissions ( List < String > expected , List < String > actual ) { </a> 0
<a> if ( expected == null ) { </a> 0
<a> Assert . assertEquals ( null , actual ) ; </a> 0
<a> } else { </a> 0
<a> for ( String p : expected ) { </a> 0
<a> Assert . assertTrue ( actual . contains ( p ) ) ; </a> 0
<a> } </a> 0
<a> for ( String p : actual ) { </a> 0
<a> Assert . assertTrue ( expected . contains ( p ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static void assertAtLeastExpectedPermissions ( List < String > expected , List < String > actual ) { </a> 0
<a> if ( expected != null ) { </a> 0
<a> for ( String p : expected ) { </a> 0
<a> Assert . assertTrue ( actual . contains ( p ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static void assertEqualContents ( Bundle a , Bundle b ) { </a> 0
<a> for ( String key : a . keySet ( ) ) { </a> 0
<a> if ( ! b . containsKey ( key ) ) { </a> 0
<a> Assert . fail ( "bundle does not include key " + key ) ; </a> 0
<a> } </a> 0
<a> Assert . assertEquals ( a . get ( key ) , b . get ( key ) ) ; </a> 0
<a> } </a> 0
<a> for ( String key : b . keySet ( ) ) { </a> 0
<a> if ( ! a . containsKey ( key ) ) { </a> 0
<a> Assert . fail ( "bundle does not include key " + key ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . internal . SessionTracker ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> public class SessionTrackerTests extends SessionTestsBase { </a> 0
<a> private static final String TOKEN_STR = "A token of thanks" ; </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testDelegateWithActiveSession ( ) throws Exception { </a> 0
<a> Session . setActiveSession ( null ) ; </a> 0
<a> final SessionStatusCallbackRecorder statusRecorder = </a> 0
<a> new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> final MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> final ScriptedSession session = </a> 0
<a> createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> session . addAuthorizeResult ( TOKEN_STR , Collections . < String > emptyList ( ) , AccessTokenSource . TEST_USER ) ; </a> 0
<a> final SessionTracker tracker = new SessionTracker ( getActivity ( ) , statusRecorder ) ; </a> 0
<a> Session . setActiveSession ( session ) ; </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> assertNotNull ( "Session should be open" , tracker . getOpenSession ( ) ) ; </a> 0
<a> assertEquals ( "Access Token check" , TOKEN_STR , tracker . getOpenSession ( ) . getAccessToken ( ) ) ; </a> 0
<a> tracker . getOpenSession ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> tracker . stopTracking ( ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testDelegateWithSessionInConstructor ( ) throws Exception { </a> 0
<a> final SessionStatusCallbackRecorder statusRecorder = </a> 0
<a> new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> final MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> final ScriptedSession session = </a> 0
<a> createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> session . addAuthorizeResult ( TOKEN_STR , Collections . < String > emptyList ( ) , AccessTokenSource . TEST_USER ) ; </a> 0
<a> SessionTracker tracker = new SessionTracker ( getActivity ( ) , statusRecorder , session ) ; </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> assertNotNull ( "Session should be open" , tracker . getOpenSession ( ) ) ; </a> 0
<a> assertEquals ( "Access Token check" , TOKEN_STR , tracker . getOpenSession ( ) . getAccessToken ( ) ) ; </a> 0
<a> tracker . getOpenSession ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> tracker . stopTracking ( ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testDelegateWithActiveSessionThenNewSession ( ) throws Exception { </a> 0
<a> Session . setActiveSession ( null ) ; </a> 0
<a> final SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> final MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> final ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> session . addAuthorizeResult ( TOKEN_STR , Collections . < String > emptyList ( ) , AccessTokenSource . TEST_USER ) ; </a> 0
<a> SessionTracker tracker = new SessionTracker ( getActivity ( ) , statusRecorder ) ; </a> 0
<a> Session . setActiveSession ( session ) ; </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> assertNotNull ( "Session should be open" , tracker . getOpenSession ( ) ) ; </a> 0
<a> assertEquals ( "Access Token check" , TOKEN_STR , tracker . getOpenSession ( ) . getAccessToken ( ) ) ; </a> 0
<a> tracker . getOpenSession ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> final ScriptedSession newSession = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> newSession . addAuthorizeResult ( TOKEN_STR , Collections . < String > emptyList ( ) , AccessTokenSource . TEST_USER ) ; </a> 0
<a> tracker . setSession ( newSession ) ; </a> 0
<a> assertNull ( "Session should not be open" , tracker . getOpenSession ( ) ) ; </a> 0
<a> newSession . openForRead ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( newSession , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( newSession , SessionState . OPENED , null ) ; </a> 0
<a> assertNotNull ( "Session should be open" , tracker . getOpenSession ( ) ) ; </a> 0
<a> assertEquals ( "Access Token check" , TOKEN_STR , tracker . getOpenSession ( ) . getAccessToken ( ) ) ; </a> 0
<a> tracker . getOpenSession ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( newSession , SessionState . CLOSED , null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> tracker . stopTracking ( ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testDelegateWithSessionThenActiveSession ( ) throws Exception { </a> 0
<a> Session . setActiveSession ( null ) ; </a> 0
<a> final SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> final MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> final ScriptedSession session = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> session . addAuthorizeResult ( TOKEN_STR , Collections . < String > emptyList ( ) , AccessTokenSource . TEST_USER ) ; </a> 0
<a> final SessionTracker tracker = new SessionTracker ( getActivity ( ) , statusRecorder , session ) ; </a> 0
<a> session . openForRead ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> assertNotNull ( "Session should be open" , tracker . getOpenSession ( ) ) ; </a> 0
<a> assertEquals ( "Access Token check" , TOKEN_STR , tracker . getOpenSession ( ) . getAccessToken ( ) ) ; </a> 0
<a> tracker . getOpenSession ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> final ScriptedSession newSession = createScriptedSessionOnBlockerThread ( cache ) ; </a> 0
<a> newSession . addAuthorizeResult ( TOKEN_STR , Collections . < String > emptyList ( ) , AccessTokenSource . TEST_USER ) ; </a> 0
<a> runOnBlockerThread ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> tracker . setSession ( null ) ; </a> 0
<a> Session . setActiveSession ( newSession ) ; </a> 0
<a> } </a> 0
<a> } , true ) ; </a> 0
<a> assertNull ( "Session should not be open" , tracker . getOpenSession ( ) ) ; </a> 0
<a> newSession . openForRead ( new Session . OpenRequest ( getActivity ( ) ) ) ; </a> 0
<a> statusRecorder . waitForCall ( newSession , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( newSession , SessionState . OPENED , null ) ; </a> 0
<a> assertNotNull ( "Session should be open" , tracker . getOpenSession ( ) ) ; </a> 0
<a> assertEquals ( "Access Token check" , TOKEN_STR , tracker . getOpenSession ( ) . getAccessToken ( ) ) ; </a> 0
<a> tracker . getOpenSession ( ) . close ( ) ; </a> 0
<a> statusRecorder . waitForCall ( newSession , SessionState . CLOSED , null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> tracker . stopTracking ( ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . test . AndroidTestCase ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> public class ValidateTests extends AndroidTestCase { </a> 0
<a> @ SmallTest </a> 0
<a> public void testNotNullOnNonNull ( ) { </a> 0
<a> Validate . notNull ( "A string" , "name" ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void testNotNullOnNull ( ) { </a> 0
<a> try { </a> 0
<a> Validate . notNull ( null , "name" ) ; </a> 0
<a> fail ( "expected exception" ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void testNotEmptyOnNonEmpty ( ) { </a> 0
<a> Validate . notEmpty ( Arrays . asList ( new String [ ] { "hi" } ) , "name" ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void testNotEmptylOnEmpty ( ) { </a> 0
<a> try { </a> 0
<a> Validate . notEmpty ( Arrays . asList ( new String [ ] { } ) , "name" ) ; </a> 0
<a> fail ( "expected exception" ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void testNotNullOrEmptyOnNonEmpty ( ) { </a> 0
<a> Validate . notNullOrEmpty ( "hi" , "name" ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void testNotNullOrEmptyOnEmpty ( ) { </a> 0
<a> try { </a> 0
<a> Validate . notNullOrEmpty ( "" , "name" ) ; </a> 0
<a> fail ( "expected exception" ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void testNotNullOrEmptyOnNull ( ) { </a> 0
<a> try { </a> 0
<a> Validate . notNullOrEmpty ( null , "name" ) ; </a> 0
<a> fail ( "expected exception" ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void testOneOfOnValid ( ) { </a> 0
<a> Validate . oneOf ( "hi" , "name" , "hi" , "there" ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void testOneOfOnInvalid ( ) { </a> 0
<a> try { </a> 0
<a> Validate . oneOf ( "hit" , "name" , "hi" , "there" ) ; </a> 0
<a> fail ( "expected exception" ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void testOneOfOnValidNull ( ) { </a> 0
<a> Validate . oneOf ( null , "name" , "hi" , "there" , null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> public void testOneOfOnInvalidNull ( ) { </a> 0
<a> try { </a> 0
<a> Validate . oneOf ( null , "name" , "hi" , "there" ) ; </a> 0
<a> fail ( "expected exception" ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import android . test . AndroidTestCase ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . FacebookGraphObjectException ; </a> 0
<a> import junit . framework . Assert ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . * ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> public final class GraphObjectFactoryTests extends AndroidTestCase { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreateEmptyGraphObject ( ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> assertTrue ( graphObject != null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanTreatAsMap ( ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> assertEquals ( "world" , ( String ) graphObject . asMap ( ) . get ( "hello" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanTreatAsGraphPlace ( ) { </a> 0
<a> GraphPlace graphPlace = GraphObject . Factory . create ( GraphPlace . class ) ; </a> 0
<a> graphPlace . setName ( "hello" ) ; </a> 0
<a> assertEquals ( "hello" , graphPlace . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanTreatAsGraphUser ( ) { </a> 0
<a> GraphUser graphUser = GraphObject . Factory . create ( GraphUser . class ) ; </a> 0
<a> graphUser . setFirstName ( "Michael" ) ; </a> 0
<a> assertEquals ( "Michael" , graphUser . getFirstName ( ) ) ; </a> 0
<a> assertEquals ( "Michael" , graphUser . getProperty ( "first_name" ) ) ; </a> 0
<a> assertEquals ( "Michael" , graphUser . asMap ( ) . get ( "first_name" ) ) ; </a> 0
<a> graphUser . setProperty ( "last_name" , "Scott" ) ; </a> 0
<a> assertEquals ( "Scott" , graphUser . getProperty ( "last_name" ) ) ; </a> 0
<a> assertEquals ( "Scott" , graphUser . getLastName ( ) ) ; </a> 0
<a> assertEquals ( "Scott" , graphUser . asMap ( ) . get ( "last_name" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanCastBetweenGraphObjectTypes ( ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> graphObject . setProperty ( "first_name" , "Mickey" ) ; </a> 0
<a> GraphUser graphUser = graphObject . cast ( GraphUser . class ) ; </a> 0
<a> assertTrue ( graphUser != null ) ; </a> 0
<a> assertEquals ( "Mickey" , graphUser . getFirstName ( ) ) ; </a> 0
<a> graphUser . setLastName ( "Mouse" ) ; </a> 0
<a> assertEquals ( "Mouse" , graphObject . getProperty ( "last_name" ) ) ; </a> 0
<a> } </a> 0
<a> interface Base extends GraphObject { </a> 0
<a> } </a> 0
<a> interface Derived extends Base { </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCastingToSameTypeGivesSameObject ( ) { </a> 0
<a> Base base = GraphObject . Factory . create ( Base . class ) ; </a> 0
<a> Base cast = base . cast ( Base . class ) ; </a> 0
<a> assertTrue ( base == cast ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCastingToBaseTypeGivesSameObject ( ) { </a> 0
<a> Derived derived = GraphObject . Factory . create ( Derived . class ) ; </a> 0
<a> Base cast = derived . cast ( Base . class ) ; </a> 0
<a> assertTrue ( derived == cast ) ; </a> 0
<a> cast = cast . cast ( Derived . class ) ; </a> 0
<a> assertTrue ( derived == cast ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanSetComplexTypes ( ) { </a> 0
<a> GraphLocation graphLocation = GraphObject . Factory . create ( GraphLocation . class ) ; </a> 0
<a> graphLocation . setCity ( "Seattle" ) ; </a> 0
<a> GraphPlace graphPlace = GraphObject . Factory . create ( GraphPlace . class ) ; </a> 0
<a> graphPlace . setLocation ( graphLocation ) ; </a> 0
<a> assertEquals ( graphLocation , graphPlace . getLocation ( ) ) ; </a> 0
<a> assertEquals ( "Seattle" , graphPlace . getLocation ( ) . getCity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanConvertFromJSON ( ) throws JSONException { </a> 0
<a> JSONObject jsonLocation = new JSONObject ( ) ; </a> 0
<a> jsonLocation . put ( "city" , "Paris" ) ; </a> 0
<a> jsonLocation . put ( "country" , "France" ) ; </a> 0
<a> JSONObject jsonPlace = new JSONObject ( ) ; </a> 0
<a> jsonPlace . put ( "location" , jsonLocation ) ; </a> 0
<a> jsonPlace . put ( "name" , "Eiffel Tower" ) ; </a> 0
<a> GraphPlace graphPlace = GraphObject . Factory . create ( jsonPlace , GraphPlace . class ) ; </a> 0
<a> GraphLocation graphLocation = graphPlace . getLocation ( ) ; </a> 0
<a> assertEquals ( "Paris" , graphLocation . getCity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanConvertFromGraphObject ( ) throws JSONException { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> graphObject . setProperty ( "city" , "Paris" ) ; </a> 0
<a> graphObject . setProperty ( "country" , "France" ) ; </a> 0
<a> JSONObject jsonPlace = new JSONObject ( ) ; </a> 0
<a> jsonPlace . put ( "location" , graphObject ) ; </a> 0
<a> jsonPlace . put ( "name" , "Eiffel Tower" ) ; </a> 0
<a> GraphPlace graphPlace = GraphObject . Factory . create ( jsonPlace , GraphPlace . class ) ; </a> 0
<a> GraphLocation graphLocation = graphPlace . getLocation ( ) ; </a> 0
<a> assertEquals ( "Paris" , graphLocation . getCity ( ) ) ; </a> 0
<a> } </a> 0
<a> private abstract class GraphObjectClass implements GraphObject { </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanConvertNumbers ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "double_as_string" , 3.14159 ) ; </a> 0
<a> jsonObject . put ( "int_as_string" , 42 ) ; </a> 0
<a> GraphMetric metric = GraphObject . Factory . create ( jsonObject , GraphMetric . class ) ; </a> 0
<a> assertEquals ( "42" , metric . getIntAsString ( ) ) ; </a> 0
<a> assertNotNull ( metric . getDoubleAsString ( ) ) ; </a> 0
<a> assertTrue ( metric . getDoubleAsString ( ) . startsWith ( "3.14159" ) ) ; </a> 0
<a> } </a> 0
<a> private interface GraphMetric extends GraphObject { </a> 0
<a> String getIntAsString ( ) ; </a> 0
<a> String getDoubleAsString ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantWrapNonInterface ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( GraphObjectClass . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface BadNoParameterMethodNameGraphObject extends GraphObject { </a> 0
<a> Object floppityFlee ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantWrapBadZeroParameterMethodName ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( BadNoParameterMethodNameGraphObject . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface BadSingleParameterMethodNameGraphObject extends GraphObject { </a> 0
<a> void floppityFlee ( Object obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantWrapBadSingleParameterMethodName ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( BadSingleParameterMethodNameGraphObject . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface BadGetterNameGraphObject extends GraphObject { </a> 0
<a> void get ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantWrapBadGetterName ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( BadGetterNameGraphObject . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface BadGetterParamsGraphObject extends GraphObject { </a> 0
<a> Object getFoo ( Object obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantWrapBadGetterParams ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( BadGetterParamsGraphObject . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface BadGetterReturnTypeGraphObject extends GraphObject { </a> 0
<a> void getFoo ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantWrapBadGetterReturnType ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( BadGetterReturnTypeGraphObject . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface BadSetterNameGraphObject extends GraphObject { </a> 0
<a> void set ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantWrapBadSetterName ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( BadSetterNameGraphObject . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface BadSetterParamsGraphObject extends GraphObject { </a> 0
<a> void setFoo ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantWrapBadSetterParams ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( BadSetterParamsGraphObject . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface BadSetterReturnTypeGraphObject extends GraphObject { </a> 0
<a> Object setFoo ( Object obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantWrapBadSetterReturnType ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( BadSetterReturnTypeGraphObject . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface BadBaseInterfaceGraphObject extends BadSetterReturnTypeGraphObject { </a> 0
<a> void setBar ( Object obj ) ; </a> 0
<a> Object getBar ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantWrapBadBaseInterface ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( BadBaseInterfaceGraphObject . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface GoodPropertyOverrideInterfaceGraphObject extends GraphObject { </a> 0
<a> void setDefaultName ( String s ) ; </a> 0
<a> String getAnotherDefaultName ( ) ; </a> 0
<a> @ PropertyName ( "another_default_name" ) </a> 0
<a> void putSomething ( String s ) ; </a> 0
<a> @ PropertyName ( "default_name" ) </a> 0
<a> String retrieveSomething ( ) ; </a> 0
<a> @ PropertyName ( "MixedCase" ) </a> 0
<a> void setMixedCase ( String s ) ; </a> 0
<a> @ PropertyName ( "MixedCase" ) </a> 0
<a> String getMixedCase ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanOverrideGraphPropertyNames ( ) { </a> 0
<a> GoodPropertyOverrideInterfaceGraphObject graphObject = </a> 0
<a> GraphObject . Factory . create ( GoodPropertyOverrideInterfaceGraphObject . class ) ; </a> 0
<a> String testValue = "flu-blah" ; </a> 0
<a> graphObject . setDefaultName ( testValue ) ; </a> 0
<a> Assert . assertEquals ( testValue , graphObject . retrieveSomething ( ) ) ; </a> 0
<a> testValue = testValue + "1" ; </a> 0
<a> graphObject . putSomething ( testValue ) ; </a> 0
<a> Assert . assertEquals ( testValue , graphObject . getAnotherDefaultName ( ) ) ; </a> 0
<a> testValue = testValue + "2" ; </a> 0
<a> graphObject . setMixedCase ( testValue ) ; </a> 0
<a> Assert . assertEquals ( testValue , graphObject . getMixedCase ( ) ) ; </a> 0
<a> } </a> 0
<a> private interface BadPropertyOverrideInterfaceGraphObject extends GraphObject { </a> 0
<a> @ PropertyName ( "" ) </a> 0
<a> void setMissingProperty ( Object value ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantWrapBadPropertyNameOverrides ( ) { </a> 0
<a> try { </a> 0
<a> GraphObject . Factory . create ( BadPropertyOverrideInterfaceGraphObject . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testObjectEquals ( ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> graphObject . setProperty ( "aKey" , "aValue" ) ; </a> 0
<a> assertTrue ( graphObject . equals ( graphObject ) ) ; </a> 0
<a> GraphPlace graphPlace = graphObject . cast ( GraphPlace . class ) ; </a> 0
<a> assertTrue ( graphObject . equals ( graphPlace ) ) ; </a> 0
<a> assertTrue ( graphPlace . equals ( graphObject ) ) ; </a> 0
<a> GraphObject aDifferentGraphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> aDifferentGraphObject . setProperty ( "aKey" , "aDifferentValue" ) ; </a> 0
<a> assertFalse ( graphObject . equals ( aDifferentGraphObject ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testGetProperty ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertEquals ( "world" , graphObject . getProperty ( "hello" ) ) ; </a> 0
<a> assertTrue ( graphObject . getProperty ( "fred" ) == null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testSetProperty ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> graphObject . setProperty ( "don't imagine" , "purple elephants" ) ; </a> 0
<a> assertEquals ( "world" , jsonObject . getString ( "hello" ) ) ; </a> 0
<a> assertEquals ( "purple elephants" , jsonObject . getString ( "don't imagine" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testRemoveProperty ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "whirled" , "peas" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> graphObject . setProperty ( "don't imagine" , "purple elephants" ) ; </a> 0
<a> assertEquals ( "world" , jsonObject . getString ( "hello" ) ) ; </a> 0
<a> assertEquals ( "purple elephants" , jsonObject . getString ( "don't imagine" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapClear ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertEquals ( 1 , jsonObject . length ( ) ) ; </a> 0
<a> graphObject . asMap ( ) . clear ( ) ; </a> 0
<a> assertEquals ( 0 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapContainsKey ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertTrue ( graphObject . asMap ( ) . containsKey ( "hello" ) ) ; </a> 0
<a> assertFalse ( graphObject . asMap ( ) . containsKey ( "hocus" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapContainsValue ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertTrue ( graphObject . asMap ( ) . containsValue ( "world" ) ) ; </a> 0
<a> assertFalse ( graphObject . asMap ( ) . containsValue ( "pocus" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapEntrySet ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> Set < Entry < String , Object > > entrySet = graphObject . asMap ( ) . entrySet ( ) ; </a> 0
<a> assertEquals ( 2 , entrySet . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapGet ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertEquals ( "world" , graphObject . asMap ( ) . get ( "hello" ) ) ; </a> 0
<a> assertTrue ( graphObject . getProperty ( "fred" ) == null ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapGetReturnsNullForMissingProperty ( ) throws JSONException { </a> 0
<a> GraphUser graphUser = GraphObject . Factory . create ( GraphUser . class ) ; </a> 0
<a> assertNull ( graphUser . getBirthday ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapIsEmpty ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertTrue ( graphObject . asMap ( ) . isEmpty ( ) ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> assertFalse ( graphObject . asMap ( ) . isEmpty ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapKeySet ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> Set < String > keySet = graphObject . asMap ( ) . keySet ( ) ; </a> 0
<a> assertEquals ( 2 , keySet . size ( ) ) ; </a> 0
<a> assertTrue ( keySet . contains ( "hello" ) ) ; </a> 0
<a> assertTrue ( keySet . contains ( "hocus" ) ) ; </a> 0
<a> assertFalse ( keySet . contains ( "world" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapPut ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> graphObject . setProperty ( "hocus" , "pocus" ) ; </a> 0
<a> assertEquals ( "pocus" , jsonObject . get ( "hocus" ) ) ; </a> 0
<a> assertEquals ( 2 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapPutOfWrapperPutsJSONObject ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> graphObject . setProperty ( "hocus" , "pocus" ) ; </a> 0
<a> GraphObject parentObject = GraphObject . Factory . create ( ) ; </a> 0
<a> parentObject . setProperty ( "key" , graphObject ) ; </a> 0
<a> JSONObject jsonParent = parentObject . getInnerJSONObject ( ) ; </a> 0
<a> Object obj = jsonParent . opt ( "key" ) ; </a> 0
<a> assertNotNull ( obj ) ; </a> 0
<a> assertEquals ( jsonObject , obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapPutOfWrapperPutsJSONArray ( ) throws JSONException { </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> GraphObjectList < String > graphObjectList = GraphObject . Factory </a> 0
<a> . createList ( jsonArray , String . class ) ; </a> 0
<a> graphObjectList . add ( "hello" ) ; </a> 0
<a> graphObjectList . add ( "world" ) ; </a> 0
<a> GraphObject parentObject = GraphObject . Factory . create ( ) ; </a> 0
<a> parentObject . setProperty ( "key" , graphObjectList ) ; </a> 0
<a> JSONObject jsonParent = parentObject . getInnerJSONObject ( ) ; </a> 0
<a> Object obj = jsonParent . opt ( "key" ) ; </a> 0
<a> assertNotNull ( obj ) ; </a> 0
<a> assertEquals ( jsonArray , obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapPutAll ( ) throws JSONException { </a> 0
<a> HashMap < String , Object > map = new HashMap < String , Object > ( ) ; </a> 0
<a> map . put ( "hello" , "world" ) ; </a> 0
<a> map . put ( "hocus" , "pocus" ) ; </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . asMap ( ) . putAll ( map ) ; </a> 0
<a> assertEquals ( "pocus" , jsonObject . get ( "hocus" ) ) ; </a> 0
<a> assertEquals ( 2 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapRemove ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . removeProperty ( "hello" ) ; </a> 0
<a> assertEquals ( 1 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapSize ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertEquals ( 2 , graphObject . asMap ( ) . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMapValues ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> Collection < Object > values = graphObject . asMap ( ) . values ( ) ; </a> 0
<a> assertEquals ( 2 , values . size ( ) ) ; </a> 0
<a> assertTrue ( values . contains ( "world" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testGetInnerJSONObject ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> assertEquals ( jsonObject , graphObject . getInnerJSONObject ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testSettingGraphObjectProxyStoresJSONObject ( ) throws JSONException { </a> 0
<a> GraphPlace graphPlace = GraphObject . Factory . create ( GraphPlace . class ) ; </a> 0
<a> GraphLocation graphLocation = GraphObject . Factory . create ( GraphLocation . class ) ; </a> 0
<a> graphPlace . setLocation ( graphLocation ) ; </a> 0
<a> assertEquals ( graphLocation . getInnerJSONObject ( ) , graphPlace . getInnerJSONObject ( ) . get ( "location" ) ) ; </a> 0
<a> } </a> 0
<a> private interface DateGraphObject extends GraphObject { </a> 0
<a> Date getDate1 ( ) ; </a> 0
<a> Date getDate2 ( ) ; </a> 0
<a> Date getDate3 ( ) ; </a> 0
<a> Date getDate4 ( ) ; </a> 0
<a> void setDate4 ( Date date ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testGetStringsAsDates ( ) { </a> 0
<a> DateGraphObject dates = GraphObject . Factory . create ( DateGraphObject . class ) ; </a> 0
<a> dates . setProperty ( "date1" , "2012-07-04" ) ; </a> 0
<a> dates . setProperty ( "date2" , "2012-07-04T19:30:50" ) ; </a> 0
<a> dates . setProperty ( "date3" , "2012-07-04T19:20:40-0400" ) ; </a> 0
<a> Calendar cal = new GregorianCalendar ( ) ; </a> 0
<a> cal . set ( Calendar . MILLISECOND , 0 ) ; </a> 0
<a> cal . set ( 2012 , 6 , 4 , 0 , 0 , 0 ) ; </a> 0
<a> Date expectedDate1 = cal . getTime ( ) ; </a> 0
<a> Date date1 = dates . getDate1 ( ) ; </a> 0
<a> assertEquals ( expectedDate1 , date1 ) ; </a> 0
<a> cal . set ( 2012 , 6 , 4 , 19 , 30 , 50 ) ; </a> 0
<a> Date expectedDate2 = cal . getTime ( ) ; </a> 0
<a> Date date2 = dates . getDate2 ( ) ; </a> 0
<a> assertEquals ( expectedDate2 , date2 ) ; </a> 0
<a> cal = new GregorianCalendar ( TimeZone . getTimeZone ( "GMT" ) ) ; </a> 0
<a> cal . set ( Calendar . MILLISECOND , 0 ) ; </a> 0
<a> cal . set ( 2012 , 6 , 4 , 23 , 20 , 40 ) ; </a> 0
<a> Date expectedDate3 = cal . getTime ( ) ; </a> 0
<a> Date date3 = dates . getDate3 ( ) ; </a> 0
<a> assertEquals ( expectedDate3 , date3 ) ; </a> 0
<a> cal . set ( 2012 , 9 , 28 , 9 , 53 , 0 ) ; </a> 0
<a> Date expectedDate4 = cal . getTime ( ) ; </a> 0
<a> dates . setDate4 ( expectedDate4 ) ; </a> 0
<a> Date date4 = dates . getDate4 ( ) ; </a> 0
<a> assertEquals ( expectedDate4 , date4 ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionAdd ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . createList ( array , Integer . class ) ; </a> 0
<a> collection . add ( 5 ) ; </a> 0
<a> assertTrue ( array . length ( ) == 1 ) ; </a> 0
<a> assertTrue ( array . optInt ( 0 ) == 5 ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionAddAll ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> Collection < Integer > collectionToAdd = Arrays . asList ( 5 , - 1 ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . createList ( array , Integer . class ) ; </a> 0
<a> collection . addAll ( collectionToAdd ) ; </a> 0
<a> assertTrue ( array . length ( ) == 2 ) ; </a> 0
<a> assertTrue ( array . optInt ( 0 ) == 5 ) ; </a> 0
<a> assertTrue ( array . optInt ( 1 ) == - 1 ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionContains ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> array . put ( 5 ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . createList ( array , Integer . class ) ; </a> 0
<a> assertTrue ( collection . contains ( 5 ) ) ; </a> 0
<a> assertFalse ( collection . contains ( 6 ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionContainsAll ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> array . put ( 5 ) ; </a> 0
<a> array . put ( - 1 ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . createList ( array , Integer . class ) ; </a> 0
<a> assertTrue ( collection . containsAll ( Arrays . asList ( 5 ) ) ) ; </a> 0
<a> assertTrue ( collection . containsAll ( Arrays . asList ( 5 , - 1 ) ) ) ; </a> 0
<a> assertFalse ( collection . containsAll ( Arrays . asList ( 5 , - 1 , 2 ) ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionIsEmpty ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . createList ( array , Integer . class ) ; </a> 0
<a> assertTrue ( collection . isEmpty ( ) ) ; </a> 0
<a> array . put ( 5 ) ; </a> 0
<a> assertFalse ( collection . isEmpty ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionIterator ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> array . put ( 5 ) ; </a> 0
<a> array . put ( - 1 ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . createList ( array , Integer . class ) ; </a> 0
<a> Iterator < Integer > iter = collection . iterator ( ) ; </a> 0
<a> assertTrue ( iter . hasNext ( ) ) ; </a> 0
<a> assertTrue ( iter . next ( ) == 5 ) ; </a> 0
<a> assertTrue ( iter . hasNext ( ) ) ; </a> 0
<a> assertTrue ( iter . next ( ) == - 1 ) ; </a> 0
<a> assertFalse ( iter . hasNext ( ) ) ; </a> 0
<a> for ( Integer i : collection ) { </a> 0
<a> assertNotSame ( 0 , i ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionIteratorOfGraphObject ( ) throws JSONException { </a> 0
<a> Collection < GraphLocation > collection = GraphObject . Factory . createList ( GraphLocation . class ) ; </a> 0
<a> GraphLocation seattle = GraphObject . Factory . create ( GraphLocation . class ) ; </a> 0
<a> seattle . setCity ( "Seattle" ) ; </a> 0
<a> collection . add ( seattle ) ; </a> 0
<a> GraphLocation paris = GraphObject . Factory . create ( GraphLocation . class ) ; </a> 0
<a> paris . setCity ( "Paris" ) ; </a> 0
<a> collection . add ( paris ) ; </a> 0
<a> Iterator < GraphLocation > iter = collection . iterator ( ) ; </a> 0
<a> assertTrue ( iter . hasNext ( ) ) ; </a> 0
<a> assertEquals ( seattle , iter . next ( ) ) ; </a> 0
<a> assertTrue ( iter . hasNext ( ) ) ; </a> 0
<a> assertEquals ( paris , iter . next ( ) ) ; </a> 0
<a> assertFalse ( iter . hasNext ( ) ) ; </a> 0
<a> for ( GraphLocation location : collection ) { </a> 0
<a> assertTrue ( location != null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionSize ( ) throws JSONException { </a> 0
<a> JSONArray array = new JSONArray ( ) ; </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . createList ( array , Integer . class ) ; </a> 0
<a> assertEquals ( 0 , collection . size ( ) ) ; </a> 0
<a> array . put ( 5 ) ; </a> 0
<a> assertEquals ( 1 , collection . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionClearThrows ( ) throws JSONException { </a> 0
<a> try { </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . createList ( Integer . class ) ; </a> 0
<a> collection . clear ( ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( UnsupportedOperationException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionRemoveThrows ( ) throws JSONException { </a> 0
<a> try { </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . createList ( Integer . class ) ; </a> 0
<a> collection . remove ( 5 ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( UnsupportedOperationException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionRemoveAllThrows ( ) throws JSONException { </a> 0
<a> try { </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . createList ( Integer . class ) ; </a> 0
<a> collection . removeAll ( Arrays . asList ( ) ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( UnsupportedOperationException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionRetainAllThrows ( ) throws JSONException { </a> 0
<a> try { </a> 0
<a> Collection < Integer > collection = GraphObject . Factory . createList ( Integer . class ) ; </a> 0
<a> collection . retainAll ( Arrays . asList ( ) ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( UnsupportedOperationException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface Locations extends GraphObject { </a> 0
<a> Collection < GraphLocation > getLocations ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testObjectWrapsJSONCollection ( ) throws JSONException { </a> 0
<a> JSONObject jsonLocation = new JSONObject ( ) ; </a> 0
<a> jsonLocation . put ( "city" , "Seattle" ) ; </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> jsonArray . put ( jsonLocation ) ; </a> 0
<a> JSONObject jsonLocations = new JSONObject ( ) ; </a> 0
<a> jsonLocations . put ( "locations" , jsonArray ) ; </a> 0
<a> Locations locations = GraphObject . Factory . create ( jsonLocations , Locations . class ) ; </a> 0
<a> Collection < GraphLocation > locationsGraphObjectCollection = locations . getLocations ( ) ; </a> 0
<a> assertTrue ( locationsGraphObjectCollection != null ) ; </a> 0
<a> GraphLocation graphLocation = locationsGraphObjectCollection . iterator ( ) . next ( ) ; </a> 0
<a> assertTrue ( graphLocation != null ) ; </a> 0
<a> assertEquals ( "Seattle" , graphLocation . getCity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testObjectWrapsIterable ( ) throws JSONException { </a> 0
<a> GraphUser user = GraphObject . Factory . create ( GraphUser . class ) ; </a> 0
<a> user . setFirstName ( "Foo" ) ; </a> 0
<a> user . setLastName ( "Bar" ) ; </a> 0
<a> List < GraphUser > users = new ArrayList < GraphUser > ( ) ; </a> 0
<a> users . add ( user ) ; </a> 0
<a> OpenGraphAction action = GraphObject . Factory . create ( OpenGraphAction . class ) ; </a> 0
<a> action . setTags ( users ) ; </a> 0
<a> String json = action . getInnerJSONObject ( ) . toString ( ) ; </a> 0
<a> assertTrue ( "JSON string should contain last_name" , json . contains ( "last_name" ) ) ; </a> 0
<a> Object tags = action . getInnerJSONObject ( ) . get ( "tags" ) ; </a> 0
<a> assertNotNull ( "tags should not be null" , tags ) ; </a> 0
<a> assertTrue ( "tags should be JSONArray" , tags instanceof JSONArray ) ; </a> 0
<a> List < GraphObject > retrievedUsers = action . getTags ( ) ; </a> 0
<a> assertEquals ( "Size should be 1" , 1 , retrievedUsers . size ( ) ) ; </a> 0
<a> GraphUser retrievedUser = retrievedUsers . get ( 0 ) . cast ( GraphUser . class ) ; </a> 0
<a> assertEquals ( "First name should be Foo" , "Foo" , retrievedUser . getFirstName ( ) ) ; </a> 0
<a> assertEquals ( "Last name should be Bar" , "Bar" , retrievedUser . getLastName ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionWrapsJSONObject ( ) throws JSONException { </a> 0
<a> JSONObject jsonLocation = new JSONObject ( ) ; </a> 0
<a> jsonLocation . put ( "city" , "Seattle" ) ; </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> jsonArray . put ( jsonLocation ) ; </a> 0
<a> Collection < GraphLocation > locationsGraphObjectCollection = GraphObject . Factory </a> 0
<a> . createList ( jsonArray , </a> 0
<a> GraphLocation . class ) ; </a> 0
<a> assertTrue ( locationsGraphObjectCollection != null ) ; </a> 0
<a> GraphLocation graphLocation = locationsGraphObjectCollection . iterator ( ) . next ( ) ; </a> 0
<a> assertTrue ( graphLocation != null ) ; </a> 0
<a> assertEquals ( "Seattle" , graphLocation . getCity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCannotCastCollectionOfNonGraphObjects ( ) throws JSONException { </a> 0
<a> try { </a> 0
<a> GraphObjectList < Integer > collection = GraphObject . Factory . createList ( Integer . class ) ; </a> 0
<a> collection . castToListOf ( GraphLocation . class ) ; </a> 0
<a> fail ( "Expected exception" ) ; </a> 0
<a> } catch ( FacebookGraphObjectException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanCastCollectionOfGraphObjects ( ) throws JSONException { </a> 0
<a> JSONObject jsonSeattle = new JSONObject ( ) ; </a> 0
<a> jsonSeattle . put ( "city" , "Seattle" ) ; </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> jsonArray . put ( jsonSeattle ) ; </a> 0
<a> GraphObjectList < GraphObject > collection = GraphObject . Factory </a> 0
<a> . createList ( jsonArray , GraphObject . class ) ; </a> 0
<a> GraphObjectList < GraphLocation > locationCollection = collection . castToListOf ( GraphLocation . class ) ; </a> 0
<a> assertTrue ( locationCollection != null ) ; </a> 0
<a> GraphLocation seattle = locationCollection . iterator ( ) . next ( ) ; </a> 0
<a> assertTrue ( seattle != null ) ; </a> 0
<a> assertEquals ( "Seattle" , seattle . getCity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCastingCollectionToSameTypeGivesSameObject ( ) { </a> 0
<a> GraphObjectList < Base > base = GraphObject . Factory . createList ( Base . class ) ; </a> 0
<a> GraphObjectList < Base > cast = base . castToListOf ( Base . class ) ; </a> 0
<a> assertTrue ( base == cast ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCastingCollectionToBaseTypeGivesSameObject ( ) { </a> 0
<a> GraphObjectList < Derived > derived = GraphObject . Factory . createList ( Derived . class ) ; </a> 0
<a> GraphObjectList < Base > cast = derived . castToListOf ( Base . class ) ; </a> 0
<a> assertTrue ( ( GraphObjectList < ? > ) derived == ( GraphObjectList < ? > ) cast ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanGetInnerJSONArray ( ) throws JSONException { </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> GraphObjectList < GraphObject > collection = GraphObject . Factory </a> 0
<a> . createList ( jsonArray , GraphObject . class ) ; </a> 0
<a> assertEquals ( jsonArray , collection . getInnerJSONArray ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanGetRandomAccess ( ) throws JSONException { </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> jsonArray . put ( "Seattle" ) ; </a> 0
<a> jsonArray . put ( "Menlo Park" ) ; </a> 0
<a> GraphObjectList < String > collection = GraphObject . Factory </a> 0
<a> . createList ( jsonArray , String . class ) ; </a> 0
<a> assertEquals ( "Menlo Park" , collection . get ( 1 ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanSetRandomAccess ( ) throws JSONException { </a> 0
<a> JSONArray jsonArray = new JSONArray ( ) ; </a> 0
<a> GraphObjectList < String > collection = GraphObject . Factory </a> 0
<a> . createList ( jsonArray , String . class ) ; </a> 0
<a> collection . add ( "Seattle" ) ; </a> 0
<a> collection . add ( "Menlo Park" ) ; </a> 0
<a> collection . set ( 1 , "Ann Arbor" ) ; </a> 0
<a> assertEquals ( "Ann Arbor" , collection . get ( 1 ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCollectionPutOfWrapperPutsJSONObject ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( jsonObject ) ; </a> 0
<a> graphObject . setProperty ( "hello" , "world" ) ; </a> 0
<a> graphObject . setProperty ( "hocus" , "pocus" ) ; </a> 0
<a> GraphObjectList < GraphObject > parentList = GraphObject . Factory </a> 0
<a> . createList ( GraphObject . class ) ; </a> 0
<a> parentList . add ( graphObject ) ; </a> 0
<a> JSONArray jsonArray = parentList . getInnerJSONArray ( ) ; </a> 0
<a> Object obj = jsonArray . opt ( 0 ) ; </a> 0
<a> assertNotNull ( obj ) ; </a> 0
<a> assertEquals ( jsonObject , obj ) ; </a> 0
<a> parentList . set ( 0 , graphObject ) ; </a> 0
<a> obj = jsonArray . opt ( 0 ) ; </a> 0
<a> assertNotNull ( obj ) ; </a> 0
<a> assertEquals ( jsonObject , obj ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCamelCaseToLowercase ( ) { </a> 0
<a> assertEquals ( "hello_world" , GraphObject . Factory </a> 0
<a> . convertCamelCaseToLowercaseWithUnderscores ( "HelloWorld" ) ) ; </a> 0
<a> assertEquals ( "hello_world" , GraphObject . Factory </a> 0
<a> . convertCamelCaseToLowercaseWithUnderscores ( "helloWorld" ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> import android . widget . LinearLayout ; </a> 0
<a> import com . facebook . FacebookActivityTestCase ; </a> 0
<a> public class FragmentTestCase < T extends FragmentTestCase . TestFragmentActivity < ? > > extends FacebookActivityTestCase < T > { </a> 0
<a> public FragmentTestCase ( Class < T > activityClass ) { </a> 0
<a> super ( activityClass ) ; </a> 0
<a> } </a> 0
<a> protected T getTestActivity ( ) { </a> 0
<a> return ( T ) getActivity ( ) ; </a> 0
<a> } </a> 0
<a> public static class TestFragmentActivity < T extends Fragment > extends FragmentActivity { </a> 0
<a> public static final int FRAGMENT_ID = 0xFACE ; </a> 0
<a> private Class < T > fragmentClass ; </a> 0
<a> private int fragmentId ; </a> 0
<a> protected TestFragmentActivity ( Class < T > fragmentClass ) { </a> 0
<a> this . fragmentClass = fragmentClass ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> if ( getAutoCreateUI ( ) ) { </a> 0
<a> setContentToFragment ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected boolean getAutoCreateUI ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> void setContentToFragment ( T fragment ) { </a> 0
<a> if ( fragment == null ) { </a> 0
<a> fragment = createFragment ( ) ; </a> 0
<a> } </a> 0
<a> LinearLayout layout = new LinearLayout ( this ) ; </a> 0
<a> layout . setOrientation ( LinearLayout . VERTICAL ) ; </a> 0
<a> layout . setLayoutParams ( new LinearLayout . LayoutParams ( LinearLayout . LayoutParams . FILL_PARENT , </a> 0
<a> LinearLayout . LayoutParams . FILL_PARENT ) ) ; </a> 0
<a> layout . setId ( FRAGMENT_ID ) ; </a> 0
<a> getSupportFragmentManager ( ) . beginTransaction ( ) </a> 0
<a> . add ( FRAGMENT_ID , fragment ) </a> 0
<a> . commit ( ) ; </a> 0
<a> fragmentId = FRAGMENT_ID ; </a> 0
<a> setContentView ( layout ) ; </a> 0
<a> } </a> 0
<a> void setContentToLayout ( int i , int fragmentId ) { </a> 0
<a> this . fragmentId = fragmentId ; </a> 0
<a> setContentView ( i ) ; </a> 0
<a> } </a> 0
<a> T createFragment ( ) { </a> 0
<a> try { </a> 0
<a> return fragmentClass . newInstance ( ) ; </a> 0
<a> } catch ( IllegalAccessException e ) { </a> 0
<a> fail ( "could not create fragment" ) ; </a> 0
<a> } catch ( InstantiationException e ) { </a> 0
<a> fail ( "could not create fragment" ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> T getFragment ( ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> T fragment = ( T ) getSupportFragmentManager ( ) . findFragmentById ( fragmentId ) ; </a> 0
<a> return fragment ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . TouchUtils ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . CheckBox ; </a> 0
<a> import android . widget . ListView ; </a> 0
<a> import com . facebook . TestBlocker ; </a> 0
<a> import com . facebook . TestSession ; </a> 0
<a> import com . facebook . sdk . tests . R ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public class FriendPickerFragmentTests extends FragmentTestCase < FriendPickerFragmentTests . TestActivity > { </a> 0
<a> public FriendPickerFragmentTests ( ) { </a> 0
<a> super ( TestActivity . class ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanSetParametersProgrammatically ( ) throws Throwable { </a> 0
<a> TestActivity activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> runAndBlockOnUiThread ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( FriendPickerFragment . USER_ID_BUNDLE_KEY , "4" ) ; </a> 0
<a> bundle . putBoolean ( FriendPickerFragment . MULTI_SELECT_BUNDLE_KEY , false ) ; </a> 0
<a> bundle . putBoolean ( FriendPickerFragment . SHOW_PICTURES_BUNDLE_KEY , false ) ; </a> 0
<a> bundle . putString ( FriendPickerFragment . EXTRA_FIELDS_BUNDLE_KEY , "middle_name,link" ) ; </a> 0
<a> FriendPickerFragment fragment = new FriendPickerFragment ( bundle ) ; </a> 0
<a> getActivity ( ) . setContentToFragment ( fragment ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final FriendPickerFragment fragment = activity . getFragment ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> assertEquals ( "4" , fragment . getUserId ( ) ) ; </a> 0
<a> assertEquals ( false , fragment . getMultiSelect ( ) ) ; </a> 0
<a> assertEquals ( false , fragment . getShowPictures ( ) ) ; </a> 0
<a> Collection < String > extraFields = fragment . getExtraFields ( ) ; </a> 0
<a> assertTrue ( extraFields . contains ( "middle_name" ) ) ; </a> 0
<a> assertTrue ( extraFields . contains ( "link" ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanSetParametersViaLayout ( ) throws Throwable { </a> 0
<a> TestActivity activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> runAndBlockOnUiThread ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . setContentToLayout ( R . layout . friend_picker_test_layout_1 , R . id . friend_picker_fragment ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final FriendPickerFragment fragment = activity . getFragment ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> assertEquals ( false , fragment . getShowPictures ( ) ) ; </a> 0
<a> assertEquals ( false , fragment . getMultiSelect ( ) ) ; </a> 0
<a> Collection < String > extraFields = fragment . getExtraFields ( ) ; </a> 0
<a> assertTrue ( extraFields . contains ( "middle_name" ) ) ; </a> 0
<a> assertTrue ( extraFields . contains ( "link" ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testFriendsLoad ( ) throws Throwable { </a> 0
<a> TestActivity activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> runAndBlockOnUiThread ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . setContentToFragment ( null ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final FriendPickerFragment fragment = activity . getFragment ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> final TestSession session1 = openTestSessionWithSharedUser ( ) ; </a> 0
<a> TestSession session2 = openTestSessionWithSharedUser ( SECOND_TEST_USER_TAG ) ; </a> 0
<a> makeTestUsersFriends ( session1 , session2 ) ; </a> 0
<a> final TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> runAndBlockOnUiThread ( 2 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> fragment . setSession ( session1 ) ; </a> 0
<a> fragment . setOnDataChangedListener ( new PickerFragment . OnDataChangedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onDataChanged ( PickerFragment < ? > fragment ) { </a> 0
<a> blocker . signal ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . setExtraFields ( Arrays . asList ( "first_name" ) ) ; </a> 0
<a> fragment . loadData ( true ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> ListView listView = ( ListView ) fragment . getView ( ) . findViewById ( R . id . com_facebook_picker_list_view ) ; </a> 0
<a> assertNotNull ( listView ) ; </a> 0
<a> View firstChild = listView . getChildAt ( 0 ) ; </a> 0
<a> assertNotNull ( firstChild ) ; </a> 0
<a> CheckBox checkBox = ( CheckBox ) listView . findViewById ( R . id . com_facebook_picker_checkbox ) ; </a> 0
<a> assertNotNull ( checkBox ) ; </a> 0
<a> assertFalse ( checkBox . isChecked ( ) ) ; </a> 0
<a> assertEquals ( 0 , fragment . getSelection ( ) . size ( ) ) ; </a> 0
<a> TouchUtils . clickView ( this , firstChild ) ; </a> 0
<a> assertEquals ( 1 , fragment . getSelection ( ) . size ( ) ) ; </a> 0
<a> assertNotNull ( fragment . getSelection ( ) . iterator ( ) . next ( ) . getFirstName ( ) ) ; </a> 0
<a> assertTrue ( checkBox . isChecked ( ) ) ; </a> 0
<a> TouchUtils . clickView ( this , firstChild ) ; </a> 0
<a> assertEquals ( 0 , fragment . getSelection ( ) . size ( ) ) ; </a> 0
<a> assertFalse ( checkBox . isChecked ( ) ) ; </a> 0
<a> } </a> 0
<a> public static class TestActivity extends FragmentTestCase . TestFragmentActivity < FriendPickerFragment > { </a> 0
<a> public TestActivity ( ) { </a> 0
<a> super ( FriendPickerFragment . class ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean getAutoCreateUI ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . support . v4 . app . LoaderManager ; </a> 0
<a> import android . support . v4 . content . Loader ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> public class GraphObjectPagingLoaderTests extends FragmentTestCase < GraphObjectPagingLoaderTests . TestActivity > { </a> 0
<a> public GraphObjectPagingLoaderTests ( ) { </a> 0
<a> super ( TestActivity . class ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testLoaderLoadsAndFollowsNextLinks ( ) throws Exception { </a> 0
<a> CountingCallback callback = new CountingCallback ( ) ; </a> 0
<a> final GraphObjectPagingLoader < GraphPlace > loader = ( GraphObjectPagingLoader < GraphPlace > ) </a> 0
<a> getActivity ( ) . getSupportLoaderManager ( ) . initLoader ( 0 , null , callback ) ; </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . setLatitude ( 47.6204 ) ; </a> 0
<a> location . setLongitude ( - 122.3491 ) ; </a> 0
<a> final Request request = Request . newPlacesSearchRequest ( session , location , 1000 , 5 , null , null ) ; </a> 0
<a> runOnBlockerThread ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> loader . startLoading ( request , false ) ; </a> 0
<a> } </a> 0
<a> } , false ) ; </a> 0
<a> getTestBlocker ( ) . waitForSignals ( 1 ) ; </a> 0
<a> assertEquals ( 1 , callback . onLoadFinishedCount ) ; </a> 0
<a> assertEquals ( 0 , callback . onErrorCount ) ; </a> 0
<a> assertEquals ( 0 , callback . onLoadResetCount ) ; </a> 0
<a> assertNotNull ( callback . results ) ; </a> 0
<a> assertTrue ( callback . results . getCount ( ) > 0 ) ; </a> 0
<a> runOnBlockerThread ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> loader . followNextLink ( ) ; </a> 0
<a> } </a> 0
<a> } , false ) ; </a> 0
<a> getTestBlocker ( ) . waitForSignals ( 1 ) ; </a> 0
<a> assertEquals ( 2 , callback . onLoadFinishedCount ) ; </a> 0
<a> assertEquals ( 0 , callback . onErrorCount ) ; </a> 0
<a> assertEquals ( 0 , callback . onLoadResetCount ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testLoaderFinishesImmediatelyOnNoResults ( ) throws Exception { </a> 0
<a> CountingCallback callback = new CountingCallback ( ) ; </a> 0
<a> final GraphObjectPagingLoader < GraphPlace > loader = ( GraphObjectPagingLoader < GraphPlace > ) </a> 0
<a> getActivity ( ) . getSupportLoaderManager ( ) . initLoader ( 0 , null , callback ) ; </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . setLatitude ( - 1.0 ) ; </a> 0
<a> location . setLongitude ( - 1.0 ) ; </a> 0
<a> final Request request = Request . newPlacesSearchRequest ( session , location , 10 , 5 , null , null ) ; </a> 0
<a> runOnBlockerThread ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> loader . startLoading ( request , false ) ; </a> 0
<a> } </a> 0
<a> } , false ) ; </a> 0
<a> getTestBlocker ( ) . waitForSignals ( 1 ) ; </a> 0
<a> assertEquals ( 1 , callback . onLoadFinishedCount ) ; </a> 0
<a> assertEquals ( 0 , callback . onErrorCount ) ; </a> 0
<a> assertEquals ( 0 , callback . onLoadResetCount ) ; </a> 0
<a> assertNotNull ( callback . results ) ; </a> 0
<a> assertEquals ( 0 , callback . results . getCount ( ) ) ; </a> 0
<a> } </a> 0
<a> private class CountingCallback implements </a> 0
<a> GraphObjectPagingLoader . OnErrorListener , LoaderManager . LoaderCallbacks < SimpleGraphObjectCursor < GraphPlace > > { </a> 0
<a> public int onLoadFinishedCount ; </a> 0
<a> public int onLoadResetCount ; </a> 0
<a> public int onErrorCount ; </a> 0
<a> public SimpleGraphObjectCursor < GraphPlace > results ; </a> 0
<a> private TestBlocker testBlocker = getTestBlocker ( ) ; </a> 0
<a> @ Override </a> 0
<a> public void onError ( FacebookException error , GraphObjectPagingLoader < ? > loader ) { </a> 0
<a> ++ onErrorCount ; </a> 0
<a> testBlocker . signal ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Loader < SimpleGraphObjectCursor < GraphPlace > > onCreateLoader ( int id , Bundle args ) { </a> 0
<a> GraphObjectPagingLoader < GraphPlace > loader = new GraphObjectPagingLoader < GraphPlace > ( getActivity ( ) , </a> 0
<a> GraphPlace . class ) ; </a> 0
<a> loader . setOnErrorListener ( this ) ; </a> 0
<a> return loader ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onLoadFinished ( Loader < SimpleGraphObjectCursor < GraphPlace > > loader , </a> 0
<a> SimpleGraphObjectCursor < GraphPlace > data ) { </a> 0
<a> results = data ; </a> 0
<a> ++ onLoadFinishedCount ; </a> 0
<a> testBlocker . signal ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onLoaderReset ( Loader < SimpleGraphObjectCursor < GraphPlace > > loader ) { </a> 0
<a> ++ onLoadResetCount ; </a> 0
<a> testBlocker . signal ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class DummyFragment extends Fragment { </a> 0
<a> } </a> 0
<a> public static class TestActivity extends FragmentTestCase . TestFragmentActivity < DummyFragment > { </a> 0
<a> public TestActivity ( ) { </a> 0
<a> super ( DummyFragment . class ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean getAutoCreateUI ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . graphics . BitmapFactory ; </a> 0
<a> import android . test . AndroidTestCase ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . widget . ImageResponseCache ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . nio . ByteBuffer ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> public final class ImageResponseCacheTests extends AndroidTestCase { </a> 0
<a> @ MediumTest @ LargeTest </a> 0
<a> public void testImageCaching ( ) throws IOException { </a> 0
<a> ImageResponseCache . getCache ( safeGetContext ( ) ) . clearForTest ( ) ; </a> 0
<a> String imgUrl = "http://sphotos-b.xx.fbcdn.net/hphotos-snc7/300716_163831917043403_1106723719_n.jpg" ; </a> 0
<a> Bitmap bmp1 = readImage ( imgUrl , false ) ; </a> 0
<a> Bitmap bmp2 = readImage ( imgUrl , true ) ; </a> 0
<a> compareImages ( bmp1 , bmp2 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest @ LargeTest </a> 0
<a> public void testImageNotCaching ( ) throws IOException { </a> 0
<a> String imgUrl = "http://graph.facebook.com/ryanseacrest/picture?type=large" ; </a> 0
<a> Bitmap bmp1 = readImage ( imgUrl , false ) ; </a> 0
<a> Bitmap bmp2 = readImage ( imgUrl , false ) ; </a> 0
<a> compareImages ( bmp1 , bmp2 ) ; </a> 0
<a> } </a> 0
<a> private Bitmap readImage ( String uri , boolean expectedFromCache ) { </a> 0
<a> Bitmap bmp = null ; </a> 0
<a> InputStream istream = null ; </a> 0
<a> try </a> 0
<a> { </a> 0
<a> URL url = new URL ( uri ) ; </a> 0
<a> boolean isInCache = ( ImageResponseCache . getCache ( safeGetContext ( ) ) . get ( url . toString ( ) ) != null ) ; </a> 0
<a> assertTrue ( isInCache == expectedFromCache ) ; </a> 0
<a> istream = ImageResponseCache . getCachedImageStream ( url , safeGetContext ( ) ) ; </a> 0
<a> if ( istream == null ) { </a> 0
<a> HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; </a> 0
<a> istream = ImageResponseCache . interceptAndCacheImageStream ( safeGetContext ( ) , connection ) ; </a> 0
<a> } </a> 0
<a> assertTrue ( istream != null ) ; </a> 0
<a> bmp = BitmapFactory . decodeStream ( istream ) ; </a> 0
<a> assertTrue ( bmp != null ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } finally { </a> 0
<a> Utility . closeQuietly ( istream ) ; </a> 0
<a> } </a> 0
<a> return bmp ; </a> 0
<a> } </a> 0
<a> private static void compareImages ( Bitmap bmp1 , Bitmap bmp2 ) { </a> 0
<a> assertTrue ( bmp1 . getHeight ( ) == bmp2 . getHeight ( ) ) ; </a> 0
<a> assertTrue ( bmp1 . getWidth ( ) == bmp1 . getWidth ( ) ) ; </a> 0
<a> ByteBuffer buffer1 = ByteBuffer . allocate ( bmp1 . getHeight ( ) * bmp1 . getRowBytes ( ) ) ; </a> 0
<a> bmp1 . copyPixelsToBuffer ( buffer1 ) ; </a> 0
<a> ByteBuffer buffer2 = ByteBuffer . allocate ( bmp2 . getHeight ( ) * bmp2 . getRowBytes ( ) ) ; </a> 0
<a> bmp2 . copyPixelsToBuffer ( buffer2 ) ; </a> 0
<a> assertTrue ( Arrays . equals ( buffer1 . array ( ) , buffer2 . array ( ) ) ) ; </a> 0
<a> } </a> 0
<a> private Context safeGetContext ( ) { </a> 0
<a> for ( ; ; ) { </a> 0
<a> if ( ( getContext ( ) != null ) && ( getContext ( ) . getApplicationContext ( ) != null ) ) { </a> 0
<a> return getContext ( ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 25 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . widget . LoginButton ; </a> 0
<a> import junit . framework . Assert ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . concurrent . atomic . AtomicBoolean ; </a> 0
<a> public class LoginButtonTest extends SessionTestsBase { </a> 0
<a> static final int STRAY_CALLBACK_WAIT_MILLISECONDS = 50 ; </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testLoginButton ( ) throws Throwable { </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> final ScriptedSession session = new ScriptedSession ( getActivity ( ) , "SomeId" , cache ) ; </a> 0
<a> SessionTestsBase . SessionStatusCallbackRecorder statusRecorder = new SessionTestsBase . SessionStatusCallbackRecorder ( ) ; </a> 0
<a> session . addAuthorizeResult ( "A token of thanks" , new ArrayList < String > ( ) , AccessTokenSource . TEST_USER ) ; </a> 0
<a> session . addCallback ( statusRecorder ) ; </a> 0
<a> Assert . assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> final SessionStatusCallbackRecorder loginButtonStatusRecorder = new SessionStatusCallbackRecorder ( ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> runAndBlockOnUiThread ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . setContentView ( button ) ; </a> 0
<a> button . setSession ( session ) ; </a> 0
<a> button . setSessionStatusCallback ( loginButtonStatusRecorder ) ; </a> 0
<a> button . performClick ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> loginButtonStatusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> loginButtonStatusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> loginButtonStatusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testLoginFail ( ) { </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> ScriptedSession session = new ScriptedSession ( getActivity ( ) , "SomeId" , cache ) ; </a> 0
<a> final Exception openException = new Exception ( "Open failed!" ) ; </a> 0
<a> final AtomicBoolean clicked = new AtomicBoolean ( false ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> LoginButton . OnErrorListener listener = new LoginButton . OnErrorListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( FacebookException exception ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> assertEquals ( exception . getCause ( ) . getMessage ( ) , openException . getMessage ( ) ) ; </a> 0
<a> clicked . set ( true ) ; </a> 0
<a> this . notifyAll ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> button . setOnErrorListener ( listener ) ; </a> 0
<a> button . setSession ( session ) ; </a> 0
<a> session . addAuthorizeResult ( openException ) ; </a> 0
<a> button . onAttachedToWindow ( ) ; </a> 0
<a> button . performClick ( ) ; </a> 0
<a> try { </a> 0
<a> synchronized ( listener ) { </a> 0
<a> listener . wait ( DEFAULT_TIMEOUT_MILLISECONDS ) ; </a> 0
<a> } </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> fail ( "Interrupted during open" ) ; </a> 0
<a> } </a> 0
<a> if ( ! clicked . get ( ) ) { </a> 0
<a> fail ( "Did not get exception" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanAddReadPermissions ( ) { </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> ScriptedSession session = new ScriptedSession ( getActivity ( ) , "SomeId" , cache ) ; </a> 0
<a> SessionTestsBase . SessionStatusCallbackRecorder statusRecorder = new SessionTestsBase . SessionStatusCallbackRecorder ( ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . setSession ( session ) ; </a> 0
<a> button . setReadPermissions ( Arrays . asList ( new String [ ] { "read_permission" , "read_another" } ) ) ; </a> 0
<a> session . addAuthorizeResult ( "A token of thanks" , new ArrayList < String > ( ) , AccessTokenSource . TEST_USER ) ; </a> 0
<a> session . addCallback ( statusRecorder ) ; </a> 0
<a> button . performClick ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanAddPublishPermissions ( ) { </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> ScriptedSession session = new ScriptedSession ( getActivity ( ) , "SomeId" , cache ) ; </a> 0
<a> SessionTestsBase . SessionStatusCallbackRecorder statusRecorder = </a> 0
<a> new SessionTestsBase . SessionStatusCallbackRecorder ( ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . setSession ( session ) ; </a> 0
<a> button . setPublishPermissions ( Arrays . asList ( new String [ ] { "publish_permission" , "publish_another" } ) ) ; </a> 0
<a> session . addAuthorizeResult ( "A token of thanks" , new ArrayList < String > ( ) , AccessTokenSource . TEST_USER ) ; </a> 0
<a> session . addCallback ( statusRecorder ) ; </a> 0
<a> button . performClick ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantAddReadThenPublishPermissions ( ) { </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . setReadPermissions ( Arrays . asList ( new String [ ] { "read_permission" , "read_another" } ) ) ; </a> 0
<a> try { </a> 0
<a> button . setPublishPermissions ( Arrays . asList ( new String [ ] { "read_permission" , "read_a_third" } ) ) ; </a> 0
<a> fail ( "Should not be able to reach here" ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> assertTrue ( e instanceof UnsupportedOperationException ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantAddPublishThenReadPermissions ( ) { </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . setPublishPermissions ( Arrays . asList ( new String [ ] { "publish_permission" , "publish_another" } ) ) ; </a> 0
<a> try { </a> 0
<a> button . setReadPermissions ( Arrays . asList ( new String [ ] { "publish_permission" , "publish_a_third" } ) ) ; </a> 0
<a> fail ( "Should not be able to reach here" ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> assertTrue ( e instanceof UnsupportedOperationException ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanAddReadThenPublishPermissionsWithClear ( ) { </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . setReadPermissions ( Arrays . asList ( new String [ ] { "read_permission" , "read_another" } ) ) ; </a> 0
<a> button . clearPermissions ( ) ; </a> 0
<a> button . setPublishPermissions ( Arrays . asList ( new String [ ] { "publish_permission" , "publish_another" } ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantAddMorePermissionsToOpenSession ( ) { </a> 0
<a> MockTokenCachingStrategy cache = new MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> ScriptedSession session = new ScriptedSession ( getActivity ( ) , "SomeId" , cache ) ; </a> 0
<a> SessionTestsBase . SessionStatusCallbackRecorder statusRecorder = </a> 0
<a> new SessionTestsBase . SessionStatusCallbackRecorder ( ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . setSession ( session ) ; </a> 0
<a> session . addAuthorizeResult ( "A token of thanks" , </a> 0
<a> Arrays . asList ( new String [ ] { "read_permission" , "read_another" } ) , AccessTokenSource . TEST_USER ) ; </a> 0
<a> session . addCallback ( statusRecorder ) ; </a> 0
<a> button . performClick ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> button . setReadPermissions ( Arrays . asList ( new String [ ] { "read_permission" , "read_another" } ) ) ; </a> 0
<a> button . setReadPermissions ( Arrays . asList ( new String [ ] { "read_permission" , "read_a_third" } ) ) ; </a> 0
<a> List < String > permissions = button . getPermissions ( ) ; </a> 0
<a> assertTrue ( permissions . contains ( "read_permission" ) ) ; </a> 0
<a> assertTrue ( permissions . contains ( "read_another" ) ) ; </a> 0
<a> assertFalse ( permissions . contains ( "read_a_third" ) ) ; </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanSetDefaultAudience ( ) { </a> 0
<a> SessionTestsBase . MockTokenCachingStrategy cache = new SessionTestsBase . MockTokenCachingStrategy ( null , 0 ) ; </a> 0
<a> ScriptedSession session = new ScriptedSession ( getActivity ( ) , "SomeId" , cache ) ; </a> 0
<a> SessionTestsBase . SessionStatusCallbackRecorder statusRecorder = </a> 0
<a> new SessionTestsBase . SessionStatusCallbackRecorder ( ) ; </a> 0
<a> assertEquals ( SessionState . CREATED , session . getState ( ) ) ; </a> 0
<a> final LoginButton button = new LoginButton ( getActivity ( ) ) ; </a> 0
<a> button . setSession ( session ) ; </a> 0
<a> button . setPublishPermissions ( Arrays . asList ( new String [ ] { "publish_permission" , "publish_another" } ) ) ; </a> 0
<a> button . setDefaultAudience ( SessionDefaultAudience . FRIENDS ) ; </a> 0
<a> session . addAuthorizeResult ( "A token of thanks" , new ArrayList < String > ( ) , AccessTokenSource . TEST_USER ) ; </a> 0
<a> session . addCallback ( statusRecorder ) ; </a> 0
<a> button . performClick ( ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENING , null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . OPENED , null ) ; </a> 0
<a> assertNotNull ( session . getLastRequest ( ) ) ; </a> 0
<a> assertEquals ( SessionDefaultAudience . FRIENDS , session . getLastRequestAudience ( ) ) ; </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> assertTrue ( cache . getSavedState ( ) == null ) ; </a> 0
<a> statusRecorder . waitForCall ( session , SessionState . CLOSED , null ) ; </a> 0
<a> stall ( STRAY_CALLBACK_WAIT_MILLISECONDS ) ; </a> 0
<a> statusRecorder . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . TouchUtils ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . ListView ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . sdk . tests . R ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public class PlacePickerFragmentTests extends FragmentTestCase < PlacePickerFragmentTests . TestActivity > { </a> 0
<a> public PlacePickerFragmentTests ( ) { </a> 0
<a> super ( TestActivity . class ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanSetParametersProgrammatically ( ) throws Throwable { </a> 0
<a> TestActivity activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> final Location location = new Location ( "" ) ; </a> 0
<a> location . setLatitude ( 47.6204 ) ; </a> 0
<a> location . setLongitude ( - 122.3491 ) ; </a> 0
<a> runAndBlockOnUiThread ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putBoolean ( PlacePickerFragment . SHOW_PICTURES_BUNDLE_KEY , false ) ; </a> 0
<a> bundle . putInt ( PlacePickerFragment . RADIUS_IN_METERS_BUNDLE_KEY , 75 ) ; </a> 0
<a> bundle . putInt ( PlacePickerFragment . RESULTS_LIMIT_BUNDLE_KEY , 5 ) ; </a> 0
<a> bundle . putString ( PlacePickerFragment . SEARCH_TEXT_BUNDLE_KEY , "coffee" ) ; </a> 0
<a> bundle . putParcelable ( PlacePickerFragment . LOCATION_BUNDLE_KEY , location ) ; </a> 0
<a> bundle . putString ( FriendPickerFragment . EXTRA_FIELDS_BUNDLE_KEY , "checkins,general_info" ) ; </a> 0
<a> PlacePickerFragment fragment = new PlacePickerFragment ( bundle ) ; </a> 0
<a> getActivity ( ) . setContentToFragment ( fragment ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final PlacePickerFragment fragment = activity . getFragment ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> assertEquals ( false , fragment . getShowPictures ( ) ) ; </a> 0
<a> assertEquals ( 75 , fragment . getRadiusInMeters ( ) ) ; </a> 0
<a> assertEquals ( 5 , fragment . getResultsLimit ( ) ) ; </a> 0
<a> assertEquals ( "coffee" , fragment . getSearchText ( ) ) ; </a> 0
<a> assertEquals ( location , fragment . getLocation ( ) ) ; </a> 0
<a> Collection < String > extraFields = fragment . getExtraFields ( ) ; </a> 0
<a> assertTrue ( extraFields . contains ( "checkins" ) ) ; </a> 0
<a> assertTrue ( extraFields . contains ( "general_info" ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanSetParametersViaLayout ( ) throws Throwable { </a> 0
<a> TestActivity activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> runAndBlockOnUiThread ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . setContentToLayout ( R . layout . place_picker_test_layout_1 , R . id . place_picker_fragment ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final PlacePickerFragment fragment = activity . getFragment ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> assertEquals ( false , fragment . getShowPictures ( ) ) ; </a> 0
<a> assertEquals ( 75 , fragment . getRadiusInMeters ( ) ) ; </a> 0
<a> assertEquals ( 5 , fragment . getResultsLimit ( ) ) ; </a> 0
<a> assertEquals ( "coffee" , fragment . getSearchText ( ) ) ; </a> 0
<a> Collection < String > extraFields = fragment . getExtraFields ( ) ; </a> 0
<a> assertTrue ( extraFields . contains ( "checkins" ) ) ; </a> 0
<a> assertTrue ( extraFields . contains ( "general_info" ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testPlacesLoad ( ) throws Throwable { </a> 0
<a> TestActivity activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> runAndBlockOnUiThread ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . setContentToFragment ( null ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> getInstrumentation ( ) . waitForIdleSync ( ) ; </a> 0
<a> final PlacePickerFragment fragment = activity . getFragment ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> final TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> final TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> runAndBlockOnUiThread ( 1 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> fragment . setSession ( session ) ; </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . setLatitude ( 47.6204 ) ; </a> 0
<a> location . setLongitude ( - 122.3491 ) ; </a> 0
<a> fragment . setLocation ( location ) ; </a> 0
<a> fragment . setOnDataChangedListener ( new PickerFragment . OnDataChangedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onDataChanged ( PickerFragment < ? > fragment ) { </a> 0
<a> blocker . signal ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . setOnErrorListener ( new PickerFragment . OnErrorListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> fail ( "Got unexpected error: " + error . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . loadData ( true ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> ListView listView = ( ListView ) fragment . getView ( ) . findViewById ( R . id . com_facebook_picker_list_view ) ; </a> 0
<a> assertNotNull ( listView ) ; </a> 0
<a> View firstChild = listView . getChildAt ( 0 ) ; </a> 0
<a> assertNotNull ( firstChild ) ; </a> 0
<a> assertNull ( fragment . getSelection ( ) ) ; </a> 0
<a> TouchUtils . clickView ( this , firstChild ) ; </a> 0
<a> assertNotNull ( fragment . getSelection ( ) ) ; </a> 0
<a> TouchUtils . clickView ( this , firstChild ) ; </a> 0
<a> assertNull ( fragment . getSelection ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testClearsResultsWhenSessionClosed ( ) throws Throwable { </a> 0
<a> TestActivity activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> runAndBlockOnUiThread ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> getActivity ( ) . setContentToFragment ( null ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> getInstrumentation ( ) . waitForIdleSync ( ) ; </a> 0
<a> final PlacePickerFragment fragment = activity . getFragment ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> final TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> final TestBlocker blocker1 = TestBlocker . createTestBlocker ( ) ; </a> 0
<a> runAndBlockOnUiThread ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> fragment . setSession ( session ) ; </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . setLatitude ( 47.6204 ) ; </a> 0
<a> location . setLongitude ( - 122.3491 ) ; </a> 0
<a> fragment . setLocation ( location ) ; </a> 0
<a> fragment . setOnDataChangedListener ( new PickerFragment . OnDataChangedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onDataChanged ( PickerFragment < ? > fragment ) { </a> 0
<a> blocker1 . signal ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . setOnErrorListener ( new PickerFragment . OnErrorListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> fail ( "Got unexpected error: " + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . loadData ( true ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> blocker1 . waitForSignals ( 1 ) ; </a> 0
<a> ListView listView = ( ListView ) fragment . getView ( ) . findViewById ( R . id . com_facebook_picker_list_view ) ; </a> 0
<a> assertNotNull ( listView ) ; </a> 0
<a> Thread . sleep ( 500 ) ; </a> 0
<a> int lastPosition = listView . getLastVisiblePosition ( ) ; </a> 0
<a> assertTrue ( lastPosition > - 1 ) ; </a> 0
<a> View firstChild = listView . getChildAt ( 0 ) ; </a> 0
<a> assertNotNull ( firstChild ) ; </a> 0
<a> assertNull ( fragment . getSelection ( ) ) ; </a> 0
<a> TouchUtils . clickView ( this , firstChild ) ; </a> 0
<a> assertNotNull ( fragment . getSelection ( ) ) ; </a> 0
<a> final TestBlocker blocker2 = TestBlocker . createTestBlocker ( ) ; </a> 0
<a> runAndBlockOnUiThread ( 0 , new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> session . addCallback ( new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> blocker2 . signal ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> blocker2 . waitForSignals ( 1 ) ; </a> 0
<a> getInstrumentation ( ) . waitForIdleSync ( ) ; </a> 0
<a> Thread . sleep ( 500 ) ; </a> 0
<a> lastPosition = listView . getLastVisiblePosition ( ) ; </a> 0
<a> assertTrue ( lastPosition == - 1 ) ; </a> 0
<a> assertNull ( fragment . getSelection ( ) ) ; </a> 0
<a> } </a> 0
<a> public static class TestActivity extends FragmentTestCase . TestFragmentActivity < PlacePickerFragment > { </a> 0
<a> public TestActivity ( ) { </a> 0
<a> super ( PlacePickerFragment . class ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean getAutoCreateUI ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import com . facebook . SessionDefaultAudience ; </a> 0
<a> import com . facebook . SessionLoginBehavior ; </a> 0
<a> import java . util . Arrays ; </a> 1
<a> import java . util . List ; </a> 0
<a> public class UserSettingsFragmentTests extends FragmentTestCase < UserSettingsFragmentTests . TestActivity > { </a> 0
<a> public UserSettingsFragmentTests ( ) { </a> 0
<a> super ( TestActivity . class ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCanSetParametersViaLayout ( ) throws Throwable { </a> 0
<a> TestActivity activity = getActivity ( ) ; </a> 0
<a> assertNotNull ( activity ) ; </a> 0
<a> final UserSettingsFragment fragment = activity . getFragment ( ) ; </a> 0
<a> assertNotNull ( fragment ) ; </a> 0
<a> assertEquals ( SessionLoginBehavior . SUPPRESS_SSO , fragment . getLoginBehavior ( ) ) ; </a> 0
<a> assertEquals ( SessionDefaultAudience . EVERYONE , fragment . getDefaultAudience ( ) ) ; </a> 0
<a> List < String > permissions = fragment . getPermissions ( ) ; </a> 0
<a> assertEquals ( 2 , permissions . size ( ) ) ; </a> 0
<a> assertEquals ( "read_1" , permissions . get ( 0 ) ) ; </a> 0
<a> } </a> 0
<a> public static class TestActivity extends FragmentTestCase . TestFragmentActivity < UserSettingsFragment > { </a> 0
<a> public TestActivity ( ) { </a> 0
<a> super ( UserSettingsFragment . class ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> getSupportFragmentManager ( ) . executePendingTransactions ( ) ; </a> 0
<a> UserSettingsFragment fragment = getFragment ( ) ; </a> 0
<a> fragment . setLoginBehavior ( SessionLoginBehavior . SUPPRESS_SSO ) ; </a> 0
<a> fragment . setReadPermissions ( Arrays . asList ( "read_1" , "read_2" ) ) ; </a> 0
<a> fragment . setDefaultAudience ( SessionDefaultAudience . EVERYONE ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . FacebookTestCase ; </a> 0
<a> import com . facebook . widget . WorkQueue ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . concurrent . Executor ; </a> 0
<a> import java . security . SecureRandom ; </a> 0
<a> public class WorkQueueTests extends FacebookTestCase { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testEmptyValidate ( ) { </a> 0
<a> WorkQueue manager = new WorkQueue ( ) ; </a> 0
<a> manager . validate ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testRunSomething ( ) { </a> 0
<a> CountingRunnable run = new CountingRunnable ( ) ; </a> 0
<a> assertEquals ( 0 , run . getRunCount ( ) ) ; </a> 0
<a> ScriptableExecutor executor = new ScriptableExecutor ( ) ; </a> 0
<a> assertEquals ( 0 , executor . getPendingCount ( ) ) ; </a> 0
<a> WorkQueue manager = new WorkQueue ( 1 , executor ) ; </a> 0
<a> addActiveWorkItem ( manager , run ) ; </a> 0
<a> assertEquals ( 1 , executor . getPendingCount ( ) ) ; </a> 0
<a> assertEquals ( 0 , run . getRunCount ( ) ) ; </a> 0
<a> executeNext ( manager , executor ) ; </a> 0
<a> assertEquals ( 0 , executor . getPendingCount ( ) ) ; </a> 0
<a> assertEquals ( 1 , run . getRunCount ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testRunSequence ( ) { </a> 0
<a> final int workTotal = 100 ; </a> 0
<a> CountingRunnable run = new CountingRunnable ( ) ; </a> 0
<a> ScriptableExecutor executor = new ScriptableExecutor ( ) ; </a> 0
<a> WorkQueue manager = new WorkQueue ( 1 , executor ) ; </a> 0
<a> for ( int i = 0 ; i < workTotal ; i ++ ) { </a> 0
<a> addActiveWorkItem ( manager , run ) ; </a> 0
<a> assertEquals ( 1 , executor . getPendingCount ( ) ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < workTotal ; i ++ ) { </a> 0
<a> assertEquals ( 1 , executor . getPendingCount ( ) ) ; </a> 0
<a> assertEquals ( i , run . getRunCount ( ) ) ; </a> 0
<a> executeNext ( manager , executor ) ; </a> 0
<a> } </a> 0
<a> assertEquals ( 0 , executor . getPendingCount ( ) ) ; </a> 0
<a> assertEquals ( workTotal , run . getRunCount ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testRunParallel ( ) { </a> 0
<a> final int workTotal = 100 ; </a> 0
<a> CountingRunnable run = new CountingRunnable ( ) ; </a> 0
<a> ScriptableExecutor executor = new ScriptableExecutor ( ) ; </a> 0
<a> WorkQueue manager = new WorkQueue ( workTotal , executor ) ; </a> 0
<a> for ( int i = 0 ; i < workTotal ; i ++ ) { </a> 0
<a> assertEquals ( i , executor . getPendingCount ( ) ) ; </a> 0
<a> addActiveWorkItem ( manager , run ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < workTotal ; i ++ ) { </a> 0
<a> assertEquals ( workTotal - i , executor . getPendingCount ( ) ) ; </a> 0
<a> assertEquals ( i , run . getRunCount ( ) ) ; </a> 0
<a> executeNext ( manager , executor ) ; </a> 0
<a> } </a> 0
<a> assertEquals ( 0 , executor . getPendingCount ( ) ) ; </a> 0
<a> assertEquals ( workTotal , run . getRunCount ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testSimpleCancel ( ) { </a> 0
<a> CountingRunnable run = new CountingRunnable ( ) ; </a> 0
<a> ScriptableExecutor executor = new ScriptableExecutor ( ) ; </a> 0
<a> WorkQueue manager = new WorkQueue ( 1 , executor ) ; </a> 0
<a> addActiveWorkItem ( manager , run ) ; </a> 0
<a> WorkQueue . WorkItem work1 = addActiveWorkItem ( manager , run ) ; </a> 0
<a> cancelWork ( manager , work1 ) ; </a> 0
<a> assertEquals ( 1 , executor . getPendingCount ( ) ) ; </a> 0
<a> executeNext ( manager , executor ) ; </a> 0
<a> assertEquals ( 0 , executor . getPendingCount ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testMoveToFront ( ) { </a> 0
<a> final int firstCount = 8 ; </a> 0
<a> final int highCount = 17 ; </a> 0
<a> ArrayList < WorkQueue . WorkItem > highWorkItems = new ArrayList < WorkQueue . WorkItem > ( ) ; </a> 0
<a> CountingRunnable highRun = new CountingRunnable ( ) ; </a> 0
<a> CountingRunnable firstRun = new CountingRunnable ( ) ; </a> 0
<a> CountingRunnable lowRun = new CountingRunnable ( ) ; </a> 0
<a> ScriptableExecutor executor = new ScriptableExecutor ( ) ; </a> 0
<a> WorkQueue manager = new WorkQueue ( firstCount , executor ) ; </a> 0
<a> for ( int i = 0 ; i < firstCount ; i ++ ) { </a> 0
<a> addActiveWorkItem ( manager , firstRun ) ; </a> 0
<a> } </a> 0
<a> int lowCount = 0 ; </a> 0
<a> for ( int h = 0 ; h < highCount ; h ++ ) { </a> 0
<a> highWorkItems . add ( addActiveWorkItem ( manager , highRun ) ) ; </a> 0
<a> for ( int l = 0 ; l < h ; l ++ ) { </a> 0
<a> addActiveWorkItem ( manager , lowRun ) ; </a> 0
<a> lowCount ++ ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> assertEquals ( firstCount , executor . getPendingCount ( ) ) ; </a> 0
<a> for ( WorkQueue . WorkItem highItem : highWorkItems ) { </a> 0
<a> prioritizeWork ( manager , highItem ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < firstCount ; i ++ ) { </a> 0
<a> assertEquals ( i , firstRun . getRunCount ( ) ) ; </a> 0
<a> executeNext ( manager , executor ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < highCount ; i ++ ) { </a> 0
<a> assertEquals ( i , highRun . getRunCount ( ) ) ; </a> 0
<a> executeNext ( manager , executor ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < lowCount ; i ++ ) { </a> 0
<a> assertEquals ( i , lowRun . getRunCount ( ) ) ; </a> 0
<a> executeNext ( manager , executor ) ; </a> 0
<a> } </a> 0
<a> assertEquals ( firstCount , firstRun . getRunCount ( ) ) ; </a> 0
<a> assertEquals ( highCount , highRun . getRunCount ( ) ) ; </a> 0
<a> assertEquals ( lowCount , lowRun . getRunCount ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testThreadStress ( ) { </a> 0
<a> WorkQueue manager = new WorkQueue ( ) ; </a> 0
<a> ArrayList < StressRunnable > runnables = new ArrayList < StressRunnable > ( ) ; </a> 0
<a> final int threadCount = 20 ; </a> 0
<a> for ( int i = 0 ; i < threadCount ; i ++ ) { </a> 0
<a> runnables . add ( new StressRunnable ( manager , 20 ) ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < threadCount ; i ++ ) { </a> 0
<a> manager . addActiveWorkItem ( runnables . get ( i ) ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < threadCount ; i ++ ) { </a> 0
<a> runnables . get ( i ) . waitForDone ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private WorkQueue . WorkItem addActiveWorkItem ( WorkQueue manager , Runnable runnable ) { </a> 0
<a> manager . validate ( ) ; </a> 0
<a> WorkQueue . WorkItem workItem = manager . addActiveWorkItem ( runnable ) ; </a> 0
<a> manager . validate ( ) ; </a> 0
<a> return workItem ; </a> 0
<a> } </a> 0
<a> private void executeNext ( WorkQueue manager , ScriptableExecutor executor ) { </a> 0
<a> manager . validate ( ) ; </a> 0
<a> executor . runNext ( ) ; </a> 0
<a> manager . validate ( ) ; </a> 0
<a> } </a> 0
<a> private void cancelWork ( WorkQueue manager , WorkQueue . WorkItem workItem ) { </a> 0
<a> manager . validate ( ) ; </a> 0
<a> workItem . cancel ( ) ; </a> 0
<a> manager . validate ( ) ; </a> 0
<a> } </a> 0
<a> private void prioritizeWork ( WorkQueue manager , WorkQueue . WorkItem workItem ) { </a> 0
<a> manager . validate ( ) ; </a> 0
<a> workItem . moveToFront ( ) ; </a> 0
<a> manager . validate ( ) ; </a> 0
<a> } </a> 0
<a> static class StressRunnable implements Runnable { </a> 0
<a> static ArrayList < WorkQueue . WorkItem > tracked = new ArrayList < WorkQueue . WorkItem > ( ) ; </a> 0
<a> final WorkQueue manager ; </a> 0
<a> final SecureRandom random = new SecureRandom ( ) ; </a> 0
<a> final int iterationCount ; </a> 0
<a> int iterationIndex = 0 ; </a> 0
<a> boolean isDone = false ; </a> 0
<a> StressRunnable ( WorkQueue manager , int iterationCount ) { </a> 0
<a> this . manager = manager ; </a> 0
<a> this . iterationCount = iterationCount ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> if ( iterationIndex ++ < iterationCount ) { </a> 0
<a> final int sleepWeight = 80 ; </a> 0
<a> final int trackThisWeight = 10 ; </a> 0
<a> final int prioritizeTrackedWeight = 6 ; </a> 0
<a> final int validateWeight = 2 ; </a> 0
<a> int weight = 0 ; </a> 0
<a> final int n = random . nextInt ( sleepWeight + trackThisWeight + prioritizeTrackedWeight + validateWeight ) ; </a> 0
<a> WorkQueue . WorkItem workItem = manager . addActiveWorkItem ( this ) ; </a> 0
<a> if ( n < ( weight += sleepWeight ) ) { </a> 0
<a> try { </a> 0
<a> Thread . sleep ( n / 4 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } else if ( n < ( weight += trackThisWeight ) ) { </a> 0
<a> synchronized ( tracked ) { </a> 0
<a> tracked . add ( workItem ) ; </a> 0
<a> } </a> 0
<a> } else if ( n < ( weight += prioritizeTrackedWeight ) ) { </a> 0
<a> ArrayList < WorkQueue . WorkItem > items = new ArrayList < WorkQueue . WorkItem > ( ) ; </a> 0
<a> synchronized ( tracked ) { </a> 0
<a> items . addAll ( tracked ) ; </a> 0
<a> tracked . clear ( ) ; </a> 0
<a> } </a> 0
<a> for ( WorkQueue . WorkItem item : items ) { </a> 0
<a> item . moveToFront ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> manager . validate ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> manager . validate ( ) ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> isDone = true ; </a> 0
<a> this . notifyAll ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void waitForDone ( ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> while ( ! isDone ) { </a> 0
<a> try { </a> 0
<a> this . wait ( ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class ScriptableExecutor implements Executor { </a> 0
<a> private final ArrayList < Runnable > runnables = new ArrayList < Runnable > ( ) ; </a> 0
<a> int getPendingCount ( ) { </a> 0
<a> return runnables . size ( ) ; </a> 0
<a> } </a> 0
<a> void runNext ( ) { </a> 0
<a> assertTrue ( runnables . size ( ) > 0 ) ; </a> 0
<a> runnables . get ( 0 ) . run ( ) ; </a> 0
<a> runnables . remove ( 0 ) ; </a> 0
<a> } </a> 0
<a> void runLast ( ) { </a> 0
<a> assertTrue ( runnables . size ( ) > 0 ) ; </a> 0
<a> int index = runnables . size ( ) - 1 ; </a> 0
<a> runnables . get ( index ) . run ( ) ; </a> 0
<a> runnables . remove ( index ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void execute ( Runnable runnable ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> runnables . add ( runnable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class CountingRunnable implements Runnable { </a> 0
<a> volatile int runCount = 0 ; </a> 0
<a> int getRunCount ( ) { </a> 0
<a> return runCount ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> synchronized ( this ) { </a> 0
<a> runCount ++ ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> Thread . sleep ( 1 ) ; </a> 0
<a> } catch ( InterruptedException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . friendpicker ; </a> 0
<a> import android . app . Application ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import java . util . Collection ; </a> 1
<a> public class FriendPickerApplication extends Application { </a> 0
<a> private Collection < GraphUser > selectedUsers ; </a> 1
<a> public Collection < GraphUser > getSelectedUsers ( ) { </a> 1
<a> return selectedUsers ; </a> 0
<a> } </a> 0
<a> public void setSelectedUsers ( Collection < GraphUser > selectedUsers ) { </a> 1
<a> this . selectedUsers = selectedUsers ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . friendpicker ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> public class FriendPickerSampleActivity extends FragmentActivity { </a> 0
<a> private static final int PICK_FRIENDS_ACTIVITY = 1 ; </a> 0
<a> private Button pickFriendsButton ; </a> 0
<a> private TextView resultsTextView ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . main ) ; </a> 0
<a> resultsTextView = ( TextView ) findViewById ( R . id . resultsTextView ) ; </a> 0
<a> pickFriendsButton = ( Button ) findViewById ( R . id . pickFriendsButton ) ; </a> 0
<a> pickFriendsButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> onClickPickFriends ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( Session . getActiveSession ( ) == null || </a> 1
<a> Session . getActiveSession ( ) . isClosed ( ) ) { </a> 1
<a> Session . openActiveSession ( this , true , null ) ; </a> 1
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onStart ( ) { </a> 0
<a> super . onStart ( ) ; </a> 0
<a> displaySelectedFriends ( RESULT_OK ) ; </a> 0
<a> } </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> switch ( requestCode ) { </a> 0
<a> case PICK_FRIENDS_ACTIVITY : </a> 0
<a> displaySelectedFriends ( resultCode ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> Session . getActiveSession ( ) . onActivityResult ( this , requestCode , resultCode , data ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void displaySelectedFriends ( int resultCode ) { </a> 0
<a> String results = "" ; </a> 0
<a> FriendPickerApplication application = ( FriendPickerApplication ) getApplication ( ) ; </a> 0
<a> Collection < GraphUser > selection = application . getSelectedUsers ( ) ; </a> 0
<a> if ( selection != null && selection . size ( ) > 0 ) { </a> 0
<a> ArrayList < String > names = new ArrayList < String > ( ) ; </a> 0
<a> for ( GraphUser user : selection ) { </a> 0
<a> names . add ( user . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> results = TextUtils . join ( ", " , names ) ; </a> 0
<a> } else { </a> 0
<a> results = "<No friends selected>" ; </a> 0
<a> } </a> 0
<a> resultsTextView . setText ( results ) ; </a> 0
<a> } </a> 0
<a> private void onClickPickFriends ( ) { </a> 0
<a> FriendPickerApplication application = ( FriendPickerApplication ) getApplication ( ) ; </a> 1
<a> application . setSelectedUsers ( null ) ; </a> 1
<a> Intent intent = new Intent ( this , PickFriendsActivity . class ) ; </a> 0
<a> PickFriendsActivity . populateParameters ( intent , null , true , true ) ; </a> 0
<a> startActivityForResult ( intent , PICK_FRIENDS_ACTIVITY ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . friendpicker ; </a> 0
<a> import android . app . AlertDialog ; </a> 1
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> import android . support . v4 . app . FragmentManager ; </a> 0
<a> import com . facebook . FacebookException ; </a> 0
<a> import com . facebook . widget . FriendPickerFragment ; </a> 0
<a> import com . facebook . widget . PickerFragment ; </a> 0
<a> public class PickFriendsActivity extends FragmentActivity { </a> 0
<a> FriendPickerFragment friendPickerFragment ; </a> 0
<a> public static void populateParameters ( Intent intent , String userId , boolean multiSelect , boolean showTitleBar ) { </a> 0
<a> intent . putExtra ( FriendPickerFragment . USER_ID_BUNDLE_KEY , userId ) ; </a> 0
<a> intent . putExtra ( FriendPickerFragment . MULTI_SELECT_BUNDLE_KEY , multiSelect ) ; </a> 0
<a> intent . putExtra ( FriendPickerFragment . SHOW_TITLE_BAR_BUNDLE_KEY , showTitleBar ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . pick_friends_activity ) ; </a> 0
<a> FragmentManager fm = getSupportFragmentManager ( ) ; </a> 0
<a> if ( savedInstanceState == null ) { </a> 0
<a> final Bundle args = getIntent ( ) . getExtras ( ) ; </a> 0
<a> friendPickerFragment = new FriendPickerFragment ( args ) ; </a> 0
<a> fm . beginTransaction ( ) </a> 0
<a> . add ( R . id . friend_picker_fragment , friendPickerFragment ) </a> 0
<a> . commit ( ) ; </a> 0
<a> } else { </a> 0
<a> friendPickerFragment = ( FriendPickerFragment ) fm . findFragmentById ( R . id . friend_picker_fragment ) ; </a> 0
<a> } </a> 0
<a> friendPickerFragment . setOnErrorListener ( new PickerFragment . OnErrorListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> PickFriendsActivity . this . onError ( error ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> friendPickerFragment . setOnDoneButtonClickedListener ( new PickerFragment . OnDoneButtonClickedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onDoneButtonClicked ( PickerFragment < ? > fragment ) { </a> 0
<a> FriendPickerApplication application = ( FriendPickerApplication ) getApplication ( ) ; </a> 0
<a> application . setSelectedUsers ( friendPickerFragment . getSelection ( ) ) ; </a> 0
<a> setResult ( RESULT_OK , null ) ; </a> 0
<a> finish ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void onError ( Exception error ) { </a> 0
<a> new AlertDialog . Builder ( this ) </a> 1
<a> . setTitle ( R . string . error_dialog_title ) </a> 1
<a> . setMessage ( error . getMessage ( ) ) </a> 1
<a> . setPositiveButton ( R . string . ok_button , null ) </a> 1
<a> . show ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onStart ( ) { </a> 0
<a> super . onStart ( ) ; </a> 0
<a> try { </a> 0
<a> friendPickerFragment . loadData ( false ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . graphapi ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . AlertDialog ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . View . OnClickListener ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . EditText ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . Session . StatusCallback ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class GraphApiSampleActivity extends Activity { </a> 0
<a> static final String applicationId = "307234779396415" ; </a> 0
<a> static final String PENDING_REQUEST_BUNDLE_KEY = "com.facebook.samples.graphapi:PendingRequest" ; </a> 0
<a> Button buttonRequest ; </a> 0
<a> EditText editRequests ; </a> 0
<a> TextView textViewResults ; </a> 0
<a> Session session ; </a> 0
<a> boolean pendingRequest ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . main ) ; </a> 0
<a> this . buttonRequest = ( Button ) findViewById ( R . id . buttonRequest ) ; </a> 0
<a> this . buttonRequest . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> onClickRequest ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> this . editRequests = ( EditText ) findViewById ( R . id . editRequests ) ; </a> 0
<a> this . textViewResults = ( TextView ) findViewById ( R . id . textViewResults ) ; </a> 0
<a> this . session = createSession ( ) ; </a> 0
<a> Settings . addLoggingBehavior ( LoggingBehavior . INCLUDE_ACCESS_TOKENS ) ; </a> 0
<a> } </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> if ( this . session . onActivityResult ( this , requestCode , resultCode , data ) && </a> 0
<a> pendingRequest && </a> 0
<a> this . session . getState ( ) . isOpened ( ) ) { </a> 0
<a> sendRequests ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onRestoreInstanceState ( Bundle savedInstanceState ) { </a> 0
<a> super . onRestoreInstanceState ( savedInstanceState ) ; </a> 0
<a> pendingRequest = savedInstanceState . getBoolean ( PENDING_REQUEST_BUNDLE_KEY , pendingRequest ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . putBoolean ( PENDING_REQUEST_BUNDLE_KEY , pendingRequest ) ; </a> 0
<a> } </a> 0
<a> private void onClickRequest ( ) { </a> 0
<a> if ( this . session . isOpened ( ) ) { </a> 0
<a> sendRequests ( ) ; </a> 0
<a> } else { </a> 0
<a> StatusCallback callback = new StatusCallback ( ) { </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( exception != null ) { </a> 0
<a> new AlertDialog . Builder ( GraphApiSampleActivity . this ) </a> 0
<a> . setTitle ( R . string . login_failed_dialog_title ) </a> 0
<a> . setMessage ( exception . getMessage ( ) ) </a> 0
<a> . setPositiveButton ( R . string . ok_button , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> GraphApiSampleActivity . this . session = createSession ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> pendingRequest = true ; </a> 0
<a> this . session . openForRead ( new Session . OpenRequest ( this ) . setCallback ( callback ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void sendRequests ( ) { </a> 0
<a> textViewResults . setText ( "" ) ; </a> 0
<a> String requestIdsText = editRequests . getText ( ) . toString ( ) ; </a> 0
<a> String [ ] requestIds = requestIdsText . split ( "," ) ; </a> 0
<a> List < Request > requests = new ArrayList < Request > ( ) ; </a> 0
<a> for ( final String requestId : requestIds ) { </a> 0
<a> requests . add ( new Request ( session , requestId , null , null , new Request . Callback ( ) { </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> GraphObject graphObject = response . getGraphObject ( ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> String s = textViewResults . getText ( ) . toString ( ) ; </a> 0
<a> if ( graphObject != null ) { </a> 0
<a> if ( graphObject . getProperty ( "id" ) != null ) { </a> 0
<a> s = s + String . format ( "%s: %s\n" , graphObject . getProperty ( "id" ) , graphObject . getProperty ( </a> 0
<a> "name" ) ) ; </a> 0
<a> } else { </a> 0
<a> s = s + String . format ( "%s: <no such id>\n" , requestId ) ; </a> 0
<a> } </a> 0
<a> } else if ( error != null ) { </a> 0
<a> s = s + String . format ( "Error: %s" , error . getErrorMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> textViewResults . setText ( s ) ; </a> 0
<a> } </a> 0
<a> } ) ) ; </a> 0
<a> } </a> 0
<a> pendingRequest = false ; </a> 0
<a> Request . executeBatchAndWait ( requests ) ; </a> 0
<a> } </a> 0
<a> private Session createSession ( ) { </a> 0
<a> Session activeSession = Session . getActiveSession ( ) ; </a> 0
<a> if ( activeSession == null || activeSession . getState ( ) . isClosed ( ) ) { </a> 0
<a> activeSession = new Session . Builder ( this ) . setApplicationId ( applicationId ) . build ( ) ; </a> 0
<a> Session . setActiveSession ( activeSession ) ; </a> 0
<a> } </a> 0
<a> return activeSession ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . android . AsyncFacebookRunner . RequestListener ; </a> 0
<a> import java . io . FileNotFoundException ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . MalformedURLException ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public abstract class BaseRequestListener implements RequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onFacebookError ( FacebookError e , final Object state ) { </a> 0
<a> Log . e ( "Facebook" , e . getMessage ( ) ) ; </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onFileNotFoundException ( FileNotFoundException e , final Object state ) { </a> 0
<a> Log . e ( "Facebook" , e . getMessage ( ) ) ; </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onIOException ( IOException e , final Object state ) { </a> 0
<a> Log . e ( "Facebook" , e . getMessage ( ) ) ; </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onMalformedURLException ( MalformedURLException e , final Object state ) { </a> 0
<a> Log . e ( "Facebook" , e . getMessage ( ) ) ; </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . Dialog ; </a> 0
<a> import android . app . ProgressDialog ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup . LayoutParams ; </a> 0
<a> import android . view . inputmethod . InputMethodManager ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . EditText ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public class FQLQuery extends Dialog { </a> 0
<a> private EditText mFQLQuery ; </a> 0
<a> private TextView mFQLOutput ; </a> 0
<a> private Button mSubmitButton ; </a> 0
<a> private Activity activity ; </a> 0
<a> private Handler mHandler ; </a> 0
<a> private ProgressDialog dialog ; </a> 0
<a> public FQLQuery ( Activity activity ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> this . activity = activity ; </a> 0
<a> setTitle ( R . string . fqlquery ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> mHandler = new Handler ( ) ; </a> 0
<a> setContentView ( R . layout . fql_query ) ; </a> 0
<a> LayoutParams params = getWindow ( ) . getAttributes ( ) ; </a> 0
<a> params . width = LayoutParams . FILL_PARENT ; </a> 0
<a> params . height = LayoutParams . FILL_PARENT ; </a> 0
<a> getWindow ( ) . setAttributes ( ( android . view . WindowManager . LayoutParams ) params ) ; </a> 0
<a> mFQLQuery = ( EditText ) findViewById ( R . id . fqlquery ) ; </a> 0
<a> mFQLOutput = ( TextView ) findViewById ( R . id . fqlOutput ) ; </a> 0
<a> mSubmitButton = ( Button ) findViewById ( R . id . submit_button ) ; </a> 0
<a> mSubmitButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> ( ( InputMethodManager ) activity . getSystemService ( Context . INPUT_METHOD_SERVICE ) ) </a> 0
<a> . hideSoftInputFromWindow ( mFQLQuery . getWindowToken ( ) , 0 ) ; </a> 0
<a> dialog = ProgressDialog . show ( FQLQuery . this . activity , "" , </a> 0
<a> FQLQuery . this . activity . getString ( R . string . please_wait ) , true , true ) ; </a> 0
<a> String query = mFQLQuery . getText ( ) . toString ( ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "method" , "fql.query" ) ; </a> 0
<a> params . putString ( "query" , query ) ; </a> 0
<a> Utility . mAsyncRunner . request ( null , params , new FQLRequestListener ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public class FQLRequestListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> try { </a> 0
<a> JSONArray json = new JSONArray ( response ) ; </a> 0
<a> setText ( json . toString ( 2 ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> try { </a> 0
<a> JSONObject json = new JSONObject ( response ) ; </a> 0
<a> setText ( json . toString ( 2 ) ) ; </a> 0
<a> } catch ( JSONException e1 ) { </a> 0
<a> setText ( activity . getString ( R . string . exception ) + e1 . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> setText ( activity . getString ( R . string . facebook_error ) + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setText ( final String txt ) { </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> mFQLOutput . setText ( txt ) ; </a> 0
<a> mFQLOutput . setVisibility ( View . VISIBLE ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Dialog ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . SpannableString ; </a> 0
<a> import android . text . style . UnderlineSpan ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . view . ViewGroup . LayoutParams ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import android . widget . AdapterView . OnItemClickListener ; </a> 0
<a> import android . widget . CompoundButton . OnCheckedChangeListener ; </a> 0
<a> import android . widget . TabHost . TabSpec ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . Comparator ; </a> 0
<a> import java . util . Vector ; </a> 0
<a> public class FieldsConnectionsDialog extends Dialog { </a> 0
<a> private final static int TAB_HEIGHT = 50 ; </a> 0
<a> private Button mGetFieldsButton ; </a> 0
<a> private ListView fieldsList , connectionsList ; </a> 0
<a> private BaseAdapter fieldsAdapter , connectionsAdapter ; </a> 0
<a> private GraphExplorer explorerActivity ; </a> 0
<a> protected Vector < String > fieldsVector ; </a> 0
<a> private ArrayList < JSONObject > fieldsArray ; </a> 0
<a> private ArrayList < String > connectionsArray ; </a> 0
<a> public FieldsConnectionsDialog ( GraphExplorer explorerActivity , JSONObject metadata ) { </a> 0
<a> super ( explorerActivity ) ; </a> 0
<a> this . explorerActivity = explorerActivity ; </a> 0
<a> try { </a> 0
<a> sortFields ( metadata . getJSONArray ( "fields" ) ) ; </a> 0
<a> sortConnections ( metadata . getJSONObject ( "connections" ) . names ( ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> Toast . makeText ( explorerActivity . getBaseContext ( ) , </a> 0
<a> "Fields/Connections could not be fetched." , Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> } </a> 0
<a> setTitle ( explorerActivity . getString ( R . string . fields_and_connections ) ) ; </a> 0
<a> fieldsVector = new Vector < String > ( ) ; </a> 0
<a> } </a> 0
<a> public void sortFields ( JSONArray jsonFieldsArray ) { </a> 0
<a> this . fieldsArray = new ArrayList < JSONObject > ( jsonFieldsArray . length ( ) ) ; </a> 0
<a> for ( int i = 0 ; i < jsonFieldsArray . length ( ) ; i ++ ) { </a> 0
<a> try { </a> 0
<a> this . fieldsArray . add ( jsonFieldsArray . getJSONObject ( i ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Collections . sort ( this . fieldsArray , new Comparator < JSONObject > ( ) { </a> 0
<a> @ Override </a> 0
<a> public int compare ( JSONObject object1 , JSONObject object2 ) { </a> 0
<a> try { </a> 0
<a> return object1 . getString ( "name" ) . compareToIgnoreCase ( object2 . getString ( "name" ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public void sortConnections ( JSONArray jsonConnectionsArray ) { </a> 0
<a> this . connectionsArray = new ArrayList < String > ( jsonConnectionsArray . length ( ) ) ; </a> 0
<a> for ( int i = 0 ; i < jsonConnectionsArray . length ( ) ; i ++ ) { </a> 0
<a> try { </a> 0
<a> this . connectionsArray . add ( jsonConnectionsArray . get ( i ) . toString ( ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Collections . sort ( this . connectionsArray ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . fields_connections_list ) ; </a> 0
<a> LayoutParams params = getWindow ( ) . getAttributes ( ) ; </a> 0
<a> params . width = LayoutParams . FILL_PARENT ; </a> 0
<a> params . height = LayoutParams . FILL_PARENT ; </a> 0
<a> getWindow ( ) . setAttributes ( ( android . view . WindowManager . LayoutParams ) params ) ; </a> 0
<a> fieldsList = ( ListView ) findViewById ( R . id . fields_list ) ; </a> 0
<a> connectionsList = ( ListView ) findViewById ( R . id . connections_list ) ; </a> 0
<a> fieldsAdapter = new FieldsListAdapter ( ) ; </a> 0
<a> if ( this . fieldsArray == null ) { </a> 0
<a> fieldsList . setAdapter ( new ArrayAdapter < String > ( explorerActivity , </a> 0
<a> android . R . layout . simple_list_item_1 , new String [ ] { "No fields available" } ) ) ; </a> 0
<a> } else { </a> 0
<a> fieldsList . setAdapter ( fieldsAdapter ) ; </a> 0
<a> } </a> 0
<a> connectionsAdapter = new ConnectionsListAdapter ( ) ; </a> 0
<a> if ( this . connectionsArray == null ) { </a> 0
<a> connectionsList . setAdapter ( new ArrayAdapter < String > ( explorerActivity , </a> 0
<a> android . R . layout . simple_list_item_1 , </a> 0
<a> new String [ ] { "No connections available" } ) ) ; </a> 0
<a> } else { </a> 0
<a> connectionsList . setAdapter ( connectionsAdapter ) ; </a> 0
<a> } </a> 0
<a> TabHost tabHost = ( TabHost ) findViewById ( R . id . tabHost ) ; </a> 0
<a> tabHost . setup ( ) ; </a> 0
<a> TabSpec spec1 = tabHost . newTabSpec ( "Tab 1" ) ; </a> 0
<a> spec1 . setIndicator ( explorerActivity . getString ( R . string . fields ) ) ; </a> 0
<a> spec1 . setContent ( R . id . fields_layout ) ; </a> 0
<a> TabSpec spec2 = tabHost . newTabSpec ( "Tab 2" ) ; </a> 0
<a> spec2 . setIndicator ( explorerActivity . getString ( R . string . connections ) ) ; </a> 0
<a> spec2 . setContent ( R . id . connections_list ) ; </a> 0
<a> tabHost . addTab ( spec1 ) ; </a> 0
<a> tabHost . addTab ( spec2 ) ; </a> 0
<a> tabHost . setCurrentTab ( 0 ) ; </a> 0
<a> tabHost . getTabWidget ( ) . getChildAt ( 0 ) . getLayoutParams ( ) . height = TAB_HEIGHT ; </a> 0
<a> tabHost . getTabWidget ( ) . getChildAt ( 1 ) . getLayoutParams ( ) . height = TAB_HEIGHT ; </a> 0
<a> mGetFieldsButton = ( Button ) findViewById ( R . id . get_fields_button ) ; </a> 0
<a> mGetFieldsButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> FieldsConnectionsDialog . this . dismiss ( ) ; </a> 0
<a> if ( ! fieldsVector . isEmpty ( ) ) { </a> 0
<a> explorerActivity . getFields ( fieldsVector ) ; </a> 0
<a> } else { </a> 0
<a> Toast . makeText ( explorerActivity . getBaseContext ( ) , "No Fields selected." , </a> 0
<a> Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> connectionsList . setOnItemClickListener ( new OnItemClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onItemClick ( AdapterView < ? > arg0 , View v , int position , long arg3 ) { </a> 0
<a> FieldsConnectionsDialog . this . dismiss ( ) ; </a> 0
<a> explorerActivity . getConnection ( connectionsArray . get ( position ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public class FieldsListAdapter extends BaseAdapter { </a> 0
<a> private LayoutInflater mInflater ; </a> 0
<a> boolean [ ] isChecked ; </a> 0
<a> public FieldsListAdapter ( ) { </a> 0
<a> mInflater = LayoutInflater . from ( explorerActivity . getBaseContext ( ) ) ; </a> 0
<a> isChecked = new boolean [ fieldsArray . size ( ) ] ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getCount ( ) { </a> 0
<a> return fieldsArray . size ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object getItem ( int position ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getItemId ( int position ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View getView ( final int position , View convertView , ViewGroup parent ) { </a> 0
<a> View hView = convertView ; </a> 0
<a> ViewHolder holder ; </a> 0
<a> JSONObject fieldObject = null ; </a> 0
<a> fieldObject = fieldsArray . get ( position ) ; </a> 0
<a> if ( hView == null ) { </a> 0
<a> hView = mInflater . inflate ( R . layout . fields_item , null ) ; </a> 0
<a> holder = new ViewHolder ( ) ; </a> 0
<a> holder . checkbox = ( CheckBox ) hView . findViewById ( R . id . fields_checkbox ) ; </a> 0
<a> holder . fieldsInfo = ( TextView ) hView . findViewById ( R . id . fields_info ) ; </a> 0
<a> hView . setTag ( holder ) ; </a> 0
<a> } else { </a> 0
<a> holder = ( ViewHolder ) hView . getTag ( ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> holder . checkbox . setText ( fieldObject . getString ( "name" ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> holder . checkbox . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> holder . fieldsInfo . setText ( fieldObject . getString ( "description" ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> holder . fieldsInfo . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> holder . checkbox . setId ( position ) ; </a> 0
<a> holder . checkbox . setChecked ( isChecked [ position ] ) ; </a> 0
<a> holder . checkbox . setOnCheckedChangeListener ( new OnCheckedChangeListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCheckedChanged ( CompoundButton button , boolean checked ) { </a> 0
<a> isChecked [ button . getId ( ) ] = checked ; </a> 0
<a> String field = button . getText ( ) . toString ( ) ; </a> 0
<a> if ( checked ) { </a> 0
<a> fieldsVector . add ( field ) ; </a> 0
<a> } else if ( fieldsVector . contains ( field ) ) { </a> 0
<a> fieldsVector . remove ( field ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> return hView ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class ViewHolder { </a> 0
<a> CheckBox checkbox ; </a> 0
<a> TextView fieldsInfo ; </a> 0
<a> } </a> 0
<a> public class ConnectionsListAdapter extends BaseAdapter { </a> 0
<a> private LayoutInflater mInflater ; </a> 0
<a> public ConnectionsListAdapter ( ) { </a> 0
<a> mInflater = LayoutInflater . from ( explorerActivity . getBaseContext ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getCount ( ) { </a> 0
<a> return connectionsArray . size ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object getItem ( int position ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getItemId ( int position ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View getView ( int position , View convertView , ViewGroup parent ) { </a> 0
<a> View hView = convertView ; </a> 0
<a> TextView connection ; </a> 0
<a> if ( hView == null ) { </a> 0
<a> hView = mInflater . inflate ( R . layout . connection_item , null ) ; </a> 0
<a> connection = ( TextView ) hView . findViewById ( R . id . connection_name ) ; </a> 0
<a> hView . setTag ( connection ) ; </a> 0
<a> } else { </a> 0
<a> connection = ( TextView ) hView . getTag ( ) ; </a> 0
<a> } </a> 0
<a> SpannableString name ; </a> 0
<a> name = new SpannableString ( connectionsArray . get ( position ) ) ; </a> 0
<a> name . setSpan ( new UnderlineSpan ( ) , 0 , name . length ( ) , 0 ) ; </a> 0
<a> connection . setText ( name ) ; </a> 0
<a> return hView ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . os . AsyncTask ; </a> 0
<a> import android . widget . BaseAdapter ; </a> 0
<a> import java . util . Hashtable ; </a> 0
<a> import java . util . Stack ; </a> 0
<a> public class FriendsGetProfilePics { </a> 0
<a> Hashtable < String , Bitmap > friendsImages ; </a> 0
<a> Hashtable < String , String > positionRequested ; </a> 0
<a> BaseAdapter listener ; </a> 0
<a> int runningCount = 0 ; </a> 0
<a> Stack < ItemPair > queue ; </a> 0
<a> final static int MAX_ALLOWED_TASKS = 15 ; </a> 0
<a> public FriendsGetProfilePics ( ) { </a> 0
<a> friendsImages = new Hashtable < String , Bitmap > ( ) ; </a> 0
<a> positionRequested = new Hashtable < String , String > ( ) ; </a> 0
<a> queue = new Stack < ItemPair > ( ) ; </a> 0
<a> } </a> 0
<a> public void setListener ( BaseAdapter listener ) { </a> 0
<a> this . listener = listener ; </a> 0
<a> reset ( ) ; </a> 0
<a> } </a> 0
<a> public void reset ( ) { </a> 0
<a> positionRequested . clear ( ) ; </a> 0
<a> runningCount = 0 ; </a> 0
<a> queue . clear ( ) ; </a> 0
<a> } </a> 0
<a> public Bitmap getImage ( String uid , String url ) { </a> 0
<a> Bitmap image = friendsImages . get ( uid ) ; </a> 0
<a> if ( image != null ) { </a> 0
<a> return image ; </a> 0
<a> } </a> 0
<a> if ( ! positionRequested . containsKey ( uid ) ) { </a> 0
<a> positionRequested . put ( uid , "" ) ; </a> 0
<a> if ( runningCount >= MAX_ALLOWED_TASKS ) { </a> 0
<a> queue . push ( new ItemPair ( uid , url ) ) ; </a> 0
<a> } else { </a> 0
<a> runningCount ++ ; </a> 0
<a> new GetProfilePicAsyncTask ( ) . execute ( uid , url ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public void getNextImage ( ) { </a> 0
<a> if ( ! queue . isEmpty ( ) ) { </a> 0
<a> ItemPair item = queue . pop ( ) ; </a> 0
<a> new GetProfilePicAsyncTask ( ) . execute ( item . uid , item . url ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class GetProfilePicAsyncTask extends AsyncTask < Object , Void , Bitmap > { </a> 0
<a> String uid ; </a> 0
<a> @ Override </a> 0
<a> protected Bitmap doInBackground ( Object ... params ) { </a> 0
<a> this . uid = ( String ) params [ 0 ] ; </a> 0
<a> String url = ( String ) params [ 1 ] ; </a> 0
<a> return Utility . getBitmap ( url ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onPostExecute ( Bitmap result ) { </a> 0
<a> runningCount -- ; </a> 0
<a> if ( result != null ) { </a> 0
<a> friendsImages . put ( uid , result ) ; </a> 0
<a> listener . notifyDataSetChanged ( ) ; </a> 0
<a> getNextImage ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class ItemPair { </a> 0
<a> String uid ; </a> 0
<a> String url ; </a> 0
<a> public ItemPair ( String uid , String url ) { </a> 0
<a> this . uid = uid ; </a> 0
<a> this . url = url ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . AlertDialog ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import android . widget . AdapterView . OnItemClickListener ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> public class FriendsList extends Activity implements OnItemClickListener { </a> 0
<a> private Handler mHandler ; </a> 0
<a> protected ListView friendsList ; </a> 0
<a> protected static JSONArray jsonArray ; </a> 0
<a> protected String graph_or_fql ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> mHandler = new Handler ( ) ; </a> 0
<a> setContentView ( R . layout . friends_list ) ; </a> 0
<a> Bundle extras = getIntent ( ) . getExtras ( ) ; </a> 0
<a> String apiResponse = extras . getString ( "API_RESPONSE" ) ; </a> 0
<a> graph_or_fql = extras . getString ( "METHOD" ) ; </a> 0
<a> try { </a> 0
<a> if ( graph_or_fql . equals ( "graph" ) ) { </a> 0
<a> jsonArray = new JSONObject ( apiResponse ) . getJSONArray ( "data" ) ; </a> 0
<a> } else { </a> 0
<a> jsonArray = new JSONArray ( apiResponse ) ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> showToast ( "Error: " + e . getMessage ( ) ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> friendsList = ( ListView ) findViewById ( R . id . friends_list ) ; </a> 0
<a> friendsList . setOnItemClickListener ( this ) ; </a> 0
<a> friendsList . setAdapter ( new FriendListAdapter ( this ) ) ; </a> 0
<a> showToast ( getString ( R . string . can_post_on_wall ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public void onItemClick ( AdapterView < ? > arg0 , View v , int position , long arg3 ) { </a> 0
<a> try { </a> 0
<a> final long friendId ; </a> 0
<a> if ( graph_or_fql . equals ( "graph" ) ) { </a> 0
<a> friendId = jsonArray . getJSONObject ( position ) . getLong ( "id" ) ; </a> 0
<a> } else { </a> 0
<a> friendId = jsonArray . getJSONObject ( position ) . getLong ( "uid" ) ; </a> 0
<a> } </a> 0
<a> String name = jsonArray . getJSONObject ( position ) . getString ( "name" ) ; </a> 0
<a> new AlertDialog . Builder ( this ) . setTitle ( R . string . post_on_wall_title ) </a> 0
<a> . setMessage ( String . format ( getString ( R . string . post_on_wall ) , name ) ) </a> 0
<a> . setPositiveButton ( R . string . yes , new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int which ) { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "to" , String . valueOf ( friendId ) ) ; </a> 0
<a> params . putString ( "caption" , getString ( R . string . app_name ) ) ; </a> 0
<a> params . putString ( "description" , getString ( R . string . app_desc ) ) ; </a> 0
<a> params . putString ( "picture" , Utility . HACK_ICON_URL ) ; </a> 0
<a> params . putString ( "name" , getString ( R . string . app_action ) ) ; </a> 0
<a> Utility . mFacebook . dialog ( FriendsList . this , "feed" , params , </a> 0
<a> new PostDialogListener ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) . setNegativeButton ( R . string . no , null ) . show ( ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> showToast ( "Error: " + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class PostDialogListener extends BaseDialogListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( Bundle values ) { </a> 0
<a> final String postId = values . getString ( "post_id" ) ; </a> 0
<a> if ( postId != null ) { </a> 0
<a> showToast ( "Message posted on the wall." ) ; </a> 0
<a> } else { </a> 0
<a> showToast ( "No message posted on the wall." ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void showToast ( final String msg ) { </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Toast toast = Toast . makeText ( FriendsList . this , msg , Toast . LENGTH_LONG ) ; </a> 0
<a> toast . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public class FriendListAdapter extends BaseAdapter { </a> 0
<a> private LayoutInflater mInflater ; </a> 0
<a> FriendsList friendsList ; </a> 0
<a> public FriendListAdapter ( FriendsList friendsList ) { </a> 0
<a> this . friendsList = friendsList ; </a> 0
<a> if ( Utility . model == null ) { </a> 0
<a> Utility . model = new FriendsGetProfilePics ( ) ; </a> 0
<a> } </a> 0
<a> Utility . model . setListener ( this ) ; </a> 0
<a> mInflater = LayoutInflater . from ( friendsList . getBaseContext ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getCount ( ) { </a> 0
<a> return jsonArray . length ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object getItem ( int position ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getItemId ( int position ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View getView ( int position , View convertView , ViewGroup parent ) { </a> 0
<a> JSONObject jsonObject = null ; </a> 0
<a> try { </a> 0
<a> jsonObject = jsonArray . getJSONObject ( position ) ; </a> 0
<a> } catch ( JSONException e1 ) { </a> 0
<a> e1 . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> View hView = convertView ; </a> 0
<a> if ( convertView == null ) { </a> 0
<a> hView = mInflater . inflate ( R . layout . friend_item , null ) ; </a> 0
<a> ViewHolder holder = new ViewHolder ( ) ; </a> 0
<a> holder . profile_pic = ( ImageView ) hView . findViewById ( R . id . profile_pic ) ; </a> 0
<a> holder . name = ( TextView ) hView . findViewById ( R . id . name ) ; </a> 0
<a> holder . info = ( TextView ) hView . findViewById ( R . id . info ) ; </a> 0
<a> hView . setTag ( holder ) ; </a> 0
<a> } </a> 0
<a> ViewHolder holder = ( ViewHolder ) hView . getTag ( ) ; </a> 0
<a> try { </a> 0
<a> if ( graph_or_fql . equals ( "graph" ) ) { </a> 0
<a> holder . profile_pic . setImageBitmap ( Utility . model . getImage ( </a> 0
<a> jsonObject . getString ( "id" ) , jsonObject . getString ( "picture" ) ) ) ; </a> 0
<a> } else { </a> 0
<a> holder . profile_pic . setImageBitmap ( Utility . model . getImage ( </a> 0
<a> jsonObject . getString ( "uid" ) , jsonObject . getString ( "pic_square" ) ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> holder . name . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> holder . name . setText ( jsonObject . getString ( "name" ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> holder . name . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> if ( graph_or_fql . equals ( "graph" ) ) { </a> 0
<a> holder . info . setText ( jsonObject . getJSONObject ( "location" ) . getString ( "name" ) ) ; </a> 0
<a> } else { </a> 0
<a> JSONObject location = jsonObject . getJSONObject ( "current_location" ) ; </a> 0
<a> holder . info . setText ( location . getString ( "city" ) + ", " </a> 0
<a> + location . getString ( "state" ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> holder . info . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> return hView ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class ViewHolder { </a> 0
<a> ImageView profile_pic ; </a> 0
<a> TextView name ; </a> 0
<a> TextView info ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . ProgressDialog ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . text . util . Linkify ; </a> 0
<a> import android . text . util . Linkify . TransformFilter ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . View . OnClickListener ; </a> 0
<a> import android . view . inputmethod . InputMethodManager ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . Iterator ; </a> 0
<a> import java . util . Vector ; </a> 0
<a> import java . util . regex . Matcher ; </a> 0
<a> import java . util . regex . Pattern ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public class GraphExplorer extends Activity { </a> 0
<a> private Button mSubmitButton , mViewURLButton ; </a> 0
<a> private Button mGetPermissionsButton ; </a> 0
<a> private Button mTextDeleteButton , mMeButton ; </a> 0
<a> private Button mFieldsConnectionsButton , mBackParentButton ; </a> 0
<a> private TextView mOutput ; </a> 0
<a> private EditText mInputId ; </a> 0
<a> private Bundle params ; </a> 0
<a> private String url , mParentObjectId ; </a> 0
<a> private ProgressDialog dialog ; </a> 0
<a> private String rootString ; </a> 0
<a> private ScrollView mScrollView ; </a> 0
<a> private Handler mHandler ; </a> 0
<a> private final static String BASE_GRAPH_URL = "https://graph.facebook.com" ; </a> 0
<a> private JSONObject metadataObject ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> mHandler = new Handler ( ) ; </a> 0
<a> setContentView ( R . layout . graph_explorer ) ; </a> 0
<a> url = BASE_GRAPH_URL ; </a> 0
<a> mInputId = ( EditText ) findViewById ( R . id . inputId ) ; </a> 0
<a> mOutput = ( TextView ) findViewById ( R . id . output ) ; </a> 0
<a> mSubmitButton = ( Button ) findViewById ( R . id . submitButton ) ; </a> 0
<a> mViewURLButton = ( Button ) findViewById ( R . id . viewURLButton ) ; </a> 0
<a> mGetPermissionsButton = ( Button ) findViewById ( R . id . accessTokenButton ) ; </a> 0
<a> mFieldsConnectionsButton = ( Button ) findViewById ( R . id . fieldsAndConnectionsButton ) ; </a> 0
<a> mBackParentButton = ( Button ) findViewById ( R . id . backParentButton ) ; </a> 0
<a> mScrollView = ( ScrollView ) findViewById ( R . id . ScrollView01 ) ; </a> 0
<a> mTextDeleteButton = ( Button ) findViewById ( R . id . textDeleteButton ) ; </a> 0
<a> mMeButton = ( Button ) findViewById ( R . id . meButton ) ; </a> 0
<a> if ( Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> mMeButton . setVisibility ( View . VISIBLE ) ; </a> 0
<a> } </a> 0
<a> params = new Bundle ( ) ; </a> 0
<a> mSubmitButton . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> ( ( InputMethodManager ) getSystemService ( Context . INPUT_METHOD_SERVICE ) ) </a> 0
<a> . hideSoftInputFromWindow ( mInputId . getWindowToken ( ) , 0 ) ; </a> 0
<a> url = BASE_GRAPH_URL ; </a> 0
<a> rootString = mInputId . getText ( ) . toString ( ) ; </a> 0
<a> if ( ! TextUtils . isEmpty ( rootString ) ) { </a> 0
<a> dialog = ProgressDialog . show ( GraphExplorer . this , "" , </a> 0
<a> getString ( R . string . please_wait ) , true , true ) ; </a> 0
<a> params . putString ( "metadata" , "1" ) ; </a> 0
<a> Utility . mAsyncRunner . request ( rootString , params , new graphApiRequestListener ( ) ) ; </a> 0
<a> url += "/" + rootString ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> mViewURLButton . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> setText ( url ) ; </a> 0
<a> Linkify . addLinks ( mOutput , Linkify . WEB_URLS ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> mGetPermissionsButton . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> if ( Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> dialog = ProgressDialog . show ( GraphExplorer . this , "" , </a> 0
<a> getString ( R . string . fetching_current_permissions ) , true , true ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "access_token" , Utility . mFacebook . getAccessToken ( ) ) ; </a> 0
<a> Utility . mAsyncRunner . request ( "me/permissions" , params , </a> 0
<a> new permissionsRequestListener ( ) ) ; </a> 0
<a> } else { </a> 0
<a> new PermissionsDialog ( GraphExplorer . this ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> mFieldsConnectionsButton . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> if ( metadataObject == null ) { </a> 0
<a> makeToast ( "No fields, connections availalbe for this object." ) ; </a> 0
<a> } else { </a> 0
<a> new FieldsConnectionsDialog ( GraphExplorer . this , metadataObject ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> mTextDeleteButton . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> url = BASE_GRAPH_URL ; </a> 0
<a> mParentObjectId = "" ; </a> 0
<a> mInputId . setText ( "" ) ; </a> 0
<a> params . clear ( ) ; </a> 0
<a> metadataObject = null ; </a> 0
<a> setText ( "" ) ; </a> 0
<a> mBackParentButton . setVisibility ( View . INVISIBLE ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> mMeButton . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> mInputId . setText ( "me" ) ; </a> 0
<a> mSubmitButton . performClick ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> mBackParentButton . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> mInputId . setText ( mParentObjectId ) ; </a> 0
<a> mParentObjectId = "" ; </a> 0
<a> mSubmitButton . performClick ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onResume ( ) { </a> 0
<a> super . onResume ( ) ; </a> 0
<a> if ( Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> mMeButton . setVisibility ( View . VISIBLE ) ; </a> 0
<a> } </a> 0
<a> if ( Utility . objectID != null ) { </a> 0
<a> mInputId . setText ( Utility . objectID ) ; </a> 0
<a> Utility . objectID = null ; </a> 0
<a> mSubmitButton . performClick ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected void processIntent ( Intent incomingIntent ) { </a> 0
<a> Uri intentUri = incomingIntent . getData ( ) ; </a> 0
<a> if ( intentUri == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String objectID = intentUri . getHost ( ) ; </a> 0
<a> mInputId . setText ( objectID ) ; </a> 0
<a> mSubmitButton . performClick ( ) ; </a> 0
<a> } </a> 0
<a> public void getConnection ( String connection ) { </a> 0
<a> mInputId . setText ( rootString + "/" + connection ) ; </a> 0
<a> mParentObjectId = rootString ; </a> 0
<a> mSubmitButton . performClick ( ) ; </a> 0
<a> } </a> 0
<a> public void getFields ( Vector < String > fieldsVector ) { </a> 0
<a> String fields = "" ; </a> 0
<a> int count = 0 ; </a> 0
<a> for ( String field : fieldsVector ) { </a> 0
<a> fields += field ; </a> 0
<a> if ( ++ count < fieldsVector . size ( ) ) { </a> 0
<a> fields += "," ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> params . putString ( "fields" , fields ) ; </a> 0
<a> mSubmitButton . performClick ( ) ; </a> 0
<a> } </a> 0
<a> public class permissionsRequestListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> Utility . currentPermissions . clear ( ) ; </a> 0
<a> try { </a> 0
<a> JSONObject jsonObject = new JSONObject ( response ) . getJSONArray ( "data" ) </a> 0
<a> . getJSONObject ( 0 ) ; </a> 0
<a> Iterator < ? > iterator = jsonObject . keys ( ) ; </a> 0
<a> String permission ; </a> 0
<a> while ( iterator . hasNext ( ) ) { </a> 0
<a> permission = ( String ) iterator . next ( ) ; </a> 0
<a> Utility . currentPermissions . put ( permission , </a> 0
<a> String . valueOf ( jsonObject . getInt ( permission ) ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> makeToast ( "Permissions could not be fetched, none will be selected by default." ) ; </a> 0
<a> } </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> new PermissionsDialog ( GraphExplorer . this ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> makeToast ( "Permissions could not be fetched, none will be selected by default." ) ; </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> new PermissionsDialog ( GraphExplorer . this ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> Utility . mFacebook . authorizeCallback ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> public class graphApiRequestListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> if ( ! params . isEmpty ( ) ) { </a> 0
<a> url += "?" + Util . encodeUrl ( params ) ; </a> 0
<a> } </a> 0
<a> metadataObject = null ; </a> 0
<a> params . clear ( ) ; </a> 0
<a> try { </a> 0
<a> JSONObject json = Util . parseJson ( response ) ; </a> 0
<a> if ( json . has ( "metadata" ) ) { </a> 0
<a> metadataObject = json . getJSONObject ( "metadata" ) ; </a> 0
<a> json . remove ( "metadata" ) ; </a> 0
<a> } else { </a> 0
<a> metadataObject = null ; </a> 0
<a> } </a> 0
<a> setText ( json . toString ( 2 ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> setText ( e . getMessage ( ) ) ; </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> setText ( e . getMessage ( ) ) ; </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> setText ( error . getMessage ( ) ) ; </a> 0
<a> params . clear ( ) ; </a> 0
<a> metadataObject = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setText ( final String txt ) { </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> TransformFilter idFilter = new TransformFilter ( ) { </a> 0
<a> @ Override </a> 0
<a> public final String transformUrl ( final Matcher match , String url ) { </a> 0
<a> return match . group ( 1 ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> mViewURLButton . setVisibility ( </a> 0
<a> TextUtils . isEmpty ( txt ) ? View . INVISIBLE : View . VISIBLE ) ; </a> 0
<a> mFieldsConnectionsButton . setVisibility ( TextUtils . isEmpty ( txt ) ? View . INVISIBLE </a> 0
<a> : View . VISIBLE ) ; </a> 0
<a> mOutput . setVisibility ( TextUtils . isEmpty ( txt ) ? View . INVISIBLE : View . VISIBLE ) ; </a> 0
<a> mBackParentButton . setVisibility ( </a> 0
<a> TextUtils . isEmpty ( mParentObjectId ) ? View . INVISIBLE : View . VISIBLE ) ; </a> 0
<a> String convertedTxt = txt . replace ( "\\/" , "/" ) ; </a> 0
<a> mOutput . setText ( convertedTxt ) ; </a> 0
<a> mScrollView . scrollTo ( 0 , 0 ) ; </a> 0
<a> Linkify . addLinks ( mOutput , Linkify . WEB_URLS ) ; </a> 0
<a> Pattern pattern = Pattern . compile ( "\"id\": \"(\\d*_?\\d*)\"" ) ; </a> 0
<a> String scheme = "fbGraphEx://" ; </a> 0
<a> Linkify . addLinks ( mOutput , pattern , scheme , null , idFilter ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void makeToast ( final String msg ) { </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Toast . makeText ( GraphExplorer . this , msg , Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . AlertDialog ; </a> 0
<a> import android . app . ProgressDialog ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . provider . MediaStore ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import android . widget . AdapterView . OnItemClickListener ; </a> 0
<a> import com . facebook . android . SessionEvents . AuthListener ; </a> 0
<a> import com . facebook . android . SessionEvents . LogoutListener ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public class Hackbook extends Activity implements OnItemClickListener { </a> 0
<a> public static final String APP_ID = "157111564357680" ; </a> 0
<a> private LoginButton mLoginButton ; </a> 0
<a> private TextView mText ; </a> 0
<a> private ImageView mUserPic ; </a> 0
<a> private Handler mHandler ; </a> 0
<a> ProgressDialog dialog ; </a> 0
<a> final static int AUTHORIZE_ACTIVITY_RESULT_CODE = 0 ; </a> 0
<a> final static int PICK_EXISTING_PHOTO_RESULT_CODE = 1 ; </a> 0
<a> private String graph_or_fql ; </a> 0
<a> private ListView list ; </a> 0
<a> String [ ] main_items = { "Update Status" , "App Requests" , "Get Friends" , "Upload Photo" , </a> 0
<a> "Place Check-in" , "Run FQL Query" , "Graph API Explorer" , "Token Refresh" } ; </a> 0
<a> String [ ] permissions = { "offline_access" , "publish_stream" , "user_photos" , "publish_checkins" , </a> 0
<a> "photo_upload" } ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> if ( APP_ID == null ) { </a> 0
<a> Util . showAlert ( this , "Warning" , "Facebook Applicaton ID must be " </a> 0
<a> + "specified before running this example: see FbAPIs.java" ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> setContentView ( R . layout . main ) ; </a> 0
<a> mHandler = new Handler ( ) ; </a> 0
<a> mText = ( TextView ) Hackbook . this . findViewById ( R . id . txt ) ; </a> 0
<a> mUserPic = ( ImageView ) Hackbook . this . findViewById ( R . id . user_pic ) ; </a> 0
<a> Utility . mFacebook = new Facebook ( APP_ID ) ; </a> 0
<a> Utility . mAsyncRunner = new AsyncFacebookRunner ( Utility . mFacebook ) ; </a> 0
<a> mLoginButton = ( LoginButton ) findViewById ( R . id . login ) ; </a> 0
<a> SessionStore . restore ( Utility . mFacebook , this ) ; </a> 0
<a> SessionEvents . addAuthListener ( new FbAPIsAuthListener ( ) ) ; </a> 0
<a> SessionEvents . addLogoutListener ( new FbAPIsLogoutListener ( ) ) ; </a> 0
<a> mLoginButton . init ( this , AUTHORIZE_ACTIVITY_RESULT_CODE , Utility . mFacebook , permissions ) ; </a> 0
<a> if ( Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> requestUserData ( ) ; </a> 0
<a> } </a> 0
<a> list = ( ListView ) findViewById ( R . id . main_list ) ; </a> 0
<a> list . setOnItemClickListener ( this ) ; </a> 0
<a> list . setAdapter ( new ArrayAdapter < String > ( this , R . layout . main_list_item , main_items ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onResume ( ) { </a> 0
<a> super . onResume ( ) ; </a> 0
<a> if ( Utility . mFacebook != null ) { </a> 0
<a> if ( ! Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> mText . setText ( "You are logged out! " ) ; </a> 0
<a> mUserPic . setImageBitmap ( null ) ; </a> 0
<a> } else { </a> 0
<a> Utility . mFacebook . extendAccessTokenIfNeeded ( this , null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> switch ( requestCode ) { </a> 0
<a> case AUTHORIZE_ACTIVITY_RESULT_CODE : { </a> 0
<a> Utility . mFacebook . authorizeCallback ( requestCode , resultCode , data ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case PICK_EXISTING_PHOTO_RESULT_CODE : { </a> 0
<a> if ( resultCode == Activity . RESULT_OK ) { </a> 0
<a> Uri photoUri = data . getData ( ) ; </a> 0
<a> if ( photoUri != null ) { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> try { </a> 0
<a> params . putByteArray ( "photo" , </a> 0
<a> Utility . scaleImage ( getApplicationContext ( ) , photoUri ) ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> params . putString ( "caption" , "FbAPIs Sample App photo upload" ) ; </a> 0
<a> Utility . mAsyncRunner . request ( "me/photos" , params , "POST" , </a> 0
<a> new PhotoUploadListener ( ) , null ) ; </a> 0
<a> } else { </a> 0
<a> Toast . makeText ( getApplicationContext ( ) , </a> 0
<a> "Error selecting image from the gallery." , Toast . LENGTH_SHORT ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> Toast . makeText ( getApplicationContext ( ) , "No image selected for upload." , </a> 0
<a> Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onItemClick ( AdapterView < ? > arg0 , View v , int position , long arg3 ) { </a> 0
<a> switch ( position ) { </a> 0
<a> case 0 : { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "caption" , getString ( R . string . app_name ) ) ; </a> 0
<a> params . putString ( "description" , getString ( R . string . app_desc ) ) ; </a> 0
<a> params . putString ( "picture" , Utility . HACK_ICON_URL ) ; </a> 0
<a> params . putString ( "name" , getString ( R . string . app_action ) ) ; </a> 0
<a> Utility . mFacebook . dialog ( Hackbook . this , "feed" , params , new UpdateStatusListener ( ) ) ; </a> 0
<a> String access_token = Utility . mFacebook . getAccessToken ( ) ; </a> 0
<a> System . out . println ( access_token ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 1 : { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "message" , getString ( R . string . request_message ) ) ; </a> 0
<a> Utility . mFacebook . dialog ( Hackbook . this , "apprequests" , params , </a> 0
<a> new AppRequestsListener ( ) ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 2 : { </a> 0
<a> if ( ! Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> Util . showAlert ( this , "Warning" , "You must first log in." ) ; </a> 0
<a> } else { </a> 0
<a> dialog = ProgressDialog . show ( Hackbook . this , "" , </a> 0
<a> getString ( R . string . please_wait ) , true , true ) ; </a> 0
<a> new AlertDialog . Builder ( this ) </a> 0
<a> . setTitle ( R . string . Graph_FQL_title ) </a> 0
<a> . setMessage ( R . string . Graph_FQL_msg ) </a> 0
<a> . setPositiveButton ( R . string . graph_button , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int which ) { </a> 0
<a> graph_or_fql = "graph" ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "fields" , "name, picture, location" ) ; </a> 0
<a> Utility . mAsyncRunner . request ( "me/friends" , params , </a> 0
<a> new FriendsRequestListener ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . setNegativeButton ( R . string . fql_button , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int which ) { </a> 0
<a> graph_or_fql = "fql" ; </a> 0
<a> String query = "select name, current_location, uid, pic_square from user where uid in (select uid2 from friend where uid1=me()) order by name" ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "method" , "fql.query" ) ; </a> 0
<a> params . putString ( "query" , query ) ; </a> 0
<a> Utility . mAsyncRunner . request ( null , params , </a> 0
<a> new FriendsRequestListener ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) . setOnCancelListener ( new DialogInterface . OnCancelListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCancel ( DialogInterface d ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } ) . show ( ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 3 : { </a> 0
<a> if ( ! Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> Util . showAlert ( this , "Warning" , "You must first log in." ) ; </a> 0
<a> } else { </a> 0
<a> dialog = ProgressDialog . show ( Hackbook . this , "" , </a> 0
<a> getString ( R . string . please_wait ) , true , true ) ; </a> 0
<a> new AlertDialog . Builder ( this ) </a> 0
<a> . setTitle ( R . string . gallery_remote_title ) </a> 0
<a> . setMessage ( R . string . gallery_remote_msg ) </a> 0
<a> . setPositiveButton ( R . string . gallery_button , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int which ) { </a> 0
<a> Intent intent = new Intent ( Intent . ACTION_PICK , </a> 0
<a> ( MediaStore . Images . Media . EXTERNAL_CONTENT_URI ) ) ; </a> 0
<a> startActivityForResult ( intent , </a> 0
<a> PICK_EXISTING_PHOTO_RESULT_CODE ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . setNegativeButton ( R . string . remote_button , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int which ) { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "url" , </a> 0
<a> "http://www.facebook.com/images/devsite/iphone_connect_btn.jpg" ) ; </a> 0
<a> params . putString ( "caption" , </a> 0
<a> "FbAPIs Sample App photo upload" ) ; </a> 0
<a> Utility . mAsyncRunner . request ( "me/photos" , params , </a> 0
<a> "POST" , new PhotoUploadListener ( ) , null ) ; </a> 0
<a> } </a> 0
<a> } ) . setOnCancelListener ( new DialogInterface . OnCancelListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCancel ( DialogInterface d ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } ) . show ( ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 4 : { </a> 0
<a> final Intent myIntent = new Intent ( getApplicationContext ( ) , Places . class ) ; </a> 0
<a> new AlertDialog . Builder ( this ) </a> 0
<a> . setTitle ( R . string . get_location ) </a> 0
<a> . setMessage ( R . string . get_default_or_new_location ) </a> 0
<a> . setPositiveButton ( R . string . current_location_button , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int which ) { </a> 0
<a> myIntent . putExtra ( "LOCATION" , "current" ) ; </a> 0
<a> startActivity ( myIntent ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . setNegativeButton ( R . string . times_square_button , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int which ) { </a> 0
<a> myIntent . putExtra ( "LOCATION" , "times_square" ) ; </a> 0
<a> startActivity ( myIntent ) ; </a> 0
<a> } </a> 0
<a> } ) . show ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 5 : { </a> 0
<a> if ( ! Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> Util . showAlert ( this , "Warning" , "You must first log in." ) ; </a> 0
<a> } else { </a> 0
<a> new FQLQuery ( Hackbook . this ) . show ( ) ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 6 : { </a> 0
<a> Intent myIntent = new Intent ( getApplicationContext ( ) , GraphExplorer . class ) ; </a> 0
<a> if ( Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> Utility . objectID = "me" ; </a> 0
<a> } </a> 0
<a> startActivity ( myIntent ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> case 7 : { </a> 0
<a> if ( ! Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> Util . showAlert ( this , "Warning" , "You must first log in." ) ; </a> 0
<a> } else { </a> 0
<a> new TokenRefreshDialog ( Hackbook . this ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class UpdateStatusListener extends BaseDialogListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( Bundle values ) { </a> 0
<a> final String postId = values . getString ( "post_id" ) ; </a> 0
<a> if ( postId != null ) { </a> 0
<a> new UpdateStatusResultDialog ( Hackbook . this , "Update Status executed" , values ) </a> 0
<a> . show ( ) ; </a> 0
<a> } else { </a> 0
<a> Toast toast = Toast . makeText ( getApplicationContext ( ) , "No wall post made" , </a> 0
<a> Toast . LENGTH_SHORT ) ; </a> 0
<a> toast . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> Toast . makeText ( getApplicationContext ( ) , "Facebook Error: " + error . getMessage ( ) , </a> 0
<a> Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCancel ( ) { </a> 0
<a> Toast toast = Toast . makeText ( getApplicationContext ( ) , "Update status cancelled" , </a> 0
<a> Toast . LENGTH_SHORT ) ; </a> 0
<a> toast . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class AppRequestsListener extends BaseDialogListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( Bundle values ) { </a> 0
<a> Toast toast = Toast . makeText ( getApplicationContext ( ) , "App request sent" , </a> 0
<a> Toast . LENGTH_SHORT ) ; </a> 0
<a> toast . show ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> Toast . makeText ( getApplicationContext ( ) , "Facebook Error: " + error . getMessage ( ) , </a> 0
<a> Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCancel ( ) { </a> 0
<a> Toast toast = Toast . makeText ( getApplicationContext ( ) , "App request cancelled" , </a> 0
<a> Toast . LENGTH_SHORT ) ; </a> 0
<a> toast . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class FriendsRequestListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> Intent myIntent = new Intent ( getApplicationContext ( ) , FriendsList . class ) ; </a> 0
<a> myIntent . putExtra ( "API_RESPONSE" , response ) ; </a> 0
<a> myIntent . putExtra ( "METHOD" , graph_or_fql ) ; </a> 0
<a> startActivity ( myIntent ) ; </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> Toast . makeText ( getApplicationContext ( ) , "Facebook Error: " + error . getMessage ( ) , </a> 0
<a> Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class PhotoUploadListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> new UploadPhotoResultDialog ( Hackbook . this , "Upload Photo executed" , response ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> Toast . makeText ( getApplicationContext ( ) , "Facebook Error: " + error . getMessage ( ) , </a> 0
<a> Toast . LENGTH_LONG ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class FQLRequestListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Toast . makeText ( getApplicationContext ( ) , "Response: " + response , </a> 0
<a> Toast . LENGTH_LONG ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> Toast . makeText ( getApplicationContext ( ) , "Facebook Error: " + error . getMessage ( ) , </a> 0
<a> Toast . LENGTH_LONG ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class UserRequestListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> JSONObject jsonObject ; </a> 0
<a> try { </a> 0
<a> jsonObject = new JSONObject ( response ) ; </a> 0
<a> final String picURL = jsonObject . getJSONObject ( "picture" ) </a> 0
<a> . getJSONObject ( "data" ) . getString ( "url" ) ; </a> 0
<a> final String name = jsonObject . getString ( "name" ) ; </a> 0
<a> Utility . userUID = jsonObject . getString ( "id" ) ; </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> mText . setText ( "Welcome " + name + "!" ) ; </a> 0
<a> mUserPic . setImageBitmap ( Utility . getBitmap ( picURL ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class FbAPIsAuthListener implements AuthListener { </a> 0
<a> @ Override </a> 0
<a> public void onAuthSucceed ( ) { </a> 0
<a> requestUserData ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onAuthFail ( String error ) { </a> 0
<a> mText . setText ( "Login Failed: " + error ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class FbAPIsLogoutListener implements LogoutListener { </a> 0
<a> @ Override </a> 0
<a> public void onLogoutBegin ( ) { </a> 0
<a> mText . setText ( "Logging out..." ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onLogoutFinish ( ) { </a> 0
<a> mText . setText ( "You have logged out! " ) ; </a> 0
<a> mUserPic . setImageBitmap ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void requestUserData ( ) { </a> 0
<a> mText . setText ( "Fetching user name, profile pic..." ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "fields" , "name, picture" ) ; </a> 0
<a> Utility . mAsyncRunner . request ( "me" , params , new UserRequestListener ( ) ) ; </a> 0
<a> } </a> 0
<a> public class MainListAdapter extends BaseAdapter { </a> 0
<a> private LayoutInflater mInflater ; </a> 0
<a> public MainListAdapter ( ) { </a> 0
<a> mInflater = LayoutInflater . from ( Hackbook . this . getBaseContext ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getCount ( ) { </a> 0
<a> return main_items . length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object getItem ( int position ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getItemId ( int position ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View getView ( int position , View convertView , ViewGroup parent ) { </a> 0
<a> View hView = convertView ; </a> 0
<a> if ( convertView == null ) { </a> 0
<a> hView = mInflater . inflate ( R . layout . main_list_item , null ) ; </a> 0
<a> ViewHolder holder = new ViewHolder ( ) ; </a> 0
<a> holder . main_list_item = ( TextView ) hView . findViewById ( R . id . main_api_item ) ; </a> 0
<a> hView . setTag ( holder ) ; </a> 0
<a> } </a> 0
<a> ViewHolder holder = ( ViewHolder ) hView . getTag ( ) ; </a> 0
<a> holder . main_list_item . setText ( main_items [ position ] ) ; </a> 0
<a> return hView ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class ViewHolder { </a> 0
<a> TextView main_list_item ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> public class IntentUriHandler extends Activity { </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> Intent incomingIntent = getIntent ( ) ; </a> 0
<a> if ( incomingIntent != null ) { </a> 0
<a> Uri intentUri = incomingIntent . getData ( ) ; </a> 0
<a> if ( intentUri != null ) { </a> 0
<a> Utility . objectID = intentUri . getHost ( ) ; </a> 0
<a> Intent graphIntent = new Intent ( getApplicationContext ( ) , GraphExplorer . class ) ; </a> 0
<a> graphIntent . setFlags ( Intent . FLAG_ACTIVITY_REORDER_TO_FRONT ) ; </a> 0
<a> startActivity ( graphIntent ) ; </a> 0
<a> } </a> 0
<a> finish ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . graphics . Color ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . util . AttributeSet ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . ImageButton ; </a> 0
<a> import com . facebook . android . Facebook . DialogListener ; </a> 0
<a> import com . facebook . android . SessionEvents . AuthListener ; </a> 0
<a> import com . facebook . android . SessionEvents . LogoutListener ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public class LoginButton extends ImageButton { </a> 0
<a> private Facebook mFb ; </a> 0
<a> private Handler mHandler ; </a> 0
<a> private SessionListener mSessionListener = new SessionListener ( ) ; </a> 0
<a> private String [ ] mPermissions ; </a> 0
<a> private Activity mActivity ; </a> 0
<a> private int mActivityCode ; </a> 0
<a> public LoginButton ( Context context ) { </a> 0
<a> super ( context ) ; </a> 0
<a> } </a> 0
<a> public LoginButton ( Context context , AttributeSet attrs ) { </a> 0
<a> super ( context , attrs ) ; </a> 0
<a> } </a> 0
<a> public LoginButton ( Context context , AttributeSet attrs , int defStyle ) { </a> 0
<a> super ( context , attrs , defStyle ) ; </a> 0
<a> } </a> 0
<a> public void init ( final Activity activity , final int activityCode , final Facebook fb ) { </a> 0
<a> init ( activity , activityCode , fb , new String [ ] { } ) ; </a> 0
<a> } </a> 0
<a> public void init ( final Activity activity , final int activityCode , final Facebook fb , </a> 0
<a> final String [ ] permissions ) { </a> 0
<a> mActivity = activity ; </a> 0
<a> mActivityCode = activityCode ; </a> 0
<a> mFb = fb ; </a> 0
<a> mPermissions = permissions ; </a> 0
<a> mHandler = new Handler ( ) ; </a> 0
<a> setBackgroundColor ( Color . TRANSPARENT ) ; </a> 0
<a> setImageResource ( fb . isSessionValid ( ) ? R . drawable . logout_button : R . drawable . login_button ) ; </a> 0
<a> drawableStateChanged ( ) ; </a> 0
<a> SessionEvents . addAuthListener ( mSessionListener ) ; </a> 0
<a> SessionEvents . addLogoutListener ( mSessionListener ) ; </a> 0
<a> setOnClickListener ( new ButtonOnClickListener ( ) ) ; </a> 0
<a> } </a> 0
<a> private final class ButtonOnClickListener implements OnClickListener { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View arg0 ) { </a> 0
<a> if ( mFb . isSessionValid ( ) ) { </a> 0
<a> SessionEvents . onLogoutBegin ( ) ; </a> 0
<a> AsyncFacebookRunner asyncRunner = new AsyncFacebookRunner ( mFb ) ; </a> 0
<a> asyncRunner . logout ( getContext ( ) , new LogoutRequestListener ( ) ) ; </a> 0
<a> } else { </a> 0
<a> mFb . authorize ( mActivity , mPermissions , mActivityCode , new LoginDialogListener ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private final class LoginDialogListener implements DialogListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( Bundle values ) { </a> 0
<a> SessionEvents . onLoginSuccess ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> SessionEvents . onLoginError ( error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onError ( DialogError error ) { </a> 0
<a> SessionEvents . onLoginError ( error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCancel ( ) { </a> 0
<a> SessionEvents . onLoginError ( "Action Canceled" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class LogoutRequestListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( String response , final Object state ) { </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> SessionEvents . onLogoutFinish ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class SessionListener implements AuthListener , LogoutListener { </a> 0
<a> @ Override </a> 0
<a> public void onAuthSucceed ( ) { </a> 0
<a> setImageResource ( R . drawable . logout_button ) ; </a> 0
<a> SessionStore . save ( mFb , getContext ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onAuthFail ( String error ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onLogoutBegin ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onLogoutFinish ( ) { </a> 0
<a> SessionStore . clear ( getContext ( ) ) ; </a> 0
<a> setImageResource ( R . drawable . login_button ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . Dialog ; </a> 0
<a> import android . graphics . Color ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . method . LinkMovementMethod ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . view . ViewGroup . LayoutParams ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import android . widget . CompoundButton . OnCheckedChangeListener ; </a> 0
<a> import android . widget . TabHost . TabSpec ; </a> 0
<a> import com . facebook . android . Facebook . DialogListener ; </a> 0
<a> import java . util . Vector ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public class PermissionsDialog extends Dialog { </a> 0
<a> private final static int TAB_HEIGHT = 50 ; </a> 0
<a> private Button mGetPermissions ; </a> 0
<a> private TextView mPermissionDetails ; </a> 0
<a> private Activity activity ; </a> 0
<a> private ListView userPermissionsList , friendPermissionsList , extendedPermissionsList ; </a> 0
<a> private BaseAdapter userPermissionsAdapter , friendPermissionsAdapter , </a> 0
<a> extendedPermissionAdapter ; </a> 0
<a> protected Vector < String > reqPermVector ; </a> 0
<a> String [ ] user_permissions = { "user_about_me" , "user_activities" , "user_birthday" , </a> 0
<a> "user_checkins" , "user_education_history" , "user_events" , "user_groups" , </a> 0
<a> "user_hometown" , "user_interests" , "user_likes" , "user_location" , "user_notes" , </a> 0
<a> "user_online_presence" , "user_photos" , "user_photo_video_tags" , "user_relationships" , </a> 0
<a> "user_relationship_details" , "user_religion_politics" , "user_status" , "user_videos" , </a> 0
<a> "user_website" , "user_work_history" } ; </a> 0
<a> String [ ] friend_permissions = { "friends_about_me" , "friends_activities" , "friends_birthday" , </a> 0
<a> "friends_checkins" , "friends_education_history" , "friends_events" , "friends_groups" , </a> 0
<a> "friends_hometown" , "friends_interests" , "friends_likes" , "friends_location" , </a> 0
<a> "friends_notes" , "friends_online_presence" , "friends_photos" , </a> 0
<a> "friends_photo_video_tags" , "friends_relationships" , "friends_relationship_details" , </a> 0
<a> "friends_religion_politics" , "friends_status" , "friends_videos" , "friends_website" , </a> 0
<a> "friends_work_history" } ; </a> 0
<a> String [ ] extended_permissions = { "ads_management" , "create_event" , "create_note" , "email" , </a> 0
<a> "export_stream" , "manage_friendlists" , "manage_groups" , "manage_pages" , </a> 0
<a> "offline_access" , "publish_actions" , "photo_upload" , "publish_checkins" , </a> 0
<a> "publish_stream" , "read_friendlists" , "read_insights" , "read_mailbox" , "read_requests" , </a> 0
<a> "read_stream" , "rsvp_event" , "share_item" , "status_update" , "sms" , "video_upload" , </a> 0
<a> "xmpp_login" } ; </a> 0
<a> public PermissionsDialog ( Activity activity ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> this . activity = activity ; </a> 0
<a> setTitle ( activity . getString ( R . string . permissions_request ) ) ; </a> 0
<a> reqPermVector = new Vector < String > ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . permissions_list ) ; </a> 0
<a> LayoutParams params = getWindow ( ) . getAttributes ( ) ; </a> 0
<a> params . width = LayoutParams . FILL_PARENT ; </a> 0
<a> params . height = LayoutParams . FILL_PARENT ; </a> 0
<a> getWindow ( ) . setAttributes ( ( android . view . WindowManager . LayoutParams ) params ) ; </a> 0
<a> mPermissionDetails = ( TextView ) findViewById ( R . id . permission_detail ) ; </a> 0
<a> mPermissionDetails . setMovementMethod ( LinkMovementMethod . getInstance ( ) ) ; </a> 0
<a> userPermissionsList = ( ListView ) findViewById ( R . id . user_permissions_list ) ; </a> 0
<a> friendPermissionsList = ( ListView ) findViewById ( R . id . friend_permissions_list ) ; </a> 0
<a> extendedPermissionsList = ( ListView ) findViewById ( R . id . extended_permissions_list ) ; </a> 0
<a> userPermissionsAdapter = new PermissionsListAdapter ( user_permissions ) ; </a> 0
<a> userPermissionsList . setAdapter ( userPermissionsAdapter ) ; </a> 0
<a> friendPermissionsAdapter = new PermissionsListAdapter ( friend_permissions ) ; </a> 0
<a> friendPermissionsList . setAdapter ( friendPermissionsAdapter ) ; </a> 0
<a> extendedPermissionAdapter = new PermissionsListAdapter ( extended_permissions ) ; </a> 0
<a> extendedPermissionsList . setAdapter ( extendedPermissionAdapter ) ; </a> 0
<a> TabHost tabHost = ( TabHost ) findViewById ( R . id . tabHost ) ; </a> 0
<a> tabHost . setup ( ) ; </a> 0
<a> TabSpec spec1 = tabHost . newTabSpec ( "Tab 1" ) ; </a> 0
<a> spec1 . setIndicator ( activity . getString ( R . string . user ) ) ; </a> 0
<a> spec1 . setContent ( R . id . user_permissions_list ) ; </a> 0
<a> TabSpec spec2 = tabHost . newTabSpec ( "Tab 2" ) ; </a> 0
<a> spec2 . setIndicator ( activity . getString ( R . string . friend ) ) ; </a> 0
<a> spec2 . setContent ( R . id . friend_permissions_list ) ; </a> 0
<a> TabSpec spec3 = tabHost . newTabSpec ( "Tab 3" ) ; </a> 0
<a> spec3 . setIndicator ( activity . getString ( R . string . extended ) ) ; </a> 0
<a> spec3 . setContent ( R . id . extended_permissions_list ) ; </a> 0
<a> tabHost . addTab ( spec1 ) ; </a> 0
<a> tabHost . addTab ( spec2 ) ; </a> 0
<a> tabHost . addTab ( spec3 ) ; </a> 0
<a> tabHost . setCurrentTab ( 0 ) ; </a> 0
<a> tabHost . getTabWidget ( ) . getChildAt ( 0 ) . getLayoutParams ( ) . height = TAB_HEIGHT ; </a> 0
<a> tabHost . getTabWidget ( ) . getChildAt ( 1 ) . getLayoutParams ( ) . height = TAB_HEIGHT ; </a> 0
<a> tabHost . getTabWidget ( ) . getChildAt ( 2 ) . getLayoutParams ( ) . height = TAB_HEIGHT ; </a> 0
<a> mGetPermissions = ( Button ) findViewById ( R . id . get_permissions_button ) ; </a> 0
<a> mGetPermissions . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> if ( reqPermVector . isEmpty ( ) && Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> Toast . makeText ( activity . getBaseContext ( ) , "No Permissions selected." , </a> 0
<a> Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> PermissionsDialog . this . dismiss ( ) ; </a> 0
<a> } else { </a> 0
<a> String [ ] permissions = reqPermVector . toArray ( new String [ 0 ] ) ; </a> 0
<a> Utility . mFacebook . authorize ( activity , permissions , new LoginDialogListener ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private final class LoginDialogListener implements DialogListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( Bundle values ) { </a> 0
<a> SessionEvents . onLoginSuccess ( ) ; </a> 0
<a> Toast . makeText ( activity . getBaseContext ( ) , "New Permissions granted." , </a> 0
<a> Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> PermissionsDialog . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> Toast . makeText ( activity . getBaseContext ( ) , </a> 0
<a> "Facebook Error! No new permissions granted." , Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> PermissionsDialog . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onError ( DialogError error ) { </a> 0
<a> Toast . makeText ( activity . getBaseContext ( ) , "Error! No new permissions granted." , </a> 0
<a> Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> PermissionsDialog . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCancel ( ) { </a> 0
<a> Toast . makeText ( activity . getBaseContext ( ) , </a> 0
<a> "Action cancelled, No new permissions granted." , Toast . LENGTH_SHORT ) . show ( ) ; </a> 0
<a> PermissionsDialog . this . dismiss ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class PermissionsListAdapter extends BaseAdapter { </a> 0
<a> private LayoutInflater mInflater ; </a> 0
<a> String [ ] permissions ; </a> 0
<a> boolean [ ] isChecked ; </a> 0
<a> public PermissionsListAdapter ( String [ ] permissions ) { </a> 0
<a> this . permissions = permissions ; </a> 0
<a> this . isChecked = new boolean [ permissions . length ] ; </a> 0
<a> mInflater = LayoutInflater . from ( activity . getBaseContext ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getCount ( ) { </a> 0
<a> return permissions . length ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object getItem ( int position ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getItemId ( int position ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View getView ( final int position , View convertView , ViewGroup parent ) { </a> 0
<a> View hView = convertView ; </a> 0
<a> CheckBox checkbox ; </a> 0
<a> if ( hView == null ) { </a> 0
<a> hView = mInflater . inflate ( R . layout . permission_item , null ) ; </a> 0
<a> checkbox = ( CheckBox ) hView . findViewById ( R . id . permission_checkbox ) ; </a> 0
<a> hView . setTag ( checkbox ) ; </a> 0
<a> } else { </a> 0
<a> checkbox = ( CheckBox ) hView . getTag ( ) ; </a> 0
<a> } </a> 0
<a> checkbox . setText ( this . permissions [ position ] ) ; </a> 0
<a> checkbox . setId ( position ) ; </a> 0
<a> if ( Utility . currentPermissions . containsKey ( this . permissions [ position ] ) </a> 0
<a> && Utility . currentPermissions . get ( this . permissions [ position ] ) . equals ( "1" ) ) { </a> 0
<a> checkbox . setTextColor ( Color . GREEN ) ; </a> 0
<a> checkbox . setChecked ( true ) ; </a> 0
<a> checkbox . setEnabled ( false ) ; </a> 0
<a> checkbox . setOnCheckedChangeListener ( null ) ; </a> 0
<a> } else { </a> 0
<a> checkbox . setTextColor ( Color . WHITE ) ; </a> 0
<a> checkbox . setChecked ( this . isChecked [ position ] ) ; </a> 0
<a> checkbox . setEnabled ( true ) ; </a> 0
<a> checkbox . setOnCheckedChangeListener ( new OnCheckedChangeListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCheckedChanged ( CompoundButton button , boolean checked ) { </a> 0
<a> isChecked [ button . getId ( ) ] = checked ; </a> 0
<a> if ( checked ) { </a> 0
<a> reqPermVector . add ( button . getText ( ) . toString ( ) ) ; </a> 0
<a> } else if ( reqPermVector . contains ( button . getText ( ) ) ) { </a> 0
<a> reqPermVector . remove ( button . getText ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> return hView ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . AlertDialog ; </a> 0
<a> import android . app . ProgressDialog ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . location . Criteria ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . location . LocationListener ; </a> 0
<a> import android . location . LocationManager ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . os . Looper ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import android . widget . AdapterView . OnItemClickListener ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public class Places extends Activity implements OnItemClickListener { </a> 0
<a> private Handler mHandler ; </a> 0
<a> private JSONObject location ; </a> 0
<a> protected ListView placesList ; </a> 0
<a> protected LocationManager lm ; </a> 0
<a> protected MyLocationListener locationListener ; </a> 0
<a> protected static JSONArray jsonArray ; </a> 0
<a> final static double TIMES_SQUARE_LAT = 40.756 ; </a> 0
<a> final static double TIMES_SQUARE_LON = - 73.987 ; </a> 0
<a> protected ProgressDialog dialog ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> mHandler = new Handler ( ) ; </a> 0
<a> location = new JSONObject ( ) ; </a> 0
<a> setContentView ( R . layout . places_list ) ; </a> 0
<a> Bundle extras = getIntent ( ) . getExtras ( ) ; </a> 0
<a> String default_or_new = extras . getString ( "LOCATION" ) ; </a> 0
<a> if ( default_or_new . equals ( "times_square" ) ) { </a> 0
<a> try { </a> 0
<a> location . put ( "latitude" , new Double ( TIMES_SQUARE_LAT ) ) ; </a> 0
<a> location . put ( "longitude" , new Double ( TIMES_SQUARE_LON ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> } </a> 0
<a> fetchPlaces ( ) ; </a> 0
<a> } else { </a> 0
<a> getLocation ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void getLocation ( ) { </a> 0
<a> new Thread ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Looper . prepare ( ) ; </a> 0
<a> dialog = ProgressDialog . show ( Places . this , "" , </a> 0
<a> getString ( R . string . fetching_location ) , false , true , </a> 0
<a> new DialogInterface . OnCancelListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCancel ( DialogInterface dialog ) { </a> 0
<a> showToast ( "No location fetched." ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( lm == null ) { </a> 0
<a> lm = ( LocationManager ) getSystemService ( Context . LOCATION_SERVICE ) ; </a> 0
<a> } </a> 0
<a> if ( locationListener == null ) { </a> 0
<a> locationListener = new MyLocationListener ( ) ; </a> 0
<a> } </a> 0
<a> Criteria criteria = new Criteria ( ) ; </a> 0
<a> criteria . setAccuracy ( Criteria . ACCURACY_COARSE ) ; </a> 0
<a> String provider = lm . getBestProvider ( criteria , true ) ; </a> 0
<a> if ( provider != null && lm . isProviderEnabled ( provider ) ) { </a> 0
<a> lm . requestLocationUpdates ( provider , 1 , 0 , locationListener , </a> 0
<a> Looper . getMainLooper ( ) ) ; </a> 0
<a> } else { </a> 0
<a> new AlertDialog . Builder ( Places . this ) </a> 0
<a> . setTitle ( R . string . enable_gps_title ) </a> 0
<a> . setMessage ( getString ( R . string . enable_gps ) ) </a> 0
<a> . setPositiveButton ( R . string . gps_settings , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int which ) { </a> 0
<a> startActivityForResult ( </a> 0
<a> new Intent ( </a> 0
<a> android . provider . Settings . ACTION_LOCATION_SOURCE_SETTINGS ) , </a> 0
<a> 0 ) ; </a> 0
<a> } </a> 0
<a> } ) </a> 0
<a> . setNegativeButton ( R . string . cancel , </a> 0
<a> new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int which ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> Places . this . finish ( ) ; </a> 0
<a> } </a> 0
<a> } ) . show ( ) ; </a> 0
<a> } </a> 0
<a> Looper . loop ( ) ; </a> 0
<a> } </a> 0
<a> } . start ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> getLocation ( ) ; </a> 0
<a> } </a> 0
<a> private void fetchPlaces ( ) { </a> 0
<a> if ( ! isFinishing ( ) ) { </a> 0
<a> dialog = ProgressDialog . show ( Places . this , "" , getString ( R . string . nearby_places ) , true , </a> 0
<a> true , new DialogInterface . OnCancelListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCancel ( DialogInterface dialog ) { </a> 0
<a> showToast ( "No places fetched." ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "type" , "place" ) ; </a> 0
<a> try { </a> 0
<a> params . putString ( "center" , </a> 0
<a> location . getString ( "latitude" ) + "," + location . getString ( "longitude" ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> showToast ( "No places fetched." ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> params . putString ( "distance" , "1000" ) ; </a> 0
<a> Utility . mAsyncRunner . request ( "search" , params , new placesRequestListener ( ) ) ; </a> 0
<a> } </a> 0
<a> public class placesRequestListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> Log . d ( "Facebook-FbAPIs" , "Got response: " + response ) ; </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> try { </a> 0
<a> jsonArray = new JSONObject ( response ) . getJSONArray ( "data" ) ; </a> 0
<a> if ( jsonArray == null ) { </a> 0
<a> showToast ( "Error: nearby places could not be fetched" ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> showToast ( "Error: " + e . getMessage ( ) ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> placesList = ( ListView ) findViewById ( R . id . places_list ) ; </a> 0
<a> placesList . setOnItemClickListener ( Places . this ) ; </a> 0
<a> placesList . setAdapter ( new PlacesListAdapter ( Places . this ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> showToast ( "Fetch Places Error: " + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onItemClick ( AdapterView < ? > arg0 , View v , int position , long arg3 ) { </a> 0
<a> if ( ! Utility . mFacebook . isSessionValid ( ) ) { </a> 0
<a> Util . showAlert ( this , "Warning" , "You must first log in." ) ; </a> 0
<a> } else { </a> 0
<a> try { </a> 0
<a> final String message = "Check-in from the " + getString ( R . string . app_name ) ; </a> 0
<a> final String name = jsonArray . getJSONObject ( position ) . getString ( "name" ) ; </a> 0
<a> final String placeID = jsonArray . getJSONObject ( position ) . getString ( "id" ) ; </a> 0
<a> new AlertDialog . Builder ( this ) . setTitle ( R . string . check_in_title ) </a> 0
<a> . setMessage ( String . format ( getString ( R . string . check_in_at ) , name ) ) </a> 0
<a> . setPositiveButton ( R . string . checkin , new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialog , int which ) { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "place" , placeID ) ; </a> 0
<a> params . putString ( "message" , message ) ; </a> 0
<a> params . putString ( "coordinates" , location . toString ( ) ) ; </a> 0
<a> Utility . mAsyncRunner . request ( "me/checkins" , params , "POST" , </a> 0
<a> new placesCheckInListener ( ) , null ) ; </a> 0
<a> } </a> 0
<a> } ) . setNegativeButton ( R . string . cancel , null ) . show ( ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> showToast ( "Error: " + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class placesCheckInListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> showToast ( "API Response: " + response ) ; </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> showToast ( "Check-in Error: " + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void showToast ( final String msg ) { </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> Toast toast = Toast . makeText ( Places . this , msg , Toast . LENGTH_LONG ) ; </a> 0
<a> toast . show ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public class PlacesListAdapter extends BaseAdapter { </a> 0
<a> private LayoutInflater mInflater ; </a> 0
<a> Places placesList ; </a> 0
<a> public PlacesListAdapter ( Context context ) { </a> 0
<a> mInflater = LayoutInflater . from ( context ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int getCount ( ) { </a> 0
<a> return jsonArray . length ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Object getItem ( int position ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long getItemId ( int position ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View getView ( int position , View convertView , ViewGroup parent ) { </a> 0
<a> JSONObject jsonObject = null ; </a> 0
<a> try { </a> 0
<a> jsonObject = jsonArray . getJSONObject ( position ) ; </a> 0
<a> } catch ( JSONException e1 ) { </a> 0
<a> e1 . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> View hView = convertView ; </a> 0
<a> if ( convertView == null ) { </a> 0
<a> hView = mInflater . inflate ( R . layout . place_item , null ) ; </a> 0
<a> ViewHolder holder = new ViewHolder ( ) ; </a> 0
<a> holder . name = ( TextView ) hView . findViewById ( R . id . place_name ) ; </a> 0
<a> holder . location = ( TextView ) hView . findViewById ( R . id . place_location ) ; </a> 0
<a> hView . setTag ( holder ) ; </a> 0
<a> } </a> 0
<a> ViewHolder holder = ( ViewHolder ) hView . getTag ( ) ; </a> 0
<a> try { </a> 0
<a> holder . name . setText ( jsonObject . getString ( "name" ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> holder . name . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> String location = jsonObject . getJSONObject ( "location" ) . getString ( "street" ) + ", " </a> 0
<a> + jsonObject . getJSONObject ( "location" ) . getString ( "city" ) + ", " </a> 0
<a> + jsonObject . getJSONObject ( "location" ) . getString ( "state" ) ; </a> 0
<a> holder . location . setText ( location ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> holder . location . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> return hView ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class ViewHolder { </a> 0
<a> TextView name ; </a> 0
<a> TextView location ; </a> 0
<a> } </a> 0
<a> class MyLocationListener implements LocationListener { </a> 0
<a> @ Override </a> 0
<a> public void onLocationChanged ( Location loc ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> if ( loc != null ) { </a> 0
<a> try { </a> 0
<a> location . put ( "latitude" , new Double ( loc . getLatitude ( ) ) ) ; </a> 0
<a> location . put ( "longitude" , new Double ( loc . getLongitude ( ) ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> } </a> 0
<a> showToast ( "Location acquired: " + String . valueOf ( loc . getLatitude ( ) ) + " " </a> 0
<a> + String . valueOf ( loc . getLongitude ( ) ) ) ; </a> 0
<a> lm . removeUpdates ( this ) ; </a> 0
<a> fetchPlaces ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onProviderDisabled ( String provider ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onProviderEnabled ( String provider ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onStatusChanged ( String provider , int status , Bundle extras ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import java . util . LinkedList ; </a> 0
<a> public class SessionEvents { </a> 0
<a> private static LinkedList < AuthListener > mAuthListeners = new LinkedList < AuthListener > ( ) ; </a> 0
<a> private static LinkedList < LogoutListener > mLogoutListeners = new LinkedList < LogoutListener > ( ) ; </a> 0
<a> public static void addAuthListener ( AuthListener listener ) { </a> 0
<a> mAuthListeners . add ( listener ) ; </a> 0
<a> } </a> 0
<a> public static void removeAuthListener ( AuthListener listener ) { </a> 0
<a> mAuthListeners . remove ( listener ) ; </a> 0
<a> } </a> 0
<a> public static void addLogoutListener ( LogoutListener listener ) { </a> 0
<a> mLogoutListeners . add ( listener ) ; </a> 0
<a> } </a> 0
<a> public static void removeLogoutListener ( LogoutListener listener ) { </a> 0
<a> mLogoutListeners . remove ( listener ) ; </a> 0
<a> } </a> 0
<a> public static void onLoginSuccess ( ) { </a> 0
<a> for ( AuthListener listener : mAuthListeners ) { </a> 0
<a> listener . onAuthSucceed ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void onLoginError ( String error ) { </a> 0
<a> for ( AuthListener listener : mAuthListeners ) { </a> 0
<a> listener . onAuthFail ( error ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void onLogoutBegin ( ) { </a> 0
<a> for ( LogoutListener l : mLogoutListeners ) { </a> 0
<a> l . onLogoutBegin ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void onLogoutFinish ( ) { </a> 0
<a> for ( LogoutListener l : mLogoutListeners ) { </a> 0
<a> l . onLogoutFinish ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static interface AuthListener { </a> 0
<a> public void onAuthSucceed ( ) ; </a> 0
<a> public void onAuthFail ( String error ) ; </a> 0
<a> } </a> 0
<a> public static interface LogoutListener { </a> 0
<a> public void onLogoutBegin ( ) ; </a> 0
<a> public void onLogoutFinish ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . SharedPreferences ; </a> 0
<a> import android . content . SharedPreferences . Editor ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public class SessionStore { </a> 0
<a> private static final String TOKEN = "access_token" ; </a> 0
<a> private static final String EXPIRES = "expires_in" ; </a> 0
<a> private static final String LAST_UPDATE = "last_update" ; </a> 0
<a> private static final String KEY = "facebook-session" ; </a> 0
<a> public static boolean save ( Facebook session , Context context ) { </a> 0
<a> Editor editor = context . getSharedPreferences ( KEY , Context . MODE_PRIVATE ) . edit ( ) ; </a> 0
<a> editor . putString ( TOKEN , session . getAccessToken ( ) ) ; </a> 0
<a> editor . putLong ( EXPIRES , session . getAccessExpires ( ) ) ; </a> 0
<a> editor . putLong ( LAST_UPDATE , session . getLastAccessUpdate ( ) ) ; </a> 0
<a> return editor . commit ( ) ; </a> 0
<a> } </a> 0
<a> public static boolean restore ( Facebook session , Context context ) { </a> 0
<a> SharedPreferences savedSession = context . getSharedPreferences ( KEY , Context . MODE_PRIVATE ) ; </a> 0
<a> session . setTokenFromCache ( </a> 0
<a> savedSession . getString ( TOKEN , null ) , </a> 0
<a> savedSession . getLong ( EXPIRES , 0 ) , </a> 0
<a> savedSession . getLong ( LAST_UPDATE , 0 ) ) ; </a> 0
<a> return session . isSessionValid ( ) ; </a> 0
<a> } </a> 0
<a> public static void clear ( Context context ) { </a> 0
<a> Editor editor = context . getSharedPreferences ( KEY , Context . MODE_PRIVATE ) . edit ( ) ; </a> 0
<a> editor . clear ( ) ; </a> 0
<a> editor . commit ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import java . util . Timer ; </a> 0
<a> import java . util . TimerTask ; </a> 0
<a> public class SplashActivity extends Activity { </a> 0
<a> private long splashDelay = 1500 ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . splash ) ; </a> 0
<a> TimerTask task = new TimerTask ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> finish ( ) ; </a> 0
<a> Intent hackbookIntent = new Intent ( ) . setClass ( SplashActivity . this , Hackbook . class ) ; </a> 0
<a> startActivity ( hackbookIntent ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Timer timer = new Timer ( ) ; </a> 0
<a> timer . schedule ( task , splashDelay ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . Dialog ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . method . LinkMovementMethod ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . EditText ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import java . text . DateFormat ; </a> 0
<a> import java . util . Date ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public class TokenRefreshDialog extends Dialog { </a> 0
<a> private EditText tokenEdit , tokenExpiresEdit ; </a> 0
<a> private TextView mUsefulTip ; </a> 0
<a> private Button mRefreshButton ; </a> 0
<a> private Activity activity ; </a> 0
<a> public TokenRefreshDialog ( Activity activity ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> this . activity = activity ; </a> 0
<a> setTitle ( R . string . refresh_token_title ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . token_refresh ) ; </a> 0
<a> tokenEdit = ( EditText ) findViewById ( R . id . tokenEdit ) ; </a> 0
<a> tokenEdit . setText ( Utility . mFacebook . getAccessToken ( ) ) ; </a> 0
<a> tokenExpiresEdit = ( EditText ) findViewById ( R . id . tokenExpiresEdit ) ; </a> 0
<a> setExpiresAt ( Utility . mFacebook . getAccessExpires ( ) ) ; </a> 0
<a> mUsefulTip = ( TextView ) findViewById ( R . id . usefulTip ) ; </a> 0
<a> mUsefulTip . setMovementMethod ( LinkMovementMethod . getInstance ( ) ) ; </a> 0
<a> mRefreshButton = ( Button ) findViewById ( R . id . refresh_button ) ; </a> 0
<a> mRefreshButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> changeButtonState ( false ) ; </a> 0
<a> RefreshTokenListener listener = new RefreshTokenListener ( ) ; </a> 0
<a> if ( ! Utility . mFacebook . extendAccessToken ( activity , listener ) ) { </a> 0
<a> listener . onError ( new Error ( </a> 0
<a> activity . getString ( R . string . refresh_token_binding_error ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private class RefreshTokenListener implements Facebook . ServiceListener { </a> 0
<a> @ Override </a> 0
<a> public void onFacebookError ( FacebookError e ) { </a> 0
<a> changeButtonState ( true ) ; </a> 0
<a> String title = String . format ( activity . getString ( R . string . facebook_error ) + "%d" , </a> 0
<a> e . getErrorCode ( ) ) ; </a> 0
<a> Util . showAlert ( activity , title , e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onError ( Error e ) { </a> 0
<a> changeButtonState ( true ) ; </a> 0
<a> Util . showAlert ( activity , activity . getString ( R . string . error ) , e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( Bundle values ) { </a> 0
<a> changeButtonState ( true ) ; </a> 0
<a> tokenEdit . setText ( values . getString ( Facebook . TOKEN ) ) ; </a> 0
<a> setExpiresAt ( values . getLong ( Facebook . EXPIRES ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void changeButtonState ( boolean enabled ) { </a> 0
<a> mRefreshButton . setEnabled ( enabled ) ; </a> 0
<a> mRefreshButton . setText ( enabled ? R . string . refresh_button : R . string . refresh_button_pending ) ; </a> 0
<a> } </a> 0
<a> private void setExpiresAt ( long time ) { </a> 0
<a> DateFormat dateFormat = DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . SHORT ) ; </a> 0
<a> tokenExpiresEdit . setText ( dateFormat . format ( new Date ( time ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . Dialog ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . text . method . LinkMovementMethod ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup . LayoutParams ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public class UpdateStatusResultDialog extends Dialog { </a> 0
<a> private Bundle values ; </a> 0
<a> private TextView mOutput , mUsefulTip ; </a> 0
<a> private Button mViewPostButton , mDeletePostButton ; </a> 0
<a> private Activity activity ; </a> 0
<a> private Handler mHandler ; </a> 0
<a> public UpdateStatusResultDialog ( Activity activity , String title , Bundle values ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> this . activity = activity ; </a> 0
<a> this . values = values ; </a> 0
<a> setTitle ( title ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> mHandler = new Handler ( ) ; </a> 0
<a> setContentView ( R . layout . update_post_response ) ; </a> 0
<a> LayoutParams params = getWindow ( ) . getAttributes ( ) ; </a> 0
<a> params . width = LayoutParams . FILL_PARENT ; </a> 0
<a> params . height = LayoutParams . FILL_PARENT ; </a> 0
<a> getWindow ( ) . setAttributes ( ( android . view . WindowManager . LayoutParams ) params ) ; </a> 0
<a> mOutput = ( TextView ) findViewById ( R . id . apiOutput ) ; </a> 0
<a> mOutput . setText ( values . toString ( ) ) ; </a> 0
<a> mUsefulTip = ( TextView ) findViewById ( R . id . usefulTip ) ; </a> 0
<a> mUsefulTip . setMovementMethod ( LinkMovementMethod . getInstance ( ) ) ; </a> 0
<a> mViewPostButton = ( Button ) findViewById ( R . id . view_post_button ) ; </a> 0
<a> mDeletePostButton = ( Button ) findViewById ( R . id . delete_post_button ) ; </a> 0
<a> final String postId = values . getString ( "post_id" ) ; </a> 0
<a> mViewPostButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Utility . mAsyncRunner . request ( postId , new WallPostRequestListener ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> mDeletePostButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Utility . mAsyncRunner . request ( postId , new Bundle ( ) , "DELETE" , </a> 0
<a> new WallPostDeleteListener ( ) , null ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> public class WallPostRequestListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> try { </a> 0
<a> JSONObject json = new JSONObject ( response ) ; </a> 0
<a> setText ( json . toString ( 2 ) ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> setText ( activity . getString ( R . string . exception ) + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> setText ( activity . getString ( R . string . facebook_error ) + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class WallPostDeleteListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> if ( response . equals ( "true" ) ) { </a> 0
<a> String message = "Wall Post deleted" + "\n" ; </a> 0
<a> message += "Api Response: " + response ; </a> 0
<a> setText ( message ) ; </a> 0
<a> } else { </a> 0
<a> setText ( "wall post could not be deleted" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> setText ( activity . getString ( R . string . facebook_error ) + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setText ( final String txt ) { </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> mOutput . setText ( txt ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . Dialog ; </a> 0
<a> import android . app . ProgressDialog ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . os . AsyncTask ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Handler ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . text . util . Linkify ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup . LayoutParams ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . ImageView ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public class UploadPhotoResultDialog extends Dialog { </a> 0
<a> private String response , photo_id ; </a> 0
<a> private TextView mOutput , mUsefulTip ; </a> 0
<a> private Button mViewPhotoButton , mTagPhotoButton ; </a> 0
<a> private ImageView mUploadedPhoto ; </a> 0
<a> private Activity activity ; </a> 0
<a> private ProgressDialog dialog ; </a> 0
<a> private boolean hidePhoto = false ; </a> 0
<a> private Handler mHandler ; </a> 0
<a> public UploadPhotoResultDialog ( Activity activity , String title , String response ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> this . activity = activity ; </a> 0
<a> this . response = response ; </a> 0
<a> setTitle ( title ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> mHandler = new Handler ( ) ; </a> 0
<a> setContentView ( R . layout . upload_photo_response ) ; </a> 0
<a> LayoutParams params = getWindow ( ) . getAttributes ( ) ; </a> 0
<a> params . width = LayoutParams . FILL_PARENT ; </a> 0
<a> params . height = LayoutParams . FILL_PARENT ; </a> 0
<a> getWindow ( ) . setAttributes ( ( android . view . WindowManager . LayoutParams ) params ) ; </a> 0
<a> mOutput = ( TextView ) findViewById ( R . id . apiOutput ) ; </a> 0
<a> mUsefulTip = ( TextView ) findViewById ( R . id . usefulTip ) ; </a> 0
<a> mViewPhotoButton = ( Button ) findViewById ( R . id . view_photo_button ) ; </a> 0
<a> mTagPhotoButton = ( Button ) findViewById ( R . id . tag_photo_button ) ; </a> 0
<a> mUploadedPhoto = ( ImageView ) findViewById ( R . id . uploadedPhoto ) ; </a> 0
<a> JSONObject json ; </a> 0
<a> try { </a> 0
<a> json = Util . parseJson ( response ) ; </a> 0
<a> final String photo_id = json . getString ( "id" ) ; </a> 0
<a> this . photo_id = photo_id ; </a> 0
<a> mOutput . setText ( json . toString ( 2 ) ) ; </a> 0
<a> mUsefulTip . setText ( activity . getString ( R . string . photo_tip ) ) ; </a> 0
<a> Linkify . addLinks ( mUsefulTip , Linkify . WEB_URLS ) ; </a> 0
<a> mViewPhotoButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> if ( hidePhoto ) { </a> 0
<a> mViewPhotoButton . setText ( R . string . view_photo ) ; </a> 0
<a> hidePhoto = false ; </a> 0
<a> mUploadedPhoto . setImageBitmap ( null ) ; </a> 0
<a> } else { </a> 0
<a> hidePhoto = true ; </a> 0
<a> mViewPhotoButton . setText ( R . string . hide_photo ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "fields" , "picture" ) ; </a> 0
<a> dialog = ProgressDialog . show ( activity , "" , </a> 0
<a> activity . getString ( R . string . please_wait ) , true , true ) ; </a> 0
<a> dialog . show ( ) ; </a> 0
<a> Utility . mAsyncRunner . request ( photo_id , params , </a> 0
<a> new ViewPhotoRequestListener ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> mTagPhotoButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> setTag ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> setText ( activity . getString ( R . string . exception ) + e . getMessage ( ) ) ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> setText ( activity . getString ( R . string . facebook_error ) + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setTag ( ) { </a> 0
<a> String relativePath = photo_id + "/tags/" + Utility . userUID ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "x" , "5" ) ; </a> 0
<a> params . putString ( "y" , "5" ) ; </a> 0
<a> Utility . mAsyncRunner . request ( relativePath , params , "POST" , new TagPhotoRequestListener ( ) , </a> 0
<a> null ) ; </a> 0
<a> } </a> 0
<a> public class ViewPhotoRequestListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> try { </a> 0
<a> JSONObject json = Util . parseJson ( response ) ; </a> 0
<a> final String pictureURL = json . getString ( "picture" ) ; </a> 0
<a> if ( TextUtils . isEmpty ( pictureURL ) ) { </a> 0
<a> setText ( "Error getting \'picture\' field of the photo" ) ; </a> 0
<a> } else { </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> new FetchImage ( ) . execute ( pictureURL ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> setText ( activity . getString ( R . string . exception ) + e . getMessage ( ) ) ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> setText ( activity . getString ( R . string . facebook_error ) + e . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> setText ( activity . getString ( R . string . facebook_error ) + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class TagPhotoRequestListener extends BaseRequestListener { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> if ( response . equals ( "true" ) ) { </a> 0
<a> String message = "User tagged in photo at (5, 5)" + "\n" ; </a> 0
<a> message += "Api Response: " + response ; </a> 0
<a> setText ( message ) ; </a> 0
<a> } else { </a> 0
<a> setText ( "User could not be tagged." ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError error ) { </a> 0
<a> setText ( activity . getString ( R . string . facebook_error ) + error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setText ( final String txt ) { </a> 0
<a> mHandler . post ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> mOutput . setText ( txt ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private class FetchImage extends AsyncTask < String , Void , Bitmap > { </a> 0
<a> @ Override </a> 0
<a> protected Bitmap doInBackground ( String ... urls ) { </a> 0
<a> return Utility . getBitmap ( urls [ 0 ] ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onPostExecute ( Bitmap result ) { </a> 0
<a> dialog . dismiss ( ) ; </a> 0
<a> mUploadedPhoto . setImageBitmap ( result ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . hellofacebook ; </a> 0
<a> import android . app . AlertDialog ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . graphics . BitmapFactory ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> import android . support . v4 . app . FragmentManager ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . widget . * ; </a> 0
<a> import java . util . * ; </a> 0
<a> public class HelloFacebookSampleActivity extends FragmentActivity { </a> 0
<a> private static final List < String > PERMISSIONS = Arrays . asList ( "publish_actions" ) ; </a> 0
<a> private static final Location SEATTLE_LOCATION = new Location ( "" ) { </a> 0
<a> { </a> 0
<a> setLatitude ( 47.6097 ) ; </a> 0
<a> setLongitude ( - 122.3331 ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private final String PENDING_ACTION_BUNDLE_KEY = "com.facebook.samples.hellofacebook:PendingAction" ; </a> 0
<a> private Button postStatusUpdateButton ; </a> 0
<a> private Button postPhotoButton ; </a> 0
<a> private Button pickFriendsButton ; </a> 0
<a> private Button pickPlaceButton ; </a> 0
<a> private LoginButton loginButton ; </a> 0
<a> private ProfilePictureView profilePictureView ; </a> 0
<a> private TextView greeting ; </a> 0
<a> private PendingAction pendingAction = PendingAction . NONE ; </a> 0
<a> private ViewGroup controlsContainer ; </a> 0
<a> private GraphUser user ; </a> 0
<a> private enum PendingAction { </a> 0
<a> NONE , </a> 0
<a> POST_PHOTO , </a> 0
<a> POST_STATUS_UPDATE </a> 0
<a> } </a> 0
<a> private UiLifecycleHelper uiHelper ; </a> 0
<a> private Session . StatusCallback callback = new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> onSessionStateChange ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> uiHelper = new UiLifecycleHelper ( this , callback ) ; </a> 0
<a> uiHelper . onCreate ( savedInstanceState ) ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> String name = savedInstanceState . getString ( PENDING_ACTION_BUNDLE_KEY ) ; </a> 0
<a> pendingAction = PendingAction . valueOf ( name ) ; </a> 0
<a> } </a> 0
<a> setContentView ( R . layout . main ) ; </a> 0
<a> loginButton = ( LoginButton ) findViewById ( R . id . login_button ) ; </a> 0
<a> loginButton . setUserInfoChangedCallback ( new LoginButton . UserInfoChangedCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onUserInfoFetched ( GraphUser user ) { </a> 0
<a> HelloFacebookSampleActivity . this . user = user ; </a> 0
<a> updateUI ( ) ; </a> 0
<a> handlePendingAction ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> profilePictureView = ( ProfilePictureView ) findViewById ( R . id . profilePicture ) ; </a> 0
<a> greeting = ( TextView ) findViewById ( R . id . greeting ) ; </a> 0
<a> postStatusUpdateButton = ( Button ) findViewById ( R . id . postStatusUpdateButton ) ; </a> 0
<a> postStatusUpdateButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> onClickPostStatusUpdate ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> postPhotoButton = ( Button ) findViewById ( R . id . postPhotoButton ) ; </a> 0
<a> postPhotoButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> onClickPostPhoto ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> pickFriendsButton = ( Button ) findViewById ( R . id . pickFriendsButton ) ; </a> 0
<a> pickFriendsButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> onClickPickFriends ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> pickPlaceButton = ( Button ) findViewById ( R . id . pickPlaceButton ) ; </a> 0
<a> pickPlaceButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> onClickPickPlace ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> controlsContainer = ( ViewGroup ) findViewById ( R . id . main_ui_container ) ; </a> 0
<a> final FragmentManager fm = getSupportFragmentManager ( ) ; </a> 0
<a> Fragment fragment = fm . findFragmentById ( R . id . fragment_container ) ; </a> 0
<a> if ( fragment != null ) { </a> 0
<a> controlsContainer . setVisibility ( View . GONE ) ; </a> 0
<a> if ( fragment instanceof FriendPickerFragment ) { </a> 0
<a> setFriendPickerListeners ( ( FriendPickerFragment ) fragment ) ; </a> 0
<a> } else if ( fragment instanceof PlacePickerFragment ) { </a> 0
<a> setPlacePickerListeners ( ( PlacePickerFragment ) fragment ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> fm . addOnBackStackChangedListener ( new FragmentManager . OnBackStackChangedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onBackStackChanged ( ) { </a> 0
<a> if ( fm . getBackStackEntryCount ( ) == 0 ) { </a> 0
<a> controlsContainer . setVisibility ( View . VISIBLE ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onResume ( ) { </a> 0
<a> super . onResume ( ) ; </a> 0
<a> uiHelper . onResume ( ) ; </a> 0
<a> updateUI ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> uiHelper . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . putString ( PENDING_ACTION_BUNDLE_KEY , pendingAction . name ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> uiHelper . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onPause ( ) { </a> 0
<a> super . onPause ( ) ; </a> 0
<a> uiHelper . onPause ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onDestroy ( ) { </a> 0
<a> super . onDestroy ( ) ; </a> 0
<a> uiHelper . onDestroy ( ) ; </a> 0
<a> } </a> 0
<a> private void onSessionStateChange ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( pendingAction != PendingAction . NONE && </a> 0
<a> ( exception instanceof FacebookOperationCanceledException || </a> 0
<a> exception instanceof FacebookAuthorizationException ) ) { </a> 0
<a> new AlertDialog . Builder ( HelloFacebookSampleActivity . this ) </a> 0
<a> . setTitle ( R . string . cancelled ) </a> 0
<a> . setMessage ( R . string . permission_not_granted ) </a> 0
<a> . setPositiveButton ( R . string . ok , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> pendingAction = PendingAction . NONE ; </a> 0
<a> } else if ( state == SessionState . OPENED_TOKEN_UPDATED ) { </a> 0
<a> handlePendingAction ( ) ; </a> 0
<a> } </a> 0
<a> updateUI ( ) ; </a> 0
<a> } </a> 0
<a> private void updateUI ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> boolean enableButtons = ( session != null && session . isOpened ( ) ) ; </a> 0
<a> postStatusUpdateButton . setEnabled ( enableButtons ) ; </a> 0
<a> postPhotoButton . setEnabled ( enableButtons ) ; </a> 0
<a> pickFriendsButton . setEnabled ( enableButtons ) ; </a> 0
<a> pickPlaceButton . setEnabled ( enableButtons ) ; </a> 0
<a> if ( enableButtons && user != null ) { </a> 0
<a> profilePictureView . setProfileId ( user . getId ( ) ) ; </a> 0
<a> greeting . setText ( getString ( R . string . hello_user , user . getFirstName ( ) ) ) ; </a> 0
<a> } else { </a> 0
<a> profilePictureView . setProfileId ( null ) ; </a> 0
<a> greeting . setText ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "incomplete-switch" ) </a> 0
<a> private void handlePendingAction ( ) { </a> 0
<a> PendingAction previouslyPendingAction = pendingAction ; </a> 0
<a> pendingAction = PendingAction . NONE ; </a> 0
<a> switch ( previouslyPendingAction ) { </a> 0
<a> case POST_PHOTO : </a> 0
<a> postPhoto ( ) ; </a> 0
<a> break ; </a> 0
<a> case POST_STATUS_UPDATE : </a> 0
<a> postStatusUpdate ( ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private interface GraphObjectWithId extends GraphObject { </a> 0
<a> String getId ( ) ; </a> 0
<a> } </a> 0
<a> private void showPublishResult ( String message , GraphObject result , FacebookRequestError error ) { </a> 0
<a> String title = null ; </a> 0
<a> String alertMessage = null ; </a> 0
<a> if ( error == null ) { </a> 0
<a> title = getString ( R . string . success ) ; </a> 0
<a> String id = result . cast ( GraphObjectWithId . class ) . getId ( ) ; </a> 0
<a> alertMessage = getString ( R . string . successfully_posted_post , message , id ) ; </a> 0
<a> } else { </a> 0
<a> title = getString ( R . string . error ) ; </a> 0
<a> alertMessage = error . getErrorMessage ( ) ; </a> 0
<a> } </a> 0
<a> new AlertDialog . Builder ( this ) </a> 0
<a> . setTitle ( title ) </a> 0
<a> . setMessage ( alertMessage ) </a> 0
<a> . setPositiveButton ( R . string . ok , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> private void onClickPostStatusUpdate ( ) { </a> 0
<a> performPublish ( PendingAction . POST_STATUS_UPDATE ) ; </a> 0
<a> } </a> 0
<a> private void postStatusUpdate ( ) { </a> 0
<a> if ( user != null && hasPublishPermission ( ) ) { </a> 0
<a> final String message = getString ( R . string . status_update , user . getFirstName ( ) , ( new Date ( ) . toString ( ) ) ) ; </a> 0
<a> Request request = Request </a> 0
<a> . newStatusUpdateRequest ( Session . getActiveSession ( ) , message , new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> showPublishResult ( message , response . getGraphObject ( ) , response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> request . executeAsync ( ) ; </a> 0
<a> } else { </a> 0
<a> pendingAction = PendingAction . POST_STATUS_UPDATE ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onClickPostPhoto ( ) { </a> 0
<a> performPublish ( PendingAction . POST_PHOTO ) ; </a> 0
<a> } </a> 0
<a> private void postPhoto ( ) { </a> 0
<a> if ( hasPublishPermission ( ) ) { </a> 0
<a> Bitmap image = BitmapFactory . decodeResource ( this . getResources ( ) , R . drawable . icon ) ; </a> 0
<a> Request request = Request . newUploadPhotoRequest ( Session . getActiveSession ( ) , image , new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> showPublishResult ( getString ( R . string . photo_post ) , response . getGraphObject ( ) , response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> request . executeAsync ( ) ; </a> 0
<a> } else { </a> 0
<a> pendingAction = PendingAction . POST_PHOTO ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void showPickerFragment ( PickerFragment < ? > fragment ) { </a> 0
<a> fragment . setOnErrorListener ( new PickerFragment . OnErrorListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > pickerFragment , FacebookException error ) { </a> 0
<a> showAlert ( getString ( R . string . error ) , error . getMessage ( ) ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> FragmentManager fm = getSupportFragmentManager ( ) ; </a> 0
<a> fm . beginTransaction ( ) </a> 0
<a> . replace ( R . id . fragment_container , fragment ) </a> 0
<a> . addToBackStack ( null ) </a> 0
<a> . commit ( ) ; </a> 0
<a> controlsContainer . setVisibility ( View . GONE ) ; </a> 0
<a> fm . executePendingTransactions ( ) ; </a> 0
<a> fragment . loadData ( false ) ; </a> 0
<a> } </a> 0
<a> private void onClickPickFriends ( ) { </a> 0
<a> final FriendPickerFragment fragment = new FriendPickerFragment ( ) ; </a> 0
<a> setFriendPickerListeners ( fragment ) ; </a> 0
<a> showPickerFragment ( fragment ) ; </a> 0
<a> } </a> 0
<a> private void setFriendPickerListeners ( final FriendPickerFragment fragment ) { </a> 0
<a> fragment . setOnDoneButtonClickedListener ( new FriendPickerFragment . OnDoneButtonClickedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onDoneButtonClicked ( PickerFragment < ? > pickerFragment ) { </a> 0
<a> onFriendPickerDone ( fragment ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void onFriendPickerDone ( FriendPickerFragment fragment ) { </a> 0
<a> FragmentManager fm = getSupportFragmentManager ( ) ; </a> 0
<a> fm . popBackStack ( ) ; </a> 0
<a> String results = "" ; </a> 0
<a> Collection < GraphUser > selection = fragment . getSelection ( ) ; </a> 0
<a> if ( selection != null && selection . size ( ) > 0 ) { </a> 0
<a> ArrayList < String > names = new ArrayList < String > ( ) ; </a> 0
<a> for ( GraphUser user : selection ) { </a> 0
<a> names . add ( user . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> results = TextUtils . join ( ", " , names ) ; </a> 0
<a> } else { </a> 0
<a> results = getString ( R . string . no_friends_selected ) ; </a> 0
<a> } </a> 0
<a> showAlert ( getString ( R . string . you_picked ) , results ) ; </a> 0
<a> } </a> 0
<a> private void onPlacePickerDone ( PlacePickerFragment fragment ) { </a> 0
<a> FragmentManager fm = getSupportFragmentManager ( ) ; </a> 0
<a> fm . popBackStack ( ) ; </a> 0
<a> String result = "" ; </a> 0
<a> GraphPlace selection = fragment . getSelection ( ) ; </a> 0
<a> if ( selection != null ) { </a> 0
<a> result = selection . getName ( ) ; </a> 0
<a> } else { </a> 0
<a> result = getString ( R . string . no_place_selected ) ; </a> 0
<a> } </a> 0
<a> showAlert ( getString ( R . string . you_picked ) , result ) ; </a> 0
<a> } </a> 0
<a> private void onClickPickPlace ( ) { </a> 0
<a> final PlacePickerFragment fragment = new PlacePickerFragment ( ) ; </a> 0
<a> fragment . setLocation ( SEATTLE_LOCATION ) ; </a> 0
<a> fragment . setTitleText ( getString ( R . string . pick_seattle_place ) ) ; </a> 0
<a> setPlacePickerListeners ( fragment ) ; </a> 0
<a> showPickerFragment ( fragment ) ; </a> 0
<a> } </a> 0
<a> private void setPlacePickerListeners ( final PlacePickerFragment fragment ) { </a> 0
<a> fragment . setOnDoneButtonClickedListener ( new PlacePickerFragment . OnDoneButtonClickedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onDoneButtonClicked ( PickerFragment < ? > pickerFragment ) { </a> 0
<a> onPlacePickerDone ( fragment ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragment . setOnSelectionChangedListener ( new PlacePickerFragment . OnSelectionChangedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onSelectionChanged ( PickerFragment < ? > pickerFragment ) { </a> 0
<a> if ( fragment . getSelection ( ) != null ) { </a> 0
<a> onPlacePickerDone ( fragment ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void showAlert ( String title , String message ) { </a> 0
<a> new AlertDialog . Builder ( this ) </a> 0
<a> . setTitle ( title ) </a> 0
<a> . setMessage ( message ) </a> 0
<a> . setPositiveButton ( R . string . ok , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> private boolean hasPublishPermission ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> return session != null && session . getPermissions ( ) . contains ( "publish_actions" ) ; </a> 0
<a> } </a> 0
<a> private void performPublish ( PendingAction action ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null ) { </a> 0
<a> pendingAction = action ; </a> 0
<a> if ( hasPublishPermission ( ) ) { </a> 0
<a> handlePendingAction ( ) ; </a> 0
<a> } else { </a> 0
<a> session . requestNewPublishPermissions ( new Session . NewPermissionsRequest ( this , PERMISSIONS ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . placepicker ; </a> 0
<a> import android . app . AlertDialog ; </a> 1
<a> import android . content . Intent ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> import android . support . v4 . app . FragmentManager ; </a> 0
<a> import com . facebook . FacebookException ; </a> 0
<a> import com . facebook . widget . PickerFragment ; </a> 0
<a> import com . facebook . widget . PlacePickerFragment ; </a> 0
<a> public class PickPlaceActivity extends FragmentActivity { </a> 0
<a> PlacePickerFragment placePickerFragment ; </a> 0
<a> public static void populateParameters ( Intent intent , Location location , String searchText ) { </a> 0
<a> intent . putExtra ( PlacePickerFragment . LOCATION_BUNDLE_KEY , location ) ; </a> 0
<a> intent . putExtra ( PlacePickerFragment . SEARCH_TEXT_BUNDLE_KEY , searchText ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . pick_place_activity ) ; </a> 0
<a> FragmentManager fm = getSupportFragmentManager ( ) ; </a> 0
<a> placePickerFragment = ( PlacePickerFragment ) fm . findFragmentById ( R . id . place_picker_fragment ) ; </a> 0
<a> if ( savedInstanceState == null ) { </a> 0
<a> placePickerFragment . setSettingsFromBundle ( getIntent ( ) . getExtras ( ) ) ; </a> 0
<a> } </a> 0
<a> placePickerFragment . setOnErrorListener ( new PickerFragment . OnErrorListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> PickPlaceActivity . this . onError ( error ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> placePickerFragment . setOnSelectionChangedListener ( new PickerFragment . OnSelectionChangedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onSelectionChanged ( PickerFragment < ? > fragment ) { </a> 0
<a> if ( placePickerFragment . getSelection ( ) != null ) { </a> 0
<a> finishActivity ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> placePickerFragment . setOnDoneButtonClickedListener ( new PickerFragment . OnDoneButtonClickedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onDoneButtonClicked ( PickerFragment < ? > fragment ) { </a> 0
<a> finishActivity ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void finishActivity ( ) { </a> 0
<a> PlacePickerApplication application = ( PlacePickerApplication ) getApplication ( ) ; </a> 0
<a> application . setSelectedPlace ( placePickerFragment . getSelection ( ) ) ; </a> 0
<a> setResult ( RESULT_OK , null ) ; </a> 0
<a> finish ( ) ; </a> 0
<a> } </a> 0
<a> private void onError ( Exception error ) { </a> 0
<a> new AlertDialog . Builder ( this ) </a> 1
<a> . setTitle ( R . string . error_dialog_title ) </a> 1
<a> . setMessage ( error . getMessage ( ) ) </a> 1
<a> . setPositiveButton ( R . string . ok_button , null ) </a> 1
<a> . show ( ) ; </a> 1
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onStart ( ) { </a> 0
<a> super . onStart ( ) ; </a> 0
<a> try { </a> 0
<a> placePickerFragment . loadData ( false ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . placepicker ; </a> 0
<a> import android . app . Application ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> public class PlacePickerApplication extends Application { </a> 0
<a> public GraphPlace getSelectedPlace ( ) { </a> 0
<a> return selectedPlace ; </a> 0
<a> } </a> 0
<a> public void setSelectedPlace ( GraphPlace selectedPlace ) { </a> 0
<a> this . selectedPlace = selectedPlace ; </a> 0
<a> } </a> 0
<a> private GraphPlace selectedPlace ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . placepicker ; </a> 0
<a> import android . app . AlertDialog ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . location . Criteria ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . location . LocationListener ; </a> 0
<a> import android . location . LocationManager ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . model . GraphLocation ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> public class PlacePickerSampleActivity extends FragmentActivity implements LocationListener { </a> 0
<a> private static final int PLACE_ACTIVITY = 1 ; </a> 0
<a> private static final Location SEATTLE_LOCATION = new Location ( "" ) { </a> 0
<a> { </a> 0
<a> setLatitude ( 47.6097 ) ; </a> 0
<a> setLongitude ( - 122.3331 ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private static final Location SAN_FRANCISCO_LOCATION = new Location ( "" ) { </a> 0
<a> { </a> 0
<a> setLatitude ( 37.7750 ) ; </a> 0
<a> setLongitude ( - 122.4183 ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private static final Location PARIS_LOCATION = new Location ( "" ) { </a> 0
<a> { </a> 0
<a> setLatitude ( 48.857875 ) ; </a> 0
<a> setLongitude ( 2.294635 ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> private TextView resultsTextView ; </a> 0
<a> private LocationManager locationManager ; </a> 0
<a> private Location lastKnownLocation ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . main ) ; </a> 0
<a> resultsTextView = ( TextView ) findViewById ( R . id . resultsTextView ) ; </a> 0
<a> Button button = ( Button ) findViewById ( R . id . seattleButton ) ; </a> 0
<a> button . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> onClickSeattle ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> button = ( Button ) findViewById ( R . id . sanFranciscoButton ) ; </a> 0
<a> button . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> onClickSanFrancisco ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> button = ( Button ) findViewById ( R . id . gpsButton ) ; </a> 0
<a> button . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> onClickGPS ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( Session . getActiveSession ( ) == null || </a> 1
<a> Session . getActiveSession ( ) . isClosed ( ) ) { </a> 1
<a> Session . openActiveSession ( this , true , null ) ; </a> 1
<a> } </a> 0
<a> locationManager = ( LocationManager ) getSystemService ( Context . LOCATION_SERVICE ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onStart ( ) { </a> 0
<a> super . onStart ( ) ; </a> 0
<a> displaySelectedPlace ( RESULT_OK ) ; </a> 0
<a> } </a> 0
<a> private void onError ( Exception exception ) { </a> 0
<a> AlertDialog . Builder builder = new AlertDialog . Builder ( this ) ; </a> 0
<a> builder . setTitle ( "Error" ) . setMessage ( exception . getMessage ( ) ) . setPositiveButton ( "OK" , null ) ; </a> 0
<a> builder . show ( ) ; </a> 0
<a> } </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> switch ( requestCode ) { </a> 0
<a> case PLACE_ACTIVITY : </a> 0
<a> displaySelectedPlace ( resultCode ) ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> Session . getActiveSession ( ) . onActivityResult ( this , requestCode , resultCode , data ) ; </a> 1
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void displaySelectedPlace ( int resultCode ) { </a> 0
<a> String results = "" ; </a> 0
<a> PlacePickerApplication application = ( PlacePickerApplication ) getApplication ( ) ; </a> 0
<a> GraphPlace selection = application . getSelectedPlace ( ) ; </a> 0
<a> if ( selection != null ) { </a> 0
<a> GraphLocation location = selection . getLocation ( ) ; </a> 0
<a> results = String . format ( "Name: %s\nCategory: %s\nLocation: (%f,%f)\nStreet: %s, %s, %s, %s, %s" , </a> 0
<a> selection . getName ( ) , selection . getCategory ( ) , </a> 0
<a> location . getLatitude ( ) , location . getLongitude ( ) , </a> 0
<a> location . getStreet ( ) , location . getCity ( ) , location . getState ( ) , location . getZip ( ) , </a> 0
<a> location . getCountry ( ) ) ; </a> 0
<a> } else { </a> 0
<a> results = "<No place selected>" ; </a> 0
<a> } </a> 0
<a> resultsTextView . setText ( results ) ; </a> 0
<a> } </a> 0
<a> public void onLocationChanged ( Location location ) { </a> 0
<a> lastKnownLocation = location ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onStatusChanged ( String provider , int status , Bundle extras ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onProviderEnabled ( String provider ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onProviderDisabled ( String provider ) { </a> 0
<a> } </a> 0
<a> private void startPickPlaceActivity ( Location location ) { </a> 0
<a> PlacePickerApplication application = ( PlacePickerApplication ) getApplication ( ) ; </a> 0
<a> application . setSelectedPlace ( null ) ; </a> 0
<a> Intent intent = new Intent ( this , PickPlaceActivity . class ) ; </a> 0
<a> PickPlaceActivity . populateParameters ( intent , location , null ) ; </a> 0
<a> startActivityForResult ( intent , PLACE_ACTIVITY ) ; </a> 0
<a> } </a> 0
<a> private void onClickSeattle ( ) { </a> 0
<a> try { </a> 0
<a> startPickPlaceActivity ( SEATTLE_LOCATION ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onClickSanFrancisco ( ) { </a> 0
<a> try { </a> 0
<a> startPickPlaceActivity ( SAN_FRANCISCO_LOCATION ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onClickGPS ( ) { </a> 0
<a> try { </a> 0
<a> if ( lastKnownLocation == null ) { </a> 0
<a> Criteria criteria = new Criteria ( ) ; </a> 0
<a> String bestProvider = locationManager . getBestProvider ( criteria , false ) ; </a> 0
<a> if ( bestProvider != null ) { </a> 0
<a> lastKnownLocation = locationManager . getLastKnownLocation ( bestProvider ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( lastKnownLocation == null ) { </a> 0
<a> String model = android . os . Build . MODEL ; </a> 0
<a> if ( model . equals ( "sdk" ) || model . equals ( "google_sdk" ) || model . contains ( "x86" ) ) { </a> 0
<a> lastKnownLocation = PARIS_LOCATION ; </a> 0
<a> } else { </a> 0
<a> new AlertDialog . Builder ( this ) </a> 1
<a> . setTitle ( R . string . error_dialog_title ) </a> 1
<a> . setMessage ( R . string . no_location ) </a> 1
<a> . setPositiveButton ( R . string . ok_button , null ) </a> 1
<a> . show ( ) ; </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> startPickPlaceActivity ( lastKnownLocation ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . profilepicture ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> public class ProfilePictureSampleActivity extends FragmentActivity { </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . activity_profile_picture_sample ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . scrumptious ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . graphics . drawable . Drawable ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . BaseAdapter ; </a> 0
<a> import com . facebook . model . OpenGraphAction ; </a> 0
<a> public abstract class BaseListElement { </a> 0
<a> private Drawable icon ; </a> 0
<a> private String text1 ; </a> 0
<a> private String text2 ; </a> 0
<a> private BaseAdapter adapter ; </a> 0
<a> private int requestCode ; </a> 0
<a> public BaseListElement ( Drawable icon , String text1 , String text2 , int requestCode ) { </a> 0
<a> this . icon = icon ; </a> 0
<a> this . text1 = text1 ; </a> 0
<a> this . text2 = text2 ; </a> 0
<a> this . requestCode = requestCode ; </a> 0
<a> } </a> 0
<a> public void setAdapter ( BaseAdapter adapter ) { </a> 0
<a> this . adapter = adapter ; </a> 0
<a> } </a> 0
<a> public Drawable getIcon ( ) { </a> 0
<a> return icon ; </a> 0
<a> } </a> 0
<a> public String getText1 ( ) { </a> 0
<a> return text1 ; </a> 0
<a> } </a> 0
<a> public String getText2 ( ) { </a> 0
<a> return text2 ; </a> 0
<a> } </a> 0
<a> public int getRequestCode ( ) { </a> 0
<a> return requestCode ; </a> 0
<a> } </a> 0
<a> public void setText1 ( String text1 ) { </a> 0
<a> this . text1 = text1 ; </a> 0
<a> if ( adapter != null ) { </a> 0
<a> adapter . notifyDataSetChanged ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setText2 ( String text2 ) { </a> 0
<a> this . text2 = text2 ; </a> 0
<a> if ( adapter != null ) { </a> 0
<a> adapter . notifyDataSetChanged ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> protected abstract View . OnClickListener getOnClickListener ( ) ; </a> 0
<a> protected abstract void populateOGAction ( OpenGraphAction action ) ; </a> 0
<a> protected void onActivityResult ( Intent data ) { } </a> 0
<a> protected void onSaveInstanceState ( Bundle bundle ) { } </a> 0
<a> protected boolean restoreState ( Bundle savedState ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> protected void notifyDataChanged ( ) { </a> 0
<a> adapter . notifyDataSetChanged ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . scrumptious ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . graphics . Rect ; </a> 0
<a> import android . util . AttributeSet ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . ListAdapter ; </a> 0
<a> import android . widget . ListView ; </a> 0
<a> public class FullListView extends ListView { </a> 0
<a> public FullListView ( Context context ) { </a> 0
<a> super ( context ) ; </a> 0
<a> } </a> 0
<a> public FullListView ( Context context , AttributeSet attributeSet ) { </a> 0
<a> super ( context , attributeSet ) ; </a> 0
<a> } </a> 0
<a> public FullListView ( Context context , AttributeSet attributeSet , int defStyle ) { </a> 0
<a> super ( context , attributeSet , defStyle ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { </a> 0
<a> super . onMeasure ( widthMeasureSpec , heightMeasureSpec ) ; </a> 0
<a> int width = getMeasuredWidth ( ) ; </a> 0
<a> int height = 0 ; </a> 0
<a> ListAdapter adapter = getAdapter ( ) ; </a> 0
<a> int count = adapter . getCount ( ) ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> View childView = adapter . getView ( i , null , this ) ; </a> 0
<a> childView . measure ( MeasureSpec . makeMeasureSpec ( 0 , MeasureSpec . UNSPECIFIED ) , </a> 0
<a> MeasureSpec . makeMeasureSpec ( 0 , MeasureSpec . UNSPECIFIED ) ) ; </a> 0
<a> height += childView . getMeasuredHeight ( ) ; </a> 0
<a> } </a> 0
<a> Rect bgPadding = new Rect ( ) ; </a> 0
<a> getBackground ( ) . getPadding ( bgPadding ) ; </a> 0
<a> height += ( count - 1 ) * getDividerHeight ( ) + bgPadding . top + bgPadding . bottom ; </a> 0
<a> setMeasuredDimension ( width , height ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . scrumptious ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> import android . support . v4 . app . FragmentManager ; </a> 0
<a> import android . support . v4 . app . FragmentTransaction ; </a> 0
<a> import android . view . Menu ; </a> 0
<a> import android . view . MenuItem ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> import com . facebook . UiLifecycleHelper ; </a> 0
<a> public class MainActivity extends FragmentActivity { </a> 0
<a> private static final int SPLASH = 0 ; </a> 0
<a> private static final int SELECTION = 1 ; </a> 0
<a> private static final int SETTINGS = 2 ; </a> 0
<a> private static final int FRAGMENT_COUNT = SETTINGS + 1 ; </a> 0
<a> private Fragment [ ] fragments = new Fragment [ FRAGMENT_COUNT ] ; </a> 0
<a> private MenuItem settings ; </a> 0
<a> private boolean isResumed = false ; </a> 0
<a> private UiLifecycleHelper uiHelper ; </a> 0
<a> private Session . StatusCallback callback = new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> onSessionStateChange ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> uiHelper = new UiLifecycleHelper ( this , callback ) ; </a> 0
<a> uiHelper . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . main ) ; </a> 0
<a> FragmentManager fm = getSupportFragmentManager ( ) ; </a> 0
<a> fragments [ SPLASH ] = fm . findFragmentById ( R . id . splashFragment ) ; </a> 0
<a> fragments [ SELECTION ] = fm . findFragmentById ( R . id . selectionFragment ) ; </a> 0
<a> fragments [ SETTINGS ] = fm . findFragmentById ( R . id . userSettingsFragment ) ; </a> 0
<a> FragmentTransaction transaction = fm . beginTransaction ( ) ; </a> 0
<a> for ( int i = 0 ; i < fragments . length ; i ++ ) { </a> 0
<a> transaction . hide ( fragments [ i ] ) ; </a> 0
<a> } </a> 0
<a> transaction . commit ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onResume ( ) { </a> 0
<a> super . onResume ( ) ; </a> 0
<a> uiHelper . onResume ( ) ; </a> 0
<a> isResumed = true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onPause ( ) { </a> 0
<a> super . onPause ( ) ; </a> 0
<a> uiHelper . onPause ( ) ; </a> 0
<a> isResumed = false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> uiHelper . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onDestroy ( ) { </a> 0
<a> super . onDestroy ( ) ; </a> 0
<a> uiHelper . onDestroy ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> uiHelper . onSaveInstanceState ( outState ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onResumeFragments ( ) { </a> 0
<a> super . onResumeFragments ( ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && session . isOpened ( ) ) { </a> 0
<a> showFragment ( SELECTION , false ) ; </a> 0
<a> } else { </a> 0
<a> showFragment ( SPLASH , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean onPrepareOptionsMenu ( Menu menu ) { </a> 0
<a> if ( fragments [ SELECTION ] . isVisible ( ) ) { </a> 0
<a> if ( menu . size ( ) == 0 ) { </a> 0
<a> settings = menu . add ( R . string . settings ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } else { </a> 0
<a> menu . clear ( ) ; </a> 0
<a> settings = null ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean onOptionsItemSelected ( MenuItem item ) { </a> 0
<a> if ( item . equals ( settings ) ) { </a> 0
<a> showFragment ( SETTINGS , true ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private void onSessionStateChange ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( isResumed ) { </a> 0
<a> FragmentManager manager = getSupportFragmentManager ( ) ; </a> 0
<a> int backStackSize = manager . getBackStackEntryCount ( ) ; </a> 0
<a> for ( int i = 0 ; i < backStackSize ; i ++ ) { </a> 0
<a> manager . popBackStack ( ) ; </a> 0
<a> } </a> 0
<a> if ( state . equals ( SessionState . OPENED ) ) { </a> 0
<a> showFragment ( SELECTION , false ) ; </a> 0
<a> } else if ( state . isClosed ( ) ) { </a> 0
<a> showFragment ( SPLASH , false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void showFragment ( int fragmentIndex , boolean addToBackStack ) { </a> 0
<a> FragmentManager fm = getSupportFragmentManager ( ) ; </a> 0
<a> FragmentTransaction transaction = fm . beginTransaction ( ) ; </a> 0
<a> for ( int i = 0 ; i < fragments . length ; i ++ ) { </a> 0
<a> if ( i == fragmentIndex ) { </a> 0
<a> transaction . show ( fragments [ i ] ) ; </a> 0
<a> } else { </a> 0
<a> transaction . hide ( fragments [ i ] ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( addToBackStack ) { </a> 0
<a> transaction . addToBackStack ( null ) ; </a> 0
<a> } </a> 0
<a> transaction . commit ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . scrumptious ; </a> 0
<a> import android . app . AlertDialog ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . location . Criteria ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . location . LocationListener ; </a> 0
<a> import android . location . LocationManager ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . os . Build ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Looper ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> import android . support . v4 . app . FragmentManager ; </a> 0
<a> import com . facebook . FacebookException ; </a> 0
<a> import com . facebook . widget . FriendPickerFragment ; </a> 0
<a> import com . facebook . widget . PickerFragment ; </a> 0
<a> import com . facebook . widget . PlacePickerFragment ; </a> 0
<a> public class PickerActivity extends FragmentActivity { </a> 0
<a> public static final Uri FRIEND_PICKER = Uri . parse ( "picker://friend" ) ; </a> 0
<a> public static final Uri PLACE_PICKER = Uri . parse ( "picker://place" ) ; </a> 0
<a> private static final int SEARCH_RADIUS_METERS = 1000 ; </a> 0
<a> private static final int SEARCH_RESULT_LIMIT = 50 ; </a> 0
<a> private static final String SEARCH_TEXT = "Restaurant" ; </a> 0
<a> private static final int LOCATION_CHANGE_THRESHOLD = 50 ; </a> 0
<a> private static final Location SAN_FRANCISCO_LOCATION = new Location ( "" ) { { </a> 0
<a> setLatitude ( 37.7750 ) ; </a> 0
<a> setLongitude ( - 122.4183 ) ; </a> 0
<a> } } ; </a> 0
<a> private FriendPickerFragment friendPickerFragment ; </a> 0
<a> private PlacePickerFragment placePickerFragment ; </a> 0
<a> private LocationListener locationListener ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . pickers ) ; </a> 0
<a> Bundle args = getIntent ( ) . getExtras ( ) ; </a> 0
<a> FragmentManager manager = getSupportFragmentManager ( ) ; </a> 0
<a> Fragment fragmentToShow = null ; </a> 0
<a> Uri intentUri = getIntent ( ) . getData ( ) ; </a> 0
<a> if ( FRIEND_PICKER . equals ( intentUri ) ) { </a> 0
<a> if ( savedInstanceState == null ) { </a> 0
<a> friendPickerFragment = new FriendPickerFragment ( args ) ; </a> 0
<a> } else { </a> 0
<a> friendPickerFragment = ( FriendPickerFragment ) manager . findFragmentById ( R . id . picker_fragment ) ; ; </a> 0
<a> } </a> 0
<a> friendPickerFragment . setOnErrorListener ( new PickerFragment . OnErrorListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> PickerActivity . this . onError ( error ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> friendPickerFragment . setOnDoneButtonClickedListener ( new PickerFragment . OnDoneButtonClickedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onDoneButtonClicked ( PickerFragment < ? > fragment ) { </a> 0
<a> finishActivity ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragmentToShow = friendPickerFragment ; </a> 0
<a> } else if ( PLACE_PICKER . equals ( intentUri ) ) { </a> 0
<a> if ( savedInstanceState == null ) { </a> 0
<a> placePickerFragment = new PlacePickerFragment ( args ) ; </a> 0
<a> } else { </a> 0
<a> placePickerFragment = ( PlacePickerFragment ) manager . findFragmentById ( R . id . picker_fragment ) ; </a> 0
<a> } </a> 0
<a> placePickerFragment . setOnSelectionChangedListener ( new PickerFragment . OnSelectionChangedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onSelectionChanged ( PickerFragment < ? > fragment ) { </a> 0
<a> finishActivity ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> placePickerFragment . setOnErrorListener ( new PickerFragment . OnErrorListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> PickerActivity . this . onError ( error ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> placePickerFragment . setOnDoneButtonClickedListener ( new PickerFragment . OnDoneButtonClickedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onDoneButtonClicked ( PickerFragment < ? > fragment ) { </a> 0
<a> finishActivity ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> fragmentToShow = placePickerFragment ; </a> 0
<a> } else { </a> 0
<a> setResult ( RESULT_CANCELED ) ; </a> 0
<a> finish ( ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> manager . beginTransaction ( ) . replace ( R . id . picker_fragment , fragmentToShow ) . commit ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onStart ( ) { </a> 0
<a> super . onStart ( ) ; </a> 0
<a> if ( FRIEND_PICKER . equals ( getIntent ( ) . getData ( ) ) ) { </a> 0
<a> try { </a> 0
<a> friendPickerFragment . loadData ( false ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } else if ( PLACE_PICKER . equals ( getIntent ( ) . getData ( ) ) ) { </a> 0
<a> try { </a> 0
<a> Location location = null ; </a> 0
<a> Criteria criteria = new Criteria ( ) ; </a> 0
<a> LocationManager locationManager = ( LocationManager ) getSystemService ( Context . LOCATION_SERVICE ) ; </a> 0
<a> String bestProvider = locationManager . getBestProvider ( criteria , false ) ; </a> 0
<a> if ( bestProvider != null ) { </a> 0
<a> location = locationManager . getLastKnownLocation ( bestProvider ) ; </a> 0
<a> if ( locationManager . isProviderEnabled ( bestProvider ) && locationListener == null ) { </a> 0
<a> locationListener = new LocationListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onLocationChanged ( Location location ) { </a> 0
<a> float distance = location . distanceTo ( placePickerFragment . getLocation ( ) ) ; </a> 0
<a> if ( distance >= LOCATION_CHANGE_THRESHOLD ) { </a> 0
<a> placePickerFragment . setLocation ( location ) ; </a> 0
<a> placePickerFragment . loadData ( true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onStatusChanged ( String s , int i , Bundle bundle ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onProviderEnabled ( String s ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onProviderDisabled ( String s ) { </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> locationManager . requestLocationUpdates ( bestProvider , 1 , LOCATION_CHANGE_THRESHOLD , </a> 0
<a> locationListener , Looper . getMainLooper ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( location == null ) { </a> 0
<a> String model = Build . MODEL ; </a> 0
<a> if ( model . equals ( "sdk" ) || model . equals ( "google_sdk" ) || model . contains ( "x86" ) ) { </a> 0
<a> location = SAN_FRANCISCO_LOCATION ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( location != null ) { </a> 0
<a> placePickerFragment . setLocation ( location ) ; </a> 0
<a> placePickerFragment . setRadiusInMeters ( SEARCH_RADIUS_METERS ) ; </a> 0
<a> placePickerFragment . setSearchText ( SEARCH_TEXT ) ; </a> 0
<a> placePickerFragment . setResultsLimit ( SEARCH_RESULT_LIMIT ) ; </a> 0
<a> placePickerFragment . loadData ( false ) ; </a> 0
<a> } else { </a> 0
<a> onError ( getResources ( ) . getString ( R . string . no_location_error ) , true ) ; </a> 0
<a> } </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> onError ( ex ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onStop ( ) { </a> 0
<a> super . onStop ( ) ; </a> 0
<a> if ( locationListener != null ) { </a> 0
<a> LocationManager locationManager = ( LocationManager ) getSystemService ( Context . LOCATION_SERVICE ) ; </a> 0
<a> locationManager . removeUpdates ( locationListener ) ; </a> 0
<a> locationListener = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onError ( Exception error ) { </a> 0
<a> onError ( error . getLocalizedMessage ( ) , false ) ; </a> 1
<a> } </a> 0
<a> private void onError ( String error , final boolean finishActivity ) { </a> 0
<a> AlertDialog . Builder builder = new AlertDialog . Builder ( this ) ; </a> 0
<a> builder . setTitle ( R . string . error_dialog_title ) . </a> 0
<a> setMessage ( error ) . </a> 0
<a> setPositiveButton ( R . string . error_dialog_button_text , new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialogInterface , int i ) { </a> 0
<a> if ( finishActivity ) { </a> 0
<a> finishActivity ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> builder . show ( ) ; </a> 0
<a> } </a> 0
<a> private void finishActivity ( ) { </a> 0
<a> ScrumptiousApplication app = ( ScrumptiousApplication ) getApplication ( ) ; </a> 0
<a> if ( FRIEND_PICKER . equals ( getIntent ( ) . getData ( ) ) ) { </a> 0
<a> if ( friendPickerFragment != null ) { </a> 0
<a> app . setSelectedUsers ( friendPickerFragment . getSelection ( ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( PLACE_PICKER . equals ( getIntent ( ) . getData ( ) ) ) { </a> 0
<a> if ( placePickerFragment != null ) { </a> 0
<a> app . setSelectedPlace ( placePickerFragment . getSelection ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> setResult ( RESULT_OK , null ) ; </a> 0
<a> finish ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . scrumptious ; </a> 0
<a> import android . app . Application ; </a> 0
<a> import com . facebook . model . GraphPlace ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class ScrumptiousApplication extends Application { </a> 0
<a> private List < GraphUser > selectedUsers ; </a> 0
<a> private GraphPlace selectedPlace ; </a> 0
<a> public List < GraphUser > getSelectedUsers ( ) { </a> 0
<a> return selectedUsers ; </a> 0
<a> } </a> 0
<a> public void setSelectedUsers ( List < GraphUser > users ) { </a> 0
<a> selectedUsers = users ; </a> 0
<a> } </a> 0
<a> public GraphPlace getSelectedPlace ( ) { </a> 0
<a> return selectedPlace ; </a> 0
<a> } </a> 0
<a> public void setSelectedPlace ( GraphPlace place ) { </a> 0
<a> this . selectedPlace = place ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . scrumptious ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . app . AlertDialog ; </a> 0
<a> import android . app . ProgressDialog ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . DialogInterface ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . os . AsyncTask ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . * ; </a> 0
<a> import com . facebook . widget . ProfilePictureView ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class SelectionFragment extends Fragment { </a> 0
<a> private static final String TAG = "SelectionFragment" ; </a> 0
<a> private static final String POST_ACTION_PATH = "me/fb_sample_scrumps:eat" ; </a> 0
<a> private static final String PENDING_ANNOUNCE_KEY = "pendingAnnounce" ; </a> 0
<a> private static final Uri M_FACEBOOK_URL = Uri . parse ( "http://m.facebook.com" ) ; </a> 0
<a> private static final int REAUTH_ACTIVITY_CODE = 100 ; </a> 0
<a> private static final List < String > PERMISSIONS = Arrays . asList ( "publish_actions" ) ; </a> 0
<a> private Button announceButton ; </a> 0
<a> private ListView listView ; </a> 0
<a> private ProgressDialog progressDialog ; </a> 0
<a> private List < BaseListElement > listElements ; </a> 0
<a> private ProfilePictureView profilePictureView ; </a> 0
<a> private TextView userNameView ; </a> 0
<a> private boolean pendingAnnounce ; </a> 0
<a> private UiLifecycleHelper uiHelper ; </a> 0
<a> private Session . StatusCallback callback = new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void call ( final Session session , final SessionState state , final Exception exception ) { </a> 0
<a> onSessionStateChange ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> uiHelper = new UiLifecycleHelper ( getActivity ( ) , callback ) ; </a> 0
<a> uiHelper . onCreate ( savedInstanceState ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onResume ( ) { </a> 0
<a> super . onResume ( ) ; </a> 0
<a> uiHelper . onResume ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { </a> 0
<a> super . onCreateView ( inflater , container , savedInstanceState ) ; </a> 0
<a> View view = inflater . inflate ( R . layout . selection , container , false ) ; </a> 0
<a> profilePictureView = ( ProfilePictureView ) view . findViewById ( R . id . selection_profile_pic ) ; </a> 0
<a> profilePictureView . setCropped ( true ) ; </a> 0
<a> userNameView = ( TextView ) view . findViewById ( R . id . selection_user_name ) ; </a> 0
<a> announceButton = ( Button ) view . findViewById ( R . id . announce_button ) ; </a> 0
<a> listView = ( ListView ) view . findViewById ( R . id . selection_list ) ; </a> 0
<a> announceButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> handleAnnounce ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> init ( savedInstanceState ) ; </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> if ( requestCode == REAUTH_ACTIVITY_CODE ) { </a> 0
<a> uiHelper . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } else if ( resultCode == Activity . RESULT_OK && requestCode >= 0 && requestCode < listElements . size ( ) ) { </a> 0
<a> listElements . get ( requestCode ) . onActivityResult ( data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle bundle ) { </a> 0
<a> super . onSaveInstanceState ( bundle ) ; </a> 0
<a> for ( BaseListElement listElement : listElements ) { </a> 0
<a> listElement . onSaveInstanceState ( bundle ) ; </a> 0
<a> } </a> 0
<a> bundle . putBoolean ( PENDING_ANNOUNCE_KEY , pendingAnnounce ) ; </a> 0
<a> uiHelper . onSaveInstanceState ( bundle ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onPause ( ) { </a> 0
<a> super . onPause ( ) ; </a> 0
<a> uiHelper . onPause ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onDestroy ( ) { </a> 0
<a> super . onDestroy ( ) ; </a> 0
<a> uiHelper . onDestroy ( ) ; </a> 0
<a> } </a> 0
<a> private void tokenUpdated ( ) { </a> 0
<a> if ( pendingAnnounce ) { </a> 0
<a> handleAnnounce ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onSessionStateChange ( final Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( session != null && session . isOpened ( ) ) { </a> 0
<a> if ( state . equals ( SessionState . OPENED_TOKEN_UPDATED ) ) { </a> 0
<a> tokenUpdated ( ) ; </a> 0
<a> } else { </a> 0
<a> makeMeRequest ( session ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void makeMeRequest ( final Session session ) { </a> 0
<a> Request request = Request . newMeRequest ( session , new Request . GraphUserCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( GraphUser user , Response response ) { </a> 0
<a> if ( session == Session . getActiveSession ( ) ) { </a> 0
<a> if ( user != null ) { </a> 0
<a> profilePictureView . setProfileId ( user . getId ( ) ) ; </a> 0
<a> userNameView . setText ( user . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( response . getError ( ) != null ) { </a> 0
<a> handleError ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> request . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> private void init ( Bundle savedInstanceState ) { </a> 0
<a> announceButton . setEnabled ( false ) ; </a> 0
<a> listElements = new ArrayList < BaseListElement > ( ) ; </a> 0
<a> listElements . add ( new EatListElement ( 0 ) ) ; </a> 0
<a> listElements . add ( new LocationListElement ( 1 ) ) ; </a> 0
<a> listElements . add ( new PeopleListElement ( 2 ) ) ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> for ( BaseListElement listElement : listElements ) { </a> 0
<a> listElement . restoreState ( savedInstanceState ) ; </a> 0
<a> } </a> 0
<a> pendingAnnounce = savedInstanceState . getBoolean ( PENDING_ANNOUNCE_KEY , false ) ; </a> 0
<a> } </a> 0
<a> listView . setAdapter ( new ActionListAdapter ( getActivity ( ) , R . id . selection_list , listElements ) ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && session . isOpened ( ) ) { </a> 0
<a> makeMeRequest ( session ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void handleAnnounce ( ) { </a> 0
<a> pendingAnnounce = false ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session == null || ! session . isOpened ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> List < String > permissions = session . getPermissions ( ) ; </a> 0
<a> if ( ! permissions . containsAll ( PERMISSIONS ) ) { </a> 0
<a> pendingAnnounce = true ; </a> 0
<a> requestPublishPermissions ( session ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> progressDialog = ProgressDialog . show ( getActivity ( ) , "" , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . progress_dialog_text ) , true ) ; </a> 0
<a> AsyncTask < Void , Void , Response > task = new AsyncTask < Void , Void , Response > ( ) { </a> 0
<a> @ Override </a> 0
<a> protected Response doInBackground ( Void ... voids ) { </a> 0
<a> EatAction eatAction = GraphObject . Factory . create ( EatAction . class ) ; </a> 0
<a> for ( BaseListElement element : listElements ) { </a> 0
<a> element . populateOGAction ( eatAction ) ; </a> 0
<a> } </a> 0
<a> Request request = new Request ( Session . getActiveSession ( ) , </a> 0
<a> POST_ACTION_PATH , null , HttpMethod . POST ) ; </a> 0
<a> request . setGraphObject ( eatAction ) ; </a> 0
<a> return request . executeAndWait ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onPostExecute ( Response response ) { </a> 0
<a> onPostActionResponse ( response ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> task . execute ( ) ; </a> 0
<a> } </a> 0
<a> private void requestPublishPermissions ( Session session ) { </a> 0
<a> if ( session != null ) { </a> 0
<a> Session . NewPermissionsRequest newPermissionsRequest = new Session . NewPermissionsRequest ( this , PERMISSIONS ) </a> 0
<a> . setDefaultAudience ( SessionDefaultAudience . FRIENDS ) </a> 0
<a> . setRequestCode ( REAUTH_ACTIVITY_CODE ) ; </a> 0
<a> session . requestNewPublishPermissions ( newPermissionsRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onPostActionResponse ( Response response ) { </a> 0
<a> if ( progressDialog != null ) { </a> 0
<a> progressDialog . dismiss ( ) ; </a> 0
<a> progressDialog = null ; </a> 0
<a> } </a> 0
<a> if ( getActivity ( ) == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> PostResponse postResponse = response . getGraphObjectAs ( PostResponse . class ) ; </a> 0
<a> if ( postResponse != null && postResponse . getId ( ) != null ) { </a> 0
<a> String dialogBody = String . format ( getString ( R . string . result_dialog_text ) , postResponse . getId ( ) ) ; </a> 0
<a> new AlertDialog . Builder ( getActivity ( ) ) </a> 0
<a> . setPositiveButton ( R . string . result_dialog_button_text , null ) </a> 0
<a> . setTitle ( R . string . result_dialog_title ) </a> 0
<a> . setMessage ( dialogBody ) </a> 0
<a> . show ( ) ; </a> 0
<a> init ( null ) ; </a> 0
<a> } else { </a> 0
<a> handleError ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void handleError ( FacebookRequestError error ) { </a> 0
<a> DialogInterface . OnClickListener listener = null ; </a> 0
<a> String dialogBody = null ; </a> 0
<a> if ( error == null ) { </a> 0
<a> dialogBody = getString ( R . string . error_dialog_default_text ) ; </a> 0
<a> } else { </a> 0
<a> switch ( error . getCategory ( ) ) { </a> 0
<a> case AUTHENTICATION_RETRY : </a> 0
<a> String userAction = ( error . shouldNotifyUser ( ) ) ? "" : </a> 0
<a> getString ( error . getUserActionMessageId ( ) ) ; </a> 0
<a> dialogBody = getString ( R . string . error_authentication_retry , userAction ) ; </a> 0
<a> listener = new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialogInterface , int i ) { </a> 0
<a> Intent intent = new Intent ( Intent . ACTION_VIEW , M_FACEBOOK_URL ) ; </a> 0
<a> startActivity ( intent ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> break ; </a> 0
<a> case AUTHENTICATION_REOPEN_SESSION : </a> 0
<a> dialogBody = getString ( R . string . error_authentication_reopen ) ; </a> 0
<a> listener = new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialogInterface , int i ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && ! session . isClosed ( ) ) { </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> break ; </a> 0
<a> case PERMISSION : </a> 0
<a> dialogBody = getString ( R . string . error_permission ) ; </a> 0
<a> listener = new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialogInterface , int i ) { </a> 0
<a> pendingAnnounce = true ; </a> 0
<a> requestPublishPermissions ( Session . getActiveSession ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> break ; </a> 0
<a> case SERVER : </a> 0
<a> case THROTTLING : </a> 0
<a> dialogBody = getString ( R . string . error_server ) ; </a> 0
<a> break ; </a> 0
<a> case BAD_REQUEST : </a> 0
<a> dialogBody = getString ( R . string . error_bad_request , error . getErrorMessage ( ) ) ; </a> 0
<a> break ; </a> 0
<a> case OTHER : </a> 0
<a> case CLIENT : </a> 0
<a> default : </a> 0
<a> dialogBody = getString ( R . string . error_unknown , error . getErrorMessage ( ) ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> new AlertDialog . Builder ( getActivity ( ) ) </a> 0
<a> . setPositiveButton ( R . string . error_dialog_button_text , listener ) </a> 0
<a> . setTitle ( R . string . error_dialog_title ) </a> 0
<a> . setMessage ( dialogBody ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> private void startPickerActivity ( Uri data , int requestCode ) { </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . setData ( data ) ; </a> 0
<a> intent . setClass ( getActivity ( ) , PickerActivity . class ) ; </a> 0
<a> startActivityForResult ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> private interface MealGraphObject extends GraphObject { </a> 0
<a> public String getUrl ( ) ; </a> 0
<a> public void setUrl ( String url ) ; </a> 0
<a> public String getId ( ) ; </a> 0
<a> public void setId ( String id ) ; </a> 0
<a> } </a> 0
<a> private interface EatAction extends OpenGraphAction { </a> 0
<a> public MealGraphObject getMeal ( ) ; </a> 0
<a> public void setMeal ( MealGraphObject meal ) ; </a> 0
<a> } </a> 0
<a> private interface PostResponse extends GraphObject { </a> 0
<a> String getId ( ) ; </a> 0
<a> } </a> 0
<a> private class EatListElement extends BaseListElement { </a> 0
<a> private static final String FOOD_KEY = "food" ; </a> 0
<a> private static final String FOOD_URL_KEY = "food_url" ; </a> 0
<a> private final String [ ] foodChoices ; </a> 0
<a> private final String [ ] foodUrls ; </a> 0
<a> private String foodChoiceUrl = null ; </a> 0
<a> private String foodChoice = null ; </a> 0
<a> public EatListElement ( int requestCode ) { </a> 0
<a> super ( getActivity ( ) . getResources ( ) . getDrawable ( R . drawable . action_eating ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . action_eating ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . action_eating_default ) , </a> 0
<a> requestCode ) ; </a> 0
<a> foodChoices = getActivity ( ) . getResources ( ) . getStringArray ( R . array . food_types ) ; </a> 0
<a> foodUrls = getActivity ( ) . getResources ( ) . getStringArray ( R . array . food_og_urls ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected View . OnClickListener getOnClickListener ( ) { </a> 0
<a> return new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> showMealOptions ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void populateOGAction ( OpenGraphAction action ) { </a> 0
<a> if ( foodChoiceUrl != null ) { </a> 0
<a> EatAction eatAction = action . cast ( EatAction . class ) ; </a> 0
<a> MealGraphObject meal = GraphObject . Factory . create ( MealGraphObject . class ) ; </a> 0
<a> meal . setUrl ( foodChoiceUrl ) ; </a> 0
<a> eatAction . setMeal ( meal ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle bundle ) { </a> 0
<a> if ( foodChoice != null && foodChoiceUrl != null ) { </a> 0
<a> bundle . putString ( FOOD_KEY , foodChoice ) ; </a> 0
<a> bundle . putString ( FOOD_URL_KEY , foodChoiceUrl ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean restoreState ( Bundle savedState ) { </a> 0
<a> String food = savedState . getString ( FOOD_KEY ) ; </a> 0
<a> String foodUrl = savedState . getString ( FOOD_URL_KEY ) ; </a> 0
<a> if ( food != null && foodUrl != null ) { </a> 0
<a> foodChoice = food ; </a> 0
<a> foodChoiceUrl = foodUrl ; </a> 0
<a> setFoodText ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private void showMealOptions ( ) { </a> 0
<a> String title = getActivity ( ) . getResources ( ) . getString ( R . string . select_meal ) ; </a> 0
<a> AlertDialog . Builder builder = new AlertDialog . Builder ( getActivity ( ) ) ; </a> 0
<a> builder . setTitle ( title ) . </a> 0
<a> setCancelable ( true ) . </a> 0
<a> setItems ( foodChoices , new DialogInterface . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( DialogInterface dialogInterface , int i ) { </a> 0
<a> foodChoice = foodChoices [ i ] ; </a> 0
<a> foodChoiceUrl = foodUrls [ i ] ; </a> 0
<a> setFoodText ( ) ; </a> 0
<a> notifyDataChanged ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> builder . show ( ) ; </a> 0
<a> } </a> 0
<a> private void setFoodText ( ) { </a> 0
<a> if ( foodChoice != null && foodChoiceUrl != null ) { </a> 0
<a> setText2 ( foodChoice ) ; </a> 0
<a> announceButton . setEnabled ( true ) ; </a> 0
<a> } else { </a> 0
<a> setText2 ( getActivity ( ) . getResources ( ) . getString ( R . string . action_eating_default ) ) ; </a> 0
<a> announceButton . setEnabled ( false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class PeopleListElement extends BaseListElement { </a> 0
<a> private static final String FRIENDS_KEY = "friends" ; </a> 0
<a> private List < GraphUser > selectedUsers ; </a> 0
<a> public PeopleListElement ( int requestCode ) { </a> 0
<a> super ( getActivity ( ) . getResources ( ) . getDrawable ( R . drawable . action_people ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . action_people ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . action_people_default ) , </a> 0
<a> requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected View . OnClickListener getOnClickListener ( ) { </a> 0
<a> return new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> startPickerActivity ( PickerActivity . FRIEND_PICKER , getRequestCode ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( Intent data ) { </a> 0
<a> selectedUsers = ( ( ScrumptiousApplication ) getActivity ( ) . getApplication ( ) ) . getSelectedUsers ( ) ; </a> 0
<a> setUsersText ( ) ; </a> 0
<a> notifyDataChanged ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void populateOGAction ( OpenGraphAction action ) { </a> 0
<a> if ( selectedUsers != null ) { </a> 0
<a> action . setTags ( selectedUsers ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle bundle ) { </a> 0
<a> if ( selectedUsers != null ) { </a> 0
<a> bundle . putByteArray ( FRIENDS_KEY , getByteArray ( selectedUsers ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean restoreState ( Bundle savedState ) { </a> 0
<a> byte [ ] bytes = savedState . getByteArray ( FRIENDS_KEY ) ; </a> 0
<a> if ( bytes != null ) { </a> 0
<a> selectedUsers = restoreByteArray ( bytes ) ; </a> 0
<a> setUsersText ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private void setUsersText ( ) { </a> 0
<a> String text = null ; </a> 0
<a> if ( selectedUsers != null ) { </a> 0
<a> if ( selectedUsers . size ( ) == 1 ) { </a> 0
<a> text = String . format ( getResources ( ) . getString ( R . string . single_user_selected ) , </a> 0
<a> selectedUsers . get ( 0 ) . getName ( ) ) ; </a> 0
<a> } else if ( selectedUsers . size ( ) == 2 ) { </a> 0
<a> text = String . format ( getResources ( ) . getString ( R . string . two_users_selected ) , </a> 0
<a> selectedUsers . get ( 0 ) . getName ( ) , selectedUsers . get ( 1 ) . getName ( ) ) ; </a> 0
<a> } else if ( selectedUsers . size ( ) > 2 ) { </a> 0
<a> text = String . format ( getResources ( ) . getString ( R . string . multiple_users_selected ) , </a> 0
<a> selectedUsers . get ( 0 ) . getName ( ) , ( selectedUsers . size ( ) - 1 ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( text == null ) { </a> 0
<a> text = getResources ( ) . getString ( R . string . action_people_default ) ; </a> 0
<a> } </a> 0
<a> setText2 ( text ) ; </a> 0
<a> } </a> 0
<a> private byte [ ] getByteArray ( List < GraphUser > users ) { </a> 0
<a> List < String > usersAsString = new ArrayList < String > ( users . size ( ) ) ; </a> 0
<a> for ( GraphUser user : users ) { </a> 0
<a> usersAsString . add ( user . getInnerJSONObject ( ) . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; </a> 0
<a> new ObjectOutputStream ( outputStream ) . writeObject ( usersAsString ) ; </a> 0
<a> return outputStream . toByteArray ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> Log . e ( TAG , "Unable to serialize users." , e ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> private List < GraphUser > restoreByteArray ( byte [ ] bytes ) { </a> 0
<a> try { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> List < String > usersAsString = </a> 0
<a> ( List < String > ) ( new ObjectInputStream ( new ByteArrayInputStream ( bytes ) ) ) . readObject ( ) ; </a> 0
<a> if ( usersAsString != null ) { </a> 0
<a> List < GraphUser > users = new ArrayList < GraphUser > ( usersAsString . size ( ) ) ; </a> 0
<a> for ( String user : usersAsString ) { </a> 0
<a> GraphUser graphUser = GraphObject . Factory </a> 0
<a> . create ( new JSONObject ( user ) , GraphUser . class ) ; </a> 0
<a> users . add ( graphUser ) ; </a> 0
<a> } </a> 0
<a> return users ; </a> 0
<a> } </a> 0
<a> } catch ( ClassNotFoundException e ) { </a> 0
<a> Log . e ( TAG , "Unable to deserialize users." , e ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> Log . e ( TAG , "Unable to deserialize users." , e ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> Log . e ( TAG , "Unable to deserialize users." , e ) ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class LocationListElement extends BaseListElement { </a> 0
<a> private static final String PLACE_KEY = "place" ; </a> 0
<a> private GraphPlace selectedPlace = null ; </a> 0
<a> public LocationListElement ( int requestCode ) { </a> 0
<a> super ( getActivity ( ) . getResources ( ) . getDrawable ( R . drawable . action_location ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . action_location ) , </a> 0
<a> getActivity ( ) . getResources ( ) . getString ( R . string . action_location_default ) , </a> 0
<a> requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected View . OnClickListener getOnClickListener ( ) { </a> 0
<a> return new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> startPickerActivity ( PickerActivity . PLACE_PICKER , getRequestCode ( ) ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onActivityResult ( Intent data ) { </a> 0
<a> selectedPlace = ( ( ScrumptiousApplication ) getActivity ( ) . getApplication ( ) ) . getSelectedPlace ( ) ; </a> 0
<a> setPlaceText ( ) ; </a> 0
<a> notifyDataChanged ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void populateOGAction ( OpenGraphAction action ) { </a> 0
<a> if ( selectedPlace != null ) { </a> 0
<a> action . setPlace ( selectedPlace ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle bundle ) { </a> 0
<a> if ( selectedPlace != null ) { </a> 0
<a> bundle . putString ( PLACE_KEY , selectedPlace . getInnerJSONObject ( ) . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected boolean restoreState ( Bundle savedState ) { </a> 0
<a> String place = savedState . getString ( PLACE_KEY ) ; </a> 0
<a> if ( place != null ) { </a> 0
<a> try { </a> 0
<a> selectedPlace = GraphObject . Factory </a> 0
<a> . create ( new JSONObject ( place ) , GraphPlace . class ) ; </a> 0
<a> setPlaceText ( ) ; </a> 0
<a> return true ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> Log . e ( TAG , "Unable to deserialize place." , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private void setPlaceText ( ) { </a> 0
<a> String text = null ; </a> 0
<a> if ( selectedPlace != null ) { </a> 0
<a> text = selectedPlace . getName ( ) ; </a> 0
<a> } </a> 0
<a> if ( text == null ) { </a> 0
<a> text = getResources ( ) . getString ( R . string . action_location_default ) ; </a> 0
<a> } </a> 0
<a> setText2 ( text ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class ActionListAdapter extends ArrayAdapter < BaseListElement > { </a> 0
<a> private List < BaseListElement > listElements ; </a> 0
<a> public ActionListAdapter ( Context context , int resourceId , List < BaseListElement > listElements ) { </a> 0
<a> super ( context , resourceId , listElements ) ; </a> 0
<a> this . listElements = listElements ; </a> 0
<a> for ( int i = 0 ; i < listElements . size ( ) ; i ++ ) { </a> 0
<a> listElements . get ( i ) . setAdapter ( this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View getView ( int position , View convertView , ViewGroup parent ) { </a> 0
<a> View view = convertView ; </a> 0
<a> if ( view == null ) { </a> 0
<a> LayoutInflater inflater = </a> 0
<a> ( LayoutInflater ) getActivity ( ) . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; </a> 0
<a> view = inflater . inflate ( R . layout . listitem , null ) ; </a> 0
<a> } </a> 0
<a> BaseListElement listElement = listElements . get ( position ) ; </a> 0
<a> if ( listElement != null ) { </a> 0
<a> view . setOnClickListener ( listElement . getOnClickListener ( ) ) ; </a> 0
<a> ImageView icon = ( ImageView ) view . findViewById ( R . id . icon ) ; </a> 0
<a> TextView text1 = ( TextView ) view . findViewById ( R . id . text1 ) ; </a> 0
<a> TextView text2 = ( TextView ) view . findViewById ( R . id . text2 ) ; </a> 0
<a> if ( icon != null ) { </a> 0
<a> icon . setImageDrawable ( listElement . getIcon ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( text1 != null ) { </a> 0
<a> text1 . setText ( listElement . getText1 ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( text2 != null ) { </a> 0
<a> text2 . setText ( listElement . getText2 ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . scrumptious ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> public class SplashFragment extends Fragment { </a> 0
<a> @ Override </a> 0
<a> public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { </a> 0
<a> View view = inflater . inflate ( R . layout . splash , container , false ) ; </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . sessionlogin ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> public class LoginUsingCustomFragmentActivity extends FragmentActivity { </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . custom_fragment_activity ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . sessionlogin ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> import android . support . v4 . app . FragmentManager ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> import com . facebook . widget . UserSettingsFragment ; </a> 0
<a> public class LoginUsingLoginFragmentActivity extends FragmentActivity { </a> 0
<a> private UserSettingsFragment userSettingsFragment ; </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . login_fragment_activity ) ; </a> 0
<a> FragmentManager fragmentManager = getSupportFragmentManager ( ) ; </a> 0
<a> userSettingsFragment = ( UserSettingsFragment ) fragmentManager . findFragmentById ( R . id . login_fragment ) ; </a> 0
<a> userSettingsFragment . setSessionStatusCallback ( new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> Log . d ( "LoginUsingLoginFragmentActivity" , String . format ( "New session state: %s" , state . toString ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> userSettingsFragment . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . sessionlogin ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . LoggingBehavior ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> import com . facebook . Settings ; </a> 0
<a> public class SessionLoginFragment extends Fragment { </a> 0
<a> private static final String URL_PREFIX_FRIENDS = "https://graph.facebook.com/me/friends?access_token=" ; </a> 0
<a> private TextView textInstructionsOrLink ; </a> 0
<a> private Button buttonLoginLogout ; </a> 0
<a> private Session . StatusCallback statusCallback = new SessionStatusCallback ( ) ; </a> 0
<a> @ Override </a> 0
<a> public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { </a> 0
<a> View view = inflater . inflate ( R . layout . fragment , container , false ) ; </a> 0
<a> buttonLoginLogout = ( Button ) view . findViewById ( R . id . buttonLoginLogout ) ; </a> 0
<a> textInstructionsOrLink = ( TextView ) view . findViewById ( R . id . instructionsOrLink ) ; </a> 0
<a> Settings . addLoggingBehavior ( LoggingBehavior . INCLUDE_ACCESS_TOKENS ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session == null ) { </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> session = Session . restoreSession ( getActivity ( ) , null , statusCallback , savedInstanceState ) ; </a> 0
<a> } </a> 0
<a> if ( session == null ) { </a> 0
<a> session = new Session ( getActivity ( ) ) ; </a> 0
<a> } </a> 0
<a> Session . setActiveSession ( session ) ; </a> 0
<a> if ( session . getState ( ) . equals ( SessionState . CREATED_TOKEN_LOADED ) ) { </a> 0
<a> session . openForRead ( new Session . OpenRequest ( this ) . setCallback ( statusCallback ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> updateView ( ) ; </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onStart ( ) { </a> 0
<a> super . onStart ( ) ; </a> 0
<a> Session . getActiveSession ( ) . addCallback ( statusCallback ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onStop ( ) { </a> 0
<a> super . onStop ( ) ; </a> 0
<a> Session . getActiveSession ( ) . removeCallback ( statusCallback ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> Session . getActiveSession ( ) . onActivityResult ( getActivity ( ) , requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> Session . saveSession ( session , outState ) ; </a> 0
<a> } </a> 0
<a> private void updateView ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session . isOpened ( ) ) { </a> 0
<a> textInstructionsOrLink . setText ( URL_PREFIX_FRIENDS + session . getAccessToken ( ) ) ; </a> 0
<a> buttonLoginLogout . setText ( R . string . logout ) ; </a> 0
<a> buttonLoginLogout . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { onClickLogout ( ) ; } </a> 0
<a> } ) ; </a> 0
<a> } else { </a> 0
<a> textInstructionsOrLink . setText ( R . string . instructions ) ; </a> 0
<a> buttonLoginLogout . setText ( R . string . login ) ; </a> 0
<a> buttonLoginLogout . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { onClickLogin ( ) ; } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onClickLogin ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ! session . isOpened ( ) && ! session . isClosed ( ) ) { </a> 0
<a> session . openForRead ( new Session . OpenRequest ( this ) . setCallback ( statusCallback ) ) ; </a> 0
<a> } else { </a> 0
<a> Session . openActiveSession ( getActivity ( ) , this , true , statusCallback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onClickLogout ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ! session . isClosed ( ) ) { </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class SessionStatusCallback implements Session . StatusCallback { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> updateView ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . sessionlogin ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> public class SessionLoginSampleActivity extends Activity { </a> 0
<a> private Button buttonLoginActivity ; </a> 0
<a> private Button buttonCustomFragment ; </a> 0
<a> private Button buttonLoginFragment ; </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . main ) ; </a> 0
<a> buttonLoginActivity = ( Button ) findViewById ( R . id . buttonLoginActivity ) ; </a> 0
<a> buttonLoginActivity . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Intent intent = new Intent ( SessionLoginSampleActivity . this , LoginUsingActivityActivity . class ) ; </a> 0
<a> startActivity ( intent ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> buttonCustomFragment = ( Button ) findViewById ( R . id . buttonLoginCustomFragment ) ; </a> 0
<a> buttonCustomFragment . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Intent intent = new Intent ( SessionLoginSampleActivity . this , LoginUsingCustomFragmentActivity . class ) ; </a> 0
<a> startActivity ( intent ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> buttonLoginFragment = ( Button ) findViewById ( R . id . buttonLoginFragment ) ; </a> 0
<a> buttonLoginFragment . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Intent intent = new Intent ( SessionLoginSampleActivity . this , LoginUsingLoginFragmentActivity . class ) ; </a> 0
<a> startActivity ( intent ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . switchuser ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> import android . support . v4 . app . FragmentManager ; </a> 0
<a> import android . support . v4 . app . FragmentTransaction ; </a> 0
<a> import android . view . MenuItem ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> public class MainActivity extends FragmentActivity { </a> 0
<a> private static final String SHOWING_SETTINGS_KEY = "Showing settings" ; </a> 0
<a> private static final String TOKEN_CACHE_NAME_KEY = "TokenCacheName" ; </a> 0
<a> private ProfileFragment profileFragment ; </a> 0
<a> private SettingsFragment settingsFragment ; </a> 0
<a> private boolean isShowingSettings ; </a> 0
<a> private Slot currentSlot ; </a> 0
<a> private Session currentSession ; </a> 0
<a> private Session . StatusCallback sessionStatusCallback ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . main ) ; </a> 0
<a> restoreFragments ( savedInstanceState ) ; </a> 0
<a> sessionStatusCallback = new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> onSessionStateChange ( session , state , exception ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> if ( savedInstanceState . getBoolean ( SHOWING_SETTINGS_KEY ) ) { </a> 0
<a> showSettings ( ) ; </a> 0
<a> } else { </a> 0
<a> showProfile ( ) ; </a> 0
<a> } </a> 0
<a> SharedPreferencesTokenCachingStrategy restoredCache = new SharedPreferencesTokenCachingStrategy ( </a> 0
<a> this , </a> 0
<a> savedInstanceState . getString ( TOKEN_CACHE_NAME_KEY ) ) ; </a> 0
<a> currentSession = Session . restoreSession ( </a> 0
<a> this , </a> 0
<a> restoredCache , </a> 0
<a> sessionStatusCallback , </a> 0
<a> savedInstanceState ) ; </a> 0
<a> } else { </a> 0
<a> showProfile ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onBackPressed ( ) { </a> 0
<a> if ( isShowingSettings ( ) ) { </a> 0
<a> showProfile ( ) ; </a> 0
<a> } else { </a> 0
<a> super . onBackPressed ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . putBoolean ( SHOWING_SETTINGS_KEY , isShowingSettings ( ) ) ; </a> 0
<a> if ( currentSlot != null ) { </a> 0
<a> outState . putString ( TOKEN_CACHE_NAME_KEY , currentSlot . getTokenCacheName ( ) ) ; </a> 0
<a> } </a> 0
<a> FragmentManager manager = getSupportFragmentManager ( ) ; </a> 0
<a> manager . putFragment ( outState , SettingsFragment . TAG , settingsFragment ) ; </a> 0
<a> manager . putFragment ( outState , ProfileFragment . TAG , profileFragment ) ; </a> 0
<a> Session . saveSession ( currentSession , outState ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onResume ( ) { </a> 0
<a> super . onResume ( ) ; </a> 0
<a> settingsFragment . setSlotChangedListener ( new SettingsFragment . OnSlotChangedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onSlotChanged ( Slot newSlot ) { </a> 0
<a> handleSlotChange ( newSlot ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> profileFragment . setOnOptionsItemSelectedListener ( new ProfileFragment . OnOptionsItemSelectedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean onOptionsItemSelected ( MenuItem item ) { </a> 0
<a> return handleOptionsItemSelected ( item ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . addCallback ( sessionStatusCallback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onPause ( ) { </a> 0
<a> super . onPause ( ) ; </a> 0
<a> settingsFragment . setSlotChangedListener ( null ) ; </a> 0
<a> profileFragment . setOnOptionsItemSelectedListener ( null ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . removeCallback ( sessionStatusCallback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . onActivityResult ( this , requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onSessionStateChange ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( session != currentSession ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( state . isOpened ( ) ) { </a> 0
<a> fetchUserInfo ( ) ; </a> 0
<a> showProfile ( ) ; </a> 0
<a> } else if ( state . isClosed ( ) ) { </a> 0
<a> updateFragments ( null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void restoreFragments ( Bundle savedInstanceState ) { </a> 0
<a> FragmentManager manager = getSupportFragmentManager ( ) ; </a> 0
<a> FragmentTransaction transaction = manager . beginTransaction ( ) ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> profileFragment = ( ProfileFragment ) manager . getFragment ( savedInstanceState , ProfileFragment . TAG ) ; </a> 0
<a> settingsFragment = ( SettingsFragment ) manager . getFragment ( savedInstanceState , SettingsFragment . TAG ) ; </a> 0
<a> } </a> 0
<a> if ( profileFragment == null ) { </a> 0
<a> profileFragment = new ProfileFragment ( ) ; </a> 0
<a> transaction . add ( R . id . fragmentContainer , profileFragment , ProfileFragment . TAG ) ; </a> 0
<a> } </a> 0
<a> if ( settingsFragment == null ) { </a> 0
<a> settingsFragment = new SettingsFragment ( ) ; </a> 0
<a> transaction . add ( R . id . fragmentContainer , settingsFragment , SettingsFragment . TAG ) ; </a> 0
<a> } </a> 0
<a> transaction . commit ( ) ; </a> 0
<a> } </a> 0
<a> private void showSettings ( ) { </a> 0
<a> isShowingSettings = true ; </a> 0
<a> FragmentTransaction transaction = getSupportFragmentManager ( ) . beginTransaction ( ) ; </a> 0
<a> transaction . hide ( profileFragment ) </a> 0
<a> . show ( settingsFragment ) </a> 0
<a> . commit ( ) ; </a> 0
<a> } </a> 0
<a> private boolean isShowingSettings ( ) { </a> 0
<a> return isShowingSettings ; </a> 0
<a> } </a> 0
<a> private void showProfile ( ) { </a> 0
<a> isShowingSettings = false ; </a> 0
<a> FragmentTransaction transaction = getSupportFragmentManager ( ) . beginTransaction ( ) ; </a> 0
<a> transaction . hide ( settingsFragment ) </a> 0
<a> . show ( profileFragment ) </a> 0
<a> . commit ( ) ; </a> 0
<a> } </a> 0
<a> private void fetchUserInfo ( ) { </a> 0
<a> if ( currentSession != null && currentSession . isOpened ( ) ) { </a> 0
<a> Request request = Request . newMeRequest ( currentSession , new Request . GraphUserCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( GraphUser me , Response response ) { </a> 0
<a> if ( response . getRequest ( ) . getSession ( ) == currentSession ) { </a> 0
<a> updateFragments ( me ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> request . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void handleSlotChange ( Slot newSlot ) { </a> 0
<a> if ( currentSession != null ) { </a> 0
<a> currentSession . close ( ) ; </a> 0
<a> currentSession = null ; </a> 0
<a> } </a> 0
<a> if ( newSlot != null ) { </a> 0
<a> currentSlot = newSlot ; </a> 0
<a> currentSession = new Session . Builder ( this ) </a> 0
<a> . setTokenCachingStrategy ( currentSlot . getTokenCache ( ) ) </a> 0
<a> . build ( ) ; </a> 0
<a> currentSession . addCallback ( sessionStatusCallback ) ; </a> 0
<a> Session . OpenRequest openRequest = new Session . OpenRequest ( this ) ; </a> 0
<a> openRequest . setLoginBehavior ( newSlot . getLoginBehavior ( ) ) ; </a> 0
<a> openRequest . setRequestCode ( Session . DEFAULT_AUTHORIZE_ACTIVITY_CODE ) ; </a> 0
<a> currentSession . openForRead ( openRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean handleOptionsItemSelected ( MenuItem item ) { </a> 0
<a> switch ( item . getItemId ( ) ) { </a> 0
<a> case R . id . menu_item_switch : </a> 0
<a> showSettings ( ) ; </a> 0
<a> return true ; </a> 0
<a> default : </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void updateFragments ( GraphUser user ) { </a> 0
<a> settingsFragment . updateViewForUser ( user ) ; </a> 0
<a> profileFragment . updateViewForUser ( user ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . switchuser ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . view . * ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . widget . ProfilePictureView ; </a> 0
<a> public class ProfileFragment extends Fragment { </a> 0
<a> public static final String TAG = "ProfileFragment" ; </a> 0
<a> private TextView userNameView ; </a> 0
<a> private ProfilePictureView profilePictureView ; </a> 0
<a> private OnOptionsItemSelectedListener onOptionsItemSelectedListener ; </a> 0
<a> private GraphUser pendingUpdateForUser ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setHasOptionsMenu ( true ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { </a> 0
<a> super . onCreateOptionsMenu ( menu , inflater ) ; </a> 0
<a> inflater . inflate ( R . menu . options_profile , menu ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean onOptionsItemSelected ( MenuItem item ) { </a> 0
<a> boolean handled = false ; </a> 0
<a> OnOptionsItemSelectedListener listener = onOptionsItemSelectedListener ; </a> 0
<a> if ( listener != null ) { </a> 0
<a> handled = listener . onOptionsItemSelected ( item ) ; </a> 0
<a> } </a> 0
<a> if ( ! handled ) { </a> 0
<a> handled = super . onOptionsItemSelected ( item ) ; </a> 0
<a> } </a> 0
<a> return handled ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View onCreateView ( LayoutInflater inflater , ViewGroup parent , Bundle savedInstanceState ) { </a> 0
<a> View v = inflater . inflate ( R . layout . fragment_profile , parent , false ) ; </a> 0
<a> userNameView = ( TextView ) v . findViewById ( R . id . profileUserName ) ; </a> 0
<a> profilePictureView = ( ProfilePictureView ) v . findViewById ( R . id . profilePic ) ; </a> 0
<a> if ( pendingUpdateForUser != null ) { </a> 0
<a> updateViewForUser ( pendingUpdateForUser ) ; </a> 0
<a> pendingUpdateForUser = null ; </a> 0
<a> } </a> 0
<a> return v ; </a> 0
<a> } </a> 0
<a> public void setOnOptionsItemSelectedListener ( OnOptionsItemSelectedListener listener ) { </a> 0
<a> this . onOptionsItemSelectedListener = listener ; </a> 0
<a> } </a> 0
<a> public void updateViewForUser ( GraphUser user ) { </a> 0
<a> if ( userNameView == null || profilePictureView == null || ! isAdded ( ) ) { </a> 0
<a> pendingUpdateForUser = user ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( user == null ) { </a> 0
<a> profilePictureView . setProfileId ( null ) ; </a> 0
<a> userNameView . setText ( R . string . greeting_no_user ) ; </a> 0
<a> } else { </a> 0
<a> profilePictureView . setProfileId ( user . getId ( ) ) ; </a> 0
<a> userNameView . setText ( </a> 0
<a> String . format ( getString ( R . string . greeting_format ) , user . getFirstName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface OnOptionsItemSelectedListener { </a> 0
<a> boolean onOptionsItemSelected ( MenuItem item ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . switchuser ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . SharedPreferences ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . ListFragment ; </a> 0
<a> import android . view . * ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . widget . ProfilePictureView ; </a> 0
<a> import com . facebook . SessionLoginBehavior ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> public class SettingsFragment extends ListFragment { </a> 0
<a> public static final String TAG = "SettingsFragment" ; </a> 0
<a> private static final String CURRENT_SLOT_KEY = "CurrentSlot" ; </a> 0
<a> private SlotManager slotManager ; </a> 0
<a> private OnSlotChangedListener slotChangedListener ; </a> 0
<a> private boolean hasPendingNotifySlotChanged ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> slotManager = new SlotManager ( ) ; </a> 0
<a> slotManager . restore ( </a> 0
<a> getActivity ( ) , </a> 0
<a> savedInstanceState != null ? </a> 0
<a> savedInstanceState . getInt ( CURRENT_SLOT_KEY , SlotManager . NO_SLOT ) : </a> 0
<a> SlotManager . NO_SLOT ) ; </a> 0
<a> ArrayList < Slot > slotList = new ArrayList < Slot > ( </a> 0
<a> Arrays . asList ( slotManager . getAllSlots ( ) ) ) ; </a> 0
<a> setListAdapter ( new SlotAdapter ( slotList ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View onCreateView ( LayoutInflater inflater , ViewGroup parent , Bundle savedInstanceState ) { </a> 0
<a> View view = super . onCreateView ( inflater , parent , savedInstanceState ) ; </a> 0
<a> registerForContextMenu ( view . findViewById ( android . R . id . list ) ) ; </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreateContextMenu ( ContextMenu menu , View view , ContextMenu . ContextMenuInfo menuInfo ) { </a> 0
<a> super . onCreateContextMenu ( menu , view , menuInfo ) ; </a> 0
<a> getActivity ( ) . getMenuInflater ( ) . inflate ( R . menu . context_settings , menu ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onListItemClick ( ListView l , View view , int position , long id ) { </a> 0
<a> slotManager . toggleSlot ( position ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean onContextItemSelected ( MenuItem item ) { </a> 0
<a> AdapterView . AdapterContextMenuInfo info = ( AdapterView . AdapterContextMenuInfo ) item . getMenuInfo ( ) ; </a> 0
<a> SlotAdapter adapter = ( SlotAdapter ) getListAdapter ( ) ; </a> 0
<a> Slot slot = adapter . getItem ( info . position ) ; </a> 0
<a> switch ( item . getItemId ( ) ) { </a> 0
<a> case R . id . menu_item_clear_slot : </a> 0
<a> if ( slot . getUserId ( ) != null ) { </a> 0
<a> slot . clear ( ) ; </a> 0
<a> if ( slot == slotManager . getSelectedSlot ( ) ) { </a> 0
<a> slotManager . toggleSlot ( info . position ) ; </a> 0
<a> } </a> 0
<a> updateListView ( ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> return super . onContextItemSelected ( item ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . putInt ( CURRENT_SLOT_KEY , slotManager . getSelectedSlotNumber ( ) ) ; </a> 0
<a> } </a> 0
<a> public void setSlotChangedListener ( OnSlotChangedListener listener ) { </a> 0
<a> slotChangedListener = listener ; </a> 0
<a> if ( listener != null && hasPendingNotifySlotChanged ) { </a> 0
<a> notifySlotChanged ( ) ; </a> 0
<a> hasPendingNotifySlotChanged = false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void updateViewForUser ( GraphUser user ) { </a> 0
<a> if ( slotManager == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( user != null ) { </a> 0
<a> Slot s = slotManager . getSelectedSlot ( ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> s . update ( user ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> slotManager . setSelectedSlotNumber ( SlotManager . NO_SLOT ) ; </a> 0
<a> } </a> 0
<a> updateListView ( ) ; </a> 0
<a> } </a> 0
<a> private void notifySlotChanged ( ) { </a> 0
<a> OnSlotChangedListener listener = slotChangedListener ; </a> 0
<a> if ( listener != null ) { </a> 0
<a> Slot newSlot = slotManager . getSelectedSlot ( ) ; </a> 0
<a> listener . onSlotChanged ( newSlot ) ; </a> 0
<a> } else { </a> 0
<a> hasPendingNotifySlotChanged = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void updateListView ( ) { </a> 0
<a> SlotAdapter adapter = ( SlotAdapter ) getListAdapter ( ) ; </a> 0
<a> adapter . notifyDataSetChanged ( ) ; </a> 0
<a> } </a> 0
<a> public interface OnSlotChangedListener { </a> 0
<a> void onSlotChanged ( Slot newSlot ) ; </a> 0
<a> } </a> 0
<a> private class SlotAdapter extends ArrayAdapter < Slot > { </a> 0
<a> public SlotAdapter ( ArrayList < Slot > slots ) { </a> 0
<a> super ( getActivity ( ) , android . R . layout . simple_list_item_1 , slots ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View getView ( int position , View convertView , ViewGroup parent ) { </a> 0
<a> if ( null == convertView ) { </a> 0
<a> convertView = getActivity ( ) . getLayoutInflater ( ) </a> 0
<a> . inflate ( R . layout . list_item_user , null ) ; </a> 0
<a> } </a> 0
<a> Slot slot = getItem ( position ) ; </a> 0
<a> String userName = slot . getUserName ( ) ; </a> 0
<a> if ( userName == null ) { </a> 0
<a> userName = getString ( R . string . empty_slot ) ; </a> 0
<a> } </a> 0
<a> ProfilePictureView profilePictureView = ( ProfilePictureView ) convertView . findViewById ( </a> 0
<a> R . id . slotPic ) ; </a> 0
<a> profilePictureView . setCropped ( true ) ; </a> 0
<a> profilePictureView . setProfileId ( slot . getUserId ( ) ) ; </a> 0
<a> TextView userNameTextView = ( TextView ) convertView . findViewById ( </a> 0
<a> R . id . slotUserName ) ; </a> 0
<a> userNameTextView . setText ( userName ) ; </a> 0
<a> CheckBox currentUserCheckBox = ( CheckBox ) convertView . findViewById ( </a> 0
<a> R . id . currentUserIndicator ) ; </a> 0
<a> currentUserCheckBox . setChecked ( slotManager . getSelectedSlot ( ) == slot ) ; </a> 0
<a> return convertView ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class SlotManager { </a> 0
<a> static final int NO_SLOT = - 1 ; </a> 0
<a> private final static int MAX_SLOTS = 4 ; </a> 0
<a> private static final String SETTINGS_CURRENT_SLOT_KEY = "CurrentSlot" ; </a> 0
<a> private static final String SETTINGS_NAME = "UserManagerSettings" ; </a> 0
<a> private SharedPreferences settings ; </a> 0
<a> private int selectedSlotNumber = NO_SLOT ; </a> 0
<a> private Slot [ ] slots ; </a> 0
<a> void restore ( Context context , int oldSelectedSlot ) { </a> 0
<a> if ( context == null ) { </a> 0
<a> throw new IllegalArgumentException ( "context cannot be null" ) ; </a> 0
<a> } </a> 0
<a> Context applicationContext = context . getApplicationContext ( ) ; </a> 0
<a> applicationContext = ( applicationContext == null ) ? context : applicationContext ; </a> 0
<a> slots = new Slot [ MAX_SLOTS ] ; </a> 0
<a> for ( int i = 0 ; i < MAX_SLOTS ; i ++ ) { </a> 0
<a> SessionLoginBehavior loginBehavior = ( i == 0 ) ? </a> 0
<a> SessionLoginBehavior . SSO_WITH_FALLBACK : </a> 0
<a> SessionLoginBehavior . SUPPRESS_SSO ; </a> 0
<a> slots [ i ] = new Slot ( applicationContext , i , loginBehavior ) ; </a> 0
<a> } </a> 0
<a> settings = applicationContext . getSharedPreferences ( SETTINGS_NAME , Context . MODE_PRIVATE ) ; </a> 0
<a> int savedSlotNumber = settings . getInt ( SETTINGS_CURRENT_SLOT_KEY , NO_SLOT ) ; </a> 0
<a> if ( savedSlotNumber != NO_SLOT && savedSlotNumber != oldSelectedSlot ) { </a> 0
<a> toggleSlot ( savedSlotNumber ) ; </a> 0
<a> } else { </a> 0
<a> setSelectedSlotNumber ( savedSlotNumber ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void toggleSlot ( int slot ) { </a> 0
<a> validateSlot ( slot ) ; </a> 0
<a> if ( slot == selectedSlotNumber ) { </a> 0
<a> setSelectedSlotNumber ( NO_SLOT ) ; </a> 0
<a> } else { </a> 0
<a> setSelectedSlotNumber ( slot ) ; </a> 0
<a> } </a> 0
<a> notifySlotChanged ( ) ; </a> 0
<a> } </a> 0
<a> Slot getSelectedSlot ( ) { </a> 0
<a> if ( selectedSlotNumber == NO_SLOT ) { </a> 0
<a> return null ; </a> 0
<a> } else { </a> 0
<a> return getSlot ( selectedSlotNumber ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> int getSelectedSlotNumber ( ) { </a> 0
<a> return selectedSlotNumber ; </a> 0
<a> } </a> 0
<a> Slot [ ] getAllSlots ( ) { </a> 0
<a> return slots ; </a> 0
<a> } </a> 0
<a> Slot getSlot ( int slot ) { </a> 0
<a> validateSlot ( slot ) ; </a> 0
<a> return slots [ slot ] ; </a> 0
<a> } </a> 0
<a> private void setSelectedSlotNumber ( int slot ) { </a> 0
<a> settings . edit ( ) . putInt ( SETTINGS_CURRENT_SLOT_KEY , slot ) . commit ( ) ; </a> 0
<a> selectedSlotNumber = slot ; </a> 0
<a> } </a> 0
<a> private void validateSlot ( int slot ) { </a> 0
<a> if ( slot <= NO_SLOT || slot >= MAX_SLOTS ) { </a> 0
<a> throw new IllegalArgumentException ( </a> 0
<a> String . format ( "Choose a slot between 0 and %d inclusively" , MAX_SLOTS - 1 ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android . tests ; </a> 0
<a> import java . io . FileNotFoundException ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . MalformedURLException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import com . facebook . android . AsyncFacebookRunner ; </a> 0
<a> import com . facebook . android . DialogError ; </a> 0
<a> import com . facebook . android . Facebook ; </a> 0
<a> import com . facebook . android . FacebookError ; </a> 0
<a> import com . facebook . android . Util ; </a> 0
<a> import com . facebook . android . AsyncFacebookRunner . RequestListener ; </a> 0
<a> import com . facebook . android . Facebook . DialogListener ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . graphics . Color ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . View . OnClickListener ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> public class Tests extends Activity { </a> 0
<a> public static final String APP_ID = "110862205611506" ; </a> 0
<a> private static final String [ ] PERMISSIONS = </a> 0
<a> new String [ ] { "publish_stream" , "read_stream" , "offline_access" } ; </a> 0
<a> TextView publicTestsText ; </a> 0
<a> TextView publicErrorsText ; </a> 0
<a> Button loginButton ; </a> 0
<a> TextView authenticatedTestsText ; </a> 0
<a> TextView authenticatedErrorsText ; </a> 0
<a> Button postButton ; </a> 0
<a> TextView wallPostText ; </a> 0
<a> TextView deletedPostText ; </a> 0
<a> Button logoutButton ; </a> 0
<a> TextView logoutText ; </a> 0
<a> Facebook authenticatedFacebook = new Facebook ( APP_ID ) ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . main ) ; </a> 0
<a> publicTestsText = ( TextView ) findViewById ( R . id . publicTests ) ; </a> 0
<a> publicErrorsText = ( TextView ) findViewById ( R . id . publicErrors ) ; </a> 0
<a> loginButton = ( Button ) findViewById ( R . id . login ) ; </a> 0
<a> authenticatedTestsText = ( TextView ) findViewById ( </a> 0
<a> R . id . authenticatedTests ) ; </a> 0
<a> authenticatedErrorsText = ( TextView ) findViewById ( </a> 0
<a> R . id . authenticatedErrors ) ; </a> 0
<a> postButton = ( Button ) findViewById ( R . id . post ) ; </a> 0
<a> wallPostText = ( TextView ) findViewById ( R . id . wallPost ) ; </a> 0
<a> deletedPostText = ( TextView ) findViewById ( R . id . deletedPost ) ; </a> 0
<a> logoutButton = ( Button ) findViewById ( R . id . logout ) ; </a> 0
<a> logoutText = ( TextView ) findViewById ( R . id . logoutTest ) ; </a> 0
<a> loginButton . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> authenticatedFacebook . authorize ( Tests . this , PERMISSIONS , </a> 0
<a> new TestLoginListener ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> postButton . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> authenticatedFacebook . dialog ( Tests . this , "stream.publish" , </a> 0
<a> new TestUiServerListener ( ) ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> logoutButton . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> runTestLogout ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> runTestPublicApi ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> authenticatedFacebook . authorizeCallback ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> public void runTestPublicApi ( ) { </a> 0
<a> if ( testPublicApi ( ) ) { </a> 0
<a> publicTestsText . setText ( "Public API tests passed" ) ; </a> 0
<a> publicTestsText . setTextColor ( Color . GREEN ) ; </a> 0
<a> } else { </a> 0
<a> publicTestsText . setText ( "Public API tests failed" ) ; </a> 0
<a> publicTestsText . setTextColor ( Color . RED ) ; </a> 0
<a> } </a> 0
<a> if ( testPublicErrors ( ) ) { </a> 0
<a> publicErrorsText . setText ( "Public API errors passed" ) ; </a> 0
<a> publicErrorsText . setTextColor ( Color . GREEN ) ; </a> 0
<a> } else { </a> 0
<a> publicErrorsText . setText ( "Public API errors failed" ) ; </a> 0
<a> publicErrorsText . setTextColor ( Color . RED ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean testPublicApi ( ) { </a> 0
<a> Facebook fb = new Facebook ( APP_ID ) ; </a> 0
<a> try { </a> 0
<a> Log . d ( "Tests" , "Testing standard API call" ) ; </a> 0
<a> JSONObject response = Util . parseJson ( fb . request ( "4" ) ) ; </a> 0
<a> if ( ! response . getString ( "name" ) . equals ( "Mark Zuckerberg" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing an API call with a specific method" ) ; </a> 0
<a> response = Util . parseJson ( </a> 0
<a> fb . request ( "soneff" , new Bundle ( ) , "GET" ) ) ; </a> 0
<a> if ( ! response . getString ( "name" ) . equals ( "Steven Soneff" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing a public search query" ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "q" , "facebook" ) ; </a> 0
<a> response = Util . parseJson ( fb . request ( "search" , params ) ) ; </a> 0
<a> if ( response . getJSONArray ( "data" ) . length ( ) == 0 ) return false ; </a> 0
<a> Log . d ( "Tests" , "Public API Tests passed" ) ; </a> 0
<a> return true ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean testPublicErrors ( ) { </a> 0
<a> Facebook fb = new Facebook ( APP_ID ) ; </a> 0
<a> try { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> Log . d ( "Tests" , "Testing illegal post" ) ; </a> 0
<a> params . putString ( "message" , "Hello World" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( fb . request ( "4" , params , "POST" ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( "Unsupported post request." ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing illegal delete" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( fb . request ( "4" , new Bundle ( ) , "DELETE" ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( </a> 0
<a> "An access token is required to request this " + </a> 0
<a> "resource." ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing illegal post to Zuck's feed" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( fb . request ( "4/feed" , new Bundle ( ) , "POST" ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( "(#200) The user hasn't " + </a> 0
<a> "authorized the application to perform this action" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing invalidly specified parameters" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( fb . request ( "bgolub?fields=id,name,picture" ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . startsWith ( "Unknown fields: picture?" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing request for 'me' is rejected without " + </a> 0
<a> "access_token" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( fb . request ( "me" ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( </a> 0
<a> "An active access token must be used to " + </a> 0
<a> "query information about the current user." ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing empty request" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( fb . request ( "" ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( "Unsupported get request." ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing an invalid path" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( fb . request ( "invalidinvalidinvalidinvalid" ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( </a> 0
<a> "(#803) Some of the aliases you requested do not " + </a> 0
<a> "exist: invalidinvalidinvalidinvalid" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing missing query parameter" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( fb . request ( "search" , new Bundle ( ) , "GET" ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( "No node specified" ) ) return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing that API method is specified" ) ; </a> 0
<a> try { </a> 0
<a> fb . request ( new Bundle ( ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( IllegalArgumentException e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( </a> 0
<a> "API method must be specified. " + </a> 0
<a> "(parameters must contain key \"method\" " + </a> 0
<a> "and value). See http://developers.facebook." + </a> 0
<a> "com/docs/reference/rest/" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing that old API request cannot be made " + </a> 0
<a> "without access token" ) ; </a> 0
<a> params . putString ( "method" , "stream.publish" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( fb . request ( params ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( e . getErrorCode ( ) != 101 || </a> 0
<a> ! e . getMessage ( ) . equals ( "Invalid API key" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing invalid access token" ) ; </a> 0
<a> try { </a> 0
<a> fb . setAccessToken ( "invalid" ) ; </a> 0
<a> Util . parseJson ( fb . request ( "me" , new Bundle ( ) , "GET" ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( "Invalid OAuth access token." ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Public API Error Tests passed" ) ; </a> 0
<a> return true ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class TestLoginListener implements DialogListener { </a> 0
<a> public void onComplete ( Bundle values ) { </a> 0
<a> if ( testAuthenticatedApi ( ) ) { </a> 0
<a> authenticatedTestsText . setText ( </a> 0
<a> "Authenticated API tests passed" ) ; </a> 0
<a> authenticatedTestsText . setTextColor ( Color . GREEN ) ; </a> 0
<a> } else { </a> 0
<a> authenticatedTestsText . setText ( </a> 0
<a> "Authenticated API tests failed" ) ; </a> 0
<a> authenticatedTestsText . setTextColor ( Color . RED ) ; </a> 0
<a> } </a> 0
<a> if ( testAuthenticatedErrors ( ) ) { </a> 0
<a> authenticatedErrorsText . setText ( </a> 0
<a> "Authenticated API errors passed" ) ; </a> 0
<a> authenticatedErrorsText . setTextColor ( Color . GREEN ) ; </a> 0
<a> } else { </a> 0
<a> authenticatedErrorsText . setText ( </a> 0
<a> "Authenticated API errors failed" ) ; </a> 0
<a> authenticatedErrorsText . setTextColor ( Color . RED ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onCancel ( ) { </a> 0
<a> } </a> 0
<a> public void onError ( DialogError e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean testAuthenticatedApi ( ) { </a> 0
<a> if ( ! authenticatedFacebook . isSessionValid ( ) ) return false ; </a> 0
<a> try { </a> 0
<a> Log . d ( "Tests" , "Testing request for 'me'" ) ; </a> 0
<a> String response = authenticatedFacebook . request ( "me" ) ; </a> 0
<a> JSONObject obj = Util . parseJson ( response ) ; </a> 0
<a> if ( obj . getString ( "name" ) == null || </a> 0
<a> obj . getString ( "name" ) . equals ( "" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing graph API wall post" ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "message" , "hello world" ) ; </a> 0
<a> parameters . putString ( "description" , "test test test" ) ; </a> 0
<a> response = authenticatedFacebook . request ( "me/feed" , parameters , </a> 0
<a> "POST" ) ; </a> 0
<a> Log . d ( "Tests" , "got response: " + response ) ; </a> 0
<a> if ( response == null || response . equals ( "" ) || </a> 0
<a> response . equals ( "false" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing graph API delete" ) ; </a> 0
<a> response = response . replaceAll ( "\\{\"id\":\"" , "" ) ; </a> 0
<a> response = response . replaceAll ( "\"\\}" , "" ) ; </a> 0
<a> response = authenticatedFacebook . request ( response , new Bundle ( ) , </a> 0
<a> "DELETE" ) ; </a> 0
<a> if ( ! response . equals ( "true" ) ) return false ; </a> 0
<a> Log . d ( "Tests" , "Testing old API wall post" ) ; </a> 0
<a> parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "method" , "stream.publish" ) ; </a> 0
<a> parameters . putString ( "attachment" , </a> 0
<a> "{\"name\":\"Name=Title\"," + </a> 0
<a> "\"href\":\"http://www.google.fr/\",\"" + </a> 0
<a> "caption\":\"Caption\",\"description\":\"Description" + </a> 0
<a> "\",\"media\":[{\"type\":\"image\",\"src\":" + </a> 0
<a> "\"http://www.kratiroff.com/logo-facebook.jpg\"," + </a> 0
<a> "\"href\":\"http://developers.facebook.com/\"}]," + </a> 0
<a> "\"properties\":{\"another link\":{\"text\":\"" + </a> 0
<a> "Facebook homepage\",\"href\":\"http://www.facebook." + </a> 0
<a> "com\"}}}" ) ; ; </a> 0
<a> response = authenticatedFacebook . request ( parameters ) ; </a> 0
<a> Log . d ( "Tests" , "got response: " + response ) ; </a> 0
<a> if ( response == null || response . equals ( "" ) || </a> 0
<a> response . equals ( "false" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing wall post delete" ) ; </a> 0
<a> response = response . replaceAll ( "\"" , "" ) ; </a> 0
<a> response = authenticatedFacebook . request ( </a> 0
<a> response , new Bundle ( ) , "DELETE" ) ; </a> 0
<a> if ( ! response . equals ( "true" ) ) return false ; </a> 0
<a> Log . d ( "Tests" , "All Authenticated Tests Passed" ) ; </a> 0
<a> return true ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean testAuthenticatedErrors ( ) { </a> 0
<a> if ( ! authenticatedFacebook . isSessionValid ( ) ) return false ; </a> 0
<a> Log . d ( "Tests" , "Testing that request for 'me/invalid' is rejected" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( authenticatedFacebook . request ( "me/invalid" ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( "Unknown path components: /invalid" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing that old API call with invalid method fails" ) ; </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> params . putString ( "method" , "something_invalid" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( authenticatedFacebook . request ( params ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> Log . d ( "Tests" , "*" + e . getMessage ( ) + "*" ) ; </a> 0
<a> if ( ! e . getMessage ( ) . equals ( "Unknown method" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "All Authenticated Error Tests Passed" ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> public class TestUiServerListener implements DialogListener { </a> 0
<a> public void onComplete ( Bundle values ) { </a> 0
<a> final String postId = values . getString ( "post_id" ) ; </a> 0
<a> if ( postId != null ) { </a> 0
<a> Log . d ( "Facebook-Example" , "Dialog Success! post_id=" + postId ) ; </a> 0
<a> new AsyncFacebookRunner ( authenticatedFacebook ) . request ( postId , </a> 0
<a> new TestPostRequestListener ( ) ) ; </a> 0
<a> } else { </a> 0
<a> Tests . this . runOnUiThread ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> wallPostText . setText ( "Wall Post Failure" ) ; </a> 0
<a> wallPostText . setTextColor ( Color . RED ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onCancel ( ) { } </a> 0
<a> public void onError ( DialogError e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public class TestPostRequestListener implements RequestListener { </a> 0
<a> public void onComplete ( final String response , final Object state ) { </a> 0
<a> Log . d ( "Tests" , "Got response: " + response ) ; </a> 0
<a> try { </a> 0
<a> JSONObject json = Util . parseJson ( response ) ; </a> 0
<a> String postId = json . getString ( "id" ) ; </a> 0
<a> Tests . this . runOnUiThread ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> wallPostText . setText ( "Wall Post Success" ) ; </a> 0
<a> wallPostText . setTextColor ( Color . GREEN ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Log . d ( "Tests" , "Testing wall post delete" ) ; </a> 0
<a> if ( testPostDelete ( postId ) ) { </a> 0
<a> Tests . this . runOnUiThread ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> deletedPostText . setText ( "Deleted Post Success" ) ; </a> 0
<a> deletedPostText . setTextColor ( Color . GREEN ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } else { </a> 0
<a> Tests . this . runOnUiThread ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> deletedPostText . setText ( "Deleted Post Failure" ) ; </a> 0
<a> deletedPostText . setTextColor ( Color . RED ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> Tests . this . runOnUiThread ( new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> wallPostText . setText ( "Wall Post Failure" ) ; </a> 0
<a> wallPostText . setTextColor ( Color . RED ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void onFacebookError ( FacebookError e , final Object state ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> public void onFileNotFoundException ( FileNotFoundException e , </a> 0
<a> final Object state ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> public void onIOException ( IOException e , final Object state ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> public void onMalformedURLException ( MalformedURLException e , </a> 0
<a> final Object state ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean testPostDelete ( String postId ) { </a> 0
<a> try { </a> 0
<a> String deleteResponse = </a> 0
<a> authenticatedFacebook . request ( postId , new Bundle ( ) , "DELETE" ) ; </a> 0
<a> return deleteResponse . equals ( "true" ) ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void runTestLogout ( ) { </a> 0
<a> if ( testLogout ( ) ) { </a> 0
<a> logoutText . setText ( "Logout Tests Passed" ) ; </a> 0
<a> logoutText . setTextColor ( Color . GREEN ) ; </a> 0
<a> } else { </a> 0
<a> logoutText . setText ( "Logout Tests Failed" ) ; </a> 0
<a> logoutText . setTextColor ( Color . RED ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean testLogout ( ) { </a> 0
<a> try { </a> 0
<a> Log . d ( "Tests" , "Testing logout" ) ; </a> 0
<a> String response = authenticatedFacebook . logout ( this ) ; </a> 0
<a> Log . d ( "Tests" , "Got logout response: *" + response + "*" ) ; </a> 0
<a> if ( ! response . equals ( "true" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing logout on logged out facebook session" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( authenticatedFacebook . logout ( this ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> if ( e . getErrorCode ( ) != 101 || </a> 0
<a> ! e . getMessage ( ) . equals ( "Invalid API key" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "Testing logout on unauthenticated object" ) ; </a> 0
<a> try { </a> 0
<a> Util . parseJson ( new Facebook ( APP_ID ) . logout ( this ) ) ; </a> 0
<a> return false ; </a> 0
<a> } catch ( FacebookError e ) { </a> 0
<a> if ( e . getErrorCode ( ) != 101 || </a> 0
<a> ! e . getMessage ( ) . equals ( "Invalid API key" ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Log . d ( "Tests" , "All Logout Tests Passed" ) ; </a> 0
<a> return true ; </a> 0
<a> } catch ( Throwable e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
