<START_FILE>
<a> </a> 0
<a> package com . facebook . sdk ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> public class StatusActivity extends Activity </a> 0
<a> { </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) </a> 0
<a> { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . main ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . Manifest ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . ActivityNotFoundException ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . pm . PackageManager ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . webkit . CookieSyncManager ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . internal . ServerProtocol ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . model . GraphMultiResult ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphObjectList ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import com . facebook . widget . WebDialog ; </a> 0
<a> import java . io . Serializable ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> class AuthorizationClient implements Serializable { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> List < AuthHandler > handlersToTry ; </a> 0
<a> AuthHandler currentHandler ; </a> 0
<a> transient Context context ; </a> 0
<a> transient StartActivityDelegate startActivityDelegate ; </a> 0
<a> transient OnCompletedListener onCompletedListener ; </a> 0
<a> transient BackgroundProcessingListener backgroundProcessingListener ; </a> 0
<a> transient boolean checkedInternetPermission ; </a> 0
<a> AuthorizationRequest pendingRequest ; </a> 0
<a> interface OnCompletedListener { </a> 0
<a> void onCompleted ( Result result ) ; </a> 0
<a> } </a> 0
<a> interface BackgroundProcessingListener { </a> 0
<a> void onBackgroundProcessingStarted ( ) ; </a> 0
<a> void onBackgroundProcessingStopped ( ) ; </a> 0
<a> } </a> 0
<a> interface StartActivityDelegate { </a> 0
<a> public void startActivityForResult ( Intent intent , int requestCode ) ; </a> 0
<a> public Activity getActivityContext ( ) ; </a> 0
<a> } </a> 0
<a> void setContext ( final Context context ) { </a> 0
<a> this . context = context ; </a> 0
<a> startActivityDelegate = null ; </a> 0
<a> } </a> 0
<a> void setContext ( final Activity activity ) { </a> 0
<a> this . context = activity ; </a> 0
<a> startActivityDelegate = new StartActivityDelegate ( ) { </a> 0
<a> @ Override </a> 0
<a> public void startActivityForResult ( Intent intent , int requestCode ) { </a> 0
<a> activity . startActivityForResult ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity getActivityContext ( ) { </a> 0
<a> return activity ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> void startOrContinueAuth ( AuthorizationRequest request ) { </a> 0
<a> if ( getInProgress ( ) ) { </a> 0
<a> continueAuth ( ) ; </a> 0
<a> } else { </a> 0
<a> authorize ( request ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void authorize ( AuthorizationRequest request ) { </a> 0
<a> if ( request == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> throw new FacebookException ( "Attempted to authorize while a request is pending." ) ; </a> 0
<a> } </a> 0
<a> if ( request . needsNewTokenValidation ( ) && ! checkInternetPermission ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> pendingRequest = request ; </a> 0
<a> handlersToTry = getHandlerTypes ( request ) ; </a> 0
<a> tryNextHandler ( ) ; </a> 0
<a> } </a> 0
<a> void continueAuth ( ) { </a> 0
<a> if ( pendingRequest == null || currentHandler == null ) { </a> 0
<a> throw new FacebookException ( "Attempted to continue authorization without a pending request." ) ; </a> 0
<a> } </a> 0
<a> if ( currentHandler . needsRestart ( ) ) { </a> 0
<a> currentHandler . cancel ( ) ; </a> 0
<a> tryCurrentHandler ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean getInProgress ( ) { </a> 0
<a> return pendingRequest != null && currentHandler != null ; </a> 0
<a> } </a> 0
<a> void cancelCurrentHandler ( ) { </a> 0
<a> if ( currentHandler != null ) { </a> 0
<a> currentHandler . cancel ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> if ( requestCode == pendingRequest . getRequestCode ( ) ) { </a> 0
<a> return currentHandler . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private List < AuthHandler > getHandlerTypes ( AuthorizationRequest request ) { </a> 0
<a> ArrayList < AuthHandler > handlers = new ArrayList < AuthHandler > ( ) ; </a> 0
<a> final SessionLoginBehavior behavior = request . getLoginBehavior ( ) ; </a> 0
<a> if ( behavior . allowsKatanaAuth ( ) ) { </a> 0
<a> if ( ! request . isLegacy ( ) ) { </a> 0
<a> handlers . add ( new GetTokenAuthHandler ( ) ) ; </a> 0
<a> handlers . add ( new KatanaLoginDialogAuthHandler ( ) ) ; </a> 0
<a> } </a> 0
<a> handlers . add ( new KatanaProxyAuthHandler ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( behavior . allowsWebViewAuth ( ) ) { </a> 0
<a> handlers . add ( new WebViewAuthHandler ( ) ) ; </a> 0
<a> } </a> 0
<a> return handlers ; </a> 0
<a> } </a> 0
<a> boolean checkInternetPermission ( ) { </a> 0
<a> if ( checkedInternetPermission ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> int permissionCheck = checkPermission ( Manifest . permission . INTERNET ) ; </a> 0
<a> if ( permissionCheck != PackageManager . PERMISSION_GRANTED ) { </a> 0
<a> String errorType = context . getString ( R . string . com_facebook_internet_permission_error_title ) ; </a> 0
<a> String errorDescription = context . getString ( R . string . com_facebook_internet_permission_error_message ) ; </a> 0
<a> complete ( Result . createErrorResult ( errorType , errorDescription ) ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> checkedInternetPermission = true ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> void tryNextHandler ( ) { </a> 0
<a> while ( handlersToTry != null && ! handlersToTry . isEmpty ( ) ) { </a> 0
<a> currentHandler = handlersToTry . remove ( 0 ) ; </a> 0
<a> boolean started = tryCurrentHandler ( ) ; </a> 0
<a> if ( started ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> completeWithFailure ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void completeWithFailure ( ) { </a> 0
<a> complete ( Result . createErrorResult ( "Login attempt failed." , null ) ) ; </a> 0
<a> } </a> 0
<a> boolean tryCurrentHandler ( ) { </a> 0
<a> if ( currentHandler . needsInternetPermission ( ) && ! checkInternetPermission ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return currentHandler . tryAuthorize ( pendingRequest ) ; </a> 0
<a> } </a> 0
<a> void completeAndValidate ( Result outcome ) { </a> 0
<a> if ( outcome . token != null && pendingRequest . needsNewTokenValidation ( ) ) { </a> 0
<a> validateSameFbidAndFinish ( outcome ) ; </a> 0
<a> } else { </a> 0
<a> complete ( outcome ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void complete ( Result outcome ) { </a> 0
<a> handlersToTry = null ; </a> 0
<a> currentHandler = null ; </a> 0
<a> pendingRequest = null ; </a> 0
<a> notifyOnCompleteListener ( outcome ) ; </a> 0
<a> } </a> 0
<a> OnCompletedListener getOnCompletedListener ( ) { </a> 0
<a> return onCompletedListener ; </a> 0
<a> } </a> 0
<a> void setOnCompletedListener ( OnCompletedListener onCompletedListener ) { </a> 0
<a> this . onCompletedListener = onCompletedListener ; </a> 0
<a> } </a> 0
<a> BackgroundProcessingListener getBackgroundProcessingListener ( ) { </a> 0
<a> return backgroundProcessingListener ; </a> 0
<a> } </a> 0
<a> void setBackgroundProcessingListener ( BackgroundProcessingListener backgroundProcessingListener ) { </a> 0
<a> this . backgroundProcessingListener = backgroundProcessingListener ; </a> 0
<a> } </a> 0
<a> StartActivityDelegate getStartActivityDelegate ( ) { </a> 0
<a> if ( startActivityDelegate != null ) { </a> 0
<a> return startActivityDelegate ; </a> 0
<a> } else if ( pendingRequest != null ) { </a> 0
<a> return new StartActivityDelegate ( ) { </a> 0
<a> @ Override </a> 0
<a> public void startActivityForResult ( Intent intent , int requestCode ) { </a> 0
<a> pendingRequest . getStartActivityDelegate ( ) . startActivityForResult ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity getActivityContext ( ) { </a> 0
<a> return pendingRequest . getStartActivityDelegate ( ) . getActivityContext ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> int checkPermission ( String permission ) { </a> 0
<a> return context . checkCallingOrSelfPermission ( permission ) ; </a> 0
<a> } </a> 0
<a> void validateSameFbidAndFinish ( Result pendingResult ) { </a> 0
<a> if ( pendingResult . token == null ) { </a> 0
<a> throw new FacebookException ( "Can't validate without a token" ) ; </a> 0
<a> } </a> 0
<a> RequestBatch batch = createReauthValidationBatch ( pendingResult ) ; </a> 0
<a> notifyBackgroundProcessingStart ( ) ; </a> 0
<a> batch . executeAsync ( ) ; </a> 0
<a> } </a> 0
<a> RequestBatch createReauthValidationBatch ( final Result pendingResult ) { </a> 0
<a> final ArrayList < String > fbids = new ArrayList < String > ( ) ; </a> 0
<a> final ArrayList < String > tokenPermissions = new ArrayList < String > ( ) ; </a> 0
<a> final String newToken = pendingResult . token . getToken ( ) ; </a> 0
<a> Request . Callback meCallback = new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> try { </a> 0
<a> GraphUser user = response . getGraphObjectAs ( GraphUser . class ) ; </a> 0
<a> if ( user != null ) { </a> 0
<a> fbids . add ( user . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> String validateSameFbidAsToken = pendingRequest . getPreviousAccessToken ( ) ; </a> 0
<a> Request requestCurrentTokenMe = createGetProfileIdRequest ( validateSameFbidAsToken ) ; </a> 0
<a> requestCurrentTokenMe . setCallback ( meCallback ) ; </a> 0
<a> Request requestNewTokenMe = createGetProfileIdRequest ( newToken ) ; </a> 0
<a> requestNewTokenMe . setCallback ( meCallback ) ; </a> 0
<a> Request requestCurrentTokenPermissions = createGetPermissionsRequest ( validateSameFbidAsToken ) ; </a> 0
<a> requestCurrentTokenPermissions . setCallback ( new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> try { </a> 0
<a> GraphMultiResult result = response . getGraphObjectAs ( GraphMultiResult . class ) ; </a> 0
<a> if ( result != null ) { </a> 0
<a> GraphObjectList < GraphObject > data = result . getData ( ) ; </a> 0
<a> if ( data != null && data . size ( ) == 1 ) { </a> 0
<a> GraphObject permissions = data . get ( 0 ) ; </a> 0
<a> tokenPermissions . addAll ( permissions . asMap ( ) . keySet ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> RequestBatch batch = new RequestBatch ( requestCurrentTokenMe , requestNewTokenMe , </a> 0
<a> requestCurrentTokenPermissions ) ; </a> 0
<a> batch . setBatchApplicationId ( pendingRequest . getApplicationId ( ) ) ; </a> 0
<a> batch . addCallback ( new RequestBatch . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onBatchCompleted ( RequestBatch batch ) { </a> 0
<a> try { </a> 0
<a> Result result = null ; </a> 0
<a> if ( fbids . size ( ) == 2 && fbids . get ( 0 ) != null && fbids . get ( 1 ) != null && </a> 0
<a> fbids . get ( 0 ) . equals ( fbids . get ( 1 ) ) ) { </a> 0
<a> AccessToken tokenWithPermissions = AccessToken </a> 0
<a> . createFromTokenWithRefreshedPermissions ( pendingResult . token , </a> 0
<a> tokenPermissions ) ; </a> 0
<a> result = Result . createTokenResult ( tokenWithPermissions ) ; </a> 0
<a> } else { </a> 0
<a> result = Result </a> 0
<a> . createErrorResult ( "User logged in as different Facebook user." , null ) ; </a> 0
<a> } </a> 0
<a> complete ( result ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> complete ( Result . createErrorResult ( "Caught exception" , ex . getMessage ( ) ) ) ; </a> 0
<a> } finally { </a> 0
<a> notifyBackgroundProcessingStop ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> return batch ; </a> 0
<a> } </a> 0
<a> Request createGetPermissionsRequest ( String accessToken ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "fields" , "id" ) ; </a> 0
<a> parameters . putString ( "access_token" , accessToken ) ; </a> 0
<a> return new Request ( null , "me/permissions" , parameters , HttpMethod . GET , null ) ; </a> 0
<a> } </a> 0
<a> Request createGetProfileIdRequest ( String accessToken ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "fields" , "id" ) ; </a> 0
<a> parameters . putString ( "access_token" , accessToken ) ; </a> 0
<a> return new Request ( null , "me" , parameters , HttpMethod . GET , null ) ; </a> 0
<a> } </a> 0
<a> private void notifyOnCompleteListener ( Result outcome ) { </a> 0
<a> if ( onCompletedListener != null ) { </a> 0
<a> onCompletedListener . onCompleted ( outcome ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void notifyBackgroundProcessingStart ( ) { </a> 0
<a> if ( backgroundProcessingListener != null ) { </a> 0
<a> backgroundProcessingListener . onBackgroundProcessingStarted ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void notifyBackgroundProcessingStop ( ) { </a> 0
<a> if ( backgroundProcessingListener != null ) { </a> 0
<a> backgroundProcessingListener . onBackgroundProcessingStopped ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> abstract class AuthHandler implements Serializable { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> abstract boolean tryAuthorize ( AuthorizationRequest request ) ; </a> 0
<a> boolean onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> boolean needsRestart ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> boolean needsInternetPermission ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> void cancel ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class WebViewAuthHandler extends AuthHandler { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> private transient WebDialog loginDialog ; </a> 0
<a> @ Override </a> 0
<a> boolean needsRestart ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean needsInternetPermission ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void cancel ( ) { </a> 0
<a> if ( loginDialog != null ) { </a> 0
<a> loginDialog . dismiss ( ) ; </a> 0
<a> loginDialog = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean tryAuthorize ( final AuthorizationRequest request ) { </a> 0
<a> String applicationId = request . getApplicationId ( ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> if ( ! Utility . isNullOrEmpty ( request . getPermissions ( ) ) ) { </a> 0
<a> parameters . putString ( ServerProtocol . DIALOG_PARAM_SCOPE , TextUtils . join ( "," , request . getPermissions ( ) ) ) ; </a> 0
<a> } </a> 0
<a> Utility . clearFacebookCookies ( context ) ; </a> 0
<a> WebDialog . OnCompleteListener listener = new WebDialog . OnCompleteListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onComplete ( Bundle values , FacebookException error ) { </a> 0
<a> onWebDialogComplete ( request , values , error ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> WebDialog . Builder builder = </a> 0
<a> new AuthDialogBuilder ( getStartActivityDelegate ( ) . getActivityContext ( ) , applicationId , parameters ) </a> 0
<a> . setOnCompleteListener ( listener ) ; </a> 0
<a> loginDialog = builder . build ( ) ; </a> 0
<a> loginDialog . show ( ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> void onWebDialogComplete ( AuthorizationRequest request , Bundle values , </a> 0
<a> FacebookException error ) { </a> 0
<a> Result outcome ; </a> 0
<a> if ( values != null ) { </a> 0
<a> CookieSyncManager syncManager = CookieSyncManager . createInstance ( context ) ; </a> 0
<a> syncManager . sync ( ) ; </a> 0
<a> AccessToken token = AccessToken </a> 1
<a> . createFromWebBundle ( request . getPermissions ( ) , values , AccessTokenSource . WEB_VIEW ) ; </a> 1
<a> outcome = Result . createTokenResult ( token ) ; </a> 1
<a> } else { </a> 0
<a> if ( error instanceof FacebookOperationCanceledException ) { </a> 0
<a> outcome = Result . createCancelResult ( "User canceled log in." ) ; </a> 0
<a> } else { </a> 0
<a> outcome = Result . createErrorResult ( error . getMessage ( ) , null ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> completeAndValidate ( outcome ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class GetTokenAuthHandler extends AuthHandler { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> private transient GetTokenClient getTokenClient ; </a> 0
<a> @ Override </a> 0
<a> void cancel ( ) { </a> 0
<a> if ( getTokenClient != null ) { </a> 0
<a> getTokenClient . cancel ( ) ; </a> 0
<a> getTokenClient = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean tryAuthorize ( final AuthorizationRequest request ) { </a> 0
<a> getTokenClient = new GetTokenClient ( context , request . getApplicationId ( ) ) ; </a> 0
<a> if ( ! getTokenClient . start ( ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> notifyBackgroundProcessingStart ( ) ; </a> 0
<a> GetTokenClient . CompletedListener callback = new GetTokenClient . CompletedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void completed ( Bundle result ) { </a> 0
<a> getTokenCompleted ( request , result ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> getTokenClient . setCompletedListener ( callback ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> void getTokenCompleted ( AuthorizationRequest request , Bundle result ) { </a> 0
<a> getTokenClient = null ; </a> 0
<a> notifyBackgroundProcessingStop ( ) ; </a> 0
<a> if ( result != null ) { </a> 0
<a> ArrayList < String > currentPermissions = result . getStringArrayList ( NativeProtocol . EXTRA_PERMISSIONS ) ; </a> 0
<a> List < String > permissions = request . getPermissions ( ) ; </a> 0
<a> if ( ( currentPermissions != null ) && </a> 0
<a> ( ( permissions == null ) || currentPermissions . containsAll ( permissions ) ) ) { </a> 0
<a> AccessToken token = AccessToken </a> 0
<a> . createFromNativeLogin ( result , AccessTokenSource . FACEBOOK_APPLICATION_SERVICE ) ; </a> 0
<a> Result outcome = Result . createTokenResult ( token ) ; </a> 0
<a> completeAndValidate ( outcome ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> ArrayList < String > newPermissions = new ArrayList < String > ( ) ; </a> 0
<a> for ( String permission : permissions ) { </a> 0
<a> if ( ! currentPermissions . contains ( permission ) ) { </a> 0
<a> newPermissions . add ( permission ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> request . setPermissions ( newPermissions ) ; </a> 0
<a> } </a> 0
<a> tryNextHandler ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> abstract class KatanaAuthHandler extends AuthHandler { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> protected boolean tryIntent ( Intent intent , int requestCode ) { </a> 0
<a> if ( intent == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> getStartActivityDelegate ( ) . startActivityForResult ( intent , requestCode ) ; </a> 0
<a> } catch ( ActivityNotFoundException e ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class KatanaLoginDialogAuthHandler extends KatanaAuthHandler { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> @ Override </a> 0
<a> boolean tryAuthorize ( AuthorizationRequest request ) { </a> 0
<a> Intent intent = NativeProtocol . createLoginDialog20121101Intent ( context , request . getApplicationId ( ) , </a> 0
<a> new ArrayList < String > ( request . getPermissions ( ) ) , </a> 0
<a> request . getDefaultAudience ( ) . getNativeProtocolAudience ( ) ) ; </a> 0
<a> return tryIntent ( intent , request . getRequestCode ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> if ( NativeProtocol . isServiceDisabledResult20121101 ( data ) ) { </a> 1
<a> tryNextHandler ( ) ; </a> 1
<a> } else { </a> 1
<a> Result outcome = null ; </a> 1
<a> if ( resultCode == Activity . RESULT_CANCELED ) { </a> 1
<a> outcome = Result . createCancelResult ( </a> 0
<a> data . getStringExtra ( NativeProtocol . STATUS_ERROR_DESCRIPTION ) ) ; </a> 0
<a> } else if ( resultCode != Activity . RESULT_OK ) { </a> 0
<a> outcome = Result </a> 1
<a> . createErrorResult ( "Unexpected resultCode from authorization." , null ) ; </a> 1
<a> } else { </a> 0
<a> outcome = handleResultOk ( data ) ; </a> 0
<a> } </a> 0
<a> if ( outcome != null ) { </a> 0
<a> completeAndValidate ( outcome ) ; </a> 0
<a> } else { </a> 0
<a> tryNextHandler ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 1
<a> return true ; </a> 0
<a> } </a> 0
<a> private Result handleResultOk ( Intent data ) { </a> 0
<a> Bundle extras = data . getExtras ( ) ; </a> 0
<a> String errorType = extras . getString ( NativeProtocol . STATUS_ERROR_TYPE ) ; </a> 0
<a> if ( errorType == null ) { </a> 0
<a> return Result . createTokenResult ( </a> 0
<a> AccessToken . createFromNativeLogin ( extras , AccessTokenSource . FACEBOOK_APPLICATION_NATIVE ) ) ; </a> 0
<a> } else if ( NativeProtocol . ERROR_SERVICE_DISABLED . equals ( errorType ) ) { </a> 0
<a> return null ; </a> 0
<a> } else if ( NativeProtocol . ERROR_USER_CANCELED . equals ( errorType ) ) { </a> 0
<a> return Result . createCancelResult ( null ) ; </a> 0
<a> } else { </a> 0
<a> return Result . createErrorResult ( errorType , extras . getString ( "error_description" ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class KatanaProxyAuthHandler extends KatanaAuthHandler { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> @ Override </a> 0
<a> boolean tryAuthorize ( AuthorizationRequest request ) { </a> 0
<a> Intent intent = NativeProtocol . createProxyAuthIntent ( context , </a> 0
<a> request . getApplicationId ( ) , request . getPermissions ( ) ) ; </a> 0
<a> return tryIntent ( intent , request . getRequestCode ( ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> Result outcome = null ; </a> 1
<a> if ( resultCode == Activity . RESULT_CANCELED ) { </a> 1
<a> outcome = Result . createCancelResult ( data . getStringExtra ( "error" ) ) ; </a> 0
<a> } else if ( resultCode != Activity . RESULT_OK ) { </a> 0
<a> outcome = Result . createErrorResult ( "Unexpected resultCode from authorization." , null ) ; </a> 0
<a> } else { </a> 0
<a> outcome = handleResultOk ( data ) ; </a> 0
<a> } </a> 0
<a> if ( outcome != null ) { </a> 0
<a> completeAndValidate ( outcome ) ; </a> 0
<a> } else { </a> 0
<a> tryNextHandler ( ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> private Result handleResultOk ( Intent data ) { </a> 0
<a> Bundle extras = data . getExtras ( ) ; </a> 0
<a> String error = extras . getString ( "error" ) ; </a> 0
<a> if ( error == null ) { </a> 0
<a> error = extras . getString ( "error_type" ) ; </a> 0
<a> } </a> 0
<a> if ( error == null ) { </a> 0
<a> AccessToken token = AccessToken . createFromWebBundle ( pendingRequest . getPermissions ( ) , extras , </a> 0
<a> AccessTokenSource . FACEBOOK_APPLICATION_WEB ) ; </a> 0
<a> return Result . createTokenResult ( token ) ; </a> 0
<a> } else if ( ServerProtocol . errorsProxyAuthDisabled . contains ( error ) ) { </a> 0
<a> return null ; </a> 0
<a> } else if ( ServerProtocol . errorsUserCanceled . contains ( error ) ) { </a> 0
<a> return Result . createCancelResult ( null ) ; </a> 0
<a> } else { </a> 0
<a> return Result . createErrorResult ( error , extras . getString ( "error_description" ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static class AuthDialogBuilder extends WebDialog . Builder { </a> 0
<a> private static final String OAUTH_DIALOG = "oauth" ; </a> 0
<a> static final String REDIRECT_URI = "fbconnect://success" ; </a> 0
<a> public AuthDialogBuilder ( Context context , String applicationId , Bundle parameters ) { </a> 0
<a> super ( context , applicationId , OAUTH_DIALOG , parameters ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public WebDialog build ( ) { </a> 0
<a> Bundle parameters = getParameters ( ) ; </a> 0
<a> parameters . putString ( ServerProtocol . DIALOG_PARAM_REDIRECT_URI , REDIRECT_URI ) ; </a> 0
<a> parameters . putString ( ServerProtocol . DIALOG_PARAM_CLIENT_ID , getApplicationId ( ) ) ; </a> 0
<a> return new WebDialog ( getContext ( ) , OAUTH_DIALOG , parameters , getTheme ( ) , getListener ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static class AuthorizationRequest implements Serializable { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> private transient final StartActivityDelegate startActivityDelegate ; </a> 0
<a> private SessionLoginBehavior loginBehavior ; </a> 0
<a> private int requestCode ; </a> 0
<a> private boolean isLegacy = false ; </a> 0
<a> private List < String > permissions ; </a> 0
<a> private SessionDefaultAudience defaultAudience ; </a> 0
<a> private String applicationId ; </a> 0
<a> private String previousAccessToken ; </a> 0
<a> AuthorizationRequest ( SessionLoginBehavior loginBehavior , int requestCode , boolean isLegacy , </a> 0
<a> List < String > permissions , SessionDefaultAudience defaultAudience , String applicationId , </a> 0
<a> String validateSameFbidAsToken , StartActivityDelegate startActivityDelegate ) { </a> 0
<a> this . loginBehavior = loginBehavior ; </a> 0
<a> this . requestCode = requestCode ; </a> 0
<a> this . isLegacy = isLegacy ; </a> 0
<a> this . permissions = permissions ; </a> 0
<a> this . defaultAudience = defaultAudience ; </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . previousAccessToken = validateSameFbidAsToken ; </a> 0
<a> this . startActivityDelegate = startActivityDelegate ; </a> 0
<a> } </a> 0
<a> StartActivityDelegate getStartActivityDelegate ( ) { </a> 0
<a> return startActivityDelegate ; </a> 0
<a> } </a> 0
<a> List < String > getPermissions ( ) { </a> 0
<a> return permissions ; </a> 0
<a> } </a> 0
<a> void setPermissions ( List < String > permissions ) { </a> 0
<a> this . permissions = permissions ; </a> 0
<a> } </a> 0
<a> SessionLoginBehavior getLoginBehavior ( ) { </a> 0
<a> return loginBehavior ; </a> 0
<a> } </a> 0
<a> int getRequestCode ( ) { </a> 0
<a> return requestCode ; </a> 0
<a> } </a> 0
<a> SessionDefaultAudience getDefaultAudience ( ) { </a> 0
<a> return defaultAudience ; </a> 0
<a> } </a> 0
<a> String getApplicationId ( ) { </a> 0
<a> return applicationId ; </a> 0
<a> } </a> 0
<a> boolean isLegacy ( ) { </a> 0
<a> return isLegacy ; </a> 0
<a> } </a> 0
<a> void setIsLegacy ( boolean isLegacy ) { </a> 0
<a> this . isLegacy = isLegacy ; </a> 0
<a> } </a> 0
<a> String getPreviousAccessToken ( ) { </a> 0
<a> return previousAccessToken ; </a> 0
<a> } </a> 0
<a> boolean needsNewTokenValidation ( ) { </a> 0
<a> return previousAccessToken != null && ! isLegacy ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static class Result implements Serializable { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> enum Code { </a> 0
<a> SUCCESS , </a> 0
<a> CANCEL , </a> 0
<a> ERROR </a> 0
<a> } </a> 0
<a> final Code code ; </a> 0
<a> final AccessToken token ; </a> 0
<a> final String errorMessage ; </a> 0
<a> private Result ( Code code , AccessToken token , String errorMessage ) { </a> 0
<a> this . token = token ; </a> 0
<a> this . errorMessage = errorMessage ; </a> 0
<a> this . code = code ; </a> 0
<a> } </a> 0
<a> static Result createTokenResult ( AccessToken token ) { </a> 0
<a> return new Result ( Code . SUCCESS , token , null ) ; </a> 0
<a> } </a> 0
<a> static Result createCancelResult ( String message ) { </a> 0
<a> return new Result ( Code . CANCEL , null , message ) ; </a> 0
<a> } </a> 0
<a> static Result createErrorResult ( String errorType , String errorDescription ) { </a> 0
<a> String message = errorType ; </a> 0
<a> if ( errorDescription != null ) { </a> 0
<a> message += ": " + errorDescription ; </a> 0
<a> } </a> 0
<a> return new Result ( Code . ERROR , null , message ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public class FacebookDialogException extends FacebookException { </a> 0
<a> static final long serialVersionUID = 1 ; </a> 0
<a> private int errorCode ; </a> 0
<a> private String failingUrl ; </a> 0
<a> public FacebookDialogException ( String message , int errorCode , String failingUrl ) { </a> 0
<a> super ( message ) ; </a> 0
<a> this . errorCode = errorCode ; </a> 0
<a> this . failingUrl = failingUrl ; </a> 0
<a> } </a> 0
<a> public int getErrorCode ( ) { </a> 0
<a> return errorCode ; </a> 0
<a> } </a> 0
<a> public String getFailingUrl ( ) { </a> 0
<a> return failingUrl ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public class FacebookOperationCanceledException extends FacebookException { </a> 0
<a> static final long serialVersionUID = 1 ; </a> 0
<a> public FacebookOperationCanceledException ( ) { </a> 0
<a> super ( ) ; </a> 0
<a> } </a> 0
<a> public FacebookOperationCanceledException ( String message ) { </a> 0
<a> super ( message ) ; </a> 0
<a> } </a> 0
<a> public FacebookOperationCanceledException ( String message , Throwable throwable ) { </a> 0
<a> super ( message , throwable ) ; </a> 0
<a> } </a> 0
<a> public FacebookOperationCanceledException ( Throwable throwable ) { </a> 0
<a> super ( throwable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public class FacebookServiceException extends FacebookException { </a> 0
<a> private final FacebookRequestError error ; </a> 0
<a> private static final long serialVersionUID = 1 ; </a> 0
<a> public FacebookServiceException ( FacebookRequestError error , String errorMessage ) { </a> 0
<a> super ( errorMessage ) ; </a> 0
<a> this . error = error ; </a> 0
<a> } </a> 0
<a> public final FacebookRequestError getRequestError ( ) { </a> 0
<a> return error ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final String toString ( ) { </a> 0
<a> return new StringBuilder ( ) </a> 0
<a> . append ( "{FacebookServiceException: " ) </a> 0
<a> . append ( "httpResponseCode: " ) </a> 0
<a> . append ( error . getRequestStatusCode ( ) ) </a> 0
<a> . append ( ", facebookErrorCode: " ) </a> 0
<a> . append ( error . getErrorCode ( ) ) </a> 0
<a> . append ( ", facebookErrorType: " ) </a> 0
<a> . append ( error . getErrorType ( ) ) </a> 0
<a> . append ( ", message: " ) </a> 0
<a> . append ( error . getErrorMessage ( ) ) </a> 0
<a> . append ( "}" ) </a> 0
<a> . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . * ; </a> 0
<a> import android . content . pm . ResolveInfo ; </a> 0
<a> import android . os . * ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . support . v4 . content . LocalBroadcastManager ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . internal . SessionAuthorizationType ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . lang . ref . WeakReference ; </a> 0
<a> import java . util . * ; </a> 0
<a> public class Session implements Serializable { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> public static final String TAG = Session . class . getCanonicalName ( ) ; </a> 0
<a> public static final int DEFAULT_AUTHORIZE_ACTIVITY_CODE = 0xface ; </a> 0
<a> public static final String WEB_VIEW_ERROR_CODE_KEY = "com.facebook.sdk.WebViewErrorCode" ; </a> 0
<a> public static final String WEB_VIEW_FAILING_URL_KEY = "com.facebook.sdk.FailingUrl" ; </a> 0
<a> public static final String ACTION_ACTIVE_SESSION_SET = "com.facebook.sdk.ACTIVE_SESSION_SET" ; </a> 0
<a> public static final String ACTION_ACTIVE_SESSION_UNSET = "com.facebook.sdk.ACTIVE_SESSION_UNSET" ; </a> 0
<a> public static final String ACTION_ACTIVE_SESSION_OPENED = "com.facebook.sdk.ACTIVE_SESSION_OPENED" ; </a> 0
<a> public static final String ACTION_ACTIVE_SESSION_CLOSED = "com.facebook.sdk.ACTIVE_SESSION_CLOSED" ; </a> 0
<a> public static final String APPLICATION_ID_PROPERTY = "com.facebook.sdk.ApplicationId" ; </a> 0
<a> private static final Object STATIC_LOCK = new Object ( ) ; </a> 0
<a> private static Session activeSession ; </a> 0
<a> private static volatile Context staticContext ; </a> 0
<a> private static final int TOKEN_EXTEND_THRESHOLD_SECONDS = 24 * 60 * 60 ; </a> 0
<a> private static final int TOKEN_EXTEND_RETRY_SECONDS = 60 * 60 ; </a> 0
<a> private static final String SESSION_BUNDLE_SAVE_KEY = "com.facebook.sdk.Session.saveSessionKey" ; </a> 0
<a> private static final String AUTH_BUNDLE_SAVE_KEY = "com.facebook.sdk.Session.authBundleKey" ; </a> 0
<a> private static final String PUBLISH_PERMISSION_PREFIX = "publish" ; </a> 0
<a> private static final String MANAGE_PERMISSION_PREFIX = "manage" ; </a> 0
<a> @ SuppressWarnings ( "serial" ) </a> 0
<a> private static final Set < String > OTHER_PUBLISH_PERMISSIONS = new HashSet < String > ( ) { { </a> 0
<a> add ( "ads_management" ) ; </a> 0
<a> add ( "create_event" ) ; </a> 0
<a> add ( "rsvp_event" ) ; </a> 0
<a> } } ; </a> 0
<a> private String applicationId ; </a> 0
<a> private SessionState state ; </a> 0
<a> private AccessToken tokenInfo ; </a> 0
<a> private Date lastAttemptedTokenExtendDate = new Date ( 0 ) ; </a> 0
<a> private AuthorizationRequest pendingRequest ; </a> 0
<a> private AuthorizationClient authorizationClient ; </a> 0
<a> private volatile Bundle authorizationBundle ; </a> 0
<a> private final List < StatusCallback > callbacks ; </a> 0
<a> private Handler handler ; </a> 0
<a> private AutoPublishAsyncTask autoPublishAsyncTask ; </a> 0
<a> private final Object lock = new Object ( ) ; </a> 0
<a> private TokenCachingStrategy tokenCachingStrategy ; </a> 0
<a> private volatile TokenRefreshRequest currentTokenRefreshRequest ; </a> 0
<a> private static class SerializationProxyV1 implements Serializable { </a> 0
<a> private static final long serialVersionUID = 7663436173185080063L ; </a> 0
<a> private final String applicationId ; </a> 0
<a> private final SessionState state ; </a> 0
<a> private final AccessToken tokenInfo ; </a> 0
<a> private final Date lastAttemptedTokenExtendDate ; </a> 0
<a> private final boolean shouldAutoPublish ; </a> 0
<a> private final AuthorizationRequest pendingRequest ; </a> 0
<a> SerializationProxyV1 ( String applicationId , SessionState state , </a> 0
<a> AccessToken tokenInfo , Date lastAttemptedTokenExtendDate , </a> 0
<a> boolean shouldAutoPublish , AuthorizationRequest pendingRequest ) { </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . state = state ; </a> 0
<a> this . tokenInfo = tokenInfo ; </a> 0
<a> this . lastAttemptedTokenExtendDate = lastAttemptedTokenExtendDate ; </a> 0
<a> this . shouldAutoPublish = shouldAutoPublish ; </a> 0
<a> this . pendingRequest = pendingRequest ; </a> 0
<a> } </a> 0
<a> private Object readResolve ( ) { </a> 0
<a> return new Session ( applicationId , state , tokenInfo , </a> 0
<a> lastAttemptedTokenExtendDate , shouldAutoPublish , pendingRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private Session ( String applicationId , SessionState state , </a> 0
<a> AccessToken tokenInfo , Date lastAttemptedTokenExtendDate , </a> 0
<a> boolean shouldAutoPublish , AuthorizationRequest pendingRequest ) { </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . state = state ; </a> 0
<a> this . tokenInfo = tokenInfo ; </a> 0
<a> this . lastAttemptedTokenExtendDate = lastAttemptedTokenExtendDate ; </a> 0
<a> this . pendingRequest = pendingRequest ; </a> 0
<a> handler = new Handler ( Looper . getMainLooper ( ) ) ; </a> 0
<a> currentTokenRefreshRequest = null ; </a> 0
<a> tokenCachingStrategy = null ; </a> 0
<a> callbacks = new ArrayList < StatusCallback > ( ) ; </a> 0
<a> } </a> 0
<a> public Session ( Context currentContext ) { </a> 0
<a> this ( currentContext , null , null , true ) ; </a> 0
<a> } </a> 0
<a> Session ( Context context , String applicationId , TokenCachingStrategy tokenCachingStrategy ) { </a> 0
<a> this ( context , applicationId , tokenCachingStrategy , true ) ; </a> 0
<a> } </a> 0
<a> Session ( Context context , String applicationId , TokenCachingStrategy tokenCachingStrategy , </a> 0
<a> boolean loadTokenFromCache ) { </a> 0
<a> if ( ( context != null ) && ( applicationId == null ) ) { </a> 0
<a> applicationId = Utility . getMetadataApplicationId ( context ) ; </a> 0
<a> } </a> 0
<a> Validate . notNull ( applicationId , "applicationId" ) ; </a> 0
<a> initializeStaticContext ( context ) ; </a> 0
<a> if ( tokenCachingStrategy == null ) { </a> 0
<a> tokenCachingStrategy = new SharedPreferencesTokenCachingStrategy ( staticContext ) ; </a> 0
<a> } </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . tokenCachingStrategy = tokenCachingStrategy ; </a> 0
<a> this . state = SessionState . CREATED ; </a> 0
<a> this . pendingRequest = null ; </a> 0
<a> this . callbacks = new ArrayList < StatusCallback > ( ) ; </a> 0
<a> this . handler = new Handler ( Looper . getMainLooper ( ) ) ; </a> 0
<a> Bundle tokenState = loadTokenFromCache ? tokenCachingStrategy . load ( ) : null ; </a> 0
<a> if ( TokenCachingStrategy . hasTokenInformation ( tokenState ) ) { </a> 0
<a> Date cachedExpirationDate = TokenCachingStrategy </a> 0
<a> . getDate ( tokenState , TokenCachingStrategy . EXPIRATION_DATE_KEY ) ; </a> 0
<a> Date now = new Date ( ) ; </a> 0
<a> if ( ( cachedExpirationDate == null ) || cachedExpirationDate . before ( now ) ) { </a> 0
<a> tokenCachingStrategy . clear ( ) ; </a> 0
<a> this . tokenInfo = AccessToken . createEmptyToken ( Collections . < String > emptyList ( ) ) ; </a> 0
<a> } else { </a> 0
<a> this . tokenInfo = AccessToken . createFromCache ( tokenState ) ; </a> 0
<a> this . state = SessionState . CREATED_TOKEN_LOADED ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> this . tokenInfo = AccessToken . createEmptyToken ( Collections . < String > emptyList ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final Bundle getAuthorizationBundle ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return this . authorizationBundle ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final boolean isOpened ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return this . state . isOpened ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final boolean isClosed ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return this . state . isClosed ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final SessionState getState ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return this . state ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final String getApplicationId ( ) { </a> 0
<a> return this . applicationId ; </a> 0
<a> } </a> 0
<a> public final String getAccessToken ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return ( this . tokenInfo == null ) ? null : this . tokenInfo . getToken ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final Date getExpirationDate ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return ( this . tokenInfo == null ) ? null : this . tokenInfo . getExpires ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final List < String > getPermissions ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> return ( this . tokenInfo == null ) ? null : this . tokenInfo . getPermissions ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final void openForRead ( OpenRequest openRequest ) { </a> 0
<a> open ( openRequest , SessionAuthorizationType . READ ) ; </a> 0
<a> } </a> 0
<a> public final void openForPublish ( OpenRequest openRequest ) { </a> 0
<a> open ( openRequest , SessionAuthorizationType . PUBLISH ) ; </a> 0
<a> } </a> 0
<a> public final void open ( AccessToken accessToken , StatusCallback callback ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> "Session: an attempt was made to open a session that has a pending request." ) ; </a> 0
<a> } </a> 0
<a> if ( state != SessionState . CREATED && state != SessionState . CREATED_TOKEN_LOADED ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> "Session: an attempt was made to open an already opened session." ) ; </a> 0
<a> } </a> 0
<a> if ( callback != null ) { </a> 0
<a> addCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> this . tokenInfo = accessToken ; </a> 0
<a> if ( this . tokenCachingStrategy != null ) { </a> 0
<a> this . tokenCachingStrategy . save ( accessToken . toCacheBundle ( ) ) ; </a> 0
<a> } </a> 0
<a> final SessionState oldState = state ; </a> 0
<a> state = SessionState . OPENED ; </a> 0
<a> this . postStateChange ( oldState , state , null ) ; </a> 0
<a> } </a> 0
<a> autoPublishAsync ( ) ; </a> 0
<a> } </a> 0
<a> public final void requestNewReadPermissions ( NewPermissionsRequest newPermissionsRequest ) { </a> 0
<a> requestNewPermissions ( newPermissionsRequest , SessionAuthorizationType . READ ) ; </a> 0
<a> } </a> 0
<a> public final void requestNewPublishPermissions ( NewPermissionsRequest newPermissionsRequest ) { </a> 0
<a> requestNewPermissions ( newPermissionsRequest , SessionAuthorizationType . PUBLISH ) ; </a> 0
<a> } </a> 0
<a> public final boolean onActivityResult ( Activity currentActivity , int requestCode , int resultCode , Intent data ) { </a> 0
<a> Validate . notNull ( currentActivity , "currentActivity" ) ; </a> 0
<a> initializeStaticContext ( currentActivity ) ; </a> 0
<a> synchronized ( lock ) { </a> 0
<a> if ( pendingRequest == null || ( requestCode != pendingRequest . getRequestCode ( ) ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> AccessToken newToken = null ; </a> 0
<a> Exception exception = null ; </a> 0
<a> if ( data != null ) { </a> 0
<a> AuthorizationClient . Result result = ( AuthorizationClient . Result ) data . getSerializableExtra ( </a> 0
<a> LoginActivity . RESULT_KEY ) ; </a> 0
<a> if ( result != null ) { </a> 0
<a> handleAuthorizationResult ( resultCode , result ) ; </a> 0
<a> return true ; </a> 0
<a> } else if ( authorizationClient != null ) { </a> 0
<a> authorizationClient . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } else if ( resultCode == Activity . RESULT_CANCELED ) { </a> 0
<a> exception = new FacebookOperationCanceledException ( "User canceled operation." ) ; </a> 0
<a> } </a> 0
<a> finishAuthOrReauth ( newToken , exception ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "incomplete-switch" ) </a> 0
<a> public final void close ( ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> final SessionState oldState = this . state ; </a> 0
<a> switch ( this . state ) { </a> 0
<a> case CREATED : </a> 0
<a> case OPENING : </a> 0
<a> this . state = SessionState . CLOSED_LOGIN_FAILED ; </a> 0
<a> postStateChange ( oldState , this . state , new FacebookException ( </a> 0
<a> "Log in attempt aborted." ) ) ; </a> 0
<a> break ; </a> 0
<a> case CREATED_TOKEN_LOADED : </a> 0
<a> case OPENED : </a> 0
<a> case OPENED_TOKEN_UPDATED : </a> 0
<a> this . state = SessionState . CLOSED ; </a> 0
<a> postStateChange ( oldState , this . state , null ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final void closeAndClearTokenInformation ( ) { </a> 0
<a> if ( this . tokenCachingStrategy != null ) { </a> 0
<a> this . tokenCachingStrategy . clear ( ) ; </a> 0
<a> } </a> 0
<a> Utility . clearFacebookCookies ( staticContext ) ; </a> 0
<a> close ( ) ; </a> 0
<a> } </a> 0
<a> public final void addCallback ( StatusCallback callback ) { </a> 0
<a> synchronized ( callbacks ) { </a> 0
<a> if ( callback != null && ! callbacks . contains ( callback ) ) { </a> 0
<a> callbacks . add ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public final void removeCallback ( StatusCallback callback ) { </a> 0
<a> synchronized ( callbacks ) { </a> 0
<a> callbacks . remove ( callback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public String toString ( ) { </a> 0
<a> return new StringBuilder ( ) . append ( "{Session" ) . append ( " state:" ) . append ( this . state ) . append ( ", token:" ) </a> 0
<a> . append ( ( this . tokenInfo == null ) ? "null" : this . tokenInfo ) . append ( ", appId:" ) </a> 0
<a> . append ( ( this . applicationId == null ) ? "null" : this . applicationId ) . append ( "}" ) . toString ( ) ; </a> 0
<a> } </a> 0
<a> void extendTokenCompleted ( Bundle bundle ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> final SessionState oldState = this . state ; </a> 0
<a> switch ( this . state ) { </a> 0
<a> case OPENED : </a> 0
<a> this . state = SessionState . OPENED_TOKEN_UPDATED ; </a> 0
<a> postStateChange ( oldState , this . state , null ) ; </a> 0
<a> break ; </a> 0
<a> case OPENED_TOKEN_UPDATED : </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> Log . d ( TAG , "refreshToken ignored in state " + this . state ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> this . tokenInfo = AccessToken . createFromRefresh ( this . tokenInfo , bundle ) ; </a> 0
<a> if ( this . tokenCachingStrategy != null ) { </a> 0
<a> this . tokenCachingStrategy . save ( this . tokenInfo . toCacheBundle ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private Object writeReplace ( ) { </a> 0
<a> return new SerializationProxyV1 ( applicationId , state , tokenInfo , </a> 0
<a> lastAttemptedTokenExtendDate , false , pendingRequest ) ; </a> 0
<a> } </a> 0
<a> private void readObject ( ObjectInputStream stream ) throws InvalidObjectException { </a> 0
<a> throw new InvalidObjectException ( "Cannot readObject, serialization proxy required" ) ; </a> 0
<a> } </a> 0
<a> public static final void saveSession ( Session session , Bundle bundle ) { </a> 0
<a> if ( bundle != null && session != null && ! bundle . containsKey ( SESSION_BUNDLE_SAVE_KEY ) ) { </a> 0
<a> ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; </a> 0
<a> try { </a> 0
<a> new ObjectOutputStream ( outputStream ) . writeObject ( session ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> throw new FacebookException ( "Unable to save session." , e ) ; </a> 0
<a> } </a> 0
<a> bundle . putByteArray ( SESSION_BUNDLE_SAVE_KEY , outputStream . toByteArray ( ) ) ; </a> 0
<a> bundle . putBundle ( AUTH_BUNDLE_SAVE_KEY , session . authorizationBundle ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final Session restoreSession ( </a> 0
<a> Context context , TokenCachingStrategy cachingStrategy , StatusCallback callback , Bundle bundle ) { </a> 0
<a> if ( bundle == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> byte [ ] data = bundle . getByteArray ( SESSION_BUNDLE_SAVE_KEY ) ; </a> 0
<a> if ( data != null ) { </a> 0
<a> ByteArrayInputStream is = new ByteArrayInputStream ( data ) ; </a> 0
<a> try { </a> 0
<a> Session session = ( Session ) ( new ObjectInputStream ( is ) ) . readObject ( ) ; </a> 0
<a> initializeStaticContext ( context ) ; </a> 0
<a> if ( cachingStrategy != null ) { </a> 0
<a> session . tokenCachingStrategy = cachingStrategy ; </a> 0
<a> } else { </a> 0
<a> session . tokenCachingStrategy = new SharedPreferencesTokenCachingStrategy ( context ) ; </a> 0
<a> } </a> 0
<a> if ( callback != null ) { </a> 0
<a> session . addCallback ( callback ) ; </a> 0
<a> } </a> 0
<a> session . authorizationBundle = bundle . getBundle ( AUTH_BUNDLE_SAVE_KEY ) ; </a> 0
<a> return session ; </a> 0
<a> } catch ( ClassNotFoundException e ) { </a> 0
<a> Log . w ( TAG , "Unable to restore session" , e ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> Log . w ( TAG , "Unable to restore session." , e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> public static final Session getActiveSession ( ) { </a> 0
<a> synchronized ( Session . STATIC_LOCK ) { </a> 0
<a> return Session . activeSession ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final void setActiveSession ( Session session ) { </a> 0
<a> synchronized ( Session . STATIC_LOCK ) { </a> 0
<a> if ( session != Session . activeSession ) { </a> 0
<a> Session oldSession = Session . activeSession ; </a> 0
<a> if ( oldSession != null ) { </a> 0
<a> oldSession . close ( ) ; </a> 0
<a> } </a> 0
<a> Session . activeSession = session ; </a> 0
<a> if ( oldSession != null ) { </a> 0
<a> postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_UNSET ) ; </a> 0
<a> } </a> 0
<a> if ( session != null ) { </a> 0
<a> postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_SET ) ; </a> 0
<a> if ( session . isOpened ( ) ) { </a> 0
<a> postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_OPENED ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static Session openActiveSessionFromCache ( Context context ) { </a> 0
<a> return openActiveSession ( context , false , null ) ; </a> 0
<a> } </a> 0
<a> public static Session openActiveSession ( Activity activity , boolean allowLoginUI , </a> 0
<a> StatusCallback callback ) { </a> 0
<a> return openActiveSession ( activity , allowLoginUI , new OpenRequest ( activity ) . setCallback ( callback ) ) ; </a> 0
<a> } </a> 0
<a> public static Session openActiveSession ( Context context , Fragment fragment , </a> 0
<a> boolean allowLoginUI , StatusCallback callback ) { </a> 0
<a> return openActiveSession ( context , allowLoginUI , new OpenRequest ( fragment ) . setCallback ( callback ) ) ; </a> 0
<a> } </a> 0
<a> public static Session openActiveSessionWithAccessToken ( Context context , AccessToken accessToken , </a> 0
<a> StatusCallback callback ) { </a> 0
<a> Session session = new Session ( context , null , null , false ) ; </a> 0
<a> setActiveSession ( session ) ; </a> 0
<a> session . open ( accessToken , callback ) ; </a> 0
<a> return session ; </a> 0
<a> } </a> 0
<a> private static Session openActiveSession ( Context context , boolean allowLoginUI , OpenRequest openRequest ) { </a> 0
<a> Session session = new Builder ( context ) . build ( ) ; </a> 0
<a> if ( SessionState . CREATED_TOKEN_LOADED . equals ( session . getState ( ) ) || allowLoginUI ) { </a> 0
<a> setActiveSession ( session ) ; </a> 0
<a> session . openForRead ( openRequest ) ; </a> 0
<a> return session ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> static Context getStaticContext ( ) { </a> 0
<a> return staticContext ; </a> 0
<a> } </a> 0
<a> static void initializeStaticContext ( Context currentContext ) { </a> 0
<a> if ( ( currentContext != null ) && ( staticContext == null ) ) { </a> 0
<a> Context applicationContext = currentContext . getApplicationContext ( ) ; </a> 0
<a> staticContext = ( applicationContext != null ) ? applicationContext : currentContext ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void authorize ( AuthorizationRequest request ) { </a> 0
<a> boolean started = false ; </a> 0
<a> request . setApplicationId ( applicationId ) ; </a> 0
<a> autoPublishAsync ( ) ; </a> 0
<a> started = tryLoginActivity ( request ) ; </a> 0
<a> if ( ! started && request . isLegacy ) { </a> 0
<a> started = tryLegacyAuth ( request ) ; </a> 0
<a> } </a> 0
<a> if ( ! started ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> final SessionState oldState = this . state ; </a> 0
<a> switch ( this . state ) { </a> 0
<a> case CLOSED : </a> 0
<a> case CLOSED_LOGIN_FAILED : </a> 0
<a> return ; </a> 0
<a> default : </a> 0
<a> this . state = SessionState . CLOSED_LOGIN_FAILED ; </a> 0
<a> postStateChange ( oldState , this . state , new FacebookException ( "Log in attempt failed." ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void open ( OpenRequest openRequest , SessionAuthorizationType authType ) { </a> 0
<a> validatePermissions ( openRequest , authType ) ; </a> 0
<a> validateLoginBehavior ( openRequest ) ; </a> 0
<a> SessionState newState ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> postStateChange ( state , state , new UnsupportedOperationException ( </a> 0
<a> "Session: an attempt was made to open a session that has a pending request." ) ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> final SessionState oldState = this . state ; </a> 0
<a> switch ( this . state ) { </a> 0
<a> case CREATED : </a> 0
<a> this . state = newState = SessionState . OPENING ; </a> 0
<a> if ( openRequest == null ) { </a> 0
<a> throw new IllegalArgumentException ( "openRequest cannot be null when opening a new Session" ) ; </a> 0
<a> } </a> 0
<a> pendingRequest = openRequest ; </a> 0
<a> break ; </a> 0
<a> case CREATED_TOKEN_LOADED : </a> 0
<a> if ( openRequest != null && ! Utility . isNullOrEmpty ( openRequest . getPermissions ( ) ) ) { </a> 0
<a> if ( ! Utility . isSubset ( openRequest . getPermissions ( ) , getPermissions ( ) ) ) { </a> 0
<a> pendingRequest = openRequest ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( pendingRequest == null ) { </a> 0
<a> this . state = newState = SessionState . OPENED ; </a> 0
<a> } else { </a> 0
<a> this . state = newState = SessionState . OPENING ; </a> 0
<a> } </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> "Session: an attempt was made to open an already opened session." ) ; </a> 0
<a> } </a> 0
<a> if ( openRequest != null ) { </a> 0
<a> addCallback ( openRequest . getCallback ( ) ) ; </a> 0
<a> } </a> 0
<a> this . postStateChange ( oldState , newState , null ) ; </a> 0
<a> } </a> 0
<a> if ( newState == SessionState . OPENING ) { </a> 0
<a> authorize ( openRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void requestNewPermissions ( NewPermissionsRequest newPermissionsRequest , SessionAuthorizationType authType ) { </a> 0
<a> validatePermissions ( newPermissionsRequest , authType ) ; </a> 0
<a> validateLoginBehavior ( newPermissionsRequest ) ; </a> 0
<a> if ( newPermissionsRequest != null ) { </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> "Session: an attempt was made to request new permissions for a session that has a pending request." ) ; </a> 0
<a> } </a> 0
<a> switch ( this . state ) { </a> 0
<a> case OPENED : </a> 0
<a> case OPENED_TOKEN_UPDATED : </a> 0
<a> pendingRequest = newPermissionsRequest ; </a> 0
<a> break ; </a> 0
<a> default : </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> "Session: an attempt was made to request new permissions for a session that is not currently open." ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> newPermissionsRequest . setValidateSameFbidAsToken ( getAccessToken ( ) ) ; </a> 0
<a> authorize ( newPermissionsRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void validateLoginBehavior ( AuthorizationRequest request ) { </a> 0
<a> if ( request != null && ! request . isLegacy ) { </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . setClass ( getStaticContext ( ) , LoginActivity . class ) ; </a> 0
<a> if ( ! resolveIntent ( intent ) ) { </a> 0
<a> throw new FacebookException ( String . format ( </a> 0
<a> "Cannot use SessionLoginBehavior %s when %s is not declared as an activity in AndroidManifest.xml" , </a> 0
<a> request . getLoginBehavior ( ) , LoginActivity . class . getName ( ) ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void validatePermissions ( AuthorizationRequest request , SessionAuthorizationType authType ) { </a> 0
<a> if ( request == null || Utility . isNullOrEmpty ( request . getPermissions ( ) ) ) { </a> 0
<a> if ( SessionAuthorizationType . PUBLISH . equals ( authType ) ) { </a> 0
<a> throw new FacebookException ( "Cannot request publish or manage authorization with no permissions." ) ; </a> 0
<a> } </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> for ( String permission : request . getPermissions ( ) ) { </a> 0
<a> if ( isPublishPermission ( permission ) ) { </a> 0
<a> if ( SessionAuthorizationType . READ . equals ( authType ) ) { </a> 0
<a> throw new FacebookException ( </a> 0
<a> String . format ( </a> 0
<a> "Cannot pass a publish or manage permission (%s) to a request for read authorization" , </a> 0
<a> permission ) ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> if ( SessionAuthorizationType . PUBLISH . equals ( authType ) ) { </a> 0
<a> Log . w ( TAG , </a> 0
<a> String . format ( </a> 0
<a> "Should not pass a read permission (%s) to a request for publish or manage authorization" , </a> 0
<a> permission ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static boolean isPublishPermission ( String permission ) { </a> 0
<a> return permission != null && </a> 0
<a> ( permission . startsWith ( PUBLISH_PERMISSION_PREFIX ) || </a> 0
<a> permission . startsWith ( MANAGE_PERMISSION_PREFIX ) || </a> 0
<a> OTHER_PUBLISH_PERMISSIONS . contains ( permission ) ) ; </a> 0
<a> } </a> 0
<a> private void handleAuthorizationResult ( int resultCode , AuthorizationClient . Result result ) { </a> 0
<a> AccessToken newToken = null ; </a> 0
<a> Exception exception = null ; </a> 0
<a> if ( resultCode == Activity . RESULT_OK ) { </a> 0
<a> if ( result . code == AuthorizationClient . Result . Code . SUCCESS ) { </a> 0
<a> newToken = result . token ; </a> 0
<a> } else { </a> 0
<a> exception = new FacebookAuthorizationException ( result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> } else if ( resultCode == Activity . RESULT_CANCELED ) { </a> 0
<a> exception = new FacebookOperationCanceledException ( result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> authorizationClient = null ; </a> 0
<a> finishAuthOrReauth ( newToken , exception ) ; </a> 0
<a> } </a> 0
<a> private boolean tryLoginActivity ( AuthorizationRequest request ) { </a> 0
<a> Intent intent = getLoginActivityIntent ( request ) ; </a> 0
<a> if ( ! resolveIntent ( intent ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> try { </a> 0
<a> request . getStartActivityDelegate ( ) . startActivityForResult ( intent , request . getRequestCode ( ) ) ; </a> 0
<a> } catch ( ActivityNotFoundException e ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> private boolean resolveIntent ( Intent intent ) { </a> 0
<a> ResolveInfo resolveInfo = getStaticContext ( ) . getPackageManager ( ) . resolveActivity ( intent , 0 ) ; </a> 0
<a> if ( resolveInfo == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> private Intent getLoginActivityIntent ( AuthorizationRequest request ) { </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . setClass ( getStaticContext ( ) , LoginActivity . class ) ; </a> 0
<a> intent . setAction ( request . getLoginBehavior ( ) . toString ( ) ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest authClientRequest = request . getAuthorizationClientRequest ( ) ; </a> 0
<a> Bundle extras = LoginActivity . populateIntentExtras ( authClientRequest ) ; </a> 0
<a> intent . putExtras ( extras ) ; </a> 0
<a> return intent ; </a> 0
<a> } </a> 0
<a> private boolean tryLegacyAuth ( final AuthorizationRequest request ) { </a> 0
<a> authorizationClient = new AuthorizationClient ( ) ; </a> 0
<a> authorizationClient . setOnCompletedListener ( new AuthorizationClient . OnCompletedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( AuthorizationClient . Result result ) { </a> 0
<a> handleAuthorizationResult ( Activity . RESULT_OK , result ) ; </a> 1
<a> } </a> 0
<a> } ) ; </a> 0
<a> authorizationClient . setContext ( getStaticContext ( ) ) ; </a> 0
<a> authorizationClient . startOrContinueAuth ( request . getAuthorizationClientRequest ( ) ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "incomplete-switch" ) </a> 0
<a> void finishAuthOrReauth ( AccessToken newToken , Exception exception ) { </a> 0
<a> if ( ( newToken != null ) && newToken . isInvalid ( ) ) { </a> 0
<a> newToken = null ; </a> 0
<a> exception = new FacebookException ( "Invalid access token." ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> switch ( this . state ) { </a> 0
<a> case OPENING : </a> 0
<a> finishAuthorization ( newToken , exception ) ; </a> 0
<a> break ; </a> 0
<a> case OPENED : </a> 0
<a> case OPENED_TOKEN_UPDATED : </a> 0
<a> finishReauthorization ( newToken , exception ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void finishAuthorization ( AccessToken newToken , Exception exception ) { </a> 0
<a> final SessionState oldState = state ; </a> 0
<a> if ( newToken != null ) { </a> 0
<a> tokenInfo = newToken ; </a> 0
<a> saveTokenToCache ( newToken ) ; </a> 0
<a> state = SessionState . OPENED ; </a> 0
<a> } else if ( exception != null ) { </a> 0
<a> state = SessionState . CLOSED_LOGIN_FAILED ; </a> 0
<a> } </a> 0
<a> pendingRequest = null ; </a> 0
<a> postStateChange ( oldState , state , exception ) ; </a> 0
<a> } </a> 0
<a> private void finishReauthorization ( final AccessToken newToken , Exception exception ) { </a> 0
<a> final SessionState oldState = state ; </a> 0
<a> if ( newToken != null ) { </a> 0
<a> tokenInfo = newToken ; </a> 0
<a> saveTokenToCache ( newToken ) ; </a> 0
<a> state = SessionState . OPENED_TOKEN_UPDATED ; </a> 0
<a> } </a> 0
<a> pendingRequest = null ; </a> 0
<a> postStateChange ( oldState , state , exception ) ; </a> 0
<a> } </a> 0
<a> private void saveTokenToCache ( AccessToken newToken ) { </a> 0
<a> if ( newToken != null && tokenCachingStrategy != null ) { </a> 0
<a> tokenCachingStrategy . save ( newToken . toCacheBundle ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void postStateChange ( final SessionState oldState , final SessionState newState , final Exception exception ) { </a> 0
<a> if ( oldState == newState && exception == null ) { </a> 1
<a> return ; </a> 0
<a> } </a> 0
<a> if ( newState . isClosed ( ) ) { </a> 0
<a> this . tokenInfo = AccessToken . createEmptyToken ( Collections . < String > emptyList ( ) ) ; </a> 0
<a> } </a> 0
<a> synchronized ( callbacks ) { </a> 0
<a> Runnable runCallbacks = new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> for ( final StatusCallback callback : callbacks ) { </a> 0
<a> Runnable closure = new Runnable ( ) { </a> 0
<a> public void run ( ) { </a> 0
<a> callback . call ( Session . this , newState , exception ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> runWithHandlerOrExecutor ( handler , closure ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> runWithHandlerOrExecutor ( handler , runCallbacks ) ; </a> 0
<a> } </a> 0
<a> if ( this == Session . activeSession ) { </a> 0
<a> if ( oldState . isOpened ( ) != newState . isOpened ( ) ) { </a> 0
<a> if ( newState . isOpened ( ) ) { </a> 0
<a> postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_OPENED ) ; </a> 0
<a> } else { </a> 0
<a> postActiveSessionAction ( Session . ACTION_ACTIVE_SESSION_CLOSED ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static void postActiveSessionAction ( String action ) { </a> 0
<a> final Intent intent = new Intent ( action ) ; </a> 0
<a> LocalBroadcastManager . getInstance ( getStaticContext ( ) ) . sendBroadcast ( intent ) ; </a> 0
<a> } </a> 0
<a> private static void runWithHandlerOrExecutor ( Handler handler , Runnable runnable ) { </a> 0
<a> if ( handler != null ) { </a> 0
<a> handler . post ( runnable ) ; </a> 0
<a> } else { </a> 0
<a> Settings . getExecutor ( ) . execute ( runnable ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void extendAccessTokenIfNeeded ( ) { </a> 0
<a> if ( shouldExtendAccessToken ( ) ) { </a> 0
<a> extendAccessToken ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void extendAccessToken ( ) { </a> 0
<a> TokenRefreshRequest newTokenRefreshRequest = null ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( currentTokenRefreshRequest == null ) { </a> 0
<a> newTokenRefreshRequest = new TokenRefreshRequest ( ) ; </a> 0
<a> currentTokenRefreshRequest = newTokenRefreshRequest ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( newTokenRefreshRequest != null ) { </a> 0
<a> newTokenRefreshRequest . bind ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean shouldExtendAccessToken ( ) { </a> 0
<a> if ( currentTokenRefreshRequest != null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> boolean result = false ; </a> 0
<a> Date now = new Date ( ) ; </a> 0
<a> if ( state . isOpened ( ) && tokenInfo . getSource ( ) . canExtendToken ( ) </a> 0
<a> && now . getTime ( ) - lastAttemptedTokenExtendDate . getTime ( ) > TOKEN_EXTEND_RETRY_SECONDS * 1000 </a> 0
<a> && now . getTime ( ) - tokenInfo . getLastRefresh ( ) . getTime ( ) > TOKEN_EXTEND_THRESHOLD_SECONDS * 1000 ) { </a> 0
<a> result = true ; </a> 0
<a> } </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> AccessToken getTokenInfo ( ) { </a> 0
<a> return tokenInfo ; </a> 0
<a> } </a> 0
<a> void setTokenInfo ( AccessToken tokenInfo ) { </a> 0
<a> this . tokenInfo = tokenInfo ; </a> 0
<a> } </a> 0
<a> Date getLastAttemptedTokenExtendDate ( ) { </a> 0
<a> return lastAttemptedTokenExtendDate ; </a> 0
<a> } </a> 0
<a> void setLastAttemptedTokenExtendDate ( Date lastAttemptedTokenExtendDate ) { </a> 0
<a> this . lastAttemptedTokenExtendDate = lastAttemptedTokenExtendDate ; </a> 0
<a> } </a> 0
<a> void setCurrentTokenRefreshRequest ( TokenRefreshRequest request ) { </a> 0
<a> this . currentTokenRefreshRequest = request ; </a> 0
<a> } </a> 0
<a> class TokenRefreshRequest implements ServiceConnection { </a> 0
<a> final Messenger messageReceiver = new Messenger ( </a> 0
<a> new TokenRefreshRequestHandler ( Session . this , this ) ) ; </a> 0
<a> Messenger messageSender = null ; </a> 0
<a> public void bind ( ) { </a> 0
<a> Intent intent = NativeProtocol . createTokenRefreshIntent ( getStaticContext ( ) ) ; </a> 0
<a> if ( intent != null </a> 0
<a> && staticContext . bindService ( intent , new TokenRefreshRequest ( ) , Context . BIND_AUTO_CREATE ) ) { </a> 0
<a> setLastAttemptedTokenExtendDate ( new Date ( ) ) ; </a> 0
<a> } else { </a> 0
<a> cleanup ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onServiceConnected ( ComponentName className , IBinder service ) { </a> 0
<a> messageSender = new Messenger ( service ) ; </a> 0
<a> refreshToken ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onServiceDisconnected ( ComponentName arg ) { </a> 0
<a> cleanup ( ) ; </a> 0
<a> staticContext . unbindService ( TokenRefreshRequest . this ) ; </a> 0
<a> } </a> 0
<a> private void cleanup ( ) { </a> 0
<a> if ( currentTokenRefreshRequest == this ) { </a> 0
<a> currentTokenRefreshRequest = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void refreshToken ( ) { </a> 0
<a> Bundle requestData = new Bundle ( ) ; </a> 0
<a> requestData . putString ( AccessToken . ACCESS_TOKEN_KEY , getTokenInfo ( ) . getToken ( ) ) ; </a> 0
<a> Message request = Message . obtain ( ) ; </a> 0
<a> request . setData ( requestData ) ; </a> 0
<a> request . replyTo = messageReceiver ; </a> 0
<a> try { </a> 0
<a> messageSender . send ( request ) ; </a> 0
<a> } catch ( RemoteException e ) { </a> 0
<a> cleanup ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static class TokenRefreshRequestHandler extends Handler { </a> 0
<a> private WeakReference < Session > sessionWeakReference ; </a> 0
<a> private WeakReference < TokenRefreshRequest > refreshRequestWeakReference ; </a> 0
<a> TokenRefreshRequestHandler ( Session session , TokenRefreshRequest refreshRequest ) { </a> 0
<a> super ( Looper . getMainLooper ( ) ) ; </a> 0
<a> sessionWeakReference = new WeakReference < Session > ( session ) ; </a> 0
<a> refreshRequestWeakReference = new WeakReference < TokenRefreshRequest > ( refreshRequest ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void handleMessage ( Message msg ) { </a> 0
<a> String token = msg . getData ( ) . getString ( AccessToken . ACCESS_TOKEN_KEY ) ; </a> 0
<a> Session session = sessionWeakReference . get ( ) ; </a> 0
<a> if ( session != null && token != null ) { </a> 0
<a> session . extendTokenCompleted ( msg . getData ( ) ) ; </a> 0
<a> } </a> 0
<a> TokenRefreshRequest request = refreshRequestWeakReference . get ( ) ; </a> 0
<a> if ( request != null ) { </a> 0
<a> staticContext . unbindService ( request ) ; </a> 0
<a> request . cleanup ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public interface StatusCallback { </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int hashCode ( ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean equals ( Object otherObj ) { </a> 0
<a> if ( ! ( otherObj instanceof Session ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> Session other = ( Session ) otherObj ; </a> 0
<a> return areEqual ( other . applicationId , applicationId ) && </a> 0
<a> areEqual ( other . authorizationBundle , authorizationBundle ) && </a> 0
<a> areEqual ( other . state , state ) && </a> 0
<a> areEqual ( other . getExpirationDate ( ) , getExpirationDate ( ) ) ; </a> 0
<a> } </a> 0
<a> private static boolean areEqual ( Object a , Object b ) { </a> 0
<a> if ( a == null ) { </a> 0
<a> return b == null ; </a> 0
<a> } else { </a> 0
<a> return a . equals ( b ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final class Builder { </a> 0
<a> private final Context context ; </a> 0
<a> private String applicationId ; </a> 0
<a> private TokenCachingStrategy tokenCachingStrategy ; </a> 0
<a> public Builder ( Context context ) { </a> 0
<a> this . context = context ; </a> 0
<a> } </a> 0
<a> public Builder setApplicationId ( final String applicationId ) { </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Builder setTokenCachingStrategy ( final TokenCachingStrategy tokenCachingStrategy ) { </a> 0
<a> this . tokenCachingStrategy = tokenCachingStrategy ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public Session build ( ) { </a> 0
<a> return new Session ( context , applicationId , tokenCachingStrategy ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> interface StartActivityDelegate { </a> 0
<a> public void startActivityForResult ( Intent intent , int requestCode ) ; </a> 0
<a> public Activity getActivityContext ( ) ; </a> 0
<a> } </a> 0
<a> private void autoPublishAsync ( ) { </a> 0
<a> AutoPublishAsyncTask asyncTask = null ; </a> 0
<a> synchronized ( this ) { </a> 0
<a> if ( autoPublishAsyncTask == null && Settings . getShouldAutoPublishInstall ( ) ) { </a> 0
<a> String applicationId = Session . this . applicationId ; </a> 0
<a> if ( applicationId != null ) { </a> 0
<a> asyncTask = autoPublishAsyncTask = new AutoPublishAsyncTask ( applicationId , staticContext ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( asyncTask != null ) { </a> 0
<a> asyncTask . execute ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class AutoPublishAsyncTask extends AsyncTask < Void , Void , Void > { </a> 0
<a> private final String mApplicationId ; </a> 0
<a> private final Context mApplicationContext ; </a> 0
<a> public AutoPublishAsyncTask ( String applicationId , Context context ) { </a> 0
<a> mApplicationId = applicationId ; </a> 0
<a> mApplicationContext = context . getApplicationContext ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected Void doInBackground ( Void ... voids ) { </a> 0
<a> try { </a> 0
<a> Settings . publishInstallAndWait ( mApplicationContext , mApplicationId ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> Utility . logd ( "Facebook-publish" , e . getMessage ( ) ) ; </a> 1
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onPostExecute ( Void result ) { </a> 0
<a> synchronized ( Session . this ) { </a> 0
<a> autoPublishAsyncTask = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static class AuthorizationRequest implements Serializable { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> private final StartActivityDelegate startActivityDelegate ; </a> 0
<a> private SessionLoginBehavior loginBehavior = SessionLoginBehavior . SSO_WITH_FALLBACK ; </a> 0
<a> private int requestCode = DEFAULT_AUTHORIZE_ACTIVITY_CODE ; </a> 0
<a> private StatusCallback statusCallback ; </a> 0
<a> private boolean isLegacy = false ; </a> 0
<a> private List < String > permissions = Collections . emptyList ( ) ; </a> 0
<a> private SessionDefaultAudience defaultAudience = SessionDefaultAudience . FRIENDS ; </a> 0
<a> private String applicationId ; </a> 0
<a> private String validateSameFbidAsToken ; </a> 0
<a> AuthorizationRequest ( final Activity activity ) { </a> 0
<a> startActivityDelegate = new StartActivityDelegate ( ) { </a> 0
<a> @ Override </a> 0
<a> public void startActivityForResult ( Intent intent , int requestCode ) { </a> 0
<a> activity . startActivityForResult ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity getActivityContext ( ) { </a> 0
<a> return activity ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest ( final Fragment fragment ) { </a> 0
<a> startActivityDelegate = new StartActivityDelegate ( ) { </a> 0
<a> @ Override </a> 0
<a> public void startActivityForResult ( Intent intent , int requestCode ) { </a> 0
<a> fragment . startActivityForResult ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity getActivityContext ( ) { </a> 0
<a> return fragment . getActivity ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> private AuthorizationRequest ( SessionLoginBehavior loginBehavior , int requestCode , </a> 0
<a> List < String > permissions , String defaultAudience , boolean isLegacy , String applicationId , </a> 0
<a> String validateSameFbidAsToken ) { </a> 0
<a> startActivityDelegate = new StartActivityDelegate ( ) { </a> 0
<a> @ Override </a> 0
<a> public void startActivityForResult ( Intent intent , int requestCode ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> "Cannot create an AuthorizationRequest without a valid Activity or Fragment" ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity getActivityContext ( ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> "Cannot create an AuthorizationRequest without a valid Activity or Fragment" ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> this . loginBehavior = loginBehavior ; </a> 0
<a> this . requestCode = requestCode ; </a> 0
<a> this . permissions = permissions ; </a> 0
<a> this . defaultAudience = SessionDefaultAudience . valueOf ( defaultAudience ) ; </a> 0
<a> this . isLegacy = isLegacy ; </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . validateSameFbidAsToken = validateSameFbidAsToken ; </a> 0
<a> } </a> 0
<a> public void setIsLegacy ( boolean isLegacy ) { </a> 0
<a> this . isLegacy = isLegacy ; </a> 0
<a> } </a> 0
<a> boolean isLegacy ( ) { </a> 0
<a> return isLegacy ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest setCallback ( StatusCallback statusCallback ) { </a> 0
<a> this . statusCallback = statusCallback ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> StatusCallback getCallback ( ) { </a> 0
<a> return statusCallback ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest setLoginBehavior ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> if ( loginBehavior != null ) { </a> 0
<a> this . loginBehavior = loginBehavior ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> SessionLoginBehavior getLoginBehavior ( ) { </a> 0
<a> return loginBehavior ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest setRequestCode ( int requestCode ) { </a> 0
<a> if ( requestCode >= 0 ) { </a> 0
<a> this . requestCode = requestCode ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> int getRequestCode ( ) { </a> 0
<a> return requestCode ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest setPermissions ( List < String > permissions ) { </a> 0
<a> if ( permissions != null ) { </a> 0
<a> this . permissions = permissions ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> List < String > getPermissions ( ) { </a> 0
<a> return permissions ; </a> 0
<a> } </a> 0
<a> AuthorizationRequest setDefaultAudience ( SessionDefaultAudience defaultAudience ) { </a> 0
<a> if ( defaultAudience != null ) { </a> 0
<a> this . defaultAudience = defaultAudience ; </a> 0
<a> } </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> SessionDefaultAudience getDefaultAudience ( ) { </a> 0
<a> return defaultAudience ; </a> 0
<a> } </a> 0
<a> StartActivityDelegate getStartActivityDelegate ( ) { </a> 0
<a> return startActivityDelegate ; </a> 0
<a> } </a> 0
<a> String getApplicationId ( ) { </a> 0
<a> return applicationId ; </a> 0
<a> } </a> 0
<a> void setApplicationId ( String applicationId ) { </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> } </a> 0
<a> String getValidateSameFbidAsToken ( ) { </a> 0
<a> return validateSameFbidAsToken ; </a> 0
<a> } </a> 0
<a> void setValidateSameFbidAsToken ( String validateSameFbidAsToken ) { </a> 0
<a> this . validateSameFbidAsToken = validateSameFbidAsToken ; </a> 0
<a> } </a> 0
<a> AuthorizationClient . AuthorizationRequest getAuthorizationClientRequest ( ) { </a> 0
<a> AuthorizationClient . StartActivityDelegate delegate = new AuthorizationClient . StartActivityDelegate ( ) { </a> 0
<a> @ Override </a> 0
<a> public void startActivityForResult ( Intent intent , int requestCode ) { </a> 0
<a> startActivityDelegate . startActivityForResult ( intent , requestCode ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public Activity getActivityContext ( ) { </a> 0
<a> return startActivityDelegate . getActivityContext ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> return new AuthorizationClient . AuthorizationRequest ( loginBehavior , requestCode , isLegacy , </a> 0
<a> permissions , defaultAudience , applicationId , validateSameFbidAsToken , delegate ) ; </a> 0
<a> } </a> 0
<a> Object writeReplace ( ) { </a> 0
<a> return new AuthRequestSerializationProxyV1 ( </a> 0
<a> loginBehavior , requestCode , permissions , defaultAudience . name ( ) , isLegacy , applicationId , validateSameFbidAsToken ) ; </a> 0
<a> } </a> 0
<a> void readObject ( ObjectInputStream stream ) throws InvalidObjectException { </a> 0
<a> throw new InvalidObjectException ( "Cannot readObject, serialization proxy required" ) ; </a> 0
<a> } </a> 0
<a> private static class AuthRequestSerializationProxyV1 implements Serializable { </a> 0
<a> private static final long serialVersionUID = - 8748347685113614927L ; </a> 0
<a> private final SessionLoginBehavior loginBehavior ; </a> 0
<a> private final int requestCode ; </a> 0
<a> private boolean isLegacy ; </a> 0
<a> private final List < String > permissions ; </a> 0
<a> private final String defaultAudience ; </a> 0
<a> private final String applicationId ; </a> 0
<a> private final String validateSameFbidAsToken ; </a> 0
<a> private AuthRequestSerializationProxyV1 ( SessionLoginBehavior loginBehavior , </a> 0
<a> int requestCode , List < String > permissions , String defaultAudience , boolean isLegacy , </a> 0
<a> String applicationId , String validateSameFbidAsToken ) { </a> 0
<a> this . loginBehavior = loginBehavior ; </a> 0
<a> this . requestCode = requestCode ; </a> 0
<a> this . permissions = permissions ; </a> 0
<a> this . defaultAudience = defaultAudience ; </a> 0
<a> this . isLegacy = isLegacy ; </a> 0
<a> this . applicationId = applicationId ; </a> 0
<a> this . validateSameFbidAsToken = validateSameFbidAsToken ; </a> 0
<a> } </a> 0
<a> private Object readResolve ( ) { </a> 0
<a> return new AuthorizationRequest ( loginBehavior , requestCode , permissions , defaultAudience , isLegacy , </a> 0
<a> applicationId , validateSameFbidAsToken ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final class OpenRequest extends AuthorizationRequest { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> public OpenRequest ( Activity activity ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> } </a> 0
<a> public OpenRequest ( Fragment fragment ) { </a> 0
<a> super ( fragment ) ; </a> 0
<a> } </a> 0
<a> public final OpenRequest setCallback ( StatusCallback statusCallback ) { </a> 0
<a> super . setCallback ( statusCallback ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final OpenRequest setLoginBehavior ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> super . setLoginBehavior ( loginBehavior ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final OpenRequest setRequestCode ( int requestCode ) { </a> 0
<a> super . setRequestCode ( requestCode ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final OpenRequest setPermissions ( List < String > permissions ) { </a> 0
<a> super . setPermissions ( permissions ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final OpenRequest setDefaultAudience ( SessionDefaultAudience defaultAudience ) { </a> 0
<a> super . setDefaultAudience ( defaultAudience ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static final class NewPermissionsRequest extends AuthorizationRequest { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> public NewPermissionsRequest ( Activity activity , List < String > permissions ) { </a> 0
<a> super ( activity ) ; </a> 0
<a> setPermissions ( permissions ) ; </a> 0
<a> } </a> 0
<a> public NewPermissionsRequest ( Fragment fragment , List < String > permissions ) { </a> 0
<a> super ( fragment ) ; </a> 0
<a> setPermissions ( permissions ) ; </a> 0
<a> } </a> 0
<a> public final NewPermissionsRequest setCallback ( StatusCallback statusCallback ) { </a> 0
<a> super . setCallback ( statusCallback ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final NewPermissionsRequest setLoginBehavior ( SessionLoginBehavior loginBehavior ) { </a> 0
<a> super . setLoginBehavior ( loginBehavior ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final NewPermissionsRequest setRequestCode ( int requestCode ) { </a> 0
<a> super . setRequestCode ( requestCode ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> public final NewPermissionsRequest setDefaultAudience ( SessionDefaultAudience defaultAudience ) { </a> 0
<a> super . setDefaultAudience ( defaultAudience ) ; </a> 0
<a> return this ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public enum SessionDefaultAudience { </a> 0
<a> NONE ( null ) , </a> 0
<a> ONLY_ME ( NativeProtocol . AUDIENCE_ME ) , </a> 0
<a> FRIENDS ( NativeProtocol . AUDIENCE_FRIENDS ) , </a> 0
<a> EVERYONE ( NativeProtocol . AUDIENCE_EVERYONE ) ; </a> 0
<a> private final String nativeProtocolAudience ; </a> 0
<a> private SessionDefaultAudience ( String protocol ) { </a> 0
<a> nativeProtocolAudience = protocol ; </a> 0
<a> } </a> 0
<a> String getNativeProtocolAudience ( ) { </a> 0
<a> return nativeProtocolAudience ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> public enum SessionState { </a> 0
<a> CREATED ( Category . CREATED_CATEGORY ) , </a> 0
<a> CREATED_TOKEN_LOADED ( Category . CREATED_CATEGORY ) , </a> 0
<a> OPENING ( Category . CREATED_CATEGORY ) , </a> 0
<a> OPENED ( Category . OPENED_CATEGORY ) , </a> 0
<a> OPENED_TOKEN_UPDATED ( Category . OPENED_CATEGORY ) , </a> 0
<a> CLOSED_LOGIN_FAILED ( Category . CLOSED_CATEGORY ) , </a> 0
<a> CLOSED ( Category . CLOSED_CATEGORY ) ; </a> 0
<a> private final Category category ; </a> 0
<a> SessionState ( Category category ) { </a> 0
<a> this . category = category ; </a> 0
<a> } </a> 0
<a> public boolean isOpened ( ) { </a> 0
<a> return this . category == Category . OPENED_CATEGORY ; </a> 0
<a> } </a> 0
<a> public boolean isClosed ( ) { </a> 0
<a> return this . category == Category . CLOSED_CATEGORY ; </a> 0
<a> } </a> 0
<a> private enum Category { </a> 0
<a> CREATED_CATEGORY , OPENED_CATEGORY , CLOSED_CATEGORY </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . SharedPreferences ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . List ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class SharedPreferencesTokenCachingStrategy extends TokenCachingStrategy { </a> 0
<a> private static final String DEFAULT_CACHE_KEY = "com.facebook.SharedPreferencesTokenCachingStrategy.DEFAULT_KEY" ; </a> 0
<a> private static final String TAG = SharedPreferencesTokenCachingStrategy . class . getSimpleName ( ) ; </a> 0
<a> private static final String JSON_VALUE_TYPE = "valueType" ; </a> 0
<a> private static final String JSON_VALUE = "value" ; </a> 0
<a> private static final String JSON_VALUE_ENUM_TYPE = "enumType" ; </a> 0
<a> private static final String TYPE_BOOLEAN = "bool" ; </a> 0
<a> private static final String TYPE_BOOLEAN_ARRAY = "bool[]" ; </a> 0
<a> private static final String TYPE_BYTE = "byte" ; </a> 0
<a> private static final String TYPE_BYTE_ARRAY = "byte[]" ; </a> 0
<a> private static final String TYPE_SHORT = "short" ; </a> 0
<a> private static final String TYPE_SHORT_ARRAY = "short[]" ; </a> 0
<a> private static final String TYPE_INTEGER = "int" ; </a> 0
<a> private static final String TYPE_INTEGER_ARRAY = "int[]" ; </a> 0
<a> private static final String TYPE_LONG = "long" ; </a> 0
<a> private static final String TYPE_LONG_ARRAY = "long[]" ; </a> 0
<a> private static final String TYPE_FLOAT = "float" ; </a> 0
<a> private static final String TYPE_FLOAT_ARRAY = "float[]" ; </a> 0
<a> private static final String TYPE_DOUBLE = "double" ; </a> 0
<a> private static final String TYPE_DOUBLE_ARRAY = "double[]" ; </a> 0
<a> private static final String TYPE_CHAR = "char" ; </a> 0
<a> private static final String TYPE_CHAR_ARRAY = "char[]" ; </a> 0
<a> private static final String TYPE_STRING = "string" ; </a> 0
<a> private static final String TYPE_STRING_LIST = "stringList" ; </a> 0
<a> private static final String TYPE_ENUM = "enum" ; </a> 0
<a> private String cacheKey ; </a> 0
<a> private SharedPreferences cache ; </a> 0
<a> public SharedPreferencesTokenCachingStrategy ( Context context ) { </a> 0
<a> this ( context , null ) ; </a> 0
<a> } </a> 0
<a> public SharedPreferencesTokenCachingStrategy ( Context context , String cacheKey ) { </a> 0
<a> Validate . notNull ( context , "context" ) ; </a> 0
<a> this . cacheKey = Utility . isNullOrEmpty ( cacheKey ) ? DEFAULT_CACHE_KEY : cacheKey ; </a> 0
<a> Context applicationContext = context . getApplicationContext ( ) ; </a> 0
<a> context = applicationContext != null ? applicationContext : context ; </a> 0
<a> this . cache = context . getSharedPreferences ( </a> 0
<a> this . cacheKey , </a> 0
<a> Context . MODE_PRIVATE ) ; </a> 0
<a> } </a> 0
<a> public Bundle load ( ) { </a> 0
<a> Bundle settings = new Bundle ( ) ; </a> 0
<a> Map < String , ? > allCachedEntries = cache . getAll ( ) ; </a> 0
<a> for ( String key : allCachedEntries . keySet ( ) ) { </a> 0
<a> try { </a> 0
<a> deserializeKey ( key , settings ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , Log . WARN , TAG , </a> 0
<a> "Error reading cached value for key: '" + key + "' -- " + e ) ; </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return settings ; </a> 0
<a> } </a> 0
<a> public void save ( Bundle bundle ) { </a> 0
<a> Validate . notNull ( bundle , "bundle" ) ; </a> 0
<a> SharedPreferences . Editor editor = cache . edit ( ) ; </a> 0
<a> for ( String key : bundle . keySet ( ) ) { </a> 0
<a> try { </a> 0
<a> serializeKey ( key , bundle , editor ) ; </a> 0
<a> } catch ( JSONException e ) { </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , Log . WARN , TAG , "Error processing value for key: '" + key + "' -- " + e ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean successfulCommit = editor . commit ( ) ; </a> 0
<a> if ( ! successfulCommit ) { </a> 0
<a> Logger . log ( LoggingBehavior . CACHE , Log . WARN , TAG , "SharedPreferences.Editor.commit() was not successful" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void clear ( ) { </a> 0
<a> cache . edit ( ) . clear ( ) . commit ( ) ; </a> 0
<a> } </a> 0
<a> private void serializeKey ( String key , Bundle bundle , SharedPreferences . Editor editor ) </a> 0
<a> throws JSONException { </a> 0
<a> Object value = bundle . get ( key ) ; </a> 0
<a> if ( value == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String supportedType = null ; </a> 0
<a> JSONArray jsonArray = null ; </a> 0
<a> JSONObject json = new JSONObject ( ) ; </a> 0
<a> if ( value instanceof Byte ) { </a> 0
<a> supportedType = TYPE_BYTE ; </a> 0
<a> json . put ( JSON_VALUE , ( ( Byte ) value ) . intValue ( ) ) ; </a> 0
<a> } else if ( value instanceof Short ) { </a> 0
<a> supportedType = TYPE_SHORT ; </a> 0
<a> json . put ( JSON_VALUE , ( ( Short ) value ) . intValue ( ) ) ; </a> 0
<a> } else if ( value instanceof Integer ) { </a> 0
<a> supportedType = TYPE_INTEGER ; </a> 0
<a> json . put ( JSON_VALUE , ( ( Integer ) value ) . intValue ( ) ) ; </a> 0
<a> } else if ( value instanceof Long ) { </a> 0
<a> supportedType = TYPE_LONG ; </a> 0
<a> json . put ( JSON_VALUE , ( ( Long ) value ) . longValue ( ) ) ; </a> 0
<a> } else if ( value instanceof Float ) { </a> 0
<a> supportedType = TYPE_FLOAT ; </a> 0
<a> json . put ( JSON_VALUE , ( ( Float ) value ) . doubleValue ( ) ) ; </a> 0
<a> } else if ( value instanceof Double ) { </a> 0
<a> supportedType = TYPE_DOUBLE ; </a> 0
<a> json . put ( JSON_VALUE , ( ( Double ) value ) . doubleValue ( ) ) ; </a> 0
<a> } else if ( value instanceof Boolean ) { </a> 0
<a> supportedType = TYPE_BOOLEAN ; </a> 0
<a> json . put ( JSON_VALUE , ( ( Boolean ) value ) . booleanValue ( ) ) ; </a> 0
<a> } else if ( value instanceof Character ) { </a> 0
<a> supportedType = TYPE_CHAR ; </a> 0
<a> json . put ( JSON_VALUE , value . toString ( ) ) ; </a> 0
<a> } else if ( value instanceof String ) { </a> 0
<a> supportedType = TYPE_STRING ; </a> 0
<a> json . put ( JSON_VALUE , ( String ) value ) ; </a> 0
<a> } else if ( value instanceof Enum < ? > ) { </a> 0
<a> supportedType = TYPE_ENUM ; </a> 0
<a> json . put ( JSON_VALUE , value . toString ( ) ) ; </a> 0
<a> json . put ( JSON_VALUE_ENUM_TYPE , value . getClass ( ) . getName ( ) ) ; </a> 0
<a> } else { </a> 0
<a> jsonArray = new JSONArray ( ) ; </a> 0
<a> if ( value instanceof byte [ ] ) { </a> 0
<a> supportedType = TYPE_BYTE_ARRAY ; </a> 0
<a> for ( byte v : ( byte [ ] ) value ) { </a> 0
<a> jsonArray . put ( ( int ) v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof short [ ] ) { </a> 0
<a> supportedType = TYPE_SHORT_ARRAY ; </a> 0
<a> for ( short v : ( short [ ] ) value ) { </a> 0
<a> jsonArray . put ( ( int ) v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof int [ ] ) { </a> 0
<a> supportedType = TYPE_INTEGER_ARRAY ; </a> 0
<a> for ( int v : ( int [ ] ) value ) { </a> 0
<a> jsonArray . put ( v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof long [ ] ) { </a> 0
<a> supportedType = TYPE_LONG_ARRAY ; </a> 0
<a> for ( long v : ( long [ ] ) value ) { </a> 0
<a> jsonArray . put ( v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof float [ ] ) { </a> 0
<a> supportedType = TYPE_FLOAT_ARRAY ; </a> 0
<a> for ( float v : ( float [ ] ) value ) { </a> 0
<a> jsonArray . put ( ( double ) v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof double [ ] ) { </a> 0
<a> supportedType = TYPE_DOUBLE_ARRAY ; </a> 0
<a> for ( double v : ( double [ ] ) value ) { </a> 0
<a> jsonArray . put ( v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof boolean [ ] ) { </a> 0
<a> supportedType = TYPE_BOOLEAN_ARRAY ; </a> 0
<a> for ( boolean v : ( boolean [ ] ) value ) { </a> 0
<a> jsonArray . put ( v ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof char [ ] ) { </a> 0
<a> supportedType = TYPE_CHAR_ARRAY ; </a> 0
<a> for ( char v : ( char [ ] ) value ) { </a> 0
<a> jsonArray . put ( String . valueOf ( v ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( value instanceof List < ? > ) { </a> 0
<a> supportedType = TYPE_STRING_LIST ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> List < String > stringList = ( List < String > ) value ; </a> 0
<a> for ( String v : stringList ) { </a> 0
<a> jsonArray . put ( ( v == null ) ? JSONObject . NULL : v ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> jsonArray = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( supportedType != null ) { </a> 0
<a> json . put ( JSON_VALUE_TYPE , supportedType ) ; </a> 0
<a> if ( jsonArray != null ) { </a> 0
<a> json . putOpt ( JSON_VALUE , jsonArray ) ; </a> 0
<a> } </a> 0
<a> String jsonString = json . toString ( ) ; </a> 0
<a> editor . putString ( key , jsonString ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void deserializeKey ( String key , Bundle bundle ) </a> 0
<a> throws JSONException { </a> 0
<a> String jsonString = cache . getString ( key , "{}" ) ; </a> 0
<a> JSONObject json = new JSONObject ( jsonString ) ; </a> 0
<a> String valueType = json . getString ( JSON_VALUE_TYPE ) ; </a> 0
<a> if ( valueType . equals ( TYPE_BOOLEAN ) ) { </a> 0
<a> bundle . putBoolean ( key , json . getBoolean ( JSON_VALUE ) ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_BOOLEAN_ARRAY ) ) { </a> 0
<a> JSONArray jsonArray = json . getJSONArray ( JSON_VALUE ) ; </a> 0
<a> boolean [ ] array = new boolean [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = jsonArray . getBoolean ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . putBooleanArray ( key , array ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_BYTE ) ) { </a> 0
<a> bundle . putByte ( key , ( byte ) json . getInt ( JSON_VALUE ) ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_BYTE_ARRAY ) ) { </a> 0
<a> JSONArray jsonArray = json . getJSONArray ( JSON_VALUE ) ; </a> 0
<a> byte [ ] array = new byte [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = ( byte ) jsonArray . getInt ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . putByteArray ( key , array ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_SHORT ) ) { </a> 0
<a> bundle . putShort ( key , ( short ) json . getInt ( JSON_VALUE ) ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_SHORT_ARRAY ) ) { </a> 0
<a> JSONArray jsonArray = json . getJSONArray ( JSON_VALUE ) ; </a> 0
<a> short [ ] array = new short [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = ( short ) jsonArray . getInt ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . putShortArray ( key , array ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_INTEGER ) ) { </a> 0
<a> bundle . putInt ( key , json . getInt ( JSON_VALUE ) ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_INTEGER_ARRAY ) ) { </a> 0
<a> JSONArray jsonArray = json . getJSONArray ( JSON_VALUE ) ; </a> 0
<a> int [ ] array = new int [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = jsonArray . getInt ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . putIntArray ( key , array ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_LONG ) ) { </a> 0
<a> bundle . putLong ( key , json . getLong ( JSON_VALUE ) ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_LONG_ARRAY ) ) { </a> 0
<a> JSONArray jsonArray = json . getJSONArray ( JSON_VALUE ) ; </a> 0
<a> long [ ] array = new long [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = jsonArray . getLong ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . putLongArray ( key , array ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_FLOAT ) ) { </a> 0
<a> bundle . putFloat ( key , ( float ) json . getDouble ( JSON_VALUE ) ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_FLOAT_ARRAY ) ) { </a> 0
<a> JSONArray jsonArray = json . getJSONArray ( JSON_VALUE ) ; </a> 0
<a> float [ ] array = new float [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = ( float ) jsonArray . getDouble ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . putFloatArray ( key , array ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_DOUBLE ) ) { </a> 0
<a> bundle . putDouble ( key , json . getDouble ( JSON_VALUE ) ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_DOUBLE_ARRAY ) ) { </a> 0
<a> JSONArray jsonArray = json . getJSONArray ( JSON_VALUE ) ; </a> 0
<a> double [ ] array = new double [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = jsonArray . getDouble ( i ) ; </a> 0
<a> } </a> 0
<a> bundle . putDoubleArray ( key , array ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_CHAR ) ) { </a> 0
<a> String charString = json . getString ( JSON_VALUE ) ; </a> 0
<a> if ( charString != null && charString . length ( ) == 1 ) { </a> 0
<a> bundle . putChar ( key , charString . charAt ( 0 ) ) ; </a> 0
<a> } </a> 0
<a> } else if ( valueType . equals ( TYPE_CHAR_ARRAY ) ) { </a> 0
<a> JSONArray jsonArray = json . getJSONArray ( JSON_VALUE ) ; </a> 0
<a> char [ ] array = new char [ jsonArray . length ( ) ] ; </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> String charString = jsonArray . getString ( i ) ; </a> 0
<a> if ( charString != null && charString . length ( ) == 1 ) { </a> 0
<a> array [ i ] = charString . charAt ( 0 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> bundle . putCharArray ( key , array ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_STRING ) ) { </a> 0
<a> bundle . putString ( key , json . getString ( JSON_VALUE ) ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_STRING_LIST ) ) { </a> 0
<a> JSONArray jsonArray = json . getJSONArray ( JSON_VALUE ) ; </a> 0
<a> int numStrings = jsonArray . length ( ) ; </a> 0
<a> ArrayList < String > stringList = new ArrayList < String > ( numStrings ) ; </a> 0
<a> for ( int i = 0 ; i < numStrings ; i ++ ) { </a> 0
<a> Object jsonStringValue = jsonArray . get ( i ) ; </a> 0
<a> stringList . add ( i , jsonStringValue == JSONObject . NULL ? null : ( String ) jsonStringValue ) ; </a> 0
<a> } </a> 0
<a> bundle . putStringArrayList ( key , stringList ) ; </a> 0
<a> } else if ( valueType . equals ( TYPE_ENUM ) ) { </a> 0
<a> try { </a> 0
<a> String enumType = json . getString ( JSON_VALUE_ENUM_TYPE ) ; </a> 0
<a> @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) </a> 0
<a> Class < ? extends Enum > enumClass = ( Class < ? extends Enum > ) Class . forName ( enumType ) ; </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> Enum < ? > enumValue = Enum . valueOf ( enumClass , json . getString ( JSON_VALUE ) ) ; </a> 0
<a> bundle . putSerializable ( key , enumValue ) ; </a> 0
<a> } catch ( ClassNotFoundException e ) { </a> 0
<a> } catch ( IllegalArgumentException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphObjectList ; </a> 0
<a> import com . facebook . internal . Logger ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import com . facebook . internal . Validate ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . * ; </a> 0
<a> public class TestSession extends Session { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> private enum Mode { </a> 0
<a> PRIVATE , SHARED </a> 0
<a> } </a> 0
<a> private static final String LOG_TAG = Logger . LOG_TAG_BASE + "TestSession" ; </a> 0
<a> private static Map < String , TestAccount > appTestAccounts ; </a> 0
<a> private static String testApplicationSecret ; </a> 0
<a> private static String testApplicationId ; </a> 0
<a> private final String sessionUniqueUserTag ; </a> 0
<a> private final List < String > requestedPermissions ; </a> 0
<a> private final Mode mode ; </a> 0
<a> private String testAccountId ; </a> 0
<a> private boolean wasAskedToExtendAccessToken ; </a> 0
<a> TestSession ( Activity activity , List < String > permissions , TokenCachingStrategy tokenCachingStrategy , </a> 0
<a> String sessionUniqueUserTag , Mode mode ) { </a> 0
<a> super ( activity , TestSession . testApplicationId , tokenCachingStrategy ) ; </a> 0
<a> Validate . notNull ( permissions , "permissions" ) ; </a> 0
<a> Validate . notNullOrEmpty ( testApplicationId , "testApplicationId" ) ; </a> 0
<a> Validate . notNullOrEmpty ( testApplicationSecret , "testApplicationSecret" ) ; </a> 0
<a> this . sessionUniqueUserTag = sessionUniqueUserTag ; </a> 0
<a> this . mode = mode ; </a> 0
<a> this . requestedPermissions = permissions ; </a> 0
<a> } </a> 0
<a> public static TestSession createSessionWithPrivateUser ( Activity activity , List < String > permissions ) { </a> 0
<a> return createTestSession ( activity , permissions , Mode . PRIVATE , null ) ; </a> 0
<a> } </a> 0
<a> public static TestSession createSessionWithSharedUser ( Activity activity , List < String > permissions ) { </a> 0
<a> return createSessionWithSharedUser ( activity , permissions , null ) ; </a> 0
<a> } </a> 0
<a> public static TestSession createSessionWithSharedUser ( Activity activity , List < String > permissions , </a> 0
<a> String sessionUniqueUserTag ) { </a> 0
<a> return createTestSession ( activity , permissions , Mode . SHARED , sessionUniqueUserTag ) ; </a> 0
<a> } </a> 0
<a> public static synchronized String getTestApplicationId ( ) { </a> 0
<a> return testApplicationId ; </a> 0
<a> } </a> 0
<a> public static synchronized void setTestApplicationId ( String applicationId ) { </a> 0
<a> if ( testApplicationId != null && ! testApplicationId . equals ( applicationId ) ) { </a> 0
<a> throw new FacebookException ( "Can't have more than one test application ID" ) ; </a> 0
<a> } </a> 0
<a> testApplicationId = applicationId ; </a> 0
<a> } </a> 0
<a> public static synchronized String getTestApplicationSecret ( ) { </a> 0
<a> return testApplicationSecret ; </a> 0
<a> } </a> 0
<a> public static synchronized void setTestApplicationSecret ( String applicationSecret ) { </a> 0
<a> if ( testApplicationSecret != null && ! testApplicationSecret . equals ( applicationSecret ) ) { </a> 0
<a> throw new FacebookException ( "Can't have more than one test application secret" ) ; </a> 0
<a> } </a> 0
<a> testApplicationSecret = applicationSecret ; </a> 0
<a> } </a> 0
<a> public final String getTestUserId ( ) { </a> 0
<a> return testAccountId ; </a> 0
<a> } </a> 0
<a> private static synchronized TestSession createTestSession ( Activity activity , List < String > permissions , Mode mode , </a> 0
<a> String sessionUniqueUserTag ) { </a> 0
<a> if ( Utility . isNullOrEmpty ( testApplicationId ) || Utility . isNullOrEmpty ( testApplicationSecret ) ) { </a> 0
<a> throw new FacebookException ( "Must provide app ID and secret" ) ; </a> 0
<a> } </a> 0
<a> if ( Utility . isNullOrEmpty ( permissions ) ) { </a> 0
<a> permissions = Arrays . asList ( "email" , "publish_actions" ) ; </a> 0
<a> } </a> 0
<a> return new TestSession ( activity , permissions , new TestTokenCachingStrategy ( ) , sessionUniqueUserTag , </a> 0
<a> mode ) ; </a> 0
<a> } </a> 0
<a> private static synchronized void retrieveTestAccountsForAppIfNeeded ( ) { </a> 0
<a> if ( appTestAccounts != null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> appTestAccounts = new HashMap < String , TestAccount > ( ) ; </a> 0
<a> String testAccountQuery = String . format ( "SELECT id,access_token FROM test_account WHERE app_id = %s" , </a> 0
<a> testApplicationId ) ; </a> 0
<a> String userQuery = "SELECT uid,name FROM user WHERE uid IN (SELECT id FROM #test_accounts)" ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> JSONObject multiquery ; </a> 0
<a> try { </a> 0
<a> multiquery = new JSONObject ( ) ; </a> 0
<a> multiquery . put ( "test_accounts" , testAccountQuery ) ; </a> 0
<a> multiquery . put ( "users" , userQuery ) ; </a> 0
<a> } catch ( JSONException exception ) { </a> 0
<a> throw new FacebookException ( exception ) ; </a> 0
<a> } </a> 0
<a> parameters . putString ( "q" , multiquery . toString ( ) ) ; </a> 0
<a> parameters . putString ( "access_token" , getAppAccessToken ( ) ) ; </a> 0
<a> Request request = new Request ( null , "fql" , parameters , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> if ( response . getError ( ) != null ) { </a> 0
<a> throw response . getError ( ) . getException ( ) ; </a> 0
<a> } </a> 0
<a> FqlResponse fqlResponse = response . getGraphObjectAs ( FqlResponse . class ) ; </a> 0
<a> GraphObjectList < FqlResult > fqlResults = fqlResponse . getData ( ) ; </a> 0
<a> if ( fqlResults == null || fqlResults . size ( ) != 2 ) { </a> 0
<a> throw new FacebookException ( "Unexpected number of results from FQL query" ) ; </a> 0
<a> } </a> 0
<a> Collection < TestAccount > testAccounts = fqlResults . get ( 0 ) . getFqlResultSet ( ) . castToListOf ( TestAccount . class ) ; </a> 0
<a> Collection < UserAccount > userAccounts = fqlResults . get ( 1 ) . getFqlResultSet ( ) . castToListOf ( UserAccount . class ) ; </a> 0
<a> populateTestAccounts ( testAccounts , userAccounts ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> private static synchronized void populateTestAccounts ( Collection < TestAccount > testAccounts , </a> 0
<a> Collection < UserAccount > userAccounts ) { </a> 0
<a> for ( TestAccount testAccount : testAccounts ) { </a> 0
<a> storeTestAccount ( testAccount ) ; </a> 0
<a> } </a> 0
<a> for ( UserAccount userAccount : userAccounts ) { </a> 0
<a> TestAccount testAccount = appTestAccounts . get ( userAccount . getUid ( ) ) ; </a> 0
<a> if ( testAccount != null ) { </a> 0
<a> testAccount . setName ( userAccount . getName ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static synchronized void storeTestAccount ( TestAccount testAccount ) { </a> 0
<a> appTestAccounts . put ( testAccount . getId ( ) , testAccount ) ; </a> 0
<a> } </a> 0
<a> private static synchronized TestAccount findTestAccountMatchingIdentifier ( String identifier ) { </a> 0
<a> retrieveTestAccountsForAppIfNeeded ( ) ; </a> 0
<a> for ( TestAccount testAccount : appTestAccounts . values ( ) ) { </a> 0
<a> if ( testAccount . getName ( ) . contains ( identifier ) ) { </a> 0
<a> return testAccount ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public final String toString ( ) { </a> 0
<a> String superString = super . toString ( ) ; </a> 0
<a> return new StringBuilder ( ) . append ( "{TestSession" ) . append ( " testUserId:" ) . append ( testAccountId ) </a> 0
<a> . append ( " " ) . append ( superString ) . append ( "}" ) . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void authorize ( AuthorizationRequest request ) { </a> 0
<a> if ( mode == Mode . PRIVATE ) { </a> 0
<a> createTestAccountAndFinishAuth ( ) ; </a> 0
<a> } else { </a> 0
<a> findOrCreateSharedTestAccount ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void postStateChange ( final SessionState oldState , final SessionState newState , final Exception error ) { </a> 0
<a> String id = testAccountId ; </a> 0
<a> super . postStateChange ( oldState , newState , error ) ; </a> 0
<a> if ( newState . isClosed ( ) && id != null && mode == Mode . PRIVATE ) { </a> 0
<a> deleteTestAccount ( id , getAppAccessToken ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean getWasAskedToExtendAccessToken ( ) { </a> 0
<a> return wasAskedToExtendAccessToken ; </a> 0
<a> } </a> 0
<a> void forceExtendAccessToken ( boolean forceExtendAccessToken ) { </a> 0
<a> AccessToken currentToken = getTokenInfo ( ) ; </a> 0
<a> setTokenInfo ( </a> 0
<a> new AccessToken ( currentToken . getToken ( ) , new Date ( ) , currentToken . getPermissions ( ) , </a> 0
<a> AccessTokenSource . TEST_USER , new Date ( 0 ) ) ) ; </a> 0
<a> setLastAttemptedTokenExtendDate ( new Date ( 0 ) ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean shouldExtendAccessToken ( ) { </a> 0
<a> boolean result = super . shouldExtendAccessToken ( ) ; </a> 0
<a> wasAskedToExtendAccessToken = false ; </a> 0
<a> return result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void extendAccessToken ( ) { </a> 0
<a> wasAskedToExtendAccessToken = true ; </a> 0
<a> super . extendAccessToken ( ) ; </a> 0
<a> } </a> 0
<a> void fakeTokenRefreshAttempt ( ) { </a> 0
<a> setCurrentTokenRefreshRequest ( new TokenRefreshRequest ( ) ) ; </a> 0
<a> } </a> 0
<a> static final String getAppAccessToken ( ) { </a> 0
<a> return testApplicationId + "|" + testApplicationSecret ; </a> 0
<a> } </a> 0
<a> private void findOrCreateSharedTestAccount ( ) { </a> 0
<a> TestAccount testAccount = findTestAccountMatchingIdentifier ( getSharedTestAccountIdentifier ( ) ) ; </a> 0
<a> if ( testAccount != null ) { </a> 0
<a> finishAuthWithTestAccount ( testAccount ) ; </a> 0
<a> } else { </a> 0
<a> createTestAccountAndFinishAuth ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void finishAuthWithTestAccount ( TestAccount testAccount ) { </a> 0
<a> testAccountId = testAccount . getId ( ) ; </a> 0
<a> AccessToken accessToken = AccessToken . createFromString ( testAccount . getAccessToken ( ) , requestedPermissions , </a> 0
<a> AccessTokenSource . TEST_USER ) ; </a> 0
<a> finishAuthOrReauth ( accessToken , null ) ; </a> 0
<a> } </a> 0
<a> private TestAccount createTestAccountAndFinishAuth ( ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "installed" , "true" ) ; </a> 0
<a> parameters . putString ( "permissions" , getPermissionsString ( ) ) ; </a> 0
<a> parameters . putString ( "access_token" , getAppAccessToken ( ) ) ; </a> 0
<a> if ( mode == Mode . SHARED ) { </a> 0
<a> parameters . putString ( "name" , String . format ( "Shared %s Testuser" , getSharedTestAccountIdentifier ( ) ) ) ; </a> 0
<a> } </a> 0
<a> String graphPath = String . format ( "%s/accounts/test-users" , testApplicationId ) ; </a> 0
<a> Request createUserRequest = new Request ( null , graphPath , parameters , HttpMethod . POST ) ; </a> 0
<a> Response response = createUserRequest . executeAndWait ( ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> TestAccount testAccount = response . getGraphObjectAs ( TestAccount . class ) ; </a> 0
<a> if ( error != null ) { </a> 0
<a> finishAuthOrReauth ( null , error . getException ( ) ) ; </a> 0
<a> return null ; </a> 0
<a> } else { </a> 0
<a> assert testAccount != null ; </a> 0
<a> if ( mode == Mode . SHARED ) { </a> 0
<a> testAccount . setName ( parameters . getString ( "name" ) ) ; </a> 0
<a> storeTestAccount ( testAccount ) ; </a> 0
<a> } </a> 0
<a> finishAuthWithTestAccount ( testAccount ) ; </a> 0
<a> return testAccount ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void deleteTestAccount ( String testAccountId , String appAccessToken ) { </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "access_token" , appAccessToken ) ; </a> 0
<a> Request request = new Request ( null , testAccountId , parameters , HttpMethod . DELETE ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> GraphObject graphObject = response . getGraphObject ( ) ; </a> 0
<a> if ( error != null ) { </a> 0
<a> Log . w ( LOG_TAG , String . format ( "Could not delete test account %s: %s" , testAccountId , error . getException ( ) . toString ( ) ) ) ; </a> 0
<a> } else if ( graphObject . getProperty ( Response . NON_JSON_RESPONSE_PROPERTY ) == ( Boolean ) false ) { </a> 0
<a> Log . w ( LOG_TAG , String . format ( "Could not delete test account %s: unknown reason" , testAccountId ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private String getPermissionsString ( ) { </a> 0
<a> return TextUtils . join ( "," , requestedPermissions ) ; </a> 0
<a> } </a> 0
<a> private String getSharedTestAccountIdentifier ( ) { </a> 0
<a> long permissionsHash = getPermissionsString ( ) . hashCode ( ) & 0xffffffffL ; </a> 0
<a> long sessionTagHash = ( sessionUniqueUserTag != null ) ? sessionUniqueUserTag . hashCode ( ) & 0xffffffffL : 0 ; </a> 0
<a> long combinedHash = permissionsHash ^ sessionTagHash ; </a> 0
<a> return validNameStringFromInteger ( combinedHash ) ; </a> 0
<a> } </a> 0
<a> private String validNameStringFromInteger ( long i ) { </a> 0
<a> String s = Long . toString ( i ) ; </a> 0
<a> StringBuilder result = new StringBuilder ( "Perm" ) ; </a> 0
<a> char lastChar = 0 ; </a> 0
<a> for ( char c : s . toCharArray ( ) ) { </a> 0
<a> if ( c == lastChar ) { </a> 0
<a> c += 10 ; </a> 0
<a> } </a> 0
<a> result . append ( ( char ) ( c + 'a' - '0' ) ) ; </a> 0
<a> lastChar = c ; </a> 0
<a> } </a> 0
<a> return result . toString ( ) ; </a> 0
<a> } </a> 0
<a> private interface TestAccount extends GraphObject { </a> 0
<a> String getId ( ) ; </a> 0
<a> String getAccessToken ( ) ; </a> 0
<a> String getName ( ) ; </a> 0
<a> void setName ( String name ) ; </a> 0
<a> } </a> 0
<a> private interface UserAccount extends GraphObject { </a> 0
<a> String getUid ( ) ; </a> 0
<a> String getName ( ) ; </a> 0
<a> void setName ( String name ) ; </a> 0
<a> } </a> 0
<a> private interface FqlResult extends GraphObject { </a> 0
<a> GraphObjectList < GraphObject > getFqlResultSet ( ) ; </a> 0
<a> } </a> 0
<a> private interface FqlResponse extends GraphObject { </a> 0
<a> GraphObjectList < FqlResult > getData ( ) ; </a> 0
<a> } </a> 0
<a> private static final class TestTokenCachingStrategy extends TokenCachingStrategy { </a> 0
<a> private Bundle bundle ; </a> 0
<a> @ Override </a> 0
<a> public Bundle load ( ) { </a> 0
<a> return bundle ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void save ( Bundle value ) { </a> 0
<a> bundle = value ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> bundle = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import java . io . FileNotFoundException ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . MalformedURLException ; </a> 0
<a> @ Deprecated </a> 0
<a> public class AsyncFacebookRunner { </a> 0
<a> Facebook fb ; </a> 0
<a> public AsyncFacebookRunner ( Facebook fb ) { </a> 0
<a> this . fb = fb ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void logout ( final Context context , </a> 0
<a> final RequestListener listener , </a> 0
<a> final Object state ) { </a> 0
<a> new Thread ( ) { </a> 0
<a> @ Override public void run ( ) { </a> 0
<a> try { </a> 0
<a> String response = fb . logoutImpl ( context ) ; </a> 0
<a> if ( response . length ( ) == 0 || response . equals ( "false" ) ) { </a> 0
<a> listener . onFacebookError ( new FacebookError ( </a> 0
<a> "auth.expireSession failed" ) , state ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> listener . onComplete ( response , state ) ; </a> 0
<a> } catch ( FileNotFoundException e ) { </a> 0
<a> listener . onFileNotFoundException ( e , state ) ; </a> 0
<a> } catch ( MalformedURLException e ) { </a> 0
<a> listener . onMalformedURLException ( e , state ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> listener . onIOException ( e , state ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } . start ( ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void logout ( final Context context , final RequestListener listener ) { </a> 0
<a> logout ( context , listener , null ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void request ( Bundle parameters , </a> 0
<a> RequestListener listener , </a> 0
<a> final Object state ) { </a> 0
<a> request ( null , parameters , "GET" , listener , state ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void request ( Bundle parameters , RequestListener listener ) { </a> 0
<a> request ( null , parameters , "GET" , listener , null ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void request ( String graphPath , </a> 0
<a> RequestListener listener , </a> 0
<a> final Object state ) { </a> 0
<a> request ( graphPath , new Bundle ( ) , "GET" , listener , state ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void request ( String graphPath , RequestListener listener ) { </a> 0
<a> request ( graphPath , new Bundle ( ) , "GET" , listener , null ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void request ( String graphPath , </a> 0
<a> Bundle parameters , </a> 0
<a> RequestListener listener , </a> 0
<a> final Object state ) { </a> 0
<a> request ( graphPath , parameters , "GET" , listener , state ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void request ( String graphPath , </a> 0
<a> Bundle parameters , </a> 0
<a> RequestListener listener ) { </a> 0
<a> request ( graphPath , parameters , "GET" , listener , null ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void request ( final String graphPath , </a> 0
<a> final Bundle parameters , </a> 0
<a> final String httpMethod , </a> 0
<a> final RequestListener listener , </a> 0
<a> final Object state ) { </a> 0
<a> new Thread ( ) { </a> 0
<a> @ Override public void run ( ) { </a> 0
<a> try { </a> 0
<a> String resp = fb . requestImpl ( graphPath , parameters , httpMethod ) ; </a> 0
<a> listener . onComplete ( resp , state ) ; </a> 0
<a> } catch ( FileNotFoundException e ) { </a> 0
<a> listener . onFileNotFoundException ( e , state ) ; </a> 0
<a> } catch ( MalformedURLException e ) { </a> 0
<a> listener . onMalformedURLException ( e , state ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> listener . onIOException ( e , state ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } . start ( ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static interface RequestListener { </a> 0
<a> public void onComplete ( String response , Object state ) ; </a> 0
<a> public void onIOException ( IOException e , Object state ) ; </a> 0
<a> public void onFileNotFoundException ( FileNotFoundException e , </a> 0
<a> Object state ) ; </a> 0
<a> public void onMalformedURLException ( MalformedURLException e , </a> 0
<a> Object state ) ; </a> 0
<a> public void onFacebookError ( FacebookError e , Object state ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> public class DialogError extends Throwable { </a> 0
<a> private static final long serialVersionUID = 1L ; </a> 0
<a> private int mErrorCode ; </a> 0
<a> private String mFailingUrl ; </a> 0
<a> @ Deprecated </a> 0
<a> public DialogError ( String message , int errorCode , String failingUrl ) { </a> 0
<a> super ( message ) ; </a> 0
<a> mErrorCode = errorCode ; </a> 0
<a> mFailingUrl = failingUrl ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public int getErrorCode ( ) { </a> 0
<a> return mErrorCode ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String getFailingUrl ( ) { </a> 0
<a> return mFailingUrl ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . Manifest ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . * ; </a> 0
<a> import android . content . pm . PackageInfo ; </a> 0
<a> import android . content . pm . PackageManager ; </a> 0
<a> import android . content . pm . PackageManager . NameNotFoundException ; </a> 0
<a> import android . content . pm . ResolveInfo ; </a> 0
<a> import android . content . pm . Signature ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . os . * ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . Session . StatusCallback ; </a> 0
<a> import java . io . FileNotFoundException ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . lang . ref . WeakReference ; </a> 0
<a> import java . net . MalformedURLException ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . Collections ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class Facebook { </a> 0
<a> @ Deprecated </a> 0
<a> public static final String REDIRECT_URI = "fbconnect://success" ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final String CANCEL_URI = "fbconnect://cancel" ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final String TOKEN = "access_token" ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final String EXPIRES = "expires_in" ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final String SINGLE_SIGN_ON_DISABLED = "service_disabled" ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final Uri ATTRIBUTION_ID_CONTENT_URI = </a> 0
<a> Uri . parse ( "content://com.facebook.katana.provider.AttributionIdProvider" ) ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final String ATTRIBUTION_ID_COLUMN_NAME = "aid" ; </a> 0
<a> @ Deprecated </a> 0
<a> public static final int FORCE_DIALOG_AUTH = - 1 ; </a> 0
<a> private static final String LOGIN = "oauth" ; </a> 0
<a> private static final int DEFAULT_AUTH_ACTIVITY_CODE = 32665 ; </a> 0
<a> @ Deprecated </a> 0
<a> protected static String DIALOG_BASE_URL = "https://m.facebook.com/dialog/" ; </a> 0
<a> @ Deprecated </a> 0
<a> protected static String GRAPH_BASE_URL = "https://graph.facebook.com/" ; </a> 0
<a> @ Deprecated </a> 0
<a> protected static String RESTSERVER_URL = "https://api.facebook.com/restserver.php" ; </a> 0
<a> private final Object lock = new Object ( ) ; </a> 0
<a> private String accessToken = null ; </a> 0
<a> private long accessExpiresMillisecondsAfterEpoch = 0 ; </a> 0
<a> private long lastAccessUpdateMillisecondsAfterEpoch = 0 ; </a> 0
<a> private String mAppId ; </a> 0
<a> private Activity pendingAuthorizationActivity ; </a> 0
<a> private String [ ] pendingAuthorizationPermissions ; </a> 0
<a> private Session pendingOpeningSession ; </a> 0
<a> private volatile Session session ; </a> 0
<a> private boolean sessionInvalidated ; </a> 0
<a> private SetterTokenCachingStrategy tokenCache ; </a> 0
<a> private volatile Session userSetSession ; </a> 0
<a> final private long REFRESH_TOKEN_BARRIER = 24L * 60L * 60L * 1000L ; </a> 0
<a> @ Deprecated </a> 0
<a> public Facebook ( String appId ) { </a> 0
<a> if ( appId == null ) { </a> 0
<a> throw new IllegalArgumentException ( "You must specify your application ID when instantiating " </a> 0
<a> + "a Facebook object. See README for details." ) ; </a> 0
<a> } </a> 0
<a> mAppId = appId ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void authorize ( Activity activity , final DialogListener listener ) { </a> 0
<a> authorize ( activity , new String [ ] { } , DEFAULT_AUTH_ACTIVITY_CODE , SessionLoginBehavior . SSO_WITH_FALLBACK , </a> 0
<a> listener ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void authorize ( Activity activity , String [ ] permissions , final DialogListener listener ) { </a> 0
<a> authorize ( activity , permissions , DEFAULT_AUTH_ACTIVITY_CODE , SessionLoginBehavior . SSO_WITH_FALLBACK , listener ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void authorize ( Activity activity , String [ ] permissions , int activityCode , final DialogListener listener ) { </a> 0
<a> SessionLoginBehavior behavior = ( activityCode >= 0 ) ? SessionLoginBehavior . SSO_WITH_FALLBACK </a> 0
<a> : SessionLoginBehavior . SUPPRESS_SSO ; </a> 0
<a> authorize ( activity , permissions , activityCode , behavior , listener ) ; </a> 0
<a> } </a> 0
<a> private void authorize ( Activity activity , String [ ] permissions , int activityCode , </a> 0
<a> SessionLoginBehavior behavior , final DialogListener listener ) { </a> 0
<a> checkUserSession ( "authorize" ) ; </a> 0
<a> pendingOpeningSession = new Session . Builder ( activity ) . </a> 0
<a> setApplicationId ( mAppId ) . </a> 0
<a> setTokenCachingStrategy ( getTokenCache ( ) ) . </a> 0
<a> build ( ) ; </a> 0
<a> pendingAuthorizationActivity = activity ; </a> 0
<a> pendingAuthorizationPermissions = ( permissions != null ) ? permissions : new String [ 0 ] ; </a> 0
<a> StatusCallback callback = new StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session callbackSession , SessionState state , Exception exception ) { </a> 0
<a> onSessionCallback ( callbackSession , state , exception , listener ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Session . OpenRequest openRequest = new Session . OpenRequest ( activity ) . </a> 0
<a> setCallback ( callback ) . </a> 0
<a> setLoginBehavior ( behavior ) . </a> 0
<a> setRequestCode ( activityCode ) . </a> 0
<a> setPermissions ( Arrays . asList ( permissions ) ) ; </a> 0
<a> openSession ( pendingOpeningSession , openRequest , pendingAuthorizationPermissions . length > 0 ) ; </a> 0
<a> } </a> 0
<a> private void openSession ( Session session , Session . OpenRequest openRequest , boolean isPublish ) { </a> 0
<a> openRequest . setIsLegacy ( true ) ; </a> 0
<a> if ( isPublish ) { </a> 0
<a> session . openForPublish ( openRequest ) ; </a> 0
<a> } else { </a> 0
<a> session . openForRead ( openRequest ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> private void onSessionCallback ( Session callbackSession , SessionState state , Exception exception , </a> 0
<a> DialogListener listener ) { </a> 0
<a> Bundle extras = callbackSession . getAuthorizationBundle ( ) ; </a> 0
<a> if ( state == SessionState . OPENED ) { </a> 0
<a> Session sessionToClose = null ; </a> 0
<a> synchronized ( Facebook . this . lock ) { </a> 0
<a> if ( callbackSession != Facebook . this . session ) { </a> 0
<a> sessionToClose = Facebook . this . session ; </a> 0
<a> Facebook . this . session = callbackSession ; </a> 0
<a> Facebook . this . sessionInvalidated = false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( sessionToClose != null ) { </a> 0
<a> sessionToClose . close ( ) ; </a> 0
<a> } </a> 0
<a> listener . onComplete ( extras ) ; </a> 0
<a> } else if ( exception != null ) { </a> 0
<a> if ( exception instanceof FacebookOperationCanceledException ) { </a> 0
<a> listener . onCancel ( ) ; </a> 0
<a> } else if ( ( exception instanceof FacebookAuthorizationException ) && ( extras != null ) </a> 0
<a> && extras . containsKey ( Session . WEB_VIEW_ERROR_CODE_KEY ) </a> 0
<a> && extras . containsKey ( Session . WEB_VIEW_FAILING_URL_KEY ) ) { </a> 0
<a> DialogError error = new DialogError ( exception . getMessage ( ) , </a> 0
<a> extras . getInt ( Session . WEB_VIEW_ERROR_CODE_KEY ) , </a> 0
<a> extras . getString ( Session . WEB_VIEW_FAILING_URL_KEY ) ) ; </a> 0
<a> listener . onError ( error ) ; </a> 0
<a> } else { </a> 0
<a> FacebookError error = new FacebookError ( exception . getMessage ( ) ) ; </a> 0
<a> listener . onFacebookError ( error ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean validateServiceIntent ( Context context , Intent intent ) { </a> 0
<a> ResolveInfo resolveInfo = context . getPackageManager ( ) . resolveService ( intent , 0 ) ; </a> 0
<a> if ( resolveInfo == null ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return validateAppSignatureForPackage ( context , resolveInfo . serviceInfo . packageName ) ; </a> 0
<a> } </a> 0
<a> private boolean validateAppSignatureForPackage ( Context context , String packageName ) { </a> 0
<a> PackageInfo packageInfo ; </a> 0
<a> try { </a> 0
<a> packageInfo = context . getPackageManager ( ) . getPackageInfo ( packageName , PackageManager . GET_SIGNATURES ) ; </a> 0
<a> } catch ( NameNotFoundException e ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> for ( Signature signature : packageInfo . signatures ) { </a> 0
<a> if ( signature . toCharsString ( ) . equals ( FB_APP_SIGNATURE ) ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void authorizeCallback ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> checkUserSession ( "authorizeCallback" ) ; </a> 0
<a> Session pending = this . pendingOpeningSession ; </a> 0
<a> if ( pending != null ) { </a> 0
<a> if ( pending . onActivityResult ( this . pendingAuthorizationActivity , requestCode , resultCode , data ) ) { </a> 0
<a> this . pendingOpeningSession = null ; </a> 0
<a> this . pendingAuthorizationActivity = null ; </a> 0
<a> this . pendingAuthorizationPermissions = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean extendAccessToken ( Context context , ServiceListener serviceListener ) { </a> 0
<a> checkUserSession ( "extendAccessToken" ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . setClassName ( "com.facebook.katana" , "com.facebook.katana.platform.TokenRefreshService" ) ; </a> 0
<a> if ( ! validateServiceIntent ( context , intent ) ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> return context . bindService ( intent , new TokenRefreshServiceConnection ( context , serviceListener ) , </a> 0
<a> Context . BIND_AUTO_CREATE ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean extendAccessTokenIfNeeded ( Context context , ServiceListener serviceListener ) { </a> 0
<a> checkUserSession ( "extendAccessTokenIfNeeded" ) ; </a> 0
<a> if ( shouldExtendAccessToken ( ) ) { </a> 0
<a> return extendAccessToken ( context , serviceListener ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean shouldExtendAccessToken ( ) { </a> 0
<a> checkUserSession ( "shouldExtendAccessToken" ) ; </a> 0
<a> return isSessionValid ( ) </a> 0
<a> && ( System . currentTimeMillis ( ) - lastAccessUpdateMillisecondsAfterEpoch >= REFRESH_TOKEN_BARRIER ) ; </a> 0
<a> } </a> 0
<a> private class TokenRefreshServiceConnection implements ServiceConnection { </a> 0
<a> final Messenger messageReceiver = new Messenger ( </a> 0
<a> new TokenRefreshConnectionHandler ( Facebook . this , this ) ) ; </a> 0
<a> final ServiceListener serviceListener ; </a> 0
<a> final Context applicationsContext ; </a> 0
<a> Messenger messageSender = null ; </a> 0
<a> public TokenRefreshServiceConnection ( Context applicationsContext , ServiceListener serviceListener ) { </a> 0
<a> this . applicationsContext = applicationsContext ; </a> 0
<a> this . serviceListener = serviceListener ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onServiceConnected ( ComponentName className , IBinder service ) { </a> 0
<a> messageSender = new Messenger ( service ) ; </a> 0
<a> refreshToken ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onServiceDisconnected ( ComponentName arg ) { </a> 0
<a> serviceListener . onError ( new Error ( "Service disconnected" ) ) ; </a> 0
<a> applicationsContext . unbindService ( TokenRefreshServiceConnection . this ) ; </a> 0
<a> } </a> 0
<a> private void refreshToken ( ) { </a> 0
<a> Bundle requestData = new Bundle ( ) ; </a> 0
<a> requestData . putString ( TOKEN , accessToken ) ; </a> 0
<a> Message request = Message . obtain ( ) ; </a> 0
<a> request . setData ( requestData ) ; </a> 0
<a> request . replyTo = messageReceiver ; </a> 0
<a> try { </a> 0
<a> messageSender . send ( request ) ; </a> 0
<a> } catch ( RemoteException e ) { </a> 0
<a> serviceListener . onError ( new Error ( "Service connection error" ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static class TokenRefreshConnectionHandler extends Handler { </a> 0
<a> WeakReference < Facebook > facebookWeakReference ; </a> 0
<a> WeakReference < TokenRefreshServiceConnection > connectionWeakReference ; </a> 0
<a> TokenRefreshConnectionHandler ( Facebook facebook , TokenRefreshServiceConnection connection ) { </a> 0
<a> super ( ) ; </a> 0
<a> facebookWeakReference = new WeakReference < Facebook > ( facebook ) ; </a> 0
<a> connectionWeakReference = new WeakReference < TokenRefreshServiceConnection > ( connection ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public void handleMessage ( Message msg ) { </a> 0
<a> Facebook facebook = facebookWeakReference . get ( ) ; </a> 0
<a> TokenRefreshServiceConnection connection = connectionWeakReference . get ( ) ; </a> 0
<a> if ( facebook == null || connection == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> String token = msg . getData ( ) . getString ( TOKEN ) ; </a> 0
<a> long expiresAtMsecFromEpoch = msg . getData ( ) . getLong ( EXPIRES ) * 1000L ; </a> 0
<a> if ( token != null ) { </a> 0
<a> facebook . setAccessToken ( token ) ; </a> 0
<a> facebook . setAccessExpires ( expiresAtMsecFromEpoch ) ; </a> 0
<a> Session refreshSession = facebook . session ; </a> 0
<a> if ( refreshSession != null ) { </a> 0
<a> LegacyHelper . extendTokenCompleted ( refreshSession , msg . getData ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( connection . serviceListener != null ) { </a> 0
<a> Bundle resultBundle = ( Bundle ) msg . getData ( ) . clone ( ) ; </a> 0
<a> resultBundle . putLong ( EXPIRES , expiresAtMsecFromEpoch ) ; </a> 0
<a> connection . serviceListener . onComplete ( resultBundle ) ; </a> 0
<a> } </a> 0
<a> } else if ( connection . serviceListener != null ) { </a> 0
<a> String error = msg . getData ( ) . getString ( "error" ) ; </a> 0
<a> if ( msg . getData ( ) . containsKey ( "error_code" ) ) { </a> 0
<a> int errorCode = msg . getData ( ) . getInt ( "error_code" ) ; </a> 0
<a> connection . serviceListener . onFacebookError ( new FacebookError ( error , null , errorCode ) ) ; </a> 0
<a> } else { </a> 0
<a> connection . serviceListener . onError ( new Error ( error != null ? error : "Unknown service error" ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( connection != null ) { </a> 0
<a> connection . applicationsContext . unbindService ( connection ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String logout ( Context context ) throws MalformedURLException , IOException { </a> 0
<a> return logoutImpl ( context ) ; </a> 0
<a> } </a> 0
<a> String logoutImpl ( Context context ) throws MalformedURLException , IOException { </a> 0
<a> checkUserSession ( "logout" ) ; </a> 0
<a> Bundle b = new Bundle ( ) ; </a> 0
<a> b . putString ( "method" , "auth.expireSession" ) ; </a> 0
<a> String response = request ( b ) ; </a> 0
<a> long currentTimeMillis = System . currentTimeMillis ( ) ; </a> 0
<a> Session sessionToClose = null ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> sessionToClose = session ; </a> 0
<a> session = null ; </a> 0
<a> accessToken = null ; </a> 0
<a> accessExpiresMillisecondsAfterEpoch = 0 ; </a> 0
<a> lastAccessUpdateMillisecondsAfterEpoch = currentTimeMillis ; </a> 0
<a> sessionInvalidated = false ; </a> 0
<a> } </a> 0
<a> if ( sessionToClose != null ) { </a> 0
<a> sessionToClose . closeAndClearTokenInformation ( ) ; </a> 0
<a> } </a> 0
<a> return response ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String request ( Bundle parameters ) throws MalformedURLException , IOException { </a> 0
<a> if ( ! parameters . containsKey ( "method" ) ) { </a> 0
<a> throw new IllegalArgumentException ( "API method must be specified. " </a> 0
<a> + "(parameters must contain key \"method\" and value). See" </a> 0
<a> + " http://developers.facebook.com/docs/reference/rest/" ) ; </a> 0
<a> } </a> 0
<a> return requestImpl ( null , parameters , "GET" ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String request ( String graphPath ) throws MalformedURLException , IOException { </a> 0
<a> return requestImpl ( graphPath , new Bundle ( ) , "GET" ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String request ( String graphPath , Bundle parameters ) throws MalformedURLException , IOException { </a> 0
<a> return requestImpl ( graphPath , parameters , "GET" ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String request ( String graphPath , Bundle params , String httpMethod ) throws FileNotFoundException , </a> 0
<a> MalformedURLException , IOException { </a> 0
<a> return requestImpl ( graphPath , params , httpMethod ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> String requestImpl ( String graphPath , Bundle params , String httpMethod ) throws FileNotFoundException , </a> 0
<a> MalformedURLException , IOException { </a> 0
<a> params . putString ( "format" , "json" ) ; </a> 0
<a> if ( isSessionValid ( ) ) { </a> 0
<a> params . putString ( TOKEN , getAccessToken ( ) ) ; </a> 0
<a> } </a> 0
<a> String url = ( graphPath != null ) ? GRAPH_BASE_URL + graphPath : RESTSERVER_URL ; </a> 0
<a> return Util . openUrl ( url , httpMethod , params ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void dialog ( Context context , String action , DialogListener listener ) { </a> 0
<a> dialog ( context , action , new Bundle ( ) , listener ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void dialog ( Context context , String action , Bundle parameters , final DialogListener listener ) { </a> 0
<a> parameters . putString ( "display" , "touch" ) ; </a> 0
<a> parameters . putString ( "redirect_uri" , REDIRECT_URI ) ; </a> 0
<a> if ( action . equals ( LOGIN ) ) { </a> 0
<a> parameters . putString ( "type" , "user_agent" ) ; </a> 0
<a> parameters . putString ( "client_id" , mAppId ) ; </a> 0
<a> } else { </a> 0
<a> parameters . putString ( "app_id" , mAppId ) ; </a> 0
<a> if ( isSessionValid ( ) ) { </a> 0
<a> parameters . putString ( TOKEN , getAccessToken ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( context . checkCallingOrSelfPermission ( Manifest . permission . INTERNET ) != PackageManager . PERMISSION_GRANTED ) { </a> 0
<a> Util . showAlert ( context , "Error" , "Application requires permission to access the Internet" ) ; </a> 0
<a> } else { </a> 0
<a> new FbDialog ( context , action , parameters , listener ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean isSessionValid ( ) { </a> 0
<a> return ( getAccessToken ( ) != null ) </a> 0
<a> && ( ( getAccessExpires ( ) == 0 ) || ( System . currentTimeMillis ( ) < getAccessExpires ( ) ) ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void setSession ( Session session ) { </a> 0
<a> if ( session == null ) { </a> 0
<a> throw new IllegalArgumentException ( "session cannot be null" ) ; </a> 0
<a> } </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> this . userSetSession = session ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void checkUserSession ( String methodName ) { </a> 0
<a> if ( userSetSession != null ) { </a> 0
<a> throw new UnsupportedOperationException ( </a> 0
<a> String . format ( "Cannot call %s after setSession has been called." , methodName ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public final Session getSession ( ) { </a> 0
<a> while ( true ) { </a> 0
<a> String cachedToken = null ; </a> 0
<a> Session oldSession = null ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( userSetSession != null ) { </a> 0
<a> return userSetSession ; </a> 0
<a> } </a> 0
<a> if ( ( session != null ) || ! sessionInvalidated ) { </a> 0
<a> return session ; </a> 0
<a> } </a> 0
<a> cachedToken = accessToken ; </a> 0
<a> oldSession = session ; </a> 0
<a> } </a> 0
<a> if ( cachedToken == null ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> List < String > permissions ; </a> 0
<a> if ( oldSession != null ) { </a> 0
<a> permissions = oldSession . getPermissions ( ) ; </a> 0
<a> } else if ( pendingAuthorizationPermissions != null ) { </a> 0
<a> permissions = Arrays . asList ( pendingAuthorizationPermissions ) ; </a> 0
<a> } else { </a> 0
<a> permissions = Collections . < String > emptyList ( ) ; </a> 0
<a> } </a> 0
<a> Session newSession = new Session . Builder ( pendingAuthorizationActivity ) . </a> 0
<a> setApplicationId ( mAppId ) . </a> 0
<a> setTokenCachingStrategy ( getTokenCache ( ) ) . </a> 0
<a> build ( ) ; </a> 0
<a> if ( newSession . getState ( ) != SessionState . CREATED_TOKEN_LOADED ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> Session . OpenRequest openRequest = </a> 0
<a> new Session . OpenRequest ( pendingAuthorizationActivity ) . setPermissions ( permissions ) ; </a> 0
<a> openSession ( newSession , openRequest , ! permissions . isEmpty ( ) ) ; </a> 0
<a> Session invalidatedSession = null ; </a> 0
<a> Session returnSession = null ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> if ( sessionInvalidated || ( session == null ) ) { </a> 0
<a> invalidatedSession = session ; </a> 0
<a> returnSession = session = newSession ; </a> 0
<a> sessionInvalidated = false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( invalidatedSession != null ) { </a> 0
<a> invalidatedSession . close ( ) ; </a> 0
<a> } </a> 0
<a> if ( returnSession != null ) { </a> 0
<a> return returnSession ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String getAccessToken ( ) { </a> 0
<a> Session s = getSession ( ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> return s . getAccessToken ( ) ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public long getAccessExpires ( ) { </a> 0
<a> Session s = getSession ( ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> return s . getExpirationDate ( ) . getTime ( ) ; </a> 0
<a> } else { </a> 0
<a> return accessExpiresMillisecondsAfterEpoch ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public long getLastAccessUpdate ( ) { </a> 0
<a> return lastAccessUpdateMillisecondsAfterEpoch ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void setTokenFromCache ( String accessToken , long accessExpires , long lastAccessUpdate ) { </a> 0
<a> checkUserSession ( "setTokenFromCache" ) ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> this . accessToken = accessToken ; </a> 0
<a> accessExpiresMillisecondsAfterEpoch = accessExpires ; </a> 0
<a> lastAccessUpdateMillisecondsAfterEpoch = lastAccessUpdate ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void setAccessToken ( String token ) { </a> 0
<a> checkUserSession ( "setAccessToken" ) ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> accessToken = token ; </a> 0
<a> lastAccessUpdateMillisecondsAfterEpoch = System . currentTimeMillis ( ) ; </a> 0
<a> sessionInvalidated = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void setAccessExpires ( long timestampInMsec ) { </a> 0
<a> checkUserSession ( "setAccessExpires" ) ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> accessExpiresMillisecondsAfterEpoch = timestampInMsec ; </a> 0
<a> lastAccessUpdateMillisecondsAfterEpoch = System . currentTimeMillis ( ) ; </a> 0
<a> sessionInvalidated = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void setAccessExpiresIn ( String expiresInSecsFromNow ) { </a> 0
<a> checkUserSession ( "setAccessExpiresIn" ) ; </a> 0
<a> if ( expiresInSecsFromNow != null ) { </a> 0
<a> long expires = expiresInSecsFromNow . equals ( "0" ) ? 0 : System . currentTimeMillis ( ) </a> 0
<a> + Long . parseLong ( expiresInSecsFromNow ) * 1000L ; </a> 0
<a> setAccessExpires ( expires ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public String getAppId ( ) { </a> 0
<a> return mAppId ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void setAppId ( String appId ) { </a> 0
<a> checkUserSession ( "setAppId" ) ; </a> 0
<a> synchronized ( this . lock ) { </a> 0
<a> mAppId = appId ; </a> 0
<a> sessionInvalidated = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private TokenCachingStrategy getTokenCache ( ) { </a> 0
<a> if ( tokenCache == null ) { </a> 1
<a> tokenCache = new SetterTokenCachingStrategy ( ) ; </a> 0
<a> } </a> 0
<a> return tokenCache ; </a> 1
<a> } </a> 1
<a> private static String [ ] stringArray ( List < String > list ) { </a> 1
<a> String [ ] array = new String [ list . size ( ) ] ; </a> 1
<a> if ( list != null ) { </a> 0
<a> for ( int i = 0 ; i < array . length ; i ++ ) { </a> 0
<a> array [ i ] = list . get ( i ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return array ; </a> 0
<a> } </a> 0
<a> private static List < String > stringList ( String [ ] array ) { </a> 0
<a> if ( array != null ) { </a> 0
<a> return Arrays . asList ( array ) ; </a> 0
<a> } else { </a> 0
<a> return Collections . emptyList ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class SetterTokenCachingStrategy extends TokenCachingStrategy { </a> 0
<a> @ Override </a> 0
<a> public Bundle load ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> if ( accessToken != null ) { </a> 0
<a> TokenCachingStrategy . putToken ( bundle , accessToken ) ; </a> 0
<a> TokenCachingStrategy . putExpirationMilliseconds ( bundle , accessExpiresMillisecondsAfterEpoch ) ; </a> 0
<a> TokenCachingStrategy . putPermissions ( bundle , stringList ( pendingAuthorizationPermissions ) ) ; </a> 0
<a> TokenCachingStrategy . putSource ( bundle , AccessTokenSource . WEB_VIEW ) ; </a> 0
<a> TokenCachingStrategy . putLastRefreshMilliseconds ( bundle , lastAccessUpdateMillisecondsAfterEpoch ) ; </a> 0
<a> } </a> 0
<a> return bundle ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void save ( Bundle bundle ) { </a> 0
<a> accessToken = TokenCachingStrategy . getToken ( bundle ) ; </a> 0
<a> accessExpiresMillisecondsAfterEpoch = TokenCachingStrategy . getExpirationMilliseconds ( bundle ) ; </a> 0
<a> pendingAuthorizationPermissions = stringArray ( TokenCachingStrategy . getPermissions ( bundle ) ) ; </a> 0
<a> lastAccessUpdateMillisecondsAfterEpoch = TokenCachingStrategy . getLastRefreshMilliseconds ( bundle ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> accessToken = null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static String getAttributionId ( ContentResolver contentResolver ) { </a> 0
<a> return Settings . getAttributionId ( contentResolver ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean getShouldAutoPublishInstall ( ) { </a> 0
<a> return Settings . getShouldAutoPublishInstall ( ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public void setShouldAutoPublishInstall ( boolean value ) { </a> 0
<a> Settings . setShouldAutoPublishInstall ( value ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public boolean publishInstall ( final Context context ) { </a> 0
<a> Settings . publishInstallAsync ( context , mAppId ) ; </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> public static interface DialogListener { </a> 0
<a> public void onComplete ( Bundle values ) ; </a> 0
<a> public void onFacebookError ( FacebookError e ) ; </a> 0
<a> public void onError ( DialogError e ) ; </a> 0
<a> public void onCancel ( ) ; </a> 0
<a> } </a> 0
<a> public static interface ServiceListener { </a> 0
<a> public void onComplete ( Bundle values ) ; </a> 0
<a> public void onFacebookError ( FacebookError e ) ; </a> 0
<a> public void onError ( Error e ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static final String FB_APP_SIGNATURE = </a> 0
<a> "30820268308201d102044a9c4610300d06092a864886f70d0101040500307a310" </a> 0
<a> + "b3009060355040613025553310b30090603550408130243413112301006035504" </a> 0
<a> + "07130950616c6f20416c746f31183016060355040a130f46616365626f6f6b204" </a> 0
<a> + "d6f62696c653111300f060355040b130846616365626f6f6b311d301b06035504" </a> 0
<a> + "03131446616365626f6f6b20436f72706f726174696f6e3020170d30393038333" </a> 0
<a> + "13231353231365a180f32303530303932353231353231365a307a310b30090603" </a> 0
<a> + "55040613025553310b30090603550408130243413112301006035504071309506" </a> 0
<a> + "16c6f20416c746f31183016060355040a130f46616365626f6f6b204d6f62696c" </a> 0
<a> + "653111300f060355040b130846616365626f6f6b311d301b06035504031314466" </a> 0
<a> + "16365626f6f6b20436f72706f726174696f6e30819f300d06092a864886f70d01" </a> 0
<a> + "0101050003818d0030818902818100c207d51df8eb8c97d93ba0c8c1002c928fa" </a> 0
<a> + "b00dc1b42fca5e66e99cc3023ed2d214d822bc59e8e35ddcf5f44c7ae8ade50d7" </a> 0
<a> + "e0c434f500e6c131f4a2834f987fc46406115de2018ebbb0d5a3c261bd97581cc" </a> 0
<a> + "fef76afc7135a6d59e8855ecd7eacc8f8737e794c60a761c536b72b11fac8e603" </a> 0
<a> + "f5da1a2d54aa103b8a13c0dbc10203010001300d06092a864886f70d010104050" </a> 0
<a> + "0038181005ee9be8bcbb250648d3b741290a82a1c9dc2e76a0af2f2228f1d9f9c" </a> 0
<a> + "4007529c446a70175c5a900d5141812866db46be6559e2141616483998211f4a6" </a> 0
<a> + "73149fb2232a10d247663b26a9031e15f84bc1c74d141ff98a02d76f85b2c8ab2" </a> 0
<a> + "571b6469b232d8e768a7f7ca04f7abe4a775615916c07940656b58717457b42bd" </a> 0
<a> + "928a2" ; </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . AlertDialog . Builder ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import com . facebook . internal . Utility ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . net . * ; </a> 0
<a> public final class Util { </a> 0
<a> private final static String UTF8 = "UTF-8" ; </a> 0
<a> @ Deprecated </a> 0
<a> public static String encodePostBody ( Bundle parameters , String boundary ) { </a> 0
<a> if ( parameters == null ) return "" ; </a> 0
<a> StringBuilder sb = new StringBuilder ( ) ; </a> 0
<a> for ( String key : parameters . keySet ( ) ) { </a> 0
<a> Object parameter = parameters . get ( key ) ; </a> 0
<a> if ( ! ( parameter instanceof String ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> sb . append ( "Content-Disposition: form-data; name=\"" + key + </a> 0
<a> "\"\r\n\r\n" + ( String ) parameter ) ; </a> 0
<a> sb . append ( "\r\n" + "--" + boundary + "\r\n" ) ; </a> 0
<a> } </a> 0
<a> return sb . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static String encodeUrl ( Bundle parameters ) { </a> 0
<a> if ( parameters == null ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> StringBuilder sb = new StringBuilder ( ) ; </a> 0
<a> boolean first = true ; </a> 0
<a> for ( String key : parameters . keySet ( ) ) { </a> 0
<a> Object parameter = parameters . get ( key ) ; </a> 0
<a> if ( ! ( parameter instanceof String ) ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> if ( first ) first = false ; else sb . append ( "&" ) ; </a> 0
<a> sb . append ( URLEncoder . encode ( key ) + "=" + </a> 0
<a> URLEncoder . encode ( parameters . getString ( key ) ) ) ; </a> 0
<a> } </a> 0
<a> return sb . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static Bundle decodeUrl ( String s ) { </a> 0
<a> Bundle params = new Bundle ( ) ; </a> 0
<a> if ( s != null ) { </a> 0
<a> String array [ ] = s . split ( "&" ) ; </a> 0
<a> for ( String parameter : array ) { </a> 0
<a> String v [ ] = parameter . split ( "=" ) ; </a> 0
<a> try { </a> 0
<a> if ( v . length == 2 ) { </a> 0
<a> params . putString ( URLDecoder . decode ( v [ 0 ] , UTF8 ) , </a> 0
<a> URLDecoder . decode ( v [ 1 ] , UTF8 ) ) ; </a> 0
<a> } else if ( v . length == 1 ) { </a> 0
<a> params . putString ( URLDecoder . decode ( v [ 0 ] , UTF8 ) , "" ) ; </a> 0
<a> } </a> 0
<a> } catch ( UnsupportedEncodingException e ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return params ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static Bundle parseUrl ( String url ) { </a> 0
<a> url = url . replace ( "fbconnect" , "http" ) ; </a> 0
<a> try { </a> 0
<a> URL u = new URL ( url ) ; </a> 0
<a> Bundle b = decodeUrl ( u . getQuery ( ) ) ; </a> 0
<a> b . putAll ( decodeUrl ( u . getRef ( ) ) ) ; </a> 0
<a> return b ; </a> 0
<a> } catch ( MalformedURLException e ) { </a> 0
<a> return new Bundle ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static String openUrl ( String url , String method , Bundle params ) </a> 0
<a> throws MalformedURLException , IOException { </a> 0
<a> String strBoundary = "3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f" ; </a> 0
<a> String endLine = "\r\n" ; </a> 0
<a> OutputStream os ; </a> 0
<a> if ( method . equals ( "GET" ) ) { </a> 0
<a> url = url + "?" + encodeUrl ( params ) ; </a> 0
<a> } </a> 0
<a> Utility . logd ( "Facebook-Util" , method + " URL: " + url ) ; </a> 0
<a> HttpURLConnection conn = </a> 0
<a> ( HttpURLConnection ) new URL ( url ) . openConnection ( ) ; </a> 0
<a> conn . setRequestProperty ( "User-Agent" , System . getProperties ( ) . </a> 0
<a> getProperty ( "http.agent" ) + " FacebookAndroidSDK" ) ; </a> 0
<a> if ( ! method . equals ( "GET" ) ) { </a> 0
<a> Bundle dataparams = new Bundle ( ) ; </a> 0
<a> for ( String key : params . keySet ( ) ) { </a> 0
<a> Object parameter = params . get ( key ) ; </a> 0
<a> if ( parameter instanceof byte [ ] ) { </a> 0
<a> dataparams . putByteArray ( key , ( byte [ ] ) parameter ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! params . containsKey ( "method" ) ) { </a> 0
<a> params . putString ( "method" , method ) ; </a> 0
<a> } </a> 0
<a> if ( params . containsKey ( "access_token" ) ) { </a> 0
<a> String decoded_token = </a> 0
<a> URLDecoder . decode ( params . getString ( "access_token" ) ) ; </a> 0
<a> params . putString ( "access_token" , decoded_token ) ; </a> 0
<a> } </a> 0
<a> conn . setRequestMethod ( "POST" ) ; </a> 0
<a> conn . setRequestProperty ( </a> 0
<a> "Content-Type" , </a> 0
<a> "multipart/form-data;boundary=" + strBoundary ) ; </a> 0
<a> conn . setDoOutput ( true ) ; </a> 0
<a> conn . setDoInput ( true ) ; </a> 0
<a> conn . setRequestProperty ( "Connection" , "Keep-Alive" ) ; </a> 0
<a> conn . connect ( ) ; </a> 0
<a> os = new BufferedOutputStream ( conn . getOutputStream ( ) ) ; </a> 0
<a> os . write ( ( "--" + strBoundary + endLine ) . getBytes ( ) ) ; </a> 0
<a> os . write ( ( encodePostBody ( params , strBoundary ) ) . getBytes ( ) ) ; </a> 0
<a> os . write ( ( endLine + "--" + strBoundary + endLine ) . getBytes ( ) ) ; </a> 0
<a> if ( ! dataparams . isEmpty ( ) ) { </a> 0
<a> for ( String key : dataparams . keySet ( ) ) { </a> 0
<a> os . write ( ( "Content-Disposition: form-data; filename=\"" + key + "\"" + endLine ) . getBytes ( ) ) ; </a> 0
<a> os . write ( ( "Content-Type: content/unknown" + endLine + endLine ) . getBytes ( ) ) ; </a> 0
<a> os . write ( dataparams . getByteArray ( key ) ) ; </a> 0
<a> os . write ( ( endLine + "--" + strBoundary + endLine ) . getBytes ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> os . flush ( ) ; </a> 0
<a> } </a> 0
<a> String response = "" ; </a> 0
<a> try { </a> 0
<a> response = read ( conn . getInputStream ( ) ) ; </a> 0
<a> } catch ( FileNotFoundException e ) { </a> 0
<a> response = read ( conn . getErrorStream ( ) ) ; </a> 0
<a> } </a> 0
<a> return response ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> private static String read ( InputStream in ) throws IOException { </a> 0
<a> StringBuilder sb = new StringBuilder ( ) ; </a> 0
<a> BufferedReader r = new BufferedReader ( new InputStreamReader ( in ) , 1000 ) ; </a> 0
<a> for ( String line = r . readLine ( ) ; line != null ; line = r . readLine ( ) ) { </a> 0
<a> sb . append ( line ) ; </a> 0
<a> } </a> 0
<a> in . close ( ) ; </a> 0
<a> return sb . toString ( ) ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static JSONObject parseJson ( String response ) </a> 0
<a> throws JSONException , FacebookError { </a> 0
<a> if ( response . equals ( "false" ) ) { </a> 0
<a> throw new FacebookError ( "request failed" ) ; </a> 0
<a> } </a> 0
<a> if ( response . equals ( "true" ) ) { </a> 0
<a> response = "{value : true}" ; </a> 0
<a> } </a> 0
<a> JSONObject json = new JSONObject ( response ) ; </a> 0
<a> if ( json . has ( "error" ) ) { </a> 0
<a> JSONObject error = json . getJSONObject ( "error" ) ; </a> 0
<a> throw new FacebookError ( </a> 0
<a> error . getString ( "message" ) , error . getString ( "type" ) , 0 ) ; </a> 0
<a> } </a> 0
<a> if ( json . has ( "error_code" ) && json . has ( "error_msg" ) ) { </a> 0
<a> throw new FacebookError ( json . getString ( "error_msg" ) , "" , </a> 0
<a> Integer . parseInt ( json . getString ( "error_code" ) ) ) ; </a> 0
<a> } </a> 0
<a> if ( json . has ( "error_code" ) ) { </a> 0
<a> throw new FacebookError ( "request failed" , "" , </a> 0
<a> Integer . parseInt ( json . getString ( "error_code" ) ) ) ; </a> 0
<a> } </a> 0
<a> if ( json . has ( "error_msg" ) ) { </a> 0
<a> throw new FacebookError ( json . getString ( "error_msg" ) ) ; </a> 0
<a> } </a> 0
<a> if ( json . has ( "error_reason" ) ) { </a> 0
<a> throw new FacebookError ( json . getString ( "error_reason" ) ) ; </a> 0
<a> } </a> 0
<a> return json ; </a> 0
<a> } </a> 0
<a> @ Deprecated </a> 0
<a> public static void showAlert ( Context context , String title , String text ) { </a> 0
<a> Builder alertBuilder = new Builder ( context ) ; </a> 0
<a> alertBuilder . setTitle ( title ) ; </a> 0
<a> alertBuilder . setMessage ( text ) ; </a> 0
<a> alertBuilder . create ( ) . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . util . Log ; </a> 0
<a> import com . facebook . LoggingBehavior ; </a> 0
<a> import com . facebook . Settings ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Map ; </a> 0
<a> public class Logger { </a> 0
<a> public static final String LOG_TAG_BASE = "FacebookSDK." ; </a> 0
<a> private static final HashMap < String , String > stringsToReplace = new HashMap < String , String > ( ) ; </a> 0
<a> private final LoggingBehavior behavior ; </a> 0
<a> private final String tag ; </a> 0
<a> private StringBuilder contents ; </a> 0
<a> private int priority = Log . DEBUG ; </a> 0
<a> public synchronized static void registerStringToReplace ( String original , String replace ) { </a> 0
<a> stringsToReplace . put ( original , replace ) ; </a> 0
<a> } </a> 0
<a> public synchronized static void registerAccessToken ( String accessToken ) { </a> 0
<a> if ( Settings . isLoggingBehaviorEnabled ( LoggingBehavior . INCLUDE_ACCESS_TOKENS ) == false ) { </a> 0
<a> registerStringToReplace ( accessToken , "ACCESS_TOKEN_REMOVED" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void log ( LoggingBehavior behavior , String tag , String string ) { </a> 0
<a> log ( behavior , Log . DEBUG , tag , string ) ; </a> 0
<a> } </a> 0
<a> public static void log ( LoggingBehavior behavior , String tag , String format , Object ... args ) { </a> 0
<a> if ( Settings . isLoggingBehaviorEnabled ( behavior ) ) { </a> 0
<a> String string = String . format ( format , args ) ; </a> 0
<a> log ( behavior , Log . DEBUG , tag , string ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static void log ( LoggingBehavior behavior , int priority , String tag , String string ) { </a> 0
<a> if ( Settings . isLoggingBehaviorEnabled ( behavior ) ) { </a> 0
<a> string = replaceStrings ( string ) ; </a> 0
<a> if ( tag . startsWith ( LOG_TAG_BASE ) == false ) { </a> 0
<a> tag = LOG_TAG_BASE + tag ; </a> 0
<a> } </a> 0
<a> Log . println ( priority , tag , string ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private synchronized static String replaceStrings ( String string ) { </a> 0
<a> for ( Map . Entry < String , String > entry : stringsToReplace . entrySet ( ) ) { </a> 0
<a> string = string . replace ( entry . getKey ( ) , entry . getValue ( ) ) ; </a> 0
<a> } </a> 0
<a> return string ; </a> 0
<a> } </a> 0
<a> public Logger ( LoggingBehavior behavior , String tag ) { </a> 0
<a> Validate . notNullOrEmpty ( tag , "tag" ) ; </a> 0
<a> this . behavior = behavior ; </a> 0
<a> this . tag = LOG_TAG_BASE + tag ; </a> 0
<a> this . contents = new StringBuilder ( ) ; </a> 0
<a> } </a> 0
<a> public int getPriority ( ) { </a> 0
<a> return priority ; </a> 0
<a> } </a> 0
<a> public void setPriority ( int value ) { </a> 0
<a> Validate . oneOf ( value , "value" , Log . ASSERT , Log . DEBUG , Log . ERROR , Log . INFO , Log . VERBOSE , Log . WARN ) ; </a> 0
<a> priority = value ; </a> 0
<a> } </a> 0
<a> public String getContents ( ) { </a> 0
<a> return replaceStrings ( contents . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> public void log ( ) { </a> 0
<a> logString ( contents . toString ( ) ) ; </a> 0
<a> contents = new StringBuilder ( ) ; </a> 0
<a> } </a> 0
<a> public void logString ( String string ) { </a> 0
<a> log ( behavior , priority , tag , string ) ; </a> 0
<a> } </a> 0
<a> public void append ( StringBuilder stringBuilder ) { </a> 0
<a> if ( shouldLog ( ) ) { </a> 0
<a> contents . append ( stringBuilder ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void append ( String string ) { </a> 0
<a> if ( shouldLog ( ) ) { </a> 0
<a> contents . append ( string ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void append ( String format , Object ... args ) { </a> 0
<a> if ( shouldLog ( ) ) { </a> 0
<a> contents . append ( String . format ( format , args ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void appendKeyValue ( String key , Object value ) { </a> 0
<a> append ( " %s:\t%s\n" , key , value ) ; </a> 0
<a> } </a> 0
<a> private boolean shouldLog ( ) { </a> 0
<a> return Settings . isLoggingBehaviorEnabled ( behavior ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> public enum SessionAuthorizationType { </a> 0
<a> READ , </a> 0
<a> PUBLISH </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> class ImageResponse { </a> 0
<a> private ImageRequest request ; </a> 0
<a> private Exception error ; </a> 0
<a> private boolean isCachedRedirect ; </a> 0
<a> private Bitmap bitmap ; </a> 0
<a> ImageResponse ( ImageRequest request , Exception error , boolean isCachedRedirect , Bitmap bitmap ) { </a> 0
<a> this . request = request ; </a> 0
<a> this . error = error ; </a> 0
<a> this . bitmap = bitmap ; </a> 0
<a> this . isCachedRedirect = isCachedRedirect ; </a> 0
<a> } </a> 0
<a> ImageRequest getRequest ( ) { </a> 0
<a> return request ; </a> 0
<a> } </a> 0
<a> Exception getError ( ) { </a> 0
<a> return error ; </a> 0
<a> } </a> 0
<a> Bitmap getBitmap ( ) { </a> 0
<a> return bitmap ; </a> 0
<a> } </a> 0
<a> boolean isCachedRedirect ( ) { </a> 0
<a> return isCachedRedirect ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . content . res . TypedArray ; </a> 0
<a> import android . graphics . drawable . Drawable ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . support . v4 . app . LoaderManager ; </a> 0
<a> import android . support . v4 . content . Loader ; </a> 0
<a> import android . text . TextUtils ; </a> 0
<a> import android . util . AttributeSet ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . view . ViewStub ; </a> 0
<a> import android . view . animation . AlphaAnimation ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . android . R ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . internal . SessionTracker ; </a> 0
<a> import java . util . * ; </a> 0
<a> public abstract class PickerFragment < T extends GraphObject > extends Fragment { </a> 0
<a> public static final String SHOW_PICTURES_BUNDLE_KEY = "com.facebook.widget.PickerFragment.ShowPictures" ; </a> 0
<a> public static final String EXTRA_FIELDS_BUNDLE_KEY = "com.facebook.widget.PickerFragment.ExtraFields" ; </a> 0
<a> public static final String SHOW_TITLE_BAR_BUNDLE_KEY = "com.facebook.widget.PickerFragment.ShowTitleBar" ; </a> 0
<a> public static final String TITLE_TEXT_BUNDLE_KEY = "com.facebook.widget.PickerFragment.TitleText" ; </a> 0
<a> public static final String DONE_BUTTON_TEXT_BUNDLE_KEY = "com.facebook.widget.PickerFragment.DoneButtonText" ; </a> 0
<a> private static final String SELECTION_BUNDLE_KEY = "com.facebook.android.PickerFragment.Selection" ; </a> 0
<a> private static final String ACTIVITY_CIRCLE_SHOW_KEY = "com.facebook.android.PickerFragment.ActivityCircleShown" ; </a> 0
<a> private static final int PROFILE_PICTURE_PREFETCH_BUFFER = 5 ; </a> 0
<a> private final int layout ; </a> 0
<a> private OnErrorListener onErrorListener ; </a> 0
<a> private OnDataChangedListener onDataChangedListener ; </a> 0
<a> private OnSelectionChangedListener onSelectionChangedListener ; </a> 0
<a> private OnDoneButtonClickedListener onDoneButtonClickedListener ; </a> 0
<a> private GraphObjectFilter < T > filter ; </a> 0
<a> private boolean showPictures = true ; </a> 0
<a> private boolean showTitleBar = true ; </a> 0
<a> private ListView listView ; </a> 0
<a> HashSet < String > extraFields = new HashSet < String > ( ) ; </a> 0
<a> GraphObjectAdapter < T > adapter ; </a> 0
<a> private final Class < T > graphObjectClass ; </a> 0
<a> private LoadingStrategy loadingStrategy ; </a> 0
<a> private SelectionStrategy selectionStrategy ; </a> 0
<a> private ProgressBar activityCircle ; </a> 0
<a> private SessionTracker sessionTracker ; </a> 0
<a> private String titleText ; </a> 0
<a> private String doneButtonText ; </a> 0
<a> private TextView titleTextView ; </a> 0
<a> private Button doneButton ; </a> 0
<a> private Drawable titleBarBackground ; </a> 0
<a> private Drawable doneButtonBackground ; </a> 0
<a> PickerFragment ( Class < T > graphObjectClass , int layout , Bundle args ) { </a> 0
<a> this . graphObjectClass = graphObjectClass ; </a> 0
<a> this . layout = layout ; </a> 0
<a> setPickerFragmentSettingsFromBundle ( args ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> adapter = createAdapter ( ) ; </a> 0
<a> adapter . setFilter ( new GraphObjectAdapter . Filter < T > ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean includeItem ( T graphObject ) { </a> 0
<a> return filterIncludesItem ( graphObject ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onInflate ( Activity activity , AttributeSet attrs , Bundle savedInstanceState ) { </a> 0
<a> super . onInflate ( activity , attrs , savedInstanceState ) ; </a> 0
<a> TypedArray a = activity . obtainStyledAttributes ( attrs , R . styleable . com_facebook_picker_fragment ) ; </a> 0
<a> setShowPictures ( a . getBoolean ( R . styleable . com_facebook_picker_fragment_show_pictures , showPictures ) ) ; </a> 0
<a> String extraFieldsString = a . getString ( R . styleable . com_facebook_picker_fragment_extra_fields ) ; </a> 0
<a> if ( extraFieldsString != null ) { </a> 0
<a> String [ ] strings = extraFieldsString . split ( "," ) ; </a> 0
<a> setExtraFields ( Arrays . asList ( strings ) ) ; </a> 0
<a> } </a> 0
<a> showTitleBar = a . getBoolean ( R . styleable . com_facebook_picker_fragment_show_title_bar , showTitleBar ) ; </a> 0
<a> titleText = a . getString ( R . styleable . com_facebook_picker_fragment_title_text ) ; </a> 0
<a> doneButtonText = a . getString ( R . styleable . com_facebook_picker_fragment_done_button_text ) ; </a> 0
<a> titleBarBackground = a . getDrawable ( R . styleable . com_facebook_picker_fragment_title_bar_background ) ; </a> 0
<a> doneButtonBackground = a . getDrawable ( R . styleable . com_facebook_picker_fragment_done_button_background ) ; </a> 0
<a> a . recycle ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { </a> 0
<a> ViewGroup view = ( ViewGroup ) inflater . inflate ( layout , container , false ) ; </a> 0
<a> listView = ( ListView ) view . findViewById ( R . id . com_facebook_picker_list_view ) ; </a> 0
<a> listView . setOnItemClickListener ( new AdapterView . OnItemClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onItemClick ( AdapterView < ? > parent , View v , int position , long id ) { </a> 0
<a> onListItemClick ( ( ListView ) parent , v , position ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> listView . setOnLongClickListener ( new View . OnLongClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean onLongClick ( View v ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> listView . setOnScrollListener ( onScrollListener ) ; </a> 0
<a> listView . setAdapter ( adapter ) ; </a> 0
<a> activityCircle = ( ProgressBar ) view . findViewById ( R . id . com_facebook_picker_activity_circle ) ; </a> 0
<a> return view ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityCreated ( final Bundle savedInstanceState ) { </a> 0
<a> super . onActivityCreated ( savedInstanceState ) ; </a> 0
<a> sessionTracker = new SessionTracker ( getActivity ( ) , new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( ! session . isOpened ( ) ) { </a> 0
<a> clearResults ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> setSettingsFromBundle ( savedInstanceState ) ; </a> 0
<a> loadingStrategy = createLoadingStrategy ( ) ; </a> 0
<a> loadingStrategy . attach ( adapter ) ; </a> 0
<a> selectionStrategy = createSelectionStrategy ( ) ; </a> 0
<a> selectionStrategy . readSelectionFromBundle ( savedInstanceState , SELECTION_BUNDLE_KEY ) ; </a> 0
<a> if ( showTitleBar ) { </a> 0
<a> inflateTitleBar ( ( ViewGroup ) getView ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( activityCircle != null && savedInstanceState != null ) { </a> 0
<a> boolean shown = savedInstanceState . getBoolean ( ACTIVITY_CIRCLE_SHOW_KEY , false ) ; </a> 0
<a> if ( shown ) { </a> 0
<a> displayActivityCircle ( ) ; </a> 0
<a> } else { </a> 0
<a> hideActivityCircle ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onDetach ( ) { </a> 0
<a> super . onDetach ( ) ; </a> 0
<a> listView . setOnScrollListener ( null ) ; </a> 0
<a> listView . setAdapter ( null ) ; </a> 0
<a> loadingStrategy . detach ( ) ; </a> 0
<a> sessionTracker . stopTracking ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> saveSettingsToBundle ( outState ) ; </a> 0
<a> selectionStrategy . saveSelectionToBundle ( outState , SELECTION_BUNDLE_KEY ) ; </a> 0
<a> if ( activityCircle != null ) { </a> 0
<a> outState . putBoolean ( ACTIVITY_CIRCLE_SHOW_KEY , activityCircle . getVisibility ( ) == View . VISIBLE ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void setArguments ( Bundle args ) { </a> 0
<a> super . setArguments ( args ) ; </a> 0
<a> setSettingsFromBundle ( args ) ; </a> 0
<a> } </a> 0
<a> public OnDataChangedListener getOnDataChangedListener ( ) { </a> 0
<a> return onDataChangedListener ; </a> 0
<a> } </a> 0
<a> public void setOnDataChangedListener ( OnDataChangedListener onDataChangedListener ) { </a> 0
<a> this . onDataChangedListener = onDataChangedListener ; </a> 0
<a> } </a> 0
<a> public OnSelectionChangedListener getOnSelectionChangedListener ( ) { </a> 0
<a> return onSelectionChangedListener ; </a> 0
<a> } </a> 0
<a> public void setOnSelectionChangedListener ( </a> 0
<a> OnSelectionChangedListener onSelectionChangedListener ) { </a> 0
<a> this . onSelectionChangedListener = onSelectionChangedListener ; </a> 0
<a> } </a> 0
<a> public OnDoneButtonClickedListener getOnDoneButtonClickedListener ( ) { </a> 0
<a> return onDoneButtonClickedListener ; </a> 0
<a> } </a> 0
<a> public void setOnDoneButtonClickedListener ( OnDoneButtonClickedListener onDoneButtonClickedListener ) { </a> 0
<a> this . onDoneButtonClickedListener = onDoneButtonClickedListener ; </a> 0
<a> } </a> 0
<a> public OnErrorListener getOnErrorListener ( ) { </a> 0
<a> return onErrorListener ; </a> 0
<a> } </a> 0
<a> public void setOnErrorListener ( OnErrorListener onErrorListener ) { </a> 0
<a> this . onErrorListener = onErrorListener ; </a> 0
<a> } </a> 0
<a> public GraphObjectFilter < T > getFilter ( ) { </a> 0
<a> return filter ; </a> 0
<a> } </a> 0
<a> public void setFilter ( GraphObjectFilter < T > filter ) { </a> 0
<a> this . filter = filter ; </a> 0
<a> } </a> 0
<a> public Session getSession ( ) { </a> 0
<a> return sessionTracker . getSession ( ) ; </a> 0
<a> } </a> 0
<a> public void setSession ( Session session ) { </a> 0
<a> sessionTracker . setSession ( session ) ; </a> 0
<a> } </a> 0
<a> public boolean getShowPictures ( ) { </a> 0
<a> return showPictures ; </a> 0
<a> } </a> 0
<a> public void setShowPictures ( boolean showPictures ) { </a> 0
<a> this . showPictures = showPictures ; </a> 0
<a> } </a> 0
<a> public Set < String > getExtraFields ( ) { </a> 0
<a> return new HashSet < String > ( extraFields ) ; </a> 0
<a> } </a> 0
<a> public void setExtraFields ( Collection < String > fields ) { </a> 0
<a> extraFields = new HashSet < String > ( ) ; </a> 0
<a> if ( fields != null ) { </a> 0
<a> extraFields . addAll ( fields ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void setShowTitleBar ( boolean showTitleBar ) { </a> 0
<a> this . showTitleBar = showTitleBar ; </a> 0
<a> } </a> 0
<a> public boolean getShowTitleBar ( ) { </a> 0
<a> return showTitleBar ; </a> 0
<a> } </a> 0
<a> public void setTitleText ( String titleText ) { </a> 0
<a> this . titleText = titleText ; </a> 0
<a> } </a> 0
<a> public String getTitleText ( ) { </a> 0
<a> if ( titleText == null ) { </a> 0
<a> titleText = getDefaultTitleText ( ) ; </a> 0
<a> } </a> 0
<a> return titleText ; </a> 0
<a> } </a> 0
<a> public void setDoneButtonText ( String doneButtonText ) { </a> 0
<a> this . doneButtonText = doneButtonText ; </a> 0
<a> } </a> 0
<a> public String getDoneButtonText ( ) { </a> 0
<a> if ( doneButtonText == null ) { </a> 0
<a> doneButtonText = getDefaultDoneButtonText ( ) ; </a> 0
<a> } </a> 0
<a> return doneButtonText ; </a> 0
<a> } </a> 0
<a> public void loadData ( boolean forceReload ) { </a> 0
<a> if ( ! forceReload && loadingStrategy . isDataPresentOrLoading ( ) ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> loadDataSkippingRoundTripIfCached ( ) ; </a> 0
<a> } </a> 0
<a> public void setSettingsFromBundle ( Bundle inState ) { </a> 0
<a> setPickerFragmentSettingsFromBundle ( inState ) ; </a> 0
<a> } </a> 0
<a> boolean filterIncludesItem ( T graphObject ) { </a> 0
<a> if ( filter != null ) { </a> 0
<a> return filter . includeItem ( graphObject ) ; </a> 0
<a> } </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> List < T > getSelectedGraphObjects ( ) { </a> 0
<a> return adapter . getGraphObjectsById ( selectionStrategy . getSelectedIds ( ) ) ; </a> 0
<a> } </a> 0
<a> void saveSettingsToBundle ( Bundle outState ) { </a> 0
<a> outState . putBoolean ( SHOW_PICTURES_BUNDLE_KEY , showPictures ) ; </a> 0
<a> if ( ! extraFields . isEmpty ( ) ) { </a> 0
<a> outState . putString ( EXTRA_FIELDS_BUNDLE_KEY , TextUtils . join ( "," , extraFields ) ) ; </a> 0
<a> } </a> 0
<a> outState . putBoolean ( SHOW_TITLE_BAR_BUNDLE_KEY , showTitleBar ) ; </a> 0
<a> outState . putString ( TITLE_TEXT_BUNDLE_KEY , titleText ) ; </a> 0
<a> outState . putString ( DONE_BUTTON_TEXT_BUNDLE_KEY , doneButtonText ) ; </a> 0
<a> } </a> 0
<a> abstract Request getRequestForLoadData ( Session session ) ; </a> 0
<a> abstract PickerFragmentAdapter < T > createAdapter ( ) ; </a> 0
<a> abstract LoadingStrategy createLoadingStrategy ( ) ; </a> 0
<a> abstract SelectionStrategy createSelectionStrategy ( ) ; </a> 0
<a> void onLoadingData ( ) { </a> 0
<a> } </a> 0
<a> String getDefaultTitleText ( ) { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> String getDefaultDoneButtonText ( ) { </a> 0
<a> return getString ( R . string . com_facebook_picker_done_button_text ) ; </a> 0
<a> } </a> 0
<a> void displayActivityCircle ( ) { </a> 0
<a> if ( activityCircle != null ) { </a> 0
<a> layoutActivityCircle ( ) ; </a> 0
<a> activityCircle . setVisibility ( View . VISIBLE ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void layoutActivityCircle ( ) { </a> 0
<a> float alpha = ( ! adapter . isEmpty ( ) ) ? .25f : 1.0f ; </a> 0
<a> setAlpha ( activityCircle , alpha ) ; </a> 0
<a> } </a> 0
<a> void hideActivityCircle ( ) { </a> 0
<a> if ( activityCircle != null ) { </a> 0
<a> activityCircle . clearAnimation ( ) ; </a> 0
<a> activityCircle . setVisibility ( View . INVISIBLE ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void setSelectionStrategy ( SelectionStrategy selectionStrategy ) { </a> 0
<a> if ( selectionStrategy != this . selectionStrategy ) { </a> 0
<a> this . selectionStrategy = selectionStrategy ; </a> 0
<a> if ( adapter != null ) { </a> 0
<a> adapter . notifyDataSetChanged ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private static void setAlpha ( View view , float alpha ) { </a> 0
<a> AlphaAnimation alphaAnimation = new AlphaAnimation ( alpha , alpha ) ; </a> 0
<a> alphaAnimation . setDuration ( 0 ) ; </a> 0
<a> alphaAnimation . setFillAfter ( true ) ; </a> 0
<a> view . startAnimation ( alphaAnimation ) ; </a> 0
<a> } </a> 0
<a> private void setPickerFragmentSettingsFromBundle ( Bundle inState ) { </a> 0
<a> if ( inState != null ) { </a> 0
<a> showPictures = inState . getBoolean ( SHOW_PICTURES_BUNDLE_KEY , showPictures ) ; </a> 0
<a> String extraFieldsString = inState . getString ( EXTRA_FIELDS_BUNDLE_KEY ) ; </a> 0
<a> if ( extraFieldsString != null ) { </a> 0
<a> String [ ] strings = extraFieldsString . split ( "," ) ; </a> 0
<a> setExtraFields ( Arrays . asList ( strings ) ) ; </a> 0
<a> } </a> 0
<a> showTitleBar = inState . getBoolean ( SHOW_TITLE_BAR_BUNDLE_KEY , showTitleBar ) ; </a> 0
<a> String titleTextString = inState . getString ( TITLE_TEXT_BUNDLE_KEY ) ; </a> 0
<a> if ( titleTextString != null ) { </a> 0
<a> titleText = titleTextString ; </a> 0
<a> if ( titleTextView != null ) { </a> 0
<a> titleTextView . setText ( titleText ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> String doneButtonTextString = inState . getString ( DONE_BUTTON_TEXT_BUNDLE_KEY ) ; </a> 0
<a> if ( doneButtonTextString != null ) { </a> 0
<a> doneButtonText = doneButtonTextString ; </a> 0
<a> if ( doneButton != null ) { </a> 0
<a> doneButton . setText ( doneButtonText ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void inflateTitleBar ( ViewGroup view ) { </a> 0
<a> ViewStub stub = ( ViewStub ) view . findViewById ( R . id . com_facebook_picker_title_bar_stub ) ; </a> 0
<a> if ( stub != null ) { </a> 0
<a> View titleBar = stub . inflate ( ) ; </a> 0
<a> final RelativeLayout . LayoutParams layoutParams = new RelativeLayout . LayoutParams ( </a> 0
<a> RelativeLayout . LayoutParams . FILL_PARENT , </a> 0
<a> RelativeLayout . LayoutParams . FILL_PARENT ) ; </a> 0
<a> layoutParams . addRule ( RelativeLayout . BELOW , R . id . com_facebook_picker_title_bar ) ; </a> 0
<a> listView . setLayoutParams ( layoutParams ) ; </a> 0
<a> if ( titleBarBackground != null ) { </a> 0
<a> titleBar . setBackgroundDrawable ( titleBarBackground ) ; </a> 0
<a> } </a> 0
<a> doneButton = ( Button ) view . findViewById ( R . id . com_facebook_picker_done_button ) ; </a> 0
<a> if ( doneButton != null ) { </a> 0
<a> doneButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> if ( onDoneButtonClickedListener != null ) { </a> 0
<a> onDoneButtonClickedListener . onDoneButtonClicked ( PickerFragment . this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> if ( getDoneButtonText ( ) != null ) { </a> 0
<a> doneButton . setText ( getDoneButtonText ( ) ) ; </a> 0
<a> } </a> 0
<a> if ( doneButtonBackground != null ) { </a> 0
<a> doneButton . setBackgroundDrawable ( doneButtonBackground ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> titleTextView = ( TextView ) view . findViewById ( R . id . com_facebook_picker_title ) ; </a> 0
<a> if ( titleTextView != null ) { </a> 0
<a> if ( getTitleText ( ) != null ) { </a> 0
<a> titleTextView . setText ( getTitleText ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onListItemClick ( ListView listView , View v , int position ) { </a> 0
<a> @ SuppressWarnings ( "unchecked" ) </a> 0
<a> T graphObject = ( T ) listView . getItemAtPosition ( position ) ; </a> 0
<a> String id = adapter . getIdOfGraphObject ( graphObject ) ; </a> 0
<a> selectionStrategy . toggleSelection ( id ) ; </a> 0
<a> adapter . notifyDataSetChanged ( ) ; </a> 0
<a> if ( onSelectionChangedListener != null ) { </a> 0
<a> onSelectionChangedListener . onSelectionChanged ( PickerFragment . this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void loadDataSkippingRoundTripIfCached ( ) { </a> 0
<a> clearResults ( ) ; </a> 0
<a> Request request = getRequestForLoadData ( getSession ( ) ) ; </a> 0
<a> if ( request != null ) { </a> 0
<a> onLoadingData ( ) ; </a> 0
<a> loadingStrategy . startLoading ( request ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void clearResults ( ) { </a> 0
<a> if ( adapter != null ) { </a> 0
<a> boolean wasSelection = ! selectionStrategy . isEmpty ( ) ; </a> 0
<a> boolean wasData = ! adapter . isEmpty ( ) ; </a> 0
<a> loadingStrategy . clearResults ( ) ; </a> 0
<a> selectionStrategy . clear ( ) ; </a> 0
<a> adapter . notifyDataSetChanged ( ) ; </a> 0
<a> if ( wasData && onDataChangedListener != null ) { </a> 0
<a> onDataChangedListener . onDataChanged ( PickerFragment . this ) ; </a> 0
<a> } </a> 0
<a> if ( wasSelection && onSelectionChangedListener != null ) { </a> 0
<a> onSelectionChangedListener . onSelectionChanged ( PickerFragment . this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void updateAdapter ( SimpleGraphObjectCursor < T > data ) { </a> 0
<a> if ( adapter != null ) { </a> 0
<a> View view = listView . getChildAt ( 1 ) ; </a> 0
<a> int anchorPosition = listView . getFirstVisiblePosition ( ) ; </a> 0
<a> if ( anchorPosition > 0 ) { </a> 0
<a> anchorPosition ++ ; </a> 0
<a> } </a> 0
<a> GraphObjectAdapter . SectionAndItem < T > anchorItem = adapter . getSectionAndItem ( anchorPosition ) ; </a> 0
<a> final int top = ( view != null && </a> 0
<a> anchorItem . getType ( ) != GraphObjectAdapter . SectionAndItem . Type . ACTIVITY_CIRCLE ) ? </a> 0
<a> view . getTop ( ) : 0 ; </a> 0
<a> boolean dataChanged = adapter . changeCursor ( data ) ; </a> 0
<a> if ( view != null && anchorItem != null ) { </a> 0
<a> final int newPositionOfItem = adapter . getPosition ( anchorItem . sectionKey , anchorItem . graphObject ) ; </a> 0
<a> if ( newPositionOfItem != - 1 ) { </a> 0
<a> listView . setSelectionFromTop ( newPositionOfItem , top ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( dataChanged && onDataChangedListener != null ) { </a> 0
<a> onDataChangedListener . onDataChanged ( PickerFragment . this ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void reprioritizeDownloads ( ) { </a> 0
<a> int lastVisibleItem = listView . getLastVisiblePosition ( ) ; </a> 0
<a> if ( lastVisibleItem >= 0 ) { </a> 0
<a> int firstVisibleItem = listView . getFirstVisiblePosition ( ) ; </a> 0
<a> adapter . prioritizeViewRange ( firstVisibleItem , lastVisibleItem , PROFILE_PICTURE_PREFETCH_BUFFER ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private ListView . OnScrollListener onScrollListener = new ListView . OnScrollListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onScrollStateChanged ( AbsListView view , int scrollState ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onScroll ( AbsListView view , int firstVisibleItem , int visibleItemCount , int totalItemCount ) { </a> 0
<a> reprioritizeDownloads ( ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> public interface OnErrorListener { </a> 0
<a> void onError ( PickerFragment < ? > fragment , FacebookException error ) ; </a> 0
<a> } </a> 0
<a> public interface OnDataChangedListener { </a> 0
<a> void onDataChanged ( PickerFragment < ? > fragment ) ; </a> 0
<a> } </a> 0
<a> public interface OnSelectionChangedListener { </a> 0
<a> void onSelectionChanged ( PickerFragment < ? > fragment ) ; </a> 0
<a> } </a> 0
<a> public interface OnDoneButtonClickedListener { </a> 0
<a> void onDoneButtonClicked ( PickerFragment < ? > fragment ) ; </a> 0
<a> } </a> 0
<a> public interface GraphObjectFilter < T > { </a> 0
<a> boolean includeItem ( T graphObject ) ; </a> 0
<a> } </a> 0
<a> abstract class LoadingStrategy { </a> 0
<a> protected final static int CACHED_RESULT_REFRESH_DELAY = 2 * 1000 ; </a> 0
<a> protected GraphObjectPagingLoader < T > loader ; </a> 0
<a> protected GraphObjectAdapter < T > adapter ; </a> 0
<a> public void attach ( GraphObjectAdapter < T > adapter ) { </a> 0
<a> loader = ( GraphObjectPagingLoader < T > ) getLoaderManager ( ) . initLoader ( 0 , null , </a> 0
<a> new LoaderManager . LoaderCallbacks < SimpleGraphObjectCursor < T > > ( ) { </a> 0
<a> @ Override </a> 0
<a> public Loader < SimpleGraphObjectCursor < T > > onCreateLoader ( int id , Bundle args ) { </a> 0
<a> return LoadingStrategy . this . onCreateLoader ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onLoadFinished ( Loader < SimpleGraphObjectCursor < T > > loader , </a> 0
<a> SimpleGraphObjectCursor < T > data ) { </a> 0
<a> if ( loader != LoadingStrategy . this . loader ) { </a> 0
<a> throw new FacebookException ( "Received callback for unknown loader." ) ; </a> 0
<a> } </a> 0
<a> LoadingStrategy . this . onLoadFinished ( ( GraphObjectPagingLoader < T > ) loader , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onLoaderReset ( Loader < SimpleGraphObjectCursor < T > > loader ) { </a> 0
<a> if ( loader != LoadingStrategy . this . loader ) { </a> 0
<a> throw new FacebookException ( "Received callback for unknown loader." ) ; </a> 0
<a> } </a> 0
<a> LoadingStrategy . this . onLoadReset ( ( GraphObjectPagingLoader < T > ) loader ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> loader . setOnErrorListener ( new GraphObjectPagingLoader . OnErrorListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( FacebookException error , GraphObjectPagingLoader < ? > loader ) { </a> 0
<a> hideActivityCircle ( ) ; </a> 0
<a> if ( onErrorListener != null ) { </a> 0
<a> onErrorListener . onError ( PickerFragment . this , error ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> this . adapter = adapter ; </a> 0
<a> this . adapter . changeCursor ( loader . getCursor ( ) ) ; </a> 0
<a> } </a> 0
<a> public void detach ( ) { </a> 0
<a> adapter . setDataNeededListener ( null ) ; </a> 0
<a> loader . setOnErrorListener ( null ) ; </a> 0
<a> loader = null ; </a> 0
<a> adapter = null ; </a> 0
<a> } </a> 0
<a> public void clearResults ( ) { </a> 0
<a> if ( loader != null ) { </a> 0
<a> loader . clearResults ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void startLoading ( Request request ) { </a> 0
<a> if ( loader != null ) { </a> 0
<a> loader . startLoading ( request , true ) ; </a> 0
<a> onStartLoading ( loader , request ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public boolean isDataPresentOrLoading ( ) { </a> 0
<a> return ! adapter . isEmpty ( ) || loader . isLoading ( ) ; </a> 0
<a> } </a> 0
<a> protected GraphObjectPagingLoader < T > onCreateLoader ( ) { </a> 0
<a> return new GraphObjectPagingLoader < T > ( getActivity ( ) , graphObjectClass ) ; </a> 0
<a> } </a> 0
<a> protected void onStartLoading ( GraphObjectPagingLoader < T > loader , Request request ) { </a> 0
<a> displayActivityCircle ( ) ; </a> 0
<a> } </a> 0
<a> protected void onLoadReset ( GraphObjectPagingLoader < T > loader ) { </a> 0
<a> adapter . changeCursor ( null ) ; </a> 0
<a> } </a> 0
<a> protected void onLoadFinished ( GraphObjectPagingLoader < T > loader , SimpleGraphObjectCursor < T > data ) { </a> 0
<a> updateAdapter ( data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> abstract class SelectionStrategy { </a> 0
<a> abstract boolean isSelected ( String id ) ; </a> 0
<a> abstract void toggleSelection ( String id ) ; </a> 0
<a> abstract Collection < String > getSelectedIds ( ) ; </a> 0
<a> abstract void clear ( ) ; </a> 0
<a> abstract boolean isEmpty ( ) ; </a> 0
<a> abstract boolean shouldShowCheckBoxIfUnselected ( ) ; </a> 0
<a> abstract void saveSelectionToBundle ( Bundle outBundle , String key ) ; </a> 0
<a> abstract void readSelectionFromBundle ( Bundle inBundle , String key ) ; </a> 0
<a> } </a> 0
<a> class SingleSelectionStrategy extends SelectionStrategy { </a> 0
<a> private String selectedId ; </a> 0
<a> public Collection < String > getSelectedIds ( ) { </a> 0
<a> return Arrays . asList ( new String [ ] { selectedId } ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean isSelected ( String id ) { </a> 0
<a> return selectedId != null && id != null && selectedId . equals ( id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void toggleSelection ( String id ) { </a> 0
<a> if ( selectedId != null && selectedId . equals ( id ) ) { </a> 0
<a> selectedId = null ; </a> 0
<a> } else { </a> 0
<a> selectedId = id ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void saveSelectionToBundle ( Bundle outBundle , String key ) { </a> 0
<a> if ( ! TextUtils . isEmpty ( selectedId ) ) { </a> 0
<a> outBundle . putString ( key , selectedId ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void readSelectionFromBundle ( Bundle inBundle , String key ) { </a> 0
<a> if ( inBundle != null ) { </a> 0
<a> selectedId = inBundle . getString ( key ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> selectedId = null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean isEmpty ( ) { </a> 0
<a> return selectedId == null ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean shouldShowCheckBoxIfUnselected ( ) { </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> class MultiSelectionStrategy extends SelectionStrategy { </a> 0
<a> private Set < String > selectedIds = new HashSet < String > ( ) ; </a> 0
<a> public Collection < String > getSelectedIds ( ) { </a> 0
<a> return selectedIds ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean isSelected ( String id ) { </a> 0
<a> return id != null && selectedIds . contains ( id ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void toggleSelection ( String id ) { </a> 0
<a> if ( id != null ) { </a> 0
<a> if ( selectedIds . contains ( id ) ) { </a> 0
<a> selectedIds . remove ( id ) ; </a> 0
<a> } else { </a> 0
<a> selectedIds . add ( id ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void saveSelectionToBundle ( Bundle outBundle , String key ) { </a> 0
<a> if ( ! selectedIds . isEmpty ( ) ) { </a> 0
<a> String ids = TextUtils . join ( "," , selectedIds ) ; </a> 0
<a> outBundle . putString ( key , ids ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void readSelectionFromBundle ( Bundle inBundle , String key ) { </a> 0
<a> if ( inBundle != null ) { </a> 0
<a> String ids = inBundle . getString ( key ) ; </a> 0
<a> if ( ids != null ) { </a> 0
<a> String [ ] splitIds = TextUtils . split ( ids , "," ) ; </a> 0
<a> selectedIds . clear ( ) ; </a> 0
<a> Collections . addAll ( selectedIds , splitIds ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void clear ( ) { </a> 0
<a> selectedIds . clear ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean isEmpty ( ) { </a> 0
<a> return selectedIds . isEmpty ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean shouldShowCheckBoxIfUnselected ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> abstract class PickerFragmentAdapter < U extends GraphObject > extends GraphObjectAdapter < T > { </a> 0
<a> public PickerFragmentAdapter ( Context context ) { </a> 0
<a> super ( context ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> boolean isGraphObjectSelected ( String graphObjectId ) { </a> 0
<a> return selectionStrategy . isSelected ( graphObjectId ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void updateCheckboxState ( CheckBox checkBox , boolean graphObjectSelected ) { </a> 0
<a> checkBox . setChecked ( graphObjectSelected ) ; </a> 0
<a> int visible = ( graphObjectSelected || selectionStrategy </a> 0
<a> . shouldShowCheckBoxIfUnselected ( ) ) ? View . VISIBLE : View . GONE ; </a> 0
<a> checkBox . setVisibility ( visible ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . widget ; </a> 0
<a> import com . facebook . Settings ; </a> 0
<a> import java . util . concurrent . Executor ; </a> 0
<a> class WorkQueue { </a> 0
<a> public static final int DEFAULT_MAX_CONCURRENT = 8 ; </a> 0
<a> private final Object workLock = new Object ( ) ; </a> 0
<a> private WorkNode pendingJobs ; </a> 0
<a> private final int maxConcurrent ; </a> 0
<a> private final Executor executor ; </a> 0
<a> private WorkNode runningJobs = null ; </a> 0
<a> private int runningCount = 0 ; </a> 0
<a> WorkQueue ( ) { </a> 0
<a> this ( DEFAULT_MAX_CONCURRENT ) ; </a> 0
<a> } </a> 0
<a> WorkQueue ( int maxConcurrent ) { </a> 0
<a> this ( maxConcurrent , Settings . getExecutor ( ) ) ; </a> 0
<a> } </a> 0
<a> WorkQueue ( int maxConcurrent , Executor executor ) { </a> 0
<a> this . maxConcurrent = maxConcurrent ; </a> 0
<a> this . executor = executor ; </a> 0
<a> } </a> 0
<a> WorkItem addActiveWorkItem ( Runnable callback ) { </a> 0
<a> return addActiveWorkItem ( callback , true ) ; </a> 0
<a> } </a> 0
<a> WorkItem addActiveWorkItem ( Runnable callback , boolean addToFront ) { </a> 0
<a> WorkNode node = new WorkNode ( callback ) ; </a> 0
<a> synchronized ( workLock ) { </a> 0
<a> pendingJobs = node . addToList ( pendingJobs , addToFront ) ; </a> 0
<a> } </a> 0
<a> startItem ( ) ; </a> 0
<a> return node ; </a> 0
<a> } </a> 0
<a> void validate ( ) { </a> 0
<a> synchronized ( workLock ) { </a> 0
<a> int count = 0 ; </a> 0
<a> if ( runningJobs != null ) { </a> 0
<a> WorkNode walk = runningJobs ; </a> 0
<a> do { </a> 0
<a> walk . verify ( true ) ; </a> 0
<a> count ++ ; </a> 0
<a> walk = walk . getNext ( ) ; </a> 0
<a> } while ( walk != runningJobs ) ; </a> 0
<a> } </a> 0
<a> assert runningCount == count ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void startItem ( ) { </a> 0
<a> finishItemAndStartNew ( null ) ; </a> 0
<a> } </a> 0
<a> private void finishItemAndStartNew ( WorkNode finished ) { </a> 0
<a> WorkNode ready = null ; </a> 0
<a> synchronized ( workLock ) { </a> 0
<a> if ( finished != null ) { </a> 0
<a> runningJobs = finished . removeFromList ( runningJobs ) ; </a> 0
<a> runningCount -- ; </a> 0
<a> } </a> 0
<a> if ( runningCount < maxConcurrent ) { </a> 0
<a> ready = pendingJobs ; </a> 0
<a> if ( ready != null ) { </a> 0
<a> pendingJobs = ready . removeFromList ( pendingJobs ) ; </a> 0
<a> runningJobs = ready . addToList ( runningJobs , false ) ; </a> 0
<a> runningCount ++ ; </a> 0
<a> ready . setIsRunning ( true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ready != null ) { </a> 0
<a> execute ( ready ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void execute ( final WorkNode node ) { </a> 0
<a> executor . execute ( new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> try { </a> 0
<a> node . getCallback ( ) . run ( ) ; </a> 0
<a> } finally { </a> 0
<a> finishItemAndStartNew ( node ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private class WorkNode implements WorkItem { </a> 0
<a> private final Runnable callback ; </a> 0
<a> private WorkNode next ; </a> 0
<a> private WorkNode prev ; </a> 0
<a> private boolean isRunning ; </a> 0
<a> WorkNode ( Runnable callback ) { </a> 0
<a> this . callback = callback ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean cancel ( ) { </a> 0
<a> synchronized ( workLock ) { </a> 0
<a> if ( ! isRunning ( ) ) { </a> 0
<a> pendingJobs = removeFromList ( pendingJobs ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void moveToFront ( ) { </a> 0
<a> synchronized ( workLock ) { </a> 0
<a> if ( ! isRunning ( ) ) { </a> 0
<a> pendingJobs = removeFromList ( pendingJobs ) ; </a> 0
<a> pendingJobs = addToList ( pendingJobs , true ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public boolean isRunning ( ) { </a> 0
<a> return isRunning ; </a> 0
<a> } </a> 0
<a> Runnable getCallback ( ) { </a> 0
<a> return callback ; </a> 0
<a> } </a> 0
<a> WorkNode getNext ( ) { </a> 0
<a> return next ; </a> 0
<a> } </a> 0
<a> void setIsRunning ( boolean isRunning ) { </a> 0
<a> this . isRunning = isRunning ; </a> 0
<a> } </a> 0
<a> WorkNode addToList ( WorkNode list , boolean addToFront ) { </a> 0
<a> assert next == null ; </a> 0
<a> assert prev == null ; </a> 0
<a> if ( list == null ) { </a> 0
<a> list = next = prev = this ; </a> 0
<a> } else { </a> 0
<a> next = list ; </a> 0
<a> prev = list . prev ; </a> 0
<a> next . prev = prev . next = this ; </a> 0
<a> } </a> 0
<a> return addToFront ? this : list ; </a> 0
<a> } </a> 0
<a> WorkNode removeFromList ( WorkNode list ) { </a> 0
<a> assert next != null ; </a> 0
<a> assert prev != null ; </a> 0
<a> if ( list == this ) { </a> 0
<a> if ( next == this ) { </a> 0
<a> list = null ; </a> 0
<a> } else { </a> 0
<a> list = next ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> next . prev = prev ; </a> 0
<a> prev . next = next ; </a> 0
<a> next = prev = null ; </a> 0
<a> return list ; </a> 0
<a> } </a> 0
<a> void verify ( boolean shouldBeRunning ) { </a> 0
<a> assert prev . next == this ; </a> 0
<a> assert next . prev == this ; </a> 0
<a> assert isRunning ( ) == shouldBeRunning ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> interface WorkItem { </a> 0
<a> boolean cancel ( ) ; </a> 0
<a> boolean isRunning ( ) ; </a> 0
<a> void moveToFront ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . content . pm . PackageManager ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . model . GraphMultiResult ; </a> 0
<a> import com . facebook . model . GraphObject ; </a> 0
<a> import com . facebook . model . GraphObjectList ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . util . * ; </a> 0
<a> public class AuthorizationClientTests extends FacebookTestCase { </a> 0
<a> private static final String ACCESS_TOKEN = "An access token" ; </a> 0
<a> private static final long EXPIRES_IN_DELTA = 3600 * 24 * 60 ; </a> 0
<a> private static final ArrayList < String > PERMISSIONS = new ArrayList < String > ( </a> 0
<a> Arrays . asList ( "go outside" , "come back in" ) ) ; </a> 0
<a> private static final String ERROR_MESSAGE = "This is bad!" ; </a> 0
<a> class MockAuthorizationClient extends AuthorizationClient { </a> 0
<a> Result result ; </a> 0
<a> boolean triedNextHandler = false ; </a> 0
<a> MockAuthorizationClient ( ) { </a> 0
<a> setContext ( getActivity ( ) ) ; </a> 0
<a> } </a> 0
<a> AuthorizationClient . AuthorizationRequest getRequest ( ) { </a> 0
<a> return pendingRequest ; </a> 0
<a> } </a> 0
<a> void setRequest ( AuthorizationClient . AuthorizationRequest request ) { </a> 0
<a> pendingRequest = request ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void complete ( Result result ) { </a> 0
<a> this . result = result ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void tryNextHandler ( ) { </a> 0
<a> triedNextHandler = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> AuthorizationClient . AuthorizationRequest createRequest ( ) { </a> 0
<a> Session . AuthorizationRequest request = new Session . AuthorizationRequest ( getActivity ( ) ) ; </a> 0
<a> request . setPermissions ( PERMISSIONS ) ; </a> 0
<a> return request . getAuthorizationClientRequest ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testWebViewHandlesSuccess ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( "access_token" , ACCESS_TOKEN ) ; </a> 0
<a> bundle . putString ( "expires_in" , String . format ( "%d" , EXPIRES_IN_DELTA ) ) ; </a> 0
<a> bundle . putString ( "code" , "Something else" ) ; </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . WebViewAuthHandler handler = client . new WebViewAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onWebDialogComplete ( request , bundle , null ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . SUCCESS , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNotNull ( token ) ; </a> 0
<a> assertEquals ( ACCESS_TOKEN , token . getToken ( ) ) ; </a> 0
<a> assertDateDiffersWithinDelta ( new Date ( ) , token . getExpires ( ) , EXPIRES_IN_DELTA * 1000 , 1000 ) ; </a> 0
<a> assertEquals ( PERMISSIONS , token . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testWebViewHandlesCancel ( ) { </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . WebViewAuthHandler handler = client . new WebViewAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onWebDialogComplete ( request , null , new FacebookOperationCanceledException ( ) ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . CANCEL , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testWebViewHandlesError ( ) { </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . WebViewAuthHandler handler = client . new WebViewAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onWebDialogComplete ( request , null , new FacebookException ( ERROR_MESSAGE ) ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . ERROR , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> assertEquals ( client . result . errorMessage , ERROR_MESSAGE ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testWebViewChecksInternetPermission ( ) { </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) { </a> 0
<a> @ Override </a> 0
<a> int checkPermission ( String permission ) { </a> 0
<a> return PackageManager . PERMISSION_DENIED ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> AuthorizationClient . WebViewAuthHandler handler = client . new WebViewAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onWebDialogComplete ( request , null , new FacebookException ( ERROR_MESSAGE ) ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . ERROR , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testGetTokenHandlesSuccessWithAllPermissions ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putStringArrayList ( NativeProtocol . EXTRA_PERMISSIONS , PERMISSIONS ) ; </a> 0
<a> bundle . putLong ( NativeProtocol . EXTRA_EXPIRES_SECONDS_SINCE_EPOCH , new Date ( ) . getTime ( ) / 1000 + EXPIRES_IN_DELTA ) ; </a> 0
<a> bundle . putString ( NativeProtocol . EXTRA_ACCESS_TOKEN , ACCESS_TOKEN ) ; </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . GetTokenAuthHandler handler = client . new GetTokenAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . getTokenCompleted ( request , bundle ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . SUCCESS , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNotNull ( token ) ; </a> 0
<a> assertEquals ( ACCESS_TOKEN , token . getToken ( ) ) ; </a> 0
<a> assertDateDiffersWithinDelta ( new Date ( ) , token . getExpires ( ) , EXPIRES_IN_DELTA * 1000 , 1000 ) ; </a> 0
<a> assertEquals ( PERMISSIONS , token . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testGetTokenHandlesSuccessWithSomePermissions ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putStringArrayList ( NativeProtocol . EXTRA_PERMISSIONS , new ArrayList < String > ( Arrays . asList ( "go outside" ) ) ) ; </a> 0
<a> bundle . putLong ( NativeProtocol . EXTRA_EXPIRES_SECONDS_SINCE_EPOCH , new Date ( ) . getTime ( ) / 1000 + EXPIRES_IN_DELTA ) ; </a> 0
<a> bundle . putString ( NativeProtocol . EXTRA_ACCESS_TOKEN , ACCESS_TOKEN ) ; </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . GetTokenAuthHandler handler = client . new GetTokenAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> assertEquals ( PERMISSIONS . size ( ) , request . getPermissions ( ) . size ( ) ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . getTokenCompleted ( request , bundle ) ; </a> 0
<a> assertNull ( client . result ) ; </a> 0
<a> assertTrue ( client . triedNextHandler ) ; </a> 0
<a> assertEquals ( 1 , request . getPermissions ( ) . size ( ) ) ; </a> 0
<a> assertTrue ( request . getPermissions ( ) . contains ( "come back in" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testGetTokenHandlesNoResult ( ) { </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . GetTokenAuthHandler handler = client . new GetTokenAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> assertEquals ( PERMISSIONS . size ( ) , request . getPermissions ( ) . size ( ) ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . getTokenCompleted ( request , null ) ; </a> 0
<a> assertNull ( client . result ) ; </a> 0
<a> assertTrue ( client . triedNextHandler ) ; </a> 0
<a> assertEquals ( PERMISSIONS . size ( ) , request . getPermissions ( ) . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testLoginDialogHandlesSuccess ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putStringArrayList ( NativeProtocol . EXTRA_PERMISSIONS , PERMISSIONS ) ; </a> 0
<a> bundle . putLong ( NativeProtocol . EXTRA_EXPIRES_SECONDS_SINCE_EPOCH , new Date ( ) . getTime ( ) / 1000 + EXPIRES_IN_DELTA ) ; </a> 0
<a> bundle . putString ( NativeProtocol . EXTRA_ACCESS_TOKEN , ACCESS_TOKEN ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . putExtras ( bundle ) ; </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . KatanaLoginDialogAuthHandler handler = client . new KatanaLoginDialogAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . RESULT_OK , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . SUCCESS , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNotNull ( token ) ; </a> 0
<a> assertEquals ( ACCESS_TOKEN , token . getToken ( ) ) ; </a> 0
<a> assertDateDiffersWithinDelta ( new Date ( ) , token . getExpires ( ) , EXPIRES_IN_DELTA * 1000 , 1000 ) ; </a> 0
<a> assertEquals ( PERMISSIONS , token . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testLoginDialogHandlesCancel ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( NativeProtocol . STATUS_ERROR_DESCRIPTION , ERROR_MESSAGE ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . putExtras ( bundle ) ; </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . KatanaLoginDialogAuthHandler handler = client . new KatanaLoginDialogAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . RESULT_CANCELED , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . CANCEL , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNull ( token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> assertEquals ( ERROR_MESSAGE , client . result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testLoginDialogHandlesError ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( NativeProtocol . STATUS_ERROR_TYPE , ERROR_MESSAGE ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . putExtras ( bundle ) ; </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . KatanaLoginDialogAuthHandler handler = client . new KatanaLoginDialogAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . RESULT_OK , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . ERROR , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNull ( token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> assertEquals ( ERROR_MESSAGE , client . result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testLoginDialogHandlesDisabled ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putInt ( NativeProtocol . EXTRA_PROTOCOL_VERSION , NativeProtocol . PROTOCOL_VERSION_20121101 ) ; </a> 0
<a> bundle . putString ( NativeProtocol . STATUS_ERROR_TYPE , NativeProtocol . ERROR_SERVICE_DISABLED ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . putExtras ( bundle ) ; </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . KatanaLoginDialogAuthHandler handler = client . new KatanaLoginDialogAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . RESULT_OK , intent ) ; </a> 0
<a> assertNull ( client . result ) ; </a> 0
<a> assertTrue ( client . triedNextHandler ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testProxyAuthHandlesSuccess ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putLong ( AccessToken . EXPIRES_IN_KEY , EXPIRES_IN_DELTA ) ; </a> 0
<a> bundle . putString ( AccessToken . ACCESS_TOKEN_KEY , ACCESS_TOKEN ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . putExtras ( bundle ) ; </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . KatanaProxyAuthHandler handler = client . new KatanaProxyAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . RESULT_OK , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . SUCCESS , client . result . code ) ; </a> 0
<a> AccessToken token = client . result . token ; </a> 0
<a> assertNotNull ( token ) ; </a> 0
<a> assertEquals ( ACCESS_TOKEN , token . getToken ( ) ) ; </a> 0
<a> assertDateDiffersWithinDelta ( new Date ( ) , token . getExpires ( ) , EXPIRES_IN_DELTA * 1000 , 1000 ) ; </a> 0
<a> assertEquals ( PERMISSIONS , token . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testProxyAuthHandlesCancel ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( "error" , ERROR_MESSAGE ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . putExtras ( bundle ) ; </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . KatanaProxyAuthHandler handler = client . new KatanaProxyAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . RESULT_CANCELED , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . CANCEL , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> assertTrue ( client . result . errorMessage . contains ( ERROR_MESSAGE ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testProxyAuthHandlesCancelErrorMessage ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( "error" , "access_denied" ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . putExtras ( bundle ) ; </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . KatanaProxyAuthHandler handler = client . new KatanaProxyAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . RESULT_CANCELED , intent ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . CANCEL , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testProxyAuthHandlesDisabled ( ) { </a> 0
<a> Bundle bundle = new Bundle ( ) ; </a> 0
<a> bundle . putString ( "error" , "service_disabled" ) ; </a> 0
<a> Intent intent = new Intent ( ) ; </a> 0
<a> intent . putExtras ( bundle ) ; </a> 0
<a> MockAuthorizationClient client = new MockAuthorizationClient ( ) ; </a> 0
<a> AuthorizationClient . KatanaProxyAuthHandler handler = client . new KatanaProxyAuthHandler ( ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createRequest ( ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> handler . onActivityResult ( 0 , Activity . RESULT_OK , intent ) ; </a> 0
<a> assertNull ( client . result ) ; </a> 0
<a> assertTrue ( client . triedNextHandler ) ; </a> 0
<a> } </a> 0
<a> class MockValidatingAuthorizationClient extends MockAuthorizationClient { </a> 0
<a> private final HashMap < String , String > mapAccessTokenToFbid = new HashMap < String , String > ( ) ; </a> 0
<a> private List < String > permissionsToReport = Arrays . asList ( ) ; </a> 0
<a> private TestBlocker blocker ; </a> 0
<a> public MockValidatingAuthorizationClient ( TestBlocker blocker ) { </a> 0
<a> this . blocker = blocker ; </a> 0
<a> } </a> 0
<a> public void addAccessTokenToFbidMapping ( String accessToken , String fbid ) { </a> 0
<a> mapAccessTokenToFbid . put ( accessToken , fbid ) ; </a> 0
<a> } </a> 0
<a> public void addAccessTokenToFbidMapping ( AccessToken accessToken , String fbid ) { </a> 0
<a> mapAccessTokenToFbid . put ( accessToken . getToken ( ) , fbid ) ; </a> 0
<a> } </a> 0
<a> public void setPermissionsToReport ( List < String > permissionsToReport ) { </a> 0
<a> this . permissionsToReport = permissionsToReport ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> void complete ( Result result ) { </a> 0
<a> super . complete ( result ) ; </a> 0
<a> blocker . signal ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> Request createGetProfileIdRequest ( final String accessToken ) { </a> 0
<a> return new MockRequest ( ) { </a> 0
<a> @ Override </a> 0
<a> public Response createResponse ( ) { </a> 0
<a> String fbid = mapAccessTokenToFbid . get ( accessToken ) ; </a> 0
<a> GraphUser user = GraphObject . Factory . create ( GraphUser . class ) ; </a> 0
<a> user . setId ( fbid ) ; </a> 0
<a> return new Response ( this , null , user , false ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> Request createGetPermissionsRequest ( String accessToken ) { </a> 0
<a> final List < String > permissions = permissionsToReport ; </a> 0
<a> return new MockRequest ( ) { </a> 0
<a> @ Override </a> 0
<a> public Response createResponse ( ) { </a> 0
<a> GraphObject permissionsObject = GraphObject . Factory . create ( ) ; </a> 0
<a> if ( permissions != null ) { </a> 0
<a> for ( String permission : permissions ) { </a> 0
<a> permissionsObject . setProperty ( permission , 1 ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> GraphObjectList < GraphObject > data = GraphObject . Factory . createList ( GraphObject . class ) ; </a> 0
<a> data . add ( permissionsObject ) ; </a> 0
<a> GraphMultiResult result = GraphObject . Factory . create ( GraphMultiResult . class ) ; </a> 0
<a> result . setProperty ( "data" , data ) ; </a> 0
<a> return new Response ( this , null , result , false ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> RequestBatch createReauthValidationBatch ( final Result pendingResult ) { </a> 0
<a> RequestBatch batch = super . createReauthValidationBatch ( pendingResult ) ; </a> 0
<a> batch . setCallbackHandler ( blocker . getHandler ( ) ) ; </a> 0
<a> return new MockRequestBatch ( batch ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> static final String USER_1_FBID = "user1" ; </a> 0
<a> static final String USER_1_ACCESS_TOKEN = "An access token for user 1" ; </a> 0
<a> static final String USER_2_FBID = "user2" ; </a> 0
<a> static final String USER_2_ACCESS_TOKEN = "An access token for user 2" ; </a> 0
<a> AuthorizationClient . AuthorizationRequest createNewPermissionRequest ( String accessToken ) { </a> 0
<a> Session . NewPermissionsRequest request = new Session . NewPermissionsRequest ( getActivity ( ) , PERMISSIONS ) ; </a> 0
<a> request . setValidateSameFbidAsToken ( accessToken ) ; </a> 0
<a> return request . getAuthorizationClientRequest ( ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testReauthorizationWithSameFbidSucceeds ( ) throws Exception { </a> 0
<a> TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> MockValidatingAuthorizationClient client = new MockValidatingAuthorizationClient ( blocker ) ; </a> 0
<a> client . addAccessTokenToFbidMapping ( USER_1_ACCESS_TOKEN , USER_1_FBID ) ; </a> 0
<a> client . addAccessTokenToFbidMapping ( USER_2_ACCESS_TOKEN , USER_2_FBID ) ; </a> 0
<a> client . setPermissionsToReport ( PERMISSIONS ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createNewPermissionRequest ( USER_1_ACCESS_TOKEN ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> AccessToken token = AccessToken . createFromExistingAccessToken ( USER_1_ACCESS_TOKEN , null , null , null , PERMISSIONS ) ; </a> 0
<a> AuthorizationClient . Result result = AuthorizationClient . Result . createTokenResult ( token ) ; </a> 0
<a> client . completeAndValidate ( result ) ; </a> 0
<a> blocker . waitForSignals ( 1 ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . SUCCESS , client . result . code ) ; </a> 0
<a> AccessToken resultToken = client . result . token ; </a> 0
<a> assertNotNull ( resultToken ) ; </a> 0
<a> assertEquals ( USER_1_ACCESS_TOKEN , resultToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( PERMISSIONS , resultToken . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testReauthorizationWithFewerPermissionsSucceeds ( ) throws Exception { </a> 0
<a> TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> MockValidatingAuthorizationClient client = new MockValidatingAuthorizationClient ( blocker ) ; </a> 0
<a> client . addAccessTokenToFbidMapping ( USER_1_ACCESS_TOKEN , USER_1_FBID ) ; </a> 0
<a> client . addAccessTokenToFbidMapping ( USER_2_ACCESS_TOKEN , USER_2_FBID ) ; </a> 0
<a> client . setPermissionsToReport ( Arrays . asList ( "go outside" ) ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createNewPermissionRequest ( USER_1_ACCESS_TOKEN ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> AccessToken token = AccessToken . createFromExistingAccessToken ( USER_1_ACCESS_TOKEN , null , null , null , PERMISSIONS ) ; </a> 0
<a> AuthorizationClient . Result result = AuthorizationClient . Result . createTokenResult ( token ) ; </a> 0
<a> client . completeAndValidate ( result ) ; </a> 0
<a> blocker . waitForSignals ( 1 ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . SUCCESS , client . result . code ) ; </a> 0
<a> AccessToken resultToken = client . result . token ; </a> 0
<a> assertNotNull ( resultToken ) ; </a> 0
<a> assertEquals ( USER_1_ACCESS_TOKEN , resultToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( Arrays . asList ( "go outside" ) , resultToken . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testReauthorizationWithDifferentFbidsFails ( ) throws Exception { </a> 0
<a> TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> MockValidatingAuthorizationClient client = new MockValidatingAuthorizationClient ( blocker ) ; </a> 0
<a> client . addAccessTokenToFbidMapping ( USER_1_ACCESS_TOKEN , USER_1_FBID ) ; </a> 0
<a> client . addAccessTokenToFbidMapping ( USER_2_ACCESS_TOKEN , USER_2_FBID ) ; </a> 0
<a> client . setPermissionsToReport ( PERMISSIONS ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createNewPermissionRequest ( USER_1_ACCESS_TOKEN ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> AccessToken token = AccessToken . createFromExistingAccessToken ( USER_2_ACCESS_TOKEN , null , null , null , PERMISSIONS ) ; </a> 0
<a> AuthorizationClient . Result result = AuthorizationClient . Result . createTokenResult ( token ) ; </a> 0
<a> client . completeAndValidate ( result ) ; </a> 0
<a> blocker . waitForSignals ( 1 ) ; </a> 0
<a> assertNotNull ( client . result ) ; </a> 0
<a> assertEquals ( AuthorizationClient . Result . Code . ERROR , client . result . code ) ; </a> 0
<a> assertNull ( client . result . token ) ; </a> 0
<a> assertNotNull ( client . result . errorMessage ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testLegacyReauthDoesntValidate ( ) throws Exception { </a> 0
<a> TestBlocker blocker = getTestBlocker ( ) ; </a> 0
<a> MockValidatingAuthorizationClient client = new MockValidatingAuthorizationClient ( blocker ) ; </a> 0
<a> AuthorizationClient . AuthorizationRequest request = createNewPermissionRequest ( USER_1_ACCESS_TOKEN ) ; </a> 0
<a> request . setIsLegacy ( true ) ; </a> 0
<a> client . setRequest ( request ) ; </a> 0
<a> AccessToken token = AccessToken . createFromExistingAccessToken ( USER_2_ACCESS_TOKEN , null , null , null , PERMISSIONS ) ; </a> 0
<a> AuthorizationClient . Result result = AuthorizationClient . Result . createTokenResult ( token ) ; </a> 0
<a> client . completeAndValidate ( result ) ; </a> 0
<a> AccessToken resultToken = client . result . token ; </a> 0
<a> assertNotNull ( resultToken ) ; </a> 0
<a> assertEquals ( USER_2_ACCESS_TOKEN , resultToken . getToken ( ) ) ; </a> 0
<a> assertEquals ( PERMISSIONS , resultToken . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> static class DoNothingAuthorizationClient extends AuthorizationClient { </a> 0
<a> @ Override </a> 0
<a> boolean tryCurrentHandler ( ) { </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public void testSerialization ( ) throws IOException , ClassNotFoundException { </a> 0
<a> AuthorizationClient client = new DoNothingAuthorizationClient ( ) ; </a> 0
<a> client . setContext ( getActivity ( ) ) ; </a> 0
<a> client . setOnCompletedListener ( new AuthorizationClient . OnCompletedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( AuthorizationClient . Result result ) { </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> client . setBackgroundProcessingListener ( new AuthorizationClient . BackgroundProcessingListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onBackgroundProcessingStarted ( ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onBackgroundProcessingStopped ( ) { </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> client . authorize ( createRequest ( ) ) ; </a> 0
<a> ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; </a> 0
<a> ObjectOutputStream outputStream = new ObjectOutputStream ( byteArrayOutputStream ) ; </a> 0
<a> outputStream . writeObject ( client ) ; </a> 0
<a> outputStream . close ( ) ; </a> 0
<a> byte [ ] byteArray = byteArrayOutputStream . toByteArray ( ) ; </a> 0
<a> ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream ( byteArray ) ; </a> 0
<a> ObjectInputStream inputStream = new ObjectInputStream ( byteArrayInputStream ) ; </a> 0
<a> Object obj = inputStream . readObject ( ) ; </a> 0
<a> assertNotNull ( obj ) ; </a> 0
<a> assertTrue ( obj instanceof AuthorizationClient ) ; </a> 0
<a> AuthorizationClient resultClient = ( AuthorizationClient ) obj ; </a> 0
<a> assertNull ( resultClient . startActivityDelegate ) ; </a> 0
<a> assertNull ( resultClient . onCompletedListener ) ; </a> 0
<a> assertNull ( resultClient . backgroundProcessingListener ) ; </a> 0
<a> assertNull ( resultClient . context ) ; </a> 0
<a> assertNotNull ( resultClient . currentHandler ) ; </a> 0
<a> assertTrue ( resultClient . currentHandler instanceof AuthorizationClient . GetTokenAuthHandler ) ; </a> 0
<a> assertNotNull ( resultClient . handlersToTry ) ; </a> 0
<a> assertTrue ( resultClient . handlersToTry . size ( ) > 0 ) ; </a> 0
<a> assertNotNull ( resultClient . pendingRequest ) ; </a> 0
<a> assertEquals ( PERMISSIONS , resultClient . pendingRequest . getPermissions ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import com . facebook . sdk . tests . R ; </a> 0
<a> import org . json . JSONArray ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> public class FacebookRequestErrorTests extends FacebookTestCase { </a> 0
<a> public static final String ERROR_SINGLE_RESPONSE = </a> 0
<a> "{\n" + </a> 0
<a> " \"error\": {\n" + </a> 0
<a> " \"message\": \"Unknown path components: /unknown\",\n" + </a> 0
<a> " \"type\": \"OAuthException\",\n" + </a> 0
<a> " \"code\": 2500\n" + </a> 0
<a> " }\n" + </a> 0
<a> "}" ; </a> 0
<a> public static final String ERROR_BATCH_RESPONSE = </a> 0
<a> "[\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"headers\": [\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"*\",\n" + </a> 0
<a> " \"name\": \"Access-Control-Allow-Origin\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"no-store\",\n" + </a> 0
<a> " \"name\": \"Cache-Control\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"close\",\n" + </a> 0
<a> " \"name\": \"Connection\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"text\\/javascript; charset=UTF-8\",\n" + </a> 0
<a> " \"name\": \"Content-Type\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"Sat, 01 Jan 2000 00:00:00 GMT\",\n" + </a> 0
<a> " \"name\": \"Expires\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"no-cache\",\n" + </a> 0
<a> " \"name\": \"Pragma\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"OAuth \\\"Facebook Platform\\\" \\\"invalid_request\\\" \\\"An active access token must be used to query information about the current user.\\\"\",\n" + </a> 0
<a> " \"name\": \"WWW-Authenticate\"\n" + </a> 0
<a> " }\n" + </a> 0
<a> " ],\n" + </a> 0
<a> " \"body\": \"{\\\"error\\\":{\\\"message\\\":\\\"An active access token must be used to query information about the current user.\\\",\\\"type\\\":\\\"OAuthException\\\",\\\"code\\\":2500}}\",\n" + </a> 0
<a> " \"code\": 400\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"headers\": [\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"*\",\n" + </a> 0
<a> " \"name\": \"Access-Control-Allow-Origin\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"no-store\",\n" + </a> 0
<a> " \"name\": \"Cache-Control\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"close\",\n" + </a> 0
<a> " \"name\": \"Connection\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"text\\/javascript; charset=UTF-8\",\n" + </a> 0
<a> " \"name\": \"Content-Type\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"Sat, 01 Jan 2000 00:00:00 GMT\",\n" + </a> 0
<a> " \"name\": \"Expires\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"no-cache\",\n" + </a> 0
<a> " \"name\": \"Pragma\"\n" + </a> 0
<a> " },\n" + </a> 0
<a> " {\n" + </a> 0
<a> " \"value\": \"OAuth \\\"Facebook Platform\\\" \\\"invalid_request\\\" \\\"An active access token must be used to query information about the current user.\\\"\",\n" + </a> 0
<a> " \"name\": \"WWW-Authenticate\"\n" + </a> 0
<a> " }\n" + </a> 0
<a> " ],\n" + </a> 0
<a> " \"body\": \"{\\\"error\\\":{\\\"message\\\":\\\"An active access token must be used to query information about the current user.\\\",\\\"type\\\":\\\"OAuthException\\\",\\\"code\\\":2500}}\",\n" + </a> 0
<a> " \"code\": 400\n" + </a> 0
<a> " }\n" + </a> 0
<a> "]" ; </a> 0
<a> public static final String ERROR_SINGLE_RESPONSE_THROTTLE = </a> 0
<a> "{\n" + </a> 0
<a> " \"error\": {\n" + </a> 0
<a> " \"message\": \"Application request limit reached\",\n" + </a> 0
<a> " \"code\": 4\n" + </a> 0
<a> " }\n" + </a> 0
<a> "}" ; </a> 0
<a> public static final String ERROR_SINGLE_RESPONSE_SERVER = </a> 0
<a> "{\n" + </a> 0
<a> " \"error\": {\n" + </a> 0
<a> " \"message\": \"Some Server Error\",\n" + </a> 0
<a> " \"code\": 2\n" + </a> 0
<a> " }\n" + </a> 0
<a> "}" ; </a> 0
<a> public static final String ERROR_SINGLE_RESPONSE_PERMISSION = </a> 0
<a> "{\n" + </a> 0
<a> " \"error\": {\n" + </a> 0
<a> " \"type\": \"OAuthException\",\n" + </a> 0
<a> " \"message\": \"(#200) Requires extended permission: publish_actions\",\n" + </a> 0
<a> " \"code\": 200\n" + </a> 0
<a> " }\n" + </a> 0
<a> "}" ; </a> 0
<a> public static final String ERROR_SINGLE_RESPONSE_WEB_LOGIN = </a> 0
<a> "{\n" + </a> 0
<a> " \"error\": {\n" + </a> 0
<a> " \"message\": \"User need to login\",\n" + </a> 0
<a> " \"type\": \"OAuthException\",\n" + </a> 0
<a> " \"code\": 102,\n" + </a> 0
<a> " \"error_subcode\": 459\n" + </a> 0
<a> " }\n" + </a> 0
<a> "}" ; </a> 0
<a> public static final String ERROR_SINGLE_RESPONSE_RELOGIN = </a> 0
<a> "{\n" + </a> 0
<a> " \"error\": {\n" + </a> 0
<a> " \"message\": \"User need to relogin\",\n" + </a> 0
<a> " \"type\": \"OAuthException\",\n" + </a> 0
<a> " \"code\": 102\n" + </a> 0
<a> " }\n" + </a> 0
<a> "}" ; </a> 0
<a> public static final String ERROR_SINGLE_RESPONSE_RELOGIN_DELETED_APP = </a> 0
<a> "{\n" + </a> 0
<a> " \"error\": {\n" + </a> 0
<a> " \"message\": \"User need to relogin\",\n" + </a> 0
<a> " \"type\": \"OAuthException\",\n" + </a> 0
<a> " \"code\": 190,\n" + </a> 0
<a> " \"error_subcode\": 458\n" + </a> 0
<a> " }\n" + </a> 0
<a> "}" ; </a> 0
<a> public void testClientException ( ) { </a> 0
<a> final String errorMsg = "some error happened" ; </a> 0
<a> FacebookRequestError error = new FacebookRequestError ( null , new FacebookException ( errorMsg ) ) ; </a> 0
<a> assertEquals ( errorMsg , error . getErrorMessage ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . Category . CLIENT , error . getCategory ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . INVALID_ERROR_CODE , error . getErrorCode ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . INVALID_HTTP_STATUS_CODE , error . getRequestStatusCode ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . getUserActionMessageId ( ) ) ; </a> 0
<a> } </a> 0
<a> public void testSingleRequestWithoutBody ( ) throws JSONException { </a> 0
<a> JSONObject withStatusCode = new JSONObject ( ) ; </a> 0
<a> withStatusCode . put ( "code" , 400 ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . checkResponseAndCreateError ( withStatusCode , withStatusCode , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( 400 , error . getRequestStatusCode ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . Category . BAD_REQUEST , error . getCategory ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . getUserActionMessageId ( ) ) ; </a> 0
<a> } </a> 0
<a> public void testSingleErrorWithBody ( ) throws JSONException { </a> 0
<a> JSONObject originalResponse = new JSONObject ( ERROR_SINGLE_RESPONSE ) ; </a> 0
<a> JSONObject withStatusCodeAndBody = new JSONObject ( ) ; </a> 0
<a> withStatusCodeAndBody . put ( "code" , 400 ) ; </a> 0
<a> withStatusCodeAndBody . put ( "body" , originalResponse ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . checkResponseAndCreateError ( withStatusCodeAndBody , originalResponse , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( 400 , error . getRequestStatusCode ( ) ) ; </a> 0
<a> assertEquals ( "Unknown path components: /unknown" , error . getErrorMessage ( ) ) ; </a> 0
<a> assertEquals ( "OAuthException" , error . getErrorType ( ) ) ; </a> 0
<a> assertEquals ( 2500 , error . getErrorCode ( ) ) ; </a> 0
<a> assertTrue ( error . getBatchRequestResult ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . Category . BAD_REQUEST , error . getCategory ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . getUserActionMessageId ( ) ) ; </a> 0
<a> } </a> 0
<a> public void testBatchRequest ( ) throws JSONException { </a> 0
<a> JSONArray batchResponse = new JSONArray ( ERROR_BATCH_RESPONSE ) ; </a> 0
<a> assertEquals ( 2 , batchResponse . length ( ) ) ; </a> 0
<a> JSONObject firstResponse = ( JSONObject ) batchResponse . get ( 0 ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . checkResponseAndCreateError ( firstResponse , batchResponse , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( 400 , error . getRequestStatusCode ( ) ) ; </a> 0
<a> assertEquals ( "An active access token must be used to query information about the current user." , </a> 0
<a> error . getErrorMessage ( ) ) ; </a> 0
<a> assertEquals ( "OAuthException" , error . getErrorType ( ) ) ; </a> 0
<a> assertEquals ( 2500 , error . getErrorCode ( ) ) ; </a> 0
<a> assertTrue ( error . getBatchRequestResult ( ) instanceof JSONArray ) ; </a> 0
<a> assertEquals ( FacebookRequestError . Category . BAD_REQUEST , error . getCategory ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . getUserActionMessageId ( ) ) ; </a> 0
<a> } </a> 0
<a> public void testSingleThrottledError ( ) throws JSONException { </a> 0
<a> JSONObject originalResponse = new JSONObject ( ERROR_SINGLE_RESPONSE_THROTTLE ) ; </a> 0
<a> JSONObject withStatusCodeAndBody = new JSONObject ( ) ; </a> 0
<a> withStatusCodeAndBody . put ( "code" , 403 ) ; </a> 0
<a> withStatusCodeAndBody . put ( "body" , originalResponse ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . checkResponseAndCreateError ( withStatusCodeAndBody , originalResponse , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( 403 , error . getRequestStatusCode ( ) ) ; </a> 0
<a> assertEquals ( "Application request limit reached" , error . getErrorMessage ( ) ) ; </a> 0
<a> assertNull ( error . getErrorType ( ) ) ; </a> 0
<a> assertEquals ( 4 , error . getErrorCode ( ) ) ; </a> 0
<a> assertTrue ( error . getBatchRequestResult ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . Category . THROTTLING , error . getCategory ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . getUserActionMessageId ( ) ) ; </a> 0
<a> } </a> 0
<a> public void testSingleServerError ( ) throws JSONException { </a> 0
<a> JSONObject originalResponse = new JSONObject ( ERROR_SINGLE_RESPONSE_SERVER ) ; </a> 0
<a> JSONObject withStatusCodeAndBody = new JSONObject ( ) ; </a> 0
<a> withStatusCodeAndBody . put ( "code" , 500 ) ; </a> 0
<a> withStatusCodeAndBody . put ( "body" , originalResponse ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . checkResponseAndCreateError ( withStatusCodeAndBody , originalResponse , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( 500 , error . getRequestStatusCode ( ) ) ; </a> 0
<a> assertEquals ( "Some Server Error" , error . getErrorMessage ( ) ) ; </a> 0
<a> assertNull ( error . getErrorType ( ) ) ; </a> 0
<a> assertEquals ( 2 , error . getErrorCode ( ) ) ; </a> 0
<a> assertTrue ( error . getBatchRequestResult ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . Category . SERVER , error . getCategory ( ) ) ; </a> 0
<a> assertEquals ( 0 , error . getUserActionMessageId ( ) ) ; </a> 0
<a> } </a> 0
<a> public void testSinglePermissionError ( ) throws JSONException { </a> 0
<a> JSONObject originalResponse = new JSONObject ( ERROR_SINGLE_RESPONSE_PERMISSION ) ; </a> 0
<a> JSONObject withStatusCodeAndBody = new JSONObject ( ) ; </a> 0
<a> withStatusCodeAndBody . put ( "code" , 400 ) ; </a> 0
<a> withStatusCodeAndBody . put ( "body" , originalResponse ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . checkResponseAndCreateError ( withStatusCodeAndBody , originalResponse , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( 400 , error . getRequestStatusCode ( ) ) ; </a> 0
<a> assertEquals ( "(#200) Requires extended permission: publish_actions" , error . getErrorMessage ( ) ) ; </a> 0
<a> assertEquals ( "OAuthException" , error . getErrorType ( ) ) ; </a> 0
<a> assertEquals ( 200 , error . getErrorCode ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . INVALID_ERROR_CODE , error . getSubErrorCode ( ) ) ; </a> 0
<a> assertTrue ( error . getBatchRequestResult ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . Category . PERMISSION , error . getCategory ( ) ) ; </a> 0
<a> assertEquals ( R . string . com_facebook_requesterror_permissions , error . getUserActionMessageId ( ) ) ; </a> 0
<a> } </a> 0
<a> public void testSingleWebLoginError ( ) throws JSONException { </a> 0
<a> JSONObject originalResponse = new JSONObject ( ERROR_SINGLE_RESPONSE_WEB_LOGIN ) ; </a> 0
<a> JSONObject withStatusCodeAndBody = new JSONObject ( ) ; </a> 0
<a> withStatusCodeAndBody . put ( "code" , 400 ) ; </a> 0
<a> withStatusCodeAndBody . put ( "body" , originalResponse ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . checkResponseAndCreateError ( withStatusCodeAndBody , originalResponse , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( 400 , error . getRequestStatusCode ( ) ) ; </a> 0
<a> assertEquals ( "User need to login" , error . getErrorMessage ( ) ) ; </a> 0
<a> assertEquals ( "OAuthException" , error . getErrorType ( ) ) ; </a> 0
<a> assertEquals ( 102 , error . getErrorCode ( ) ) ; </a> 0
<a> assertEquals ( 459 , error . getSubErrorCode ( ) ) ; </a> 0
<a> assertTrue ( error . getBatchRequestResult ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . Category . AUTHENTICATION_RETRY , error . getCategory ( ) ) ; </a> 0
<a> assertEquals ( R . string . com_facebook_requesterror_web_login , error . getUserActionMessageId ( ) ) ; </a> 0
<a> } </a> 0
<a> public void testSingleReloginError ( ) throws JSONException { </a> 0
<a> JSONObject originalResponse = new JSONObject ( ERROR_SINGLE_RESPONSE_RELOGIN ) ; </a> 0
<a> JSONObject withStatusCodeAndBody = new JSONObject ( ) ; </a> 0
<a> withStatusCodeAndBody . put ( "code" , 400 ) ; </a> 0
<a> withStatusCodeAndBody . put ( "body" , originalResponse ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . checkResponseAndCreateError ( withStatusCodeAndBody , originalResponse , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( 400 , error . getRequestStatusCode ( ) ) ; </a> 0
<a> assertEquals ( "User need to relogin" , error . getErrorMessage ( ) ) ; </a> 0
<a> assertEquals ( "OAuthException" , error . getErrorType ( ) ) ; </a> 0
<a> assertEquals ( 102 , error . getErrorCode ( ) ) ; </a> 0
<a> assertEquals ( FacebookRequestError . INVALID_ERROR_CODE , error . getSubErrorCode ( ) ) ; </a> 0
<a> assertTrue ( error . getBatchRequestResult ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . Category . AUTHENTICATION_REOPEN_SESSION , error . getCategory ( ) ) ; </a> 0
<a> assertEquals ( R . string . com_facebook_requesterror_reconnect , error . getUserActionMessageId ( ) ) ; </a> 0
<a> } </a> 0
<a> public void testSingleReloginDeletedAppError ( ) throws JSONException { </a> 0
<a> JSONObject originalResponse = new JSONObject ( ERROR_SINGLE_RESPONSE_RELOGIN_DELETED_APP ) ; </a> 0
<a> JSONObject withStatusCodeAndBody = new JSONObject ( ) ; </a> 0
<a> withStatusCodeAndBody . put ( "code" , 400 ) ; </a> 0
<a> withStatusCodeAndBody . put ( "body" , originalResponse ) ; </a> 0
<a> FacebookRequestError error = </a> 0
<a> FacebookRequestError . checkResponseAndCreateError ( withStatusCodeAndBody , originalResponse , null ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertEquals ( 400 , error . getRequestStatusCode ( ) ) ; </a> 0
<a> assertEquals ( "User need to relogin" , error . getErrorMessage ( ) ) ; </a> 0
<a> assertEquals ( "OAuthException" , error . getErrorType ( ) ) ; </a> 0
<a> assertEquals ( 190 , error . getErrorCode ( ) ) ; </a> 0
<a> assertEquals ( 458 , error . getSubErrorCode ( ) ) ; </a> 0
<a> assertTrue ( error . getBatchRequestResult ( ) instanceof JSONObject ) ; </a> 0
<a> assertEquals ( FacebookRequestError . Category . AUTHENTICATION_REOPEN_SESSION , error . getCategory ( ) ) ; </a> 0
<a> assertEquals ( R . string . com_facebook_requesterror_relogin , error . getUserActionMessageId ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . location . Location ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import com . facebook . model . * ; </a> 0
<a> import java . io . File ; </a> 0
<a> import java . io . FileOutputStream ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . net . HttpURLConnection ; </a> 0
<a> import java . net . URISyntaxException ; </a> 0
<a> import java . util . ArrayList ; </a> 0
<a> import java . util . Arrays ; </a> 0
<a> import java . util . List ; </a> 0
<a> public class RequestTests extends FacebookTestCase { </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreateRequest ( ) { </a> 0
<a> Request request = new Request ( ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . getHttpMethod ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreatePostRequest ( ) { </a> 0
<a> GraphObject graphObject = GraphObject . Factory . create ( ) ; </a> 0
<a> Request request = Request . newPostRequest ( null , "me/statuses" , graphObject , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . POST , request . getHttpMethod ( ) ) ; </a> 0
<a> assertEquals ( "me/statuses" , request . getGraphPath ( ) ) ; </a> 0
<a> assertEquals ( graphObject , request . getGraphObject ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreateMeRequest ( ) { </a> 0
<a> Request request = Request . newMeRequest ( null , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . getHttpMethod ( ) ) ; </a> 0
<a> assertEquals ( "me" , request . getGraphPath ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreateMyFriendsRequest ( ) { </a> 0
<a> Request request = Request . newMyFriendsRequest ( null , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . getHttpMethod ( ) ) ; </a> 0
<a> assertEquals ( "me/friends" , request . getGraphPath ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreateUploadPhotoRequest ( ) { </a> 0
<a> Bitmap image = Bitmap . createBitmap ( 128 , 128 , Bitmap . Config . ALPHA_8 ) ; </a> 0
<a> Request request = Request . newUploadPhotoRequest ( null , image , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> Bundle parameters = request . getParameters ( ) ; </a> 0
<a> assertTrue ( parameters != null ) ; </a> 0
<a> assertTrue ( parameters . containsKey ( "picture" ) ) ; </a> 0
<a> assertEquals ( image , parameters . getParcelable ( "picture" ) ) ; </a> 0
<a> assertEquals ( "me/photos" , request . getGraphPath ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreatePlacesSearchRequestWithLocation ( ) { </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . setLatitude ( 47.6204 ) ; </a> 0
<a> location . setLongitude ( - 122.3491 ) ; </a> 0
<a> Request request = Request . newPlacesSearchRequest ( null , location , 1000 , 50 , null , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . getHttpMethod ( ) ) ; </a> 0
<a> assertEquals ( "search" , request . getGraphPath ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreatePlacesSearchRequestWithSearchText ( ) { </a> 0
<a> Request request = Request . newPlacesSearchRequest ( null , null , 1000 , 50 , "Starbucks" , null ) ; </a> 0
<a> assertTrue ( request != null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . getHttpMethod ( ) ) ; </a> 0
<a> assertEquals ( "search" , request . getGraphPath ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCreatePlacesSearchRequestRequiresLocationOrSearchText ( ) { </a> 0
<a> try { </a> 0
<a> Request request = Request . newPlacesSearchRequest ( null , null , 1000 , 50 , null , null ) ; </a> 0
<a> fail ( "expected exception" ) ; </a> 0
<a> } catch ( FacebookException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testSetHttpMethodToNilGivesDefault ( ) { </a> 0
<a> Request request = new Request ( ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . getHttpMethod ( ) ) ; </a> 0
<a> request . setHttpMethod ( null ) ; </a> 0
<a> assertEquals ( HttpMethod . GET , request . getHttpMethod ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteBatchWithNullRequestsThrows ( ) { </a> 0
<a> try { </a> 0
<a> Request . executeBatchAndWait ( ( Request [ ] ) null ) ; </a> 0
<a> fail ( "expected NullPointerException" ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteBatchWithZeroRequestsThrows ( ) { </a> 0
<a> try { </a> 0
<a> Request . executeBatchAndWait ( new Request [ ] { } ) ; </a> 0
<a> fail ( "expected IllegalArgumentException" ) ; </a> 0
<a> } catch ( IllegalArgumentException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteBatchWithNullRequestThrows ( ) { </a> 0
<a> try { </a> 0
<a> Request . executeBatchAndWait ( new Request [ ] { null } ) ; </a> 0
<a> fail ( "expected NullPointerException" ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testToHttpConnectionWithNullRequestsThrows ( ) { </a> 0
<a> try { </a> 0
<a> Request . toHttpConnection ( ( Request [ ] ) null ) ; </a> 0
<a> fail ( "expected NullPointerException" ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testToHttpConnectionWithZeroRequestsThrows ( ) { </a> 0
<a> try { </a> 0
<a> Request . toHttpConnection ( new Request [ ] { } ) ; </a> 0
<a> fail ( "expected IllegalArgumentException" ) ; </a> 0
<a> } catch ( IllegalArgumentException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testToHttpConnectionWithNullRequestThrows ( ) { </a> 0
<a> try { </a> 0
<a> Request . toHttpConnection ( new Request [ ] { null } ) ; </a> 0
<a> fail ( "expected NullPointerException" ) ; </a> 0
<a> } catch ( NullPointerException exception ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testSingleGetToHttpRequest ( ) throws Exception { </a> 0
<a> Request requestMe = new Request ( null , "TourEiffel" ) ; </a> 0
<a> HttpURLConnection connection = Request . toHttpConnection ( requestMe ) ; </a> 0
<a> assertTrue ( connection != null ) ; </a> 0
<a> assertEquals ( "GET" , connection . getRequestMethod ( ) ) ; </a> 0
<a> assertEquals ( "/TourEiffel" , connection . getURL ( ) . getPath ( ) ) ; </a> 0
<a> assertTrue ( connection . getRequestProperty ( "User-Agent" ) . startsWith ( "FBAndroidSDK" ) ) ; </a> 0
<a> Uri uri = Uri . parse ( connection . getURL ( ) . toString ( ) ) ; </a> 0
<a> assertEquals ( "android" , uri . getQueryParameter ( "sdk" ) ) ; </a> 0
<a> assertEquals ( "json" , uri . getQueryParameter ( "format" ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteSingleGet ( ) { </a> 0
<a> Request request = new Request ( null , "TourEiffel" ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertTrue ( response != null ) ; </a> 0
<a> assertTrue ( response . getError ( ) == null ) ; </a> 0
<a> assertTrue ( response . getGraphObject ( ) != null ) ; </a> 0
<a> GraphPlace graphPlace = response . getGraphObjectAs ( GraphPlace . class ) ; </a> 0
<a> assertEquals ( "Paris" , graphPlace . getLocation ( ) . getCity ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteSingleGetUsingHttpURLConnection ( ) throws IOException { </a> 0
<a> Request request = new Request ( null , "TourEiffel" ) ; </a> 0
<a> HttpURLConnection connection = Request . toHttpConnection ( request ) ; </a> 0
<a> List < Response > responses = Request . executeConnectionAndWait ( connection , Arrays . asList ( new Request [ ] { request } ) ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertEquals ( 1 , responses . size ( ) ) ; </a> 0
<a> Response response = responses . get ( 0 ) ; </a> 0
<a> assertTrue ( response != null ) ; </a> 0
<a> assertTrue ( response . getError ( ) == null ) ; </a> 0
<a> assertTrue ( response . getGraphObject ( ) != null ) ; </a> 0
<a> GraphPlace graphPlace = response . getGraphObjectAs ( GraphPlace . class ) ; </a> 0
<a> assertEquals ( "Paris" , graphPlace . getLocation ( ) . getCity ( ) ) ; </a> 0
<a> int code = connection . getResponseCode ( ) ; </a> 0
<a> assertEquals ( 200 , code ) ; </a> 0
<a> assertTrue ( connection . getHeaderFields ( ) . keySet ( ) . contains ( "Content-Length" ) ) ; </a> 0
<a> connection . disconnect ( ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testFacebookErrorResponseCreatesError ( ) { </a> 0
<a> Request request = new Request ( null , "somestringthatshouldneverbeavalidfobjectid" ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertTrue ( response != null ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> FacebookException exception = error . getException ( ) ; </a> 0
<a> assertNotNull ( exception ) ; </a> 0
<a> assertTrue ( exception instanceof FacebookServiceException ) ; </a> 0
<a> assertNotNull ( error . getErrorType ( ) ) ; </a> 0
<a> assertTrue ( error . getErrorCode ( ) != FacebookRequestError . INVALID_ERROR_CODE ) ; </a> 0
<a> assertNotNull ( error . getRequestResultBody ( ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testFacebookSuccessResponseWithErrorCodeCreatesError ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = Request . newRestRequest ( session , "auth.extendSSOAccessToken" , null , null ) ; </a> 0
<a> assertNotNull ( request ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertTrue ( response != null ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> assertTrue ( error . getException ( ) instanceof FacebookServiceException ) ; </a> 0
<a> assertTrue ( error . getErrorCode ( ) != FacebookRequestError . INVALID_ERROR_CODE ) ; </a> 0
<a> assertNotNull ( error . getRequestResultBody ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testRequestWithUnopenedSessionFails ( ) { </a> 0
<a> TestSession session = getTestSessionWithSharedUser ( null ) ; </a> 0
<a> Request request = new Request ( session , "me" ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteRequestMe ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = Request . newMeRequest ( session , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> validateMeResponse ( session , response ) ; </a> 0
<a> } </a> 0
<a> static void validateMeResponse ( TestSession session , Response response ) { </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphUser me = response . getGraphObjectAs ( GraphUser . class ) ; </a> 0
<a> assertNotNull ( me ) ; </a> 0
<a> assertEquals ( session . getTestUserId ( ) , me . getId ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteMyFriendsRequest ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = Request . newMyFriendsRequest ( session , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> validateMyFriendsResponse ( session , response ) ; </a> 0
<a> } </a> 0
<a> static void validateMyFriendsResponse ( TestSession session , Response response ) { </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphMultiResult graphResult = response . getGraphObjectAs ( GraphMultiResult . class ) ; </a> 0
<a> assertNotNull ( graphResult ) ; </a> 0
<a> List < GraphObject > results = graphResult . getData ( ) ; </a> 0
<a> assertNotNull ( results ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecutePlaceRequestWithLocation ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . setLatitude ( 47.6204 ) ; </a> 0
<a> location . setLongitude ( - 122.3491 ) ; </a> 0
<a> Request request = Request . newPlacesSearchRequest ( session , location , 5 , 5 , null , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphMultiResult graphResult = response . getGraphObjectAs ( GraphMultiResult . class ) ; </a> 0
<a> assertNotNull ( graphResult ) ; </a> 0
<a> List < GraphObject > results = graphResult . getData ( ) ; </a> 0
<a> assertNotNull ( results ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecutePlaceRequestWithSearchText ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Request request = Request . newPlacesSearchRequest ( session , null , 1000 , 5 , "Starbucks" , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphMultiResult graphResult = response . getGraphObjectAs ( GraphMultiResult . class ) ; </a> 0
<a> assertNotNull ( graphResult ) ; </a> 0
<a> List < GraphObject > results = graphResult . getData ( ) ; </a> 0
<a> assertNotNull ( results ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecutePlaceRequestWithLocationAndSearchText ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Location location = new Location ( "" ) ; </a> 0
<a> location . setLatitude ( 47.6204 ) ; </a> 0
<a> location . setLongitude ( - 122.3491 ) ; </a> 0
<a> Request request = Request . newPlacesSearchRequest ( session , location , 1000 , 5 , "Starbucks" , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphMultiResult graphResult = response . getGraphObjectAs ( GraphMultiResult . class ) ; </a> 0
<a> assertNotNull ( graphResult ) ; </a> 0
<a> List < GraphObject > results = graphResult . getData ( ) ; </a> 0
<a> assertNotNull ( results ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteUploadPhoto ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Bitmap image = createTestBitmap ( 128 ) ; </a> 0
<a> Request request = Request . newUploadPhotoRequest ( session , image , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphObject result = response . getGraphObject ( ) ; </a> 0
<a> assertNotNull ( result ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testExecuteUploadPhotoViaFile ( ) throws IOException { </a> 0
<a> File outputFile = null ; </a> 0
<a> FileOutputStream outStream = null ; </a> 0
<a> try { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Bitmap image = createTestBitmap ( 128 ) ; </a> 0
<a> File outputDir = getActivity ( ) . getCacheDir ( ) ; </a> 0
<a> outputFile = File . createTempFile ( "prefix" , "extension" , outputDir ) ; </a> 0
<a> outStream = new FileOutputStream ( outputFile ) ; </a> 0
<a> image . compress ( Bitmap . CompressFormat . PNG , 100 , outStream ) ; </a> 0
<a> outStream . close ( ) ; </a> 0
<a> outStream = null ; </a> 0
<a> Request request = Request . newUploadPhotoRequest ( session , outputFile , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphObject result = response . getGraphObject ( ) ; </a> 0
<a> assertNotNull ( result ) ; </a> 0
<a> } finally { </a> 0
<a> if ( outStream != null ) { </a> 0
<a> outStream . close ( ) ; </a> 0
<a> } </a> 0
<a> if ( outputFile != null ) { </a> 0
<a> outputFile . delete ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testUploadVideoFile ( ) throws IOException , URISyntaxException { </a> 0
<a> File tempFile = null ; </a> 0
<a> try { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> tempFile = createTempFileFromAsset ( "DarkScreen.mov" ) ; </a> 0
<a> Request request = Request . newUploadVideoRequest ( session , tempFile , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> GraphObject result = response . getGraphObject ( ) ; </a> 0
<a> assertNotNull ( result ) ; </a> 0
<a> } catch ( Exception ex ) { </a> 0
<a> return ; </a> 0
<a> } finally { </a> 0
<a> if ( tempFile != null ) { </a> 0
<a> tempFile . delete ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testPostStatusUpdate ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> GraphObject statusUpdate = createStatusUpdate ( ) ; </a> 0
<a> GraphObject retrievedStatusUpdate = postGetAndAssert ( session , "me/feed" , statusUpdate ) ; </a> 0
<a> assertEquals ( statusUpdate . getProperty ( "message" ) , retrievedStatusUpdate . getProperty ( "message" ) ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testRestMethodGetUser ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> String testUserId = session . getTestUserId ( ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putString ( "uids" , testUserId ) ; </a> 0
<a> parameters . putString ( "fields" , "uid,name" ) ; </a> 0
<a> Request request = Request . newRestRequest ( session , "users.getInfo" , parameters , null ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> GraphObjectList < GraphObject > graphObjects = response . getGraphObjectList ( ) ; </a> 0
<a> assertNotNull ( graphObjects ) ; </a> 0
<a> assertEquals ( 1 , graphObjects . size ( ) ) ; </a> 0
<a> GraphObject user = graphObjects . get ( 0 ) ; </a> 0
<a> assertNotNull ( user ) ; </a> 0
<a> assertEquals ( testUserId , user . getProperty ( "uid" ) . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCallbackIsCalled ( ) { </a> 0
<a> Request request = new Request ( null , "4" ) ; </a> 0
<a> final ArrayList < Boolean > calledBack = new ArrayList < Boolean > ( ) ; </a> 0
<a> request . setCallback ( new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> calledBack . add ( true ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertTrue ( calledBack . size ( ) == 1 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testBatchTimeoutIsApplied ( ) { </a> 0
<a> Request request = new Request ( null , "me" ) ; </a> 0
<a> RequestBatch batch = new RequestBatch ( request ) ; </a> 0
<a> batch . setTimeout ( 1 ) ; </a> 0
<a> List < Response > responses = Request . executeBatchAndWait ( batch ) ; </a> 0
<a> assertNotNull ( responses ) ; </a> 0
<a> assertTrue ( responses . size ( ) == 1 ) ; </a> 0
<a> Response response = responses . get ( 0 ) ; </a> 0
<a> assertNotNull ( response ) ; </a> 0
<a> assertNotNull ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testBatchTimeoutCantBeNegative ( ) { </a> 0
<a> try { </a> 0
<a> RequestBatch batch = new RequestBatch ( ) ; </a> 0
<a> batch . setTimeout ( - 1 ) ; </a> 0
<a> fail ( ) ; </a> 0
<a> } catch ( IllegalArgumentException ex ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantSetBothGraphPathAndRestMethod ( ) { </a> 0
<a> Request request = new Request ( ) ; </a> 0
<a> request . setGraphPath ( "me" ) ; </a> 0
<a> request . setRestMethod ( "amethod" ) ; </a> 0
<a> request . setCallback ( new ExpectFailureCallback ( ) ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( request ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccess ( 1 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testClosedSessionDoesntAppendAccessToken ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> session . close ( ) ; </a> 0
<a> Request request = new Request ( session , "me" , null , null , new ExpectFailureCallback ( ) ) ; </a> 0
<a> TestRequestAsyncTask task = new TestRequestAsyncTask ( request ) ; </a> 0
<a> task . executeOnBlockerThread ( ) ; </a> 0
<a> waitAndAssertSuccess ( 1 ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testCantUseComplexParameterInGetRequest ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> Bundle parameters = new Bundle ( ) ; </a> 0
<a> parameters . putShortArray ( "foo" , new short [ 1 ] ) ; </a> 0
<a> Request request = new Request ( session , "me" , parameters , HttpMethod . GET , new ExpectFailureCallback ( ) ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> FacebookRequestError error = response . getError ( ) ; </a> 0
<a> assertNotNull ( error ) ; </a> 0
<a> FacebookException exception = error . getException ( ) ; </a> 0
<a> assertNotNull ( exception ) ; </a> 0
<a> assertTrue ( exception . getMessage ( ) . contains ( "short[]" ) ) ; </a> 0
<a> } </a> 0
<a> private final Location SEATTLE_LOCATION = new Location ( "" ) { </a> 0
<a> { </a> 0
<a> setLatitude ( 47.6097 ) ; </a> 0
<a> setLongitude ( - 122.3331 ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ LargeTest </a> 0
<a> public void testPaging ( ) { </a> 0
<a> TestSession session = openTestSessionWithSharedUser ( ) ; </a> 0
<a> final List < GraphPlace > returnedPlaces = new ArrayList < GraphPlace > ( ) ; </a> 0
<a> Request request = Request </a> 0
<a> . newPlacesSearchRequest ( session , SEATTLE_LOCATION , 1000 , 5 , null , new Request . GraphPlaceListCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( List < GraphPlace > places , Response response ) { </a> 0
<a> returnedPlaces . addAll ( places ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertNotNull ( response . getGraphObject ( ) ) ; </a> 0
<a> assertNotSame ( 0 , returnedPlaces . size ( ) ) ; </a> 0
<a> returnedPlaces . clear ( ) ; </a> 0
<a> Request nextRequest = response . getRequestForPagedResults ( Response . PagingDirection . NEXT ) ; </a> 0
<a> assertNotNull ( nextRequest ) ; </a> 0
<a> nextRequest . setCallback ( request . getCallback ( ) ) ; </a> 0
<a> response = nextRequest . executeAndWait ( ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertNotNull ( response . getGraphObject ( ) ) ; </a> 0
<a> assertNotSame ( 0 , returnedPlaces . size ( ) ) ; </a> 0
<a> returnedPlaces . clear ( ) ; </a> 0
<a> Request previousRequest = response . getRequestForPagedResults ( Response . PagingDirection . PREVIOUS ) ; </a> 0
<a> assertNotNull ( previousRequest ) ; </a> 0
<a> previousRequest . setCallback ( request . getCallback ( ) ) ; </a> 0
<a> response = previousRequest . executeAndWait ( ) ; </a> 0
<a> assertNull ( response . getError ( ) ) ; </a> 0
<a> assertNotNull ( response . getGraphObject ( ) ) ; </a> 0
<a> assertNotSame ( 0 , returnedPlaces . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest </a> 0
<a> @ MediumTest </a> 0
<a> @ LargeTest </a> 0
<a> public void testRequestWithClosedSessionThrowsException ( ) { </a> 0
<a> TestSession session = getTestSessionWithSharedUser ( ) ; </a> 0
<a> assertFalse ( session . isOpened ( ) ) ; </a> 0
<a> Request request = new Request ( session , "4" ) ; </a> 0
<a> Response response = request . executeAndWait ( ) ; </a> 0
<a> assertNotNull ( response . getError ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . internal ; </a> 0
<a> import android . test . AndroidTestCase ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import java . io . ByteArrayInputStream ; </a> 0
<a> import java . io . IOException ; </a> 0
<a> import java . io . InputStream ; </a> 0
<a> import java . io . OutputStream ; </a> 0
<a> import java . util . Random ; </a> 0
<a> public final class FileLruCacheTests extends AndroidTestCase { </a> 0
<a> private static final Random random = new Random ( ) ; </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testCacheOutputStream ( ) throws IOException { </a> 0
<a> int dataSize = 1024 ; </a> 0
<a> byte [ ] data = generateBytes ( dataSize ) ; </a> 0
<a> String key = "a" ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , "testCacheOutputStream" , limitCacheSize ( 2 * dataSize ) ) ; </a> 0
<a> put ( cache , key , data ) ; </a> 0
<a> checkValue ( cache , key , data ) ; </a> 0
<a> cache . clearForTest ( ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testCacheInputStream ( ) throws IOException { </a> 0
<a> int dataSize = 1024 ; </a> 0
<a> byte [ ] data = generateBytes ( dataSize ) ; </a> 0
<a> String key = "a" ; </a> 0
<a> InputStream stream = new ByteArrayInputStream ( data ) ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , "testCacheInputStream" , limitCacheSize ( 2 * dataSize ) ) ; </a> 0
<a> cache . clearForTest ( ) ; </a> 0
<a> InputStream wrapped = cache . interceptAndPut ( key , stream ) ; </a> 0
<a> consumeAndClose ( wrapped ) ; </a> 0
<a> checkValue ( cache , key , data ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testCacheClear ( ) throws IOException { </a> 0
<a> int dataSize = 1024 ; </a> 0
<a> byte [ ] data = generateBytes ( dataSize ) ; </a> 0
<a> String key = "a" ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , "testCacheClear" , limitCacheSize ( 2 * dataSize ) ) ; </a> 0
<a> cache . clearForTest ( ) ; </a> 0
<a> put ( cache , key , data ) ; </a> 0
<a> checkValue ( cache , key , data ) ; </a> 0
<a> cache . clearForTest ( ) ; </a> 0
<a> assertEquals ( false , hasValue ( cache , key ) ) ; </a> 0
<a> assertEquals ( 0 , cache . sizeInBytesForTest ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testSizeInBytes ( ) throws IOException { </a> 0
<a> int count = 17 ; </a> 0
<a> int dataSize = 53 ; </a> 0
<a> int cacheSize = count * dataSize ; </a> 0
<a> byte [ ] data = generateBytes ( dataSize ) ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , "testSizeInBytes" , limitCacheSize ( 2 * cacheSize ) ) ; </a> 0
<a> cache . clearForTest ( ) ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> put ( cache , i , data ) ; </a> 0
<a> int totalDataSize = ( i + 1 ) * dataSize ; </a> 0
<a> assertTrue ( cache . sizeInBytesForTest ( ) > totalDataSize ) ; </a> 0
<a> assertTrue ( cache . sizeInBytesForTest ( ) < 2 * totalDataSize ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> String key = Integer . valueOf ( i ) . toString ( ) ; </a> 0
<a> checkValue ( cache , key , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ MediumTest @ LargeTest </a> 0
<a> public void testCacheSizeLimit ( ) throws IOException { </a> 0
<a> int count = 64 ; </a> 0
<a> int dataSize = 32 ; </a> 0
<a> int cacheSize = count * dataSize / 2 ; </a> 0
<a> byte [ ] data = generateBytes ( dataSize ) ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , "testCacheSizeLimit" , limitCacheSize ( cacheSize ) ) ; </a> 0
<a> cache . clearForTest ( ) ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> put ( cache , i , data ) ; </a> 0
<a> int totalDataSize = ( i + 1 ) * dataSize ; </a> 0
<a> assertTrue ( cache . sizeInBytesForTest ( ) > Math . min ( totalDataSize , cacheSize / 2 ) ) ; </a> 0
<a> assertTrue ( cache . sizeInBytesForTest ( ) < Math . min ( 2 * totalDataSize , cacheSize ) ) ; </a> 0
<a> } </a> 0
<a> boolean hasValueExists = false ; </a> 0
<a> boolean hasNoValueExists = false ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> String key = Integer . valueOf ( i ) . toString ( ) ; </a> 0
<a> if ( hasValue ( cache , key ) ) { </a> 0
<a> hasValueExists = true ; </a> 0
<a> checkValue ( cache , key , data ) ; </a> 0
<a> } else { </a> 0
<a> hasNoValueExists = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> assertEquals ( true , hasValueExists ) ; </a> 0
<a> assertEquals ( true , hasNoValueExists ) ; </a> 0
<a> } </a> 0
<a> @ MediumTest @ LargeTest </a> 0
<a> public void testCacheCountLimit ( ) throws IOException { </a> 0
<a> int count = 64 ; </a> 0
<a> int dataSize = 32 ; </a> 0
<a> int cacheCount = count / 2 ; </a> 0
<a> byte [ ] data = generateBytes ( dataSize ) ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , "testCacheCountLimit" , limitCacheCount ( cacheCount ) ) ; </a> 0
<a> cache . clearForTest ( ) ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> put ( cache , i , data ) ; </a> 0
<a> } </a> 0
<a> boolean hasValueExists = false ; </a> 0
<a> boolean hasNoValueExists = false ; </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> if ( hasValue ( cache , i ) ) { </a> 0
<a> hasValueExists = true ; </a> 0
<a> checkValue ( cache , i , data ) ; </a> 0
<a> } else { </a> 0
<a> hasNoValueExists = true ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> assertEquals ( true , hasValueExists ) ; </a> 0
<a> assertEquals ( true , hasNoValueExists ) ; </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testCacheLru ( ) throws IOException , InterruptedException { </a> 0
<a> int keepCount = 10 ; </a> 0
<a> int otherCount = 5 ; </a> 0
<a> int dataSize = 64 ; </a> 0
<a> byte [ ] data = generateBytes ( dataSize ) ; </a> 0
<a> FileLruCache cache = new FileLruCache ( getContext ( ) , "testCacheLru" , limitCacheCount ( keepCount + 1 ) ) ; </a> 0
<a> cache . clearForTest ( ) ; </a> 0
<a> for ( int i = 0 ; i < keepCount ; i ++ ) { </a> 0
<a> put ( cache , i , data ) ; </a> 0
<a> } </a> 0
<a> Thread . sleep ( 1000 ) ; </a> 0
<a> for ( int i = 0 ; i < otherCount ; i ++ ) { </a> 0
<a> put ( cache , keepCount + i , data ) ; </a> 0
<a> Thread . sleep ( 1000 ) ; </a> 0
<a> for ( int keepIndex = 0 ; keepIndex < keepCount ; keepIndex ++ ) { </a> 0
<a> checkValue ( cache , keepIndex , data ) ; </a> 0
<a> } </a> 0
<a> Thread . sleep ( 1000 ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < ( otherCount - 1 ) ; i ++ ) { </a> 0
<a> String key = Integer . valueOf ( keepCount + i ) . toString ( ) ; </a> 0
<a> assertEquals ( false , hasValue ( cache , key ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ LargeTest </a> 0
<a> public void testConcurrentWritesToSameKey ( ) throws IOException , InterruptedException { </a> 0
<a> final int count = 5 ; </a> 0
<a> final int dataSize = 81 ; </a> 0
<a> final int threadCount = 31 ; </a> 0
<a> final int iterationCount = 10 ; </a> 0
<a> final byte [ ] data = generateBytes ( dataSize ) ; </a> 0
<a> final FileLruCache cache = new FileLruCache ( </a> 0
<a> getContext ( ) , "testConcurrentWritesToSameKey" , limitCacheCount ( count + 1 ) ) ; </a> 0
<a> cache . clearForTest ( ) ; </a> 0
<a> Runnable run = new Runnable ( ) { </a> 0
<a> @ Override </a> 0
<a> public void run ( ) { </a> 0
<a> for ( int iterations = 0 ; iterations < iterationCount ; iterations ++ ) { </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> put ( cache , i , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Thread [ ] threads = new Thread [ threadCount ] ; </a> 0
<a> for ( int i = 0 ; i < threads . length ; i ++ ) { </a> 0
<a> threads [ i ] = new Thread ( run ) ; </a> 0
<a> } </a> 0
<a> for ( Thread thread : threads ) { </a> 0
<a> thread . start ( ) ; </a> 0
<a> } </a> 0
<a> for ( Thread thread : threads ) { </a> 0
<a> thread . join ( 10 * 1000 , 0 ) ; </a> 0
<a> } </a> 0
<a> for ( int i = 0 ; i < count ; i ++ ) { </a> 0
<a> checkValue ( cache , i , data ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> byte [ ] generateBytes ( int n ) { </a> 0
<a> byte [ ] bytes = new byte [ n ] ; </a> 0
<a> random . nextBytes ( bytes ) ; </a> 0
<a> return bytes ; </a> 0
<a> } </a> 0
<a> FileLruCache . Limits limitCacheSize ( int n ) { </a> 0
<a> FileLruCache . Limits limits = new FileLruCache . Limits ( ) ; </a> 0
<a> limits . setByteCount ( n ) ; </a> 0
<a> return limits ; </a> 0
<a> } </a> 0
<a> FileLruCache . Limits limitCacheCount ( int n ) { </a> 0
<a> FileLruCache . Limits limits = new FileLruCache . Limits ( ) ; </a> 0
<a> limits . setFileCount ( n ) ; </a> 0
<a> return limits ; </a> 0
<a> } </a> 0
<a> void put ( FileLruCache cache , int i , byte [ ] data ) { </a> 0
<a> put ( cache , Integer . valueOf ( i ) . toString ( ) , data ) ; </a> 0
<a> } </a> 0
<a> void put ( FileLruCache cache , String key , byte [ ] data ) { </a> 0
<a> try { </a> 0
<a> OutputStream stream = cache . openPutStream ( key ) ; </a> 0
<a> assertNotNull ( stream ) ; </a> 0
<a> stream . write ( data ) ; </a> 0
<a> stream . close ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void checkValue ( FileLruCache cache , int i , byte [ ] expected ) { </a> 0
<a> checkValue ( cache , Integer . valueOf ( i ) . toString ( ) , expected ) ; </a> 0
<a> } </a> 0
<a> void checkValue ( FileLruCache cache , String key , byte [ ] expected ) { </a> 0
<a> try { </a> 0
<a> InputStream stream = cache . get ( key ) ; </a> 0
<a> assertNotNull ( stream ) ; </a> 0
<a> checkInputStream ( expected , stream ) ; </a> 0
<a> stream . close ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> boolean hasValue ( FileLruCache cache , int i ) { </a> 0
<a> return hasValue ( cache , Integer . valueOf ( i ) . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> boolean hasValue ( FileLruCache cache , String key ) { </a> 0
<a> InputStream stream = null ; </a> 0
<a> try { </a> 0
<a> stream = cache . get ( key ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } </a> 0
<a> return stream != null ; </a> 0
<a> } </a> 0
<a> void checkInputStream ( byte [ ] expected , InputStream actual ) { </a> 0
<a> try { </a> 0
<a> for ( int i = 0 ; i < expected . length ; i ++ ) { </a> 0
<a> int b = actual . read ( ) ; </a> 0
<a> assertEquals ( ( ( int ) expected [ i ] ) & 0xff , b ) ; </a> 0
<a> } </a> 0
<a> int eof = actual . read ( ) ; </a> 0
<a> assertEquals ( - 1 , eof ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> void consumeAndClose ( InputStream stream ) { </a> 0
<a> try { </a> 0
<a> byte [ ] buffer = new byte [ 1024 ] ; </a> 0
<a> while ( stream . read ( buffer ) > - 1 ) { </a> 0
<a> } </a> 0
<a> stream . close ( ) ; </a> 0
<a> } catch ( IOException e ) { </a> 0
<a> assertNull ( e ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . model ; </a> 0
<a> import android . test . AndroidTestCase ; </a> 0
<a> import android . test . suitebuilder . annotation . LargeTest ; </a> 0
<a> import android . test . suitebuilder . annotation . MediumTest ; </a> 0
<a> import android . test . suitebuilder . annotation . SmallTest ; </a> 0
<a> import org . json . JSONException ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . util . Collection ; </a> 0
<a> import java . util . HashMap ; </a> 0
<a> import java . util . Map . Entry ; </a> 0
<a> import java . util . Set ; </a> 0
<a> public final class JsonUtilTests extends AndroidTestCase { </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testJsonObjectClear ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> JsonUtil . jsonObjectClear ( jsonObject ) ; </a> 0
<a> assertEquals ( 0 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testJsonObjectContainsValue ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> assertTrue ( JsonUtil . jsonObjectContainsValue ( jsonObject , "pocus" ) ) ; </a> 0
<a> assertFalse ( JsonUtil . jsonObjectContainsValue ( jsonObject , "Fred" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testJsonObjectEntrySet ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> Set < Entry < String , Object > > entrySet = JsonUtil . jsonObjectEntrySet ( jsonObject ) ; </a> 0
<a> assertEquals ( 2 , entrySet . size ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testJsonObjectKeySet ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> Set < String > keySet = JsonUtil . jsonObjectKeySet ( jsonObject ) ; </a> 0
<a> assertEquals ( 2 , keySet . size ( ) ) ; </a> 0
<a> assertTrue ( keySet . contains ( "hello" ) ) ; </a> 0
<a> assertFalse ( keySet . contains ( "world" ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testJsonObjectPutAll ( ) throws JSONException { </a> 0
<a> HashMap < String , Object > map = new HashMap < String , Object > ( ) ; </a> 0
<a> map . put ( "hello" , "world" ) ; </a> 0
<a> map . put ( "hocus" , "pocus" ) ; </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> JsonUtil . jsonObjectPutAll ( jsonObject , map ) ; </a> 0
<a> assertEquals ( "pocus" , jsonObject . get ( "hocus" ) ) ; </a> 0
<a> assertEquals ( 2 , jsonObject . length ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SmallTest @ MediumTest @ LargeTest </a> 0
<a> public void testJsonObjectValues ( ) throws JSONException { </a> 0
<a> JSONObject jsonObject = new JSONObject ( ) ; </a> 0
<a> jsonObject . put ( "hello" , "world" ) ; </a> 0
<a> jsonObject . put ( "hocus" , "pocus" ) ; </a> 0
<a> Collection < Object > values = JsonUtil . jsonObjectValues ( jsonObject ) ; </a> 0
<a> assertEquals ( 2 , values . size ( ) ) ; </a> 0
<a> assertTrue ( values . contains ( "world" ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . booleanog ; </a> 0
<a> import android . app . AlertDialog ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . database . MatrixCursor ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . os . Parcel ; </a> 0
<a> import android . os . Parcelable ; </a> 0
<a> import android . support . v4 . app . FragmentActivity ; </a> 0
<a> import android . support . v4 . app . FragmentManager ; </a> 0
<a> import android . support . v4 . app . FragmentTransaction ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . * ; </a> 0
<a> import com . facebook . widget . FriendPickerFragment ; </a> 0
<a> import com . facebook . widget . UserSettingsFragment ; </a> 0
<a> import com . facebook . widget . PickerFragment ; </a> 0
<a> import java . text . SimpleDateFormat ; </a> 0
<a> import java . util . * ; </a> 0
<a> public class LogicActivity extends FragmentActivity { </a> 0
<a> private static final String TAG = "BooleanOpenGraphSample" ; </a> 0
<a> private static final String SAVE_ACTIVE_TAB = TAG + ".SAVE_ACTIVE_TAB" ; </a> 0
<a> private static final String SAVE_CONTENT_SELECTION = TAG + ".SAVE_CONTENT_SELECTION" ; </a> 0
<a> private static final String SAVE_LEFT_OPERAND_SELECTION = TAG + ".SAVE_LEFT_OPERAND_SELECTION" ; </a> 0
<a> private static final String SAVE_RIGHT_OPERAND_SELECTION = TAG + ".SAVE_RIGHT_OPERAND_SELECTION" ; </a> 0
<a> private static final String SAVE_RESULT_TEXT = TAG + ".SAVE_RESULT_TEXT" ; </a> 0
<a> private static final String SAVE_POST_RESULT_TEXT = TAG + ".SAVE_POST_RESULT_TEXT" ; </a> 0
<a> private static final String SAVE_PENDING = TAG + ".SAVE_PENDING" ; </a> 0
<a> private static final String SAVE_FRIEND_ACTIONS = TAG + ".SAVE_FRIEND_ACTIONS" ; </a> 0
<a> private static final String PENDING_POST_PATH = "PENDING_POST_PATH" ; </a> 0
<a> private static final String PENDING_POST_LEFT = "PENDING_POST_LEFT" ; </a> 0
<a> private static final String PENDING_POST_RIGHT = "PENDING_POST_RIGHT" ; </a> 0
<a> private static final String PENDING_POST_RESULT = "PENDING_POST_RESULT" ; </a> 0
<a> private static final String AND_ACTION = "fb_sample_boolean_og:and" ; </a> 0
<a> private static final String OR_ACTION = "fb_sample_boolean_og:or" ; </a> 0
<a> private static final String POST_AND_ACTION_PATH = "me/" + AND_ACTION ; </a> 0
<a> private static final String POST_OR_ACTION_PATH = "me/" + OR_ACTION ; </a> 0
<a> private static final String TRUE_GRAPH_OBJECT_URL = "http://samples.ogp.me/369360019783304" ; </a> 0
<a> private static final String FALSE_GRAPH_OBJECT_URL = "http://samples.ogp.me/369360256449947" ; </a> 0
<a> private static final String INSTALLED = "installed" ; </a> 0
<a> private static final List < String > PERMISSIONS = Arrays . asList ( "publish_actions" ) ; </a> 0
<a> private static volatile TruthValueGraphObject TRUE_GRAPH_OBJECT ; </a> 0
<a> private static volatile TruthValueGraphObject FALSE_GRAPH_OBJECT ; </a> 0
<a> private static volatile int TRUE_SPINNER_INDEX = - 1 ; </a> 0
<a> private static volatile int FALSE_SPINNER_INDEX = - 1 ; </a> 0
<a> private Button logicButton ; </a> 0
<a> private Button friendsButton ; </a> 0
<a> private Button settingsButton ; </a> 0
<a> private Button contentButton ; </a> 0
<a> private String activeTab ; </a> 0
<a> private ViewGroup logicGroup ; </a> 0
<a> private Spinner leftSpinner ; </a> 0
<a> private Spinner rightSpinner ; </a> 0
<a> private Button andButton ; </a> 0
<a> private Button orButton ; </a> 0
<a> private TextView resultText ; </a> 0
<a> private TextView postResultText ; </a> 0
<a> private Bundle pendingPost ; </a> 0
<a> private ViewGroup friendsGroup ; </a> 0
<a> private FriendPickerFragment friendPickerFragment ; </a> 0
<a> private RequestAsyncTask pendingRequest ; </a> 0
<a> private SimpleCursorAdapter friendActivityAdapter ; </a> 0
<a> private ProgressBar friendActivityProgressBar ; </a> 0
<a> private ArrayList < ActionRow > friendActionList ; </a> 0
<a> private ViewGroup settingsGroup ; </a> 0
<a> private UserSettingsFragment userSettingsFragment ; </a> 0
<a> private ViewGroup contentGroup ; </a> 0
<a> private ImageView contentImage ; </a> 0
<a> private Spinner contentSpinner ; </a> 0
<a> private UiLifecycleHelper uiHelper ; </a> 0
<a> private Session . StatusCallback callback = new Session . StatusCallback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> if ( exception != null ) { </a> 0
<a> pendingPost = null ; </a> 0
<a> } else if ( state == SessionState . OPENED ) { </a> 0
<a> friendPickerFragment . loadData ( false ) ; </a> 0
<a> } else if ( state == SessionState . OPENED_TOKEN_UPDATED ) { </a> 0
<a> sendPendingPost ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> uiHelper = new UiLifecycleHelper ( this , callback ) ; </a> 0
<a> uiHelper . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . main ) ; </a> 0
<a> logicButton = ( Button ) findViewById ( R . id . logic_button ) ; </a> 0
<a> friendsButton = ( Button ) findViewById ( R . id . friends_button ) ; </a> 0
<a> settingsButton = ( Button ) findViewById ( R . id . settings_button ) ; </a> 0
<a> contentButton = ( Button ) findViewById ( R . id . content_button ) ; </a> 0
<a> logicGroup = ( ViewGroup ) findViewById ( R . id . logic_group ) ; </a> 0
<a> leftSpinner = ( Spinner ) findViewById ( R . id . left_spinner ) ; </a> 0
<a> rightSpinner = ( Spinner ) findViewById ( R . id . right_spinner ) ; </a> 0
<a> andButton = ( Button ) findViewById ( R . id . and_button ) ; </a> 0
<a> orButton = ( Button ) findViewById ( R . id . or_button ) ; </a> 0
<a> resultText = ( TextView ) findViewById ( R . id . result_text ) ; </a> 0
<a> postResultText = ( TextView ) findViewById ( R . id . post_result_text ) ; </a> 0
<a> friendsGroup = ( ViewGroup ) findViewById ( R . id . friends_group ) ; </a> 0
<a> ListView friendActivityList = ( ListView ) findViewById ( R . id . friend_activity_list ) ; </a> 0
<a> String [ ] mapColumnNames = { "date" , "action" } ; </a> 0
<a> int [ ] mapViewIds = { R . id . friend_action_date , R . id . friend_action_data } ; </a> 0
<a> friendActivityAdapter = new SimpleCursorAdapter ( this , R . layout . friend_activity_row , createEmptyCursor ( ) , </a> 0
<a> mapColumnNames , mapViewIds ) ; </a> 0
<a> friendActivityList . setAdapter ( friendActivityAdapter ) ; </a> 0
<a> friendActivityProgressBar = ( ProgressBar ) findViewById ( R . id . friend_activity_progress_bar ) ; </a> 0
<a> settingsGroup = ( ViewGroup ) findViewById ( R . id . settings_group ) ; </a> 0
<a> contentGroup = ( ViewGroup ) findViewById ( R . id . content_group ) ; </a> 0
<a> contentImage = ( ImageView ) findViewById ( R . id . content_image ) ; </a> 0
<a> contentSpinner = ( Spinner ) findViewById ( R . id . content_spinner ) ; </a> 0
<a> FragmentManager fragmentManager = getSupportFragmentManager ( ) ; </a> 0
<a> FragmentTransaction transaction = fragmentManager . beginTransaction ( ) ; </a> 0
<a> friendPickerFragment = ( FriendPickerFragment ) fragmentManager . findFragmentById ( R . id . friend_picker_fragment ) ; </a> 0
<a> if ( friendPickerFragment == null ) { </a> 0
<a> Bundle args = new Bundle ( ) ; </a> 0
<a> args . putBoolean ( FriendPickerFragment . SHOW_TITLE_BAR_BUNDLE_KEY , false ) ; </a> 0
<a> friendPickerFragment = new FriendPickerFragment ( args ) ; </a> 0
<a> transaction . add ( R . id . friend_picker_fragment , friendPickerFragment ) ; </a> 0
<a> } </a> 0
<a> userSettingsFragment = ( UserSettingsFragment ) fragmentManager . findFragmentById ( R . id . login_fragment ) ; </a> 0
<a> if ( userSettingsFragment == null ) { </a> 0
<a> userSettingsFragment = new UserSettingsFragment ( ) ; </a> 0
<a> transaction . add ( R . id . login_fragment , userSettingsFragment ) ; </a> 0
<a> } </a> 0
<a> transaction . commit ( ) ; </a> 0
<a> ArrayAdapter < CharSequence > truthAdapter = ArrayAdapter </a> 0
<a> . createFromResource ( this , R . array . truth_values , android . R . layout . simple_spinner_item ) ; </a> 0
<a> truthAdapter . setDropDownViewResource ( android . R . layout . simple_spinner_dropdown_item ) ; </a> 0
<a> leftSpinner . setAdapter ( truthAdapter ) ; </a> 0
<a> rightSpinner . setAdapter ( truthAdapter ) ; </a> 0
<a> contentSpinner . setAdapter ( truthAdapter ) ; </a> 0
<a> leftSpinner . setSelection ( 0 ) ; </a> 0
<a> rightSpinner . setSelection ( 0 ) ; </a> 0
<a> for ( Button button : Arrays . asList ( logicButton , friendsButton , settingsButton , contentButton ) ) { </a> 0
<a> initializeNavigationButton ( button ) ; </a> 0
<a> } </a> 0
<a> initializeCalculationButton ( andButton ) ; </a> 0
<a> initializeCalculationButton ( orButton ) ; </a> 0
<a> friendPickerFragment . setOnErrorListener ( new PickerFragment . OnErrorListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onError ( PickerFragment < ? > fragment , FacebookException error ) { </a> 0
<a> LogicActivity . this . onError ( error ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> friendPickerFragment . setUserId ( "me" ) ; </a> 0
<a> friendPickerFragment . setMultiSelect ( false ) ; </a> 0
<a> friendPickerFragment . setOnSelectionChangedListener ( new PickerFragment . OnSelectionChangedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onSelectionChanged ( PickerFragment < ? > fragment ) { </a> 0
<a> LogicActivity . this . onFriendSelectionChanged ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> friendPickerFragment . setExtraFields ( Arrays . asList ( INSTALLED ) ) ; </a> 0
<a> friendPickerFragment . setFilter ( new PickerFragment . GraphObjectFilter < GraphUser > ( ) { </a> 0
<a> @ Override </a> 0
<a> public boolean includeItem ( GraphUser graphObject ) { </a> 0
<a> Boolean installed = graphObject . cast ( GraphUserWithInstalled . class ) . getInstalled ( ) ; </a> 0
<a> return ( installed != null ) && installed . booleanValue ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> contentSpinner . setOnItemSelectedListener ( new AdapterView . OnItemSelectedListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onItemSelected ( AdapterView < ? > adapterView , View view , int i , long l ) { </a> 0
<a> LogicActivity . this . onContentSelectionChanged ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onNothingSelected ( AdapterView < ? > adapterView ) { </a> 0
<a> LogicActivity . this . onContentSelectionChanged ( ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> Button startButton = logicButton ; </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> leftSpinner . setSelection ( savedInstanceState . getInt ( SAVE_LEFT_OPERAND_SELECTION ) ) ; </a> 0
<a> rightSpinner . setSelection ( savedInstanceState . getInt ( SAVE_RIGHT_OPERAND_SELECTION ) ) ; </a> 0
<a> contentSpinner . setSelection ( savedInstanceState . getInt ( SAVE_CONTENT_SELECTION ) ) ; </a> 0
<a> resultText . setText ( savedInstanceState . getString ( SAVE_RESULT_TEXT ) ) ; </a> 0
<a> postResultText . setText ( savedInstanceState . getString ( SAVE_POST_RESULT_TEXT ) ) ; </a> 0
<a> activeTab = savedInstanceState . getString ( SAVE_ACTIVE_TAB ) ; </a> 0
<a> pendingPost = savedInstanceState . getBundle ( SAVE_PENDING ) ; </a> 0
<a> friendActionList = savedInstanceState . getParcelableArrayList ( SAVE_FRIEND_ACTIONS ) ; </a> 0
<a> if ( ( friendActionList != null ) && ( friendActionList . size ( ) > 0 ) ) { </a> 0
<a> updateCursor ( friendActionList ) ; </a> 0
<a> } </a> 0
<a> if ( getString ( R . string . navigate_friends ) . equals ( activeTab ) ) { </a> 0
<a> startButton = friendsButton ; </a> 0
<a> } else if ( getString ( R . string . navigate_content ) . equals ( activeTab ) ) { </a> 0
<a> startButton = contentButton ; </a> 0
<a> } else if ( getString ( R . string . navigate_settings ) . equals ( activeTab ) ) { </a> 0
<a> startButton = settingsButton ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> if ( ! handleNativeLink ( ) ) { </a> 0
<a> onNavigateButtonClick ( startButton ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onStart ( ) { </a> 0
<a> super . onStart ( ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session != null && session . isOpened ( ) ) { </a> 0
<a> friendPickerFragment . loadData ( false ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onResume ( ) { </a> 0
<a> super . onResume ( ) ; </a> 0
<a> uiHelper . onResume ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> uiHelper . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . putInt ( SAVE_LEFT_OPERAND_SELECTION , leftSpinner . getSelectedItemPosition ( ) ) ; </a> 0
<a> outState . putInt ( SAVE_RIGHT_OPERAND_SELECTION , rightSpinner . getSelectedItemPosition ( ) ) ; </a> 0
<a> outState . putInt ( SAVE_CONTENT_SELECTION , contentSpinner . getSelectedItemPosition ( ) ) ; </a> 0
<a> outState . putString ( SAVE_RESULT_TEXT , resultText . getText ( ) . toString ( ) ) ; </a> 0
<a> outState . putString ( SAVE_POST_RESULT_TEXT , postResultText . getText ( ) . toString ( ) ) ; </a> 0
<a> outState . putString ( SAVE_ACTIVE_TAB , activeTab ) ; </a> 0
<a> outState . putBundle ( SAVE_PENDING , pendingPost ) ; </a> 0
<a> outState . putParcelableArrayList ( SAVE_FRIEND_ACTIONS , friendActionList ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onPause ( ) { </a> 0
<a> super . onPause ( ) ; </a> 0
<a> uiHelper . onPause ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onDestroy ( ) { </a> 0
<a> super . onDestroy ( ) ; </a> 0
<a> uiHelper . onDestroy ( ) ; </a> 0
<a> friendPickerFragment . setOnErrorListener ( null ) ; </a> 0
<a> friendPickerFragment . setOnSelectionChangedListener ( null ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> uiHelper . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> private void initializeNavigationButton ( Button button ) { </a> 0
<a> button . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> onNavigateButtonClick ( ( Button ) view ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void onNavigateButtonClick ( Button source ) { </a> 0
<a> activeTab = source . getText ( ) . toString ( ) ; </a> 0
<a> logicGroup . setVisibility ( getGroupVisibility ( source , logicButton ) ) ; </a> 0
<a> friendsGroup . setVisibility ( getGroupVisibility ( source , friendsButton ) ) ; </a> 0
<a> settingsGroup . setVisibility ( getGroupVisibility ( source , settingsButton ) ) ; </a> 0
<a> contentGroup . setVisibility ( getGroupVisibility ( source , contentButton ) ) ; </a> 0
<a> if ( source == friendsButton ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ( session == null ) || ! session . isOpened ( ) ) { </a> 0
<a> new AlertDialog . Builder ( this ) </a> 0
<a> . setTitle ( R . string . feature_requires_login_title ) </a> 0
<a> . setMessage ( R . string . feature_requires_login_message ) </a> 0
<a> . setPositiveButton ( R . string . ok_button , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private int getGroupVisibility ( Button source , Button groupButton ) { </a> 0
<a> if ( source == groupButton ) { </a> 0
<a> return View . VISIBLE ; </a> 0
<a> } else { </a> 0
<a> return View . GONE ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void initializeCalculationButton ( Button button ) { </a> 0
<a> button . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> onOperationButtonClick ( view ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void onOperationButtonClick ( View view ) { </a> 0
<a> if ( view == andButton ) { </a> 0
<a> onAndButtonClick ( ) ; </a> 0
<a> } else if ( view == orButton ) { </a> 0
<a> onOrButtonClick ( ) ; </a> 0
<a> } else { </a> 0
<a> assert false ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onAndButtonClick ( ) { </a> 0
<a> boolean leftOperand = getSpinnerBoolean ( leftSpinner ) ; </a> 0
<a> boolean rightOperand = getSpinnerBoolean ( rightSpinner ) ; </a> 0
<a> boolean result = leftOperand && rightOperand ; </a> 0
<a> resultText . setText ( getLogicText ( getString ( R . string . and_operation ) , leftOperand , rightOperand , result ) ) ; </a> 0
<a> postAction ( POST_AND_ACTION_PATH , leftOperand , rightOperand , result ) ; </a> 0
<a> } </a> 0
<a> private void onOrButtonClick ( ) { </a> 0
<a> boolean leftOperand = getSpinnerBoolean ( leftSpinner ) ; </a> 0
<a> boolean rightOperand = getSpinnerBoolean ( rightSpinner ) ; </a> 0
<a> boolean result = leftOperand || rightOperand ; </a> 0
<a> resultText . setText ( getLogicText ( getString ( R . string . or_operation ) , leftOperand , rightOperand , result ) ) ; </a> 0
<a> postAction ( POST_OR_ACTION_PATH , leftOperand , rightOperand , result ) ; </a> 0
<a> } </a> 0
<a> private String getLogicText ( String op , boolean leftOperand , boolean rightOperand , boolean result ) { </a> 0
<a> String trueString = getString ( R . string . true_value ) ; </a> 0
<a> String falseString = getString ( R . string . false_value ) ; </a> 0
<a> String arg0String = leftOperand ? trueString : falseString ; </a> 0
<a> String arg1String = rightOperand ? trueString : falseString ; </a> 0
<a> String resultString = result ? trueString : falseString ; </a> 0
<a> return String . format ( "%s %s %s = %s" , arg0String , op , arg1String , resultString ) ; </a> 0
<a> } </a> 0
<a> private void postAction ( final String actionPath , final boolean leftOperand , final boolean rightOperand , </a> 0
<a> final boolean result ) { </a> 0
<a> Bundle post = new Bundle ( ) ; </a> 0
<a> post . putString ( PENDING_POST_PATH , actionPath ) ; </a> 0
<a> post . putBoolean ( PENDING_POST_LEFT , leftOperand ) ; </a> 0
<a> post . putBoolean ( PENDING_POST_RIGHT , rightOperand ) ; </a> 0
<a> post . putBoolean ( PENDING_POST_RESULT , result ) ; </a> 0
<a> pendingPost = post ; </a> 0
<a> sendPendingPost ( ) ; </a> 0
<a> } </a> 0
<a> private void sendPendingPost ( ) { </a> 0
<a> if ( pendingPost == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ( session == null ) || ! session . isOpened ( ) ) { </a> 0
<a> postResultText . setText ( "Not logged in, no post generated." ) ; </a> 0
<a> pendingPost = null ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> List < String > permissions = session . getPermissions ( ) ; </a> 0
<a> if ( ! permissions . containsAll ( PERMISSIONS ) ) { </a> 0
<a> Session . NewPermissionsRequest newPermissionsRequest = new Session . NewPermissionsRequest ( this , PERMISSIONS ) ; </a> 0
<a> session . requestNewPublishPermissions ( newPermissionsRequest ) ; </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> postResultText . setText ( "Posting action..." ) ; </a> 0
<a> String actionPath = pendingPost . getString ( PENDING_POST_PATH ) ; </a> 0
<a> boolean leftOperand = pendingPost . getBoolean ( PENDING_POST_LEFT ) ; </a> 0
<a> boolean rightOperand = pendingPost . getBoolean ( PENDING_POST_RIGHT ) ; </a> 0
<a> boolean result = pendingPost . getBoolean ( PENDING_POST_RESULT ) ; </a> 0
<a> LogicAction action = GraphObject . Factory . create ( LogicAction . class ) ; </a> 0
<a> action . setResult ( result ) ; </a> 0
<a> action . setTruthvalue ( getTruthValueObject ( leftOperand ) ) ; </a> 0
<a> action . setAnothertruthvalue ( getTruthValueObject ( rightOperand ) ) ; </a> 0
<a> Request . Callback callback = new Request . Callback ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCompleted ( Response response ) { </a> 0
<a> onPostActionResponse ( response ) ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> Request request = new Request ( session , actionPath , null , HttpMethod . POST , </a> 0
<a> callback ) ; </a> 0
<a> request . setGraphObject ( action ) ; </a> 0
<a> RequestAsyncTask task = new RequestAsyncTask ( request ) ; </a> 0
<a> task . execute ( ) ; </a> 0
<a> } </a> 0
<a> private void onPostActionResponse ( Response response ) { </a> 0
<a> PostResponse postResponse = response . getGraphObjectAs ( PostResponse . class ) ; </a> 0
<a> if ( postResponse != null && postResponse . getId ( ) != null ) { </a> 0
<a> postResultText . setText ( "Post id = " + postResponse . getId ( ) ) ; </a> 0
<a> } else if ( response . getError ( ) != null ) { </a> 0
<a> postResultText . setText ( response . getError ( ) . getErrorMessage ( ) ) ; </a> 0
<a> } else { </a> 0
<a> postResultText . setText ( "" ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private TruthValueGraphObject getTruthValueObject ( boolean value ) { </a> 0
<a> if ( value ) { </a> 0
<a> if ( TRUE_GRAPH_OBJECT == null ) { </a> 0
<a> TruthValueGraphObject object = GraphObject . Factory </a> 0
<a> . create ( TruthValueGraphObject . class ) ; </a> 0
<a> object . setUrl ( TRUE_GRAPH_OBJECT_URL ) ; </a> 0
<a> TRUE_GRAPH_OBJECT = object ; </a> 0
<a> } </a> 0
<a> return TRUE_GRAPH_OBJECT ; </a> 0
<a> } else { </a> 0
<a> if ( FALSE_GRAPH_OBJECT == null ) { </a> 0
<a> TruthValueGraphObject object = GraphObject . Factory </a> 0
<a> . create ( TruthValueGraphObject . class ) ; </a> 0
<a> object . setUrl ( FALSE_GRAPH_OBJECT_URL ) ; </a> 0
<a> FALSE_GRAPH_OBJECT = object ; </a> 0
<a> } </a> 0
<a> return FALSE_GRAPH_OBJECT ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onFriendSelectionChanged ( ) { </a> 0
<a> GraphUser user = chooseOne ( friendPickerFragment . getSelection ( ) ) ; </a> 0
<a> if ( user != null ) { </a> 0
<a> onChooseFriend ( user . getId ( ) ) ; </a> 0
<a> } else { </a> 0
<a> friendActivityAdapter . changeCursor ( createEmptyCursor ( ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onChooseFriend ( String friendId ) { </a> 0
<a> friendActivityProgressBar . setVisibility ( View . VISIBLE ) ; </a> 0
<a> String andPath = String . format ( "%s/%s" , friendId , AND_ACTION ) ; </a> 0
<a> String orPath = String . format ( "%s/%s" , friendId , OR_ACTION ) ; </a> 0
<a> Request getAnds = new Request ( Session . getActiveSession ( ) , andPath , null , HttpMethod . GET ) ; </a> 0
<a> Request getOrs = new Request ( Session . getActiveSession ( ) , orPath , null , HttpMethod . GET ) ; </a> 0
<a> RequestBatch batch = new RequestBatch ( getAnds , getOrs ) ; </a> 0
<a> if ( pendingRequest != null ) { </a> 0
<a> pendingRequest . cancel ( true ) ; </a> 0
<a> } </a> 0
<a> pendingRequest = new RequestAsyncTask ( batch ) { </a> 0
<a> @ Override </a> 0
<a> protected void onPostExecute ( List < Response > result ) { </a> 0
<a> if ( pendingRequest == this ) { </a> 0
<a> pendingRequest = null ; </a> 0
<a> LogicActivity . this . onPostExecute ( result ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> pendingRequest . execute ( ) ; </a> 0
<a> } </a> 0
<a> private void onPostExecute ( List < Response > result ) { </a> 0
<a> friendActivityProgressBar . setVisibility ( View . GONE ) ; </a> 0
<a> friendActionList = createActionRows ( result ) ; </a> 0
<a> updateCursor ( friendActionList ) ; </a> 0
<a> } </a> 0
<a> private ArrayList < ActionRow > createActionRows ( List < Response > result ) { </a> 0
<a> ArrayList < ActionRow > publishedItems = new ArrayList < ActionRow > ( ) ; </a> 0
<a> for ( Response response : result ) { </a> 0
<a> if ( response . getError ( ) != null ) { </a> 0
<a> continue ; </a> 0
<a> } </a> 0
<a> GraphMultiResult list = response . getGraphObjectAs ( GraphMultiResult . class ) ; </a> 0
<a> List < PublishedLogicAction > listData = list . getData ( ) . castToListOf ( PublishedLogicAction . class ) ; </a> 0
<a> for ( PublishedLogicAction action : listData ) { </a> 0
<a> publishedItems . add ( createActionRow ( action ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Collections . sort ( publishedItems ) ; </a> 0
<a> return publishedItems ; </a> 0
<a> } </a> 0
<a> private void updateCursor ( Iterable < ActionRow > publishedItems ) { </a> 0
<a> MatrixCursor cursor = createEmptyCursor ( ) ; </a> 0
<a> SimpleDateFormat dateFormat = new SimpleDateFormat ( "yyyy-MM-dd" , Locale . getDefault ( ) ) ; </a> 0
<a> int id = 0 ; </a> 0
<a> for ( ActionRow item : publishedItems ) { </a> 0
<a> Object [ ] row = new Object [ 3 ] ; </a> 0
<a> row [ 0 ] = id ++ ; </a> 0
<a> row [ 1 ] = dateFormat . format ( item . publishDate ) ; </a> 0
<a> row [ 2 ] = item . actionText ; </a> 0
<a> cursor . addRow ( row ) ; </a> 0
<a> } </a> 0
<a> friendActivityAdapter . changeCursor ( cursor ) ; </a> 0
<a> friendActivityAdapter . notifyDataSetChanged ( ) ; </a> 0
<a> } </a> 0
<a> private MatrixCursor createEmptyCursor ( ) { </a> 0
<a> String [ ] cursorColumns = { "_ID" , "date" , "action" } ; </a> 0
<a> return new MatrixCursor ( cursorColumns ) ; </a> 0
<a> } </a> 0
<a> private ActionRow createActionRow ( PublishedLogicAction action ) { </a> 0
<a> String actionText = getActionText ( action ) ; </a> 0
<a> Date publishDate = action . getPublishTime ( ) ; </a> 0
<a> return new ActionRow ( actionText , publishDate ) ; </a> 0
<a> } </a> 0
<a> private String getActionText ( PublishedLogicAction action ) { </a> 0
<a> LogicAction actionData = action . getData ( ) ; </a> 0
<a> if ( actionData == null ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> TruthValueGraphObject left = actionData . getTruthvalue ( ) ; </a> 0
<a> TruthValueGraphObject right = actionData . getAnothertruthvalue ( ) ; </a> 0
<a> Boolean actionResult = actionData . getResult ( ) ; </a> 0
<a> String verb = action . getType ( ) ; </a> 0
<a> if ( AND_ACTION . equals ( verb ) ) { </a> 0
<a> verb = getString ( R . string . and_operation ) ; </a> 0
<a> } else if ( OR_ACTION . equals ( verb ) ) { </a> 0
<a> verb = getString ( R . string . or_operation ) ; </a> 0
<a> } </a> 0
<a> if ( ( left == null ) || ( right == null ) || ( actionResult == null ) || ( verb == null ) ) { </a> 0
<a> return "" ; </a> 0
<a> } </a> 0
<a> return String . format ( "%s %s %s = %s" , left . getTitle ( ) , verb , right . getTitle ( ) , actionResult . toString ( ) ) ; </a> 0
<a> } </a> 0
<a> private Boolean getDeepLinkContent ( Uri deepLinkUri ) { </a> 0
<a> if ( deepLinkUri != null ) { </a> 0
<a> String deepLink = deepLinkUri . toString ( ) ; </a> 0
<a> if ( deepLink . startsWith ( TRUE_GRAPH_OBJECT_URL ) ) { </a> 0
<a> return Boolean . TRUE ; </a> 0
<a> } else if ( deepLink . startsWith ( FALSE_GRAPH_OBJECT_URL ) ) { </a> 0
<a> return Boolean . FALSE ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> private void onContentSelectionChanged ( ) { </a> 0
<a> Boolean spinnerBoolean = getSpinnerBoolean ( contentSpinner ) ; </a> 0
<a> if ( Boolean . TRUE . equals ( spinnerBoolean ) ) { </a> 0
<a> contentImage . setVisibility ( View . VISIBLE ) ; </a> 0
<a> contentImage . setImageResource ( R . drawable . true_content ) ; </a> 0
<a> } else if ( Boolean . FALSE . equals ( spinnerBoolean ) ) { </a> 0
<a> contentImage . setVisibility ( View . VISIBLE ) ; </a> 0
<a> contentImage . setImageResource ( R . drawable . false_content ) ; </a> 0
<a> } else { </a> 0
<a> contentImage . setImageResource ( View . INVISIBLE ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private boolean handleNativeLink ( ) { </a> 0
<a> Session existingSession = Session . getActiveSession ( ) ; </a> 0
<a> if ( existingSession == null || ! existingSession . isOpened ( ) ) { </a> 0
<a> AccessToken accessToken = AccessToken . createFromNativeLinkingIntent ( getIntent ( ) ) ; </a> 0
<a> if ( accessToken != null ) { </a> 0
<a> Session newSession = new Session . Builder ( this ) . setTokenCachingStrategy ( new NonCachingTokenCachingStrategy ( ) ) </a> 0
<a> . build ( ) ; </a> 0
<a> newSession . open ( accessToken , null ) ; </a> 0
<a> Session . setActiveSession ( newSession ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> Boolean deepLinkContent = getDeepLinkContent ( getIntent ( ) . getData ( ) ) ; </a> 0
<a> if ( deepLinkContent != null ) { </a> 0
<a> onNavigateButtonClick ( contentButton ) ; </a> 0
<a> contentSpinner . setSelection ( getSpinnerPosition ( deepLinkContent ) ) ; </a> 0
<a> return true ; </a> 0
<a> } </a> 0
<a> return false ; </a> 0
<a> } </a> 0
<a> private int getSpinnerPosition ( Boolean value ) { </a> 0
<a> initializeSpinnerIndexes ( ) ; </a> 0
<a> if ( Boolean . TRUE . equals ( value ) ) { </a> 0
<a> return TRUE_SPINNER_INDEX ; </a> 0
<a> } else if ( Boolean . FALSE . equals ( value ) ) { </a> 0
<a> return FALSE_SPINNER_INDEX ; </a> 0
<a> } else { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private Boolean getSpinnerBoolean ( Spinner spinner ) { </a> 0
<a> initializeSpinnerIndexes ( ) ; </a> 0
<a> int position = spinner . getSelectedItemPosition ( ) ; </a> 0
<a> if ( position == TRUE_SPINNER_INDEX ) { </a> 0
<a> return Boolean . TRUE ; </a> 0
<a> } else if ( position == FALSE_SPINNER_INDEX ) { </a> 0
<a> return Boolean . FALSE ; </a> 0
<a> } else { </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void initializeSpinnerIndexes ( ) { </a> 0
<a> if ( ( TRUE_SPINNER_INDEX < 0 ) || ( FALSE_SPINNER_INDEX < 0 ) ) { </a> 0
<a> String [ ] truthArray = getResources ( ) . getStringArray ( R . array . truth_values ) ; </a> 0
<a> List < String > truthList = Arrays . asList ( truthArray ) ; </a> 0
<a> TRUE_SPINNER_INDEX = truthList . indexOf ( getString ( R . string . true_value ) ) ; </a> 0
<a> FALSE_SPINNER_INDEX = truthList . indexOf ( getString ( R . string . false_value ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onError ( Exception error ) { </a> 0
<a> showErrorMessage ( error . getMessage ( ) ) ; </a> 0
<a> } </a> 0
<a> private void showErrorMessage ( String message ) { </a> 0
<a> new AlertDialog . Builder ( this ) </a> 0
<a> . setTitle ( R . string . error_dialog_title ) </a> 0
<a> . setMessage ( message ) </a> 0
<a> . setPositiveButton ( R . string . ok_button , null ) </a> 0
<a> . show ( ) ; </a> 0
<a> } </a> 0
<a> private < T > T chooseOne ( List < T > ts ) { </a> 0
<a> for ( T t : ts ) { </a> 0
<a> return t ; </a> 0
<a> } </a> 0
<a> return null ; </a> 0
<a> } </a> 0
<a> private interface GraphUserWithInstalled extends GraphUser { </a> 0
<a> Boolean getInstalled ( ) ; </a> 0
<a> } </a> 0
<a> private static class ActionRow implements Comparable < ActionRow > , Parcelable { </a> 0
<a> final String actionText ; </a> 0
<a> final Date publishDate ; </a> 0
<a> ActionRow ( String actionText , Date publishDate ) { </a> 0
<a> this . actionText = actionText ; </a> 0
<a> this . publishDate = publishDate ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int compareTo ( ActionRow other ) { </a> 0
<a> if ( other == null ) { </a> 0
<a> return 1 ; </a> 0
<a> } else { </a> 0
<a> return publishDate . compareTo ( other . publishDate ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public int describeContents ( ) { </a> 0
<a> return 0 ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void writeToParcel ( Parcel parcel , int flags ) { </a> 0
<a> parcel . writeString ( actionText ) ; </a> 0
<a> parcel . writeLong ( publishDate . getTime ( ) ) ; </a> 0
<a> } </a> 0
<a> @ SuppressWarnings ( "unused" ) </a> 0
<a> public final Creator < ActionRow > CREATOR = new Creator < ActionRow > ( ) { </a> 0
<a> @ Override </a> 0
<a> public ActionRow createFromParcel ( Parcel parcel ) { </a> 0
<a> String actionText = parcel . readString ( ) ; </a> 0
<a> Date publishDate = new Date ( parcel . readLong ( ) ) ; </a> 0
<a> return new ActionRow ( actionText , publishDate ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public ActionRow [ ] newArray ( int size ) { </a> 0
<a> return new ActionRow [ size ] ; </a> 0
<a> } </a> 0
<a> } ; </a> 0
<a> } </a> 0
<a> private interface TruthValueGraphObject extends GraphObject { </a> 0
<a> void setUrl ( String url ) ; </a> 0
<a> String getTitle ( ) ; </a> 0
<a> } </a> 0
<a> private interface LogicAction extends OpenGraphAction { </a> 0
<a> Boolean getResult ( ) ; </a> 0
<a> void setResult ( Boolean result ) ; </a> 0
<a> TruthValueGraphObject getTruthvalue ( ) ; </a> 0
<a> void setTruthvalue ( TruthValueGraphObject truthvalue ) ; </a> 0
<a> TruthValueGraphObject getAnothertruthvalue ( ) ; </a> 0
<a> void setAnothertruthvalue ( TruthValueGraphObject anothertruthvalue ) ; </a> 0
<a> } </a> 0
<a> private interface PublishedLogicAction extends OpenGraphAction { </a> 0
<a> LogicAction getData ( ) ; </a> 0
<a> String getType ( ) ; </a> 0
<a> } </a> 0
<a> private interface PostResponse extends GraphObject { </a> 0
<a> String getId ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import com . facebook . android . Facebook . DialogListener ; </a> 0
<a> public abstract class BaseDialogListener implements DialogListener { </a> 0
<a> @ Override </a> 0
<a> public void onFacebookError ( FacebookError e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onError ( DialogError e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onCancel ( ) { </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . android ; </a> 0
<a> import android . app . Application ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . database . Cursor ; </a> 0
<a> import android . graphics . Bitmap ; </a> 0
<a> import android . graphics . BitmapFactory ; </a> 0
<a> import android . graphics . Matrix ; </a> 0
<a> import android . net . Uri ; </a> 0
<a> import android . net . http . AndroidHttpClient ; </a> 0
<a> import android . provider . MediaStore ; </a> 0
<a> import org . json . JSONObject ; </a> 0
<a> import java . io . * ; </a> 0
<a> import java . net . URL ; </a> 0
<a> import java . net . URLConnection ; </a> 0
<a> import java . util . Hashtable ; </a> 0
<a> public class Utility extends Application { </a> 0
<a> public static Facebook mFacebook ; </a> 0
<a> @ SuppressWarnings ( "deprecation" ) </a> 0
<a> public static AsyncFacebookRunner mAsyncRunner ; </a> 0
<a> public static JSONObject mFriendsList ; </a> 0
<a> public static String userUID = null ; </a> 0
<a> public static String objectID = null ; </a> 0
<a> public static FriendsGetProfilePics model ; </a> 0
<a> public static AndroidHttpClient httpclient = null ; </a> 0
<a> public static Hashtable < String , String > currentPermissions = new Hashtable < String , String > ( ) ; </a> 0
<a> private static int MAX_IMAGE_DIMENSION = 720 ; </a> 0
<a> public static final String HACK_ICON_URL = "http://www.facebookmobileweb.com/hackbook/img/facebook_icon_large.png" ; </a> 0
<a> public static Bitmap getBitmap ( String url ) { </a> 0
<a> Bitmap bm = null ; </a> 0
<a> try { </a> 0
<a> URL aURL = new URL ( url ) ; </a> 0
<a> URLConnection conn = aURL . openConnection ( ) ; </a> 0
<a> conn . connect ( ) ; </a> 0
<a> InputStream is = conn . getInputStream ( ) ; </a> 0
<a> BufferedInputStream bis = new BufferedInputStream ( is ) ; </a> 0
<a> bm = BitmapFactory . decodeStream ( new FlushedInputStream ( is ) ) ; </a> 0
<a> bis . close ( ) ; </a> 0
<a> is . close ( ) ; </a> 0
<a> } catch ( Exception e ) { </a> 0
<a> e . printStackTrace ( ) ; </a> 0
<a> } finally { </a> 0
<a> if ( httpclient != null ) { </a> 0
<a> httpclient . close ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> return bm ; </a> 0
<a> } </a> 0
<a> static class FlushedInputStream extends FilterInputStream { </a> 0
<a> public FlushedInputStream ( InputStream inputStream ) { </a> 0
<a> super ( inputStream ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public long skip ( long n ) throws IOException { </a> 0
<a> long totalBytesSkipped = 0L ; </a> 0
<a> while ( totalBytesSkipped < n ) { </a> 0
<a> long bytesSkipped = in . skip ( n - totalBytesSkipped ) ; </a> 0
<a> if ( bytesSkipped == 0L ) { </a> 0
<a> int b = read ( ) ; </a> 0
<a> if ( b < 0 ) { </a> 0
<a> break ; </a> 0
<a> } else { </a> 0
<a> bytesSkipped = 1 ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> totalBytesSkipped += bytesSkipped ; </a> 0
<a> } </a> 0
<a> return totalBytesSkipped ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> public static byte [ ] scaleImage ( Context context , Uri photoUri ) throws IOException { </a> 0
<a> InputStream is = context . getContentResolver ( ) . openInputStream ( photoUri ) ; </a> 0
<a> BitmapFactory . Options dbo = new BitmapFactory . Options ( ) ; </a> 0
<a> dbo . inJustDecodeBounds = true ; </a> 0
<a> BitmapFactory . decodeStream ( is , null , dbo ) ; </a> 0
<a> is . close ( ) ; </a> 0
<a> int rotatedWidth , rotatedHeight ; </a> 0
<a> int orientation = getOrientation ( context , photoUri ) ; </a> 0
<a> if ( orientation == 90 || orientation == 270 ) { </a> 0
<a> rotatedWidth = dbo . outHeight ; </a> 0
<a> rotatedHeight = dbo . outWidth ; </a> 0
<a> } else { </a> 0
<a> rotatedWidth = dbo . outWidth ; </a> 0
<a> rotatedHeight = dbo . outHeight ; </a> 0
<a> } </a> 0
<a> Bitmap srcBitmap ; </a> 0
<a> is = context . getContentResolver ( ) . openInputStream ( photoUri ) ; </a> 0
<a> if ( rotatedWidth > MAX_IMAGE_DIMENSION || rotatedHeight > MAX_IMAGE_DIMENSION ) { </a> 0
<a> float widthRatio = ( ( float ) rotatedWidth ) / ( ( float ) MAX_IMAGE_DIMENSION ) ; </a> 0
<a> float heightRatio = ( ( float ) rotatedHeight ) / ( ( float ) MAX_IMAGE_DIMENSION ) ; </a> 0
<a> float maxRatio = Math . max ( widthRatio , heightRatio ) ; </a> 0
<a> BitmapFactory . Options options = new BitmapFactory . Options ( ) ; </a> 0
<a> options . inSampleSize = ( int ) maxRatio ; </a> 0
<a> srcBitmap = BitmapFactory . decodeStream ( is , null , options ) ; </a> 0
<a> } else { </a> 0
<a> srcBitmap = BitmapFactory . decodeStream ( is ) ; </a> 0
<a> } </a> 0
<a> is . close ( ) ; </a> 0
<a> if ( orientation > 0 ) { </a> 0
<a> Matrix matrix = new Matrix ( ) ; </a> 0
<a> matrix . postRotate ( orientation ) ; </a> 0
<a> srcBitmap = Bitmap . createBitmap ( srcBitmap , 0 , 0 , srcBitmap . getWidth ( ) , </a> 0
<a> srcBitmap . getHeight ( ) , matrix , true ) ; </a> 0
<a> } </a> 0
<a> String type = context . getContentResolver ( ) . getType ( photoUri ) ; </a> 0
<a> ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; </a> 0
<a> if ( type . equals ( "image/png" ) ) { </a> 0
<a> srcBitmap . compress ( Bitmap . CompressFormat . PNG , 100 , baos ) ; </a> 0
<a> } else if ( type . equals ( "image/jpg" ) || type . equals ( "image/jpeg" ) ) { </a> 0
<a> srcBitmap . compress ( Bitmap . CompressFormat . JPEG , 100 , baos ) ; </a> 0
<a> } </a> 0
<a> byte [ ] bMapArray = baos . toByteArray ( ) ; </a> 0
<a> baos . close ( ) ; </a> 0
<a> return bMapArray ; </a> 0
<a> } </a> 0
<a> public static int getOrientation ( Context context , Uri photoUri ) { </a> 0
<a> Cursor cursor = context . getContentResolver ( ) . query ( photoUri , </a> 0
<a> new String [ ] { MediaStore . Images . ImageColumns . ORIENTATION } , null , null , null ) ; </a> 0
<a> if ( cursor . getCount ( ) != 1 ) { </a> 0
<a> return - 1 ; </a> 0
<a> } </a> 0
<a> cursor . moveToFirst ( ) ; </a> 0
<a> int orientation = cursor . getInt ( 0 ) ; </a> 0
<a> cursor . close ( ) ; </a> 0
<a> return orientation ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . profilepicture ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . support . v4 . app . Fragment ; </a> 0
<a> import android . view . LayoutInflater ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . ViewGroup ; </a> 0
<a> import android . widget . * ; </a> 0
<a> import com . facebook . widget . ProfilePictureView ; </a> 0
<a> import java . util . Date ; </a> 0
<a> import java . util . Random ; </a> 0
<a> public class ProfilePictureSampleFragment extends Fragment { </a> 0
<a> private static final int MAX_CUSTOM_SIZES = 6 ; </a> 0
<a> private static final int DEFAULT_SIZE_INCREMENT = MAX_CUSTOM_SIZES / 2 ; </a> 0
<a> private static final String PICTURE_SIZE_TYPE_KEY = "PictureSizeType" ; </a> 0
<a> private static final String [ ] INTERESTING_IDS = { </a> 0
<a> "zuck" , </a> 0
<a> "barackobama" , </a> 0
<a> "mittromney" , </a> 0
<a> "johnmccain" , </a> 0
<a> "johnkerry" , </a> 0
<a> "georgewbush" , </a> 0
<a> "algore" , </a> 0
<a> "Disneyland" , </a> 0
<a> "SpaceNeedle" , </a> 0
<a> "TourEiffel" , </a> 0
<a> "sydneyoperahouse" , </a> 0
<a> "166020963458360" , </a> 0
<a> "108084865880237" , </a> 0
<a> "140447466087679" , </a> 0
<a> "111825495501392" , </a> 0
<a> "108168249210849" , </a> 0
<a> "TiffaniThiessen" , </a> 0
<a> "108126672542534" , </a> 0
<a> "112886105391693" , </a> 0
<a> "MarioLopezExtra" , </a> 0
<a> "108504145837165" , </a> 0
<a> "dennishaskins" , </a> 0
<a> "7220821999" , </a> 0
<a> "31938132882" , </a> 0
<a> "108023262558391" , </a> 0
<a> "209263392372" , </a> 0
<a> "104132506290482" , </a> 0
<a> "9721897972" , </a> 0
<a> "5461947317" , </a> 0
<a> "57084011597" , </a> 0
<a> "24408579964" , </a> 0
<a> "111980872152571" , </a> 0
<a> "112427772106500" , </a> 0
<a> "113415525338717" , </a> 0
<a> "105628452803615" , </a> 0
<a> "105533779480538" , </a> 0
<a> } ; </a> 0
<a> private int pictureSizeType = ProfilePictureView . CUSTOM ; </a> 0
<a> private String firstUserId ; </a> 0
<a> private Random randomGenerator ; </a> 0
<a> private ProfilePictureView profilePic ; </a> 0
<a> private Button smallerButton ; </a> 0
<a> private Button largerButton ; </a> 0
<a> private TextView sizeLabel ; </a> 0
<a> private View presetSizeView ; </a> 0
<a> private SeekBar customSizeView ; </a> 0
<a> private CheckBox cropToggle ; </a> 0
<a> @ Override </a> 0
<a> public View onCreateView ( LayoutInflater inflater , ViewGroup parent , Bundle savedInstanceState ) { </a> 0
<a> View fragmentView = inflater . inflate ( R . layout . fragment_profile_picture_sample , parent , false ) ; </a> 0
<a> randomGenerator = new Random ( ( new Date ( ) ) . getTime ( ) ) ; </a> 0
<a> profilePic = ( ProfilePictureView ) fragmentView . findViewById ( R . id . profilepic ) ; </a> 0
<a> smallerButton = ( Button ) fragmentView . findViewById ( R . id . smallerButton ) ; </a> 0
<a> largerButton = ( Button ) fragmentView . findViewById ( R . id . largerButton ) ; </a> 0
<a> sizeLabel = ( TextView ) fragmentView . findViewById ( R . id . sizeLabel ) ; </a> 0
<a> presetSizeView = fragmentView . findViewById ( R . id . presetSizeView ) ; </a> 0
<a> customSizeView = ( SeekBar ) fragmentView . findViewById ( R . id . customSizeView ) ; </a> 0
<a> cropToggle = ( CheckBox ) fragmentView . findViewById ( R . id . squareCropToggle ) ; </a> 0
<a> LinearLayout container = ( LinearLayout ) fragmentView . findViewById ( R . id . userbuttoncontainer ) ; </a> 0
<a> int numChildren = container . getChildCount ( ) ; </a> 0
<a> for ( int i = 0 ; i < numChildren ; i ++ ) { </a> 0
<a> View childView = container . getChildAt ( i ) ; </a> 0
<a> Object tag = childView . getTag ( ) ; </a> 0
<a> if ( childView instanceof Button ) { </a> 0
<a> setupUserButton ( ( Button ) childView ) ; </a> 0
<a> if ( i == 0 ) { </a> 0
<a> firstUserId = tag . toString ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<a> cropToggle . setOnCheckedChangeListener ( new CheckBox . OnCheckedChangeListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onCheckedChanged ( CompoundButton checkbox , boolean checked ) { </a> 0
<a> profilePic . setCropped ( checked ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> final Button sizeToggle = ( Button ) fragmentView . findViewById ( R . id . sizeToggle ) ; </a> 0
<a> sizeToggle . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> if ( pictureSizeType != ProfilePictureView . CUSTOM ) { </a> 0
<a> sizeToggle . setText ( R . string . preset_size_button_text ) ; </a> 0
<a> switchToCustomSize ( ) ; </a> 0
<a> } else { </a> 0
<a> sizeToggle . setText ( R . string . custom_size_button_text ) ; </a> 0
<a> switchToPresetSize ( ProfilePictureView . LARGE ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> smallerButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> switch ( profilePic . getPresetSize ( ) ) { </a> 0
<a> case ProfilePictureView . LARGE : </a> 0
<a> switchToPresetSize ( ProfilePictureView . NORMAL ) ; </a> 0
<a> break ; </a> 0
<a> case ProfilePictureView . NORMAL : </a> 0
<a> switchToPresetSize ( ProfilePictureView . SMALL ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> largerButton . setOnClickListener ( new View . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View view ) { </a> 0
<a> switch ( profilePic . getPresetSize ( ) ) { </a> 0
<a> case ProfilePictureView . NORMAL : </a> 0
<a> switchToPresetSize ( ProfilePictureView . LARGE ) ; </a> 0
<a> break ; </a> 0
<a> case ProfilePictureView . SMALL : </a> 0
<a> switchToPresetSize ( ProfilePictureView . NORMAL ) ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> customSizeView . setMax ( MAX_CUSTOM_SIZES ) ; </a> 0
<a> customSizeView . setOnSeekBarChangeListener ( new SeekBar . OnSeekBarChangeListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onProgressChanged ( SeekBar seekBar , int i , boolean b ) { </a> 0
<a> updateProfilePicForCustomSizeIncrement ( i ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onStartTrackingTouch ( SeekBar seekBar ) { </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onStopTrackingTouch ( SeekBar seekBar ) { </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> restoreState ( savedInstanceState ) ; </a> 0
<a> return fragmentView ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> outState . putInt ( PICTURE_SIZE_TYPE_KEY , pictureSizeType ) ; </a> 0
<a> } </a> 0
<a> private void restoreState ( Bundle savedInstanceState ) { </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> pictureSizeType = savedInstanceState . getInt ( </a> 0
<a> PICTURE_SIZE_TYPE_KEY , ProfilePictureView . LARGE ) ; </a> 0
<a> if ( pictureSizeType == ProfilePictureView . CUSTOM ) { </a> 0
<a> switchToCustomSize ( ) ; </a> 0
<a> } else { </a> 0
<a> switchToPresetSize ( pictureSizeType ) ; </a> 0
<a> } </a> 0
<a> } else { </a> 0
<a> switchToPresetSize ( ProfilePictureView . LARGE ) ; </a> 0
<a> profilePic . setCropped ( cropToggle . isChecked ( ) ) ; </a> 0
<a> profilePic . setProfileId ( firstUserId ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void setupUserButton ( Button b ) { </a> 0
<a> b . setOnClickListener ( new Button . OnClickListener ( ) { </a> 0
<a> @ Override </a> 0
<a> public void onClick ( View v ) { </a> 0
<a> Object tag = v . getTag ( ) ; </a> 0
<a> String userId = null ; </a> 0
<a> if ( tag != null ) { </a> 0
<a> userId = tag . toString ( ) ; </a> 0
<a> } else { </a> 0
<a> userId = INTERESTING_IDS [ randomGenerator . nextInt ( INTERESTING_IDS . length ) ] ; </a> 0
<a> } </a> 0
<a> profilePic . setProfileId ( userId ) ; </a> 0
<a> } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> private void switchToCustomSize ( ) { </a> 0
<a> pictureSizeType = ProfilePictureView . CUSTOM ; </a> 0
<a> presetSizeView . setVisibility ( View . GONE ) ; </a> 0
<a> customSizeView . setVisibility ( View . VISIBLE ) ; </a> 0
<a> profilePic . setPresetSize ( pictureSizeType ) ; </a> 0
<a> customSizeView . setProgress ( DEFAULT_SIZE_INCREMENT ) ; </a> 0
<a> updateProfilePicForCustomSizeIncrement ( DEFAULT_SIZE_INCREMENT ) ; </a> 0
<a> } </a> 0
<a> private void switchToPresetSize ( int sizeType ) { </a> 0
<a> customSizeView . setVisibility ( View . GONE ) ; </a> 0
<a> presetSizeView . setVisibility ( View . VISIBLE ) ; </a> 0
<a> switch ( sizeType ) { </a> 0
<a> case ProfilePictureView . SMALL : </a> 0
<a> largerButton . setEnabled ( true ) ; </a> 0
<a> smallerButton . setEnabled ( false ) ; </a> 0
<a> sizeLabel . setText ( R . string . small_image_size ) ; </a> 0
<a> pictureSizeType = sizeType ; </a> 0
<a> break ; </a> 0
<a> case ProfilePictureView . NORMAL : </a> 0
<a> largerButton . setEnabled ( true ) ; </a> 0
<a> smallerButton . setEnabled ( true ) ; </a> 0
<a> sizeLabel . setText ( R . string . normal_image_size ) ; </a> 0
<a> pictureSizeType = sizeType ; </a> 0
<a> break ; </a> 0
<a> case ProfilePictureView . LARGE : </a> 0
<a> default : </a> 0
<a> largerButton . setEnabled ( false ) ; </a> 0
<a> smallerButton . setEnabled ( true ) ; </a> 0
<a> sizeLabel . setText ( R . string . large_image_size ) ; </a> 0
<a> pictureSizeType = ProfilePictureView . LARGE ; </a> 0
<a> break ; </a> 0
<a> } </a> 0
<a> LinearLayout . LayoutParams params = new LinearLayout . LayoutParams ( </a> 0
<a> 0 , </a> 0
<a> ViewGroup . LayoutParams . WRAP_CONTENT , </a> 0
<a> 1 </a> 0
<a> ) ; </a> 0
<a> profilePic . setLayoutParams ( params ) ; </a> 0
<a> profilePic . setPresetSize ( pictureSizeType ) ; </a> 0
<a> } </a> 0
<a> private void updateProfilePicForCustomSizeIncrement ( int i ) { </a> 0
<a> if ( pictureSizeType != ProfilePictureView . CUSTOM ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> float width = ( i * 21 ) + 51 ; </a> 0
<a> float height = ( i * 28 ) + 68 ; </a> 0
<a> LinearLayout . LayoutParams params = new LinearLayout . LayoutParams ( </a> 0
<a> ( int ) ( width * getResources ( ) . getDisplayMetrics ( ) . density ) , </a> 0
<a> ( int ) ( height * getResources ( ) . getDisplayMetrics ( ) . density ) ) ; </a> 0
<a> profilePic . setLayoutParams ( params ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . sessionlogin ; </a> 0
<a> import android . app . Activity ; </a> 0
<a> import android . content . Intent ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import android . view . View ; </a> 0
<a> import android . view . View . OnClickListener ; </a> 0
<a> import android . widget . Button ; </a> 0
<a> import android . widget . TextView ; </a> 0
<a> import com . facebook . LoggingBehavior ; </a> 0
<a> import com . facebook . Session ; </a> 0
<a> import com . facebook . SessionState ; </a> 0
<a> import com . facebook . Settings ; </a> 0
<a> public class LoginUsingActivityActivity extends Activity { </a> 0
<a> private static final String URL_PREFIX_FRIENDS = "https://graph.facebook.com/me/friends?access_token=" ; </a> 0
<a> private TextView textInstructionsOrLink ; </a> 0
<a> private Button buttonLoginLogout ; </a> 0
<a> private Session . StatusCallback statusCallback = new SessionStatusCallback ( ) ; </a> 0
<a> @ Override </a> 0
<a> public void onCreate ( Bundle savedInstanceState ) { </a> 0
<a> super . onCreate ( savedInstanceState ) ; </a> 0
<a> setContentView ( R . layout . activity ) ; </a> 0
<a> buttonLoginLogout = ( Button ) findViewById ( R . id . buttonLoginLogout ) ; </a> 0
<a> textInstructionsOrLink = ( TextView ) findViewById ( R . id . instructionsOrLink ) ; </a> 0
<a> Settings . addLoggingBehavior ( LoggingBehavior . INCLUDE_ACCESS_TOKENS ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session == null ) { </a> 0
<a> if ( savedInstanceState != null ) { </a> 0
<a> session = Session . restoreSession ( this , null , statusCallback , savedInstanceState ) ; </a> 0
<a> } </a> 0
<a> if ( session == null ) { </a> 0
<a> session = new Session ( this ) ; </a> 0
<a> } </a> 0
<a> Session . setActiveSession ( session ) ; </a> 0
<a> if ( session . getState ( ) . equals ( SessionState . CREATED_TOKEN_LOADED ) ) { </a> 0
<a> session . openForRead ( new Session . OpenRequest ( this ) . setCallback ( statusCallback ) ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> updateView ( ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onStart ( ) { </a> 0
<a> super . onStart ( ) ; </a> 0
<a> Session . getActiveSession ( ) . addCallback ( statusCallback ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onStop ( ) { </a> 0
<a> super . onStop ( ) ; </a> 0
<a> Session . getActiveSession ( ) . removeCallback ( statusCallback ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> public void onActivityResult ( int requestCode , int resultCode , Intent data ) { </a> 0
<a> super . onActivityResult ( requestCode , resultCode , data ) ; </a> 0
<a> Session . getActiveSession ( ) . onActivityResult ( this , requestCode , resultCode , data ) ; </a> 0
<a> } </a> 0
<a> @ Override </a> 0
<a> protected void onSaveInstanceState ( Bundle outState ) { </a> 0
<a> super . onSaveInstanceState ( outState ) ; </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> Session . saveSession ( session , outState ) ; </a> 0
<a> } </a> 0
<a> private void updateView ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( session . isOpened ( ) ) { </a> 0
<a> textInstructionsOrLink . setText ( URL_PREFIX_FRIENDS + session . getAccessToken ( ) ) ; </a> 0
<a> buttonLoginLogout . setText ( R . string . logout ) ; </a> 0
<a> buttonLoginLogout . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { onClickLogout ( ) ; } </a> 0
<a> } ) ; </a> 0
<a> } else { </a> 0
<a> textInstructionsOrLink . setText ( R . string . instructions ) ; </a> 0
<a> buttonLoginLogout . setText ( R . string . login ) ; </a> 0
<a> buttonLoginLogout . setOnClickListener ( new OnClickListener ( ) { </a> 0
<a> public void onClick ( View view ) { onClickLogin ( ) ; } </a> 0
<a> } ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onClickLogin ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ! session . isOpened ( ) && ! session . isClosed ( ) ) { </a> 0
<a> session . openForRead ( new Session . OpenRequest ( this ) . setCallback ( statusCallback ) ) ; </a> 0
<a> } else { </a> 0
<a> Session . openActiveSession ( this , true , statusCallback ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private void onClickLogout ( ) { </a> 0
<a> Session session = Session . getActiveSession ( ) ; </a> 0
<a> if ( ! session . isClosed ( ) ) { </a> 0
<a> session . closeAndClearTokenInformation ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> private class SessionStatusCallback implements Session . StatusCallback { </a> 0
<a> @ Override </a> 0
<a> public void call ( Session session , SessionState state , Exception exception ) { </a> 0
<a> updateView ( ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
<START_FILE>
<a> </a> 0
<a> package com . facebook . samples . switchuser ; </a> 0
<a> import android . content . Context ; </a> 0
<a> import android . os . Bundle ; </a> 0
<a> import com . facebook . * ; </a> 0
<a> import com . facebook . model . GraphUser ; </a> 0
<a> public class Slot { </a> 0
<a> private static final String CACHE_NAME_FORMAT = "TokenCache%d" ; </a> 0
<a> private static final String CACHE_USER_ID_KEY = "SwitchUserSampleUserId" ; </a> 0
<a> private static final String CACHE_USER_NAME_KEY = "SwitchUserSampleUserName" ; </a> 0
<a> private String tokenCacheName ; </a> 0
<a> private String userName ; </a> 0
<a> private String userId ; </a> 0
<a> private SharedPreferencesTokenCachingStrategy tokenCache ; </a> 0
<a> private SessionLoginBehavior loginBehavior ; </a> 0
<a> public Slot ( Context context , int slotNumber , SessionLoginBehavior loginBehavior ) { </a> 0
<a> this . loginBehavior = loginBehavior ; </a> 0
<a> this . tokenCacheName = String . format ( CACHE_NAME_FORMAT , slotNumber ) ; </a> 0
<a> this . tokenCache = new SharedPreferencesTokenCachingStrategy ( </a> 0
<a> context , </a> 0
<a> tokenCacheName ) ; </a> 0
<a> restore ( ) ; </a> 0
<a> } </a> 0
<a> public String getTokenCacheName ( ) { </a> 0
<a> return tokenCacheName ; </a> 0
<a> } </a> 0
<a> public String getUserName ( ) { </a> 0
<a> return userName ; </a> 0
<a> } </a> 0
<a> public String getUserId ( ) { </a> 0
<a> return userId ; </a> 0
<a> } </a> 0
<a> public SessionLoginBehavior getLoginBehavior ( ) { </a> 0
<a> return loginBehavior ; </a> 0
<a> } </a> 0
<a> public SharedPreferencesTokenCachingStrategy getTokenCache ( ) { </a> 0
<a> return tokenCache ; </a> 0
<a> } </a> 0
<a> public void update ( GraphUser user ) { </a> 0
<a> if ( user == null ) { </a> 0
<a> return ; </a> 0
<a> } </a> 0
<a> userId = user . getId ( ) ; </a> 0
<a> userName = user . getName ( ) ; </a> 0
<a> Bundle userInfo = tokenCache . load ( ) ; </a> 0
<a> userInfo . putString ( CACHE_USER_ID_KEY , userId ) ; </a> 0
<a> userInfo . putString ( CACHE_USER_NAME_KEY , userName ) ; </a> 0
<a> tokenCache . save ( userInfo ) ; </a> 0
<a> } </a> 0
<a> public void clear ( ) { </a> 0
<a> tokenCache . clear ( ) ; </a> 0
<a> restore ( ) ; </a> 0
<a> } </a> 0
<a> private void restore ( ) { </a> 0
<a> Bundle userInfo = tokenCache . load ( ) ; </a> 0
<a> userId = userInfo . getString ( CACHE_USER_ID_KEY ) ; </a> 0
<a> userName = userInfo . getString ( CACHE_USER_NAME_KEY ) ; </a> 0
<a> } </a> 0
<a> } </a> 0
<END_FILE>
